
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000051a  00800200  00006fc2  00007056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  0080071a  0080071a  00007570  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000075cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  0000760c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a774  00000000  00000000  00007d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021b2  00000000  00000000  00012500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005fb0  00000000  00000000  000146b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000192c  00000000  00000000  0001a664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ecd  00000000  00000000  0001bf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad0b  00000000  00000000  0001ee5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000850  00000000  00000000  00029b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_3>
      10:	0c 94 96 14 	jmp	0x292c	; 0x292c <__vector_4>
      14:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a5 2e 	jmp	0x5d4a	; 0x5d4a <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	cd e6       	ldi	r28, 0x6D	; 109
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	e2 ec       	ldi	r30, 0xC2	; 194
     25a:	ff e6       	ldi	r31, 0x6F	; 111
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	aa 31       	cpi	r26, 0x1A	; 26
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2b e1       	ldi	r18, 0x1B	; 27
     26e:	aa e1       	ldi	r26, 0x1A	; 26
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a0 3e       	cpi	r26, 0xE0	; 224
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <main>
     280:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <network_set_callback>
     294:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <__data_end+0x1>
     298:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <__data_end>
     29c:	cc e1       	ldi	r28, 0x1C	; 28
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 b5 18 	call	0x316a	; 0x316a <xQueueCreateMutex>
     2b0:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <connections+0x8a>
     2b4:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	ec e1       	ldi	r30, 0x1C	; 28
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <connections+0x8c>
     2ea:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	04 5e       	subi	r16, 0xE4	; 228
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 2a 2b 	call	0x5654	; 0x5654 <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	e4 5e       	subi	r30, 0xE4	; 228
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	65 d6       	rcall	.+3274   	; 0x104e <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	83 5e       	subi	r24, 0xE3	; 227
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	53 d6       	rcall	.+3238   	; 0x104e <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	89 5d       	subi	r24, 0xD9	; 217
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	e4 5e       	subi	r30, 0xE4	; 228
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     404:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     408:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
     40c:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     41c:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     420:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	cc e1       	ldi	r28, 0x1C	; 28
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	18 d7       	rcall	.+3632   	; 0x1262 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	15 d7       	rcall	.+3626   	; 0x1262 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     452:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     456:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     492:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     496:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
     49a:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     4be:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     4c2:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 25 07 	lds	r18, 0x0725	; 0x800725 <connections+0x9>
     4d2:	30 91 26 07 	lds	r19, 0x0726	; 0x800726 <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 2f 07 	lds	r18, 0x072F	; 0x80072f <connections+0x13>
     4ea:	30 91 30 07 	lds	r19, 0x0730	; 0x800730 <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	8d e1       	ldi	r24, 0x1D	; 29
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	8d e1       	ldi	r24, 0x1D	; 29
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	87 e2       	ldi	r24, 0x27	; 39
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     558:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     55c:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     56c:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     570:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <connections+0x20>
     5c2:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     61c:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     620:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     634:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     638:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	ec e1       	ldi	r30, 0x1C	; 28
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     66a:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     66e:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	ec e1       	ldi	r30, 0x1C	; 28
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	87 e2       	ldi	r24, 0x27	; 39
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8d e1       	ldi	r24, 0x1D	; 29
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	ec e1       	ldi	r30, 0x1C	; 28
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	87 e2       	ldi	r24, 0x27	; 39
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	8d e1       	ldi	r24, 0x1D	; 29
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <connections+0x89>
     7b2:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <connections+0x8a>
     7b6:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <connections+0x23>
     7ee:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 40 07 	sts	0x0740, r25	; 0x800740 <connections+0x24>
     80c:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	0c e1       	ldi	r16, 0x1C	; 28
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	8f 5b       	subi	r24, 0xBF	; 191
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	81 e4       	ldi	r24, 0x41	; 65
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 1c 07 	lds	r25, 0x071C	; 0x80071c <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fc e1       	ldi	r31, 0x1C	; 28
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 1a 07 	lds	r30, 0x071A	; 0x80071a <__data_end>
     8be:	f0 91 1b 07 	lds	r31, 0x071B	; 0x80071b <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 a0 2c 	call	0x5940	; 0x5940 <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 a0 2c 	call	0x5940	; 0x5940 <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 87 24 	call	0x490e	; 0x490e <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <crc_ibutton_update>:
  return crc;
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
     f04:	86 27       	eor	r24, r22
     f06:	98 e0       	ldi	r25, 0x08	; 8
  for (i = 0; i < 8; i++) {
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
     f08:	2c e8       	ldi	r18, 0x8C	; 140
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <crc_ibutton_update+0x10>
     f0e:	86 95       	lsr	r24
     f10:	82 27       	eor	r24, r18
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <crc_ibutton_update+0x12>
    else crc >>= 1;
     f14:	86 95       	lsr	r24
     f16:	91 50       	subi	r25, 0x01	; 1
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
  for (i = 0; i < 8; i++) {
     f18:	c1 f7       	brne	.-16     	; 0xf0a <crc_ibutton_update+0x6>
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
    else crc >>= 1;
  }
  return crc;
     f1a:	08 95       	ret

00000f1c <calculate_crc>:

#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f24:	66 23       	and	r22, r22
     f26:	59 f0       	breq	.+22     	; 0xf3e <calculate_crc+0x22>
     f28:	8c 01       	movw	r16, r24
     f2a:	ec 01       	movw	r28, r24
     f2c:	06 0f       	add	r16, r22
     f2e:	11 1d       	adc	r17, r1
     f30:	80 e0       	ldi	r24, 0x00	; 0
    crc = crc_ibutton_update(crc, data[i]);
     f32:	69 91       	ld	r22, Y+
     f34:	e7 df       	rcall	.-50     	; 0xf04 <crc_ibutton_update>
char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f36:	0c 17       	cp	r16, r28
     f38:	1d 07       	cpc	r17, r29
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <calculate_crc+0x16>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <calculate_crc+0x24>
#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
  int i;
  for(i=0;i<len;i++) {
    crc = crc_ibutton_update(crc, data[i]);
  }
  return crc;
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     f4a:	80 b3       	in	r24, 0x10	; 16
     f4c:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f4e:	ec e7       	ldi	r30, 0x7C	; 124
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 6c       	ori	r24, 0xC0	; 192
     f56:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     f58:	ea e7       	ldi	r30, 0x7A	; 122
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     f62:	80 81       	ld	r24, Z
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	80 83       	st	Z, r24
     f68:	08 95       	ret

00000f6a <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     f6a:	ec e7       	ldi	r30, 0x7C	; 124
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f70:	90 81       	ld	r25, Z
     f72:	90 6c       	ori	r25, 0xC0	; 192
     f74:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     f76:	ea e7       	ldi	r30, 0x7A	; 122
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	90 64       	ori	r25, 0x40	; 64
     f7e:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
     f80:	90 81       	ld	r25, Z
     f82:	96 fd       	sbrc	r25, 6
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
     f86:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
     f8e:	e8 2f       	mov	r30, r24
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	26 95       	lsr	r18
     f94:	26 95       	lsr	r18
     f96:	30 e4       	ldi	r19, 0x40	; 64
     f98:	93 9f       	mul	r25, r19
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	82 2b       	or	r24, r18
     fa0:	fe 2f       	mov	r31, r30
     fa2:	ee 27       	eor	r30, r30
     fa4:	e0 50       	subi	r30, 0x00	; 0
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e8 0f       	add	r30, r24
     faa:	f1 1d       	adc	r31, r1
}
     fac:	80 81       	ld	r24, Z
     fae:	08 95       	ret

00000fb0 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
     fbe:	c8 80       	ld	r12, Y
     fc0:	d9 80       	ldd	r13, Y+1	; 0x01
     fc2:	ea 80       	ldd	r14, Y+2	; 0x02
     fc4:	fb 80       	ldd	r15, Y+3	; 0x03
     fc6:	2b ed       	ldi	r18, 0xDB	; 219
     fc8:	3f e0       	ldi	r19, 0x0F	; 15
     fca:	49 e4       	ldi	r20, 0x49	; 73
     fcc:	50 e4       	ldi	r21, 0x40	; 64
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	6c f4       	brge	.+26     	; 0xff4 <vFunc_Inf2pi+0x44>
     fda:	2b ed       	ldi	r18, 0xDB	; 219
     fdc:	3f e0       	ldi	r19, 0x0F	; 15
     fde:	49 ec       	ldi	r20, 0xC9	; 201
     fe0:	50 e4       	ldi	r21, 0x40	; 64
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
     fea:	68 83       	st	Y, r22
     fec:	79 83       	std	Y+1, r23	; 0x01
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
     ff4:	2b ed       	ldi	r18, 0xDB	; 219
     ff6:	3f e0       	ldi	r19, 0x0F	; 15
     ff8:	49 e4       	ldi	r20, 0x49	; 73
     ffa:	50 ec       	ldi	r21, 0xC0	; 192
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <__cmpsf2>
    1004:	88 23       	and	r24, r24
    1006:	64 f4       	brge	.+24     	; 0x1020 <vFunc_Inf2pi+0x70>
    1008:	2b ed       	ldi	r18, 0xDB	; 219
    100a:	3f e0       	ldi	r19, 0x0F	; 15
    100c:	49 ec       	ldi	r20, 0xC9	; 201
    100e:	50 e4       	ldi	r21, 0x40	; 64
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    1020:	88 81       	ld	r24, Y
    1022:	99 81       	ldd	r25, Y+1	; 0x01
    1024:	aa 81       	ldd	r26, Y+2	; 0x02
    1026:	bb 81       	ldd	r27, Y+3	; 0x03
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	2b ed       	ldi	r18, 0xDB	; 219
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 e4       	ldi	r20, 0x49	; 73
    1034:	50 e4       	ldi	r21, 0x40	; 64
    1036:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <vFunc_Inf2pi+0x90>
    103e:	bf cf       	rjmp	.-130    	; 0xfbe <vFunc_Inf2pi+0xe>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	08 95       	ret

0000104e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    105c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1060:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <pxEnd>
    1064:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <pxEnd+0x1>
    1068:	89 2b       	or	r24, r25
    106a:	41 f5       	brne	.+80     	; 0x10bc <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    106c:	e1 eb       	ldi	r30, 0xB1	; 177
    106e:	f7 e0       	ldi	r31, 0x07	; 7
    1070:	a5 eb       	ldi	r26, 0xB5	; 181
    1072:	b7 e0       	ldi	r27, 0x07	; 7
    1074:	b1 83       	std	Z+1, r27	; 0x01
    1076:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    107c:	e1 eb       	ldi	r30, 0xB1	; 177
    107e:	f9 e1       	ldi	r31, 0x19	; 25
    1080:	f0 93 b0 07 	sts	0x07B0, r31	; 0x8007b0 <pxEnd+0x1>
    1084:	e0 93 af 07 	sts	0x07AF, r30	; 0x8007af <pxEnd>
	pxEnd->xBlockSize = 0;
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1090:	8c ef       	ldi	r24, 0xFC	; 252
    1092:	91 e1       	ldi	r25, 0x11	; 17
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    109c:	ed 93       	st	X+, r30
    109e:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a0:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xMinimumEverFreeBytesRemaining+0x1>
    10a4:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a8:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <xFreeBytesRemaining+0x1>
    10ac:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e8       	ldi	r25, 0x80	; 128
    10b4:	90 93 aa 07 	sts	0x07AA, r25	; 0x8007aa <xBlockAllocatedBit+0x1>
    10b8:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10bc:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xBlockAllocatedBit>
    10c0:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xBlockAllocatedBit+0x1>
    10c4:	8c 23       	and	r24, r28
    10c6:	9d 23       	and	r25, r29
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f0       	breq	.+2      	; 0x10ce <pvPortMalloc+0x80>
    10cc:	b2 c0       	rjmp	.+356    	; 0x1232 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <pvPortMalloc+0x86>
    10d2:	b2 c0       	rjmp	.+356    	; 0x1238 <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    10d4:	ae 01       	movw	r20, r28
    10d6:	4c 5f       	subi	r20, 0xFC	; 252
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10da:	09 f4       	brne	.+2      	; 0x10de <pvPortMalloc+0x90>
    10dc:	b0 c0       	rjmp	.+352    	; 0x123e <pvPortMalloc+0x1f0>
    10de:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <xFreeBytesRemaining>
    10e2:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <xFreeBytesRemaining+0x1>
    10e6:	84 17       	cp	r24, r20
    10e8:	95 07       	cpc	r25, r21
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <pvPortMalloc+0xa0>
    10ec:	ab c0       	rjmp	.+342    	; 0x1244 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    10ee:	e0 91 b1 07 	lds	r30, 0x07B1	; 0x8007b1 <xStart>
    10f2:	f0 91 b2 07 	lds	r31, 0x07B2	; 0x8007b2 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    10f6:	a1 eb       	ldi	r26, 0xB1	; 177
    10f8:	b7 e0       	ldi	r27, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <pvPortMalloc+0xb2>
    10fc:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    10fe:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1100:	22 81       	ldd	r18, Z+2	; 0x02
    1102:	33 81       	ldd	r19, Z+3	; 0x03
    1104:	24 17       	cp	r18, r20
    1106:	35 07       	cpc	r19, r21
    1108:	28 f4       	brcc	.+10     	; 0x1114 <pvPortMalloc+0xc6>
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	a1 f7       	brne	.-24     	; 0x10fc <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1114:	60 91 af 07 	lds	r22, 0x07AF	; 0x8007af <pxEnd>
    1118:	70 91 b0 07 	lds	r23, 0x07B0	; 0x8007b0 <pxEnd+0x1>
    111c:	e6 17       	cp	r30, r22
    111e:	f7 07       	cpc	r31, r23
    1120:	09 f4       	brne	.+2      	; 0x1124 <pvPortMalloc+0xd6>
    1122:	93 c0       	rjmp	.+294    	; 0x124a <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1124:	cd 91       	ld	r28, X+
    1126:	dc 91       	ld	r29, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	7e 01       	movw	r14, r28
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	e8 0e       	add	r14, r24
    1130:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8d 93       	st	X+, r24
    1138:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	84 1b       	sub	r24, r20
    1140:	95 0b       	sbc	r25, r21
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	91 05       	cpc	r25, r1
    1146:	08 f4       	brcc	.+2      	; 0x114a <pvPortMalloc+0xfc>
    1148:	52 c0       	rjmp	.+164    	; 0x11ee <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    114a:	9f 01       	movw	r18, r30
    114c:	24 0f       	add	r18, r20
    114e:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1150:	d9 01       	movw	r26, r18
    1152:	13 96       	adiw	r26, 0x03	; 3
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    115a:	53 83       	std	Z+3, r21	; 0x03
    115c:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    115e:	a1 eb       	ldi	r26, 0xB1	; 177
    1160:	b7 e0       	ldi	r27, 0x07	; 7
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <pvPortMalloc+0x118>
    1164:	dc 01       	movw	r26, r24
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	c8 f3       	brcs	.-14     	; 0x1164 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	4d 91       	ld	r20, X+
    1176:	5c 91       	ld	r21, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	8d 01       	movw	r16, r26
    117c:	04 0f       	add	r16, r20
    117e:	15 1f       	adc	r17, r21
    1180:	20 17       	cp	r18, r16
    1182:	31 07       	cpc	r19, r17
    1184:	51 f4       	brne	.+20     	; 0x119a <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1186:	e9 01       	movw	r28, r18
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	3b 81       	ldd	r19, Y+3	; 0x03
    118c:	42 0f       	add	r20, r18
    118e:	53 1f       	adc	r21, r19
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	5c 93       	st	X, r21
    1194:	4e 93       	st	-X, r20
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    119a:	e9 01       	movw	r28, r18
    119c:	4a 81       	ldd	r20, Y+2	; 0x02
    119e:	5b 81       	ldd	r21, Y+3	; 0x03
    11a0:	89 01       	movw	r16, r18
    11a2:	04 0f       	add	r16, r20
    11a4:	15 1f       	adc	r17, r21
    11a6:	80 17       	cp	r24, r16
    11a8:	91 07       	cpc	r25, r17
    11aa:	c9 f4       	brne	.+50     	; 0x11de <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11ac:	60 17       	cp	r22, r16
    11ae:	71 07       	cpc	r23, r17
    11b0:	91 f0       	breq	.+36     	; 0x11d6 <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11b2:	e8 01       	movw	r28, r16
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	48 0f       	add	r20, r24
    11ba:	59 1f       	adc	r21, r25
    11bc:	e9 01       	movw	r28, r18
    11be:	5b 83       	std	Y+3, r21	; 0x03
    11c0:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	ec 01       	movw	r28, r24
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	e9 01       	movw	r28, r18
    11d0:	99 83       	std	Y+1, r25	; 0x01
    11d2:	88 83       	st	Y, r24
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11d6:	e9 01       	movw	r28, r18
    11d8:	79 83       	std	Y+1, r23	; 0x01
    11da:	68 83       	st	Y, r22
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11de:	e9 01       	movw	r28, r18
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11e4:	a2 17       	cp	r26, r18
    11e6:	b3 07       	cpc	r27, r19
    11e8:	11 f0       	breq	.+4      	; 0x11ee <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11ea:	2d 93       	st	X+, r18
    11ec:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    11ee:	22 81       	ldd	r18, Z+2	; 0x02
    11f0:	33 81       	ldd	r19, Z+3	; 0x03
    11f2:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <xFreeBytesRemaining>
    11f6:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <xFreeBytesRemaining+0x1>
    11fa:	82 1b       	sub	r24, r18
    11fc:	93 0b       	sbc	r25, r19
    11fe:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <xFreeBytesRemaining+0x1>
    1202:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1206:	40 91 ab 07 	lds	r20, 0x07AB	; 0x8007ab <xMinimumEverFreeBytesRemaining>
    120a:	50 91 ac 07 	lds	r21, 0x07AC	; 0x8007ac <xMinimumEverFreeBytesRemaining+0x1>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	20 f4       	brcc	.+8      	; 0x121c <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1214:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xMinimumEverFreeBytesRemaining+0x1>
    1218:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    121c:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xBlockAllocatedBit>
    1220:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <xBlockAllocatedBit+0x1>
    1224:	28 2b       	or	r18, r24
    1226:	39 2b       	or	r19, r25
    1228:	33 83       	std	Z+3, r19	; 0x03
    122a:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	0e c0       	rjmp	.+28     	; 0x124e <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    1232:	e1 2c       	mov	r14, r1
    1234:	f1 2c       	mov	r15, r1
    1236:	0b c0       	rjmp	.+22     	; 0x124e <pvPortMalloc+0x200>
    1238:	e1 2c       	mov	r14, r1
    123a:	f1 2c       	mov	r15, r1
    123c:	08 c0       	rjmp	.+16     	; 0x124e <pvPortMalloc+0x200>
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <pvPortMalloc+0x200>
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <pvPortMalloc+0x200>
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    124e:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1252:	c7 01       	movw	r24, r14
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <vPortFree+0xa>
    126a:	68 c0       	rjmp	.+208    	; 0x133c <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    126c:	fc 01       	movw	r30, r24
    126e:	34 97       	sbiw	r30, 0x04	; 4
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	33 81       	ldd	r19, Z+3	; 0x03
    1274:	40 91 a9 07 	lds	r20, 0x07A9	; 0x8007a9 <xBlockAllocatedBit>
    1278:	50 91 aa 07 	lds	r21, 0x07AA	; 0x8007aa <xBlockAllocatedBit+0x1>
    127c:	b9 01       	movw	r22, r18
    127e:	64 23       	and	r22, r20
    1280:	75 23       	and	r23, r21
    1282:	67 2b       	or	r22, r23
    1284:	09 f4       	brne	.+2      	; 0x1288 <vPortFree+0x26>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	67 2b       	or	r22, r23
    128e:	09 f0       	breq	.+2      	; 0x1292 <vPortFree+0x30>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1292:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1294:	40 95       	com	r20
    1296:	50 95       	com	r21
    1298:	24 23       	and	r18, r20
    129a:	35 23       	and	r19, r21
    129c:	33 83       	std	Z+3, r19	; 0x03
    129e:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12a0:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12a4:	4a 81       	ldd	r20, Y+2	; 0x02
    12a6:	5b 81       	ldd	r21, Y+3	; 0x03
    12a8:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <xFreeBytesRemaining>
    12ac:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <xFreeBytesRemaining+0x1>
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <xFreeBytesRemaining+0x1>
    12b8:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12bc:	e1 eb       	ldi	r30, 0xB1	; 177
    12be:	f7 e0       	ldi	r31, 0x07	; 7
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <vPortFree+0x62>
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	8c 17       	cp	r24, r28
    12ca:	9d 07       	cpc	r25, r29
    12cc:	d0 f3       	brcs	.-12     	; 0x12c2 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    12ce:	22 81       	ldd	r18, Z+2	; 0x02
    12d0:	33 81       	ldd	r19, Z+3	; 0x03
    12d2:	bf 01       	movw	r22, r30
    12d4:	62 0f       	add	r22, r18
    12d6:	73 1f       	adc	r23, r19
    12d8:	c6 17       	cp	r28, r22
    12da:	d7 07       	cpc	r29, r23
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    12de:	24 0f       	add	r18, r20
    12e0:	35 1f       	adc	r19, r21
    12e2:	33 83       	std	Z+3, r19	; 0x03
    12e4:	22 83       	std	Z+2, r18	; 0x02
    12e6:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	de 01       	movw	r26, r28
    12ee:	a2 0f       	add	r26, r18
    12f0:	b3 1f       	adc	r27, r19
    12f2:	8a 17       	cp	r24, r26
    12f4:	9b 07       	cpc	r25, r27
    12f6:	c9 f4       	brne	.+50     	; 0x132a <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    12f8:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <pxEnd>
    12fc:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <pxEnd+0x1>
    1300:	a8 17       	cp	r26, r24
    1302:	b9 07       	cpc	r27, r25
    1304:	79 f0       	breq	.+30     	; 0x1324 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	28 0f       	add	r18, r24
    1310:	39 1f       	adc	r19, r25
    1312:	3b 83       	std	Y+3, r19	; 0x03
    1314:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	99 83       	std	Y+1, r25	; 0x01
    1320:	88 83       	st	Y, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1324:	b9 83       	std	Y+1, r27	; 0x01
    1326:	a8 83       	st	Y, r26
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    132e:	ec 17       	cp	r30, r28
    1330:	fd 07       	cpc	r31, r29
    1332:	11 f0       	breq	.+4      	; 0x1338 <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1334:	d1 83       	std	Z+1, r29	; 0x01
    1336:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    1338:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	e4 2e       	mov	r14, r20
    1352:	28 98       	cbi	0x05, 0	; 5
    1354:	86 2f       	mov	r24, r22
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    135c:	ee 20       	and	r14, r14
    135e:	b1 f0       	breq	.+44     	; 0x138c <sIMU_readRegisterRegion+0x4a>
    1360:	0f ef       	ldi	r16, 0xFF	; 255
    1362:	0e 0d       	add	r16, r14
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	0c 0f       	add	r16, r28
    136c:	1d 1f       	adc	r17, r29
    136e:	f1 2c       	mov	r15, r1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <sIMU_readRegisterRegion+0x3a>
    137a:	f3 94       	inc	r15
    137c:	89 93       	st	Y+, r24
    137e:	0c 17       	cp	r16, r28
    1380:	1d 07       	cpc	r17, r29
    1382:	b1 f7       	brne	.-20     	; 0x1370 <sIMU_readRegisterRegion+0x2e>
    1384:	fe 10       	cpse	r15, r14
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <sIMU_readRegisterRegion+0x4e>
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    138c:	85 e0       	ldi	r24, 0x05	; 5
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	28 9a       	sbi	0x05, 0	; 5
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <sIMU_readRegister>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	28 98       	cbi	0x05, 0	; 5
    13aa:	86 2f       	mov	r24, r22
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    13b8:	28 9a       	sbi	0x05, 0	; 5
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <sIMU_readRegister+0x20>
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <sIMU_readRegister+0x22>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	88 83       	st	Y, r24
    13c6:	89 2f       	mov	r24, r25
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <sIMU_Init>:
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	1f 92       	push	r1
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	ed e0       	ldi	r30, 0x0D	; 13
    13dc:	fb e1       	ldi	r31, 0x1B	; 27
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
    13e2:	24 ef       	ldi	r18, 0xF4	; 244
    13e4:	31 e0       	ldi	r19, 0x01	; 1
    13e6:	32 83       	std	Z+2, r19	; 0x02
    13e8:	21 83       	std	Z+1, r18	; 0x01
    13ea:	22 e8       	ldi	r18, 0x82	; 130
    13ec:	36 e0       	ldi	r19, 0x06	; 6
    13ee:	34 83       	std	Z+4, r19	; 0x04
    13f0:	23 83       	std	Z+3, r18	; 0x03
    13f2:	20 e9       	ldi	r18, 0x90	; 144
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	36 83       	std	Z+6, r19	; 0x06
    13f8:	25 83       	std	Z+5, r18	; 0x05
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	10 86       	std	Z+8, r1	; 0x08
    13fe:	81 87       	std	Z+9, r24	; 0x09
    1400:	82 87       	std	Z+10, r24	; 0x0a
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	34 87       	std	Z+12, r19	; 0x0c
    1408:	23 87       	std	Z+11, r18	; 0x0b
    140a:	2d e0       	ldi	r18, 0x0D	; 13
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	36 87       	std	Z+14, r19	; 0x0e
    1410:	25 87       	std	Z+13, r18	; 0x0d
    1412:	22 e3       	ldi	r18, 0x32	; 50
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	30 8b       	std	Z+16, r19	; 0x10
    1418:	27 87       	std	Z+15, r18	; 0x0f
    141a:	11 8a       	std	Z+17, r1	; 0x11
    141c:	12 8a       	std	Z+18, r1	; 0x12
    141e:	83 8b       	std	Z+19, r24	; 0x13
    1420:	84 8b       	std	Z+20, r24	; 0x14
    1422:	88 eb       	ldi	r24, 0xB8	; 184
    1424:	9b e0       	ldi	r25, 0x0B	; 11
    1426:	96 8b       	std	Z+22, r25	; 0x16
    1428:	85 8b       	std	Z+21, r24	; 0x15
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 8f       	std	Z+24, r25	; 0x18
    1430:	87 8b       	std	Z+23, r24	; 0x17
    1432:	11 8e       	std	Z+25, r1	; 0x19
    1434:	10 92 28 1b 	sts	0x1B28, r1	; 0x801b28 <allOnesCounter+0x1>
    1438:	10 92 27 1b 	sts	0x1B27, r1	; 0x801b27 <allOnesCounter>
    143c:	10 92 2a 1b 	sts	0x1B2A, r1	; 0x801b2a <nonSuccessCounter+0x1>
    1440:	10 92 29 1b 	sts	0x1B29, r1	; 0x801b29 <nonSuccessCounter>
    1444:	0e 94 bb 21 	call	0x4376	; 0x4376 <vSPI_MasterInit>
    1448:	20 9a       	sbi	0x04, 0	; 4
    144a:	28 9a       	sbi	0x05, 0	; 5
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	20 e1       	ldi	r18, 0x10	; 16
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	31 09       	sbc	r19, r1
    145c:	d1 f7       	brne	.-12     	; 0x1452 <sIMU_Init+0x84>
    145e:	6f e0       	ldi	r22, 0x0F	; 15
    1460:	ce 01       	movw	r24, r28
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	9e df       	rcall	.-196    	; 0x13a2 <sIMU_readRegister>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	89 36       	cpi	r24, 0x69	; 105
    146a:	c9 f7       	brne	.-14     	; 0x145e <sIMU_Init+0x90>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <sIMU_readRegisterInt16>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	1f 92       	push	r1
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8c 01       	movw	r16, r24
    148a:	42 e0       	ldi	r20, 0x02	; 2
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	58 df       	rcall	.-336    	; 0x1342 <sIMU_readRegisterRegion>
    1492:	2a 81       	ldd	r18, Y+2	; 0x02
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	32 2f       	mov	r19, r18
    1498:	22 27       	eor	r18, r18
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	29 2b       	or	r18, r25
    149e:	f8 01       	movw	r30, r16
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <sIMU_writeRegister>:
    14b2:	cf 93       	push	r28
    14b4:	c6 2f       	mov	r28, r22
    14b6:	28 98       	cbi	0x05, 0	; 5
    14b8:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 c9 21 	call	0x4392	; 0x4392 <ui8SPI_MasterTransmit>
    14c2:	28 9a       	sbi	0x05, 0	; 5
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <sIMU_begin>:
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	1f 92       	push	r1
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	79 df       	rcall	.-270    	; 0x13ce <sIMU_Init>
    14dc:	18 2f       	mov	r17, r24
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	80 91 16 1b 	lds	r24, 0x1B16	; 0x801b16 <settings+0x9>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <sIMU_begin+0x20>
    14e8:	83 c0       	rjmp	.+262    	; 0x15f0 <sIMU_begin+0x126>
    14ea:	80 91 1c 1b 	lds	r24, 0x1B1C	; 0x801b1c <settings+0xf>
    14ee:	90 91 1d 1b 	lds	r25, 0x1B1D	; 0x801b1d <settings+0x10>
    14f2:	84 36       	cpi	r24, 0x64	; 100
    14f4:	91 05       	cpc	r25, r1
    14f6:	41 f0       	breq	.+16     	; 0x1508 <sIMU_begin+0x3e>
    14f8:	88 3c       	cpi	r24, 0xC8	; 200
    14fa:	91 05       	cpc	r25, r1
    14fc:	41 f0       	breq	.+16     	; 0x150e <sIMU_begin+0x44>
    14fe:	c2 97       	sbiw	r24, 0x32	; 50
    1500:	41 f4       	brne	.+16     	; 0x1512 <sIMU_begin+0x48>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <sIMU_begin+0x48>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <sIMU_begin+0x48>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	80 91 18 1b 	lds	r24, 0x1B18	; 0x801b18 <settings+0xb>
    1516:	90 91 19 1b 	lds	r25, 0x1B19	; 0x801b19 <settings+0xc>
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	31 f0       	breq	.+12     	; 0x152c <sIMU_begin+0x62>
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	91 05       	cpc	r25, r1
    1524:	39 f0       	breq	.+14     	; 0x1534 <sIMU_begin+0x6a>
    1526:	02 97       	sbiw	r24, 0x02	; 2
    1528:	49 f4       	brne	.+18     	; 0x153c <sIMU_begin+0x72>
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <sIMU_begin+0x78>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	88 60       	ori	r24, 0x08	; 8
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <sIMU_begin+0x78>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8c 60       	ori	r24, 0x0C	; 12
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <sIMU_begin+0x78>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	80 91 1a 1b 	lds	r24, 0x1B1A	; 0x801b1a <settings+0xd>
    1546:	90 91 1b 1b 	lds	r25, 0x1B1B	; 0x801b1b <settings+0xe>
    154a:	80 3a       	cpi	r24, 0xA0	; 160
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	92 07       	cpc	r25, r18
    1550:	c1 f1       	breq	.+112    	; 0x15c2 <sIMU_begin+0xf8>
    1552:	70 f4       	brcc	.+28     	; 0x1570 <sIMU_begin+0xa6>
    1554:	8a 31       	cpi	r24, 0x1A	; 26
    1556:	91 05       	cpc	r25, r1
    1558:	21 f1       	breq	.+72     	; 0x15a2 <sIMU_begin+0xd8>
    155a:	18 f4       	brcc	.+6      	; 0x1562 <sIMU_begin+0x98>
    155c:	0d 97       	sbiw	r24, 0x0d	; 13
    155e:	e9 f0       	breq	.+58     	; 0x159a <sIMU_begin+0xd0>
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <sIMU_begin+0xe8>
    1562:	84 33       	cpi	r24, 0x34	; 52
    1564:	91 05       	cpc	r25, r1
    1566:	09 f1       	breq	.+66     	; 0x15aa <sIMU_begin+0xe0>
    1568:	80 3d       	cpi	r24, 0xD0	; 208
    156a:	91 05       	cpc	r25, r1
    156c:	31 f1       	breq	.+76     	; 0x15ba <sIMU_begin+0xf0>
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <sIMU_begin+0xe8>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	2d e0       	ldi	r18, 0x0D	; 13
    1574:	92 07       	cpc	r25, r18
    1576:	89 f1       	breq	.+98     	; 0x15da <sIMU_begin+0x110>
    1578:	40 f4       	brcc	.+16     	; 0x158a <sIMU_begin+0xc0>
    157a:	81 34       	cpi	r24, 0x41	; 65
    157c:	23 e0       	ldi	r18, 0x03	; 3
    157e:	92 07       	cpc	r25, r18
    1580:	21 f1       	breq	.+72     	; 0x15ca <sIMU_begin+0x100>
    1582:	8c 37       	cpi	r24, 0x7C	; 124
    1584:	96 40       	sbci	r25, 0x06	; 6
    1586:	29 f1       	breq	.+74     	; 0x15d2 <sIMU_begin+0x108>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <sIMU_begin+0xe8>
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	2a e1       	ldi	r18, 0x1A	; 26
    158e:	92 07       	cpc	r25, r18
    1590:	41 f1       	breq	.+80     	; 0x15e2 <sIMU_begin+0x118>
    1592:	82 31       	cpi	r24, 0x12	; 18
    1594:	94 43       	sbci	r25, 0x34	; 52
    1596:	49 f1       	breq	.+82     	; 0x15ea <sIMU_begin+0x120>
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <sIMU_begin+0xe8>
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <sIMU_begin+0x126>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <sIMU_begin+0x126>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	80 63       	ori	r24, 0x30	; 48
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <sIMU_begin+0x126>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <sIMU_begin+0x126>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 65       	ori	r24, 0x50	; 80
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <sIMU_begin+0x126>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 66       	ori	r24, 0x60	; 96
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <sIMU_begin+0x126>
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 67       	ori	r24, 0x70	; 112
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <sIMU_begin+0x126>
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <sIMU_begin+0x126>
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	80 69       	ori	r24, 0x90	; 144
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <sIMU_begin+0x126>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 6a       	ori	r24, 0xA0	; 160
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <sIMU_begin+0x126>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 6b       	ori	r24, 0xB0	; 176
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	5e df       	rcall	.-324    	; 0x14b2 <sIMU_writeRegister>
    15f6:	63 e1       	ldi	r22, 0x13	; 19
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	d2 de       	rcall	.-604    	; 0x13a2 <sIMU_readRegister>
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	90 91 17 1b 	lds	r25, 0x1B17	; 0x801b17 <settings+0xa>
    1608:	91 30       	cpi	r25, 0x01	; 1
    160a:	11 f4       	brne	.+4      	; 0x1610 <sIMU_begin+0x146>
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	83 e1       	ldi	r24, 0x13	; 19
    1614:	4e df       	rcall	.-356    	; 0x14b2 <sIMU_writeRegister>
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	80 91 0d 1b 	lds	r24, 0x1B0D	; 0x801b0d <settings>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <sIMU_begin+0x158>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <sIMU_begin+0x20e>
    1622:	80 91 0e 1b 	lds	r24, 0x1B0E	; 0x801b0e <settings+0x1>
    1626:	90 91 0f 1b 	lds	r25, 0x1B0F	; 0x801b0f <settings+0x2>
    162a:	85 3f       	cpi	r24, 0xF5	; 245
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f0       	breq	.+48     	; 0x1660 <sIMU_begin+0x196>
    1630:	20 f4       	brcc	.+8      	; 0x163a <sIMU_begin+0x170>
    1632:	8d 37       	cpi	r24, 0x7D	; 125
    1634:	91 05       	cpc	r25, r1
    1636:	49 f0       	breq	.+18     	; 0x164a <sIMU_begin+0x180>
    1638:	11 c0       	rjmp	.+34     	; 0x165c <sIMU_begin+0x192>
    163a:	84 3f       	cpi	r24, 0xF4	; 244
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	92 07       	cpc	r25, r18
    1640:	39 f0       	breq	.+14     	; 0x1650 <sIMU_begin+0x186>
    1642:	88 3e       	cpi	r24, 0xE8	; 232
    1644:	93 40       	sbci	r25, 0x03	; 3
    1646:	39 f0       	breq	.+14     	; 0x1656 <sIMU_begin+0x18c>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <sIMU_begin+0x192>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <sIMU_begin+0x196>
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <sIMU_begin+0x196>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <sIMU_begin+0x196>
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	80 91 10 1b 	lds	r24, 0x1B10	; 0x801b10 <settings+0x3>
    1664:	90 91 11 1b 	lds	r25, 0x1B11	; 0x801b11 <settings+0x4>
    1668:	80 3d       	cpi	r24, 0xD0	; 208
    166a:	91 05       	cpc	r25, r1
    166c:	31 f1       	breq	.+76     	; 0x16ba <sIMU_begin+0x1f0>
    166e:	48 f4       	brcc	.+18     	; 0x1682 <sIMU_begin+0x1b8>
    1670:	8a 31       	cpi	r24, 0x1A	; 26
    1672:	91 05       	cpc	r25, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <sIMU_begin+0x1d8>
    1676:	84 33       	cpi	r24, 0x34	; 52
    1678:	91 05       	cpc	r25, r1
    167a:	b9 f0       	breq	.+46     	; 0x16aa <sIMU_begin+0x1e0>
    167c:	0d 97       	sbiw	r24, 0x0d	; 13
    167e:	c9 f4       	brne	.+50     	; 0x16b2 <sIMU_begin+0x1e8>
    1680:	0c c0       	rjmp	.+24     	; 0x169a <sIMU_begin+0x1d0>
    1682:	81 34       	cpi	r24, 0x41	; 65
    1684:	23 e0       	ldi	r18, 0x03	; 3
    1686:	92 07       	cpc	r25, r18
    1688:	01 f1       	breq	.+64     	; 0x16ca <sIMU_begin+0x200>
    168a:	8c 37       	cpi	r24, 0x7C	; 124
    168c:	26 e0       	ldi	r18, 0x06	; 6
    168e:	92 07       	cpc	r25, r18
    1690:	01 f1       	breq	.+64     	; 0x16d2 <sIMU_begin+0x208>
    1692:	80 3a       	cpi	r24, 0xA0	; 160
    1694:	91 40       	sbci	r25, 0x01	; 1
    1696:	69 f4       	brne	.+26     	; 0x16b2 <sIMU_begin+0x1e8>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <sIMU_begin+0x1f8>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	80 61       	ori	r24, 0x10	; 16
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <sIMU_begin+0x20e>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <sIMU_begin+0x20e>
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	80 63       	ori	r24, 0x30	; 48
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <sIMU_begin+0x20e>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 64       	ori	r24, 0x40	; 64
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <sIMU_begin+0x20e>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 65       	ori	r24, 0x50	; 80
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <sIMU_begin+0x20e>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 66       	ori	r24, 0x60	; 96
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <sIMU_begin+0x20e>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 67       	ori	r24, 0x70	; 112
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <sIMU_begin+0x20e>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	ea de       	rcall	.-556    	; 0x14b2 <sIMU_writeRegister>
    16de:	6f e0       	ldi	r22, 0x0F	; 15
    16e0:	ce 01       	movw	r24, r28
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	5e de       	rcall	.-836    	; 0x13a2 <sIMU_readRegister>
    16e6:	81 2f       	mov	r24, r17
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <i16IMU_readRawGyroZ>:
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	1f 92       	push	r1
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	66 e2       	ldi	r22, 0x26	; 38
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	b8 de       	rcall	.-656    	; 0x1478 <sIMU_readRegisterInt16>
    1708:	88 23       	and	r24, r24
    170a:	a9 f0       	breq	.+42     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    170c:	85 30       	cpi	r24, 0x05	; 5
    170e:	51 f4       	brne	.+20     	; 0x1724 <i16IMU_readRawGyroZ+0x30>
    1710:	80 91 27 1b 	lds	r24, 0x1B27	; 0x801b27 <allOnesCounter>
    1714:	90 91 28 1b 	lds	r25, 0x1B28	; 0x801b28 <allOnesCounter+0x1>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	90 93 28 1b 	sts	0x1B28, r25	; 0x801b28 <allOnesCounter+0x1>
    171e:	80 93 27 1b 	sts	0x1B27, r24	; 0x801b27 <allOnesCounter>
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    1724:	80 91 29 1b 	lds	r24, 0x1B29	; 0x801b29 <nonSuccessCounter>
    1728:	90 91 2a 1b 	lds	r25, 0x1B2A	; 0x801b2a <nonSuccessCounter+0x1>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 2a 1b 	sts	0x1B2A, r25	; 0x801b2a <nonSuccessCounter+0x1>
    1732:	80 93 29 1b 	sts	0x1B29, r24	; 0x801b29 <nonSuccessCounter>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <fIMU_calcGyro>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	cf 93       	push	r28
    174e:	fc 01       	movw	r30, r24
    1750:	40 91 0e 1b 	lds	r20, 0x1B0E	; 0x801b0e <settings+0x1>
    1754:	50 91 0f 1b 	lds	r21, 0x1B0F	; 0x801b0f <settings+0x2>
    1758:	45 3f       	cpi	r20, 0xF5	; 245
    175a:	51 05       	cpc	r21, r1
    175c:	b1 f0       	breq	.+44     	; 0x178a <fIMU_calcGyro+0x46>
    175e:	9a 01       	movw	r18, r20
    1760:	a5 e2       	ldi	r26, 0x25	; 37
    1762:	b6 e0       	ldi	r27, 0x06	; 6
    1764:	0e 94 03 36 	call	0x6c06	; 0x6c06 <__umulhisi3>
    1768:	48 1b       	sub	r20, r24
    176a:	59 0b       	sbc	r21, r25
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	00 24       	eor	r0, r0
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	00 1c       	adc	r0, r0
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	00 1c       	adc	r0, r0
    1782:	89 2f       	mov	r24, r25
    1784:	90 2d       	mov	r25, r0
    1786:	c8 2f       	mov	r28, r24
    1788:	01 c0       	rjmp	.+2      	; 0x178c <fIMU_calcGyro+0x48>
    178a:	c2 e0       	ldi	r28, 0x02	; 2
    178c:	bf 01       	movw	r22, r30
    178e:	ff 0f       	add	r31, r31
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4c e8       	ldi	r20, 0x8C	; 140
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	6c 2f       	mov	r22, r28
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a e7       	ldi	r20, 0x7A	; 122
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__divsf3>
    17cc:	cf 91       	pop	r28
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    17d8:	8d df       	rcall	.-230    	; 0x16f4 <i16IMU_readRawGyroZ>
    17da:	b4 cf       	rjmp	.-152    	; 0x1744 <fIMU_calcGyro>
    
    return output;
}
    17dc:	08 95       	ret

000017de <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    17de:	ea e0       	ldi	r30, 0x0A	; 10
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	87 60       	ori	r24, 0x07	; 7
    17e6:	80 83       	st	Z, r24
    17e8:	08 95       	ret

000017ea <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vLED_singleHigh+0x12>
    17f0:	eb e0       	ldi	r30, 0x0B	; 11
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	80 83       	st	Z, r24
    17fa:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	31 f4       	brne	.+12     	; 0x180e <vLED_singleHigh+0x24>
    1802:	eb e0       	ldi	r30, 0x0B	; 11
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	80 83       	st	Z, r24
    180c:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    180e:	89 2b       	or	r24, r25
    1810:	29 f4       	brne	.+10     	; 0x181c <vLED_singleHigh+0x32>
    1812:	eb e0       	ldi	r30, 0x0B	; 11
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	08 95       	ret

0000181e <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	31 f4       	brne	.+12     	; 0x1830 <vLED_singleLow+0x12>
    1824:	eb e0       	ldi	r30, 0x0B	; 11
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	80 83       	st	Z, r24
    182e:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	31 f4       	brne	.+12     	; 0x1842 <vLED_singleLow+0x24>
    1836:	eb e0       	ldi	r30, 0x0B	; 11
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	80 83       	st	Z, r24
    1840:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    1842:	89 2b       	or	r24, r25
    1844:	29 f4       	brne	.+10     	; 0x1850 <vLED_singleLow+0x32>
    1846:	eb e0       	ldi	r30, 0x0B	; 11
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	80 83       	st	Z, r24
    1850:	08 95       	ret

00001852 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	91 05       	cpc	r25, r1
    1856:	39 f4       	brne	.+14     	; 0x1866 <vLED_toggle+0x14>
    1858:	eb e0       	ldi	r30, 0x0B	; 11
    185a:	f1 e0       	ldi	r31, 0x01	; 1
    185c:	90 81       	ld	r25, Z
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	89 27       	eor	r24, r25
    1862:	80 83       	st	Z, r24
    1864:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	39 f4       	brne	.+14     	; 0x187a <vLED_toggle+0x28>
    186c:	eb e0       	ldi	r30, 0x0B	; 11
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	90 81       	ld	r25, Z
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 27       	eor	r24, r25
    1876:	80 83       	st	Z, r24
    1878:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    187a:	89 2b       	or	r24, r25
    187c:	31 f4       	brne	.+12     	; 0x188a <vLED_toggle+0x38>
    187e:	eb e0       	ldi	r30, 0x0B	; 11
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	90 81       	ld	r25, Z
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 27       	eor	r24, r25
    1888:	80 83       	st	Z, r24
    188a:	08 95       	ret

0000188c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    188c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	34 83       	std	Z+4, r19	; 0x04
    189a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    189c:	96 83       	std	Z+6, r25	; 0x06
    189e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18a0:	90 87       	std	Z+8, r25	; 0x08
    18a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18a4:	10 82       	st	Z, r1
    18a6:	08 95       	ret

000018a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 86       	std	Z+9, r1	; 0x09
    18ac:	10 86       	std	Z+8, r1	; 0x08
    18ae:	08 95       	ret

000018b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	9c 01       	movw	r18, r24
    18b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18b8:	dc 01       	movw	r26, r24
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	cd 91       	ld	r28, X+
    18be:	dc 91       	ld	r29, X
    18c0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    18c2:	d3 83       	std	Z+3, r29	; 0x03
    18c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	dc 01       	movw	r26, r24
    18d4:	13 96       	adiw	r26, 0x03	; 3
    18d6:	7c 93       	st	X, r23
    18d8:	6e 93       	st	-X, r22
    18da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    18dc:	7d 83       	std	Y+5, r23	; 0x05
    18de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    18e0:	31 87       	std	Z+9, r19	; 0x09
    18e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    18e4:	f9 01       	movw	r30, r18
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 83       	st	Z, r24
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18f8:	48 81       	ld	r20, Y
    18fa:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    18fc:	4f 3f       	cpi	r20, 0xFF	; 255
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	52 07       	cpc	r21, r18
    1902:	21 f4       	brne	.+8      	; 0x190c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1904:	fc 01       	movw	r30, r24
    1906:	a7 81       	ldd	r26, Z+7	; 0x07
    1908:	b0 85       	ldd	r27, Z+8	; 0x08
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    190c:	dc 01       	movw	r26, r24
    190e:	13 96       	adiw	r26, 0x03	; 3
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vListInsert+0x22>
    1912:	df 01       	movw	r26, r30
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	20 81       	ld	r18, Z
    191e:	31 81       	ldd	r19, Z+1	; 0x01
    1920:	42 17       	cp	r20, r18
    1922:	53 07       	cpc	r21, r19
    1924:	b0 f7       	brcc	.-20     	; 0x1912 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1926:	12 96       	adiw	r26, 0x02	; 2
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	fb 83       	std	Y+3, r31	; 0x03
    1930:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1932:	d5 83       	std	Z+5, r29	; 0x05
    1934:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1936:	bd 83       	std	Y+5, r27	; 0x05
    1938:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    193a:	13 96       	adiw	r26, 0x03	; 3
    193c:	dc 93       	st	X, r29
    193e:	ce 93       	st	-X, r28
    1940:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1942:	99 87       	std	Y+9, r25	; 0x09
    1944:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1946:	fc 01       	movw	r30, r24
    1948:	20 81       	ld	r18, Z
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	20 83       	st	Z, r18
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    195a:	a0 85       	ldd	r26, Z+8	; 0x08
    195c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    195e:	c2 81       	ldd	r28, Z+2	; 0x02
    1960:	d3 81       	ldd	r29, Z+3	; 0x03
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	95 81       	ldd	r25, Z+5	; 0x05
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    196a:	c4 81       	ldd	r28, Z+4	; 0x04
    196c:	d5 81       	ldd	r29, Z+5	; 0x05
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	12 97       	sbiw	r26, 0x02	; 2
    197e:	e8 17       	cp	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	31 f4       	brne	.+12     	; 0x1990 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	95 81       	ldd	r25, Z+5	; 0x05
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
    198e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1994:	8c 91       	ld	r24, X
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <vMainCommunicationTask>:
    #define toc PORTG &= ~(1<<PING5)
#endif

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <vMainCommunicationTask+0x6>
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <vMainCommunicationTask+0x8>
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	// Setup for the communication task
	struct sPolar Setpoint = {0}; // Struct for setpoints from server
    19ac:	fe 01       	movw	r30, r28
    19ae:	31 96       	adiw	r30, 0x01	; 1
    19b0:	86 e0       	ldi	r24, 0x06	; 6
    19b2:	df 01       	movw	r26, r30
    19b4:	1d 92       	st	X+, r1
    19b6:	8a 95       	dec	r24
    19b8:	e9 f7       	brne	.-6      	; 0x19b4 <vMainCommunicationTask+0x14>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    19ba:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    19be:	a1 2c       	mov	r10, r1
    19c0:	b1 2c       	mov	r11, r1
    19c2:	c1 2c       	mov	r12, r1
    19c4:	d1 2c       	mov	r13, r1
    19c6:	e1 2c       	mov	r14, r1
    19c8:	f1 2c       	mov	r15, r1
    19ca:	03 e0       	ldi	r16, 0x03	; 3
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	48 ec       	ldi	r20, 0xC8	; 200
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	6b e0       	ldi	r22, 0x0B	; 11
    19d6:	76 e0       	ldi	r23, 0x06	; 6
    19d8:	85 e2       	ldi	r24, 0x25	; 37
    19da:	95 e0       	ldi	r25, 0x05	; 5
    19dc:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	19 f0       	breq	.+6      	; 0x19ea <vMainCommunicationTask+0x4a>
		vLED_singleHigh(ledRED);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	00 df       	rcall	.-512    	; 0x17ea <vLED_singleHigh>
	}
	uint8_t success = 0;
	vLED_singleHigh(ledYELLOW);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	fd de       	rcall	.-518    	; 0x17ea <vLED_singleHigh>
	while(!success) {
		success = server_connect();
    19f0:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <server_connect>
    19f4:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    19f6:	88 ee       	ldi	r24, 0xE8	; 232
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 87 24 	call	0x490e	; 0x490e <vTaskDelay>
		vLED_toggle(ledGREEN);
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	27 df       	rcall	.-434    	; 0x1852 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	vLED_singleHigh(ledYELLOW);
	while(!success) {
    1a04:	11 23       	and	r17, r17
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	vLED_singleLow(ledYELLOW);
    1a06:	a1 f3       	breq	.-24     	; 0x19f0 <vMainCommunicationTask+0x50>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	08 df       	rcall	.-496    	; 0x181e <vLED_singleLow>
	send_handshake();
    1a0e:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <send_handshake>
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a12:	0f 2e       	mov	r0, r31
    1a14:	f7 e3       	ldi	r31, 0x37	; 55
    1a16:	ef 2e       	mov	r14, r31
    1a18:	fb e1       	ldi	r31, 0x1B	; 27
    1a1a:	ff 2e       	mov	r15, r31
    1a1c:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1a1e:	01 e0       	ldi	r16, 0x01	; 1
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
					}
					else if (Setpoint.distance < -320){
						Setpoint.distance = -320;
    1a20:	0f 2e       	mov	r0, r31
    1a22:	f0 ec       	ldi	r31, 0xC0	; 192
    1a24:	6f 2e       	mov	r6, r31
    1a26:	fe ef       	ldi	r31, 0xFE	; 254
    1a28:	7f 2e       	mov	r7, r31
    1a2a:	f0 2d       	mov	r31, r0
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
    1a2c:	68 94       	set
    1a2e:	88 24       	eor	r8, r8
    1a30:	86 f8       	bld	r8, 6
    1a32:	99 24       	eor	r9, r9
    1a34:	93 94       	inc	r9
	}
	vLED_singleLow(ledYELLOW);
	send_handshake();
	
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	4f ef       	ldi	r20, 0xFF	; 255
    1a3a:	5f ef       	ldi	r21, 0xFF	; 255
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 91 33 1b 	lds	r24, 0x1B33	; 0x801b33 <xCommandReadyBSem>
    1a44:	90 91 34 1b 	lds	r25, 0x1B34	; 0x801b34 <xCommandReadyBSem+0x1>
    1a48:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	99 f7       	brne	.-26     	; 0x1a36 <vMainCommunicationTask+0x96>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1a50:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	0f 92       	push	r0
			command_in = message_in;
    1a5a:	f7 01       	movw	r30, r14
    1a5c:	10 81       	ld	r17, Z
    1a5e:	c1 80       	ldd	r12, Z+1	; 0x01
    1a60:	d2 80       	ldd	r13, Z+2	; 0x02
    1a62:	a3 80       	ldd	r10, Z+3	; 0x03
    1a64:	b4 80       	ldd	r11, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1a6a:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
			switch(command_in.type){
    1a6e:	15 30       	cpi	r17, 0x05	; 5
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <vMainCommunicationTask+0xd4>
    1a72:	65 c0       	rjmp	.+202    	; 0x1b3e <vMainCommunicationTask+0x19e>
    1a74:	30 f4       	brcc	.+12     	; 0x1a82 <vMainCommunicationTask+0xe2>
    1a76:	12 30       	cpi	r17, 0x02	; 2
    1a78:	b1 f0       	breq	.+44     	; 0x1aa6 <vMainCommunicationTask+0x106>
    1a7a:	14 30       	cpi	r17, 0x04	; 4
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <vMainCommunicationTask+0xe0>
    1a7e:	45 c0       	rjmp	.+138    	; 0x1b0a <vMainCommunicationTask+0x16a>
    1a80:	da cf       	rjmp	.-76     	; 0x1a36 <vMainCommunicationTask+0x96>
    1a82:	17 30       	cpi	r17, 0x07	; 7
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <vMainCommunicationTask+0xe8>
    1a86:	63 c0       	rjmp	.+198    	; 0x1b4e <vMainCommunicationTask+0x1ae>
    1a88:	18 f0       	brcs	.+6      	; 0x1a90 <vMainCommunicationTask+0xf0>
    1a8a:	18 30       	cpi	r17, 0x08	; 8
    1a8c:	49 f0       	breq	.+18     	; 0x1aa0 <vMainCommunicationTask+0x100>
    1a8e:	d3 cf       	rjmp	.-90     	; 0x1a36 <vMainCommunicationTask+0x96>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1a96:	00 93 c2 19 	sts	0x19C2, r16	; 0x8019c2 <gHandshook>
					taskEXIT_CRITICAL();
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63

					break;
    1a9e:	cb cf       	rjmp	.-106    	; 0x1a36 <vMainCommunicationTask+0x96>
					case TYPE_PING:
					send_ping_response();
    1aa0:	0e 94 73 20 	call	0x40e6	; 0x40e6 <send_ping_response>
					break;
    1aa4:	c8 cf       	rjmp	.-112    	; 0x1a36 <vMainCommunicationTask+0x96>
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	dd 0c       	add	r13, r13
    1aaa:	88 0b       	sbc	r24, r24
    1aac:	99 0b       	sbc	r25, r25
    1aae:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
    1ab2:	f1 e4       	ldi	r31, 0x41	; 65
    1ab4:	af 16       	cp	r10, r31
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	bf 06       	cpc	r11, r31
    1aba:	1c f0       	brlt	.+6      	; 0x1ac2 <vMainCommunicationTask+0x122>
						Setpoint.distance = 320;
    1abc:	9e 82       	std	Y+6, r9	; 0x06
    1abe:	8d 82       	std	Y+5, r8	; 0x05
    1ac0:	0a c0       	rjmp	.+20     	; 0x1ad6 <vMainCommunicationTask+0x136>
					}
					else if (Setpoint.distance < -320){
    1ac2:	20 ec       	ldi	r18, 0xC0	; 192
    1ac4:	a2 16       	cp	r10, r18
    1ac6:	2e ef       	ldi	r18, 0xFE	; 254
    1ac8:	b2 06       	cpc	r11, r18
    1aca:	1c f0       	brlt	.+6      	; 0x1ad2 <vMainCommunicationTask+0x132>
					case TYPE_PING:
					send_ping_response();
					break;
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
    1acc:	be 82       	std	Y+6, r11	; 0x06
    1ace:	ad 82       	std	Y+5, r10	; 0x05
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <vMainCommunicationTask+0x136>
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
					}
					else if (Setpoint.distance < -320){
						Setpoint.distance = -320;
    1ad2:	7e 82       	std	Y+6, r7	; 0x06
    1ad4:	6d 82       	std	Y+5, r6	; 0x05
					}
					Setpoint.heading *= DEG2RAD; // Convert received set point to radians
    1ad6:	25 e3       	ldi	r18, 0x35	; 53
    1ad8:	3a ef       	ldi	r19, 0xFA	; 250
    1ada:	4e e8       	ldi	r20, 0x8E	; 142
    1adc:	5c e3       	ldi	r21, 0x3C	; 60
    1ade:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    1ae2:	69 83       	std	Y+1, r22	; 0x01
    1ae4:	7a 83       	std	Y+2, r23	; 0x02
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
					vFunc_Inf2pi(&Setpoint.heading);
    1ae8:	9c 83       	std	Y+4, r25	; 0x04
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	60 da       	rcall	.-2880   	; 0xfb0 <vFunc_Inf2pi>
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	44 e6       	ldi	r20, 0x64	; 100
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	be 01       	movw	r22, r28
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	80 91 c9 19 	lds	r24, 0x19C9	; 0x8019c9 <poseControllerQ>
    1b00:	90 91 ca 19 	lds	r25, 0x19CA	; 0x8019ca <poseControllerQ+0x1>
    1b04:	0e 94 37 1a 	call	0x346e	; 0x346e <xQueueGenericSend>
					break;
    1b08:	96 cf       	rjmp	.-212    	; 0x1a36 <vMainCommunicationTask+0x96>
				case TYPE_PAUSE:
					// Stop sending update messages
					taskENTER_CRITICAL();
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	0f 92       	push	r0
					gPaused = TRUE;
    1b10:	00 93 c1 19 	sts	0x19C1, r16	; 0x8019c1 <gPaused>
					taskEXIT_CRITICAL();
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.distance = 0;
    1b18:	1e 82       	std	Y+6, r1	; 0x06
    1b1a:	1d 82       	std	Y+5, r1	; 0x05
					Setpoint.heading = 0;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    1b1e:	1a 82       	std	Y+2, r1	; 0x02
    1b20:	1b 82       	std	Y+3, r1	; 0x03
    1b22:	1c 82       	std	Y+4, r1	; 0x04
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	44 e6       	ldi	r20, 0x64	; 100
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	be 01       	movw	r22, r28
    1b2c:	6f 5f       	subi	r22, 0xFF	; 255
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	80 91 c9 19 	lds	r24, 0x19C9	; 0x8019c9 <poseControllerQ>
    1b34:	90 91 ca 19 	lds	r25, 0x19CA	; 0x8019ca <poseControllerQ+0x1>
    1b38:	0e 94 37 1a 	call	0x346e	; 0x346e <xQueueGenericSend>
					break;
    1b3c:	7c cf       	rjmp	.-264    	; 0x1a36 <vMainCommunicationTask+0x96>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	0f 92       	push	r0
					gPaused = FALSE;
    1b44:	10 92 c1 19 	sts	0x19C1, r1	; 0x8019c1 <gPaused>
					taskEXIT_CRITICAL();
    1b48:	0f 90       	pop	r0
    1b4a:	0f be       	out	0x3f, r0	; 63
					break;
    1b4c:	74 cf       	rjmp	.-280    	; 0x1a36 <vMainCommunicationTask+0x96>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	0f 92       	push	r0
					gHandshook = FALSE;
    1b54:	10 92 c2 19 	sts	0x19C2, r1	; 0x8019c2 <gHandshook>
					taskEXIT_CRITICAL();
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
					break;
    1b5c:	6c cf       	rjmp	.-296    	; 0x1a36 <vMainCommunicationTask+0x96>

00001b5e <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	1f 92       	push	r1
    1b64:	1f 92       	push	r1
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1b6a:	0e 94 31 28 	call	0x5062	; 0x5062 <xTaskGetTickCount>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1b72:	64 e1       	ldi	r22, 0x14	; 20
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	ce 01       	movw	r24, r28
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <vTaskDelayUntil>
    1b7e:	f9 cf       	rjmp	.-14     	; 0x1b72 <vMainMovementTask+0x14>

00001b80 <vMainSensorTowerTask>:
		} // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	2f 97       	sbiw	r28, 0x0f	; 15
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1b94:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1b96:	f1 2c       	mov	r15, r1
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1b98:	33 24       	eor	r3, r3
    1b9a:	33 94       	inc	r3
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1b9e:	68 94       	set
    1ba0:	dd 24       	eor	r13, r13
    1ba2:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1ba4:	68 94       	set
    1ba6:	22 24       	eor	r2, r2
    1ba8:	22 f8       	bld	r2, 2
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <vMainSensorTowerTask+0x48>
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1bac:	0f 2e       	mov	r0, r31
    1bae:	f3 e0       	ldi	r31, 0x03	; 3
    1bb0:	df 2e       	mov	r13, r31
    1bb2:	f0 2d       	mov	r31, r0
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1bb6:	0f 2e       	mov	r0, r31
    1bb8:	f3 e0       	ldi	r31, 0x03	; 3
    1bba:	df 2e       	mov	r13, r31
    1bbc:	f0 2d       	mov	r31, r0
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1bc0:	0f 2e       	mov	r0, r31
    1bc2:	f3 e0       	ldi	r31, 0x03	; 3
    1bc4:	df 2e       	mov	r13, r31
    1bc6:	f0 2d       	mov	r31, r0
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
        // Loop
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1bc8:	80 91 c2 19 	lds	r24, 0x19C2	; 0x8019c2 <gHandshook>
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <vMainSensorTowerTask+0x52>
    1bd0:	06 c1       	rjmp	.+524    	; 0x1dde <vMainSensorTowerTask+0x25e>
    1bd2:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <gPaused>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	02 c1       	rjmp	.+516    	; 0x1dde <vMainSensorTowerTask+0x25e>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1bda:	0e 94 31 28 	call	0x5062	; 0x5062 <xTaskGetTickCount>
    1bde:	9b 83       	std	Y+3, r25	; 0x03
    1be0:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	46 e9       	ldi	r20, 0x96	; 150
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	be 01       	movw	r22, r28
    1bea:	6f 5f       	subi	r22, 0xFF	; 255
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <scanStatusQ>
    1bf2:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <scanStatusQ+0x1>
    1bf6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	d9 f4       	brne	.+54     	; 0x1c34 <vMainSensorTowerTask+0xb4>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	88 23       	and	r24, r24
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <vMainSensorTowerTask+0x8a>
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	a8 f4       	brcc	.+42     	; 0x1c32 <vMainSensorTowerTask+0xb2>
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <vMainSensorTowerTask+0x9a>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1c0a:	13 9d       	mul	r17, r3
    1c0c:	10 2d       	mov	r17, r0
    1c0e:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1c10:	ff 24       	eor	r15, r15
    1c12:	f3 94       	inc	r15
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1c14:	33 24       	eor	r3, r3
    1c16:	33 94       	inc	r3
                        idleCounter = 1;
                    break;
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <vMainSensorTowerTask+0xb4>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1c1a:	8d ec       	ldi	r24, 0xCD	; 205
    1c1c:	18 9f       	mul	r17, r24
    1c1e:	11 2d       	mov	r17, r1
    1c20:	11 24       	eor	r1, r1
    1c22:	16 95       	lsr	r17
    1c24:	16 95       	lsr	r17
                        idleCounter = 0;
    1c26:	f1 2c       	mov	r15, r1
                        servoResolution = 1;
                        idleCounter = 1;
                    break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1c28:	0f 2e       	mov	r0, r31
    1c2a:	f5 e0       	ldi	r31, 0x05	; 5
    1c2c:	3f 2e       	mov	r3, r31
    1c2e:	f0 2d       	mov	r31, r0
                        servoStep /= servoResolution;
                        idleCounter = 0;
                    break;
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <vMainSensorTowerTask+0xb4>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1c32:	f1 2c       	mov	r15, r1
                    default:
                        idleCounter = 0;
                    break;
                }
            }
            vServo_setAngle(servoStep*servoResolution);
    1c34:	13 9d       	mul	r17, r3
    1c36:	80 2d       	mov	r24, r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	0e 94 97 20 	call	0x412e	; 0x412e <vServo_setAngle>
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point
    1c3e:	68 ec       	ldi	r22, 0xC8	; 200
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	ce 01       	movw	r24, r28
    1c44:	02 96       	adiw	r24, 0x02	; 2
    1c46:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	8e d9       	rcall	.-3300   	; 0xf6a <ui8DistSens_readCM>
    1c4e:	8e 87       	std	Y+14, r24	; 0x0e
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	8b d9       	rcall	.-3306   	; 0xf6a <ui8DistSens_readCM>
    1c54:	e8 2e       	mov	r14, r24
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	88 d9       	rcall	.-3312   	; 0xf6a <ui8DistSens_readCM>
    1c5a:	c8 2e       	mov	r12, r24
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	85 d9       	rcall	.-3318   	; 0xf6a <ui8DistSens_readCM>
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
    1c62:	20 e0       	ldi	r18, 0x00	; 0
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1c64:	48 e2       	ldi	r20, 0x28	; 40
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    1c70:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    1c74:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
    1c78:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <gTheta_hat>
                thetahat = gTheta_hat;
    1c7c:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <gTheta_hat+0x1>
    1c80:	a0 91 bf 19 	lds	r26, 0x19BF	; 0x8019bf <gTheta_hat+0x2>
    1c84:	b0 91 c0 19 	lds	r27, 0x19C0	; 0x8019c0 <gTheta_hat+0x3>
    1c88:	8a 87       	std	Y+10, r24	; 0x0a
    1c8a:	9b 87       	std	Y+11, r25	; 0x0b
    1c8c:	ac 87       	std	Y+12, r26	; 0x0c
    1c8e:	bd 87       	std	Y+13, r27	; 0x0d
    1c90:	a0 90 bb 19 	lds	r10, 0x19BB	; 0x8019bb <gX_hat>
                xhat = gX_hat;
    1c94:	b0 90 bc 19 	lds	r11, 0x19BC	; 0x8019bc <gX_hat+0x1>
    1c98:	60 90 b9 19 	lds	r6, 0x19B9	; 0x8019b9 <gY_hat>
                yhat = gY_hat;
    1c9c:	70 90 ba 19 	lds	r7, 0x19BA	; 0x8019ba <gY_hat+0x1>
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    1ca8:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    1cac:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
    1cb0:	9a e0       	ldi	r25, 0x0A	; 10
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1cb2:	9f 15       	cp	r25, r15
    1cb4:	40 f4       	brcc	.+16     	; 0x1cc6 <vMainSensorTowerTask+0x146>
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	81 11       	cpse	r24, r1
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <vMainSensorTowerTask+0x146>
    1cbc:	0e 94 12 20 	call	0x4024	; 0x4024 <send_idle>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1cc0:	ff 24       	eor	r15, r15
                idleCounter = 1;
    1cc2:	f3 94       	inc	r15
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <vMainSensorTowerTask+0x152>
    1cc6:	ff 20       	and	r15, r15
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1cc8:	21 f0       	breq	.+8      	; 0x1cd2 <vMainSensorTowerTask+0x152>
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	81 11       	cpse	r24, r1
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <vMainSensorTowerTask+0x152>
    1cd0:	f3 94       	inc	r15
                idleCounter++;
    1cd2:	43 2c       	mov	r4, r3
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1cd4:	51 2c       	mov	r5, r1
    1cd6:	14 9d       	mul	r17, r4
    1cd8:	40 01       	movw	r8, r0
    1cda:	15 9d       	mul	r17, r5
    1cdc:	90 0c       	add	r9, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	44 e3       	ldi	r20, 0x34	; 52
    1ce6:	53 e4       	ldi	r21, 0x43	; 67
    1ce8:	6a 85       	ldd	r22, Y+10	; 0x0a
    1cea:	7b 85       	ldd	r23, Y+11	; 0x0b
    1cec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cf0:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    1cf4:	2b ed       	ldi	r18, 0xDB	; 219
    1cf6:	3f e0       	ldi	r19, 0x0F	; 15
    1cf8:	49 e4       	ldi	r20, 0x49	; 73
    1cfa:	50 e4       	ldi	r21, 0x40	; 64
    1cfc:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__divsf3>
    1d00:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    1d04:	6a 87       	std	Y+10, r22	; 0x0a
    1d06:	7b 87       	std	Y+11, r23	; 0x0b
    1d08:	8c 87       	std	Y+12, r24	; 0x0c
    1d0a:	9d 87       	std	Y+13, r25	; 0x0d
    1d0c:	c3 01       	movw	r24, r6
    1d0e:	6a e0       	ldi	r22, 0x0A	; 10
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__divmodhi4>
    1d16:	fb 01       	movw	r30, r22
    1d18:	c5 01       	movw	r24, r10
    1d1a:	6a e0       	ldi	r22, 0x0A	; 10
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__divmodhi4>
    1d22:	cb 01       	movw	r24, r22
    1d24:	af 84       	ldd	r10, Y+15	; 0x0f
    1d26:	0e 85       	ldd	r16, Y+14	; 0x0e
    1d28:	94 01       	movw	r18, r8
    1d2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    1d2c:	5b 85       	ldd	r21, Y+11	; 0x0b
    1d2e:	bf 01       	movw	r22, r30
    1d30:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <send_update>
    1d34:	af e1       	ldi	r26, 0x1F	; 31
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1d36:	8a 16       	cp	r8, r26
    1d38:	91 04       	cpc	r9, r1
    1d3a:	34 f0       	brlt	.+12     	; 0x1d48 <vMainSensorTowerTask+0x1c8>
    1d3c:	bc e3       	ldi	r27, 0x3C	; 60
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1d3e:	8b 16       	cp	r8, r27
    1d40:	91 04       	cpc	r9, r1
    1d42:	c4 f0       	brlt	.+48     	; 0x1d74 <vMainSensorTowerTask+0x1f4>
    1d44:	af 84       	ldd	r10, Y+15	; 0x0f
    1d46:	ae 86       	std	Y+14, r10	; 0x0e
    1d48:	8e 85       	ldd	r24, Y+14	; 0x0e
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1d4a:	81 50       	subi	r24, 0x01	; 1
    1d4c:	83 31       	cpi	r24, 0x13	; 19
    1d4e:	90 f4       	brcc	.+36     	; 0x1d74 <vMainSensorTowerTask+0x1f4>
    1d50:	1c 82       	std	Y+4, r1	; 0x04
                // Stop controller
                struct sPolar Setpoint = {0, 0};
    1d52:	1d 82       	std	Y+5, r1	; 0x05
    1d54:	1e 82       	std	Y+6, r1	; 0x06
    1d56:	1f 82       	std	Y+7, r1	; 0x07
    1d58:	19 86       	std	Y+9, r1	; 0x09
    1d5a:	18 86       	std	Y+8, r1	; 0x08
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1d5e:	44 e6       	ldi	r20, 0x64	; 100
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	be 01       	movw	r22, r28
    1d64:	6c 5f       	subi	r22, 0xFC	; 252
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	80 91 c9 19 	lds	r24, 0x19C9	; 0x8019c9 <poseControllerQ>
    1d6c:	90 91 ca 19 	lds	r25, 0x19CA	; 0x8019ca <poseControllerQ+0x1>
    1d70:	0e 94 37 1a 	call	0x346e	; 0x346e <xQueueGenericSend>
    1d74:	8b e5       	ldi	r24, 0x5B	; 91
				
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1d76:	88 16       	cp	r8, r24
    1d78:	91 04       	cpc	r9, r1
    1d7a:	9c f4       	brge	.+38     	; 0x1da2 <vMainSensorTowerTask+0x222>
    1d7c:	94 e0       	ldi	r25, 0x04	; 4
    1d7e:	d9 12       	cpse	r13, r25
    1d80:	10 c0       	rjmp	.+32     	; 0x1da2 <vMainSensorTowerTask+0x222>
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <vMainSensorTowerTask+0x20a>
    1d88:	40 c0       	rjmp	.+128    	; 0x1e0a <vMainSensorTowerTask+0x28a>
    1d8a:	1f 5f       	subi	r17, 0xFF	; 255
                servoStep++;
    1d8c:	14 9d       	mul	r17, r4
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1d8e:	40 01       	movw	r8, r0
    1d90:	15 9d       	mul	r17, r5
    1d92:	90 0c       	add	r9, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	aa e5       	ldi	r26, 0x5A	; 90
    1d98:	8a 16       	cp	r8, r26
    1d9a:	91 04       	cpc	r9, r1
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <vMainSensorTowerTask+0x220>
    1d9e:	06 cf       	rjmp	.-500    	; 0x1bac <vMainSensorTowerTask+0x2c>
    1da0:	15 c0       	rjmp	.+42     	; 0x1dcc <vMainSensorTowerTask+0x24c>
    1da2:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1da4:	19 04       	cpc	r1, r9
    1da6:	34 f5       	brge	.+76     	; 0x1df4 <vMainSensorTowerTask+0x274>
    1da8:	b3 e0       	ldi	r27, 0x03	; 3
    1daa:	db 12       	cpse	r13, r27
    1dac:	28 c0       	rjmp	.+80     	; 0x1dfe <vMainSensorTowerTask+0x27e>
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <vMainSensorTowerTask+0x236>
    1db4:	09 cf       	rjmp	.-494    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1db6:	11 50       	subi	r17, 0x01	; 1
                servoStep --;
    1db8:	14 9d       	mul	r17, r4
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1dba:	40 01       	movw	r8, r0
    1dbc:	15 9d       	mul	r17, r5
    1dbe:	90 0c       	add	r9, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <vMainSensorTowerTask+0x24c>
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	d8 16       	cp	r13, r24
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <vMainSensorTowerTask+0x24c>
    1dca:	f5 ce       	rjmp	.-534    	; 0x1bb6 <vMainSensorTowerTask+0x36>
    1dcc:	18 14       	cp	r1, r8
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1dce:	19 04       	cpc	r1, r9
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <vMainSensorTowerTask+0x254>
    1dd2:	fa ce       	rjmp	.-524    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	d9 12       	cpse	r13, r25
    1dd8:	f7 ce       	rjmp	.-530    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1dda:	d2 2c       	mov	r13, r2
                rotationDirection = moveCounterClockwise;
    1ddc:	f5 ce       	rjmp	.-534    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1de0:	0e 94 97 20 	call	0x412e	; 0x412e <vServo_setAngle>
    1de4:	84 e6       	ldi	r24, 0x64	; 100
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 87 24 	call	0x490e	; 0x490e <vTaskDelay>
    1dec:	f1 2c       	mov	r15, r1
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1dee:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1df0:	d2 2c       	mov	r13, r2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1df2:	ea ce       	rjmp	.-556    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1df4:	aa e5       	ldi	r26, 0x5A	; 90
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1df6:	8a 16       	cp	r8, r26
    1df8:	91 04       	cpc	r9, r1
    1dfa:	64 f3       	brlt	.-40     	; 0x1dd4 <vMainSensorTowerTask+0x254>
    1dfc:	0a c0       	rjmp	.+20     	; 0x1e12 <vMainSensorTowerTask+0x292>
    1dfe:	ba e5       	ldi	r27, 0x5A	; 90
    1e00:	8b 16       	cp	r8, r27
    1e02:	91 04       	cpc	r9, r1
    1e04:	0c f4       	brge	.+2      	; 0x1e08 <vMainSensorTowerTask+0x288>
    1e06:	e0 ce       	rjmp	.-576    	; 0x1bc8 <vMainSensorTowerTask+0x48>
    1e08:	dd cf       	rjmp	.-70     	; 0x1dc4 <vMainSensorTowerTask+0x244>
    1e0a:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e0c:	19 04       	cpc	r1, r9
    1e0e:	bc f3       	brlt	.-18     	; 0x1dfe <vMainSensorTowerTask+0x27e>
    1e10:	f1 cf       	rjmp	.-30     	; 0x1df4 <vMainSensorTowerTask+0x274>
    1e12:	84 e0       	ldi	r24, 0x04	; 4
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e14:	d8 16       	cp	r13, r24
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <vMainSensorTowerTask+0x29a>
    1e18:	d3 ce       	rjmp	.-602    	; 0x1bc0 <vMainSensorTowerTask+0x40>
    1e1a:	dc cf       	rjmp	.-72     	; 0x1dd4 <vMainSensorTowerTask+0x254>

00001e1c <vMainPoseControllerTask>:
    1e1c:	cf 93       	push	r28
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1e1e:	df 93       	push	r29
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	ab 97       	sbiw	r28, 0x2b	; 43
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    #ifdef DEBUG
        printf("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
    /* Task init */    
    struct sPolar Setpoint = {0}; // Updates from server
    1e30:	fe 01       	movw	r30, r28
    1e32:	31 96       	adiw	r30, 0x01	; 1
    1e34:	86 e0       	ldi	r24, 0x06	; 6
    1e36:	df 01       	movw	r26, r30
    1e38:	1d 92       	st	X+, r1
    1e3a:	8a 95       	dec	r24
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <vMainPoseControllerTask+0x1c>
    struct sCartesian Error = {0}; // Error values
    struct sPolar oldVal = {0};
    struct sPolar referenceModel = {0};
	float radiusEpsilon = 15; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1e3e:	1f 82       	std	Y+7, r1	; 0x07
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1e40:	19 86       	std	Y+9, r1	; 0x09
    1e42:	18 86       	std	Y+8, r1	; 0x08
	int16_t rightWheelTicks = 0;
    1e44:	1b 86       	std	Y+11, r1	; 0x0b
    1e46:	1a 86       	std	Y+10, r1	; 0x0a
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1e48:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t gRightWheelDirection = 0;
    1e4a:	1d 86       	std	Y+13, r1	; 0x0d
	
	uint8_t idleSendt = FALSE;
    1e4c:	1a 8e       	std	Y+26, r1	; 0x1a
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1e4e:	b1 e0       	ldi	r27, 0x01	; 1
    1e50:	bb a7       	std	Y+43, r27	; 0x2b
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1e52:	1f a2       	std	Y+39, r1	; 0x27
    1e54:	18 a6       	std	Y+40, r1	; 0x28
    1e56:	19 a6       	std	Y+41, r1	; 0x29
    1e58:	1a a6       	std	Y+42, r1	; 0x2a
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1e5a:	1b a2       	std	Y+35, r1	; 0x23
    1e5c:	1c a2       	std	Y+36, r1	; 0x24
    1e5e:	1d a2       	std	Y+37, r1	; 0x25
    1e60:	1e a2       	std	Y+38, r1	; 0x26
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
	float yTargt = 0;
    1e62:	1f 8e       	std	Y+31, r1	; 0x1f
    1e64:	18 a2       	std	Y+32, r1	; 0x20
    1e66:	19 a2       	std	Y+33, r1	; 0x21
    1e68:	1a a2       	std	Y+34, r1	; 0x22
	int16_t yhat = 0;
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
    1e6a:	1b 8e       	std	Y+27, r1	; 0x1b
    1e6c:	1c 8e       	std	Y+28, r1	; 0x1c
    1e6e:	1d 8e       	std	Y+29, r1	; 0x1d
    1e70:	1e 8e       	std	Y+30, r1	; 0x1e
	
	
      
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1e72:	80 91 c2 19 	lds	r24, 0x19C2	; 0x8019c2 <gHandshook>
    1e76:	88 23       	and	r24, r24
    1e78:	e1 f3       	breq	.-8      	; 0x1e72 <vMainPoseControllerTask+0x56>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e7a:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1e7c:	40 91 c3 19 	lds	r20, 0x19C3	; 0x8019c3 <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1e80:	10 92 c3 19 	sts	0x19C3, r1	; 0x8019c3 <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1e84:	10 91 c4 19 	lds	r17, 0x19C4	; 0x8019c4 <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1e88:	10 92 c4 19 	sts	0x19C4, r1	; 0x8019c4 <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1e8c:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1e8e:	be 01       	movw	r22, r28
    1e90:	68 5f       	subi	r22, 0xF8	; 248
    1e92:	7f 4f       	sbci	r23, 0xFF	; 255
    1e94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e96:	7b d6       	rcall	.+3318   	; 0x2b8e <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1e98:	41 2f       	mov	r20, r17
    1e9a:	be 01       	movw	r22, r28
    1e9c:	66 5f       	subi	r22, 0xF6	; 246
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	8c d6       	rcall	.+3352   	; 0x2bbc <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 91 2f 1b 	lds	r24, 0x1B2F	; 0x801b2f <xTickMutex>
    1eb2:	90 91 30 1b 	lds	r25, 0x1B30	; 0x801b30 <xTickMutex+0x1>
    1eb6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1eba:	88 85       	ldd	r24, Y+8	; 0x08
    1ebc:	99 85       	ldd	r25, Y+9	; 0x09
    1ebe:	90 93 b6 19 	sts	0x19B6, r25	; 0x8019b6 <gLeftWheelTicks+0x1>
    1ec2:	80 93 b5 19 	sts	0x19B5, r24	; 0x8019b5 <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eca:	90 93 b8 19 	sts	0x19B8, r25	; 0x8019b8 <gRightWheelTicks+0x1>
    1ece:	80 93 b7 19 	sts	0x19B7, r24	; 0x8019b7 <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	80 91 2f 1b 	lds	r24, 0x1B2F	; 0x801b2f <xTickMutex>
    1eda:	90 91 30 1b 	lds	r25, 0x1B30	; 0x801b30 <xTickMutex+0x1>
    1ede:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	4f ef       	ldi	r20, 0xFF	; 255
    1ee6:	5f ef       	ldi	r21, 0xFF	; 255
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	80 91 2d 1b 	lds	r24, 0x1B2D	; 0x801b2d <xControllerBSem>
    1ef0:	90 91 2e 1b 	lds	r25, 0x1B2E	; 0x801b2e <xControllerBSem+0x1>
    1ef4:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <vMainPoseControllerTask+0xe2>
    1efc:	ba cf       	rjmp	.-140    	; 0x1e72 <vMainPoseControllerTask+0x56>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	4f ef       	ldi	r20, 0xFF	; 255
    1f02:	5f ef       	ldi	r21, 0xFF	; 255
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    1f0c:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    1f10:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1f14:	40 90 bd 19 	lds	r4, 0x19BD	; 0x8019bd <gTheta_hat>
    1f18:	50 90 be 19 	lds	r5, 0x19BE	; 0x8019be <gTheta_hat+0x1>
    1f1c:	60 90 bf 19 	lds	r6, 0x19BF	; 0x8019bf <gTheta_hat+0x2>
    1f20:	70 90 c0 19 	lds	r7, 0x19C0	; 0x8019c0 <gTheta_hat+0x3>
					xhat = gX_hat;
    1f24:	00 91 bb 19 	lds	r16, 0x19BB	; 0x8019bb <gX_hat>
    1f28:	10 91 bc 19 	lds	r17, 0x19BC	; 0x8019bc <gX_hat+0x1>
					yhat = gY_hat;
    1f2c:	20 90 b9 19 	lds	r2, 0x19B9	; 0x8019b9 <gY_hat>
    1f30:	30 90 ba 19 	lds	r3, 0x19BA	; 0x8019ba <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    1f3c:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    1f40:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	be 01       	movw	r22, r28
    1f4c:	6f 5f       	subi	r22, 0xFF	; 255
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	80 91 c9 19 	lds	r24, 0x19C9	; 0x8019c9 <poseControllerQ>
    1f54:	90 91 ca 19 	lds	r25, 0x19CA	; 0x8019ca <poseControllerQ+0x1>
    1f58:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <vMainPoseControllerTask+0x146>
    1f60:	73 c0       	rjmp	.+230    	; 0x2048 <vMainPoseControllerTask+0x22c>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	44 e1       	ldi	r20, 0x14	; 20
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	be 01       	movw	r22, r28
    1f6a:	6f 5f       	subi	r22, 0xFF	; 255
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	80 91 c9 19 	lds	r24, 0x19C9	; 0x8019c9 <poseControllerQ>
    1f72:	90 91 ca 19 	lds	r25, 0x19CA	; 0x8019ca <poseControllerQ+0x1>
    1f76:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
					Setpoint.distance = Setpoint.distance*10; //Distance is received in cm, convert to mm for continuity
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	bc 01       	movw	r22, r24
    1f80:	66 0f       	add	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	68 0f       	add	r22, r24
    1f92:	79 1f       	adc	r23, r25
    1f94:	7e 83       	std	Y+6, r23	; 0x06
    1f96:	6d 83       	std	Y+5, r22	; 0x05
					
					
					
					xTargt = xhat + Setpoint.distance*cos(Setpoint.heading + thetahat);
    1f98:	07 2e       	mov	r0, r23
    1f9a:	00 0c       	add	r0, r0
    1f9c:	88 0b       	sbc	r24, r24
    1f9e:	99 0b       	sbc	r25, r25
    1fa0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    1fa4:	6a 8b       	std	Y+18, r22	; 0x12
    1fa6:	7b 8b       	std	Y+19, r23	; 0x13
    1fa8:	8c 8b       	std	Y+20, r24	; 0x14
    1faa:	9d 8b       	std	Y+21, r25	; 0x15
    1fac:	29 81       	ldd	r18, Y+1	; 0x01
    1fae:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb0:	4b 81       	ldd	r20, Y+3	; 0x03
    1fb2:	5c 81       	ldd	r21, Y+4	; 0x04
    1fb4:	c3 01       	movw	r24, r6
    1fb6:	b2 01       	movw	r22, r4
    1fb8:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    1fbc:	6b 01       	movw	r12, r22
    1fbe:	7c 01       	movw	r14, r24
    1fc0:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <cos>
    1fc4:	6e 8b       	std	Y+22, r22	; 0x16
    1fc6:	7f 8b       	std	Y+23, r23	; 0x17
    1fc8:	88 8f       	std	Y+24, r24	; 0x18
    1fca:	99 8f       	std	Y+25, r25	; 0x19
    1fcc:	b8 01       	movw	r22, r16
    1fce:	01 2e       	mov	r0, r17
    1fd0:	00 0c       	add	r0, r0
    1fd2:	88 0b       	sbc	r24, r24
    1fd4:	99 0b       	sbc	r25, r25
    1fd6:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    1fda:	4b 01       	movw	r8, r22
    1fdc:	5c 01       	movw	r10, r24
    1fde:	2e 89       	ldd	r18, Y+22	; 0x16
    1fe0:	3f 89       	ldd	r19, Y+23	; 0x17
    1fe2:	48 8d       	ldd	r20, Y+24	; 0x18
    1fe4:	59 8d       	ldd	r21, Y+25	; 0x19
    1fe6:	6a 89       	ldd	r22, Y+18	; 0x12
    1fe8:	7b 89       	ldd	r23, Y+19	; 0x13
    1fea:	8c 89       	ldd	r24, Y+20	; 0x14
    1fec:	9d 89       	ldd	r25, Y+21	; 0x15
    1fee:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    1ff2:	9b 01       	movw	r18, r22
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	c5 01       	movw	r24, r10
    1ff8:	b4 01       	movw	r22, r8
    1ffa:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    1ffe:	6b 8f       	std	Y+27, r22	; 0x1b
    2000:	7c 8f       	std	Y+28, r23	; 0x1c
    2002:	8d 8f       	std	Y+29, r24	; 0x1d
    2004:	9e 8f       	std	Y+30, r25	; 0x1e
					yTargt = yhat + Setpoint.distance*sin(Setpoint.heading + thetahat);
    2006:	c7 01       	movw	r24, r14
    2008:	b6 01       	movw	r22, r12
    200a:	0e 94 f6 31 	call	0x63ec	; 0x63ec <sin>
    200e:	4b 01       	movw	r8, r22
    2010:	5c 01       	movw	r10, r24
    2012:	b1 01       	movw	r22, r2
    2014:	03 2c       	mov	r0, r3
    2016:	00 0c       	add	r0, r0
    2018:	88 0b       	sbc	r24, r24
    201a:	99 0b       	sbc	r25, r25
    201c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    2020:	6b 01       	movw	r12, r22
    2022:	7c 01       	movw	r14, r24
    2024:	a5 01       	movw	r20, r10
    2026:	94 01       	movw	r18, r8
    2028:	6a 89       	ldd	r22, Y+18	; 0x12
    202a:	7b 89       	ldd	r23, Y+19	; 0x13
    202c:	8c 89       	ldd	r24, Y+20	; 0x14
    202e:	9d 89       	ldd	r25, Y+21	; 0x15
    2030:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2034:	9b 01       	movw	r18, r22
    2036:	ac 01       	movw	r20, r24
    2038:	c7 01       	movw	r24, r14
    203a:	b6 01       	movw	r22, r12
    203c:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2040:	6f 8f       	std	Y+31, r22	; 0x1f
    2042:	78 a3       	std	Y+32, r23	; 0x20
    2044:	89 a3       	std	Y+33, r24	; 0x21
    2046:	9a a3       	std	Y+34, r25	; 0x22
					
					
				
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    2048:	b8 01       	movw	r22, r16
    204a:	11 0f       	add	r17, r17
    204c:	88 0b       	sbc	r24, r24
    204e:	99 0b       	sbc	r25, r25
    2050:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	6b 8d       	ldd	r22, Y+27	; 0x1b
    205a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    205c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    205e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2060:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    2064:	6a 8b       	std	Y+18, r22	; 0x12
    2066:	7b 8b       	std	Y+19, r23	; 0x13
    2068:	8c 8b       	std	Y+20, r24	; 0x14
    206a:	9d 8b       	std	Y+21, r25	; 0x15
    206c:	b1 01       	movw	r22, r2
    206e:	33 0c       	add	r3, r3
    2070:	88 0b       	sbc	r24, r24
    2072:	99 0b       	sbc	r25, r25
    2074:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    207e:	78 a1       	ldd	r23, Y+32	; 0x20
    2080:	89 a1       	ldd	r24, Y+33	; 0x21
    2082:	9a a1       	ldd	r25, Y+34	; 0x22
    2084:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    2088:	6b 01       	movw	r12, r22
    208a:	7c 01       	movw	r14, r24
    208c:	2a 89       	ldd	r18, Y+18	; 0x12
    208e:	3b 89       	ldd	r19, Y+19	; 0x13
    2090:	4c 89       	ldd	r20, Y+20	; 0x14
    2092:	5d 89       	ldd	r21, Y+21	; 0x15
    2094:	ca 01       	movw	r24, r20
    2096:	b9 01       	movw	r22, r18
    2098:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    209c:	4b 01       	movw	r8, r22
    209e:	5c 01       	movw	r10, r24
    20a0:	a7 01       	movw	r20, r14
    20a2:	96 01       	movw	r18, r12
    20a4:	c7 01       	movw	r24, r14
    20a6:	b6 01       	movw	r22, r12
    20a8:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    20ac:	6e 8b       	std	Y+22, r22	; 0x16
    20ae:	7f 8b       	std	Y+23, r23	; 0x17
    20b0:	88 8f       	std	Y+24, r24	; 0x18
    20b2:	99 8f       	std	Y+25, r25	; 0x19
    20b4:	2e 89       	ldd	r18, Y+22	; 0x16
    20b6:	3f 89       	ldd	r19, Y+23	; 0x17
    20b8:	48 8d       	ldd	r20, Y+24	; 0x18
    20ba:	59 8d       	ldd	r21, Y+25	; 0x19
    20bc:	c5 01       	movw	r24, r10
    20be:	b4 01       	movw	r22, r8
    20c0:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    20c4:	0e 94 00 32 	call	0x6400	; 0x6400 <sqrt>
    20c8:	4b 01       	movw	r8, r22
    20ca:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a ef       	ldi	r20, 0xFA	; 250
    20d2:	53 e4       	ldi	r21, 0x43	; 67
    20d4:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <__cmpsf2>
    20d8:	88 23       	and	r24, r24
    20da:	c4 f4       	brge	.+48     	; 0x210c <vMainPoseControllerTask+0x2f0>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	48 e8       	ldi	r20, 0x88	; 136
    20e2:	52 e4       	ldi	r21, 0x42	; 66
    20e4:	c5 01       	movw	r24, r10
    20e6:	b4 01       	movw	r22, r8
    20e8:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__divsf3>
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	52 e4       	ldi	r21, 0x42	; 66
    2100:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2104:	0e 94 4c 30 	call	0x6098	; 0x6098 <__fixunssfsi>
    2108:	06 2f       	mov	r16, r22
    210a:	01 c0       	rjmp	.+2      	; 0x210e <vMainPoseControllerTask+0x2f2>
				}else{
					currentDriveActuation = maxDriveActuation;
    210c:	04 e6       	ldi	r16, 0x64	; 100
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e7       	ldi	r20, 0x70	; 112
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	c5 01       	movw	r24, r10
    2118:	b4 01       	movw	r22, r8
    211a:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
    211e:	18 16       	cp	r1, r24
    2120:	0c f0       	brlt	.+2      	; 0x2124 <vMainPoseControllerTask+0x308>
    2122:	4e c1       	rjmp	.+668    	; 0x23c0 <__stack+0x1c1>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    2124:	2a 89       	ldd	r18, Y+18	; 0x12
    2126:	3b 89       	ldd	r19, Y+19	; 0x13
    2128:	4c 89       	ldd	r20, Y+20	; 0x14
    212a:	5d 89       	ldd	r21, Y+21	; 0x15
    212c:	c7 01       	movw	r24, r14
    212e:	b6 01       	movw	r22, r12
    2130:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    2134:	a3 01       	movw	r20, r6
    2136:	92 01       	movw	r18, r4
    2138:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    213c:	6e 87       	std	Y+14, r22	; 0x0e
    213e:	7f 87       	std	Y+15, r23	; 0x0f
    2140:	88 8b       	std	Y+16, r24	; 0x10
    2142:	99 8b       	std	Y+17, r25	; 0x11
					vFunc_Inf2pi(&thetaDiff);
    2144:	ce 01       	movw	r24, r28
    2146:	0e 96       	adiw	r24, 0x0e	; 14
    2148:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    214c:	4e 84       	ldd	r4, Y+14	; 0x0e
    214e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2150:	68 88       	ldd	r6, Y+16	; 0x10
    2152:	79 88       	ldd	r7, Y+17	; 0x11
    2154:	53 01       	movw	r10, r6
    2156:	42 01       	movw	r8, r4
    2158:	e8 94       	clt
    215a:	b7 f8       	bld	r11, 7
    215c:	29 e1       	ldi	r18, 0x19	; 25
    215e:	34 e0       	ldi	r19, 0x04	; 4
    2160:	46 e0       	ldi	r20, 0x06	; 6
    2162:	5f e3       	ldi	r21, 0x3F	; 63
    2164:	c5 01       	movw	r24, r10
    2166:	b4 01       	movw	r22, r8
    2168:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f4       	brge	.+2      	; 0x2172 <vMainPoseControllerTask+0x356>
    2170:	ac c0       	rjmp	.+344    	; 0x22ca <__stack+0xcb>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    2172:	22 e7       	ldi	r18, 0x72	; 114
    2174:	3a e8       	ldi	r19, 0x8A	; 138
    2176:	4e e8       	ldi	r20, 0x8E	; 142
    2178:	5c e3       	ldi	r21, 0x3C	; 60
    217a:	c5 01       	movw	r24, r10
    217c:	b4 01       	movw	r22, r8
    217e:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <__cmpsf2>
    2182:	88 23       	and	r24, r24
    2184:	24 f0       	brlt	.+8      	; 0x218e <vMainPoseControllerTask+0x372>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    2186:	8b a5       	ldd	r24, Y+43	; 0x2b
    2188:	81 11       	cpse	r24, r1
    218a:	03 c0       	rjmp	.+6      	; 0x2192 <vMainPoseControllerTask+0x376>
    218c:	9e c0       	rjmp	.+316    	; 0x22ca <__stack+0xcb>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    218e:	a1 e0       	ldi	r26, 0x01	; 1
    2190:	ab a7       	std	Y+43, r26	; 0x2b
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	a9 01       	movw	r20, r18
    2198:	c3 01       	movw	r24, r6
    219a:	b2 01       	movw	r22, r4
    219c:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
    21a0:	88 23       	and	r24, r24
    21a2:	bc f1       	brlt	.+110    	; 0x2212 <__stack+0x13>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    21a4:	10 e0       	ldi	r17, 0x00	; 0
    21a6:	b8 01       	movw	r22, r16
    21a8:	01 2e       	mov	r0, r17
    21aa:	00 0c       	add	r0, r0
    21ac:	88 0b       	sbc	r24, r24
    21ae:	99 0b       	sbc	r25, r25
    21b0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    21b4:	6b 01       	movw	r12, r22
    21b6:	7c 01       	movw	r14, r24
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	46 e1       	ldi	r20, 0x16	; 22
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	c5 01       	movw	r24, r10
    21c2:	b4 01       	movw	r22, r8
    21c4:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    21c8:	9b 01       	movw	r18, r22
    21ca:	ac 01       	movw	r20, r24
    21cc:	c7 01       	movw	r24, r14
    21ce:	b6 01       	movw	r22, r12
    21d0:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    21d4:	6b 01       	movw	r12, r22
    21d6:	7c 01       	movw	r14, r24
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	6b a1       	ldd	r22, Y+35	; 0x23
    21e2:	7c a1       	ldd	r23, Y+36	; 0x24
    21e4:	8d a1       	ldd	r24, Y+37	; 0x25
    21e6:	9e a1       	ldd	r25, Y+38	; 0x26
    21e8:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	c7 01       	movw	r24, r14
    21f2:	b6 01       	movw	r22, r12
    21f4:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    21f8:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    21fc:	06 17       	cp	r16, r22
    21fe:	17 07       	cpc	r17, r23
    2200:	0c f4       	brge	.+2      	; 0x2204 <__stack+0x5>
    2202:	41 c0       	rjmp	.+130    	; 0x2286 <__stack+0x87>
    2204:	7b 01       	movw	r14, r22
    2206:	77 23       	and	r23, r23
    2208:	0c f0       	brlt	.+2      	; 0x220c <__stack+0xd>
    220a:	40 c0       	rjmp	.+128    	; 0x228c <__stack+0x8d>
    220c:	e1 2c       	mov	r14, r1
    220e:	f1 2c       	mov	r15, r1
    2210:	3d c0       	rjmp	.+122    	; 0x228c <__stack+0x8d>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    2212:	e0 2e       	mov	r14, r16
    2214:	f1 2c       	mov	r15, r1
    2216:	b7 01       	movw	r22, r14
    2218:	0f 2c       	mov	r0, r15
    221a:	00 0c       	add	r0, r0
    221c:	88 0b       	sbc	r24, r24
    221e:	99 0b       	sbc	r25, r25
    2220:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    2224:	6a 8b       	std	Y+18, r22	; 0x12
    2226:	7b 8b       	std	Y+19, r23	; 0x13
    2228:	8c 8b       	std	Y+20, r24	; 0x14
    222a:	9d 8b       	std	Y+21, r25	; 0x15
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	46 e1       	ldi	r20, 0x16	; 22
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	c5 01       	movw	r24, r10
    2236:	b4 01       	movw	r22, r8
    2238:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	6a 89       	ldd	r22, Y+18	; 0x12
    2242:	7b 89       	ldd	r23, Y+19	; 0x13
    2244:	8c 89       	ldd	r24, Y+20	; 0x14
    2246:	9d 89       	ldd	r25, Y+21	; 0x15
    2248:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    224c:	4b 01       	movw	r8, r22
    224e:	5c 01       	movw	r10, r24
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	6f a1       	ldd	r22, Y+39	; 0x27
    225a:	78 a5       	ldd	r23, Y+40	; 0x28
    225c:	89 a5       	ldd	r24, Y+41	; 0x29
    225e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2260:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	c5 01       	movw	r24, r10
    226a:	b4 01       	movw	r22, r8
    226c:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    2270:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    2274:	e6 16       	cp	r14, r22
    2276:	f7 06       	cpc	r15, r23
    2278:	44 f0       	brlt	.+16     	; 0x228a <__stack+0x8b>
    227a:	8b 01       	movw	r16, r22
    227c:	77 23       	and	r23, r23
    227e:	34 f4       	brge	.+12     	; 0x228c <__stack+0x8d>
    2280:	00 e0       	ldi	r16, 0x00	; 0
    2282:	10 e0       	ldi	r17, 0x00	; 0
    2284:	03 c0       	rjmp	.+6      	; 0x228c <__stack+0x8d>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    2286:	78 01       	movw	r14, r16
    2288:	01 c0       	rjmp	.+2      	; 0x228c <__stack+0x8d>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    228a:	87 01       	movw	r16, r14
							
							
							
						}
						
						leftIntError += thetaDiff;
    228c:	a3 01       	movw	r20, r6
    228e:	92 01       	movw	r18, r4
    2290:	6b a1       	ldd	r22, Y+35	; 0x23
    2292:	7c a1       	ldd	r23, Y+36	; 0x24
    2294:	8d a1       	ldd	r24, Y+37	; 0x25
    2296:	9e a1       	ldd	r25, Y+38	; 0x26
    2298:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    229c:	6b a3       	std	Y+35, r22	; 0x23
    229e:	7c a3       	std	Y+36, r23	; 0x24
    22a0:	8d a3       	std	Y+37, r24	; 0x25
    22a2:	9e a3       	std	Y+38, r25	; 0x26
						rightIntError -= thetaDiff;
    22a4:	a3 01       	movw	r20, r6
    22a6:	92 01       	movw	r18, r4
    22a8:	6f a1       	ldd	r22, Y+39	; 0x27
    22aa:	78 a5       	ldd	r23, Y+40	; 0x28
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    22b4:	6f a3       	std	Y+39, r22	; 0x27
    22b6:	78 a7       	std	Y+40, r23	; 0x28
    22b8:	89 a7       	std	Y+41, r24	; 0x29
    22ba:	9a a7       	std	Y+42, r25	; 0x2a
						
						
						gRightWheelDirection = motorRightForward;
    22bc:	b6 e0       	ldi	r27, 0x06	; 6
    22be:	bd 87       	std	Y+13, r27	; 0x0d
						gLeftWheelDirection = motorLeftForward;
    22c0:	84 e0       	ldi	r24, 0x04	; 4
    22c2:	8c 87       	std	Y+12, r24	; 0x0c
						lastMovement = moveForward;
    22c4:	a1 e0       	ldi	r26, 0x01	; 1
    22c6:	af 83       	std	Y+7, r26	; 0x07
    22c8:	70 c0       	rjmp	.+224    	; 0x23aa <__stack+0x1ab>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	a9 01       	movw	r20, r18
    22d0:	c3 01       	movw	r24, r6
    22d2:	b2 01       	movw	r22, r4
    22d4:	0e 94 88 31 	call	0x6310	; 0x6310 <__gesf2>
    22d8:	88 23       	and	r24, r24
    22da:	a4 f1       	brlt	.+104    	; 0x2344 <__stack+0x145>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22dc:	2e ea       	ldi	r18, 0xAE	; 174
    22de:	37 e4       	ldi	r19, 0x47	; 71
    22e0:	41 e6       	ldi	r20, 0x61	; 97
    22e2:	5e e3       	ldi	r21, 0x3E	; 62
    22e4:	c5 01       	movw	r24, r10
    22e6:	b4 01       	movw	r22, r8
    22e8:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    22ec:	2a e9       	ldi	r18, 0x9A	; 154
    22ee:	39 e9       	ldi	r19, 0x99	; 153
    22f0:	49 e9       	ldi	r20, 0x99	; 153
    22f2:	5e e3       	ldi	r21, 0x3E	; 62
    22f4:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    22f8:	4b 01       	movw	r8, r22
    22fa:	5c 01       	movw	r10, r24
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	46 e9       	ldi	r20, 0x96	; 150
    2302:	52 ec       	ldi	r21, 0xC2	; 194
    2304:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2308:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    230c:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftBackward;
    230e:	b5 e0       	ldi	r27, 0x05	; 5
    2310:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	46 e9       	ldi	r20, 0x96	; 150
    2318:	52 e4       	ldi	r21, 0x42	; 66
    231a:	c5 01       	movw	r24, r10
    231c:	b4 01       	movw	r22, r8
    231e:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2322:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    2326:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightForward;
    2328:	86 e0       	ldi	r24, 0x06	; 6
    232a:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveCounterClockwise;
    232c:	a4 e0       	ldi	r26, 0x04	; 4
    232e:	af 83       	std	Y+7, r26	; 0x07
    2330:	1b a6       	std	Y+43, r1	; 0x2b
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2332:	1f a2       	std	Y+39, r1	; 0x27
    2334:	18 a6       	std	Y+40, r1	; 0x28
    2336:	19 a6       	std	Y+41, r1	; 0x29
    2338:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    233a:	1b a2       	std	Y+35, r1	; 0x23
    233c:	1c a2       	std	Y+36, r1	; 0x24
    233e:	1d a2       	std	Y+37, r1	; 0x25
    2340:	1e a2       	std	Y+38, r1	; 0x26
    2342:	33 c0       	rjmp	.+102    	; 0x23aa <__stack+0x1ab>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2344:	2e ea       	ldi	r18, 0xAE	; 174
    2346:	37 e4       	ldi	r19, 0x47	; 71
    2348:	41 e6       	ldi	r20, 0x61	; 97
    234a:	5e e3       	ldi	r21, 0x3E	; 62
    234c:	c5 01       	movw	r24, r10
    234e:	b4 01       	movw	r22, r8
    2350:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2354:	2a e9       	ldi	r18, 0x9A	; 154
    2356:	39 e9       	ldi	r19, 0x99	; 153
    2358:	49 e9       	ldi	r20, 0x99	; 153
    235a:	5e e3       	ldi	r21, 0x3E	; 62
    235c:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2360:	4b 01       	movw	r8, r22
    2362:	5c 01       	movw	r10, r24
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	46 e9       	ldi	r20, 0x96	; 150
    236a:	52 e4       	ldi	r21, 0x42	; 66
    236c:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2370:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    2374:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftForward;
    2376:	b4 e0       	ldi	r27, 0x04	; 4
    2378:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	46 e9       	ldi	r20, 0x96	; 150
    2380:	52 ec       	ldi	r21, 0xC2	; 194
    2382:	c5 01       	movw	r24, r10
    2384:	b4 01       	movw	r22, r8
    2386:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    238a:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    238e:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightBackward;
    2390:	85 e0       	ldi	r24, 0x05	; 5
    2392:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveClockwise;
    2394:	a3 e0       	ldi	r26, 0x03	; 3
    2396:	af 83       	std	Y+7, r26	; 0x07
    2398:	1b a6       	std	Y+43, r1	; 0x2b
						}
						
						leftIntError = 0;
						rightIntError = 0;
    239a:	1f a2       	std	Y+39, r1	; 0x27
    239c:	18 a6       	std	Y+40, r1	; 0x28
    239e:	19 a6       	std	Y+41, r1	; 0x29
    23a0:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    23a2:	1b a2       	std	Y+35, r1	; 0x23
    23a4:	1c a2       	std	Y+36, r1	; 0x24
    23a6:	1d a2       	std	Y+37, r1	; 0x25
    23a8:	1e a2       	std	Y+38, r1	; 0x26
					
					
					
					
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    23aa:	9e 01       	movw	r18, r28
    23ac:	23 5f       	subi	r18, 0xF3	; 243
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	ae 01       	movw	r20, r28
    23b2:	44 5f       	subi	r20, 0xF4	; 244
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	b8 01       	movw	r22, r16
    23b8:	c7 01       	movw	r24, r14
    23ba:	c2 d3       	rcall	.+1924   	; 0x2b40 <vMotorMovementSwitch>
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    23bc:	1a 8e       	std	Y+26, r1	; 0x1a
    23be:	0a c0       	rjmp	.+20     	; 0x23d4 <__stack+0x1d5>
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    23c0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    23c2:	b1 11       	cpse	r27, r1
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <__stack+0x1cf>
						send_idle();
    23c6:	0e 94 12 20 	call	0x4024	; 0x4024 <send_idle>
						idleSendt = TRUE;
					}
					
					
					vMotorBrakeLeft();
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	8a 8f       	std	Y+26, r24	; 0x1a
					vMotorBrakeRight();
    23ce:	a4 d3       	rcall	.+1864   	; 0x2b18 <vMotorBrakeLeft>
    23d0:	a8 d3       	rcall	.+1872   	; 0x2b22 <vMotorBrakeRight>
					lastMovement = moveStop;
    23d2:	1f 82       	std	Y+7, r1	; 0x07
				}
				
				
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	be 01       	movw	r22, r28
    23dc:	69 5f       	subi	r22, 0xF9	; 249
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	80 91 c7 19 	lds	r24, 0x19C7	; 0x8019c7 <scanStatusQ>
    23e4:	90 91 c8 19 	lds	r25, 0x19C8	; 0x8019c8 <scanStatusQ+0x1>
    23e8:	0e 94 37 1a 	call	0x346e	; 0x346e <xQueueGenericSend>
    23ec:	42 cd       	rjmp	.-1404   	; 0x1e72 <vMainPoseControllerTask+0x56>

000023ee <vMainPoseEstimatorTask>:
	  
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	a2 97       	sbiw	r28, 0x22	; 34
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    2402:	19 82       	std	Y+1, r1	; 0x01
    2404:	1a 82       	std	Y+2, r1	; 0x02
    2406:	1b 82       	std	Y+3, r1	; 0x03
    2408:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    240a:	0e 94 31 28 	call	0x5062	; 0x5062 <xTaskGetTickCount>
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    2412:	1e 8e       	std	Y+30, r1	; 0x1e
    2414:	1f 8e       	std	Y+31, r1	; 0x1f
    2416:	18 a2       	std	Y+32, r1	; 0x20
    2418:	19 a2       	std	Y+33, r1	; 0x21
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    241a:	1b 8a       	std	Y+19, r1	; 0x13
    241c:	1c 8a       	std	Y+20, r1	; 0x14
    241e:	1d 8a       	std	Y+21, r1	; 0x15
    2420:	1e 8a       	std	Y+22, r1	; 0x16
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    2422:	1f 86       	std	Y+15, r1	; 0x0f
    2424:	18 8a       	std	Y+16, r1	; 0x10
    2426:	19 8a       	std	Y+17, r1	; 0x11
    2428:	1a 8a       	std	Y+18, r1	; 0x12
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    242a:	1b 86       	std	Y+11, r1	; 0x0b
    242c:	1c 86       	std	Y+12, r1	; 0x0c
    242e:	1d 86       	std	Y+13, r1	; 0x0d
    2430:	1e 86       	std	Y+14, r1	; 0x0e
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    2432:	e1 2c       	mov	r14, r1
    2434:	f1 2c       	mov	r15, r1
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    2436:	81 2c       	mov	r8, r1
    2438:	91 2c       	mov	r9, r1
    243a:	41 2c       	mov	r4, r1
    243c:	31 2c       	mov	r3, r1
    243e:	21 2c       	mov	r2, r1
    2440:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    2442:	68 e2       	ldi	r22, 0x28	; 40
    2444:	70 e0       	ldi	r23, 0x00	; 0
    2446:	ce 01       	movw	r24, r28
    2448:	05 96       	adiw	r24, 0x05	; 5
    244a:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    244e:	80 91 c2 19 	lds	r24, 0x19C2	; 0x8019c2 <gHandshook>
    2452:	88 23       	and	r24, r24
    2454:	09 f4       	brne	.+2      	; 0x2458 <vMainPoseEstimatorTask+0x6a>
    2456:	7d c1       	rjmp	.+762    	; 0x2752 <vMainPoseEstimatorTask+0x364>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	4f e0       	ldi	r20, 0x0F	; 15
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	80 91 2f 1b 	lds	r24, 0x1B2F	; 0x801b2f <xTickMutex>
    2466:	90 91 30 1b 	lds	r25, 0x1B30	; 0x801b30 <xTickMutex+0x1>
    246a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    246e:	60 90 b5 19 	lds	r6, 0x19B5	; 0x8019b5 <gLeftWheelTicks>
    2472:	70 90 b6 19 	lds	r7, 0x19B6	; 0x8019b6 <gLeftWheelTicks+0x1>
                rightWheelTicks = gRightWheelTicks;
    2476:	00 91 b7 19 	lds	r16, 0x19B7	; 0x8019b7 <gRightWheelTicks>
    247a:	10 91 b8 19 	lds	r17, 0x19B8	; 0x8019b8 <gRightWheelTicks+0x1>
            xSemaphoreGive(xTickMutex);
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	70 e0       	ldi	r23, 0x00	; 0
    2482:	80 91 2f 1b 	lds	r24, 0x1B2F	; 0x801b2f <xTickMutex>
    2486:	90 91 30 1b 	lds	r25, 0x1B30	; 0x801b30 <xTickMutex+0x1>
    248a:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    248e:	b3 01       	movw	r22, r6
    2490:	68 19       	sub	r22, r8
    2492:	79 09       	sbc	r23, r9
    2494:	07 2e       	mov	r0, r23
    2496:	00 0c       	add	r0, r0
    2498:	88 0b       	sbc	r24, r24
    249a:	99 0b       	sbc	r25, r25
    249c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    24a0:	28 ef       	ldi	r18, 0xF8	; 248
    24a2:	33 e5       	ldi	r19, 0x53	; 83
    24a4:	43 e2       	ldi	r20, 0x23	; 35
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    24ac:	4b 01       	movw	r8, r22
    24ae:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    24b0:	b8 01       	movw	r22, r16
    24b2:	6e 19       	sub	r22, r14
    24b4:	7f 09       	sbc	r23, r15
    24b6:	07 2e       	mov	r0, r23
    24b8:	00 0c       	add	r0, r0
    24ba:	88 0b       	sbc	r24, r24
    24bc:	99 0b       	sbc	r25, r25
    24be:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__floatsisf>
    24c2:	28 ef       	ldi	r18, 0xF8	; 248
    24c4:	33 e5       	ldi	r19, 0x53	; 83
    24c6:	43 e2       	ldi	r20, 0x23	; 35
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
            				   
					   
            float dRobot = (dLeft + dRight) / 2;           
    24d2:	9b 01       	movw	r18, r22
    24d4:	ac 01       	movw	r20, r24
    24d6:	c5 01       	movw	r24, r10
    24d8:	b4 01       	movw	r22, r8
    24da:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    24ea:	6f 8b       	std	Y+23, r22	; 0x17
    24ec:	78 8f       	std	Y+24, r23	; 0x18
    24ee:	89 8f       	std	Y+25, r24	; 0x19
    24f0:	9a 8f       	std	Y+26, r25	; 0x1a
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    24f2:	a5 01       	movw	r20, r10
    24f4:	94 01       	movw	r18, r8
    24f6:	c7 01       	movw	r24, r14
    24f8:	b6 01       	movw	r22, r12
    24fa:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	43 e1       	ldi	r20, 0x13	; 19
    2504:	53 e4       	ldi	r21, 0x43	; 67
    2506:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__divsf3>
    250a:	4b 01       	movw	r8, r22
    250c:	5c 01       	movw	r10, r24
            
  
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    250e:	64 d9       	rcall	.-3384   	; 0x17d8 <fIMU_readFloatGyroZ>
    2510:	2b 89       	ldd	r18, Y+19	; 0x13
    2512:	3c 89       	ldd	r19, Y+20	; 0x14
    2514:	4d 89       	ldd	r20, Y+21	; 0x15
    2516:	5e 89       	ldd	r21, Y+22	; 0x16
    2518:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    251c:	6b 01       	movw	r12, r22
    251e:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    2520:	9f 77       	andi	r25, 0x7F	; 127
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <__cmpsf2>
    252e:	88 23       	and	r24, r24
    2530:	5c f0       	brlt	.+22     	; 0x2548 <vMainPoseEstimatorTask+0x15a>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	8a a3       	std	Y+34, r24	; 0x22
                gyroWeight = 0.85; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders
    2536:	8a e9       	ldi	r24, 0x9A	; 154
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	89 e9       	ldi	r24, 0x99	; 153
    253c:	8b 8f       	std	Y+27, r24	; 0x1b
    253e:	89 e5       	ldi	r24, 0x59	; 89
    2540:	8c 8f       	std	Y+28, r24	; 0x1c
    2542:	8f e3       	ldi	r24, 0x3F	; 63
    2544:	8d 8f       	std	Y+29, r24	; 0x1d
    2546:	05 c0       	rjmp	.+10     	; 0x2552 <vMainPoseEstimatorTask+0x164>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    2548:	1a a2       	std	Y+34, r1	; 0x22
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    254a:	4f 82       	std	Y+7, r4	; 0x07
    254c:	3b 8e       	std	Y+27, r3	; 0x1b
    254e:	2c 8e       	std	Y+28, r2	; 0x1c
    2550:	5d 8e       	std	Y+29, r5	; 0x1d
            
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
           		
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    2552:	2f 81       	ldd	r18, Y+7	; 0x07
    2554:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2556:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2558:	5d 8d       	ldd	r21, Y+29	; 0x1d
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	80 e8       	ldi	r24, 0x80	; 128
    2560:	9f e3       	ldi	r25, 0x3F	; 63
    2562:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    2566:	a5 01       	movw	r20, r10
    2568:	94 01       	movw	r18, r8
    256a:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    256e:	4b 01       	movw	r8, r22
    2570:	5c 01       	movw	r10, r24
    2572:	24 ed       	ldi	r18, 0xD4	; 212
    2574:	32 e0       	ldi	r19, 0x02	; 2
    2576:	47 e3       	ldi	r20, 0x37	; 55
    2578:	5a e3       	ldi	r21, 0x3A	; 58
    257a:	c7 01       	movw	r24, r14
    257c:	b6 01       	movw	r22, r12
    257e:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2582:	2f 81       	ldd	r18, Y+7	; 0x07
    2584:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2586:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2588:	5d 8d       	ldd	r21, Y+29	; 0x1d
    258a:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    258e:	a5 01       	movw	r20, r10
    2590:	94 01       	movw	r18, r8
    2592:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2596:	4b 01       	movw	r8, r22
    2598:	5c 01       	movw	r10, r24
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    259a:	c9 80       	ldd	r12, Y+1	; 0x01
    259c:	da 80       	ldd	r13, Y+2	; 0x02
    259e:	eb 80       	ldd	r14, Y+3	; 0x03
    25a0:	fc 80       	ldd	r15, Y+4	; 0x04
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    25ae:	a7 01       	movw	r20, r14
    25b0:	96 01       	movw	r18, r12
    25b2:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    25b6:	6f 83       	std	Y+7, r22	; 0x07
    25b8:	78 87       	std	Y+8, r23	; 0x08
    25ba:	89 87       	std	Y+9, r24	; 0x09
    25bc:	9a 87       	std	Y+10, r25	; 0x0a
    25be:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <cos>
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	6f 89       	ldd	r22, Y+23	; 0x17
    25c8:	78 8d       	ldd	r23, Y+24	; 0x18
    25ca:	89 8d       	ldd	r24, Y+25	; 0x19
    25cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ce:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    25d2:	9b 01       	movw	r18, r22
    25d4:	ac 01       	movw	r20, r24
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    25e2:	6b 87       	std	Y+11, r22	; 0x0b
    25e4:	7c 87       	std	Y+12, r23	; 0x0c
    25e6:	8d 87       	std	Y+13, r24	; 0x0d
    25e8:	9e 87       	std	Y+14, r25	; 0x0e
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	0e 94 f6 31 	call	0x63ec	; 0x63ec <sin>
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	6f 89       	ldd	r22, Y+23	; 0x17
    25fc:	78 8d       	ldd	r23, Y+24	; 0x18
    25fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2600:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2602:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    2606:	9b 01       	movw	r18, r22
    2608:	ac 01       	movw	r20, r24
    260a:	6f 85       	ldd	r22, Y+15	; 0x0f
    260c:	78 89       	ldd	r23, Y+16	; 0x10
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	9a 89       	ldd	r25, Y+18	; 0x12
    2612:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2616:	6f 87       	std	Y+15, r22	; 0x0f
    2618:	78 8b       	std	Y+16, r23	; 0x10
    261a:	89 8b       	std	Y+17, r24	; 0x11
    261c:	9a 8b       	std	Y+18, r25	; 0x12

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    261e:	a7 01       	movw	r20, r14
    2620:	96 01       	movw	r18, r12
    2622:	c5 01       	movw	r24, r10
    2624:	b4 01       	movw	r22, r8
    2626:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    262a:	69 83       	std	Y+1, r22	; 0x01
    262c:	7a 83       	std	Y+2, r23	; 0x02
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    2632:	2f ee       	ldi	r18, 0xEF	; 239
    2634:	3c ed       	ldi	r19, 0xDC	; 220
    2636:	4b e2       	ldi	r20, 0x2B	; 43
    2638:	5b e3       	ldi	r21, 0x3B	; 59
    263a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    263c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    263e:	88 a1       	ldd	r24, Y+32	; 0x20
    2640:	99 a1       	ldd	r25, Y+33	; 0x21
    2642:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2646:	f6 2e       	mov	r15, r22
    2648:	e7 2e       	mov	r14, r23
    264a:	d8 2e       	mov	r13, r24
    264c:	c9 2e       	mov	r12, r25
            
            
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if ((robot_is_turning == FALSE) && (dRobot == 0)){
    264e:	8a a1       	ldd	r24, Y+34	; 0x22
    2650:	81 11       	cpse	r24, r1
    2652:	14 c0       	rjmp	.+40     	; 0x267c <vMainPoseEstimatorTask+0x28e>
    2654:	24 2d       	mov	r18, r4
    2656:	33 2d       	mov	r19, r3
    2658:	42 2d       	mov	r20, r2
    265a:	55 2d       	mov	r21, r5
    265c:	6f 89       	ldd	r22, Y+23	; 0x17
    265e:	78 8d       	ldd	r23, Y+24	; 0x18
    2660:	89 8d       	ldd	r24, Y+25	; 0x19
    2662:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2664:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <__cmpsf2>
    2668:	81 11       	cpse	r24, r1
    266a:	08 c0       	rjmp	.+16     	; 0x267c <vMainPoseEstimatorTask+0x28e>
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted;
                vLED_singleHigh(ledYELLOW);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	bc d8       	rcall	.-3720   	; 0x17ea <vLED_singleHigh>
            
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if ((robot_is_turning == FALSE) && (dRobot == 0)){
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted;
    2672:	bf 2c       	mov	r11, r15
    2674:	ae 2c       	mov	r10, r14
    2676:	9d 2c       	mov	r9, r13
    2678:	8c 2c       	mov	r8, r12
                vLED_singleHigh(ledYELLOW);
    267a:	07 c0       	rjmp	.+14     	; 0x268a <vMainPoseEstimatorTask+0x29c>
            }
            else{
                kalmanGain = 0;
                vLED_singleLow(ledYELLOW);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	ce d8       	rcall	.-3684   	; 0x181e <vLED_singleLow>
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted;
                vLED_singleHigh(ledYELLOW);
            }
            else{
                kalmanGain = 0;
    2682:	b4 2c       	mov	r11, r4
    2684:	a3 2c       	mov	r10, r3
    2686:	92 2c       	mov	r9, r2
    2688:	85 2c       	mov	r8, r5
                vLED_singleLow(ledYELLOW);
            }            
            //*/
           
            predictedTheta  += kalmanGain;
    268a:	2b 2d       	mov	r18, r11
    268c:	3a 2d       	mov	r19, r10
    268e:	49 2d       	mov	r20, r9
    2690:	58 2d       	mov	r21, r8
    2692:	69 81       	ldd	r22, Y+1	; 0x01
    2694:	7a 81       	ldd	r23, Y+2	; 0x02
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    269e:	69 83       	std	Y+1, r22	; 0x01
    26a0:	7a 83       	std	Y+2, r23	; 0x02
    26a2:	8b 83       	std	Y+3, r24	; 0x03
    26a4:	9c 83       	std	Y+4, r25	; 0x04
			vFunc_Inf2pi(&predictedTheta);            
    26a6:	ce 01       	movw	r24, r28
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    26ae:	2b 2d       	mov	r18, r11
    26b0:	3a 2d       	mov	r19, r10
    26b2:	49 2d       	mov	r20, r9
    26b4:	58 2d       	mov	r21, r8
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	80 e8       	ldi	r24, 0x80	; 128
    26bc:	9f e3       	ldi	r25, 0x3F	; 63
    26be:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__subsf3>
    26c2:	2f 2d       	mov	r18, r15
    26c4:	3e 2d       	mov	r19, r14
    26c6:	4d 2d       	mov	r20, r13
    26c8:	5c 2d       	mov	r21, r12
    26ca:	0e 94 93 31 	call	0x6326	; 0x6326 <__mulsf3>
    26ce:	6e 8f       	std	Y+30, r22	; 0x1e
    26d0:	7f 8f       	std	Y+31, r23	; 0x1f
    26d2:	88 a3       	std	Y+32, r24	; 0x20
    26d4:	99 a3       	std	Y+33, r25	; 0x21

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	4f e0       	ldi	r20, 0x0F	; 15
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    26e4:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    26e8:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
                gTheta_hat = predictedTheta;
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	ab 81       	ldd	r26, Y+3	; 0x03
    26f2:	bc 81       	ldd	r27, Y+4	; 0x04
    26f4:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <gTheta_hat>
    26f8:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <gTheta_hat+0x1>
    26fc:	a0 93 bf 19 	sts	0x19BF, r26	; 0x8019bf <gTheta_hat+0x2>
    2700:	b0 93 c0 19 	sts	0x19C0, r27	; 0x8019c0 <gTheta_hat+0x3>
                gX_hat = predictedX;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    2710:	70 93 bc 19 	sts	0x19BC, r23	; 0x8019bc <gX_hat+0x1>
    2714:	60 93 bb 19 	sts	0x19BB, r22	; 0x8019bb <gX_hat>
                gY_hat = predictedY;
    2718:	6f 85       	ldd	r22, Y+15	; 0x0f
    271a:	78 89       	ldd	r23, Y+16	; 0x10
    271c:	89 89       	ldd	r24, Y+17	; 0x11
    271e:	9a 89       	ldd	r25, Y+18	; 0x12
    2720:	0e 94 47 30 	call	0x608e	; 0x608e <__fixsfsi>
    2724:	70 93 ba 19 	sts	0x19BA, r23	; 0x8019ba <gY_hat+0x1>
    2728:	60 93 b9 19 	sts	0x19B9, r22	; 0x8019b9 <gY_hat>
            xSemaphoreGive(xPoseMutex);
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	80 91 35 1b 	lds	r24, 0x1B35	; 0x801b35 <xPoseMutex>
    2734:	90 91 36 1b 	lds	r25, 0x1B36	; 0x801b36 <xPoseMutex+0x1>
    2738:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	80 91 2d 1b 	lds	r24, 0x1B2D	; 0x801b2d <xControllerBSem>
    2744:	90 91 2e 1b 	lds	r25, 0x1B2E	; 0x801b2e <xControllerBSem+0x1>
    2748:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    274c:	78 01       	movw	r14, r16
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    274e:	43 01       	movw	r8, r6
    2750:	78 ce       	rjmp	.-784    	; 0x2442 <vMainPoseEstimatorTask+0x54>
    2752:	05 e6       	ldi	r16, 0x65	; 101
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	a4 2c       	mov	r10, r4
    2758:	b3 2c       	mov	r11, r3
    275a:	c2 2c       	mov	r12, r2
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    275c:	d5 2c       	mov	r13, r5
    275e:	3c d8       	rcall	.-3976   	; 0x17d8 <fIMU_readFloatGyroZ>
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	6a 2d       	mov	r22, r10
    2766:	7b 2d       	mov	r23, r11
    2768:	8c 2d       	mov	r24, r12
    276a:	9d 2d       	mov	r25, r13
    276c:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__addsf3>
    2770:	a6 2e       	mov	r10, r22
    2772:	b7 2e       	mov	r11, r23
    2774:	c8 2e       	mov	r12, r24
    2776:	d9 2e       	mov	r13, r25
    2778:	01 50       	subi	r16, 0x01	; 1
    277a:	11 09       	sbc	r17, r1
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    277c:	81 f7       	brne	.-32     	; 0x275e <vMainPoseEstimatorTask+0x370>
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    277e:	84 2d       	mov	r24, r4
    2780:	93 2d       	mov	r25, r3
    2782:	a2 2d       	mov	r26, r2
    2784:	b5 2d       	mov	r27, r5
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	ab 83       	std	Y+3, r26	; 0x03
    278c:	bc 83       	std	Y+4, r27	; 0x04
            gyroOffset = gyro / (float)i;               
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a ec       	ldi	r20, 0xCA	; 202
    2794:	52 e4       	ldi	r21, 0x42	; 66
    2796:	6a 2d       	mov	r22, r10
    2798:	7b 2d       	mov	r23, r11
    279a:	8c 2d       	mov	r24, r12
    279c:	9d 2d       	mov	r25, r13
    279e:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__divsf3>
    27a2:	6b 8b       	std	Y+19, r22	; 0x13
    27a4:	7c 8b       	std	Y+20, r23	; 0x14
    27a6:	8d 8b       	std	Y+21, r24	; 0x15
    27a8:	9e 8b       	std	Y+22, r25	; 0x16
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    27aa:	4f 86       	std	Y+15, r4	; 0x0f
    27ac:	38 8a       	std	Y+16, r3	; 0x10
    27ae:	29 8a       	std	Y+17, r2	; 0x11
    27b0:	5a 8a       	std	Y+18, r5	; 0x12
                gyro+= fIMU_readFloatGyroZ();
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    27b2:	4b 86       	std	Y+11, r4	; 0x0b
    27b4:	3c 86       	std	Y+12, r3	; 0x0c
    27b6:	2d 86       	std	Y+13, r2	; 0x0d
    27b8:	5e 86       	std	Y+14, r5	; 0x0e
    27ba:	43 ce       	rjmp	.-890    	; 0x2442 <vMainPoseEstimatorTask+0x54>

000027bc <vApplicationStackOverflowHook>:
}
#endif
*/
/*  In case of stack overflow, disable all interrupts and handle it  */
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName){
    cli();
    27bc:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	47 d8       	rcall	.-3954   	; 0x1852 <vLED_toggle>
    27c4:	fc cf       	rjmp	.-8      	; 0x27be <vApplicationStackOverflowHook+0x2>

000027c6 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    27c6:	0b d8       	rcall	.-4074   	; 0x17de <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e d8       	rcall	.-4068   	; 0x17ea <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    27ce:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <vUSART_init>
    network_init();
    27d2:	62 d2       	rcall	.+1220   	; 0x2c98 <network_init>
    arq_init();
    27d4:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    27d8:	83 e4       	ldi	r24, 0x43	; 67
    27da:	9f e1       	ldi	r25, 0x1F	; 31
    27dc:	0e 94 2f 21 	call	0x425e	; 0x425e <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 a7 20 	call	0x414e	; 0x414e <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    27e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <vDistSens_init>
    /* Initialize motor controller */
    vMotor_init();
    27ea:	13 d1       	rcall	.+550    	; 0x2a12 <vMotor_init>
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
	vLED_singleHigh(ledGREEN);
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    sIMU_begin(); 
    27f4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sIMU_begin>
   vLED_singleLow(ledGREEN);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	10 d8       	rcall	.-4064   	; 0x181e <vLED_singleLow>
    /* Initialize compass */
    /* Connected with I2C, if the chip has no power, MCU will lock. */
    #ifdef DEBUG
            debug("Compass init..\n");
    #endif
    vLED_singleHigh(ledYELLOW);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
   // vCOM_init();
    vLED_singleLow(ledYELLOW);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	09 d8       	rcall	.-4078   	; 0x181e <vLED_singleLow>
	// TESTING

	
	
	
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	59 d4       	rcall	.+2226   	; 0x30c6 <xQueueGenericCreate>
    2814:	90 93 cc 19 	sts	0x19CC, r25	; 0x8019cc <movementQ+0x1>
    2818:	80 93 cb 19 	sts	0x19CB, r24	; 0x8019cb <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPolar)); // For setpoints to controller
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	66 e0       	ldi	r22, 0x06	; 6
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	51 d4       	rcall	.+2210   	; 0x30c6 <xQueueGenericCreate>
    2824:	90 93 ca 19 	sts	0x19CA, r25	; 0x8019ca <poseControllerQ+0x1>
    2828:	80 93 c9 19 	sts	0x19C9, r24	; 0x8019c9 <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	49 d4       	rcall	.+2194   	; 0x30c6 <xQueueGenericCreate>
    2834:	90 93 c8 19 	sts	0x19C8, r25	; 0x8019c8 <scanStatusQ+0x1>
    2838:	80 93 c7 19 	sts	0x19C7, r24	; 0x8019c7 <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	41 d4       	rcall	.+2178   	; 0x30c6 <xQueueGenericCreate>
    2844:	90 93 c6 19 	sts	0x19C6, r25	; 0x8019c6 <actuationQ+0x1>
    2848:	80 93 c5 19 	sts	0x19C5, r24	; 0x8019c5 <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	8d d4       	rcall	.+2330   	; 0x316a <xQueueCreateMutex>
    2850:	90 93 36 1b 	sts	0x1B36, r25	; 0x801b36 <xPoseMutex+0x1>
    2854:	80 93 35 1b 	sts	0x1B35, r24	; 0x801b35 <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	87 d4       	rcall	.+2318   	; 0x316a <xQueueCreateMutex>
    285c:	90 93 32 1b 	sts	0x1B32, r25	; 0x801b32 <xUartMutex+0x1>
    2860:	80 93 31 1b 	sts	0x1B31, r24	; 0x801b31 <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	81 d4       	rcall	.+2306   	; 0x316a <xQueueCreateMutex>
    2868:	90 93 30 1b 	sts	0x1B30, r25	; 0x801b30 <xTickMutex+0x1>
    286c:	80 93 2f 1b 	sts	0x1B2F, r24	; 0x801b2f <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    2870:	43 e0       	ldi	r20, 0x03	; 3
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	27 d4       	rcall	.+2126   	; 0x30c6 <xQueueGenericCreate>
    2878:	90 93 2e 1b 	sts	0x1B2E, r25	; 0x801b2e <xControllerBSem+0x1>
    287c:	80 93 2d 1b 	sts	0x1B2D, r24	; 0x801b2d <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    2880:	43 e0       	ldi	r20, 0x03	; 3
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	1f d4       	rcall	.+2110   	; 0x30c6 <xQueueGenericCreate>
    2888:	90 93 34 1b 	sts	0x1B34, r25	; 0x801b34 <xCommandReadyBSem+0x1>
    288c:	80 93 33 1b 	sts	0x1B33, r24	; 0x801b33 <xCommandReadyBSem>
    2890:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    2892:	b1 2c       	mov	r11, r1
    2894:	c1 2c       	mov	r12, r1
    2896:	d1 2c       	mov	r13, r1
    2898:	e1 2c       	mov	r14, r1
    289a:	f1 2c       	mov	r15, r1
    289c:	04 e0       	ldi	r16, 0x04	; 4
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4c e2       	ldi	r20, 0x2C	; 44
    28a4:	51 e0       	ldi	r21, 0x01	; 1
    28a6:	6f e0       	ldi	r22, 0x0F	; 15
    28a8:	76 e0       	ldi	r23, 0x06	; 6
    28aa:	8f ea       	ldi	r24, 0xAF	; 175
    28ac:	9d e0       	ldi	r25, 0x0D	; 13
    28ae:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    28b2:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4c e2       	ldi	r20, 0x2C	; 44
    28ba:	51 e0       	ldi	r21, 0x01	; 1
    28bc:	68 e1       	ldi	r22, 0x18	; 24
    28be:	76 e0       	ldi	r23, 0x06	; 6
    28c0:	80 ed       	ldi	r24, 0xD0	; 208
    28c2:	9c e0       	ldi	r25, 0x0C	; 12
    28c4:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    28c8:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4c e2       	ldi	r20, 0x2C	; 44
    28d0:	51 e0       	ldi	r21, 0x01	; 1
    28d2:	6d e1       	ldi	r22, 0x1D	; 29
    28d4:	76 e0       	ldi	r23, 0x06	; 6
    28d6:	8e e0       	ldi	r24, 0x0E	; 14
    28d8:	9f e0       	ldi	r25, 0x0F	; 15
    28da:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    28de:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4c e2       	ldi	r20, 0x2C	; 44
    28e6:	51 e0       	ldi	r21, 0x01	; 1
    28e8:	65 e2       	ldi	r22, 0x25	; 37
    28ea:	76 e0       	ldi	r23, 0x06	; 6
    28ec:	87 ef       	ldi	r24, 0xF7	; 247
    28ee:	91 e1       	ldi	r25, 0x11	; 17
    28f0:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    28f4:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4c e2       	ldi	r20, 0x2C	; 44
    28fc:	51 e0       	ldi	r21, 0x01	; 1
    28fe:	6d e2       	ldi	r22, 0x2D	; 45
    2900:	76 e0       	ldi	r23, 0x06	; 6
    2902:	80 ec       	ldi	r24, 0xC0	; 192
    2904:	9d e0       	ldi	r25, 0x0D	; 13
    2906:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
    290a:	78 94       	sei
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif
    
    

    sei();
    290c:	80 e0       	ldi	r24, 0x00	; 0
    vLED_singleLow(ledRED);
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
    2914:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <vTaskStartScheduler>
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    //  Start scheduler 
    vTaskStartScheduler();
    2918:	c3 e3       	ldi	r28, 0x33	; 51

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
        debug("RAM fail\n");
    291a:	d6 e0       	ldi	r29, 0x06	; 6
    291c:	f8 94       	cli
    //  Start scheduler 
    vTaskStartScheduler();

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
    291e:	df 93       	push	r29
        debug("RAM fail\n");
    2920:	cf 93       	push	r28
    2922:	0e 94 36 20 	call	0x406c	; 0x406c <debug>
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	f8 cf       	rjmp	.-16     	; 0x291c <main+0x156>

0000292c <__vector_4>:
    292c:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    292e:	0f 92       	push	r0
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	0f 92       	push	r0
    2934:	11 24       	eor	r1, r1
    2936:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    2938:	80 91 c3 19 	lds	r24, 0x19C3	; 0x8019c3 <gISR_leftWheelTicks>
    293c:	8f 5f       	subi	r24, 0xFF	; 255
    293e:	80 93 c3 19 	sts	0x19C3, r24	; 0x8019c3 <gISR_leftWheelTicks>
}
    2942:	8f 91       	pop	r24
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    295a:	80 91 c4 19 	lds	r24, 0x19C4	; 0x8019c4 <gISR_rightWheelTicks>
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	80 93 c4 19 	sts	0x19C4, r24	; 0x8019c4 <gISR_rightWheelTicks>
}
    2964:	8f 91       	pop	r24
    2966:	0f 90       	pop	r0
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	0f 90       	pop	r0
    296c:	1f 90       	pop	r1
    296e:	18 95       	reti

00002970 <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    2970:	1f 92       	push	r1
    2972:	0f 92       	push	r0
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	0f 92       	push	r0
    2978:	11 24       	eor	r1, r1
    297a:	0b b6       	in	r0, 0x3b	; 59
    297c:	0f 92       	push	r0
    297e:	2f 93       	push	r18
    2980:	3f 93       	push	r19
    2982:	4f 93       	push	r20
    2984:	5f 93       	push	r21
    2986:	6f 93       	push	r22
    2988:	7f 93       	push	r23
    298a:	8f 93       	push	r24
    298c:	9f 93       	push	r25
    298e:	af 93       	push	r26
    2990:	bf 93       	push	r27
    2992:	ef 93       	push	r30
    2994:	ff 93       	push	r31
    if (nRFconnected){
    2996:	64 99       	sbic	0x0c, 4	; 12
    2998:	09 c0       	rjmp	.+18     	; 0x29ac <__vector_5+0x3c>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
        vLED_singleHigh(ledYELLOW);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    29aa:	18 c0       	rjmp	.+48     	; 0x29dc <__vector_5+0x6c>
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    29ac:	10 92 c2 19 	sts	0x19C2, r1	; 0x8019c2 <gHandshook>
        gPaused = FALSE;
    29b0:	10 92 c1 19 	sts	0x19C1, r1	; 0x8019c1 <gPaused>
        vLED_singleLow(ledGREEN);
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledYELLOW);
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledRED);
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    29cc:	60 e0       	ldi	r22, 0x00	; 0
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	80 91 33 1b 	lds	r24, 0x1B33	; 0x801b33 <xCommandReadyBSem>
    29d4:	90 91 34 1b 	lds	r25, 0x1B34	; 0x801b34 <xCommandReadyBSem+0x1>
    29d8:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	80 91 2d 1b 	lds	r24, 0x1B2D	; 0x801b2d <xControllerBSem>
    29e4:	90 91 2e 1b 	lds	r25, 0x1B2E	; 0x801b2e <xControllerBSem+0x1>
    29e8:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <xQueueGiveFromISR>
}
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	bf 91       	pop	r27
    29f2:	af 91       	pop	r26
    29f4:	9f 91       	pop	r25
    29f6:	8f 91       	pop	r24
    29f8:	7f 91       	pop	r23
    29fa:	6f 91       	pop	r22
    29fc:	5f 91       	pop	r21
    29fe:	4f 91       	pop	r20
    2a00:	3f 91       	pop	r19
    2a02:	2f 91       	pop	r18
    2a04:	0f 90       	pop	r0
    2a06:	0b be       	out	0x3b, r0	; 59
    2a08:	0f 90       	pop	r0
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	0f 90       	pop	r0
    2a0e:	1f 90       	pop	r1
    2a10:	18 95       	reti

00002a12 <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    2a12:	27 9a       	sbi	0x04, 7	; 4
    2a14:	84 b1       	in	r24, 0x04	; 4
    2a16:	80 63       	ori	r24, 0x30	; 48
    2a18:	84 b9       	out	0x04, r24	; 4
    2a1a:	26 9a       	sbi	0x04, 6	; 4
    2a1c:	e1 e0       	ldi	r30, 0x01	; 1
    2a1e:	f1 e0       	ldi	r31, 0x01	; 1
    2a20:	80 81       	ld	r24, Z
    2a22:	80 66       	ori	r24, 0x60	; 96
    2a24:	80 83       	st	Z, r24
    2a26:	2f 98       	cbi	0x05, 7	; 5
    2a28:	2e 98       	cbi	0x05, 6	; 5
    2a2a:	e2 e0       	ldi	r30, 0x02	; 2
    2a2c:	f1 e0       	ldi	r31, 0x01	; 1
    2a2e:	80 81       	ld	r24, Z
    2a30:	8f 79       	andi	r24, 0x9F	; 159
    2a32:	80 83       	st	Z, r24
    2a34:	85 b1       	in	r24, 0x05	; 5
    2a36:	8f 7c       	andi	r24, 0xCF	; 207
    2a38:	85 b9       	out	0x05, r24	; 5
    2a3a:	8a b1       	in	r24, 0x0a	; 10
    2a3c:	8a b9       	out	0x0a, r24	; 10
    2a3e:	8b b1       	in	r24, 0x0b	; 11
    2a40:	8c 60       	ori	r24, 0x0C	; 12
    2a42:	8b b9       	out	0x0b, r24	; 11
    2a44:	6c 98       	cbi	0x0d, 4	; 13
    2a46:	8d b3       	in	r24, 0x1d	; 29
    2a48:	8d bb       	out	0x1d, r24	; 29
    2a4a:	e9 e6       	ldi	r30, 0x69	; 105
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	80 6f       	ori	r24, 0xF0	; 240
    2a52:	80 83       	st	Z, r24
    2a54:	ea e6       	ldi	r30, 0x6A	; 106
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	81 60       	ori	r24, 0x01	; 1
    2a5c:	80 83       	st	Z, r24
    2a5e:	8c e1       	ldi	r24, 0x1C	; 28
    2a60:	8c bb       	out	0x1c, r24	; 28
    2a62:	8d b3       	in	r24, 0x1d	; 29
    2a64:	8c 61       	ori	r24, 0x1C	; 28
    2a66:	8d bb       	out	0x1d, r24	; 29
    2a68:	84 b5       	in	r24, 0x24	; 36
    2a6a:	80 68       	ori	r24, 0x80	; 128
    2a6c:	84 bd       	out	0x24, r24	; 36
    2a6e:	e0 e8       	ldi	r30, 0x80	; 128
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	80 62       	ori	r24, 0x20	; 32
    2a76:	80 83       	st	Z, r24
    2a78:	85 b5       	in	r24, 0x25	; 37
    2a7a:	85 bd       	out	0x25, r24	; 37
    2a7c:	84 b5       	in	r24, 0x24	; 36
    2a7e:	83 60       	ori	r24, 0x03	; 3
    2a80:	84 bd       	out	0x24, r24	; 36
    2a82:	a1 e8       	ldi	r26, 0x81	; 129
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	8c 91       	ld	r24, X
    2a88:	88 60       	ori	r24, 0x08	; 8
    2a8a:	8c 93       	st	X, r24
    2a8c:	80 81       	ld	r24, Z
    2a8e:	81 60       	ori	r24, 0x01	; 1
    2a90:	80 83       	st	Z, r24
    2a92:	85 b5       	in	r24, 0x25	; 37
    2a94:	82 60       	ori	r24, 0x02	; 2
    2a96:	85 bd       	out	0x25, r24	; 37
    2a98:	8c 91       	ld	r24, X
    2a9a:	82 60       	ori	r24, 0x02	; 2
    2a9c:	8c 93       	st	X, r24
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 83       	st	Z, r24
    2aa2:	e0 eb       	ldi	r30, 0xB0	; 176
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 83       	st	Z, r24
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 83       	st	Z, r24
    2aae:	e0 ea       	ldi	r30, 0xA0	; 160
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 83       	st	Z, r24
    2ab6:	08 95       	ret

00002ab8 <vMotorMoveLeftForward>:
    2ab8:	87 bd       	out	0x27, r24	; 39
    2aba:	2c 9a       	sbi	0x05, 4	; 5
    2abc:	2d 98       	cbi	0x05, 5	; 5
    2abe:	84 e0       	ldi	r24, 0x04	; 4
    2ac0:	fb 01       	movw	r30, r22
    2ac2:	80 83       	st	Z, r24
    2ac4:	08 95       	ret

00002ac6 <vMotorMoveRightForward>:
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2acc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2ad0:	e2 e0       	ldi	r30, 0x02	; 2
    2ad2:	f1 e0       	ldi	r31, 0x01	; 1
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 64       	ori	r24, 0x40	; 64
    2ad8:	80 83       	st	Z, r24
    2ada:	80 81       	ld	r24, Z
    2adc:	8f 7d       	andi	r24, 0xDF	; 223
    2ade:	80 83       	st	Z, r24
    2ae0:	86 e0       	ldi	r24, 0x06	; 6
    2ae2:	fb 01       	movw	r30, r22
    2ae4:	80 83       	st	Z, r24
    2ae6:	08 95       	ret

00002ae8 <vMotorMoveLeftBackward>:
    2ae8:	87 bd       	out	0x27, r24	; 39
    2aea:	2c 98       	cbi	0x05, 4	; 5
    2aec:	2d 9a       	sbi	0x05, 5	; 5
    2aee:	85 e0       	ldi	r24, 0x05	; 5
    2af0:	fb 01       	movw	r30, r22
    2af2:	80 83       	st	Z, r24
    2af4:	08 95       	ret

00002af6 <vMotorMoveRightBackward>:
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2afc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2b00:	e2 e0       	ldi	r30, 0x02	; 2
    2b02:	f1 e0       	ldi	r31, 0x01	; 1
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7b       	andi	r24, 0xBF	; 191
    2b08:	80 83       	st	Z, r24
    2b0a:	80 81       	ld	r24, Z
    2b0c:	80 62       	ori	r24, 0x20	; 32
    2b0e:	80 83       	st	Z, r24
    2b10:	85 e0       	ldi	r24, 0x05	; 5
    2b12:	fb 01       	movw	r30, r22
    2b14:	80 83       	st	Z, r24
    2b16:	08 95       	ret

00002b18 <vMotorBrakeLeft>:
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	87 bd       	out	0x27, r24	; 39
    2b1c:	2c 98       	cbi	0x05, 4	; 5
    2b1e:	2d 98       	cbi	0x05, 5	; 5
    2b20:	08 95       	ret

00002b22 <vMotorBrakeRight>:
    2b22:	8f ef       	ldi	r24, 0xFF	; 255
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2b2a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2b2e:	e2 e0       	ldi	r30, 0x02	; 2
    2b30:	f1 e0       	ldi	r31, 0x01	; 1
    2b32:	80 81       	ld	r24, Z
    2b34:	8f 7b       	andi	r24, 0xBF	; 191
    2b36:	80 83       	st	Z, r24
    2b38:	80 81       	ld	r24, Z
    2b3a:	8f 7d       	andi	r24, 0xDF	; 223
    2b3c:	80 83       	st	Z, r24
    2b3e:	08 95       	ret

00002b40 <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	eb 01       	movw	r28, r22
    2b4a:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2b4c:	18 16       	cp	r1, r24
    2b4e:	19 06       	cpc	r1, r25
    2b50:	1c f4       	brge	.+6      	; 0x2b58 <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2b52:	ba 01       	movw	r22, r20
    2b54:	b1 df       	rcall	.-158    	; 0x2ab8 <vMotorMoveLeftForward>
    2b56:	07 c0       	rjmp	.+14     	; 0x2b66 <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2b58:	99 23       	and	r25, r25
    2b5a:	24 f4       	brge	.+8      	; 0x2b64 <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2b5c:	ba 01       	movw	r22, r20
    2b5e:	81 95       	neg	r24
    2b60:	c3 df       	rcall	.-122    	; 0x2ae8 <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2b62:	01 c0       	rjmp	.+2      	; 0x2b66 <vMotorMovementSwitch+0x26>
    2b64:	d9 df       	rcall	.-78     	; 0x2b18 <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2b66:	1c 16       	cp	r1, r28
    2b68:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2b6a:	24 f4       	brge	.+8      	; 0x2b74 <vMotorMovementSwitch+0x34>
    2b6c:	b8 01       	movw	r22, r16
    2b6e:	8c 2f       	mov	r24, r28
    2b70:	aa df       	rcall	.-172    	; 0x2ac6 <vMotorMoveRightForward>
    2b72:	08 c0       	rjmp	.+16     	; 0x2b84 <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2b74:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2b76:	2c f4       	brge	.+10     	; 0x2b82 <vMotorMovementSwitch+0x42>
    2b78:	b8 01       	movw	r22, r16
    2b7a:	8c 2f       	mov	r24, r28
    2b7c:	81 95       	neg	r24
    2b7e:	bb df       	rcall	.-138    	; 0x2af6 <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2b80:	01 c0       	rjmp	.+2      	; 0x2b84 <vMotorMovementSwitch+0x44>
    2b82:	cf df       	rcall	.-98     	; 0x2b22 <vMotorBrakeRight>
	
	
	
	

}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	08 95       	ret

00002b8e <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2b8e:	84 30       	cpi	r24, 0x04	; 4
    2b90:	19 f0       	breq	.+6      	; 0x2b98 <vMotorEncoderLeftTickFromISR+0xa>
    2b92:	85 30       	cpi	r24, 0x05	; 5
    2b94:	51 f0       	breq	.+20     	; 0x2baa <vMotorEncoderLeftTickFromISR+0x1c>
    2b96:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2b98:	46 95       	lsr	r20
    2b9a:	fb 01       	movw	r30, r22
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	84 0f       	add	r24, r20
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
            break;
    2ba8:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2baa:	46 95       	lsr	r20
    2bac:	fb 01       	movw	r30, r22
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	84 1b       	sub	r24, r20
    2bb4:	91 09       	sbc	r25, r1
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	08 95       	ret

00002bbc <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2bbc:	85 30       	cpi	r24, 0x05	; 5
    2bbe:	59 f0       	breq	.+22     	; 0x2bd6 <vMotorEncoderRightTickFromISR+0x1a>
    2bc0:	86 30       	cpi	r24, 0x06	; 6
    2bc2:	89 f4       	brne	.+34     	; 0x2be6 <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2bc4:	46 95       	lsr	r20
    2bc6:	fb 01       	movw	r30, r22
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	84 0f       	add	r24, r20
    2bce:	91 1d       	adc	r25, r1
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	80 83       	st	Z, r24
            break;
    2bd4:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2bd6:	46 95       	lsr	r20
    2bd8:	fb 01       	movw	r30, r22
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	84 1b       	sub	r24, r20
    2be0:	91 09       	sbc	r25, r1
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	08 95       	ret

00002be8 <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2be8:	ef 92       	push	r14
    2bea:	ff 92       	push	r15
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	7c 01       	movw	r14, r24
    2bf6:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2bfe:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2c00:	98 01       	movw	r18, r16
    2c02:	21 50       	subi	r18, 0x01	; 1
    2c04:	31 09       	sbc	r19, r1
    2c06:	a7 01       	movw	r20, r14
    2c08:	b8 01       	movw	r22, r16
    2c0a:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2c0e:	88 23       	and	r24, r24
    2c10:	49 f0       	breq	.+18     	; 0x2c24 <network_receive+0x3c>
	   ++cobs;
    2c12:	80 91 ce 19 	lds	r24, 0x19CE	; 0x8019ce <cobs.2024>
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	80 93 ce 19 	sts	0x19CE, r24	; 0x8019ce <cobs.2024>
	   vPortFree(decoded_data);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c22:	33 c0       	rjmp	.+102    	; 0x2c8a <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2c24:	86 2f       	mov	r24, r22
    2c26:	97 2f       	mov	r25, r23
    2c28:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	e8 0f       	add	r30, r24
    2c2e:	f9 1f       	adc	r31, r25
    2c30:	31 97       	sbiw	r30, 0x01	; 1
    2c32:	f0 80       	ld	r15, Z
    2c34:	6f ef       	ldi	r22, 0xFF	; 255
    2c36:	68 0f       	add	r22, r24
    2c38:	ce 01       	movw	r24, r28
    2c3a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2c3e:	f8 16       	cp	r15, r24
    2c40:	49 f0       	breq	.+18     	; 0x2c54 <network_receive+0x6c>
	   ++crc;
    2c42:	80 91 cd 19 	lds	r24, 0x19CD	; 0x8019cd <crc.2025>
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	80 93 cd 19 	sts	0x19CD, r24	; 0x8019cd <crc.2025>
	   vPortFree(decoded_data);
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c52:	1b c0       	rjmp	.+54     	; 0x2c8a <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2c54:	88 81       	ld	r24, Y
    2c56:	83 30       	cpi	r24, 0x03	; 3
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <network_receive+0x7a>
	   vPortFree(decoded_data);
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2c62:	a8 01       	movw	r20, r16
    2c64:	44 50       	subi	r20, 0x04	; 4
    2c66:	51 09       	sbc	r21, r1
    2c68:	be 01       	movw	r22, r28
    2c6a:	6d 5f       	subi	r22, 0xFD	; 253
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	eb 5a       	subi	r30, 0xAB	; 171
    2c78:	f4 4e       	sbci	r31, 0xE4	; 228
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	f0 81       	ld	r31, Z
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	19 95       	eicall
   vPortFree(decoded_data);
    2c84:	ce 01       	movw	r24, r28
    2c86:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
}
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	ff 90       	pop	r15
    2c94:	ef 90       	pop	r14
    2c96:	08 95       	ret

00002c98 <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2c98:	84 ef       	ldi	r24, 0xF4	; 244
    2c9a:	95 e1       	ldi	r25, 0x15	; 21
    2c9c:	0c 94 a0 2e 	jmp	0x5d40	; 0x5d40 <vUSART_set_receive_callback>
    2ca0:	08 95       	ret

00002ca2 <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2ca2:	82 30       	cpi	r24, 0x02	; 2
    2ca4:	40 f4       	brcc	.+16     	; 0x2cb6 <network_set_callback+0x14>
    2ca6:	e8 2f       	mov	r30, r24
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	ee 0f       	add	r30, r30
    2cac:	ff 1f       	adc	r31, r31
    2cae:	eb 5a       	subi	r30, 0xAB	; 171
    2cb0:	f4 4e       	sbci	r31, 0xE4	; 228
    2cb2:	71 83       	std	Z+1, r23	; 0x01
    2cb4:	60 83       	st	Z, r22
    2cb6:	08 95       	ret

00002cb8 <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2cb8:	8f 92       	push	r8
    2cba:	9f 92       	push	r9
    2cbc:	af 92       	push	r10
    2cbe:	bf 92       	push	r11
    2cc0:	cf 92       	push	r12
    2cc2:	df 92       	push	r13
    2cc4:	ef 92       	push	r14
    2cc6:	ff 92       	push	r15
    2cc8:	0f 93       	push	r16
    2cca:	1f 93       	push	r17
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	88 2e       	mov	r8, r24
    2cd2:	96 2e       	mov	r9, r22
    2cd4:	5a 01       	movw	r10, r20
    2cd6:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2cd8:	69 01       	movw	r12, r18
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	c8 0e       	add	r12, r24
    2cde:	d1 1c       	adc	r13, r1
    2ce0:	c6 01       	movw	r24, r12
    2ce2:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2ce6:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2ce8:	c8 01       	movw	r24, r16
    2cea:	06 96       	adiw	r24, 0x06	; 6
    2cec:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2cf0:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2cf2:	20 97       	sbiw	r28, 0x00	; 0
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <network_send+0x42>
    2cf6:	89 2b       	or	r24, r25
    2cf8:	41 f4       	brne	.+16     	; 0x2d0a <network_send+0x52>
    vPortFree(packet);
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2d00:	c7 01       	movw	r24, r14
    2d02:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	3c c0       	rjmp	.+120    	; 0x2d82 <network_send+0xca>
  }
  packet[0] = remote_address;
    2d0a:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2d0c:	83 e0       	ldi	r24, 0x03	; 3
    2d0e:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2d10:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2d12:	a8 01       	movw	r20, r16
    2d14:	b5 01       	movw	r22, r10
    2d16:	ce 01       	movw	r24, r28
    2d18:	03 96       	adiw	r24, 0x03	; 3
    2d1a:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2d1e:	58 01       	movw	r10, r16
    2d20:	e3 e0       	ldi	r30, 0x03	; 3
    2d22:	ae 0e       	add	r10, r30
    2d24:	b1 1c       	adc	r11, r1
    2d26:	ac 0e       	add	r10, r28
    2d28:	bd 1e       	adc	r11, r29
    2d2a:	63 e0       	ldi	r22, 0x03	; 3
    2d2c:	60 0f       	add	r22, r16
    2d2e:	ce 01       	movw	r24, r28
    2d30:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2d34:	f5 01       	movw	r30, r10
    2d36:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2d38:	b8 01       	movw	r22, r16
    2d3a:	6b 5f       	subi	r22, 0xFB	; 251
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	96 01       	movw	r18, r12
    2d40:	ae 01       	movw	r20, r28
    2d42:	c7 01       	movw	r24, r14
    2d44:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2d48:	88 23       	and	r24, r24
    2d4a:	41 f0       	breq	.+16     	; 0x2d5c <network_send+0xa4>
    vPortFree(packet);
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2d52:	c7 01       	movw	r24, r14
    2d54:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	13 c0       	rjmp	.+38     	; 0x2d82 <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2d5c:	86 2f       	mov	r24, r22
    2d5e:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2d60:	f7 01       	movw	r30, r14
    2d62:	e8 0f       	add	r30, r24
    2d64:	f9 1f       	adc	r31, r25
    2d66:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2d68:	bc 01       	movw	r22, r24
    2d6a:	6f 5f       	subi	r22, 0xFF	; 255
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	c7 01       	movw	r24, r14
    2d70:	0e 94 7c 2e 	call	0x5cf8	; 0x5cf8 <vUSART_send>
  vPortFree(packet);
    2d74:	ce 01       	movw	r24, r28
    2d76:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  vPortFree(encoded_data);
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
}
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	bf 90       	pop	r11
    2d94:	af 90       	pop	r10
    2d96:	9f 90       	pop	r9
    2d98:	8f 90       	pop	r8
    2d9a:	08 95       	ret

00002d9c <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2d9c:	31 e1       	ldi	r19, 0x11	; 17
    2d9e:	fc 01       	movw	r30, r24
    2da0:	30 83       	st	Z, r19
    2da2:	31 97       	sbiw	r30, 0x01	; 1
    2da4:	22 e2       	ldi	r18, 0x22	; 34
    2da6:	20 83       	st	Z, r18
    2da8:	31 97       	sbiw	r30, 0x01	; 1
    2daa:	a3 e3       	ldi	r26, 0x33	; 51
    2dac:	a0 83       	st	Z, r26
    2dae:	31 97       	sbiw	r30, 0x01	; 1
    2db0:	60 83       	st	Z, r22
    2db2:	31 97       	sbiw	r30, 0x01	; 1
    2db4:	70 83       	st	Z, r23
    2db6:	31 97       	sbiw	r30, 0x01	; 1
    2db8:	10 82       	st	Z, r1
    2dba:	31 97       	sbiw	r30, 0x01	; 1
    2dbc:	10 82       	st	Z, r1
    2dbe:	31 97       	sbiw	r30, 0x01	; 1
    2dc0:	60 e8       	ldi	r22, 0x80	; 128
    2dc2:	60 83       	st	Z, r22
    2dc4:	31 97       	sbiw	r30, 0x01	; 1
    2dc6:	10 82       	st	Z, r1
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	10 82       	st	Z, r1
    2dcc:	31 97       	sbiw	r30, 0x01	; 1
    2dce:	10 82       	st	Z, r1
    2dd0:	31 97       	sbiw	r30, 0x01	; 1
    2dd2:	62 e0       	ldi	r22, 0x02	; 2
    2dd4:	60 83       	st	Z, r22
    2dd6:	31 97       	sbiw	r30, 0x01	; 1
    2dd8:	63 e0       	ldi	r22, 0x03	; 3
    2dda:	60 83       	st	Z, r22
    2ddc:	31 97       	sbiw	r30, 0x01	; 1
    2dde:	64 e0       	ldi	r22, 0x04	; 4
    2de0:	60 83       	st	Z, r22
    2de2:	31 97       	sbiw	r30, 0x01	; 1
    2de4:	65 e0       	ldi	r22, 0x05	; 5
    2de6:	60 83       	st	Z, r22
    2de8:	31 97       	sbiw	r30, 0x01	; 1
    2dea:	66 e0       	ldi	r22, 0x06	; 6
    2dec:	60 83       	st	Z, r22
    2dee:	31 97       	sbiw	r30, 0x01	; 1
    2df0:	67 e0       	ldi	r22, 0x07	; 7
    2df2:	60 83       	st	Z, r22
    2df4:	31 97       	sbiw	r30, 0x01	; 1
    2df6:	68 e0       	ldi	r22, 0x08	; 8
    2df8:	60 83       	st	Z, r22
    2dfa:	31 97       	sbiw	r30, 0x01	; 1
    2dfc:	69 e0       	ldi	r22, 0x09	; 9
    2dfe:	60 83       	st	Z, r22
    2e00:	31 97       	sbiw	r30, 0x01	; 1
    2e02:	60 e1       	ldi	r22, 0x10	; 16
    2e04:	60 83       	st	Z, r22
    2e06:	31 97       	sbiw	r30, 0x01	; 1
    2e08:	30 83       	st	Z, r19
    2e0a:	31 97       	sbiw	r30, 0x01	; 1
    2e0c:	32 e1       	ldi	r19, 0x12	; 18
    2e0e:	30 83       	st	Z, r19
    2e10:	31 97       	sbiw	r30, 0x01	; 1
    2e12:	33 e1       	ldi	r19, 0x13	; 19
    2e14:	30 83       	st	Z, r19
    2e16:	31 97       	sbiw	r30, 0x01	; 1
    2e18:	34 e1       	ldi	r19, 0x14	; 20
    2e1a:	30 83       	st	Z, r19
    2e1c:	31 97       	sbiw	r30, 0x01	; 1
    2e1e:	35 e1       	ldi	r19, 0x15	; 21
    2e20:	30 83       	st	Z, r19
    2e22:	31 97       	sbiw	r30, 0x01	; 1
    2e24:	36 e1       	ldi	r19, 0x16	; 22
    2e26:	30 83       	st	Z, r19
    2e28:	31 97       	sbiw	r30, 0x01	; 1
    2e2a:	37 e1       	ldi	r19, 0x17	; 23
    2e2c:	30 83       	st	Z, r19
    2e2e:	31 97       	sbiw	r30, 0x01	; 1
    2e30:	38 e1       	ldi	r19, 0x18	; 24
    2e32:	30 83       	st	Z, r19
    2e34:	31 97       	sbiw	r30, 0x01	; 1
    2e36:	39 e1       	ldi	r19, 0x19	; 25
    2e38:	30 83       	st	Z, r19
    2e3a:	31 97       	sbiw	r30, 0x01	; 1
    2e3c:	30 e2       	ldi	r19, 0x20	; 32
    2e3e:	30 83       	st	Z, r19
    2e40:	31 97       	sbiw	r30, 0x01	; 1
    2e42:	31 e2       	ldi	r19, 0x21	; 33
    2e44:	30 83       	st	Z, r19
    2e46:	31 97       	sbiw	r30, 0x01	; 1
    2e48:	20 83       	st	Z, r18
    2e4a:	31 97       	sbiw	r30, 0x01	; 1
    2e4c:	23 e2       	ldi	r18, 0x23	; 35
    2e4e:	20 83       	st	Z, r18
    2e50:	31 97       	sbiw	r30, 0x01	; 1
    2e52:	40 83       	st	Z, r20
    2e54:	31 97       	sbiw	r30, 0x01	; 1
    2e56:	50 83       	st	Z, r21
    2e58:	31 97       	sbiw	r30, 0x01	; 1
    2e5a:	26 e2       	ldi	r18, 0x26	; 38
    2e5c:	20 83       	st	Z, r18
    2e5e:	31 97       	sbiw	r30, 0x01	; 1
    2e60:	27 e2       	ldi	r18, 0x27	; 39
    2e62:	20 83       	st	Z, r18
    2e64:	31 97       	sbiw	r30, 0x01	; 1
    2e66:	28 e2       	ldi	r18, 0x28	; 40
    2e68:	20 83       	st	Z, r18
    2e6a:	31 97       	sbiw	r30, 0x01	; 1
    2e6c:	29 e2       	ldi	r18, 0x29	; 41
    2e6e:	20 83       	st	Z, r18
    2e70:	31 97       	sbiw	r30, 0x01	; 1
    2e72:	20 e3       	ldi	r18, 0x30	; 48
    2e74:	20 83       	st	Z, r18
    2e76:	31 97       	sbiw	r30, 0x01	; 1
    2e78:	21 e3       	ldi	r18, 0x31	; 49
    2e7a:	20 83       	st	Z, r18
    2e7c:	89 97       	sbiw	r24, 0x29	; 41
    2e7e:	08 95       	ret

00002e80 <xPortStartScheduler>:
    2e80:	88 ee       	ldi	r24, 0xE8	; 232
    2e82:	93 e0       	ldi	r25, 0x03	; 3
    2e84:	90 93 6a 1b 	sts	0x1B6A, r25	; 0x801b6a <portTickRateHz+0x1>
    2e88:	80 93 69 1b 	sts	0x1B69, r24	; 0x801b69 <portTickRateHz>
    2e8c:	90 93 6c 1b 	sts	0x1B6C, r25	; 0x801b6c <ticksRemainingInSec+0x1>
    2e90:	80 93 6b 1b 	sts	0x1B6B, r24	; 0x801b6b <ticksRemainingInSec>
    2e94:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2e98:	89 ef       	ldi	r24, 0xF9	; 249
    2e9a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2e9e:	8b e0       	ldi	r24, 0x0B	; 11
    2ea0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2ea4:	e1 e7       	ldi	r30, 0x71	; 113
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	82 60       	ori	r24, 0x02	; 2
    2eac:	80 83       	st	Z, r24
    2eae:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    2eb2:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    2eb6:	cd 91       	ld	r28, X+
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	dd 91       	ld	r29, X+
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	ff 91       	pop	r31
    2ec0:	ef 91       	pop	r30
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	bf 90       	pop	r11
    2ee8:	af 90       	pop	r10
    2eea:	9f 90       	pop	r9
    2eec:	8f 90       	pop	r8
    2eee:	7f 90       	pop	r7
    2ef0:	6f 90       	pop	r6
    2ef2:	5f 90       	pop	r5
    2ef4:	4f 90       	pop	r4
    2ef6:	3f 90       	pop	r3
    2ef8:	2f 90       	pop	r2
    2efa:	1f 90       	pop	r1
    2efc:	0f 90       	pop	r0
    2efe:	0c be       	out	0x3c, r0	; 60
    2f00:	0f 90       	pop	r0
    2f02:	0b be       	out	0x3b, r0	; 59
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	08 95       	ret
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	08 95       	ret

00002f10 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	0f 92       	push	r0
    2f18:	0b b6       	in	r0, 0x3b	; 59
    2f1a:	0f 92       	push	r0
    2f1c:	0c b6       	in	r0, 0x3c	; 60
    2f1e:	0f 92       	push	r0
    2f20:	1f 92       	push	r1
    2f22:	11 24       	eor	r1, r1
    2f24:	2f 92       	push	r2
    2f26:	3f 92       	push	r3
    2f28:	4f 92       	push	r4
    2f2a:	5f 92       	push	r5
    2f2c:	6f 92       	push	r6
    2f2e:	7f 92       	push	r7
    2f30:	8f 92       	push	r8
    2f32:	9f 92       	push	r9
    2f34:	af 92       	push	r10
    2f36:	bf 92       	push	r11
    2f38:	cf 92       	push	r12
    2f3a:	df 92       	push	r13
    2f3c:	ef 92       	push	r14
    2f3e:	ff 92       	push	r15
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	2f 93       	push	r18
    2f46:	3f 93       	push	r19
    2f48:	4f 93       	push	r20
    2f4a:	5f 93       	push	r21
    2f4c:	6f 93       	push	r22
    2f4e:	7f 93       	push	r23
    2f50:	8f 93       	push	r24
    2f52:	9f 93       	push	r25
    2f54:	af 93       	push	r26
    2f56:	bf 93       	push	r27
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	ef 93       	push	r30
    2f5e:	ff 93       	push	r31
    2f60:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    2f64:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    2f68:	0d b6       	in	r0, 0x3d	; 61
    2f6a:	0d 92       	st	X+, r0
    2f6c:	0e b6       	in	r0, 0x3e	; 62
    2f6e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f70:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f74:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    2f78:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    2f7c:	cd 91       	ld	r28, X+
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	dd 91       	ld	r29, X+
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	ff 91       	pop	r31
    2f86:	ef 91       	pop	r30
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	bf 91       	pop	r27
    2f8e:	af 91       	pop	r26
    2f90:	9f 91       	pop	r25
    2f92:	8f 91       	pop	r24
    2f94:	7f 91       	pop	r23
    2f96:	6f 91       	pop	r22
    2f98:	5f 91       	pop	r21
    2f9a:	4f 91       	pop	r20
    2f9c:	3f 91       	pop	r19
    2f9e:	2f 91       	pop	r18
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	bf 90       	pop	r11
    2fae:	af 90       	pop	r10
    2fb0:	9f 90       	pop	r9
    2fb2:	8f 90       	pop	r8
    2fb4:	7f 90       	pop	r7
    2fb6:	6f 90       	pop	r6
    2fb8:	5f 90       	pop	r5
    2fba:	4f 90       	pop	r4
    2fbc:	3f 90       	pop	r3
    2fbe:	2f 90       	pop	r2
    2fc0:	1f 90       	pop	r1
    2fc2:	0f 90       	pop	r0
    2fc4:	0c be       	out	0x3c, r0	; 60
    2fc6:	0f 90       	pop	r0
    2fc8:	0b be       	out	0x3b, r0	; 59
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2fd0:	08 95       	ret

00002fd2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2fd2:	0f 92       	push	r0
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	0f 92       	push	r0
    2fda:	0b b6       	in	r0, 0x3b	; 59
    2fdc:	0f 92       	push	r0
    2fde:	0c b6       	in	r0, 0x3c	; 60
    2fe0:	0f 92       	push	r0
    2fe2:	1f 92       	push	r1
    2fe4:	11 24       	eor	r1, r1
    2fe6:	2f 92       	push	r2
    2fe8:	3f 92       	push	r3
    2fea:	4f 92       	push	r4
    2fec:	5f 92       	push	r5
    2fee:	6f 92       	push	r6
    2ff0:	7f 92       	push	r7
    2ff2:	8f 92       	push	r8
    2ff4:	9f 92       	push	r9
    2ff6:	af 92       	push	r10
    2ff8:	bf 92       	push	r11
    2ffa:	cf 92       	push	r12
    2ffc:	df 92       	push	r13
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	2f 93       	push	r18
    3008:	3f 93       	push	r19
    300a:	4f 93       	push	r20
    300c:	5f 93       	push	r21
    300e:	6f 93       	push	r22
    3010:	7f 93       	push	r23
    3012:	8f 93       	push	r24
    3014:	9f 93       	push	r25
    3016:	af 93       	push	r26
    3018:	bf 93       	push	r27
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	ef 93       	push	r30
    3020:	ff 93       	push	r31
    3022:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    3026:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    302a:	0d b6       	in	r0, 0x3d	; 61
    302c:	0d 92       	st	X+, r0
    302e:	0e b6       	in	r0, 0x3e	; 62
    3030:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    3032:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    3034:	80 91 6b 1b 	lds	r24, 0x1B6B	; 0x801b6b <ticksRemainingInSec>
    3038:	90 91 6c 1b 	lds	r25, 0x1B6C	; 0x801b6c <ticksRemainingInSec+0x1>
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	90 93 6c 1b 	sts	0x1B6C, r25	; 0x801b6c <ticksRemainingInSec+0x1>
    3042:	80 93 6b 1b 	sts	0x1B6B, r24	; 0x801b6b <ticksRemainingInSec>
    3046:	89 2b       	or	r24, r25
    3048:	41 f4       	brne	.+16     	; 0x305a <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    304a:	80 91 69 1b 	lds	r24, 0x1B69	; 0x801b69 <portTickRateHz>
    304e:	90 91 6a 1b 	lds	r25, 0x1B6A	; 0x801b6a <portTickRateHz+0x1>
    3052:	90 93 6c 1b 	sts	0x1B6C, r25	; 0x801b6c <ticksRemainingInSec+0x1>
    3056:	80 93 6b 1b 	sts	0x1B6B, r24	; 0x801b6b <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    305a:	0e 94 3b 28 	call	0x5076	; 0x5076 <xTaskIncrementTick>
    305e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    3060:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    3064:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    3068:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    306c:	cd 91       	ld	r28, X+
    306e:	cd bf       	out	0x3d, r28	; 61
    3070:	dd 91       	ld	r29, X+
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	ff 91       	pop	r31
    3076:	ef 91       	pop	r30
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	bf 91       	pop	r27
    307e:	af 91       	pop	r26
    3080:	9f 91       	pop	r25
    3082:	8f 91       	pop	r24
    3084:	7f 91       	pop	r23
    3086:	6f 91       	pop	r22
    3088:	5f 91       	pop	r21
    308a:	4f 91       	pop	r20
    308c:	3f 91       	pop	r19
    308e:	2f 91       	pop	r18
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	bf 90       	pop	r11
    309e:	af 90       	pop	r10
    30a0:	9f 90       	pop	r9
    30a2:	8f 90       	pop	r8
    30a4:	7f 90       	pop	r7
    30a6:	6f 90       	pop	r6
    30a8:	5f 90       	pop	r5
    30aa:	4f 90       	pop	r4
    30ac:	3f 90       	pop	r3
    30ae:	2f 90       	pop	r2
    30b0:	1f 90       	pop	r1
    30b2:	0f 90       	pop	r0
    30b4:	0c be       	out	0x3c, r0	; 60
    30b6:	0f 90       	pop	r0
    30b8:	0b be       	out	0x3b, r0	; 59
    30ba:	0f 90       	pop	r0
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    30c0:	08 95       	ret

000030c2 <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    30c2:	87 df       	rcall	.-242    	; 0x2fd2 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    30c4:	18 95       	reti

000030c6 <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	08 2f       	mov	r16, r24
    30d0:	16 2f       	mov	r17, r22
    30d2:	66 23       	and	r22, r22
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <xQueueGenericCreate+0x12>
    30d6:	3b c0       	rjmp	.+118    	; 0x314e <xQueueGenericCreate+0x88>
    30d8:	86 9f       	mul	r24, r22
    30da:	c0 01       	movw	r24, r0
    30dc:	11 24       	eor	r1, r1
    30de:	80 96       	adiw	r24, 0x20	; 32
    30e0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    30e4:	ec 01       	movw	r28, r24
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	21 f4       	brne	.+8      	; 0x30f2 <xQueueGenericCreate+0x2c>
    30ea:	39 c0       	rjmp	.+114    	; 0x315e <xQueueGenericCreate+0x98>
    30ec:	d9 83       	std	Y+1, r29	; 0x01
    30ee:	c8 83       	st	Y, r28
    30f0:	03 c0       	rjmp	.+6      	; 0x30f8 <xQueueGenericCreate+0x32>
    30f2:	4f 96       	adiw	r24, 0x1f	; 31
    30f4:	99 83       	std	Y+1, r25	; 0x01
    30f6:	88 83       	st	Y, r24
    30f8:	0b 8f       	std	Y+27, r16	; 0x1b
    30fa:	1c 8f       	std	Y+28, r17	; 0x1c
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	0f 92       	push	r0
    3102:	48 81       	ld	r20, Y
    3104:	59 81       	ldd	r21, Y+1	; 0x01
    3106:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    310c:	62 9f       	mul	r22, r18
    310e:	c0 01       	movw	r24, r0
    3110:	63 9f       	mul	r22, r19
    3112:	90 0d       	add	r25, r0
    3114:	11 24       	eor	r1, r1
    3116:	ba 01       	movw	r22, r20
    3118:	68 0f       	add	r22, r24
    311a:	79 1f       	adc	r23, r25
    311c:	7b 83       	std	Y+3, r23	; 0x03
    311e:	6a 83       	std	Y+2, r22	; 0x02
    3120:	1a 8e       	std	Y+26, r1	; 0x1a
    3122:	5d 83       	std	Y+5, r21	; 0x05
    3124:	4c 83       	std	Y+4, r20	; 0x04
    3126:	82 1b       	sub	r24, r18
    3128:	93 0b       	sbc	r25, r19
    312a:	84 0f       	add	r24, r20
    312c:	95 1f       	adc	r25, r21
    312e:	9f 83       	std	Y+7, r25	; 0x07
    3130:	8e 83       	std	Y+6, r24	; 0x06
    3132:	8f ef       	ldi	r24, 0xFF	; 255
    3134:	8d 8f       	std	Y+29, r24	; 0x1d
    3136:	8e 8f       	std	Y+30, r24	; 0x1e
    3138:	ce 01       	movw	r24, r28
    313a:	08 96       	adiw	r24, 0x08	; 8
    313c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3140:	ce 01       	movw	r24, r28
    3142:	41 96       	adiw	r24, 0x11	; 17
    3144:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	08 c0       	rjmp	.+16     	; 0x315e <xQueueGenericCreate+0x98>
    314e:	8f e1       	ldi	r24, 0x1F	; 31
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    3156:	ec 01       	movw	r28, r24
    3158:	89 2b       	or	r24, r25
    315a:	09 f0       	breq	.+2      	; 0x315e <xQueueGenericCreate+0x98>
    315c:	c7 cf       	rjmp	.-114    	; 0x30ec <xQueueGenericCreate+0x26>
    315e:	ce 01       	movw	r24, r28
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	08 95       	ret

0000316a <xQueueCreateMutex>:
    316a:	9f 92       	push	r9
    316c:	af 92       	push	r10
    316e:	bf 92       	push	r11
    3170:	cf 92       	push	r12
    3172:	df 92       	push	r13
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	00 d0       	rcall	.+0      	; 0x3182 <xQueueCreateMutex+0x18>
    3182:	1f 92       	push	r1
    3184:	1f 92       	push	r1
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	8f e1       	ldi	r24, 0x1F	; 31
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    3192:	8c 01       	movw	r16, r24
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	09 f4       	brne	.+2      	; 0x319a <xQueueCreateMutex+0x30>
    3198:	58 c1       	rjmp	.+688    	; 0x344a <xQueueCreateMutex+0x2e0>
    319a:	fc 01       	movw	r30, r24
    319c:	13 82       	std	Z+3, r1	; 0x03
    319e:	12 82       	std	Z+2, r1	; 0x02
    31a0:	11 82       	std	Z+1, r1	; 0x01
    31a2:	10 82       	st	Z, r1
    31a4:	15 82       	std	Z+5, r1	; 0x05
    31a6:	14 82       	std	Z+4, r1	; 0x04
    31a8:	17 82       	std	Z+7, r1	; 0x07
    31aa:	16 82       	std	Z+6, r1	; 0x06
    31ac:	12 8e       	std	Z+26, r1	; 0x1a
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	83 8f       	std	Z+27, r24	; 0x1b
    31b2:	14 8e       	std	Z+28, r1	; 0x1c
    31b4:	8f ef       	ldi	r24, 0xFF	; 255
    31b6:	85 8f       	std	Z+29, r24	; 0x1d
    31b8:	86 8f       	std	Z+30, r24	; 0x1e
    31ba:	78 01       	movw	r14, r16
    31bc:	f8 e0       	ldi	r31, 0x08	; 8
    31be:	ef 0e       	add	r14, r31
    31c0:	f1 1c       	adc	r15, r1
    31c2:	c7 01       	movw	r24, r14
    31c4:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    31c8:	68 01       	movw	r12, r16
    31ca:	81 e1       	ldi	r24, 0x11	; 17
    31cc:	c8 0e       	add	r12, r24
    31ce:	d1 1c       	adc	r13, r1
    31d0:	c6 01       	movw	r24, r12
    31d2:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    31d6:	1d 82       	std	Y+5, r1	; 0x05
    31d8:	1c 82       	std	Y+4, r1	; 0x04
    31da:	a1 2c       	mov	r10, r1
    31dc:	99 24       	eor	r9, r9
    31de:	93 94       	inc	r9
    31e0:	bb 24       	eor	r11, r11
    31e2:	ba 94       	dec	r11
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	0f 92       	push	r0
    31ea:	f8 01       	movw	r30, r16
    31ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    31ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    31f0:	98 17       	cp	r25, r24
    31f2:	f0 f4       	brcc	.+60     	; 0x3230 <xQueueCreateMutex+0xc6>
    31f4:	80 81       	ld	r24, Z
    31f6:	91 81       	ldd	r25, Z+1	; 0x01
    31f8:	89 2b       	or	r24, r25
    31fa:	09 f0       	breq	.+2      	; 0x31fe <xQueueCreateMutex+0x94>
    31fc:	1d c1       	rjmp	.+570    	; 0x3438 <xQueueCreateMutex+0x2ce>
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <xTaskPriorityDisinherit>
    3206:	f8 01       	movw	r30, r16
    3208:	13 82       	std	Z+3, r1	; 0x03
    320a:	12 82       	std	Z+2, r1	; 0x02
    320c:	92 8d       	ldd	r25, Z+26	; 0x1a
    320e:	9f 5f       	subi	r25, 0xFF	; 255
    3210:	92 8f       	std	Z+26, r25	; 0x1a
    3212:	91 89       	ldd	r25, Z+17	; 0x11
    3214:	99 23       	and	r25, r25
    3216:	39 f0       	breq	.+14     	; 0x3226 <xQueueCreateMutex+0xbc>
    3218:	c6 01       	movw	r24, r12
    321a:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    321e:	81 30       	cpi	r24, 0x01	; 1
    3220:	21 f4       	brne	.+8      	; 0x322a <xQueueCreateMutex+0xc0>
    3222:	76 de       	rcall	.-788    	; 0x2f10 <vPortYield>
    3224:	02 c0       	rjmp	.+4      	; 0x322a <xQueueCreateMutex+0xc0>
    3226:	81 11       	cpse	r24, r1
    3228:	73 de       	rcall	.-794    	; 0x2f10 <vPortYield>
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	0d c1       	rjmp	.+538    	; 0x344a <xQueueCreateMutex+0x2e0>
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	9d 81       	ldd	r25, Y+5	; 0x05
    3234:	89 2b       	or	r24, r25
    3236:	19 f4       	brne	.+6      	; 0x323e <xQueueCreateMutex+0xd4>
    3238:	0f 90       	pop	r0
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	06 c1       	rjmp	.+524    	; 0x344a <xQueueCreateMutex+0x2e0>
    323e:	a1 10       	cpse	r10, r1
    3240:	05 c0       	rjmp	.+10     	; 0x324c <xQueueCreateMutex+0xe2>
    3242:	ce 01       	movw	r24, r28
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSetTimeOutState>
    324a:	a9 2c       	mov	r10, r9
    324c:	0f 90       	pop	r0
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	0f 92       	push	r0
    325a:	f8 01       	movw	r30, r16
    325c:	85 8d       	ldd	r24, Z+29	; 0x1d
    325e:	8f 3f       	cpi	r24, 0xFF	; 255
    3260:	09 f4       	brne	.+2      	; 0x3264 <xQueueCreateMutex+0xfa>
    3262:	15 8e       	std	Z+29, r1	; 0x1d
    3264:	f8 01       	movw	r30, r16
    3266:	86 8d       	ldd	r24, Z+30	; 0x1e
    3268:	8f 3f       	cpi	r24, 0xFF	; 255
    326a:	09 f4       	brne	.+2      	; 0x326e <xQueueCreateMutex+0x104>
    326c:	16 8e       	std	Z+30, r1	; 0x1e
    326e:	0f 90       	pop	r0
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	be 01       	movw	r22, r28
    3274:	6c 5f       	subi	r22, 0xFC	; 252
    3276:	7f 4f       	sbci	r23, 0xFF	; 255
    3278:	ce 01       	movw	r24, r28
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	0e 94 32 2a 	call	0x5464	; 0x5464 <xTaskCheckForTimeOut>
    3280:	81 11       	cpse	r24, r1
    3282:	96 c0       	rjmp	.+300    	; 0x33b0 <xQueueCreateMutex+0x246>
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	0f 92       	push	r0
    328a:	f8 01       	movw	r30, r16
    328c:	92 8d       	ldd	r25, Z+26	; 0x1a
    328e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3290:	0f 90       	pop	r0
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	98 13       	cpse	r25, r24
    3296:	4a c0       	rjmp	.+148    	; 0x332c <xQueueCreateMutex+0x1c2>
    3298:	6c 81       	ldd	r22, Y+4	; 0x04
    329a:	7d 81       	ldd	r23, Y+5	; 0x05
    329c:	c7 01       	movw	r24, r14
    329e:	0e 94 84 29 	call	0x5308	; 0x5308 <vTaskPlaceOnEventList>
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	0f 92       	push	r0
    32a8:	f8 01       	movw	r30, r16
    32aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    32ac:	18 16       	cp	r1, r24
    32ae:	ac f4       	brge	.+42     	; 0x32da <xQueueCreateMutex+0x170>
    32b0:	81 89       	ldd	r24, Z+17	; 0x11
    32b2:	81 11       	cpse	r24, r1
    32b4:	05 c0       	rjmp	.+10     	; 0x32c0 <xQueueCreateMutex+0x156>
    32b6:	11 c0       	rjmp	.+34     	; 0x32da <xQueueCreateMutex+0x170>
    32b8:	f8 01       	movw	r30, r16
    32ba:	81 89       	ldd	r24, Z+17	; 0x11
    32bc:	88 23       	and	r24, r24
    32be:	69 f0       	breq	.+26     	; 0x32da <xQueueCreateMutex+0x170>
    32c0:	c6 01       	movw	r24, r12
    32c2:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    32c6:	81 11       	cpse	r24, r1
    32c8:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    32cc:	f8 01       	movw	r30, r16
    32ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    32d0:	81 50       	subi	r24, 0x01	; 1
    32d2:	86 8f       	std	Z+30, r24	; 0x1e
    32d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    32d6:	18 16       	cp	r1, r24
    32d8:	7c f3       	brlt	.-34     	; 0x32b8 <xQueueCreateMutex+0x14e>
    32da:	f8 01       	movw	r30, r16
    32dc:	b6 8e       	std	Z+30, r11	; 0x1e
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	0f 92       	push	r0
    32e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    32ea:	18 16       	cp	r1, r24
    32ec:	ac f4       	brge	.+42     	; 0x3318 <xQueueCreateMutex+0x1ae>
    32ee:	80 85       	ldd	r24, Z+8	; 0x08
    32f0:	81 11       	cpse	r24, r1
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <xQueueCreateMutex+0x194>
    32f4:	11 c0       	rjmp	.+34     	; 0x3318 <xQueueCreateMutex+0x1ae>
    32f6:	f8 01       	movw	r30, r16
    32f8:	80 85       	ldd	r24, Z+8	; 0x08
    32fa:	88 23       	and	r24, r24
    32fc:	69 f0       	breq	.+26     	; 0x3318 <xQueueCreateMutex+0x1ae>
    32fe:	c7 01       	movw	r24, r14
    3300:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3304:	81 11       	cpse	r24, r1
    3306:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    330a:	f8 01       	movw	r30, r16
    330c:	85 8d       	ldd	r24, Z+29	; 0x1d
    330e:	81 50       	subi	r24, 0x01	; 1
    3310:	85 8f       	std	Z+29, r24	; 0x1d
    3312:	85 8d       	ldd	r24, Z+29	; 0x1d
    3314:	18 16       	cp	r1, r24
    3316:	7c f3       	brlt	.-34     	; 0x32f6 <xQueueCreateMutex+0x18c>
    3318:	f8 01       	movw	r30, r16
    331a:	b5 8e       	std	Z+29, r11	; 0x1d
    331c:	0f 90       	pop	r0
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3324:	81 11       	cpse	r24, r1
    3326:	5e cf       	rjmp	.-324    	; 0x31e4 <xQueueCreateMutex+0x7a>
    3328:	f3 dd       	rcall	.-1050   	; 0x2f10 <vPortYield>
    332a:	5c cf       	rjmp	.-328    	; 0x31e4 <xQueueCreateMutex+0x7a>
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	0f 92       	push	r0
    3332:	f8 01       	movw	r30, r16
    3334:	86 8d       	ldd	r24, Z+30	; 0x1e
    3336:	18 16       	cp	r1, r24
    3338:	ac f4       	brge	.+42     	; 0x3364 <xQueueCreateMutex+0x1fa>
    333a:	81 89       	ldd	r24, Z+17	; 0x11
    333c:	81 11       	cpse	r24, r1
    333e:	05 c0       	rjmp	.+10     	; 0x334a <xQueueCreateMutex+0x1e0>
    3340:	11 c0       	rjmp	.+34     	; 0x3364 <xQueueCreateMutex+0x1fa>
    3342:	f8 01       	movw	r30, r16
    3344:	81 89       	ldd	r24, Z+17	; 0x11
    3346:	88 23       	and	r24, r24
    3348:	69 f0       	breq	.+26     	; 0x3364 <xQueueCreateMutex+0x1fa>
    334a:	c6 01       	movw	r24, r12
    334c:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3350:	81 11       	cpse	r24, r1
    3352:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3356:	f8 01       	movw	r30, r16
    3358:	86 8d       	ldd	r24, Z+30	; 0x1e
    335a:	81 50       	subi	r24, 0x01	; 1
    335c:	86 8f       	std	Z+30, r24	; 0x1e
    335e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3360:	18 16       	cp	r1, r24
    3362:	7c f3       	brlt	.-34     	; 0x3342 <xQueueCreateMutex+0x1d8>
    3364:	f8 01       	movw	r30, r16
    3366:	b6 8e       	std	Z+30, r11	; 0x1e
    3368:	0f 90       	pop	r0
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	0f 92       	push	r0
    3372:	85 8d       	ldd	r24, Z+29	; 0x1d
    3374:	18 16       	cp	r1, r24
    3376:	ac f4       	brge	.+42     	; 0x33a2 <xQueueCreateMutex+0x238>
    3378:	80 85       	ldd	r24, Z+8	; 0x08
    337a:	81 11       	cpse	r24, r1
    337c:	05 c0       	rjmp	.+10     	; 0x3388 <xQueueCreateMutex+0x21e>
    337e:	11 c0       	rjmp	.+34     	; 0x33a2 <xQueueCreateMutex+0x238>
    3380:	f8 01       	movw	r30, r16
    3382:	80 85       	ldd	r24, Z+8	; 0x08
    3384:	88 23       	and	r24, r24
    3386:	69 f0       	breq	.+26     	; 0x33a2 <xQueueCreateMutex+0x238>
    3388:	c7 01       	movw	r24, r14
    338a:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    338e:	81 11       	cpse	r24, r1
    3390:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3394:	f8 01       	movw	r30, r16
    3396:	85 8d       	ldd	r24, Z+29	; 0x1d
    3398:	81 50       	subi	r24, 0x01	; 1
    339a:	85 8f       	std	Z+29, r24	; 0x1d
    339c:	85 8d       	ldd	r24, Z+29	; 0x1d
    339e:	18 16       	cp	r1, r24
    33a0:	7c f3       	brlt	.-34     	; 0x3380 <xQueueCreateMutex+0x216>
    33a2:	f8 01       	movw	r30, r16
    33a4:	b5 8e       	std	Z+29, r11	; 0x1d
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    33ae:	1a cf       	rjmp	.-460    	; 0x31e4 <xQueueCreateMutex+0x7a>
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	0f 92       	push	r0
    33b6:	f8 01       	movw	r30, r16
    33b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    33ba:	18 16       	cp	r1, r24
    33bc:	ac f4       	brge	.+42     	; 0x33e8 <xQueueCreateMutex+0x27e>
    33be:	81 89       	ldd	r24, Z+17	; 0x11
    33c0:	81 11       	cpse	r24, r1
    33c2:	05 c0       	rjmp	.+10     	; 0x33ce <xQueueCreateMutex+0x264>
    33c4:	11 c0       	rjmp	.+34     	; 0x33e8 <xQueueCreateMutex+0x27e>
    33c6:	f8 01       	movw	r30, r16
    33c8:	81 89       	ldd	r24, Z+17	; 0x11
    33ca:	88 23       	and	r24, r24
    33cc:	69 f0       	breq	.+26     	; 0x33e8 <xQueueCreateMutex+0x27e>
    33ce:	c6 01       	movw	r24, r12
    33d0:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    33d4:	81 11       	cpse	r24, r1
    33d6:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    33da:	f8 01       	movw	r30, r16
    33dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    33de:	81 50       	subi	r24, 0x01	; 1
    33e0:	86 8f       	std	Z+30, r24	; 0x1e
    33e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    33e4:	18 16       	cp	r1, r24
    33e6:	7c f3       	brlt	.-34     	; 0x33c6 <xQueueCreateMutex+0x25c>
    33e8:	8f ef       	ldi	r24, 0xFF	; 255
    33ea:	f8 01       	movw	r30, r16
    33ec:	86 8f       	std	Z+30, r24	; 0x1e
    33ee:	0f 90       	pop	r0
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	0f 92       	push	r0
    33f8:	85 8d       	ldd	r24, Z+29	; 0x1d
    33fa:	18 16       	cp	r1, r24
    33fc:	ac f4       	brge	.+42     	; 0x3428 <xQueueCreateMutex+0x2be>
    33fe:	80 85       	ldd	r24, Z+8	; 0x08
    3400:	81 11       	cpse	r24, r1
    3402:	05 c0       	rjmp	.+10     	; 0x340e <xQueueCreateMutex+0x2a4>
    3404:	11 c0       	rjmp	.+34     	; 0x3428 <xQueueCreateMutex+0x2be>
    3406:	f8 01       	movw	r30, r16
    3408:	80 85       	ldd	r24, Z+8	; 0x08
    340a:	88 23       	and	r24, r24
    340c:	69 f0       	breq	.+26     	; 0x3428 <xQueueCreateMutex+0x2be>
    340e:	c7 01       	movw	r24, r14
    3410:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3414:	81 11       	cpse	r24, r1
    3416:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    341a:	f8 01       	movw	r30, r16
    341c:	85 8d       	ldd	r24, Z+29	; 0x1d
    341e:	81 50       	subi	r24, 0x01	; 1
    3420:	85 8f       	std	Z+29, r24	; 0x1d
    3422:	85 8d       	ldd	r24, Z+29	; 0x1d
    3424:	18 16       	cp	r1, r24
    3426:	7c f3       	brlt	.-34     	; 0x3406 <xQueueCreateMutex+0x29c>
    3428:	8f ef       	ldi	r24, 0xFF	; 255
    342a:	f8 01       	movw	r30, r16
    342c:	85 8f       	std	Z+29, r24	; 0x1d
    342e:	0f 90       	pop	r0
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3436:	09 c0       	rjmp	.+18     	; 0x344a <xQueueCreateMutex+0x2e0>
    3438:	f8 01       	movw	r30, r16
    343a:	82 8d       	ldd	r24, Z+26	; 0x1a
    343c:	8f 5f       	subi	r24, 0xFF	; 255
    343e:	82 8f       	std	Z+26, r24	; 0x1a
    3440:	81 89       	ldd	r24, Z+17	; 0x11
    3442:	88 23       	and	r24, r24
    3444:	09 f4       	brne	.+2      	; 0x3448 <xQueueCreateMutex+0x2de>
    3446:	f1 ce       	rjmp	.-542    	; 0x322a <xQueueCreateMutex+0xc0>
    3448:	e7 ce       	rjmp	.-562    	; 0x3218 <xQueueCreateMutex+0xae>
    344a:	c8 01       	movw	r24, r16
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	df 90       	pop	r13
    3464:	cf 90       	pop	r12
    3466:	bf 90       	pop	r11
    3468:	af 90       	pop	r10
    346a:	9f 90       	pop	r9
    346c:	08 95       	ret

0000346e <xQueueGenericSend>:
    346e:	6f 92       	push	r6
    3470:	7f 92       	push	r7
    3472:	8f 92       	push	r8
    3474:	9f 92       	push	r9
    3476:	af 92       	push	r10
    3478:	bf 92       	push	r11
    347a:	cf 92       	push	r12
    347c:	df 92       	push	r13
    347e:	ef 92       	push	r14
    3480:	ff 92       	push	r15
    3482:	0f 93       	push	r16
    3484:	1f 93       	push	r17
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	00 d0       	rcall	.+0      	; 0x348c <xQueueGenericSend+0x1e>
    348c:	1f 92       	push	r1
    348e:	1f 92       	push	r1
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	8c 01       	movw	r16, r24
    3496:	5b 01       	movw	r10, r22
    3498:	5d 83       	std	Y+5, r21	; 0x05
    349a:	4c 83       	std	Y+4, r20	; 0x04
    349c:	72 2e       	mov	r7, r18
    349e:	81 2c       	mov	r8, r1
    34a0:	66 24       	eor	r6, r6
    34a2:	63 94       	inc	r6
    34a4:	99 24       	eor	r9, r9
    34a6:	9a 94       	dec	r9
    34a8:	7c 01       	movw	r14, r24
    34aa:	88 e0       	ldi	r24, 0x08	; 8
    34ac:	e8 0e       	add	r14, r24
    34ae:	f1 1c       	adc	r15, r1
    34b0:	68 01       	movw	r12, r16
    34b2:	e1 e1       	ldi	r30, 0x11	; 17
    34b4:	ce 0e       	add	r12, r30
    34b6:	d1 1c       	adc	r13, r1
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	0f 92       	push	r0
    34be:	f8 01       	movw	r30, r16
    34c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    34c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    34c4:	98 17       	cp	r25, r24
    34c6:	20 f0       	brcs	.+8      	; 0x34d0 <xQueueGenericSend+0x62>
    34c8:	f2 e0       	ldi	r31, 0x02	; 2
    34ca:	7f 12       	cpse	r7, r31
    34cc:	6e c0       	rjmp	.+220    	; 0x35aa <xQueueGenericSend+0x13c>
    34ce:	7d c1       	rjmp	.+762    	; 0x37ca <xQueueGenericSend+0x35c>
    34d0:	f8 01       	movw	r30, r16
    34d2:	44 8d       	ldd	r20, Z+28	; 0x1c
    34d4:	41 11       	cpse	r20, r1
    34d6:	15 c0       	rjmp	.+42     	; 0x3502 <xQueueGenericSend+0x94>
    34d8:	f8 01       	movw	r30, r16
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	89 2b       	or	r24, r25
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <xQueueGenericSend+0x76>
    34e2:	79 c1       	rjmp	.+754    	; 0x37d6 <xQueueGenericSend+0x368>
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <xTaskPriorityDisinherit>
    34ec:	f8 01       	movw	r30, r16
    34ee:	13 82       	std	Z+3, r1	; 0x03
    34f0:	12 82       	std	Z+2, r1	; 0x02
    34f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    34f4:	9f 5f       	subi	r25, 0xFF	; 255
    34f6:	92 8f       	std	Z+26, r25	; 0x1a
    34f8:	91 89       	ldd	r25, Z+17	; 0x11
    34fa:	99 23       	and	r25, r25
    34fc:	09 f4       	brne	.+2      	; 0x3500 <xQueueGenericSend+0x92>
    34fe:	4f c0       	rjmp	.+158    	; 0x359e <xQueueGenericSend+0x130>
    3500:	46 c0       	rjmp	.+140    	; 0x358e <xQueueGenericSend+0x120>
    3502:	71 10       	cpse	r7, r1
    3504:	1a c0       	rjmp	.+52     	; 0x353a <xQueueGenericSend+0xcc>
    3506:	50 e0       	ldi	r21, 0x00	; 0
    3508:	b5 01       	movw	r22, r10
    350a:	f8 01       	movw	r30, r16
    350c:	84 81       	ldd	r24, Z+4	; 0x04
    350e:	95 81       	ldd	r25, Z+5	; 0x05
    3510:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    3514:	f8 01       	movw	r30, r16
    3516:	24 8d       	ldd	r18, Z+28	; 0x1c
    3518:	84 81       	ldd	r24, Z+4	; 0x04
    351a:	95 81       	ldd	r25, Z+5	; 0x05
    351c:	82 0f       	add	r24, r18
    351e:	91 1d       	adc	r25, r1
    3520:	95 83       	std	Z+5, r25	; 0x05
    3522:	84 83       	std	Z+4, r24	; 0x04
    3524:	22 81       	ldd	r18, Z+2	; 0x02
    3526:	33 81       	ldd	r19, Z+3	; 0x03
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	08 f4       	brcc	.+2      	; 0x3530 <xQueueGenericSend+0xc2>
    352e:	53 c1       	rjmp	.+678    	; 0x37d6 <xQueueGenericSend+0x368>
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	95 83       	std	Z+5, r25	; 0x05
    3536:	84 83       	std	Z+4, r24	; 0x04
    3538:	4e c1       	rjmp	.+668    	; 0x37d6 <xQueueGenericSend+0x368>
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	b5 01       	movw	r22, r10
    353e:	f8 01       	movw	r30, r16
    3540:	86 81       	ldd	r24, Z+6	; 0x06
    3542:	97 81       	ldd	r25, Z+7	; 0x07
    3544:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    3548:	f8 01       	movw	r30, r16
    354a:	84 8d       	ldd	r24, Z+28	; 0x1c
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	91 95       	neg	r25
    3550:	81 95       	neg	r24
    3552:	91 09       	sbc	r25, r1
    3554:	26 81       	ldd	r18, Z+6	; 0x06
    3556:	37 81       	ldd	r19, Z+7	; 0x07
    3558:	28 0f       	add	r18, r24
    355a:	39 1f       	adc	r19, r25
    355c:	37 83       	std	Z+7, r19	; 0x07
    355e:	26 83       	std	Z+6, r18	; 0x06
    3560:	40 81       	ld	r20, Z
    3562:	51 81       	ldd	r21, Z+1	; 0x01
    3564:	24 17       	cp	r18, r20
    3566:	35 07       	cpc	r19, r21
    3568:	30 f4       	brcc	.+12     	; 0x3576 <xQueueGenericSend+0x108>
    356a:	22 81       	ldd	r18, Z+2	; 0x02
    356c:	33 81       	ldd	r19, Z+3	; 0x03
    356e:	82 0f       	add	r24, r18
    3570:	93 1f       	adc	r25, r19
    3572:	97 83       	std	Z+7, r25	; 0x07
    3574:	86 83       	std	Z+6, r24	; 0x06
    3576:	f2 e0       	ldi	r31, 0x02	; 2
    3578:	7f 12       	cpse	r7, r31
    357a:	2d c1       	rjmp	.+602    	; 0x37d6 <xQueueGenericSend+0x368>
    357c:	f8 01       	movw	r30, r16
    357e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3580:	88 23       	and	r24, r24
    3582:	09 f4       	brne	.+2      	; 0x3586 <xQueueGenericSend+0x118>
    3584:	28 c1       	rjmp	.+592    	; 0x37d6 <xQueueGenericSend+0x368>
    3586:	82 8d       	ldd	r24, Z+26	; 0x1a
    3588:	81 50       	subi	r24, 0x01	; 1
    358a:	82 8f       	std	Z+26, r24	; 0x1a
    358c:	24 c1       	rjmp	.+584    	; 0x37d6 <xQueueGenericSend+0x368>
    358e:	c8 01       	movw	r24, r16
    3590:	41 96       	adiw	r24, 0x11	; 17
    3592:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3596:	81 30       	cpi	r24, 0x01	; 1
    3598:	21 f4       	brne	.+8      	; 0x35a2 <xQueueGenericSend+0x134>
    359a:	ba dc       	rcall	.-1676   	; 0x2f10 <vPortYield>
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <xQueueGenericSend+0x134>
    359e:	81 11       	cpse	r24, r1
    35a0:	b7 dc       	rcall	.-1682   	; 0x2f10 <vPortYield>
    35a2:	0f 90       	pop	r0
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	1e c1       	rjmp	.+572    	; 0x37e6 <xQueueGenericSend+0x378>
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	9d 81       	ldd	r25, Y+5	; 0x05
    35ae:	89 2b       	or	r24, r25
    35b0:	21 f4       	brne	.+8      	; 0x35ba <xQueueGenericSend+0x14c>
    35b2:	0f 90       	pop	r0
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	16 c1       	rjmp	.+556    	; 0x37e6 <xQueueGenericSend+0x378>
    35ba:	81 10       	cpse	r8, r1
    35bc:	05 c0       	rjmp	.+10     	; 0x35c8 <xQueueGenericSend+0x15a>
    35be:	ce 01       	movw	r24, r28
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSetTimeOutState>
    35c6:	86 2c       	mov	r8, r6
    35c8:	0f 90       	pop	r0
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	0f 92       	push	r0
    35d6:	f8 01       	movw	r30, r16
    35d8:	85 8d       	ldd	r24, Z+29	; 0x1d
    35da:	8f 3f       	cpi	r24, 0xFF	; 255
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <xQueueGenericSend+0x172>
    35de:	15 8e       	std	Z+29, r1	; 0x1d
    35e0:	f8 01       	movw	r30, r16
    35e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    35e4:	8f 3f       	cpi	r24, 0xFF	; 255
    35e6:	09 f4       	brne	.+2      	; 0x35ea <xQueueGenericSend+0x17c>
    35e8:	16 8e       	std	Z+30, r1	; 0x1e
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	be 01       	movw	r22, r28
    35f0:	6c 5f       	subi	r22, 0xFC	; 252
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	ce 01       	movw	r24, r28
    35f6:	01 96       	adiw	r24, 0x01	; 1
    35f8:	0e 94 32 2a 	call	0x5464	; 0x5464 <xTaskCheckForTimeOut>
    35fc:	81 11       	cpse	r24, r1
    35fe:	96 c0       	rjmp	.+300    	; 0x372c <xQueueGenericSend+0x2be>
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	0f 92       	push	r0
    3606:	f8 01       	movw	r30, r16
    3608:	92 8d       	ldd	r25, Z+26	; 0x1a
    360a:	83 8d       	ldd	r24, Z+27	; 0x1b
    360c:	0f 90       	pop	r0
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	98 13       	cpse	r25, r24
    3612:	4a c0       	rjmp	.+148    	; 0x36a8 <xQueueGenericSend+0x23a>
    3614:	6c 81       	ldd	r22, Y+4	; 0x04
    3616:	7d 81       	ldd	r23, Y+5	; 0x05
    3618:	c7 01       	movw	r24, r14
    361a:	0e 94 84 29 	call	0x5308	; 0x5308 <vTaskPlaceOnEventList>
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	0f 92       	push	r0
    3624:	f8 01       	movw	r30, r16
    3626:	86 8d       	ldd	r24, Z+30	; 0x1e
    3628:	18 16       	cp	r1, r24
    362a:	ac f4       	brge	.+42     	; 0x3656 <xQueueGenericSend+0x1e8>
    362c:	81 89       	ldd	r24, Z+17	; 0x11
    362e:	81 11       	cpse	r24, r1
    3630:	05 c0       	rjmp	.+10     	; 0x363c <xQueueGenericSend+0x1ce>
    3632:	11 c0       	rjmp	.+34     	; 0x3656 <xQueueGenericSend+0x1e8>
    3634:	f8 01       	movw	r30, r16
    3636:	81 89       	ldd	r24, Z+17	; 0x11
    3638:	88 23       	and	r24, r24
    363a:	69 f0       	breq	.+26     	; 0x3656 <xQueueGenericSend+0x1e8>
    363c:	c6 01       	movw	r24, r12
    363e:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3642:	81 11       	cpse	r24, r1
    3644:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3648:	f8 01       	movw	r30, r16
    364a:	86 8d       	ldd	r24, Z+30	; 0x1e
    364c:	81 50       	subi	r24, 0x01	; 1
    364e:	86 8f       	std	Z+30, r24	; 0x1e
    3650:	86 8d       	ldd	r24, Z+30	; 0x1e
    3652:	18 16       	cp	r1, r24
    3654:	7c f3       	brlt	.-34     	; 0x3634 <xQueueGenericSend+0x1c6>
    3656:	f8 01       	movw	r30, r16
    3658:	96 8e       	std	Z+30, r9	; 0x1e
    365a:	0f 90       	pop	r0
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	0f 92       	push	r0
    3664:	85 8d       	ldd	r24, Z+29	; 0x1d
    3666:	18 16       	cp	r1, r24
    3668:	ac f4       	brge	.+42     	; 0x3694 <xQueueGenericSend+0x226>
    366a:	80 85       	ldd	r24, Z+8	; 0x08
    366c:	81 11       	cpse	r24, r1
    366e:	05 c0       	rjmp	.+10     	; 0x367a <xQueueGenericSend+0x20c>
    3670:	11 c0       	rjmp	.+34     	; 0x3694 <xQueueGenericSend+0x226>
    3672:	f8 01       	movw	r30, r16
    3674:	80 85       	ldd	r24, Z+8	; 0x08
    3676:	88 23       	and	r24, r24
    3678:	69 f0       	breq	.+26     	; 0x3694 <xQueueGenericSend+0x226>
    367a:	c7 01       	movw	r24, r14
    367c:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3680:	81 11       	cpse	r24, r1
    3682:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3686:	f8 01       	movw	r30, r16
    3688:	85 8d       	ldd	r24, Z+29	; 0x1d
    368a:	81 50       	subi	r24, 0x01	; 1
    368c:	85 8f       	std	Z+29, r24	; 0x1d
    368e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3690:	18 16       	cp	r1, r24
    3692:	7c f3       	brlt	.-34     	; 0x3672 <xQueueGenericSend+0x204>
    3694:	f8 01       	movw	r30, r16
    3696:	95 8e       	std	Z+29, r9	; 0x1d
    3698:	0f 90       	pop	r0
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    36a0:	81 11       	cpse	r24, r1
    36a2:	0a cf       	rjmp	.-492    	; 0x34b8 <xQueueGenericSend+0x4a>
    36a4:	35 dc       	rcall	.-1942   	; 0x2f10 <vPortYield>
    36a6:	08 cf       	rjmp	.-496    	; 0x34b8 <xQueueGenericSend+0x4a>
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	0f 92       	push	r0
    36ae:	f8 01       	movw	r30, r16
    36b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    36b2:	18 16       	cp	r1, r24
    36b4:	ac f4       	brge	.+42     	; 0x36e0 <xQueueGenericSend+0x272>
    36b6:	81 89       	ldd	r24, Z+17	; 0x11
    36b8:	81 11       	cpse	r24, r1
    36ba:	05 c0       	rjmp	.+10     	; 0x36c6 <xQueueGenericSend+0x258>
    36bc:	11 c0       	rjmp	.+34     	; 0x36e0 <xQueueGenericSend+0x272>
    36be:	f8 01       	movw	r30, r16
    36c0:	81 89       	ldd	r24, Z+17	; 0x11
    36c2:	88 23       	and	r24, r24
    36c4:	69 f0       	breq	.+26     	; 0x36e0 <xQueueGenericSend+0x272>
    36c6:	c6 01       	movw	r24, r12
    36c8:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    36cc:	81 11       	cpse	r24, r1
    36ce:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    36d2:	f8 01       	movw	r30, r16
    36d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    36d6:	81 50       	subi	r24, 0x01	; 1
    36d8:	86 8f       	std	Z+30, r24	; 0x1e
    36da:	86 8d       	ldd	r24, Z+30	; 0x1e
    36dc:	18 16       	cp	r1, r24
    36de:	7c f3       	brlt	.-34     	; 0x36be <xQueueGenericSend+0x250>
    36e0:	f8 01       	movw	r30, r16
    36e2:	96 8e       	std	Z+30, r9	; 0x1e
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	0f 92       	push	r0
    36ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    36f0:	18 16       	cp	r1, r24
    36f2:	ac f4       	brge	.+42     	; 0x371e <xQueueGenericSend+0x2b0>
    36f4:	80 85       	ldd	r24, Z+8	; 0x08
    36f6:	81 11       	cpse	r24, r1
    36f8:	05 c0       	rjmp	.+10     	; 0x3704 <xQueueGenericSend+0x296>
    36fa:	11 c0       	rjmp	.+34     	; 0x371e <xQueueGenericSend+0x2b0>
    36fc:	f8 01       	movw	r30, r16
    36fe:	80 85       	ldd	r24, Z+8	; 0x08
    3700:	88 23       	and	r24, r24
    3702:	69 f0       	breq	.+26     	; 0x371e <xQueueGenericSend+0x2b0>
    3704:	c7 01       	movw	r24, r14
    3706:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    370a:	81 11       	cpse	r24, r1
    370c:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3710:	f8 01       	movw	r30, r16
    3712:	85 8d       	ldd	r24, Z+29	; 0x1d
    3714:	81 50       	subi	r24, 0x01	; 1
    3716:	85 8f       	std	Z+29, r24	; 0x1d
    3718:	85 8d       	ldd	r24, Z+29	; 0x1d
    371a:	18 16       	cp	r1, r24
    371c:	7c f3       	brlt	.-34     	; 0x36fc <xQueueGenericSend+0x28e>
    371e:	f8 01       	movw	r30, r16
    3720:	95 8e       	std	Z+29, r9	; 0x1d
    3722:	0f 90       	pop	r0
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    372a:	c6 ce       	rjmp	.-628    	; 0x34b8 <xQueueGenericSend+0x4a>
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	0f 92       	push	r0
    3732:	f8 01       	movw	r30, r16
    3734:	86 8d       	ldd	r24, Z+30	; 0x1e
    3736:	18 16       	cp	r1, r24
    3738:	d4 f4       	brge	.+52     	; 0x376e <xQueueGenericSend+0x300>
    373a:	81 89       	ldd	r24, Z+17	; 0x11
    373c:	81 11       	cpse	r24, r1
    373e:	06 c0       	rjmp	.+12     	; 0x374c <xQueueGenericSend+0x2de>
    3740:	16 c0       	rjmp	.+44     	; 0x376e <xQueueGenericSend+0x300>
    3742:	f8 01       	movw	r30, r16
    3744:	81 89       	ldd	r24, Z+17	; 0x11
    3746:	81 11       	cpse	r24, r1
    3748:	05 c0       	rjmp	.+10     	; 0x3754 <xQueueGenericSend+0x2e6>
    374a:	11 c0       	rjmp	.+34     	; 0x376e <xQueueGenericSend+0x300>
    374c:	78 01       	movw	r14, r16
    374e:	f1 e1       	ldi	r31, 0x11	; 17
    3750:	ef 0e       	add	r14, r31
    3752:	f1 1c       	adc	r15, r1
    3754:	c7 01       	movw	r24, r14
    3756:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    375a:	81 11       	cpse	r24, r1
    375c:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3760:	f8 01       	movw	r30, r16
    3762:	86 8d       	ldd	r24, Z+30	; 0x1e
    3764:	81 50       	subi	r24, 0x01	; 1
    3766:	86 8f       	std	Z+30, r24	; 0x1e
    3768:	86 8d       	ldd	r24, Z+30	; 0x1e
    376a:	18 16       	cp	r1, r24
    376c:	54 f3       	brlt	.-44     	; 0x3742 <xQueueGenericSend+0x2d4>
    376e:	8f ef       	ldi	r24, 0xFF	; 255
    3770:	f8 01       	movw	r30, r16
    3772:	86 8f       	std	Z+30, r24	; 0x1e
    3774:	0f 90       	pop	r0
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	0f 92       	push	r0
    377e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3780:	18 16       	cp	r1, r24
    3782:	d4 f4       	brge	.+52     	; 0x37b8 <xQueueGenericSend+0x34a>
    3784:	80 85       	ldd	r24, Z+8	; 0x08
    3786:	81 11       	cpse	r24, r1
    3788:	06 c0       	rjmp	.+12     	; 0x3796 <xQueueGenericSend+0x328>
    378a:	16 c0       	rjmp	.+44     	; 0x37b8 <xQueueGenericSend+0x34a>
    378c:	f8 01       	movw	r30, r16
    378e:	80 85       	ldd	r24, Z+8	; 0x08
    3790:	81 11       	cpse	r24, r1
    3792:	05 c0       	rjmp	.+10     	; 0x379e <xQueueGenericSend+0x330>
    3794:	11 c0       	rjmp	.+34     	; 0x37b8 <xQueueGenericSend+0x34a>
    3796:	78 01       	movw	r14, r16
    3798:	f8 e0       	ldi	r31, 0x08	; 8
    379a:	ef 0e       	add	r14, r31
    379c:	f1 1c       	adc	r15, r1
    379e:	c7 01       	movw	r24, r14
    37a0:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    37a4:	81 11       	cpse	r24, r1
    37a6:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    37aa:	f8 01       	movw	r30, r16
    37ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    37ae:	81 50       	subi	r24, 0x01	; 1
    37b0:	85 8f       	std	Z+29, r24	; 0x1d
    37b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    37b4:	18 16       	cp	r1, r24
    37b6:	54 f3       	brlt	.-44     	; 0x378c <xQueueGenericSend+0x31e>
    37b8:	8f ef       	ldi	r24, 0xFF	; 255
    37ba:	f8 01       	movw	r30, r16
    37bc:	85 8f       	std	Z+29, r24	; 0x1d
    37be:	0f 90       	pop	r0
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	0e c0       	rjmp	.+28     	; 0x37e6 <xQueueGenericSend+0x378>
    37ca:	f8 01       	movw	r30, r16
    37cc:	44 8d       	ldd	r20, Z+28	; 0x1c
    37ce:	44 23       	and	r20, r20
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <xQueueGenericSend+0x366>
    37d2:	82 ce       	rjmp	.-764    	; 0x34d8 <xQueueGenericSend+0x6a>
    37d4:	b2 ce       	rjmp	.-668    	; 0x353a <xQueueGenericSend+0xcc>
    37d6:	f8 01       	movw	r30, r16
    37d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	82 8f       	std	Z+26, r24	; 0x1a
    37de:	81 89       	ldd	r24, Z+17	; 0x11
    37e0:	81 11       	cpse	r24, r1
    37e2:	d5 ce       	rjmp	.-598    	; 0x358e <xQueueGenericSend+0x120>
    37e4:	de ce       	rjmp	.-580    	; 0x35a2 <xQueueGenericSend+0x134>
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	ff 90       	pop	r15
    37fa:	ef 90       	pop	r14
    37fc:	df 90       	pop	r13
    37fe:	cf 90       	pop	r12
    3800:	bf 90       	pop	r11
    3802:	af 90       	pop	r10
    3804:	9f 90       	pop	r9
    3806:	8f 90       	pop	r8
    3808:	7f 90       	pop	r7
    380a:	6f 90       	pop	r6
    380c:	08 95       	ret

0000380e <xQueueGive>:
    380e:	9f 92       	push	r9
    3810:	af 92       	push	r10
    3812:	bf 92       	push	r11
    3814:	cf 92       	push	r12
    3816:	df 92       	push	r13
    3818:	ef 92       	push	r14
    381a:	ff 92       	push	r15
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	00 d0       	rcall	.+0      	; 0x3826 <xQueueGive+0x18>
    3826:	1f 92       	push	r1
    3828:	1f 92       	push	r1
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	8c 01       	movw	r16, r24
    3830:	7d 83       	std	Y+5, r23	; 0x05
    3832:	6c 83       	std	Y+4, r22	; 0x04
    3834:	a1 2c       	mov	r10, r1
    3836:	99 24       	eor	r9, r9
    3838:	93 94       	inc	r9
    383a:	bb 24       	eor	r11, r11
    383c:	ba 94       	dec	r11
    383e:	7c 01       	movw	r14, r24
    3840:	88 e0       	ldi	r24, 0x08	; 8
    3842:	e8 0e       	add	r14, r24
    3844:	f1 1c       	adc	r15, r1
    3846:	68 01       	movw	r12, r16
    3848:	e1 e1       	ldi	r30, 0x11	; 17
    384a:	ce 0e       	add	r12, r30
    384c:	d1 1c       	adc	r13, r1
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	0f 92       	push	r0
    3854:	f8 01       	movw	r30, r16
    3856:	92 8d       	ldd	r25, Z+26	; 0x1a
    3858:	83 8d       	ldd	r24, Z+27	; 0x1b
    385a:	98 17       	cp	r25, r24
    385c:	00 f5       	brcc	.+64     	; 0x389e <xQueueGive+0x90>
    385e:	80 81       	ld	r24, Z
    3860:	91 81       	ldd	r25, Z+1	; 0x01
    3862:	89 2b       	or	r24, r25
    3864:	09 f0       	breq	.+2      	; 0x3868 <xQueueGive+0x5a>
    3866:	2b c1       	rjmp	.+598    	; 0x3abe <xQueueGive+0x2b0>
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <xTaskPriorityDisinherit>
    3870:	f8 01       	movw	r30, r16
    3872:	13 82       	std	Z+3, r1	; 0x03
    3874:	12 82       	std	Z+2, r1	; 0x02
    3876:	92 8d       	ldd	r25, Z+26	; 0x1a
    3878:	9f 5f       	subi	r25, 0xFF	; 255
    387a:	92 8f       	std	Z+26, r25	; 0x1a
    387c:	91 89       	ldd	r25, Z+17	; 0x11
    387e:	99 23       	and	r25, r25
    3880:	41 f0       	breq	.+16     	; 0x3892 <xQueueGive+0x84>
    3882:	c8 01       	movw	r24, r16
    3884:	41 96       	adiw	r24, 0x11	; 17
    3886:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    388a:	81 30       	cpi	r24, 0x01	; 1
    388c:	21 f4       	brne	.+8      	; 0x3896 <xQueueGive+0x88>
    388e:	40 db       	rcall	.-2432   	; 0x2f10 <vPortYield>
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <xQueueGive+0x88>
    3892:	81 11       	cpse	r24, r1
    3894:	3d db       	rcall	.-2438   	; 0x2f10 <vPortYield>
    3896:	0f 90       	pop	r0
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	18 c1       	rjmp	.+560    	; 0x3ace <xQueueGive+0x2c0>
    389e:	8c 81       	ldd	r24, Y+4	; 0x04
    38a0:	9d 81       	ldd	r25, Y+5	; 0x05
    38a2:	89 2b       	or	r24, r25
    38a4:	21 f4       	brne	.+8      	; 0x38ae <xQueueGive+0xa0>
    38a6:	0f 90       	pop	r0
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	10 c1       	rjmp	.+544    	; 0x3ace <xQueueGive+0x2c0>
    38ae:	a1 10       	cpse	r10, r1
    38b0:	05 c0       	rjmp	.+10     	; 0x38bc <xQueueGive+0xae>
    38b2:	ce 01       	movw	r24, r28
    38b4:	01 96       	adiw	r24, 0x01	; 1
    38b6:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSetTimeOutState>
    38ba:	a9 2c       	mov	r10, r9
    38bc:	0f 90       	pop	r0
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	0f 92       	push	r0
    38ca:	f8 01       	movw	r30, r16
    38cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    38ce:	8f 3f       	cpi	r24, 0xFF	; 255
    38d0:	09 f4       	brne	.+2      	; 0x38d4 <xQueueGive+0xc6>
    38d2:	15 8e       	std	Z+29, r1	; 0x1d
    38d4:	f8 01       	movw	r30, r16
    38d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    38d8:	8f 3f       	cpi	r24, 0xFF	; 255
    38da:	09 f4       	brne	.+2      	; 0x38de <xQueueGive+0xd0>
    38dc:	16 8e       	std	Z+30, r1	; 0x1e
    38de:	0f 90       	pop	r0
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	be 01       	movw	r22, r28
    38e4:	6c 5f       	subi	r22, 0xFC	; 252
    38e6:	7f 4f       	sbci	r23, 0xFF	; 255
    38e8:	ce 01       	movw	r24, r28
    38ea:	01 96       	adiw	r24, 0x01	; 1
    38ec:	0e 94 32 2a 	call	0x5464	; 0x5464 <xTaskCheckForTimeOut>
    38f0:	81 11       	cpse	r24, r1
    38f2:	96 c0       	rjmp	.+300    	; 0x3a20 <xQueueGive+0x212>
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	0f 92       	push	r0
    38fa:	f8 01       	movw	r30, r16
    38fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    38fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    3900:	0f 90       	pop	r0
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	98 13       	cpse	r25, r24
    3906:	4a c0       	rjmp	.+148    	; 0x399c <xQueueGive+0x18e>
    3908:	6c 81       	ldd	r22, Y+4	; 0x04
    390a:	7d 81       	ldd	r23, Y+5	; 0x05
    390c:	c7 01       	movw	r24, r14
    390e:	0e 94 84 29 	call	0x5308	; 0x5308 <vTaskPlaceOnEventList>
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	0f 92       	push	r0
    3918:	f8 01       	movw	r30, r16
    391a:	86 8d       	ldd	r24, Z+30	; 0x1e
    391c:	18 16       	cp	r1, r24
    391e:	ac f4       	brge	.+42     	; 0x394a <xQueueGive+0x13c>
    3920:	81 89       	ldd	r24, Z+17	; 0x11
    3922:	81 11       	cpse	r24, r1
    3924:	05 c0       	rjmp	.+10     	; 0x3930 <xQueueGive+0x122>
    3926:	11 c0       	rjmp	.+34     	; 0x394a <xQueueGive+0x13c>
    3928:	f8 01       	movw	r30, r16
    392a:	81 89       	ldd	r24, Z+17	; 0x11
    392c:	88 23       	and	r24, r24
    392e:	69 f0       	breq	.+26     	; 0x394a <xQueueGive+0x13c>
    3930:	c6 01       	movw	r24, r12
    3932:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3936:	81 11       	cpse	r24, r1
    3938:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    393c:	f8 01       	movw	r30, r16
    393e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3940:	81 50       	subi	r24, 0x01	; 1
    3942:	86 8f       	std	Z+30, r24	; 0x1e
    3944:	86 8d       	ldd	r24, Z+30	; 0x1e
    3946:	18 16       	cp	r1, r24
    3948:	7c f3       	brlt	.-34     	; 0x3928 <xQueueGive+0x11a>
    394a:	f8 01       	movw	r30, r16
    394c:	b6 8e       	std	Z+30, r11	; 0x1e
    394e:	0f 90       	pop	r0
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	0f b6       	in	r0, 0x3f	; 63
    3954:	f8 94       	cli
    3956:	0f 92       	push	r0
    3958:	85 8d       	ldd	r24, Z+29	; 0x1d
    395a:	18 16       	cp	r1, r24
    395c:	ac f4       	brge	.+42     	; 0x3988 <xQueueGive+0x17a>
    395e:	80 85       	ldd	r24, Z+8	; 0x08
    3960:	81 11       	cpse	r24, r1
    3962:	05 c0       	rjmp	.+10     	; 0x396e <xQueueGive+0x160>
    3964:	11 c0       	rjmp	.+34     	; 0x3988 <xQueueGive+0x17a>
    3966:	f8 01       	movw	r30, r16
    3968:	80 85       	ldd	r24, Z+8	; 0x08
    396a:	88 23       	and	r24, r24
    396c:	69 f0       	breq	.+26     	; 0x3988 <xQueueGive+0x17a>
    396e:	c7 01       	movw	r24, r14
    3970:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3974:	81 11       	cpse	r24, r1
    3976:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    397a:	f8 01       	movw	r30, r16
    397c:	85 8d       	ldd	r24, Z+29	; 0x1d
    397e:	81 50       	subi	r24, 0x01	; 1
    3980:	85 8f       	std	Z+29, r24	; 0x1d
    3982:	85 8d       	ldd	r24, Z+29	; 0x1d
    3984:	18 16       	cp	r1, r24
    3986:	7c f3       	brlt	.-34     	; 0x3966 <xQueueGive+0x158>
    3988:	f8 01       	movw	r30, r16
    398a:	b5 8e       	std	Z+29, r11	; 0x1d
    398c:	0f 90       	pop	r0
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3994:	81 11       	cpse	r24, r1
    3996:	5b cf       	rjmp	.-330    	; 0x384e <xQueueGive+0x40>
    3998:	bb da       	rcall	.-2698   	; 0x2f10 <vPortYield>
    399a:	59 cf       	rjmp	.-334    	; 0x384e <xQueueGive+0x40>
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	0f 92       	push	r0
    39a2:	f8 01       	movw	r30, r16
    39a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    39a6:	18 16       	cp	r1, r24
    39a8:	ac f4       	brge	.+42     	; 0x39d4 <xQueueGive+0x1c6>
    39aa:	81 89       	ldd	r24, Z+17	; 0x11
    39ac:	81 11       	cpse	r24, r1
    39ae:	05 c0       	rjmp	.+10     	; 0x39ba <xQueueGive+0x1ac>
    39b0:	11 c0       	rjmp	.+34     	; 0x39d4 <xQueueGive+0x1c6>
    39b2:	f8 01       	movw	r30, r16
    39b4:	81 89       	ldd	r24, Z+17	; 0x11
    39b6:	88 23       	and	r24, r24
    39b8:	69 f0       	breq	.+26     	; 0x39d4 <xQueueGive+0x1c6>
    39ba:	c6 01       	movw	r24, r12
    39bc:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    39c0:	81 11       	cpse	r24, r1
    39c2:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    39c6:	f8 01       	movw	r30, r16
    39c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    39ca:	81 50       	subi	r24, 0x01	; 1
    39cc:	86 8f       	std	Z+30, r24	; 0x1e
    39ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    39d0:	18 16       	cp	r1, r24
    39d2:	7c f3       	brlt	.-34     	; 0x39b2 <xQueueGive+0x1a4>
    39d4:	f8 01       	movw	r30, r16
    39d6:	b6 8e       	std	Z+30, r11	; 0x1e
    39d8:	0f 90       	pop	r0
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	0f 92       	push	r0
    39e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    39e4:	18 16       	cp	r1, r24
    39e6:	ac f4       	brge	.+42     	; 0x3a12 <xQueueGive+0x204>
    39e8:	80 85       	ldd	r24, Z+8	; 0x08
    39ea:	81 11       	cpse	r24, r1
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <xQueueGive+0x1ea>
    39ee:	11 c0       	rjmp	.+34     	; 0x3a12 <xQueueGive+0x204>
    39f0:	f8 01       	movw	r30, r16
    39f2:	80 85       	ldd	r24, Z+8	; 0x08
    39f4:	88 23       	and	r24, r24
    39f6:	69 f0       	breq	.+26     	; 0x3a12 <xQueueGive+0x204>
    39f8:	c7 01       	movw	r24, r14
    39fa:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    39fe:	81 11       	cpse	r24, r1
    3a00:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3a04:	f8 01       	movw	r30, r16
    3a06:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a08:	81 50       	subi	r24, 0x01	; 1
    3a0a:	85 8f       	std	Z+29, r24	; 0x1d
    3a0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a0e:	18 16       	cp	r1, r24
    3a10:	7c f3       	brlt	.-34     	; 0x39f0 <xQueueGive+0x1e2>
    3a12:	f8 01       	movw	r30, r16
    3a14:	b5 8e       	std	Z+29, r11	; 0x1d
    3a16:	0f 90       	pop	r0
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3a1e:	17 cf       	rjmp	.-466    	; 0x384e <xQueueGive+0x40>
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	0f 92       	push	r0
    3a26:	f8 01       	movw	r30, r16
    3a28:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a2a:	18 16       	cp	r1, r24
    3a2c:	d4 f4       	brge	.+52     	; 0x3a62 <xQueueGive+0x254>
    3a2e:	81 89       	ldd	r24, Z+17	; 0x11
    3a30:	81 11       	cpse	r24, r1
    3a32:	06 c0       	rjmp	.+12     	; 0x3a40 <xQueueGive+0x232>
    3a34:	16 c0       	rjmp	.+44     	; 0x3a62 <xQueueGive+0x254>
    3a36:	f8 01       	movw	r30, r16
    3a38:	81 89       	ldd	r24, Z+17	; 0x11
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	05 c0       	rjmp	.+10     	; 0x3a48 <xQueueGive+0x23a>
    3a3e:	11 c0       	rjmp	.+34     	; 0x3a62 <xQueueGive+0x254>
    3a40:	78 01       	movw	r14, r16
    3a42:	f1 e1       	ldi	r31, 0x11	; 17
    3a44:	ef 0e       	add	r14, r31
    3a46:	f1 1c       	adc	r15, r1
    3a48:	c7 01       	movw	r24, r14
    3a4a:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3a4e:	81 11       	cpse	r24, r1
    3a50:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3a54:	f8 01       	movw	r30, r16
    3a56:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a58:	81 50       	subi	r24, 0x01	; 1
    3a5a:	86 8f       	std	Z+30, r24	; 0x1e
    3a5c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a5e:	18 16       	cp	r1, r24
    3a60:	54 f3       	brlt	.-44     	; 0x3a36 <xQueueGive+0x228>
    3a62:	8f ef       	ldi	r24, 0xFF	; 255
    3a64:	f8 01       	movw	r30, r16
    3a66:	86 8f       	std	Z+30, r24	; 0x1e
    3a68:	0f 90       	pop	r0
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	0f 92       	push	r0
    3a72:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a74:	18 16       	cp	r1, r24
    3a76:	d4 f4       	brge	.+52     	; 0x3aac <xQueueGive+0x29e>
    3a78:	80 85       	ldd	r24, Z+8	; 0x08
    3a7a:	81 11       	cpse	r24, r1
    3a7c:	06 c0       	rjmp	.+12     	; 0x3a8a <xQueueGive+0x27c>
    3a7e:	16 c0       	rjmp	.+44     	; 0x3aac <xQueueGive+0x29e>
    3a80:	f8 01       	movw	r30, r16
    3a82:	80 85       	ldd	r24, Z+8	; 0x08
    3a84:	81 11       	cpse	r24, r1
    3a86:	05 c0       	rjmp	.+10     	; 0x3a92 <xQueueGive+0x284>
    3a88:	11 c0       	rjmp	.+34     	; 0x3aac <xQueueGive+0x29e>
    3a8a:	78 01       	movw	r14, r16
    3a8c:	f8 e0       	ldi	r31, 0x08	; 8
    3a8e:	ef 0e       	add	r14, r31
    3a90:	f1 1c       	adc	r15, r1
    3a92:	c7 01       	movw	r24, r14
    3a94:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3a98:	81 11       	cpse	r24, r1
    3a9a:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	85 8d       	ldd	r24, Z+29	; 0x1d
    3aa2:	81 50       	subi	r24, 0x01	; 1
    3aa4:	85 8f       	std	Z+29, r24	; 0x1d
    3aa6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3aa8:	18 16       	cp	r1, r24
    3aaa:	54 f3       	brlt	.-44     	; 0x3a80 <xQueueGive+0x272>
    3aac:	8f ef       	ldi	r24, 0xFF	; 255
    3aae:	f8 01       	movw	r30, r16
    3ab0:	85 8f       	std	Z+29, r24	; 0x1d
    3ab2:	0f 90       	pop	r0
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	08 c0       	rjmp	.+16     	; 0x3ace <xQueueGive+0x2c0>
    3abe:	f8 01       	movw	r30, r16
    3ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ac2:	8f 5f       	subi	r24, 0xFF	; 255
    3ac4:	82 8f       	std	Z+26, r24	; 0x1a
    3ac6:	81 89       	ldd	r24, Z+17	; 0x11
    3ac8:	81 11       	cpse	r24, r1
    3aca:	db ce       	rjmp	.-586    	; 0x3882 <xQueueGive+0x74>
    3acc:	e4 ce       	rjmp	.-568    	; 0x3896 <xQueueGive+0x88>
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	bf 90       	pop	r11
    3aea:	af 90       	pop	r10
    3aec:	9f 90       	pop	r9
    3aee:	08 95       	ret

00003af0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3af6:	92 8d       	ldd	r25, Z+26	; 0x1a
    3af8:	83 8d       	ldd	r24, Z+27	; 0x1b
    3afa:	98 17       	cp	r25, r24
    3afc:	d0 f4       	brcc	.+52     	; 0x3b32 <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b00:	8f 5f       	subi	r24, 0xFF	; 255
    3b02:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3b04:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b06:	8f 3f       	cpi	r24, 0xFF	; 255
    3b08:	79 f4       	brne	.+30     	; 0x3b28 <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3b0a:	81 89       	ldd	r24, Z+17	; 0x11
    3b0c:	88 23       	and	r24, r24
    3b0e:	99 f0       	breq	.+38     	; 0x3b36 <xQueueGiveFromISR+0x46>
    3b10:	eb 01       	movw	r28, r22
    3b12:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b14:	41 96       	adiw	r24, 0x11	; 17
    3b16:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3b1a:	88 23       	and	r24, r24
    3b1c:	71 f0       	breq	.+28     	; 0x3b3a <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3b1e:	20 97       	sbiw	r28, 0x00	; 0
    3b20:	71 f0       	breq	.+28     	; 0x3b3e <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	88 83       	st	Y, r24
    3b26:	0c c0       	rjmp	.+24     	; 0x3b40 <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3b28:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b2a:	8f 5f       	subi	r24, 0xFF	; 255
    3b2c:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	07 c0       	rjmp	.+14     	; 0x3b40 <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	05 c0       	rjmp	.+10     	; 0x3b40 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	03 c0       	rjmp	.+6      	; 0x3b40 <xQueueGiveFromISR+0x50>
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <xQueueGiveFromISR+0x50>
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	08 95       	ret

00003b46 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3b46:	6f 92       	push	r6
    3b48:	7f 92       	push	r7
    3b4a:	8f 92       	push	r8
    3b4c:	9f 92       	push	r9
    3b4e:	af 92       	push	r10
    3b50:	bf 92       	push	r11
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <xQueueGenericReceive+0x1e>
    3b64:	1f 92       	push	r1
    3b66:	1f 92       	push	r1
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	5b 01       	movw	r10, r22
    3b70:	5d 83       	std	Y+5, r21	; 0x05
    3b72:	4c 83       	std	Y+4, r20	; 0x04
    3b74:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3b76:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3b78:	77 24       	eor	r7, r7
    3b7a:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3b7c:	99 24       	eor	r9, r9
    3b7e:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3b80:	6c 01       	movw	r12, r24
    3b82:	88 e0       	ldi	r24, 0x08	; 8
    3b84:	c8 0e       	add	r12, r24
    3b86:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b88:	78 01       	movw	r14, r16
    3b8a:	e1 e1       	ldi	r30, 0x11	; 17
    3b8c:	ee 0e       	add	r14, r30
    3b8e:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3b96:	f8 01       	movw	r30, r16
    3b98:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b9a:	88 23       	and	r24, r24
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <xQueueGenericReceive+0x5a>
    3b9e:	45 c0       	rjmp	.+138    	; 0x3c2a <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3ba0:	e6 80       	ldd	r14, Z+6	; 0x06
    3ba2:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3ba4:	44 8d       	ldd	r20, Z+28	; 0x1c
    3ba6:	44 23       	and	r20, r20
    3ba8:	a9 f0       	breq	.+42     	; 0x3bd4 <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3baa:	50 e0       	ldi	r21, 0x00	; 0
    3bac:	c7 01       	movw	r24, r14
    3bae:	84 0f       	add	r24, r20
    3bb0:	95 1f       	adc	r25, r21
    3bb2:	97 83       	std	Z+7, r25	; 0x07
    3bb4:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3bb6:	22 81       	ldd	r18, Z+2	; 0x02
    3bb8:	33 81       	ldd	r19, Z+3	; 0x03
    3bba:	82 17       	cp	r24, r18
    3bbc:	93 07       	cpc	r25, r19
    3bbe:	20 f0       	brcs	.+8      	; 0x3bc8 <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	97 83       	std	Z+7, r25	; 0x07
    3bc6:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3bc8:	f8 01       	movw	r30, r16
    3bca:	66 81       	ldd	r22, Z+6	; 0x06
    3bcc:	77 81       	ldd	r23, Z+7	; 0x07
    3bce:	c5 01       	movw	r24, r10
    3bd0:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3bd4:	61 10       	cpse	r6, r1
    3bd6:	19 c0       	rjmp	.+50     	; 0x3c0a <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3bd8:	f8 01       	movw	r30, r16
    3bda:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bdc:	81 50       	subi	r24, 0x01	; 1
    3bde:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	89 2b       	or	r24, r25
    3be6:	29 f4       	brne	.+10     	; 0x3bf2 <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3be8:	0e 94 18 2b 	call	0x5630	; 0x5630 <pvTaskIncrementMutexHeldCount>
    3bec:	f8 01       	movw	r30, r16
    3bee:	93 83       	std	Z+3, r25	; 0x03
    3bf0:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	80 85       	ldd	r24, Z+8	; 0x08
    3bf6:	88 23       	and	r24, r24
    3bf8:	a1 f0       	breq	.+40     	; 0x3c22 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3bfa:	c8 01       	movw	r24, r16
    3bfc:	08 96       	adiw	r24, 0x08	; 8
    3bfe:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3c02:	81 30       	cpi	r24, 0x01	; 1
    3c04:	71 f4       	brne	.+28     	; 0x3c22 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3c06:	84 d9       	rcall	.-3320   	; 0x2f10 <vPortYield>
    3c08:	0c c0       	rjmp	.+24     	; 0x3c22 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3c0a:	f8 01       	movw	r30, r16
    3c0c:	f7 82       	std	Z+7, r15	; 0x07
    3c0e:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c10:	81 89       	ldd	r24, Z+17	; 0x11
    3c12:	88 23       	and	r24, r24
    3c14:	31 f0       	breq	.+12     	; 0x3c22 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c16:	c8 01       	movw	r24, r16
    3c18:	41 96       	adiw	r24, 0x11	; 17
    3c1a:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3c1e:	81 11       	cpse	r24, r1
    3c20:	77 d9       	rcall	.-3346   	; 0x2f10 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	1a c1       	rjmp	.+564    	; 0x3e5e <xQueueGenericReceive+0x318>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c2e:	89 2b       	or	r24, r25
    3c30:	21 f4       	brne	.+8      	; 0x3c3a <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3c32:	0f 90       	pop	r0
    3c34:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	12 c1       	rjmp	.+548    	; 0x3e5e <xQueueGenericReceive+0x318>
				}
				else if( xEntryTimeSet == pdFALSE )
    3c3a:	81 10       	cpse	r8, r1
    3c3c:	05 c0       	rjmp	.+10     	; 0x3c48 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3c3e:	ce 01       	movw	r24, r28
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	0e 94 27 2a 	call	0x544e	; 0x544e <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3c46:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3c48:	0f 90       	pop	r0
    3c4a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3c4c:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	0f 92       	push	r0
    3c56:	f8 01       	movw	r30, r16
    3c58:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c5a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <xQueueGenericReceive+0x11a>
    3c5e:	15 8e       	std	Z+29, r1	; 0x1d
    3c60:	f8 01       	movw	r30, r16
    3c62:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c64:	8f 3f       	cpi	r24, 0xFF	; 255
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <xQueueGenericReceive+0x124>
    3c68:	16 8e       	std	Z+30, r1	; 0x1e
    3c6a:	0f 90       	pop	r0
    3c6c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c6e:	be 01       	movw	r22, r28
    3c70:	6c 5f       	subi	r22, 0xFC	; 252
    3c72:	7f 4f       	sbci	r23, 0xFF	; 255
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	0e 94 32 2a 	call	0x5464	; 0x5464 <xTaskCheckForTimeOut>
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	a2 c0       	rjmp	.+324    	; 0x3dc4 <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3c86:	f8 01       	movw	r30, r16
    3c88:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3c8a:	0f 90       	pop	r0
    3c8c:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3c8e:	81 11       	cpse	r24, r1
    3c90:	57 c0       	rjmp	.+174    	; 0x3d40 <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	89 2b       	or	r24, r25
    3c98:	49 f4       	brne	.+18     	; 0x3cac <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3ca8:	0f 90       	pop	r0
    3caa:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3cac:	6c 81       	ldd	r22, Y+4	; 0x04
    3cae:	7d 81       	ldd	r23, Y+5	; 0x05
    3cb0:	c7 01       	movw	r24, r14
    3cb2:	0e 94 84 29 	call	0x5308	; 0x5308 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cc0:	18 16       	cp	r1, r24
    3cc2:	ac f4       	brge	.+42     	; 0x3cee <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3cc4:	81 89       	ldd	r24, Z+17	; 0x11
    3cc6:	81 11       	cpse	r24, r1
    3cc8:	05 c0       	rjmp	.+10     	; 0x3cd4 <xQueueGenericReceive+0x18e>
    3cca:	11 c0       	rjmp	.+34     	; 0x3cee <xQueueGenericReceive+0x1a8>
    3ccc:	f8 01       	movw	r30, r16
    3cce:	81 89       	ldd	r24, Z+17	; 0x11
    3cd0:	88 23       	and	r24, r24
    3cd2:	69 f0       	breq	.+26     	; 0x3cee <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cd4:	c7 01       	movw	r24, r14
    3cd6:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3cda:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3cdc:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ce0:	f8 01       	movw	r30, r16
    3ce2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ce4:	81 50       	subi	r24, 0x01	; 1
    3ce6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ce8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cea:	18 16       	cp	r1, r24
    3cec:	7c f3       	brlt	.-34     	; 0x3ccc <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3cee:	f8 01       	movw	r30, r16
    3cf0:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3cf2:	0f 90       	pop	r0
    3cf4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3cfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cfe:	18 16       	cp	r1, r24
    3d00:	ac f4       	brge	.+42     	; 0x3d2c <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d02:	80 85       	ldd	r24, Z+8	; 0x08
    3d04:	81 11       	cpse	r24, r1
    3d06:	05 c0       	rjmp	.+10     	; 0x3d12 <xQueueGenericReceive+0x1cc>
    3d08:	11 c0       	rjmp	.+34     	; 0x3d2c <xQueueGenericReceive+0x1e6>
    3d0a:	f8 01       	movw	r30, r16
    3d0c:	80 85       	ldd	r24, Z+8	; 0x08
    3d0e:	88 23       	and	r24, r24
    3d10:	69 f0       	breq	.+26     	; 0x3d2c <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d12:	c6 01       	movw	r24, r12
    3d14:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3d18:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3d1a:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3d1e:	f8 01       	movw	r30, r16
    3d20:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d22:	81 50       	subi	r24, 0x01	; 1
    3d24:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d26:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d28:	18 16       	cp	r1, r24
    3d2a:	7c f3       	brlt	.-34     	; 0x3d0a <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d2c:	f8 01       	movw	r30, r16
    3d2e:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d30:	0f 90       	pop	r0
    3d32:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3d34:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3d38:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3d3a:	2a cf       	rjmp	.-428    	; 0x3b90 <xQueueGenericReceive+0x4a>
    3d3c:	e9 d8       	rcall	.-3630   	; 0x2f10 <vPortYield>
    3d3e:	28 cf       	rjmp	.-432    	; 0x3b90 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d46:	f8 01       	movw	r30, r16
    3d48:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d4a:	18 16       	cp	r1, r24
    3d4c:	ac f4       	brge	.+42     	; 0x3d78 <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d4e:	81 89       	ldd	r24, Z+17	; 0x11
    3d50:	81 11       	cpse	r24, r1
    3d52:	05 c0       	rjmp	.+10     	; 0x3d5e <xQueueGenericReceive+0x218>
    3d54:	11 c0       	rjmp	.+34     	; 0x3d78 <xQueueGenericReceive+0x232>
    3d56:	f8 01       	movw	r30, r16
    3d58:	81 89       	ldd	r24, Z+17	; 0x11
    3d5a:	88 23       	and	r24, r24
    3d5c:	69 f0       	breq	.+26     	; 0x3d78 <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d5e:	c7 01       	movw	r24, r14
    3d60:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3d64:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3d66:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d6e:	81 50       	subi	r24, 0x01	; 1
    3d70:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d72:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d74:	18 16       	cp	r1, r24
    3d76:	7c f3       	brlt	.-34     	; 0x3d56 <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d78:	f8 01       	movw	r30, r16
    3d7a:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3d7c:	0f 90       	pop	r0
    3d7e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d86:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d88:	18 16       	cp	r1, r24
    3d8a:	ac f4       	brge	.+42     	; 0x3db6 <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d8c:	80 85       	ldd	r24, Z+8	; 0x08
    3d8e:	81 11       	cpse	r24, r1
    3d90:	05 c0       	rjmp	.+10     	; 0x3d9c <xQueueGenericReceive+0x256>
    3d92:	11 c0       	rjmp	.+34     	; 0x3db6 <xQueueGenericReceive+0x270>
    3d94:	f8 01       	movw	r30, r16
    3d96:	80 85       	ldd	r24, Z+8	; 0x08
    3d98:	88 23       	and	r24, r24
    3d9a:	69 f0       	breq	.+26     	; 0x3db6 <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d9c:	c6 01       	movw	r24, r12
    3d9e:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3da2:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3da4:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3da8:	f8 01       	movw	r30, r16
    3daa:	85 8d       	ldd	r24, Z+29	; 0x1d
    3dac:	81 50       	subi	r24, 0x01	; 1
    3dae:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3db0:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db2:	18 16       	cp	r1, r24
    3db4:	7c f3       	brlt	.-34     	; 0x3d94 <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3db6:	f8 01       	movw	r30, r16
    3db8:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3dba:	0f 90       	pop	r0
    3dbc:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3dbe:	0e 94 f6 26 	call	0x4dec	; 0x4dec <xTaskResumeAll>
    3dc2:	e6 ce       	rjmp	.-564    	; 0x3b90 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3dc4:	0f b6       	in	r0, 0x3f	; 63
    3dc6:	f8 94       	cli
    3dc8:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3dca:	f8 01       	movw	r30, r16
    3dcc:	86 8d       	ldd	r24, Z+30	; 0x1e
    3dce:	18 16       	cp	r1, r24
    3dd0:	d4 f4       	brge	.+52     	; 0x3e06 <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3dd2:	81 89       	ldd	r24, Z+17	; 0x11
    3dd4:	81 11       	cpse	r24, r1
    3dd6:	06 c0       	rjmp	.+12     	; 0x3de4 <xQueueGenericReceive+0x29e>
    3dd8:	16 c0       	rjmp	.+44     	; 0x3e06 <xQueueGenericReceive+0x2c0>
    3dda:	f8 01       	movw	r30, r16
    3ddc:	81 89       	ldd	r24, Z+17	; 0x11
    3dde:	81 11       	cpse	r24, r1
    3de0:	05 c0       	rjmp	.+10     	; 0x3dec <xQueueGenericReceive+0x2a6>
    3de2:	11 c0       	rjmp	.+34     	; 0x3e06 <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3de4:	78 01       	movw	r14, r16
    3de6:	f1 e1       	ldi	r31, 0x11	; 17
    3de8:	ef 0e       	add	r14, r31
    3dea:	f1 1c       	adc	r15, r1
    3dec:	c7 01       	movw	r24, r14
    3dee:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3df2:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3df4:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3df8:	f8 01       	movw	r30, r16
    3dfa:	86 8d       	ldd	r24, Z+30	; 0x1e
    3dfc:	81 50       	subi	r24, 0x01	; 1
    3dfe:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3e00:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e02:	18 16       	cp	r1, r24
    3e04:	54 f3       	brlt	.-44     	; 0x3dda <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3e06:	8f ef       	ldi	r24, 0xFF	; 255
    3e08:	f8 01       	movw	r30, r16
    3e0a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3e0c:	0f 90       	pop	r0
    3e0e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3e16:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e18:	18 16       	cp	r1, r24
    3e1a:	d4 f4       	brge	.+52     	; 0x3e50 <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3e1c:	80 85       	ldd	r24, Z+8	; 0x08
    3e1e:	81 11       	cpse	r24, r1
    3e20:	06 c0       	rjmp	.+12     	; 0x3e2e <xQueueGenericReceive+0x2e8>
    3e22:	16 c0       	rjmp	.+44     	; 0x3e50 <xQueueGenericReceive+0x30a>
    3e24:	f8 01       	movw	r30, r16
    3e26:	80 85       	ldd	r24, Z+8	; 0x08
    3e28:	81 11       	cpse	r24, r1
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <xQueueGenericReceive+0x2f0>
    3e2c:	11 c0       	rjmp	.+34     	; 0x3e50 <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3e2e:	78 01       	movw	r14, r16
    3e30:	f8 e0       	ldi	r31, 0x08	; 8
    3e32:	ef 0e       	add	r14, r31
    3e34:	f1 1c       	adc	r15, r1
    3e36:	c7 01       	movw	r24, r14
    3e38:	0e 94 df 29 	call	0x53be	; 0x53be <xTaskRemoveFromEventList>
    3e3c:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3e3e:	0e 94 6d 2a 	call	0x54da	; 0x54da <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3e42:	f8 01       	movw	r30, r16
    3e44:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e46:	81 50       	subi	r24, 0x01	; 1
    3e48:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3e4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e4c:	18 16       	cp	r1, r24
    3e4e:	54 f3       	brlt	.-44     	; 0x3e24 <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3e50:	8f ef       	ldi	r24, 0xFF	; 255
    3e52:	f8 01       	movw	r30, r16
	}
	taskEXIT_CRITICAL();
    3e54:	85 8f       	std	Z+29, r24	; 0x1d
    3e56:	0f 90       	pop	r0
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	c8 d7       	rcall	.+3984   	; 0x4dec <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 91       	pop	r16
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	bf 90       	pop	r11
    3e7a:	af 90       	pop	r10
    3e7c:	9f 90       	pop	r9
    3e7e:	8f 90       	pop	r8
    3e80:	7f 90       	pop	r7
    3e82:	6f 90       	pop	r6
    3e84:	08 95       	ret

00003e86 <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    3e86:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	11 f4       	brne	.+4      	; 0x3e90 <server_receiver+0xa>
      gHandshook = 0;
    3e8c:	10 92 c2 19 	sts	0x19C2, r1	; 0x8019c2 <gHandshook>
  }
  memcpy(&message_in, data, len);
    3e90:	bc 01       	movw	r22, r24
    3e92:	87 e3       	ldi	r24, 0x37	; 55
    3e94:	9b e1       	ldi	r25, 0x1B	; 27
    3e96:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    3e9a:	60 e0       	ldi	r22, 0x00	; 0
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	80 91 33 1b 	lds	r24, 0x1B33	; 0x801b33 <xCommandReadyBSem>
    3ea2:	90 91 34 1b 	lds	r25, 0x1B34	; 0x801b34 <xCommandReadyBSem+0x1>
    3ea6:	b3 cc       	rjmp	.-1690   	; 0x380e <xQueueGive>
    3ea8:	08 95       	ret

00003eaa <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    3eaa:	80 91 cf 19 	lds	r24, 0x19CF	; 0x8019cf <connected>
    3eae:	81 11       	cpse	r24, r1
    3eb0:	04 c0       	rjmp	.+8      	; 0x3eba <server_communication_init+0x10>
  server_connection = arq_new_connection();
    3eb2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    3eb6:	80 93 6d 1b 	sts	0x1B6D, r24	; 0x801b6d <server_connection>
    3eba:	08 95       	ret

00003ebc <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    3ebc:	28 ee       	ldi	r18, 0xE8	; 232
    3ebe:	33 e0       	ldi	r19, 0x03	; 3
    3ec0:	43 e4       	ldi	r20, 0x43	; 67
    3ec2:	5f e1       	ldi	r21, 0x1F	; 31
    3ec4:	60 e0       	ldi	r22, 0x00	; 0
    3ec6:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    3eca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    3ece:	80 93 cf 19 	sts	0x19CF, r24	; 0x8019cf <connected>
  return connected;
}
    3ed2:	08 95       	ret

00003ed4 <send_handshake>:

uint8_t send_handshake(void) {
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	ec 97       	sbiw	r28, 0x3c	; 60
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    3ee8:	80 91 cf 19 	lds	r24, 0x19CF	; 0x8019cf <connected>
    3eec:	88 23       	and	r24, r24
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <send_handshake+0x1e>
    3ef0:	4e c0       	rjmp	.+156    	; 0x3f8e <send_handshake+0xba>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    3ef2:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    3ef4:	87 e0       	ldi	r24, 0x07	; 7
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    3ef8:	88 e0       	ldi	r24, 0x08	; 8
    3efa:	ed e3       	ldi	r30, 0x3D	; 61
    3efc:	f6 e0       	ldi	r31, 0x06	; 6
    3efe:	de 01       	movw	r26, r28
    3f00:	13 96       	adiw	r26, 0x03	; 3
    3f02:	01 90       	ld	r0, Z+
    3f04:	0d 92       	st	X+, r0
    3f06:	8a 95       	dec	r24
    3f08:	e1 f7       	brne	.-8      	; 0x3f02 <send_handshake+0x2e>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    3f0a:	24 eb       	ldi	r18, 0xB4	; 180
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	3b 87       	std	Y+11, r19	; 0x0b
    3f10:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    3f12:	85 ef       	ldi	r24, 0xF5	; 245
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	9d 87       	std	Y+13, r25	; 0x0d
    3f18:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    3f1a:	88 e3       	ldi	r24, 0x38	; 56
    3f1c:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    3f1e:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    3f20:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    3f22:	85 e1       	ldi	r24, 0x15	; 21
    3f24:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    3f26:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    3f28:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    3f2a:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    3f2c:	1e 8a       	std	Y+22, r1	; 0x16
    3f2e:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    3f30:	8a e5       	ldi	r24, 0x5A	; 90
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	98 8f       	std	Y+24, r25	; 0x18
    3f36:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    3f38:	3a 8f       	std	Y+26, r19	; 0x1a
    3f3a:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    3f3c:	8e e0       	ldi	r24, 0x0E	; 14
    3f3e:	91 e0       	ldi	r25, 0x01	; 1
    3f40:	9c 8f       	std	Y+28, r25	; 0x1c
    3f42:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    3f44:	88 ec       	ldi	r24, 0xC8	; 200
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9e 8f       	std	Y+30, r25	; 0x1e
    3f4a:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3f4c:	8e e1       	ldi	r24, 0x1E	; 30
    3f4e:	fe 01       	movw	r30, r28
    3f50:	31 96       	adiw	r30, 0x01	; 1
    3f52:	de 01       	movw	r26, r28
    3f54:	5f 96       	adiw	r26, 0x1f	; 31
    3f56:	01 90       	ld	r0, Z+
    3f58:	0d 92       	st	X+, r0
    3f5a:	8a 95       	dec	r24
    3f5c:	e1 f7       	brne	.-8      	; 0x3f56 <send_handshake+0x82>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    3f5e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    3f62:	88 23       	and	r24, r24
    3f64:	59 f0       	breq	.+22     	; 0x3f7c <send_handshake+0xa8>
    3f66:	4e e1       	ldi	r20, 0x1E	; 30
    3f68:	50 e0       	ldi	r21, 0x00	; 0
    3f6a:	be 01       	movw	r22, r28
    3f6c:	61 5e       	subi	r22, 0xE1	; 225
    3f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f70:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    3f74:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	09 c0       	rjmp	.+18     	; 0x3f8e <send_handshake+0xba>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    3f7c:	4e e1       	ldi	r20, 0x1E	; 30
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	be 01       	movw	r22, r28
    3f82:	61 5e       	subi	r22, 0xE1	; 225
    3f84:	7f 4f       	sbci	r23, 0xFF	; 255
    3f86:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    3f8a:	76 d1       	rcall	.+748    	; 0x4278 <simple_p_send>
  return 1;
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
}
    3f8e:	ec 96       	adiw	r28, 0x3c	; 60
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	df 91       	pop	r29
    3f9c:	cf 91       	pop	r28
    3f9e:	08 95       	ret

00003fa0 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    3fa0:	af 92       	push	r10
    3fa2:	cf 92       	push	r12
    3fa4:	ef 92       	push	r14
    3fa6:	0f 93       	push	r16
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	2d 97       	sbiw	r28, 0x0d	; 13
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return;
    3fbc:	e0 91 cf 19 	lds	r30, 0x19CF	; 0x8019cf <connected>
    3fc0:	ee 23       	and	r30, r30
    3fc2:	19 f1       	breq	.+70     	; 0x400a <send_update+0x6a>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3fc4:	e1 e0       	ldi	r30, 0x01	; 1
    3fc6:	e9 83       	std	Y+1, r30	; 0x01
    3fc8:	9b 83       	std	Y+3, r25	; 0x03
    3fca:	8a 83       	std	Y+2, r24	; 0x02
    3fcc:	7d 83       	std	Y+5, r23	; 0x05
    3fce:	6c 83       	std	Y+4, r22	; 0x04
    3fd0:	5f 83       	std	Y+7, r21	; 0x07
    3fd2:	4e 83       	std	Y+6, r20	; 0x06
    3fd4:	39 87       	std	Y+9, r19	; 0x09
    3fd6:	28 87       	std	Y+8, r18	; 0x08
    3fd8:	0a 87       	std	Y+10, r16	; 0x0a
    3fda:	eb 86       	std	Y+11, r14	; 0x0b
    3fdc:	cc 86       	std	Y+12, r12	; 0x0c
    3fde:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    3fe0:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    3fe4:	88 23       	and	r24, r24
    3fe6:	51 f0       	breq	.+20     	; 0x3ffc <send_update+0x5c>
    3fe8:	4d e0       	ldi	r20, 0x0D	; 13
    3fea:	50 e0       	ldi	r21, 0x00	; 0
    3fec:	be 01       	movw	r22, r28
    3fee:	6f 5f       	subi	r22, 0xFF	; 255
    3ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff2:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    3ff6:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    3ffa:	07 c0       	rjmp	.+14     	; 0x400a <send_update+0x6a>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    3ffc:	4d e0       	ldi	r20, 0x0D	; 13
    3ffe:	50 e0       	ldi	r21, 0x00	; 0
    4000:	be 01       	movw	r22, r28
    4002:	6f 5f       	subi	r22, 0xFF	; 255
    4004:	7f 4f       	sbci	r23, 0xFF	; 255
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	37 d1       	rcall	.+622    	; 0x4278 <simple_p_send>
}
    400a:	2d 96       	adiw	r28, 0x0d	; 13
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	de bf       	out	0x3e, r29	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	0f 91       	pop	r16
    401c:	ef 90       	pop	r14
    401e:	cf 90       	pop	r12
    4020:	af 90       	pop	r10
    4022:	08 95       	ret

00004024 <send_idle>:

void send_idle(void) {
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	1f 92       	push	r1
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    402e:	80 91 cf 19 	lds	r24, 0x19CF	; 0x8019cf <connected>
    4032:	88 23       	and	r24, r24
    4034:	b9 f0       	breq	.+46     	; 0x4064 <send_idle+0x40>
  uint8_t status = TYPE_IDLE;
    4036:	83 e0       	ldi	r24, 0x03	; 3
    4038:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    403a:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    403e:	88 23       	and	r24, r24
    4040:	51 f0       	breq	.+20     	; 0x4056 <send_idle+0x32>
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	50 e0       	ldi	r21, 0x00	; 0
    4046:	be 01       	movw	r22, r28
    4048:	6f 5f       	subi	r22, 0xFF	; 255
    404a:	7f 4f       	sbci	r23, 0xFF	; 255
    404c:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    4050:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    4054:	07 c0       	rjmp	.+14     	; 0x4064 <send_idle+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	50 e0       	ldi	r21, 0x00	; 0
    405a:	be 01       	movw	r22, r28
    405c:	6f 5f       	subi	r22, 0xFF	; 255
    405e:	7f 4f       	sbci	r23, 0xFF	; 255
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	0a d1       	rcall	.+532    	; 0x4278 <simple_p_send>
}
    4064:	0f 90       	pop	r0
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	08 95       	ret

0000406c <debug>:
void debug(const char *fmt, ...) {
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	c4 56       	subi	r28, 0x64	; 100
    4076:	d1 09       	sbc	r29, r1
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	ae 01       	movw	r20, r28
    4084:	46 59       	subi	r20, 0x96	; 150
    4086:	5f 4f       	sbci	r21, 0xFF	; 255
    4088:	fa 01       	movw	r30, r20
    408a:	61 91       	ld	r22, Z+
    408c:	71 91       	ld	r23, Z+
    408e:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    4090:	8a e0       	ldi	r24, 0x0A	; 10
    4092:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    4094:	ce 01       	movw	r24, r28
    4096:	02 96       	adiw	r24, 0x02	; 2
    4098:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <vsprintf>
	va_end(ap);
	if (ret > 0) {
    409c:	88 23       	and	r24, r24
    409e:	c9 f0       	breq	.+50     	; 0x40d2 <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    40a0:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    40a4:	22 23       	and	r18, r18
    40a6:	61 f0       	breq	.+24     	; 0x40c0 <debug+0x54>
    40a8:	99 27       	eor	r25, r25
    40aa:	ac 01       	movw	r20, r24
    40ac:	4f 5f       	subi	r20, 0xFF	; 255
    40ae:	5f 4f       	sbci	r21, 0xFF	; 255
    40b0:	be 01       	movw	r22, r28
    40b2:	6f 5f       	subi	r22, 0xFF	; 255
    40b4:	7f 4f       	sbci	r23, 0xFF	; 255
    40b6:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    40ba:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    40be:	09 c0       	rjmp	.+18     	; 0x40d2 <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    40c0:	99 27       	eor	r25, r25
    40c2:	ac 01       	movw	r20, r24
    40c4:	4f 5f       	subi	r20, 0xFF	; 255
    40c6:	5f 4f       	sbci	r21, 0xFF	; 255
    40c8:	be 01       	movw	r22, r28
    40ca:	6f 5f       	subi	r22, 0xFF	; 255
    40cc:	7f 4f       	sbci	r23, 0xFF	; 255
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	d3 d0       	rcall	.+422    	; 0x4278 <simple_p_send>
	}
}
    40d2:	cc 59       	subi	r28, 0x9C	; 156
    40d4:	df 4f       	sbci	r29, 0xFF	; 255
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	08 95       	ret

000040e6 <send_ping_response>:

void send_ping_response(void) {
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	1f 92       	push	r1
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    40f0:	80 91 cf 19 	lds	r24, 0x19CF	; 0x8019cf <connected>
    40f4:	88 23       	and	r24, r24
    40f6:	b9 f0       	breq	.+46     	; 0x4126 <send_ping_response+0x40>
  uint8_t status = TYPE_PING_RESPONSE;
    40f8:	89 e0       	ldi	r24, 0x09	; 9
    40fa:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    40fc:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    4100:	88 23       	and	r24, r24
    4102:	51 f0       	breq	.+20     	; 0x4118 <send_ping_response+0x32>
    4104:	41 e0       	ldi	r20, 0x01	; 1
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	be 01       	movw	r22, r28
    410a:	6f 5f       	subi	r22, 0xFF	; 255
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <server_connection>
    4112:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    4116:	07 c0       	rjmp	.+14     	; 0x4126 <send_ping_response+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    4118:	41 e0       	ldi	r20, 0x01	; 1
    411a:	50 e0       	ldi	r21, 0x00	; 0
    411c:	be 01       	movw	r22, r28
    411e:	6f 5f       	subi	r22, 0xFF	; 255
    4120:	7f 4f       	sbci	r23, 0xFF	; 255
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	a9 d0       	rcall	.+338    	; 0x4278 <simple_p_send>
}
    4126:	0f 90       	pop	r0
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	08 95       	ret

0000412e <vServo_setAngle>:
}

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    412e:	8a 35       	cpi	r24, 0x5A	; 90
    4130:	08 f0       	brcs	.+2      	; 0x4134 <vServo_setAngle+0x6>
        ServoAngleDeg = 90;
    4132:	8a e5       	ldi	r24, 0x5A	; 90
    }
    else if(ServoAngleDeg <= 0){
        ServoAngleDeg = 0;
    }
    /* Fetch pulse width from array and set to output */
    servoOCR = DEG_TO_PWM[ServoAngleDeg];
    4134:	e8 2f       	mov	r30, r24
    4136:	f0 e0       	ldi	r31, 0x00	; 0
    4138:	ee 0f       	add	r30, r30
    413a:	ff 1f       	adc	r31, r31
    413c:	eb 5b       	subi	r30, 0xBB	; 187
    413e:	f9 4f       	sbci	r31, 0xF9	; 249
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4148:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    414c:	08 95       	ret

0000414e <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    414e:	a0 ea       	ldi	r26, 0xA0	; 160
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	9c 91       	ld	r25, X
    4154:	90 62       	ori	r25, 0x20	; 32
    4156:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    4158:	e1 ea       	ldi	r30, 0xA1	; 161
    415a:	f0 e0       	ldi	r31, 0x00	; 0
    415c:	90 81       	ld	r25, Z
    415e:	98 61       	ori	r25, 0x18	; 24
    4160:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    4162:	9c 91       	ld	r25, X
    4164:	92 60       	ori	r25, 0x02	; 2
    4166:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    4168:	90 81       	ld	r25, Z
    416a:	92 60       	ori	r25, 0x02	; 2
    416c:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    416e:	2f e3       	ldi	r18, 0x3F	; 63
    4170:	3c e9       	ldi	r19, 0x9C	; 156
    4172:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    4176:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    417a:	e1 e0       	ldi	r30, 0x01	; 1
    417c:	f1 e0       	ldi	r31, 0x01	; 1
    417e:	90 81       	ld	r25, Z
    4180:	90 61       	ori	r25, 0x10	; 16
    4182:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    4184:	d4 cf       	rjmp	.-88     	; 0x412e <vServo_setAngle>
    4186:	08 95       	ret

00004188 <simple_p_reassembly>:
  vPortFree(part);
  return 1;
}


void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length) {
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
  uint8_t i;
  uint8_t id = 0xFF;
  uint8_t free = 0xFF;
  for(i=0;i<MAX_MESSAGES;i++) {
    if(messages[i].address == 0xFF && free == 0xFF) free = i;
    4194:	90 91 d1 19 	lds	r25, 0x19D1	; 0x8019d1 <messages+0x1>
    4198:	9f 3f       	cpi	r25, 0xFF	; 255
    419a:	11 f0       	breq	.+4      	; 0x41a0 <simple_p_reassembly+0x18>
    else if(messages[i].address == sender) {
    419c:	98 13       	cpse	r25, r24
    419e:	58 c0       	rjmp	.+176    	; 0x4250 <simple_p_reassembly+0xc8>
  if(id == 0xFF && free == 0xFF) return; // Not room for any more messages, and none is stored for this address
  else if(id == 0xFF && free != 0xFF) { // Did not find any part messages from this sender, but there is room to store a new one
    id = free; 
  }
    
  if(data[0] == 0) { // First part of a new message
    41a0:	fb 01       	movw	r30, r22
    41a2:	80 81       	ld	r24, Z
    41a4:	81 11       	cpse	r24, r1
    41a6:	05 c0       	rjmp	.+10     	; 0x41b2 <simple_p_reassembly+0x2a>
    messages[id].num_received_bytes = 0;
    41a8:	10 92 d3 19 	sts	0x19D3, r1	; 0x8019d3 <messages+0x3>
    41ac:	10 92 d2 19 	sts	0x19D2, r1	; 0x8019d2 <messages+0x2>
    41b0:	0c c0       	rjmp	.+24     	; 0x41ca <simple_p_reassembly+0x42>
  } else if(data[0] != messages[id].next_part) {
    41b2:	90 91 d4 19 	lds	r25, 0x19D4	; 0x8019d4 <messages+0x4>
    41b6:	89 17       	cp	r24, r25
    41b8:	41 f0       	breq	.+16     	; 0x41ca <simple_p_reassembly+0x42>
    messages[id].next_part = 0;
    41ba:	e0 ed       	ldi	r30, 0xD0	; 208
    41bc:	f9 e1       	ldi	r31, 0x19	; 25
    41be:	14 82       	std	Z+4, r1	; 0x04
    messages[id].num_received_bytes = 0;
    41c0:	13 82       	std	Z+3, r1	; 0x03
    41c2:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    41c4:	8f ef       	ldi	r24, 0xFF	; 255
    41c6:	81 83       	std	Z+1, r24	; 0x01
    return;
    41c8:	43 c0       	rjmp	.+134    	; 0x4250 <simple_p_reassembly+0xc8>
  }

  if(messages[id].num_received_bytes + (length-2) > MAX_MESSAGE_SIZE) { // Message is larger than what can be handled, discard it
    41ca:	80 91 d2 19 	lds	r24, 0x19D2	; 0x8019d2 <messages+0x2>
    41ce:	90 91 d3 19 	lds	r25, 0x19D3	; 0x8019d3 <messages+0x3>
    41d2:	9c 01       	movw	r18, r24
    41d4:	22 50       	subi	r18, 0x02	; 2
    41d6:	31 09       	sbc	r19, r1
    41d8:	24 0f       	add	r18, r20
    41da:	35 1f       	adc	r19, r21
    41dc:	25 36       	cpi	r18, 0x65	; 101
    41de:	31 05       	cpc	r19, r1
    41e0:	40 f0       	brcs	.+16     	; 0x41f2 <simple_p_reassembly+0x6a>
    messages[id].num_received_bytes = 0;
    41e2:	e0 ed       	ldi	r30, 0xD0	; 208
    41e4:	f9 e1       	ldi	r31, 0x19	; 25
    41e6:	13 82       	std	Z+3, r1	; 0x03
    41e8:	12 82       	std	Z+2, r1	; 0x02
    messages[id].next_part = 0;
    41ea:	14 82       	std	Z+4, r1	; 0x04
    messages[id].address = 0xFF;
    41ec:	8f ef       	ldi	r24, 0xFF	; 255
    41ee:	81 83       	std	Z+1, r24	; 0x01
    return;
    41f0:	2f c0       	rjmp	.+94     	; 0x4250 <simple_p_reassembly+0xc8>
    41f2:	8a 01       	movw	r16, r20
    41f4:	eb 01       	movw	r28, r22
  }
  
  messages[id].next_part++;
    41f6:	0f 2e       	mov	r0, r31
    41f8:	f0 ed       	ldi	r31, 0xD0	; 208
    41fa:	ef 2e       	mov	r14, r31
    41fc:	f9 e1       	ldi	r31, 0x19	; 25
    41fe:	ff 2e       	mov	r15, r31
    4200:	f0 2d       	mov	r31, r0
    4202:	f7 01       	movw	r30, r14
    4204:	24 81       	ldd	r18, Z+4	; 0x04
    4206:	2f 5f       	subi	r18, 0xFF	; 255
    4208:	24 83       	std	Z+4, r18	; 0x04
  memcpy(messages[id].message+messages[id].num_received_bytes, data+2, length-2);
    420a:	42 50       	subi	r20, 0x02	; 2
    420c:	51 09       	sbc	r21, r1
    420e:	6e 5f       	subi	r22, 0xFE	; 254
    4210:	7f 4f       	sbci	r23, 0xFF	; 255
    4212:	8b 52       	subi	r24, 0x2B	; 43
    4214:	96 4e       	sbci	r25, 0xE6	; 230
    4216:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
  messages[id].num_received_bytes += (length-2);
    421a:	f7 01       	movw	r30, r14
    421c:	42 81       	ldd	r20, Z+2	; 0x02
    421e:	53 81       	ldd	r21, Z+3	; 0x03
    4220:	42 50       	subi	r20, 0x02	; 2
    4222:	51 09       	sbc	r21, r1
    4224:	ba 01       	movw	r22, r20
    4226:	60 0f       	add	r22, r16
    4228:	71 1f       	adc	r23, r17
    422a:	73 83       	std	Z+3, r23	; 0x03
    422c:	62 83       	std	Z+2, r22	; 0x02
  
  if(data[0] == data[1]) {
    422e:	98 81       	ld	r25, Y
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	98 13       	cpse	r25, r24
    4234:	0d c0       	rjmp	.+26     	; 0x4250 <simple_p_reassembly+0xc8>
    callback_data_received(messages[id].message, messages[id].num_received_bytes);
    4236:	e0 91 6e 1b 	lds	r30, 0x1B6E	; 0x801b6e <callback_data_received>
    423a:	f0 91 6f 1b 	lds	r31, 0x1B6F	; 0x801b6f <callback_data_received+0x1>
    423e:	85 ed       	ldi	r24, 0xD5	; 213
    4240:	99 e1       	ldi	r25, 0x19	; 25
    4242:	19 95       	eicall
    messages[id].num_received_bytes = messages[id].next_part = 0;
    4244:	f7 01       	movw	r30, r14
    4246:	14 82       	std	Z+4, r1	; 0x04
    4248:	13 82       	std	Z+3, r1	; 0x03
    424a:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    424c:	8f ef       	ldi	r24, 0xFF	; 255
    424e:	81 83       	std	Z+1, r24	; 0x01
  }
    4250:	df 91       	pop	r29
    4252:	cf 91       	pop	r28
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	ff 90       	pop	r15
    425a:	ef 90       	pop	r14
    425c:	08 95       	ret

0000425e <simple_p_init>:
void (*callback_data_received)(uint8_t*, uint16_t); 

void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length);

void simple_p_init(void (*cb)(uint8_t*, uint16_t)) {
  callback_data_received = cb;
    425e:	90 93 6f 1b 	sts	0x1B6F, r25	; 0x801b6f <callback_data_received+0x1>
    4262:	80 93 6e 1b 	sts	0x1B6E, r24	; 0x801b6e <callback_data_received>
  uint8_t i;
  network_set_callback(PROTOCOL_SIMPLE, simple_p_reassembly);
    4266:	64 ec       	ldi	r22, 0xC4	; 196
    4268:	70 e2       	ldi	r23, 0x20	; 32
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <network_set_callback>
  for(i=0;i<MAX_MESSAGES;i++) {
    messages[i].address = 0xFF;
    4270:	8f ef       	ldi	r24, 0xFF	; 255
    4272:	80 93 d1 19 	sts	0x19D1, r24	; 0x8019d1 <messages+0x1>
    4276:	08 95       	ret

00004278 <simple_p_send>:
  }
}

uint8_t simple_p_send(uint8_t address, uint8_t *data, uint16_t length) {  
    4278:	5f 92       	push	r5
    427a:	6f 92       	push	r6
    427c:	7f 92       	push	r7
    427e:	8f 92       	push	r8
    4280:	9f 92       	push	r9
    4282:	af 92       	push	r10
    4284:	bf 92       	push	r11
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	58 2e       	mov	r5, r24
    4298:	5b 01       	movw	r10, r22
    429a:	8a 01       	movw	r16, r20
  uint16_t tmp;
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
    429c:	8c e2       	ldi	r24, 0x2C	; 44
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    42a4:	7c 01       	movw	r14, r24
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
    42a6:	98 01       	movw	r18, r16
    42a8:	36 95       	lsr	r19
    42aa:	27 95       	ror	r18
    42ac:	ad e0       	ldi	r26, 0x0D	; 13
    42ae:	b3 ec       	ldi	r27, 0xC3	; 195
    42b0:	0e 94 03 36 	call	0x6c06	; 0x6c06 <__umulhisi3>
    42b4:	92 95       	swap	r25
    42b6:	82 95       	swap	r24
    42b8:	8f 70       	andi	r24, 0x0F	; 15
    42ba:	89 27       	eor	r24, r25
    42bc:	9f 70       	andi	r25, 0x0F	; 15
    42be:	89 27       	eor	r24, r25
    42c0:	4a e2       	ldi	r20, 0x2A	; 42
    42c2:	48 9f       	mul	r20, r24
    42c4:	90 01       	movw	r18, r0
    42c6:	49 9f       	mul	r20, r25
    42c8:	30 0d       	add	r19, r0
    42ca:	11 24       	eor	r1, r1
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	02 17       	cp	r16, r18
    42d0:	13 07       	cpc	r17, r19
    42d2:	09 f4       	brne	.+2      	; 0x42d6 <simple_p_send+0x5e>
    42d4:	40 e0       	ldi	r20, 0x00	; 0
    42d6:	98 01       	movw	r18, r16
    42d8:	36 95       	lsr	r19
    42da:	27 95       	ror	r18
    42dc:	ad e0       	ldi	r26, 0x0D	; 13
    42de:	b3 ec       	ldi	r27, 0xC3	; 195
    42e0:	0e 94 03 36 	call	0x6c06	; 0x6c06 <__umulhisi3>
    42e4:	92 95       	swap	r25
    42e6:	82 95       	swap	r24
    42e8:	8f 70       	andi	r24, 0x0F	; 15
    42ea:	89 27       	eor	r24, r25
    42ec:	9f 70       	andi	r25, 0x0F	; 15
    42ee:	89 27       	eor	r24, r25
    42f0:	84 0f       	add	r24, r20
  while(remaining > 0) {
    42f2:	01 15       	cp	r16, r1
    42f4:	11 05       	cpc	r17, r1
    42f6:	59 f1       	breq	.+86     	; 0x434e <simple_p_send+0xd6>
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	c1 2c       	mov	r12, r1
    42fc:	d1 2c       	mov	r13, r1
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    part[1] = number_of_parts-1;
    42fe:	66 24       	eor	r6, r6
    4300:	6a 94       	dec	r6
    4302:	68 0e       	add	r6, r24
    memcpy(part+2, data+offset, tmp);
    4304:	47 01       	movw	r8, r14
    4306:	82 e0       	ldi	r24, 0x02	; 2
    4308:	88 0e       	add	r8, r24
    430a:	91 1c       	adc	r9, r1
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    430c:	e8 01       	movw	r28, r16
    430e:	0b 32       	cpi	r16, 0x2B	; 43
    4310:	11 05       	cpc	r17, r1
    4312:	10 f0       	brcs	.+4      	; 0x4318 <simple_p_send+0xa0>
    4314:	ca e2       	ldi	r28, 0x2A	; 42
    4316:	d0 e0       	ldi	r29, 0x00	; 0
    part[0] = part_number++;
    4318:	77 24       	eor	r7, r7
    431a:	73 94       	inc	r7
    431c:	79 0e       	add	r7, r25
    431e:	f7 01       	movw	r30, r14
    4320:	90 83       	st	Z, r25
    part[1] = number_of_parts-1;
    4322:	61 82       	std	Z+1, r6	; 0x01
    memcpy(part+2, data+offset, tmp);
    4324:	b5 01       	movw	r22, r10
    4326:	6c 0d       	add	r22, r12
    4328:	7d 1d       	adc	r23, r13
    432a:	ae 01       	movw	r20, r28
    432c:	c4 01       	movw	r24, r8
    432e:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    4332:	9e 01       	movw	r18, r28
    4334:	2e 5f       	subi	r18, 0xFE	; 254
    4336:	3f 4f       	sbci	r19, 0xFF	; 255
    4338:	a7 01       	movw	r20, r14
    433a:	60 e0       	ldi	r22, 0x00	; 0
    433c:	85 2d       	mov	r24, r5
    433e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <network_send>
    offset += tmp;
    4342:	cc 0e       	add	r12, r28
    4344:	dd 1e       	adc	r13, r29
    remaining -= tmp;
    4346:	0c 1b       	sub	r16, r28
    4348:	1d 0b       	sbc	r17, r29
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    434a:	97 2d       	mov	r25, r7
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    434c:	f9 f6       	brne	.-66     	; 0x430c <simple_p_send+0x94>
    memcpy(part+2, data+offset, tmp);
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    offset += tmp;
    remaining -= tmp;
  }
  vPortFree(part);
    434e:	c7 01       	movw	r24, r14
    4350:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
}
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	df 91       	pop	r29
    4358:	cf 91       	pop	r28
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	ff 90       	pop	r15
    4360:	ef 90       	pop	r14
    4362:	df 90       	pop	r13
    4364:	cf 90       	pop	r12
    4366:	bf 90       	pop	r11
    4368:	af 90       	pop	r10
    436a:	9f 90       	pop	r9
    436c:	8f 90       	pop	r8
    436e:	7f 90       	pop	r7
    4370:	6f 90       	pop	r6
    4372:	5f 90       	pop	r5
    4374:	08 95       	ret

00004376 <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    4376:	84 b1       	in	r24, 0x04	; 4
    4378:	87 60       	ori	r24, 0x07	; 7
    437a:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    437c:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    437e:	8c b5       	in	r24, 0x2c	; 44
    4380:	81 60       	ori	r24, 0x01	; 1
    4382:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    4384:	8c b5       	in	r24, 0x2c	; 44
    4386:	8c 65       	ori	r24, 0x5C	; 92
    4388:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    438a:	8c b5       	in	r24, 0x2c	; 44
    438c:	8f 7d       	andi	r24, 0xDF	; 223
    438e:	8c bd       	out	0x2c, r24	; 44
    4390:	08 95       	ret

00004392 <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    4392:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    4394:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    4396:	0d b4       	in	r0, 0x2d	; 45
    4398:	07 fe       	sbrs	r0, 7
    439a:	fd cf       	rjmp	.-6      	; 0x4396 <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    439c:	8e b5       	in	r24, 0x2e	; 46
}
    439e:	08 95       	ret

000043a0 <xTaskGenericCreate>:
    43a0:	4f 92       	push	r4
    43a2:	5f 92       	push	r5
    43a4:	6f 92       	push	r6
    43a6:	7f 92       	push	r7
    43a8:	8f 92       	push	r8
    43aa:	9f 92       	push	r9
    43ac:	af 92       	push	r10
    43ae:	bf 92       	push	r11
    43b0:	cf 92       	push	r12
    43b2:	df 92       	push	r13
    43b4:	ef 92       	push	r14
    43b6:	ff 92       	push	r15
    43b8:	0f 93       	push	r16
    43ba:	1f 93       	push	r17
    43bc:	cf 93       	push	r28
    43be:	df 93       	push	r29
    43c0:	3c 01       	movw	r6, r24
    43c2:	5b 01       	movw	r10, r22
    43c4:	4a 01       	movw	r8, r20
    43c6:	29 01       	movw	r4, r18
    43c8:	c1 14       	cp	r12, r1
    43ca:	d1 04       	cpc	r13, r1
    43cc:	39 f4       	brne	.+14     	; 0x43dc <xTaskGenericCreate+0x3c>
    43ce:	ca 01       	movw	r24, r20
    43d0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    43d4:	6c 01       	movw	r12, r24
    43d6:	89 2b       	or	r24, r25
    43d8:	09 f4       	brne	.+2      	; 0x43dc <xTaskGenericCreate+0x3c>
    43da:	e4 c0       	rjmp	.+456    	; 0x45a4 <xTaskGenericCreate+0x204>
    43dc:	88 e2       	ldi	r24, 0x28	; 40
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    43e4:	ec 01       	movw	r28, r24
    43e6:	89 2b       	or	r24, r25
    43e8:	71 f0       	breq	.+28     	; 0x4406 <xTaskGenericCreate+0x66>
    43ea:	d8 8e       	std	Y+24, r13	; 0x18
    43ec:	cf 8a       	std	Y+23, r12	; 0x17
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	88 1a       	sub	r8, r24
    43f2:	91 08       	sbc	r9, r1
    43f4:	c8 0c       	add	r12, r8
    43f6:	d9 1c       	adc	r13, r9
    43f8:	d5 01       	movw	r26, r10
    43fa:	8c 91       	ld	r24, X
    43fc:	89 8f       	std	Y+25, r24	; 0x19
    43fe:	8c 91       	ld	r24, X
    4400:	81 11       	cpse	r24, r1
    4402:	05 c0       	rjmp	.+10     	; 0x440e <xTaskGenericCreate+0x6e>
    4404:	18 c0       	rjmp	.+48     	; 0x4436 <xTaskGenericCreate+0x96>
    4406:	c6 01       	movw	r24, r12
    4408:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    440c:	cb c0       	rjmp	.+406    	; 0x45a4 <xTaskGenericCreate+0x204>
    440e:	ae 01       	movw	r20, r28
    4410:	46 5e       	subi	r20, 0xE6	; 230
    4412:	5f 4f       	sbci	r21, 0xFF	; 255
    4414:	f5 01       	movw	r30, r10
    4416:	31 96       	adiw	r30, 0x01	; 1
    4418:	b8 e0       	ldi	r27, 0x08	; 8
    441a:	ab 0e       	add	r10, r27
    441c:	b1 1c       	adc	r11, r1
    441e:	cf 01       	movw	r24, r30
    4420:	21 91       	ld	r18, Z+
    4422:	da 01       	movw	r26, r20
    4424:	2d 93       	st	X+, r18
    4426:	ad 01       	movw	r20, r26
    4428:	dc 01       	movw	r26, r24
    442a:	8c 91       	ld	r24, X
    442c:	88 23       	and	r24, r24
    442e:	19 f0       	breq	.+6      	; 0x4436 <xTaskGenericCreate+0x96>
    4430:	ae 16       	cp	r10, r30
    4432:	bf 06       	cpc	r11, r31
    4434:	a1 f7       	brne	.-24     	; 0x441e <xTaskGenericCreate+0x7e>
    4436:	18 a2       	std	Y+32, r1	; 0x20
    4438:	10 2f       	mov	r17, r16
    443a:	06 30       	cpi	r16, 0x06	; 6
    443c:	08 f0       	brcs	.+2      	; 0x4440 <xTaskGenericCreate+0xa0>
    443e:	15 e0       	ldi	r17, 0x05	; 5
    4440:	1e 8b       	std	Y+22, r17	; 0x16
    4442:	19 a3       	std	Y+33, r17	; 0x21
    4444:	1a a2       	std	Y+34, r1	; 0x22
    4446:	5e 01       	movw	r10, r28
    4448:	b2 e0       	ldi	r27, 0x02	; 2
    444a:	ab 0e       	add	r10, r27
    444c:	b1 1c       	adc	r11, r1
    444e:	c5 01       	movw	r24, r10
    4450:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4454:	ce 01       	movw	r24, r28
    4456:	0c 96       	adiw	r24, 0x0c	; 12
    4458:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    445c:	d9 87       	std	Y+9, r29	; 0x09
    445e:	c8 87       	std	Y+8, r28	; 0x08
    4460:	86 e0       	ldi	r24, 0x06	; 6
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	81 1b       	sub	r24, r17
    4466:	91 09       	sbc	r25, r1
    4468:	9d 87       	std	Y+13, r25	; 0x0d
    446a:	8c 87       	std	Y+12, r24	; 0x0c
    446c:	db 8b       	std	Y+19, r29	; 0x13
    446e:	ca 8b       	std	Y+18, r28	; 0x12
    4470:	1b a2       	std	Y+35, r1	; 0x23
    4472:	1c a2       	std	Y+36, r1	; 0x24
    4474:	1d a2       	std	Y+37, r1	; 0x25
    4476:	1e a2       	std	Y+38, r1	; 0x26
    4478:	1f a2       	std	Y+39, r1	; 0x27
    447a:	a2 01       	movw	r20, r4
    447c:	b3 01       	movw	r22, r6
    447e:	c6 01       	movw	r24, r12
    4480:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <pxPortInitialiseStack>
    4484:	99 83       	std	Y+1, r25	; 0x01
    4486:	88 83       	st	Y, r24
    4488:	e1 14       	cp	r14, r1
    448a:	f1 04       	cpc	r15, r1
    448c:	19 f0       	breq	.+6      	; 0x4494 <xTaskGenericCreate+0xf4>
    448e:	f7 01       	movw	r30, r14
    4490:	d1 83       	std	Z+1, r29	; 0x01
    4492:	c0 83       	st	Z, r28
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	0f 92       	push	r0
    449a:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    449e:	8f 5f       	subi	r24, 0xFF	; 255
    44a0:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <uxCurrentNumberOfTasks>
    44a4:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    44a8:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    44ac:	89 2b       	or	r24, r25
    44ae:	d9 f5       	brne	.+118    	; 0x4526 <xTaskGenericCreate+0x186>
    44b0:	d0 93 a4 1a 	sts	0x1AA4, r29	; 0x801aa4 <pxCurrentTCB+0x1>
    44b4:	c0 93 a3 1a 	sts	0x1AA3, r28	; 0x801aa3 <pxCurrentTCB>
    44b8:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	09 f0       	breq	.+2      	; 0x44c2 <xTaskGenericCreate+0x122>
    44c0:	41 c0       	rjmp	.+130    	; 0x4544 <xTaskGenericCreate+0x1a4>
    44c2:	0f 2e       	mov	r0, r31
    44c4:	fd e6       	ldi	r31, 0x6D	; 109
    44c6:	ef 2e       	mov	r14, r31
    44c8:	fa e1       	ldi	r31, 0x1A	; 26
    44ca:	ff 2e       	mov	r15, r31
    44cc:	f0 2d       	mov	r31, r0
    44ce:	0f 2e       	mov	r0, r31
    44d0:	f3 ea       	ldi	r31, 0xA3	; 163
    44d2:	cf 2e       	mov	r12, r31
    44d4:	fa e1       	ldi	r31, 0x1A	; 26
    44d6:	df 2e       	mov	r13, r31
    44d8:	f0 2d       	mov	r31, r0
    44da:	c7 01       	movw	r24, r14
    44dc:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44e0:	f9 e0       	ldi	r31, 0x09	; 9
    44e2:	ef 0e       	add	r14, r31
    44e4:	f1 1c       	adc	r15, r1
    44e6:	ec 14       	cp	r14, r12
    44e8:	fd 04       	cpc	r15, r13
    44ea:	b9 f7       	brne	.-18     	; 0x44da <xTaskGenericCreate+0x13a>
    44ec:	84 e6       	ldi	r24, 0x64	; 100
    44ee:	9a e1       	ldi	r25, 0x1A	; 26
    44f0:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44f4:	8b e5       	ldi	r24, 0x5B	; 91
    44f6:	9a e1       	ldi	r25, 0x1A	; 26
    44f8:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44fc:	8e e4       	ldi	r24, 0x4E	; 78
    44fe:	9a e1       	ldi	r25, 0x1A	; 26
    4500:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4504:	85 e4       	ldi	r24, 0x45	; 69
    4506:	9a e1       	ldi	r25, 0x1A	; 26
    4508:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    450c:	84 e6       	ldi	r24, 0x64	; 100
    450e:	9a e1       	ldi	r25, 0x1A	; 26
    4510:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <pxDelayedTaskList+0x1>
    4514:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <pxDelayedTaskList>
    4518:	8b e5       	ldi	r24, 0x5B	; 91
    451a:	9a e1       	ldi	r25, 0x1A	; 26
    451c:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4520:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    4524:	0f c0       	rjmp	.+30     	; 0x4544 <xTaskGenericCreate+0x1a4>
    4526:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <xSchedulerRunning>
    452a:	81 11       	cpse	r24, r1
    452c:	0b c0       	rjmp	.+22     	; 0x4544 <xTaskGenericCreate+0x1a4>
    452e:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4532:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4536:	86 89       	ldd	r24, Z+22	; 0x16
    4538:	08 17       	cp	r16, r24
    453a:	20 f0       	brcs	.+8      	; 0x4544 <xTaskGenericCreate+0x1a4>
    453c:	d0 93 a4 1a 	sts	0x1AA4, r29	; 0x801aa4 <pxCurrentTCB+0x1>
    4540:	c0 93 a3 1a 	sts	0x1AA3, r28	; 0x801aa3 <pxCurrentTCB>
    4544:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <uxTaskNumber>
    4548:	8f 5f       	subi	r24, 0xFF	; 255
    454a:	80 93 3c 1a 	sts	0x1A3C, r24	; 0x801a3c <uxTaskNumber>
    454e:	8e 89       	ldd	r24, Y+22	; 0x16
    4550:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4554:	98 17       	cp	r25, r24
    4556:	10 f4       	brcc	.+4      	; 0x455c <xTaskGenericCreate+0x1bc>
    4558:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9c 01       	movw	r18, r24
    4560:	22 0f       	add	r18, r18
    4562:	33 1f       	adc	r19, r19
    4564:	22 0f       	add	r18, r18
    4566:	33 1f       	adc	r19, r19
    4568:	22 0f       	add	r18, r18
    456a:	33 1f       	adc	r19, r19
    456c:	82 0f       	add	r24, r18
    456e:	93 1f       	adc	r25, r19
    4570:	b5 01       	movw	r22, r10
    4572:	83 59       	subi	r24, 0x93	; 147
    4574:	95 4e       	sbci	r25, 0xE5	; 229
    4576:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    457a:	0f 90       	pop	r0
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <xSchedulerRunning>
    4582:	88 23       	and	r24, r24
    4584:	59 f0       	breq	.+22     	; 0x459c <xTaskGenericCreate+0x1fc>
    4586:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    458a:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    458e:	86 89       	ldd	r24, Z+22	; 0x16
    4590:	80 17       	cp	r24, r16
    4592:	30 f4       	brcc	.+12     	; 0x45a0 <xTaskGenericCreate+0x200>
    4594:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <xTaskGenericCreate+0x206>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <xTaskGenericCreate+0x206>
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	01 c0       	rjmp	.+2      	; 0x45a6 <xTaskGenericCreate+0x206>
    45a4:	8f ef       	ldi	r24, 0xFF	; 255
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	ff 90       	pop	r15
    45b0:	ef 90       	pop	r14
    45b2:	df 90       	pop	r13
    45b4:	cf 90       	pop	r12
    45b6:	bf 90       	pop	r11
    45b8:	af 90       	pop	r10
    45ba:	9f 90       	pop	r9
    45bc:	8f 90       	pop	r8
    45be:	7f 90       	pop	r7
    45c0:	6f 90       	pop	r6
    45c2:	5f 90       	pop	r5
    45c4:	4f 90       	pop	r4
    45c6:	08 95       	ret

000045c8 <vTaskDelayUntil>:
    45c8:	9f 92       	push	r9
    45ca:	af 92       	push	r10
    45cc:	bf 92       	push	r11
    45ce:	cf 92       	push	r12
    45d0:	df 92       	push	r13
    45d2:	ef 92       	push	r14
    45d4:	ff 92       	push	r15
    45d6:	0f 93       	push	r16
    45d8:	1f 93       	push	r17
    45da:	cf 93       	push	r28
    45dc:	df 93       	push	r29
    45de:	fc 01       	movw	r30, r24
    45e0:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    45e4:	9f 5f       	subi	r25, 0xFF	; 255
    45e6:	90 93 39 1a 	sts	0x1A39, r25	; 0x801a39 <uxSchedulerSuspended>
    45ea:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    45ee:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    45f2:	20 81       	ld	r18, Z
    45f4:	31 81       	ldd	r19, Z+1	; 0x01
    45f6:	e9 01       	movw	r28, r18
    45f8:	c6 0f       	add	r28, r22
    45fa:	d7 1f       	adc	r29, r23
    45fc:	82 17       	cp	r24, r18
    45fe:	93 07       	cpc	r25, r19
    4600:	58 f4       	brcc	.+22     	; 0x4618 <vTaskDelayUntil+0x50>
    4602:	c2 17       	cp	r28, r18
    4604:	d3 07       	cpc	r29, r19
    4606:	08 f0       	brcs	.+2      	; 0x460a <vTaskDelayUntil+0x42>
    4608:	6e c1       	rjmp	.+732    	; 0x48e6 <vTaskDelayUntil+0x31e>
    460a:	d1 83       	std	Z+1, r29	; 0x01
    460c:	c0 83       	st	Z, r28
    460e:	8c 17       	cp	r24, r28
    4610:	9d 07       	cpc	r25, r29
    4612:	08 f0       	brcs	.+2      	; 0x4616 <vTaskDelayUntil+0x4e>
    4614:	42 c0       	rjmp	.+132    	; 0x469a <vTaskDelayUntil+0xd2>
    4616:	09 c0       	rjmp	.+18     	; 0x462a <vTaskDelayUntil+0x62>
    4618:	c2 17       	cp	r28, r18
    461a:	d3 07       	cpc	r29, r19
    461c:	08 f4       	brcc	.+2      	; 0x4620 <vTaskDelayUntil+0x58>
    461e:	60 c1       	rjmp	.+704    	; 0x48e0 <vTaskDelayUntil+0x318>
    4620:	8c 17       	cp	r24, r28
    4622:	9d 07       	cpc	r25, r29
    4624:	08 f4       	brcc	.+2      	; 0x4628 <vTaskDelayUntil+0x60>
    4626:	5c c1       	rjmp	.+696    	; 0x48e0 <vTaskDelayUntil+0x318>
    4628:	5e c1       	rjmp	.+700    	; 0x48e6 <vTaskDelayUntil+0x31e>
    462a:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    462e:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4632:	02 96       	adiw	r24, 0x02	; 2
    4634:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4638:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    463c:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4640:	d3 83       	std	Z+3, r29	; 0x03
    4642:	c2 83       	std	Z+2, r28	; 0x02
    4644:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    4648:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    464c:	c8 17       	cp	r28, r24
    464e:	d9 07       	cpc	r29, r25
    4650:	68 f4       	brcc	.+26     	; 0x466c <vTaskDelayUntil+0xa4>
    4652:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4656:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    465a:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    465e:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4662:	6e 5f       	subi	r22, 0xFE	; 254
    4664:	7f 4f       	sbci	r23, 0xFF	; 255
    4666:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    466a:	17 c0       	rjmp	.+46     	; 0x469a <vTaskDelayUntil+0xd2>
    466c:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4670:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4674:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4678:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    467c:	6e 5f       	subi	r22, 0xFE	; 254
    467e:	7f 4f       	sbci	r23, 0xFF	; 255
    4680:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4684:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    4688:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    468c:	c8 17       	cp	r28, r24
    468e:	d9 07       	cpc	r29, r25
    4690:	20 f4       	brcc	.+8      	; 0x469a <vTaskDelayUntil+0xd2>
    4692:	d0 93 3b 1a 	sts	0x1A3B, r29	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4696:	c0 93 3a 1a 	sts	0x1A3A, r28	; 0x801a3a <xNextTaskUnblockTime>
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	0f 92       	push	r0
    46a0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    46a4:	81 50       	subi	r24, 0x01	; 1
    46a6:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <uxSchedulerSuspended>
    46aa:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    46ae:	81 11       	cpse	r24, r1
    46b0:	0d c1       	rjmp	.+538    	; 0x48cc <vTaskDelayUntil+0x304>
    46b2:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    46b6:	81 11       	cpse	r24, r1
    46b8:	33 c0       	rjmp	.+102    	; 0x4720 <vTaskDelayUntil+0x158>
    46ba:	0b c1       	rjmp	.+534    	; 0x48d2 <vTaskDelayUntil+0x30a>
    46bc:	d7 01       	movw	r26, r14
    46be:	15 96       	adiw	r26, 0x05	; 5
    46c0:	ed 91       	ld	r30, X+
    46c2:	fc 91       	ld	r31, X
    46c4:	16 97       	sbiw	r26, 0x06	; 6
    46c6:	c6 81       	ldd	r28, Z+6	; 0x06
    46c8:	d7 81       	ldd	r29, Z+7	; 0x07
    46ca:	ce 01       	movw	r24, r28
    46cc:	0c 96       	adiw	r24, 0x0c	; 12
    46ce:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    46d2:	8e 01       	movw	r16, r28
    46d4:	0e 5f       	subi	r16, 0xFE	; 254
    46d6:	1f 4f       	sbci	r17, 0xFF	; 255
    46d8:	c8 01       	movw	r24, r16
    46da:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    46de:	8e 89       	ldd	r24, Y+22	; 0x16
    46e0:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    46e4:	98 17       	cp	r25, r24
    46e6:	10 f4       	brcc	.+4      	; 0x46ec <vTaskDelayUntil+0x124>
    46e8:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	9c 01       	movw	r18, r24
    46f0:	22 0f       	add	r18, r18
    46f2:	33 1f       	adc	r19, r19
    46f4:	22 0f       	add	r18, r18
    46f6:	33 1f       	adc	r19, r19
    46f8:	22 0f       	add	r18, r18
    46fa:	33 1f       	adc	r19, r19
    46fc:	82 0f       	add	r24, r18
    46fe:	93 1f       	adc	r25, r19
    4700:	b8 01       	movw	r22, r16
    4702:	83 59       	subi	r24, 0x93	; 147
    4704:	95 4e       	sbci	r25, 0xE5	; 229
    4706:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    470a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    470e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4712:	9e 89       	ldd	r25, Y+22	; 0x16
    4714:	86 89       	ldd	r24, Z+22	; 0x16
    4716:	98 17       	cp	r25, r24
    4718:	58 f0       	brcs	.+22     	; 0x4730 <vTaskDelayUntil+0x168>
    471a:	d0 92 3e 1a 	sts	0x1A3E, r13	; 0x801a3e <xYieldPending>
    471e:	08 c0       	rjmp	.+16     	; 0x4730 <vTaskDelayUntil+0x168>
    4720:	0f 2e       	mov	r0, r31
    4722:	fe e4       	ldi	r31, 0x4E	; 78
    4724:	ef 2e       	mov	r14, r31
    4726:	fa e1       	ldi	r31, 0x1A	; 26
    4728:	ff 2e       	mov	r15, r31
    472a:	f0 2d       	mov	r31, r0
    472c:	dd 24       	eor	r13, r13
    472e:	d3 94       	inc	r13
    4730:	f7 01       	movw	r30, r14
    4732:	80 81       	ld	r24, Z
    4734:	81 11       	cpse	r24, r1
    4736:	c2 cf       	rjmp	.-124    	; 0x46bc <vTaskDelayUntil+0xf4>
    4738:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    473c:	88 23       	and	r24, r24
    473e:	09 f4       	brne	.+2      	; 0x4742 <vTaskDelayUntil+0x17a>
    4740:	bd c0       	rjmp	.+378    	; 0x48bc <vTaskDelayUntil+0x2f4>
    4742:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4746:	88 23       	and	r24, r24
    4748:	09 f4       	brne	.+2      	; 0x474c <vTaskDelayUntil+0x184>
    474a:	b8 c0       	rjmp	.+368    	; 0x48bc <vTaskDelayUntil+0x2f4>
    474c:	91 2c       	mov	r9, r1
    474e:	bb 24       	eor	r11, r11
    4750:	b3 94       	inc	r11
    4752:	cc 24       	eor	r12, r12
    4754:	ca 94       	dec	r12
    4756:	dc 2c       	mov	r13, r12
    4758:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    475c:	81 11       	cpse	r24, r1
    475e:	98 c0       	rjmp	.+304    	; 0x4890 <vTaskDelayUntil+0x2c8>
    4760:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    4764:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4768:	01 96       	adiw	r24, 0x01	; 1
    476a:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <xTickCount+0x1>
    476e:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <xTickCount>
    4772:	e0 90 42 1a 	lds	r14, 0x1A42	; 0x801a42 <xTickCount>
    4776:	f0 90 43 1a 	lds	r15, 0x1A43	; 0x801a43 <xTickCount+0x1>
    477a:	e1 14       	cp	r14, r1
    477c:	f1 04       	cpc	r15, r1
    477e:	89 f5       	brne	.+98     	; 0x47e2 <vTaskDelayUntil+0x21a>
    4780:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4784:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4788:	20 91 57 1a 	lds	r18, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    478c:	30 91 58 1a 	lds	r19, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4790:	30 93 5a 1a 	sts	0x1A5A, r19	; 0x801a5a <pxDelayedTaskList+0x1>
    4794:	20 93 59 1a 	sts	0x1A59, r18	; 0x801a59 <pxDelayedTaskList>
    4798:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    479c:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    47a0:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    47a4:	8f 5f       	subi	r24, 0xFF	; 255
    47a6:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <xNumOfOverflows>
    47aa:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    47ae:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    47b2:	80 81       	ld	r24, Z
    47b4:	81 11       	cpse	r24, r1
    47b6:	05 c0       	rjmp	.+10     	; 0x47c2 <vTaskDelayUntil+0x1fa>
    47b8:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    47bc:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    47c0:	10 c0       	rjmp	.+32     	; 0x47e2 <vTaskDelayUntil+0x21a>
    47c2:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    47c6:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    47ca:	05 80       	ldd	r0, Z+5	; 0x05
    47cc:	f6 81       	ldd	r31, Z+6	; 0x06
    47ce:	e0 2d       	mov	r30, r0
    47d0:	06 80       	ldd	r0, Z+6	; 0x06
    47d2:	f7 81       	ldd	r31, Z+7	; 0x07
    47d4:	e0 2d       	mov	r30, r0
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    47de:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    47e2:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    47e6:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    47ea:	e8 16       	cp	r14, r24
    47ec:	f9 06       	cpc	r15, r25
    47ee:	08 f4       	brcc	.+2      	; 0x47f2 <vTaskDelayUntil+0x22a>
    47f0:	7d c0       	rjmp	.+250    	; 0x48ec <vTaskDelayUntil+0x324>
    47f2:	a9 2c       	mov	r10, r9
    47f4:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    47f8:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    47fc:	80 81       	ld	r24, Z
    47fe:	81 11       	cpse	r24, r1
    4800:	05 c0       	rjmp	.+10     	; 0x480c <vTaskDelayUntil+0x244>
    4802:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4806:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    480a:	48 c0       	rjmp	.+144    	; 0x489c <vTaskDelayUntil+0x2d4>
    480c:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4810:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4814:	05 80       	ldd	r0, Z+5	; 0x05
    4816:	f6 81       	ldd	r31, Z+6	; 0x06
    4818:	e0 2d       	mov	r30, r0
    481a:	c6 81       	ldd	r28, Z+6	; 0x06
    481c:	d7 81       	ldd	r29, Z+7	; 0x07
    481e:	8a 81       	ldd	r24, Y+2	; 0x02
    4820:	9b 81       	ldd	r25, Y+3	; 0x03
    4822:	e8 16       	cp	r14, r24
    4824:	f9 06       	cpc	r15, r25
    4826:	28 f4       	brcc	.+10     	; 0x4832 <vTaskDelayUntil+0x26a>
    4828:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    482c:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4830:	35 c0       	rjmp	.+106    	; 0x489c <vTaskDelayUntil+0x2d4>
    4832:	8e 01       	movw	r16, r28
    4834:	0e 5f       	subi	r16, 0xFE	; 254
    4836:	1f 4f       	sbci	r17, 0xFF	; 255
    4838:	c8 01       	movw	r24, r16
    483a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    483e:	8c 89       	ldd	r24, Y+20	; 0x14
    4840:	9d 89       	ldd	r25, Y+21	; 0x15
    4842:	89 2b       	or	r24, r25
    4844:	21 f0       	breq	.+8      	; 0x484e <vTaskDelayUntil+0x286>
    4846:	ce 01       	movw	r24, r28
    4848:	0c 96       	adiw	r24, 0x0c	; 12
    484a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    484e:	8e 89       	ldd	r24, Y+22	; 0x16
    4850:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4854:	98 17       	cp	r25, r24
    4856:	10 f4       	brcc	.+4      	; 0x485c <vTaskDelayUntil+0x294>
    4858:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	9c 01       	movw	r18, r24
    4860:	22 0f       	add	r18, r18
    4862:	33 1f       	adc	r19, r19
    4864:	22 0f       	add	r18, r18
    4866:	33 1f       	adc	r19, r19
    4868:	22 0f       	add	r18, r18
    486a:	33 1f       	adc	r19, r19
    486c:	82 0f       	add	r24, r18
    486e:	93 1f       	adc	r25, r19
    4870:	b8 01       	movw	r22, r16
    4872:	83 59       	subi	r24, 0x93	; 147
    4874:	95 4e       	sbci	r25, 0xE5	; 229
    4876:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    487a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    487e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4882:	9e 89       	ldd	r25, Y+22	; 0x16
    4884:	86 89       	ldd	r24, Z+22	; 0x16
    4886:	98 17       	cp	r25, r24
    4888:	08 f4       	brcc	.+2      	; 0x488c <vTaskDelayUntil+0x2c4>
    488a:	b4 cf       	rjmp	.-152    	; 0x47f4 <vTaskDelayUntil+0x22c>
    488c:	ab 2c       	mov	r10, r11
    488e:	b2 cf       	rjmp	.-156    	; 0x47f4 <vTaskDelayUntil+0x22c>
    4890:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4894:	8f 5f       	subi	r24, 0xFF	; 255
    4896:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    489a:	28 c0       	rjmp	.+80     	; 0x48ec <vTaskDelayUntil+0x324>
    489c:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    48a0:	81 11       	cpse	r24, r1
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <vTaskDelayUntil+0x2de>
    48a4:	a1 10       	cpse	r10, r1
    48a6:	b0 92 3e 1a 	sts	0x1A3E, r11	; 0x801a3e <xYieldPending>
    48aa:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    48ae:	81 50       	subi	r24, 0x01	; 1
    48b0:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    48b4:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    48b8:	81 11       	cpse	r24, r1
    48ba:	4e cf       	rjmp	.-356    	; 0x4758 <vTaskDelayUntil+0x190>
    48bc:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    48c0:	81 30       	cpi	r24, 0x01	; 1
    48c2:	31 f4       	brne	.+12     	; 0x48d0 <vTaskDelayUntil+0x308>
    48c4:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	03 c0       	rjmp	.+6      	; 0x48d2 <vTaskDelayUntil+0x30a>
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	01 c0       	rjmp	.+2      	; 0x48d2 <vTaskDelayUntil+0x30a>
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	0f 90       	pop	r0
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	81 11       	cpse	r24, r1
    48d8:	0e c0       	rjmp	.+28     	; 0x48f6 <vTaskDelayUntil+0x32e>
    48da:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    48de:	0b c0       	rjmp	.+22     	; 0x48f6 <vTaskDelayUntil+0x32e>
    48e0:	d1 83       	std	Z+1, r29	; 0x01
    48e2:	c0 83       	st	Z, r28
    48e4:	a2 ce       	rjmp	.-700    	; 0x462a <vTaskDelayUntil+0x62>
    48e6:	d1 83       	std	Z+1, r29	; 0x01
    48e8:	c0 83       	st	Z, r28
    48ea:	d7 ce       	rjmp	.-594    	; 0x469a <vTaskDelayUntil+0xd2>
    48ec:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    48f0:	81 11       	cpse	r24, r1
    48f2:	d9 cf       	rjmp	.-78     	; 0x48a6 <vTaskDelayUntil+0x2de>
    48f4:	da cf       	rjmp	.-76     	; 0x48aa <vTaskDelayUntil+0x2e2>
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	1f 91       	pop	r17
    48fc:	0f 91       	pop	r16
    48fe:	ff 90       	pop	r15
    4900:	ef 90       	pop	r14
    4902:	df 90       	pop	r13
    4904:	cf 90       	pop	r12
    4906:	bf 90       	pop	r11
    4908:	af 90       	pop	r10
    490a:	9f 90       	pop	r9
    490c:	08 95       	ret

0000490e <vTaskDelay>:
    490e:	9f 92       	push	r9
    4910:	af 92       	push	r10
    4912:	bf 92       	push	r11
    4914:	cf 92       	push	r12
    4916:	df 92       	push	r13
    4918:	ef 92       	push	r14
    491a:	ff 92       	push	r15
    491c:	0f 93       	push	r16
    491e:	1f 93       	push	r17
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	09 f4       	brne	.+2      	; 0x492a <vTaskDelay+0x1c>
    4928:	63 c1       	rjmp	.+710    	; 0x4bf0 <vTaskDelay+0x2e2>
    492a:	20 91 39 1a 	lds	r18, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    492e:	2f 5f       	subi	r18, 0xFF	; 255
    4930:	20 93 39 1a 	sts	0x1A39, r18	; 0x801a39 <uxSchedulerSuspended>
    4934:	c0 91 42 1a 	lds	r28, 0x1A42	; 0x801a42 <xTickCount>
    4938:	d0 91 43 1a 	lds	r29, 0x1A43	; 0x801a43 <xTickCount+0x1>
    493c:	c8 0f       	add	r28, r24
    493e:	d9 1f       	adc	r29, r25
    4940:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4944:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4948:	02 96       	adiw	r24, 0x02	; 2
    494a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    494e:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4952:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4956:	d3 83       	std	Z+3, r29	; 0x03
    4958:	c2 83       	std	Z+2, r28	; 0x02
    495a:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    495e:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4962:	c8 17       	cp	r28, r24
    4964:	d9 07       	cpc	r29, r25
    4966:	68 f4       	brcc	.+26     	; 0x4982 <vTaskDelay+0x74>
    4968:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    496c:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4970:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    4974:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4978:	6e 5f       	subi	r22, 0xFE	; 254
    497a:	7f 4f       	sbci	r23, 0xFF	; 255
    497c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4980:	17 c0       	rjmp	.+46     	; 0x49b0 <vTaskDelay+0xa2>
    4982:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4986:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    498a:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    498e:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4992:	6e 5f       	subi	r22, 0xFE	; 254
    4994:	7f 4f       	sbci	r23, 0xFF	; 255
    4996:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    499a:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    499e:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    49a2:	c8 17       	cp	r28, r24
    49a4:	d9 07       	cpc	r29, r25
    49a6:	20 f4       	brcc	.+8      	; 0x49b0 <vTaskDelay+0xa2>
    49a8:	d0 93 3b 1a 	sts	0x1A3B, r29	; 0x801a3b <xNextTaskUnblockTime+0x1>
    49ac:	c0 93 3a 1a 	sts	0x1A3A, r28	; 0x801a3a <xNextTaskUnblockTime>
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	0f 92       	push	r0
    49b6:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    49ba:	81 50       	subi	r24, 0x01	; 1
    49bc:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <uxSchedulerSuspended>
    49c0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    49c4:	81 11       	cpse	r24, r1
    49c6:	0d c1       	rjmp	.+538    	; 0x4be2 <vTaskDelay+0x2d4>
    49c8:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    49cc:	81 11       	cpse	r24, r1
    49ce:	33 c0       	rjmp	.+102    	; 0x4a36 <vTaskDelay+0x128>
    49d0:	0b c1       	rjmp	.+534    	; 0x4be8 <vTaskDelay+0x2da>
    49d2:	d7 01       	movw	r26, r14
    49d4:	15 96       	adiw	r26, 0x05	; 5
    49d6:	ed 91       	ld	r30, X+
    49d8:	fc 91       	ld	r31, X
    49da:	16 97       	sbiw	r26, 0x06	; 6
    49dc:	c6 81       	ldd	r28, Z+6	; 0x06
    49de:	d7 81       	ldd	r29, Z+7	; 0x07
    49e0:	ce 01       	movw	r24, r28
    49e2:	0c 96       	adiw	r24, 0x0c	; 12
    49e4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    49e8:	8e 01       	movw	r16, r28
    49ea:	0e 5f       	subi	r16, 0xFE	; 254
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	c8 01       	movw	r24, r16
    49f0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    49f4:	8e 89       	ldd	r24, Y+22	; 0x16
    49f6:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    49fa:	98 17       	cp	r25, r24
    49fc:	10 f4       	brcc	.+4      	; 0x4a02 <vTaskDelay+0xf4>
    49fe:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	9c 01       	movw	r18, r24
    4a06:	22 0f       	add	r18, r18
    4a08:	33 1f       	adc	r19, r19
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	22 0f       	add	r18, r18
    4a10:	33 1f       	adc	r19, r19
    4a12:	82 0f       	add	r24, r18
    4a14:	93 1f       	adc	r25, r19
    4a16:	b8 01       	movw	r22, r16
    4a18:	83 59       	subi	r24, 0x93	; 147
    4a1a:	95 4e       	sbci	r25, 0xE5	; 229
    4a1c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4a20:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4a24:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4a28:	9e 89       	ldd	r25, Y+22	; 0x16
    4a2a:	86 89       	ldd	r24, Z+22	; 0x16
    4a2c:	98 17       	cp	r25, r24
    4a2e:	58 f0       	brcs	.+22     	; 0x4a46 <vTaskDelay+0x138>
    4a30:	d0 92 3e 1a 	sts	0x1A3E, r13	; 0x801a3e <xYieldPending>
    4a34:	08 c0       	rjmp	.+16     	; 0x4a46 <vTaskDelay+0x138>
    4a36:	0f 2e       	mov	r0, r31
    4a38:	fe e4       	ldi	r31, 0x4E	; 78
    4a3a:	ef 2e       	mov	r14, r31
    4a3c:	fa e1       	ldi	r31, 0x1A	; 26
    4a3e:	ff 2e       	mov	r15, r31
    4a40:	f0 2d       	mov	r31, r0
    4a42:	dd 24       	eor	r13, r13
    4a44:	d3 94       	inc	r13
    4a46:	f7 01       	movw	r30, r14
    4a48:	80 81       	ld	r24, Z
    4a4a:	81 11       	cpse	r24, r1
    4a4c:	c2 cf       	rjmp	.-124    	; 0x49d2 <vTaskDelay+0xc4>
    4a4e:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4a52:	88 23       	and	r24, r24
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <vTaskDelay+0x14a>
    4a56:	bd c0       	rjmp	.+378    	; 0x4bd2 <vTaskDelay+0x2c4>
    4a58:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4a5c:	88 23       	and	r24, r24
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <vTaskDelay+0x154>
    4a60:	b8 c0       	rjmp	.+368    	; 0x4bd2 <vTaskDelay+0x2c4>
    4a62:	91 2c       	mov	r9, r1
    4a64:	bb 24       	eor	r11, r11
    4a66:	b3 94       	inc	r11
    4a68:	cc 24       	eor	r12, r12
    4a6a:	ca 94       	dec	r12
    4a6c:	dc 2c       	mov	r13, r12
    4a6e:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    4a72:	81 11       	cpse	r24, r1
    4a74:	98 c0       	rjmp	.+304    	; 0x4ba6 <vTaskDelay+0x298>
    4a76:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    4a7a:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <xTickCount+0x1>
    4a84:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <xTickCount>
    4a88:	e0 90 42 1a 	lds	r14, 0x1A42	; 0x801a42 <xTickCount>
    4a8c:	f0 90 43 1a 	lds	r15, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4a90:	e1 14       	cp	r14, r1
    4a92:	f1 04       	cpc	r15, r1
    4a94:	89 f5       	brne	.+98     	; 0x4af8 <vTaskDelay+0x1ea>
    4a96:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4a9a:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4a9e:	20 91 57 1a 	lds	r18, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    4aa2:	30 91 58 1a 	lds	r19, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4aa6:	30 93 5a 1a 	sts	0x1A5A, r19	; 0x801a5a <pxDelayedTaskList+0x1>
    4aaa:	20 93 59 1a 	sts	0x1A59, r18	; 0x801a59 <pxDelayedTaskList>
    4aae:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4ab2:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    4ab6:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    4aba:	8f 5f       	subi	r24, 0xFF	; 255
    4abc:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <xNumOfOverflows>
    4ac0:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4ac4:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4ac8:	80 81       	ld	r24, Z
    4aca:	81 11       	cpse	r24, r1
    4acc:	05 c0       	rjmp	.+10     	; 0x4ad8 <vTaskDelay+0x1ca>
    4ace:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4ad2:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    4ad6:	10 c0       	rjmp	.+32     	; 0x4af8 <vTaskDelay+0x1ea>
    4ad8:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4adc:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4ae0:	05 80       	ldd	r0, Z+5	; 0x05
    4ae2:	f6 81       	ldd	r31, Z+6	; 0x06
    4ae4:	e0 2d       	mov	r30, r0
    4ae6:	06 80       	ldd	r0, Z+6	; 0x06
    4ae8:	f7 81       	ldd	r31, Z+7	; 0x07
    4aea:	e0 2d       	mov	r30, r0
    4aec:	82 81       	ldd	r24, Z+2	; 0x02
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4af4:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4af8:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    4afc:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4b00:	e8 16       	cp	r14, r24
    4b02:	f9 06       	cpc	r15, r25
    4b04:	08 f4       	brcc	.+2      	; 0x4b08 <vTaskDelay+0x1fa>
    4b06:	77 c0       	rjmp	.+238    	; 0x4bf6 <vTaskDelay+0x2e8>
    4b08:	a9 2c       	mov	r10, r9
    4b0a:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4b0e:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4b12:	80 81       	ld	r24, Z
    4b14:	81 11       	cpse	r24, r1
    4b16:	05 c0       	rjmp	.+10     	; 0x4b22 <vTaskDelay+0x214>
    4b18:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4b1c:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    4b20:	48 c0       	rjmp	.+144    	; 0x4bb2 <vTaskDelay+0x2a4>
    4b22:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4b26:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4b2a:	05 80       	ldd	r0, Z+5	; 0x05
    4b2c:	f6 81       	ldd	r31, Z+6	; 0x06
    4b2e:	e0 2d       	mov	r30, r0
    4b30:	c6 81       	ldd	r28, Z+6	; 0x06
    4b32:	d7 81       	ldd	r29, Z+7	; 0x07
    4b34:	8a 81       	ldd	r24, Y+2	; 0x02
    4b36:	9b 81       	ldd	r25, Y+3	; 0x03
    4b38:	e8 16       	cp	r14, r24
    4b3a:	f9 06       	cpc	r15, r25
    4b3c:	28 f4       	brcc	.+10     	; 0x4b48 <vTaskDelay+0x23a>
    4b3e:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4b42:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4b46:	35 c0       	rjmp	.+106    	; 0x4bb2 <vTaskDelay+0x2a4>
    4b48:	8e 01       	movw	r16, r28
    4b4a:	0e 5f       	subi	r16, 0xFE	; 254
    4b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4e:	c8 01       	movw	r24, r16
    4b50:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b54:	8c 89       	ldd	r24, Y+20	; 0x14
    4b56:	9d 89       	ldd	r25, Y+21	; 0x15
    4b58:	89 2b       	or	r24, r25
    4b5a:	21 f0       	breq	.+8      	; 0x4b64 <vTaskDelay+0x256>
    4b5c:	ce 01       	movw	r24, r28
    4b5e:	0c 96       	adiw	r24, 0x0c	; 12
    4b60:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b64:	8e 89       	ldd	r24, Y+22	; 0x16
    4b66:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4b6a:	98 17       	cp	r25, r24
    4b6c:	10 f4       	brcc	.+4      	; 0x4b72 <vTaskDelay+0x264>
    4b6e:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	9c 01       	movw	r18, r24
    4b76:	22 0f       	add	r18, r18
    4b78:	33 1f       	adc	r19, r19
    4b7a:	22 0f       	add	r18, r18
    4b7c:	33 1f       	adc	r19, r19
    4b7e:	22 0f       	add	r18, r18
    4b80:	33 1f       	adc	r19, r19
    4b82:	82 0f       	add	r24, r18
    4b84:	93 1f       	adc	r25, r19
    4b86:	b8 01       	movw	r22, r16
    4b88:	83 59       	subi	r24, 0x93	; 147
    4b8a:	95 4e       	sbci	r25, 0xE5	; 229
    4b8c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4b90:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4b94:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4b98:	9e 89       	ldd	r25, Y+22	; 0x16
    4b9a:	86 89       	ldd	r24, Z+22	; 0x16
    4b9c:	98 17       	cp	r25, r24
    4b9e:	08 f4       	brcc	.+2      	; 0x4ba2 <vTaskDelay+0x294>
    4ba0:	b4 cf       	rjmp	.-152    	; 0x4b0a <vTaskDelay+0x1fc>
    4ba2:	ab 2c       	mov	r10, r11
    4ba4:	b2 cf       	rjmp	.-156    	; 0x4b0a <vTaskDelay+0x1fc>
    4ba6:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4baa:	8f 5f       	subi	r24, 0xFF	; 255
    4bac:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    4bb0:	22 c0       	rjmp	.+68     	; 0x4bf6 <vTaskDelay+0x2e8>
    4bb2:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	01 c0       	rjmp	.+2      	; 0x4bbc <vTaskDelay+0x2ae>
    4bba:	a1 10       	cpse	r10, r1
    4bbc:	b0 92 3e 1a 	sts	0x1A3E, r11	; 0x801a3e <xYieldPending>
    4bc0:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4bc4:	81 50       	subi	r24, 0x01	; 1
    4bc6:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    4bca:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4bce:	81 11       	cpse	r24, r1
    4bd0:	4e cf       	rjmp	.-356    	; 0x4a6e <vTaskDelay+0x160>
    4bd2:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    4bd6:	81 30       	cpi	r24, 0x01	; 1
    4bd8:	31 f4       	brne	.+12     	; 0x4be6 <vTaskDelay+0x2d8>
    4bda:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	03 c0       	rjmp	.+6      	; 0x4be8 <vTaskDelay+0x2da>
    4be2:	80 e0       	ldi	r24, 0x00	; 0
    4be4:	01 c0       	rjmp	.+2      	; 0x4be8 <vTaskDelay+0x2da>
    4be6:	80 e0       	ldi	r24, 0x00	; 0
    4be8:	0f 90       	pop	r0
    4bea:	0f be       	out	0x3f, r0	; 63
    4bec:	81 11       	cpse	r24, r1
    4bee:	08 c0       	rjmp	.+16     	; 0x4c00 <vTaskDelay+0x2f2>
    4bf0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    4bf4:	05 c0       	rjmp	.+10     	; 0x4c00 <vTaskDelay+0x2f2>
    4bf6:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    4bfa:	81 11       	cpse	r24, r1
    4bfc:	df cf       	rjmp	.-66     	; 0x4bbc <vTaskDelay+0x2ae>
    4bfe:	e0 cf       	rjmp	.-64     	; 0x4bc0 <vTaskDelay+0x2b2>
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	ff 90       	pop	r15
    4c0a:	ef 90       	pop	r14
    4c0c:	df 90       	pop	r13
    4c0e:	cf 90       	pop	r12
    4c10:	bf 90       	pop	r11
    4c12:	af 90       	pop	r10
    4c14:	9f 90       	pop	r9
    4c16:	08 95       	ret

00004c18 <vTaskStartScheduler>:
    4c18:	cf 92       	push	r12
    4c1a:	df 92       	push	r13
    4c1c:	ef 92       	push	r14
    4c1e:	ff 92       	push	r15
    4c20:	0f 93       	push	r16
    4c22:	1f 93       	push	r17
    4c24:	cf 93       	push	r28
    4c26:	df 93       	push	r29
    4c28:	85 e5       	ldi	r24, 0x55	; 85
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c30:	8c 01       	movw	r16, r24
    4c32:	89 2b       	or	r24, r25
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <vTaskStartScheduler+0x20>
    4c36:	cb c0       	rjmp	.+406    	; 0x4dce <vTaskStartScheduler+0x1b6>
    4c38:	88 e2       	ldi	r24, 0x28	; 40
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c40:	ec 01       	movw	r28, r24
    4c42:	89 2b       	or	r24, r25
    4c44:	69 f0       	breq	.+26     	; 0x4c60 <vTaskStartScheduler+0x48>
    4c46:	18 8f       	std	Y+24, r17	; 0x18
    4c48:	0f 8b       	std	Y+23, r16	; 0x17
    4c4a:	0c 5a       	subi	r16, 0xAC	; 172
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	89 e4       	ldi	r24, 0x49	; 73
    4c50:	89 8f       	std	Y+25, r24	; 0x19
    4c52:	ec ef       	ldi	r30, 0xFC	; 252
    4c54:	f6 e0       	ldi	r31, 0x06	; 6
    4c56:	de 01       	movw	r26, r28
    4c58:	5a 96       	adiw	r26, 0x1a	; 26
    4c5a:	23 e0       	ldi	r18, 0x03	; 3
    4c5c:	37 e0       	ldi	r19, 0x07	; 7
    4c5e:	04 c0       	rjmp	.+8      	; 0x4c68 <vTaskStartScheduler+0x50>
    4c60:	c8 01       	movw	r24, r16
    4c62:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4c66:	b3 c0       	rjmp	.+358    	; 0x4dce <vTaskStartScheduler+0x1b6>
    4c68:	91 91       	ld	r25, Z+
    4c6a:	9d 93       	st	X+, r25
    4c6c:	99 23       	and	r25, r25
    4c6e:	19 f0       	breq	.+6      	; 0x4c76 <vTaskStartScheduler+0x5e>
    4c70:	2e 17       	cp	r18, r30
    4c72:	3f 07       	cpc	r19, r31
    4c74:	c9 f7       	brne	.-14     	; 0x4c68 <vTaskStartScheduler+0x50>
    4c76:	18 a2       	std	Y+32, r1	; 0x20
    4c78:	1e 8a       	std	Y+22, r1	; 0x16
    4c7a:	19 a2       	std	Y+33, r1	; 0x21
    4c7c:	1a a2       	std	Y+34, r1	; 0x22
    4c7e:	7e 01       	movw	r14, r28
    4c80:	82 e0       	ldi	r24, 0x02	; 2
    4c82:	e8 0e       	add	r14, r24
    4c84:	f1 1c       	adc	r15, r1
    4c86:	c7 01       	movw	r24, r14
    4c88:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	0c 96       	adiw	r24, 0x0c	; 12
    4c90:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c94:	d9 87       	std	Y+9, r29	; 0x09
    4c96:	c8 87       	std	Y+8, r28	; 0x08
    4c98:	86 e0       	ldi	r24, 0x06	; 6
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	9d 87       	std	Y+13, r25	; 0x0d
    4c9e:	8c 87       	std	Y+12, r24	; 0x0c
    4ca0:	db 8b       	std	Y+19, r29	; 0x13
    4ca2:	ca 8b       	std	Y+18, r28	; 0x12
    4ca4:	1b a2       	std	Y+35, r1	; 0x23
    4ca6:	1c a2       	std	Y+36, r1	; 0x24
    4ca8:	1d a2       	std	Y+37, r1	; 0x25
    4caa:	1e a2       	std	Y+38, r1	; 0x26
    4cac:	1f a2       	std	Y+39, r1	; 0x27
    4cae:	40 e0       	ldi	r20, 0x00	; 0
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	69 e1       	ldi	r22, 0x19	; 25
    4cb4:	71 e0       	ldi	r23, 0x01	; 1
    4cb6:	c8 01       	movw	r24, r16
    4cb8:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <pxPortInitialiseStack>
    4cbc:	99 83       	std	Y+1, r25	; 0x01
    4cbe:	88 83       	st	Y, r24
    4cc0:	0f b6       	in	r0, 0x3f	; 63
    4cc2:	f8 94       	cli
    4cc4:	0f 92       	push	r0
    4cc6:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    4cca:	8f 5f       	subi	r24, 0xFF	; 255
    4ccc:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <uxCurrentNumberOfTasks>
    4cd0:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4cd4:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4cd8:	89 2b       	or	r24, r25
    4cda:	a9 f5       	brne	.+106    	; 0x4d46 <vTaskStartScheduler+0x12e>
    4cdc:	d0 93 a4 1a 	sts	0x1AA4, r29	; 0x801aa4 <pxCurrentTCB+0x1>
    4ce0:	c0 93 a3 1a 	sts	0x1AA3, r28	; 0x801aa3 <pxCurrentTCB>
    4ce4:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    4ce8:	81 30       	cpi	r24, 0x01	; 1
    4cea:	e1 f5       	brne	.+120    	; 0x4d64 <vTaskStartScheduler+0x14c>
    4cec:	0d e6       	ldi	r16, 0x6D	; 109
    4cee:	1a e1       	ldi	r17, 0x1A	; 26
    4cf0:	0f 2e       	mov	r0, r31
    4cf2:	f3 ea       	ldi	r31, 0xA3	; 163
    4cf4:	cf 2e       	mov	r12, r31
    4cf6:	fa e1       	ldi	r31, 0x1A	; 26
    4cf8:	df 2e       	mov	r13, r31
    4cfa:	f0 2d       	mov	r31, r0
    4cfc:	c8 01       	movw	r24, r16
    4cfe:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d02:	07 5f       	subi	r16, 0xF7	; 247
    4d04:	1f 4f       	sbci	r17, 0xFF	; 255
    4d06:	0c 15       	cp	r16, r12
    4d08:	1d 05       	cpc	r17, r13
    4d0a:	c1 f7       	brne	.-16     	; 0x4cfc <vTaskStartScheduler+0xe4>
    4d0c:	84 e6       	ldi	r24, 0x64	; 100
    4d0e:	9a e1       	ldi	r25, 0x1A	; 26
    4d10:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d14:	8b e5       	ldi	r24, 0x5B	; 91
    4d16:	9a e1       	ldi	r25, 0x1A	; 26
    4d18:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d1c:	8e e4       	ldi	r24, 0x4E	; 78
    4d1e:	9a e1       	ldi	r25, 0x1A	; 26
    4d20:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d24:	85 e4       	ldi	r24, 0x45	; 69
    4d26:	9a e1       	ldi	r25, 0x1A	; 26
    4d28:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d2c:	84 e6       	ldi	r24, 0x64	; 100
    4d2e:	9a e1       	ldi	r25, 0x1A	; 26
    4d30:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <pxDelayedTaskList+0x1>
    4d34:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <pxDelayedTaskList>
    4d38:	8b e5       	ldi	r24, 0x5B	; 91
    4d3a:	9a e1       	ldi	r25, 0x1A	; 26
    4d3c:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4d40:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    4d44:	0f c0       	rjmp	.+30     	; 0x4d64 <vTaskStartScheduler+0x14c>
    4d46:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <xSchedulerRunning>
    4d4a:	81 11       	cpse	r24, r1
    4d4c:	0b c0       	rjmp	.+22     	; 0x4d64 <vTaskStartScheduler+0x14c>
    4d4e:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4d52:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4d56:	86 89       	ldd	r24, Z+22	; 0x16
    4d58:	81 11       	cpse	r24, r1
    4d5a:	04 c0       	rjmp	.+8      	; 0x4d64 <vTaskStartScheduler+0x14c>
    4d5c:	d0 93 a4 1a 	sts	0x1AA4, r29	; 0x801aa4 <pxCurrentTCB+0x1>
    4d60:	c0 93 a3 1a 	sts	0x1AA3, r28	; 0x801aa3 <pxCurrentTCB>
    4d64:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <uxTaskNumber>
    4d68:	8f 5f       	subi	r24, 0xFF	; 255
    4d6a:	80 93 3c 1a 	sts	0x1A3C, r24	; 0x801a3c <uxTaskNumber>
    4d6e:	8e 89       	ldd	r24, Y+22	; 0x16
    4d70:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4d74:	98 17       	cp	r25, r24
    4d76:	10 f4       	brcc	.+4      	; 0x4d7c <vTaskStartScheduler+0x164>
    4d78:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	9c 01       	movw	r18, r24
    4d80:	22 0f       	add	r18, r18
    4d82:	33 1f       	adc	r19, r19
    4d84:	22 0f       	add	r18, r18
    4d86:	33 1f       	adc	r19, r19
    4d88:	22 0f       	add	r18, r18
    4d8a:	33 1f       	adc	r19, r19
    4d8c:	82 0f       	add	r24, r18
    4d8e:	93 1f       	adc	r25, r19
    4d90:	b7 01       	movw	r22, r14
    4d92:	83 59       	subi	r24, 0x93	; 147
    4d94:	95 4e       	sbci	r25, 0xE5	; 229
    4d96:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4d9a:	0f 90       	pop	r0
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <xSchedulerRunning>
    4da2:	88 23       	and	r24, r24
    4da4:	21 f0       	breq	.+8      	; 0x4dae <vTaskStartScheduler+0x196>
    4da6:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4daa:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4dae:	f8 94       	cli
    4db0:	8f ef       	ldi	r24, 0xFF	; 255
    4db2:	9f ef       	ldi	r25, 0xFF	; 255
    4db4:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4db8:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <xSchedulerRunning>
    4dc2:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <xTickCount+0x1>
    4dc6:	10 92 42 1a 	sts	0x1A42, r1	; 0x801a42 <xTickCount>
    4dca:	0e 94 40 17 	call	0x2e80	; 0x2e80 <xPortStartScheduler>
    4dce:	df 91       	pop	r29
    4dd0:	cf 91       	pop	r28
    4dd2:	1f 91       	pop	r17
    4dd4:	0f 91       	pop	r16
    4dd6:	ff 90       	pop	r15
    4dd8:	ef 90       	pop	r14
    4dda:	df 90       	pop	r13
    4ddc:	cf 90       	pop	r12
    4dde:	08 95       	ret

00004de0 <vTaskSuspendAll>:
    4de0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    4de4:	8f 5f       	subi	r24, 0xFF	; 255
    4de6:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <uxSchedulerSuspended>
    4dea:	08 95       	ret

00004dec <xTaskResumeAll>:
    4dec:	9f 92       	push	r9
    4dee:	af 92       	push	r10
    4df0:	bf 92       	push	r11
    4df2:	cf 92       	push	r12
    4df4:	df 92       	push	r13
    4df6:	ef 92       	push	r14
    4df8:	ff 92       	push	r15
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	cf 93       	push	r28
    4e00:	df 93       	push	r29
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	f8 94       	cli
    4e06:	0f 92       	push	r0
    4e08:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    4e0c:	81 50       	subi	r24, 0x01	; 1
    4e0e:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <uxSchedulerSuspended>
    4e12:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    4e16:	81 11       	cpse	r24, r1
    4e18:	0d c1       	rjmp	.+538    	; 0x5034 <xTaskResumeAll+0x248>
    4e1a:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <uxCurrentNumberOfTasks>
    4e1e:	81 11       	cpse	r24, r1
    4e20:	33 c0       	rjmp	.+102    	; 0x4e88 <xTaskResumeAll+0x9c>
    4e22:	0b c1       	rjmp	.+534    	; 0x503a <xTaskResumeAll+0x24e>
    4e24:	d7 01       	movw	r26, r14
    4e26:	15 96       	adiw	r26, 0x05	; 5
    4e28:	ed 91       	ld	r30, X+
    4e2a:	fc 91       	ld	r31, X
    4e2c:	16 97       	sbiw	r26, 0x06	; 6
    4e2e:	c6 81       	ldd	r28, Z+6	; 0x06
    4e30:	d7 81       	ldd	r29, Z+7	; 0x07
    4e32:	ce 01       	movw	r24, r28
    4e34:	0c 96       	adiw	r24, 0x0c	; 12
    4e36:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e3a:	8e 01       	movw	r16, r28
    4e3c:	0e 5f       	subi	r16, 0xFE	; 254
    4e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e40:	c8 01       	movw	r24, r16
    4e42:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e46:	8e 89       	ldd	r24, Y+22	; 0x16
    4e48:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4e4c:	98 17       	cp	r25, r24
    4e4e:	10 f4       	brcc	.+4      	; 0x4e54 <xTaskResumeAll+0x68>
    4e50:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	9c 01       	movw	r18, r24
    4e58:	22 0f       	add	r18, r18
    4e5a:	33 1f       	adc	r19, r19
    4e5c:	22 0f       	add	r18, r18
    4e5e:	33 1f       	adc	r19, r19
    4e60:	22 0f       	add	r18, r18
    4e62:	33 1f       	adc	r19, r19
    4e64:	82 0f       	add	r24, r18
    4e66:	93 1f       	adc	r25, r19
    4e68:	b8 01       	movw	r22, r16
    4e6a:	83 59       	subi	r24, 0x93	; 147
    4e6c:	95 4e       	sbci	r25, 0xE5	; 229
    4e6e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4e72:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4e76:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4e7a:	9e 89       	ldd	r25, Y+22	; 0x16
    4e7c:	86 89       	ldd	r24, Z+22	; 0x16
    4e7e:	98 17       	cp	r25, r24
    4e80:	58 f0       	brcs	.+22     	; 0x4e98 <xTaskResumeAll+0xac>
    4e82:	d0 92 3e 1a 	sts	0x1A3E, r13	; 0x801a3e <xYieldPending>
    4e86:	08 c0       	rjmp	.+16     	; 0x4e98 <xTaskResumeAll+0xac>
    4e88:	0f 2e       	mov	r0, r31
    4e8a:	fe e4       	ldi	r31, 0x4E	; 78
    4e8c:	ef 2e       	mov	r14, r31
    4e8e:	fa e1       	ldi	r31, 0x1A	; 26
    4e90:	ff 2e       	mov	r15, r31
    4e92:	f0 2d       	mov	r31, r0
    4e94:	dd 24       	eor	r13, r13
    4e96:	d3 94       	inc	r13
    4e98:	f7 01       	movw	r30, r14
    4e9a:	80 81       	ld	r24, Z
    4e9c:	81 11       	cpse	r24, r1
    4e9e:	c2 cf       	rjmp	.-124    	; 0x4e24 <xTaskResumeAll+0x38>
    4ea0:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4ea4:	88 23       	and	r24, r24
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <xTaskResumeAll+0xbe>
    4ea8:	bd c0       	rjmp	.+378    	; 0x5024 <xTaskResumeAll+0x238>
    4eaa:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4eae:	88 23       	and	r24, r24
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <xTaskResumeAll+0xc8>
    4eb2:	b8 c0       	rjmp	.+368    	; 0x5024 <xTaskResumeAll+0x238>
    4eb4:	91 2c       	mov	r9, r1
    4eb6:	bb 24       	eor	r11, r11
    4eb8:	b3 94       	inc	r11
    4eba:	cc 24       	eor	r12, r12
    4ebc:	ca 94       	dec	r12
    4ebe:	dc 2c       	mov	r13, r12
    4ec0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    4ec4:	81 11       	cpse	r24, r1
    4ec6:	98 c0       	rjmp	.+304    	; 0x4ff8 <xTaskResumeAll+0x20c>
    4ec8:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    4ecc:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4ed0:	01 96       	adiw	r24, 0x01	; 1
    4ed2:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <xTickCount+0x1>
    4ed6:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <xTickCount>
    4eda:	e0 90 42 1a 	lds	r14, 0x1A42	; 0x801a42 <xTickCount>
    4ede:	f0 90 43 1a 	lds	r15, 0x1A43	; 0x801a43 <xTickCount+0x1>
    4ee2:	e1 14       	cp	r14, r1
    4ee4:	f1 04       	cpc	r15, r1
    4ee6:	89 f5       	brne	.+98     	; 0x4f4a <xTaskResumeAll+0x15e>
    4ee8:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4eec:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4ef0:	20 91 57 1a 	lds	r18, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    4ef4:	30 91 58 1a 	lds	r19, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4ef8:	30 93 5a 1a 	sts	0x1A5A, r19	; 0x801a5a <pxDelayedTaskList+0x1>
    4efc:	20 93 59 1a 	sts	0x1A59, r18	; 0x801a59 <pxDelayedTaskList>
    4f00:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    4f04:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    4f08:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    4f0c:	8f 5f       	subi	r24, 0xFF	; 255
    4f0e:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <xNumOfOverflows>
    4f12:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4f16:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4f1a:	80 81       	ld	r24, Z
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	05 c0       	rjmp	.+10     	; 0x4f2a <xTaskResumeAll+0x13e>
    4f20:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4f24:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    4f28:	10 c0       	rjmp	.+32     	; 0x4f4a <xTaskResumeAll+0x15e>
    4f2a:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4f2e:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4f32:	05 80       	ldd	r0, Z+5	; 0x05
    4f34:	f6 81       	ldd	r31, Z+6	; 0x06
    4f36:	e0 2d       	mov	r30, r0
    4f38:	06 80       	ldd	r0, Z+6	; 0x06
    4f3a:	f7 81       	ldd	r31, Z+7	; 0x07
    4f3c:	e0 2d       	mov	r30, r0
    4f3e:	82 81       	ldd	r24, Z+2	; 0x02
    4f40:	93 81       	ldd	r25, Z+3	; 0x03
    4f42:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4f46:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4f4a:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    4f4e:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4f52:	e8 16       	cp	r14, r24
    4f54:	f9 06       	cpc	r15, r25
    4f56:	08 f4       	brcc	.+2      	; 0x4f5a <xTaskResumeAll+0x16e>
    4f58:	73 c0       	rjmp	.+230    	; 0x5040 <xTaskResumeAll+0x254>
    4f5a:	a9 2c       	mov	r10, r9
    4f5c:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4f60:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4f64:	80 81       	ld	r24, Z
    4f66:	81 11       	cpse	r24, r1
    4f68:	05 c0       	rjmp	.+10     	; 0x4f74 <xTaskResumeAll+0x188>
    4f6a:	d0 92 3b 1a 	sts	0x1A3B, r13	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4f6e:	c0 92 3a 1a 	sts	0x1A3A, r12	; 0x801a3a <xNextTaskUnblockTime>
    4f72:	48 c0       	rjmp	.+144    	; 0x5004 <xTaskResumeAll+0x218>
    4f74:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    4f78:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    4f7c:	05 80       	ldd	r0, Z+5	; 0x05
    4f7e:	f6 81       	ldd	r31, Z+6	; 0x06
    4f80:	e0 2d       	mov	r30, r0
    4f82:	c6 81       	ldd	r28, Z+6	; 0x06
    4f84:	d7 81       	ldd	r29, Z+7	; 0x07
    4f86:	8a 81       	ldd	r24, Y+2	; 0x02
    4f88:	9b 81       	ldd	r25, Y+3	; 0x03
    4f8a:	e8 16       	cp	r14, r24
    4f8c:	f9 06       	cpc	r15, r25
    4f8e:	28 f4       	brcc	.+10     	; 0x4f9a <xTaskResumeAll+0x1ae>
    4f90:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    4f94:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    4f98:	35 c0       	rjmp	.+106    	; 0x5004 <xTaskResumeAll+0x218>
    4f9a:	8e 01       	movw	r16, r28
    4f9c:	0e 5f       	subi	r16, 0xFE	; 254
    4f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4fa6:	8c 89       	ldd	r24, Y+20	; 0x14
    4fa8:	9d 89       	ldd	r25, Y+21	; 0x15
    4faa:	89 2b       	or	r24, r25
    4fac:	21 f0       	breq	.+8      	; 0x4fb6 <xTaskResumeAll+0x1ca>
    4fae:	ce 01       	movw	r24, r28
    4fb0:	0c 96       	adiw	r24, 0x0c	; 12
    4fb2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4fb6:	8e 89       	ldd	r24, Y+22	; 0x16
    4fb8:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    4fbc:	98 17       	cp	r25, r24
    4fbe:	10 f4       	brcc	.+4      	; 0x4fc4 <xTaskResumeAll+0x1d8>
    4fc0:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	9c 01       	movw	r18, r24
    4fc8:	22 0f       	add	r18, r18
    4fca:	33 1f       	adc	r19, r19
    4fcc:	22 0f       	add	r18, r18
    4fce:	33 1f       	adc	r19, r19
    4fd0:	22 0f       	add	r18, r18
    4fd2:	33 1f       	adc	r19, r19
    4fd4:	82 0f       	add	r24, r18
    4fd6:	93 1f       	adc	r25, r19
    4fd8:	b8 01       	movw	r22, r16
    4fda:	83 59       	subi	r24, 0x93	; 147
    4fdc:	95 4e       	sbci	r25, 0xE5	; 229
    4fde:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4fe2:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    4fe6:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    4fea:	9e 89       	ldd	r25, Y+22	; 0x16
    4fec:	86 89       	ldd	r24, Z+22	; 0x16
    4fee:	98 17       	cp	r25, r24
    4ff0:	08 f4       	brcc	.+2      	; 0x4ff4 <xTaskResumeAll+0x208>
    4ff2:	b4 cf       	rjmp	.-152    	; 0x4f5c <xTaskResumeAll+0x170>
    4ff4:	ab 2c       	mov	r10, r11
    4ff6:	b2 cf       	rjmp	.-156    	; 0x4f5c <xTaskResumeAll+0x170>
    4ff8:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    4ffc:	8f 5f       	subi	r24, 0xFF	; 255
    4ffe:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    5002:	1e c0       	rjmp	.+60     	; 0x5040 <xTaskResumeAll+0x254>
    5004:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    5008:	81 11       	cpse	r24, r1
    500a:	01 c0       	rjmp	.+2      	; 0x500e <xTaskResumeAll+0x222>
    500c:	a1 10       	cpse	r10, r1
    500e:	b0 92 3e 1a 	sts	0x1A3E, r11	; 0x801a3e <xYieldPending>
    5012:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    5016:	81 50       	subi	r24, 0x01	; 1
    5018:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    501c:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    5020:	81 11       	cpse	r24, r1
    5022:	4e cf       	rjmp	.-356    	; 0x4ec0 <xTaskResumeAll+0xd4>
    5024:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    5028:	81 30       	cpi	r24, 0x01	; 1
    502a:	31 f4       	brne	.+12     	; 0x5038 <xTaskResumeAll+0x24c>
    502c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	03 c0       	rjmp	.+6      	; 0x503a <xTaskResumeAll+0x24e>
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	01 c0       	rjmp	.+2      	; 0x503a <xTaskResumeAll+0x24e>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	0f 90       	pop	r0
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	05 c0       	rjmp	.+10     	; 0x504a <xTaskResumeAll+0x25e>
    5040:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    5044:	81 11       	cpse	r24, r1
    5046:	e3 cf       	rjmp	.-58     	; 0x500e <xTaskResumeAll+0x222>
    5048:	e4 cf       	rjmp	.-56     	; 0x5012 <xTaskResumeAll+0x226>
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	1f 91       	pop	r17
    5050:	0f 91       	pop	r16
    5052:	ff 90       	pop	r15
    5054:	ef 90       	pop	r14
    5056:	df 90       	pop	r13
    5058:	cf 90       	pop	r12
    505a:	bf 90       	pop	r11
    505c:	af 90       	pop	r10
    505e:	9f 90       	pop	r9
    5060:	08 95       	ret

00005062 <xTaskGetTickCount>:
    5062:	0f b6       	in	r0, 0x3f	; 63
    5064:	f8 94       	cli
    5066:	0f 92       	push	r0
    5068:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    506c:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5070:	0f 90       	pop	r0
    5072:	0f be       	out	0x3f, r0	; 63
    5074:	08 95       	ret

00005076 <xTaskIncrementTick>:
    5076:	cf 92       	push	r12
    5078:	df 92       	push	r13
    507a:	ef 92       	push	r14
    507c:	ff 92       	push	r15
    507e:	0f 93       	push	r16
    5080:	1f 93       	push	r17
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    508a:	81 11       	cpse	r24, r1
    508c:	9f c0       	rjmp	.+318    	; 0x51cc <xTaskIncrementTick+0x156>
    508e:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    5092:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5096:	01 96       	adiw	r24, 0x01	; 1
    5098:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <xTickCount+0x1>
    509c:	80 93 42 1a 	sts	0x1A42, r24	; 0x801a42 <xTickCount>
    50a0:	e0 90 42 1a 	lds	r14, 0x1A42	; 0x801a42 <xTickCount>
    50a4:	f0 90 43 1a 	lds	r15, 0x1A43	; 0x801a43 <xTickCount+0x1>
    50a8:	e1 14       	cp	r14, r1
    50aa:	f1 04       	cpc	r15, r1
    50ac:	99 f5       	brne	.+102    	; 0x5114 <xTaskIncrementTick+0x9e>
    50ae:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    50b2:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    50b6:	20 91 57 1a 	lds	r18, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    50ba:	30 91 58 1a 	lds	r19, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    50be:	30 93 5a 1a 	sts	0x1A5A, r19	; 0x801a5a <pxDelayedTaskList+0x1>
    50c2:	20 93 59 1a 	sts	0x1A59, r18	; 0x801a59 <pxDelayedTaskList>
    50c6:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    50ca:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <pxOverflowDelayedTaskList>
    50ce:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    50d2:	8f 5f       	subi	r24, 0xFF	; 255
    50d4:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <xNumOfOverflows>
    50d8:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    50dc:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    50e0:	80 81       	ld	r24, Z
    50e2:	81 11       	cpse	r24, r1
    50e4:	07 c0       	rjmp	.+14     	; 0x50f4 <xTaskIncrementTick+0x7e>
    50e6:	8f ef       	ldi	r24, 0xFF	; 255
    50e8:	9f ef       	ldi	r25, 0xFF	; 255
    50ea:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    50ee:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    50f2:	10 c0       	rjmp	.+32     	; 0x5114 <xTaskIncrementTick+0x9e>
    50f4:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    50f8:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    50fc:	05 80       	ldd	r0, Z+5	; 0x05
    50fe:	f6 81       	ldd	r31, Z+6	; 0x06
    5100:	e0 2d       	mov	r30, r0
    5102:	06 80       	ldd	r0, Z+6	; 0x06
    5104:	f7 81       	ldd	r31, Z+7	; 0x07
    5106:	e0 2d       	mov	r30, r0
    5108:	82 81       	ldd	r24, Z+2	; 0x02
    510a:	93 81       	ldd	r25, Z+3	; 0x03
    510c:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    5110:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    5114:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    5118:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    511c:	e8 16       	cp	r14, r24
    511e:	f9 06       	cpc	r15, r25
    5120:	10 f4       	brcc	.+4      	; 0x5126 <xTaskIncrementTick+0xb0>
    5122:	d1 2c       	mov	r13, r1
    5124:	59 c0       	rjmp	.+178    	; 0x51d8 <xTaskIncrementTick+0x162>
    5126:	d1 2c       	mov	r13, r1
    5128:	cc 24       	eor	r12, r12
    512a:	c3 94       	inc	r12
    512c:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    5130:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    5134:	80 81       	ld	r24, Z
    5136:	81 11       	cpse	r24, r1
    5138:	07 c0       	rjmp	.+14     	; 0x5148 <xTaskIncrementTick+0xd2>
    513a:	8f ef       	ldi	r24, 0xFF	; 255
    513c:	9f ef       	ldi	r25, 0xFF	; 255
    513e:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    5142:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    5146:	48 c0       	rjmp	.+144    	; 0x51d8 <xTaskIncrementTick+0x162>
    5148:	e0 91 59 1a 	lds	r30, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    514c:	f0 91 5a 1a 	lds	r31, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    5150:	05 80       	ldd	r0, Z+5	; 0x05
    5152:	f6 81       	ldd	r31, Z+6	; 0x06
    5154:	e0 2d       	mov	r30, r0
    5156:	c6 81       	ldd	r28, Z+6	; 0x06
    5158:	d7 81       	ldd	r29, Z+7	; 0x07
    515a:	8a 81       	ldd	r24, Y+2	; 0x02
    515c:	9b 81       	ldd	r25, Y+3	; 0x03
    515e:	e8 16       	cp	r14, r24
    5160:	f9 06       	cpc	r15, r25
    5162:	28 f4       	brcc	.+10     	; 0x516e <xTaskIncrementTick+0xf8>
    5164:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <xNextTaskUnblockTime+0x1>
    5168:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <xNextTaskUnblockTime>
    516c:	35 c0       	rjmp	.+106    	; 0x51d8 <xTaskIncrementTick+0x162>
    516e:	8e 01       	movw	r16, r28
    5170:	0e 5f       	subi	r16, 0xFE	; 254
    5172:	1f 4f       	sbci	r17, 0xFF	; 255
    5174:	c8 01       	movw	r24, r16
    5176:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    517a:	8c 89       	ldd	r24, Y+20	; 0x14
    517c:	9d 89       	ldd	r25, Y+21	; 0x15
    517e:	89 2b       	or	r24, r25
    5180:	21 f0       	breq	.+8      	; 0x518a <xTaskIncrementTick+0x114>
    5182:	ce 01       	movw	r24, r28
    5184:	0c 96       	adiw	r24, 0x0c	; 12
    5186:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    518a:	8e 89       	ldd	r24, Y+22	; 0x16
    518c:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5190:	98 17       	cp	r25, r24
    5192:	10 f4       	brcc	.+4      	; 0x5198 <xTaskIncrementTick+0x122>
    5194:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	9c 01       	movw	r18, r24
    519c:	22 0f       	add	r18, r18
    519e:	33 1f       	adc	r19, r19
    51a0:	22 0f       	add	r18, r18
    51a2:	33 1f       	adc	r19, r19
    51a4:	22 0f       	add	r18, r18
    51a6:	33 1f       	adc	r19, r19
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	b8 01       	movw	r22, r16
    51ae:	83 59       	subi	r24, 0x93	; 147
    51b0:	95 4e       	sbci	r25, 0xE5	; 229
    51b2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    51b6:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    51ba:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    51be:	9e 89       	ldd	r25, Y+22	; 0x16
    51c0:	86 89       	ldd	r24, Z+22	; 0x16
    51c2:	98 17       	cp	r25, r24
    51c4:	08 f4       	brcc	.+2      	; 0x51c8 <xTaskIncrementTick+0x152>
    51c6:	b2 cf       	rjmp	.-156    	; 0x512c <xTaskIncrementTick+0xb6>
    51c8:	dc 2c       	mov	r13, r12
    51ca:	b0 cf       	rjmp	.-160    	; 0x512c <xTaskIncrementTick+0xb6>
    51cc:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <uxPendedTicks>
    51d0:	8f 5f       	subi	r24, 0xFF	; 255
    51d2:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <uxPendedTicks>
    51d6:	d1 2c       	mov	r13, r1
    51d8:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <xYieldPending>
    51dc:	88 23       	and	r24, r24
    51de:	11 f0       	breq	.+4      	; 0x51e4 <xTaskIncrementTick+0x16e>
    51e0:	dd 24       	eor	r13, r13
    51e2:	d3 94       	inc	r13
    51e4:	8d 2d       	mov	r24, r13
    51e6:	df 91       	pop	r29
    51e8:	cf 91       	pop	r28
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16
    51ee:	ff 90       	pop	r15
    51f0:	ef 90       	pop	r14
    51f2:	df 90       	pop	r13
    51f4:	cf 90       	pop	r12
    51f6:	08 95       	ret

000051f8 <vTaskSwitchContext>:
    51f8:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    51fc:	88 23       	and	r24, r24
    51fe:	21 f0       	breq	.+8      	; 0x5208 <vTaskSwitchContext+0x10>
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <xYieldPending>
    5206:	08 95       	ret
    5208:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <xYieldPending>
    520c:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5210:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5214:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5218:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    521c:	2d 91       	ld	r18, X+
    521e:	3c 91       	ld	r19, X
    5220:	87 89       	ldd	r24, Z+23	; 0x17
    5222:	90 8d       	ldd	r25, Z+24	; 0x18
    5224:	82 17       	cp	r24, r18
    5226:	93 07       	cpc	r25, r19
    5228:	60 f0       	brcs	.+24     	; 0x5242 <vTaskSwitchContext+0x4a>
    522a:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    522e:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5232:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5236:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    523a:	67 5e       	subi	r22, 0xE7	; 231
    523c:	7f 4f       	sbci	r23, 0xFF	; 255
    523e:	0e 94 de 13 	call	0x27bc	; 0x27bc <vApplicationStackOverflowHook>
    5242:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	fc 01       	movw	r30, r24
    524a:	ee 0f       	add	r30, r30
    524c:	ff 1f       	adc	r31, r31
    524e:	ee 0f       	add	r30, r30
    5250:	ff 1f       	adc	r31, r31
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	8e 0f       	add	r24, r30
    5258:	9f 1f       	adc	r25, r31
    525a:	fc 01       	movw	r30, r24
    525c:	e3 59       	subi	r30, 0x93	; 147
    525e:	f5 4e       	sbci	r31, 0xE5	; 229
    5260:	80 81       	ld	r24, Z
    5262:	81 11       	cpse	r24, r1
    5264:	17 c0       	rjmp	.+46     	; 0x5294 <vTaskSwitchContext+0x9c>
    5266:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    526a:	81 50       	subi	r24, 0x01	; 1
    526c:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    5270:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	fc 01       	movw	r30, r24
    5278:	ee 0f       	add	r30, r30
    527a:	ff 1f       	adc	r31, r31
    527c:	ee 0f       	add	r30, r30
    527e:	ff 1f       	adc	r31, r31
    5280:	ee 0f       	add	r30, r30
    5282:	ff 1f       	adc	r31, r31
    5284:	8e 0f       	add	r24, r30
    5286:	9f 1f       	adc	r25, r31
    5288:	fc 01       	movw	r30, r24
    528a:	e3 59       	subi	r30, 0x93	; 147
    528c:	f5 4e       	sbci	r31, 0xE5	; 229
    528e:	80 81       	ld	r24, Z
    5290:	88 23       	and	r24, r24
    5292:	49 f3       	breq	.-46     	; 0x5266 <vTaskSwitchContext+0x6e>
    5294:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	9c 01       	movw	r18, r24
    529c:	22 0f       	add	r18, r18
    529e:	33 1f       	adc	r19, r19
    52a0:	22 0f       	add	r18, r18
    52a2:	33 1f       	adc	r19, r19
    52a4:	22 0f       	add	r18, r18
    52a6:	33 1f       	adc	r19, r19
    52a8:	28 0f       	add	r18, r24
    52aa:	39 1f       	adc	r19, r25
    52ac:	d9 01       	movw	r26, r18
    52ae:	a3 59       	subi	r26, 0x93	; 147
    52b0:	b5 4e       	sbci	r27, 0xE5	; 229
    52b2:	11 96       	adiw	r26, 0x01	; 1
    52b4:	ed 91       	ld	r30, X+
    52b6:	fc 91       	ld	r31, X
    52b8:	12 97       	sbiw	r26, 0x02	; 2
    52ba:	02 80       	ldd	r0, Z+2	; 0x02
    52bc:	f3 81       	ldd	r31, Z+3	; 0x03
    52be:	e0 2d       	mov	r30, r0
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	fc 93       	st	X, r31
    52c4:	ee 93       	st	-X, r30
    52c6:	11 97       	sbiw	r26, 0x01	; 1
    52c8:	20 59       	subi	r18, 0x90	; 144
    52ca:	35 4e       	sbci	r19, 0xE5	; 229
    52cc:	e2 17       	cp	r30, r18
    52ce:	f3 07       	cpc	r31, r19
    52d0:	29 f4       	brne	.+10     	; 0x52dc <vTaskSwitchContext+0xe4>
    52d2:	22 81       	ldd	r18, Z+2	; 0x02
    52d4:	33 81       	ldd	r19, Z+3	; 0x03
    52d6:	fd 01       	movw	r30, r26
    52d8:	32 83       	std	Z+2, r19	; 0x02
    52da:	21 83       	std	Z+1, r18	; 0x01
    52dc:	fc 01       	movw	r30, r24
    52de:	ee 0f       	add	r30, r30
    52e0:	ff 1f       	adc	r31, r31
    52e2:	ee 0f       	add	r30, r30
    52e4:	ff 1f       	adc	r31, r31
    52e6:	ee 0f       	add	r30, r30
    52e8:	ff 1f       	adc	r31, r31
    52ea:	8e 0f       	add	r24, r30
    52ec:	9f 1f       	adc	r25, r31
    52ee:	fc 01       	movw	r30, r24
    52f0:	e3 59       	subi	r30, 0x93	; 147
    52f2:	f5 4e       	sbci	r31, 0xE5	; 229
    52f4:	01 80       	ldd	r0, Z+1	; 0x01
    52f6:	f2 81       	ldd	r31, Z+2	; 0x02
    52f8:	e0 2d       	mov	r30, r0
    52fa:	86 81       	ldd	r24, Z+6	; 0x06
    52fc:	97 81       	ldd	r25, Z+7	; 0x07
    52fe:	90 93 a4 1a 	sts	0x1AA4, r25	; 0x801aa4 <pxCurrentTCB+0x1>
    5302:	80 93 a3 1a 	sts	0x1AA3, r24	; 0x801aa3 <pxCurrentTCB>
    5306:	08 95       	ret

00005308 <vTaskPlaceOnEventList>:
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	eb 01       	movw	r28, r22
    530e:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5312:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5316:	64 5f       	subi	r22, 0xF4	; 244
    5318:	7f 4f       	sbci	r23, 0xFF	; 255
    531a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    531e:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5322:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5326:	02 96       	adiw	r24, 0x02	; 2
    5328:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    532c:	cf 3f       	cpi	r28, 0xFF	; 255
    532e:	8f ef       	ldi	r24, 0xFF	; 255
    5330:	d8 07       	cpc	r29, r24
    5332:	59 f4       	brne	.+22     	; 0x534a <vTaskPlaceOnEventList+0x42>
    5334:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5338:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    533c:	6e 5f       	subi	r22, 0xFE	; 254
    533e:	7f 4f       	sbci	r23, 0xFF	; 255
    5340:	85 e4       	ldi	r24, 0x45	; 69
    5342:	9a e1       	ldi	r25, 0x1A	; 26
    5344:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5348:	37 c0       	rjmp	.+110    	; 0x53b8 <vTaskPlaceOnEventList+0xb0>
    534a:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    534e:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5352:	c8 0f       	add	r28, r24
    5354:	d9 1f       	adc	r29, r25
    5356:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    535a:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    535e:	d3 83       	std	Z+3, r29	; 0x03
    5360:	c2 83       	std	Z+2, r28	; 0x02
    5362:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    5366:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    536a:	c8 17       	cp	r28, r24
    536c:	d9 07       	cpc	r29, r25
    536e:	68 f4       	brcc	.+26     	; 0x538a <vTaskPlaceOnEventList+0x82>
    5370:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5374:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5378:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    537c:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    5380:	6e 5f       	subi	r22, 0xFE	; 254
    5382:	7f 4f       	sbci	r23, 0xFF	; 255
    5384:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5388:	17 c0       	rjmp	.+46     	; 0x53b8 <vTaskPlaceOnEventList+0xb0>
    538a:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    538e:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5392:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    5396:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    539a:	6e 5f       	subi	r22, 0xFE	; 254
    539c:	7f 4f       	sbci	r23, 0xFF	; 255
    539e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    53a2:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    53a6:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    53aa:	c8 17       	cp	r28, r24
    53ac:	d9 07       	cpc	r29, r25
    53ae:	20 f4       	brcc	.+8      	; 0x53b8 <vTaskPlaceOnEventList+0xb0>
    53b0:	d0 93 3b 1a 	sts	0x1A3B, r29	; 0x801a3b <xNextTaskUnblockTime+0x1>
    53b4:	c0 93 3a 1a 	sts	0x1A3A, r28	; 0x801a3a <xNextTaskUnblockTime>
    53b8:	df 91       	pop	r29
    53ba:	cf 91       	pop	r28
    53bc:	08 95       	ret

000053be <xTaskRemoveFromEventList>:
    53be:	0f 93       	push	r16
    53c0:	1f 93       	push	r17
    53c2:	cf 93       	push	r28
    53c4:	df 93       	push	r29
    53c6:	dc 01       	movw	r26, r24
    53c8:	15 96       	adiw	r26, 0x05	; 5
    53ca:	ed 91       	ld	r30, X+
    53cc:	fc 91       	ld	r31, X
    53ce:	16 97       	sbiw	r26, 0x06	; 6
    53d0:	c6 81       	ldd	r28, Z+6	; 0x06
    53d2:	d7 81       	ldd	r29, Z+7	; 0x07
    53d4:	8e 01       	movw	r16, r28
    53d6:	04 5f       	subi	r16, 0xF4	; 244
    53d8:	1f 4f       	sbci	r17, 0xFF	; 255
    53da:	c8 01       	movw	r24, r16
    53dc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    53e0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    53e4:	81 11       	cpse	r24, r1
    53e6:	1c c0       	rjmp	.+56     	; 0x5420 <xTaskRemoveFromEventList+0x62>
    53e8:	0a 50       	subi	r16, 0x0A	; 10
    53ea:	11 09       	sbc	r17, r1
    53ec:	c8 01       	movw	r24, r16
    53ee:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    53f2:	8e 89       	ldd	r24, Y+22	; 0x16
    53f4:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    53f8:	98 17       	cp	r25, r24
    53fa:	10 f4       	brcc	.+4      	; 0x5400 <xTaskRemoveFromEventList+0x42>
    53fc:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	9c 01       	movw	r18, r24
    5404:	22 0f       	add	r18, r18
    5406:	33 1f       	adc	r19, r19
    5408:	22 0f       	add	r18, r18
    540a:	33 1f       	adc	r19, r19
    540c:	22 0f       	add	r18, r18
    540e:	33 1f       	adc	r19, r19
    5410:	82 0f       	add	r24, r18
    5412:	93 1f       	adc	r25, r19
    5414:	b8 01       	movw	r22, r16
    5416:	83 59       	subi	r24, 0x93	; 147
    5418:	95 4e       	sbci	r25, 0xE5	; 229
    541a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    541e:	05 c0       	rjmp	.+10     	; 0x542a <xTaskRemoveFromEventList+0x6c>
    5420:	b8 01       	movw	r22, r16
    5422:	8e e4       	ldi	r24, 0x4E	; 78
    5424:	9a e1       	ldi	r25, 0x1A	; 26
    5426:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    542a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    542e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5432:	9e 89       	ldd	r25, Y+22	; 0x16
    5434:	86 89       	ldd	r24, Z+22	; 0x16
    5436:	89 17       	cp	r24, r25
    5438:	20 f4       	brcc	.+8      	; 0x5442 <xTaskRemoveFromEventList+0x84>
    543a:	81 e0       	ldi	r24, 0x01	; 1
    543c:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <xYieldPending>
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <xTaskRemoveFromEventList+0x86>
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	df 91       	pop	r29
    5446:	cf 91       	pop	r28
    5448:	1f 91       	pop	r17
    544a:	0f 91       	pop	r16
    544c:	08 95       	ret

0000544e <vTaskSetTimeOutState>:
    544e:	20 91 3d 1a 	lds	r18, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    5452:	fc 01       	movw	r30, r24
    5454:	20 83       	st	Z, r18
    5456:	20 91 42 1a 	lds	r18, 0x1A42	; 0x801a42 <xTickCount>
    545a:	30 91 43 1a 	lds	r19, 0x1A43	; 0x801a43 <xTickCount+0x1>
    545e:	32 83       	std	Z+2, r19	; 0x02
    5460:	21 83       	std	Z+1, r18	; 0x01
    5462:	08 95       	ret

00005464 <xTaskCheckForTimeOut>:
    5464:	fc 01       	movw	r30, r24
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	f8 94       	cli
    546a:	0f 92       	push	r0
    546c:	20 91 42 1a 	lds	r18, 0x1A42	; 0x801a42 <xTickCount>
    5470:	30 91 43 1a 	lds	r19, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5474:	db 01       	movw	r26, r22
    5476:	8d 91       	ld	r24, X+
    5478:	9c 91       	ld	r25, X
    547a:	8f 3f       	cpi	r24, 0xFF	; 255
    547c:	bf ef       	ldi	r27, 0xFF	; 255
    547e:	9b 07       	cpc	r25, r27
    5480:	21 f1       	breq	.+72     	; 0x54ca <xTaskCheckForTimeOut+0x66>
    5482:	40 91 3d 1a 	lds	r20, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    5486:	50 81       	ld	r21, Z
    5488:	54 17       	cp	r21, r20
    548a:	29 f0       	breq	.+10     	; 0x5496 <xTaskCheckForTimeOut+0x32>
    548c:	41 81       	ldd	r20, Z+1	; 0x01
    548e:	52 81       	ldd	r21, Z+2	; 0x02
    5490:	24 17       	cp	r18, r20
    5492:	35 07       	cpc	r19, r21
    5494:	e0 f4       	brcc	.+56     	; 0x54ce <xTaskCheckForTimeOut+0x6a>
    5496:	41 81       	ldd	r20, Z+1	; 0x01
    5498:	52 81       	ldd	r21, Z+2	; 0x02
    549a:	d9 01       	movw	r26, r18
    549c:	a4 1b       	sub	r26, r20
    549e:	b5 0b       	sbc	r27, r21
    54a0:	a8 17       	cp	r26, r24
    54a2:	b9 07       	cpc	r27, r25
    54a4:	b0 f4       	brcc	.+44     	; 0x54d2 <xTaskCheckForTimeOut+0x6e>
    54a6:	42 1b       	sub	r20, r18
    54a8:	53 0b       	sbc	r21, r19
    54aa:	84 0f       	add	r24, r20
    54ac:	95 1f       	adc	r25, r21
    54ae:	db 01       	movw	r26, r22
    54b0:	8d 93       	st	X+, r24
    54b2:	9c 93       	st	X, r25
    54b4:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <xNumOfOverflows>
    54b8:	80 83       	st	Z, r24
    54ba:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    54be:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    54c2:	92 83       	std	Z+2, r25	; 0x02
    54c4:	81 83       	std	Z+1, r24	; 0x01
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	05 c0       	rjmp	.+10     	; 0x54d4 <xTaskCheckForTimeOut+0x70>
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	03 c0       	rjmp	.+6      	; 0x54d4 <xTaskCheckForTimeOut+0x70>
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	01 c0       	rjmp	.+2      	; 0x54d4 <xTaskCheckForTimeOut+0x70>
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	0f 90       	pop	r0
    54d6:	0f be       	out	0x3f, r0	; 63
    54d8:	08 95       	ret

000054da <vTaskMissedYield>:
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <xYieldPending>
    54e0:	08 95       	ret

000054e2 <xTaskGetCurrentTaskHandle>:
    54e2:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    54e6:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    54ea:	08 95       	ret

000054ec <vTaskPriorityInherit>:
    54ec:	0f 93       	push	r16
    54ee:	1f 93       	push	r17
    54f0:	cf 93       	push	r28
    54f2:	df 93       	push	r29
    54f4:	fc 01       	movw	r30, r24
    54f6:	89 2b       	or	r24, r25
    54f8:	09 f4       	brne	.+2      	; 0x54fc <vTaskPriorityInherit+0x10>
    54fa:	55 c0       	rjmp	.+170    	; 0x55a6 <vTaskPriorityInherit+0xba>
    54fc:	26 89       	ldd	r18, Z+22	; 0x16
    54fe:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5502:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5506:	56 96       	adiw	r26, 0x16	; 22
    5508:	8c 91       	ld	r24, X
    550a:	28 17       	cp	r18, r24
    550c:	08 f0       	brcs	.+2      	; 0x5510 <vTaskPriorityInherit+0x24>
    550e:	4b c0       	rjmp	.+150    	; 0x55a6 <vTaskPriorityInherit+0xba>
    5510:	84 85       	ldd	r24, Z+12	; 0x0c
    5512:	95 85       	ldd	r25, Z+13	; 0x0d
    5514:	99 23       	and	r25, r25
    5516:	64 f0       	brlt	.+24     	; 0x5530 <vTaskPriorityInherit+0x44>
    5518:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    551c:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5520:	56 96       	adiw	r26, 0x16	; 22
    5522:	3c 91       	ld	r19, X
    5524:	86 e0       	ldi	r24, 0x06	; 6
    5526:	90 e0       	ldi	r25, 0x00	; 0
    5528:	83 1b       	sub	r24, r19
    552a:	91 09       	sbc	r25, r1
    552c:	95 87       	std	Z+13, r25	; 0x0d
    552e:	84 87       	std	Z+12, r24	; 0x0c
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	c9 01       	movw	r24, r18
    5534:	88 0f       	add	r24, r24
    5536:	99 1f       	adc	r25, r25
    5538:	88 0f       	add	r24, r24
    553a:	99 1f       	adc	r25, r25
    553c:	88 0f       	add	r24, r24
    553e:	99 1f       	adc	r25, r25
    5540:	28 0f       	add	r18, r24
    5542:	39 1f       	adc	r19, r25
    5544:	23 59       	subi	r18, 0x93	; 147
    5546:	35 4e       	sbci	r19, 0xE5	; 229
    5548:	82 85       	ldd	r24, Z+10	; 0x0a
    554a:	93 85       	ldd	r25, Z+11	; 0x0b
    554c:	82 17       	cp	r24, r18
    554e:	93 07       	cpc	r25, r19
    5550:	19 f5       	brne	.+70     	; 0x5598 <vTaskPriorityInherit+0xac>
    5552:	8f 01       	movw	r16, r30
    5554:	ef 01       	movw	r28, r30
    5556:	22 96       	adiw	r28, 0x02	; 2
    5558:	ce 01       	movw	r24, r28
    555a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    555e:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5562:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5566:	86 89       	ldd	r24, Z+22	; 0x16
    5568:	f8 01       	movw	r30, r16
    556a:	86 8b       	std	Z+22, r24	; 0x16
    556c:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5570:	98 17       	cp	r25, r24
    5572:	10 f4       	brcc	.+4      	; 0x5578 <vTaskPriorityInherit+0x8c>
    5574:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	9c 01       	movw	r18, r24
    557c:	22 0f       	add	r18, r18
    557e:	33 1f       	adc	r19, r19
    5580:	22 0f       	add	r18, r18
    5582:	33 1f       	adc	r19, r19
    5584:	22 0f       	add	r18, r18
    5586:	33 1f       	adc	r19, r19
    5588:	82 0f       	add	r24, r18
    558a:	93 1f       	adc	r25, r19
    558c:	be 01       	movw	r22, r28
    558e:	83 59       	subi	r24, 0x93	; 147
    5590:	95 4e       	sbci	r25, 0xE5	; 229
    5592:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5596:	07 c0       	rjmp	.+14     	; 0x55a6 <vTaskPriorityInherit+0xba>
    5598:	a0 91 a3 1a 	lds	r26, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    559c:	b0 91 a4 1a 	lds	r27, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    55a0:	56 96       	adiw	r26, 0x16	; 22
    55a2:	8c 91       	ld	r24, X
    55a4:	86 8b       	std	Z+22, r24	; 0x16
    55a6:	df 91       	pop	r29
    55a8:	cf 91       	pop	r28
    55aa:	1f 91       	pop	r17
    55ac:	0f 91       	pop	r16
    55ae:	08 95       	ret

000055b0 <xTaskPriorityDisinherit>:
    55b0:	0f 93       	push	r16
    55b2:	1f 93       	push	r17
    55b4:	cf 93       	push	r28
    55b6:	df 93       	push	r29
    55b8:	fc 01       	movw	r30, r24
    55ba:	89 2b       	or	r24, r25
    55bc:	79 f1       	breq	.+94     	; 0x561c <xTaskPriorityDisinherit+0x6c>
    55be:	82 a1       	ldd	r24, Z+34	; 0x22
    55c0:	81 50       	subi	r24, 0x01	; 1
    55c2:	82 a3       	std	Z+34, r24	; 0x22
    55c4:	26 89       	ldd	r18, Z+22	; 0x16
    55c6:	91 a1       	ldd	r25, Z+33	; 0x21
    55c8:	29 17       	cp	r18, r25
    55ca:	51 f1       	breq	.+84     	; 0x5620 <xTaskPriorityDisinherit+0x70>
    55cc:	81 11       	cpse	r24, r1
    55ce:	2a c0       	rjmp	.+84     	; 0x5624 <xTaskPriorityDisinherit+0x74>
    55d0:	ef 01       	movw	r28, r30
    55d2:	8f 01       	movw	r16, r30
    55d4:	0e 5f       	subi	r16, 0xFE	; 254
    55d6:	1f 4f       	sbci	r17, 0xFF	; 255
    55d8:	c8 01       	movw	r24, r16
    55da:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    55de:	89 a1       	ldd	r24, Y+33	; 0x21
    55e0:	8e 8b       	std	Y+22, r24	; 0x16
    55e2:	26 e0       	ldi	r18, 0x06	; 6
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	28 1b       	sub	r18, r24
    55e8:	31 09       	sbc	r19, r1
    55ea:	3d 87       	std	Y+13, r19	; 0x0d
    55ec:	2c 87       	std	Y+12, r18	; 0x0c
    55ee:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    55f2:	98 17       	cp	r25, r24
    55f4:	10 f4       	brcc	.+4      	; 0x55fa <xTaskPriorityDisinherit+0x4a>
    55f6:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	9c 01       	movw	r18, r24
    55fe:	22 0f       	add	r18, r18
    5600:	33 1f       	adc	r19, r19
    5602:	22 0f       	add	r18, r18
    5604:	33 1f       	adc	r19, r19
    5606:	22 0f       	add	r18, r18
    5608:	33 1f       	adc	r19, r19
    560a:	82 0f       	add	r24, r18
    560c:	93 1f       	adc	r25, r19
    560e:	b8 01       	movw	r22, r16
    5610:	83 59       	subi	r24, 0x93	; 147
    5612:	95 4e       	sbci	r25, 0xE5	; 229
    5614:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	05 c0       	rjmp	.+10     	; 0x5626 <xTaskPriorityDisinherit+0x76>
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	03 c0       	rjmp	.+6      	; 0x5626 <xTaskPriorityDisinherit+0x76>
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	01 c0       	rjmp	.+2      	; 0x5626 <xTaskPriorityDisinherit+0x76>
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	df 91       	pop	r29
    5628:	cf 91       	pop	r28
    562a:	1f 91       	pop	r17
    562c:	0f 91       	pop	r16
    562e:	08 95       	ret

00005630 <pvTaskIncrementMutexHeldCount>:
    5630:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5634:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5638:	89 2b       	or	r24, r25
    563a:	39 f0       	breq	.+14     	; 0x564a <pvTaskIncrementMutexHeldCount+0x1a>
    563c:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5640:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5644:	82 a1       	ldd	r24, Z+34	; 0x22
    5646:	8f 5f       	subi	r24, 0xFF	; 255
    5648:	82 a3       	std	Z+34, r24	; 0x22
    564a:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    564e:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5652:	08 95       	ret

00005654 <ulTaskNotifyTake>:
    5654:	0f 93       	push	r16
    5656:	1f 93       	push	r17
    5658:	cf 93       	push	r28
    565a:	df 93       	push	r29
    565c:	18 2f       	mov	r17, r24
    565e:	eb 01       	movw	r28, r22
    5660:	0f b6       	in	r0, 0x3f	; 63
    5662:	f8 94       	cli
    5664:	0f 92       	push	r0
    5666:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    566a:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    566e:	83 a1       	ldd	r24, Z+35	; 0x23
    5670:	94 a1       	ldd	r25, Z+36	; 0x24
    5672:	a5 a1       	ldd	r26, Z+37	; 0x25
    5674:	b6 a1       	ldd	r27, Z+38	; 0x26
    5676:	89 2b       	or	r24, r25
    5678:	8a 2b       	or	r24, r26
    567a:	8b 2b       	or	r24, r27
    567c:	09 f0       	breq	.+2      	; 0x5680 <ulTaskNotifyTake+0x2c>
    567e:	58 c0       	rjmp	.+176    	; 0x5730 <ulTaskNotifyTake+0xdc>
    5680:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5684:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5688:	81 e0       	ldi	r24, 0x01	; 1
    568a:	87 a3       	std	Z+39, r24	; 0x27
    568c:	20 97       	sbiw	r28, 0x00	; 0
    568e:	09 f4       	brne	.+2      	; 0x5692 <ulTaskNotifyTake+0x3e>
    5690:	4f c0       	rjmp	.+158    	; 0x5730 <ulTaskNotifyTake+0xdc>
    5692:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5696:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    569a:	02 96       	adiw	r24, 0x02	; 2
    569c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    56a0:	cf 3f       	cpi	r28, 0xFF	; 255
    56a2:	8f ef       	ldi	r24, 0xFF	; 255
    56a4:	d8 07       	cpc	r29, r24
    56a6:	59 f4       	brne	.+22     	; 0x56be <ulTaskNotifyTake+0x6a>
    56a8:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    56ac:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    56b0:	6e 5f       	subi	r22, 0xFE	; 254
    56b2:	7f 4f       	sbci	r23, 0xFF	; 255
    56b4:	85 e4       	ldi	r24, 0x45	; 69
    56b6:	9a e1       	ldi	r25, 0x1A	; 26
    56b8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    56bc:	37 c0       	rjmp	.+110    	; 0x572c <ulTaskNotifyTake+0xd8>
    56be:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    56c2:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    56c6:	c8 0f       	add	r28, r24
    56c8:	d9 1f       	adc	r29, r25
    56ca:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    56ce:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    56d2:	d3 83       	std	Z+3, r29	; 0x03
    56d4:	c2 83       	std	Z+2, r28	; 0x02
    56d6:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    56da:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    56de:	c8 17       	cp	r28, r24
    56e0:	d9 07       	cpc	r29, r25
    56e2:	68 f4       	brcc	.+26     	; 0x56fe <ulTaskNotifyTake+0xaa>
    56e4:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    56e8:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    56ec:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    56f0:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    56f4:	6e 5f       	subi	r22, 0xFE	; 254
    56f6:	7f 4f       	sbci	r23, 0xFF	; 255
    56f8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    56fc:	17 c0       	rjmp	.+46     	; 0x572c <ulTaskNotifyTake+0xd8>
    56fe:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5702:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5706:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    570a:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    570e:	6e 5f       	subi	r22, 0xFE	; 254
    5710:	7f 4f       	sbci	r23, 0xFF	; 255
    5712:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5716:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    571a:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    571e:	c8 17       	cp	r28, r24
    5720:	d9 07       	cpc	r29, r25
    5722:	20 f4       	brcc	.+8      	; 0x572c <ulTaskNotifyTake+0xd8>
    5724:	d0 93 3b 1a 	sts	0x1A3B, r29	; 0x801a3b <xNextTaskUnblockTime+0x1>
    5728:	c0 93 3a 1a 	sts	0x1A3A, r28	; 0x801a3a <xNextTaskUnblockTime>
    572c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    5730:	0f 90       	pop	r0
    5732:	0f be       	out	0x3f, r0	; 63
    5734:	0f b6       	in	r0, 0x3f	; 63
    5736:	f8 94       	cli
    5738:	0f 92       	push	r0
    573a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    573e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5742:	63 a1       	ldd	r22, Z+35	; 0x23
    5744:	74 a1       	ldd	r23, Z+36	; 0x24
    5746:	85 a1       	ldd	r24, Z+37	; 0x25
    5748:	96 a1       	ldd	r25, Z+38	; 0x26
    574a:	61 15       	cp	r22, r1
    574c:	71 05       	cpc	r23, r1
    574e:	81 05       	cpc	r24, r1
    5750:	91 05       	cpc	r25, r1
    5752:	d9 f0       	breq	.+54     	; 0x578a <ulTaskNotifyTake+0x136>
    5754:	11 23       	and	r17, r17
    5756:	49 f0       	breq	.+18     	; 0x576a <ulTaskNotifyTake+0x116>
    5758:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    575c:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5760:	13 a2       	std	Z+35, r1	; 0x23
    5762:	14 a2       	std	Z+36, r1	; 0x24
    5764:	15 a2       	std	Z+37, r1	; 0x25
    5766:	16 a2       	std	Z+38, r1	; 0x26
    5768:	10 c0       	rjmp	.+32     	; 0x578a <ulTaskNotifyTake+0x136>
    576a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    576e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5772:	03 a1       	ldd	r16, Z+35	; 0x23
    5774:	14 a1       	ldd	r17, Z+36	; 0x24
    5776:	25 a1       	ldd	r18, Z+37	; 0x25
    5778:	36 a1       	ldd	r19, Z+38	; 0x26
    577a:	01 50       	subi	r16, 0x01	; 1
    577c:	11 09       	sbc	r17, r1
    577e:	21 09       	sbc	r18, r1
    5780:	31 09       	sbc	r19, r1
    5782:	03 a3       	std	Z+35, r16	; 0x23
    5784:	14 a3       	std	Z+36, r17	; 0x24
    5786:	25 a3       	std	Z+37, r18	; 0x25
    5788:	36 a3       	std	Z+38, r19	; 0x26
    578a:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    578e:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5792:	17 a2       	std	Z+39, r1	; 0x27
    5794:	0f 90       	pop	r0
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	1f 91       	pop	r17
    579e:	0f 91       	pop	r16
    57a0:	08 95       	ret

000057a2 <xTaskNotifyWait>:
    57a2:	4f 92       	push	r4
    57a4:	5f 92       	push	r5
    57a6:	6f 92       	push	r6
    57a8:	7f 92       	push	r7
    57aa:	8f 92       	push	r8
    57ac:	9f 92       	push	r9
    57ae:	af 92       	push	r10
    57b0:	bf 92       	push	r11
    57b2:	ef 92       	push	r14
    57b4:	ff 92       	push	r15
    57b6:	0f 93       	push	r16
    57b8:	1f 93       	push	r17
    57ba:	49 01       	movw	r8, r18
    57bc:	5a 01       	movw	r10, r20
    57be:	0f b6       	in	r0, 0x3f	; 63
    57c0:	f8 94       	cli
    57c2:	0f 92       	push	r0
    57c4:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    57c8:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    57cc:	27 a1       	ldd	r18, Z+39	; 0x27
    57ce:	22 30       	cpi	r18, 0x02	; 2
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <xTaskNotifyWait+0x32>
    57d2:	6f c0       	rjmp	.+222    	; 0x58b2 <xTaskNotifyWait+0x110>
    57d4:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    57d8:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    57dc:	43 a0       	ldd	r4, Z+35	; 0x23
    57de:	54 a0       	ldd	r5, Z+36	; 0x24
    57e0:	65 a0       	ldd	r6, Z+37	; 0x25
    57e2:	76 a0       	ldd	r7, Z+38	; 0x26
    57e4:	dc 01       	movw	r26, r24
    57e6:	cb 01       	movw	r24, r22
    57e8:	80 95       	com	r24
    57ea:	90 95       	com	r25
    57ec:	a0 95       	com	r26
    57ee:	b0 95       	com	r27
    57f0:	84 21       	and	r24, r4
    57f2:	95 21       	and	r25, r5
    57f4:	a6 21       	and	r26, r6
    57f6:	b7 21       	and	r27, r7
    57f8:	83 a3       	std	Z+35, r24	; 0x23
    57fa:	94 a3       	std	Z+36, r25	; 0x24
    57fc:	a5 a3       	std	Z+37, r26	; 0x25
    57fe:	b6 a3       	std	Z+38, r27	; 0x26
    5800:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5804:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	87 a3       	std	Z+39, r24	; 0x27
    580c:	e1 14       	cp	r14, r1
    580e:	f1 04       	cpc	r15, r1
    5810:	09 f4       	brne	.+2      	; 0x5814 <xTaskNotifyWait+0x72>
    5812:	4f c0       	rjmp	.+158    	; 0x58b2 <xTaskNotifyWait+0x110>
    5814:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5818:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    581c:	02 96       	adiw	r24, 0x02	; 2
    581e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	e8 16       	cp	r14, r24
    5826:	f8 06       	cpc	r15, r24
    5828:	59 f4       	brne	.+22     	; 0x5840 <xTaskNotifyWait+0x9e>
    582a:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    582e:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5832:	6e 5f       	subi	r22, 0xFE	; 254
    5834:	7f 4f       	sbci	r23, 0xFF	; 255
    5836:	85 e4       	ldi	r24, 0x45	; 69
    5838:	9a e1       	ldi	r25, 0x1A	; 26
    583a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    583e:	37 c0       	rjmp	.+110    	; 0x58ae <xTaskNotifyWait+0x10c>
    5840:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    5844:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5848:	e8 0e       	add	r14, r24
    584a:	f9 1e       	adc	r15, r25
    584c:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5850:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5854:	f3 82       	std	Z+3, r15	; 0x03
    5856:	e2 82       	std	Z+2, r14	; 0x02
    5858:	80 91 42 1a 	lds	r24, 0x1A42	; 0x801a42 <xTickCount>
    585c:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <xTickCount+0x1>
    5860:	e8 16       	cp	r14, r24
    5862:	f9 06       	cpc	r15, r25
    5864:	68 f4       	brcc	.+26     	; 0x5880 <xTaskNotifyWait+0xde>
    5866:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    586a:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    586e:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <pxOverflowDelayedTaskList>
    5872:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <pxOverflowDelayedTaskList+0x1>
    5876:	6e 5f       	subi	r22, 0xFE	; 254
    5878:	7f 4f       	sbci	r23, 0xFF	; 255
    587a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    587e:	17 c0       	rjmp	.+46     	; 0x58ae <xTaskNotifyWait+0x10c>
    5880:	60 91 a3 1a 	lds	r22, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5884:	70 91 a4 1a 	lds	r23, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5888:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <pxDelayedTaskList>
    588c:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <pxDelayedTaskList+0x1>
    5890:	6e 5f       	subi	r22, 0xFE	; 254
    5892:	7f 4f       	sbci	r23, 0xFF	; 255
    5894:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5898:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <xNextTaskUnblockTime>
    589c:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <xNextTaskUnblockTime+0x1>
    58a0:	e8 16       	cp	r14, r24
    58a2:	f9 06       	cpc	r15, r25
    58a4:	20 f4       	brcc	.+8      	; 0x58ae <xTaskNotifyWait+0x10c>
    58a6:	f0 92 3b 1a 	sts	0x1A3B, r15	; 0x801a3b <xNextTaskUnblockTime+0x1>
    58aa:	e0 92 3a 1a 	sts	0x1A3A, r14	; 0x801a3a <xNextTaskUnblockTime>
    58ae:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    58b2:	0f 90       	pop	r0
    58b4:	0f be       	out	0x3f, r0	; 63
    58b6:	0f b6       	in	r0, 0x3f	; 63
    58b8:	f8 94       	cli
    58ba:	0f 92       	push	r0
    58bc:	01 15       	cp	r16, r1
    58be:	11 05       	cpc	r17, r1
    58c0:	69 f0       	breq	.+26     	; 0x58dc <xTaskNotifyWait+0x13a>
    58c2:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    58c6:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    58ca:	83 a1       	ldd	r24, Z+35	; 0x23
    58cc:	94 a1       	ldd	r25, Z+36	; 0x24
    58ce:	a5 a1       	ldd	r26, Z+37	; 0x25
    58d0:	b6 a1       	ldd	r27, Z+38	; 0x26
    58d2:	f8 01       	movw	r30, r16
    58d4:	80 83       	st	Z, r24
    58d6:	91 83       	std	Z+1, r25	; 0x01
    58d8:	a2 83       	std	Z+2, r26	; 0x02
    58da:	b3 83       	std	Z+3, r27	; 0x03
    58dc:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    58e0:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    58e4:	87 a1       	ldd	r24, Z+39	; 0x27
    58e6:	81 30       	cpi	r24, 0x01	; 1
    58e8:	b1 f0       	breq	.+44     	; 0x5916 <xTaskNotifyWait+0x174>
    58ea:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    58ee:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    58f2:	83 a1       	ldd	r24, Z+35	; 0x23
    58f4:	94 a1       	ldd	r25, Z+36	; 0x24
    58f6:	a5 a1       	ldd	r26, Z+37	; 0x25
    58f8:	b6 a1       	ldd	r27, Z+38	; 0x26
    58fa:	80 94       	com	r8
    58fc:	90 94       	com	r9
    58fe:	a0 94       	com	r10
    5900:	b0 94       	com	r11
    5902:	88 22       	and	r8, r24
    5904:	99 22       	and	r9, r25
    5906:	aa 22       	and	r10, r26
    5908:	bb 22       	and	r11, r27
    590a:	83 a2       	std	Z+35, r8	; 0x23
    590c:	94 a2       	std	Z+36, r9	; 0x24
    590e:	a5 a2       	std	Z+37, r10	; 0x25
    5910:	b6 a2       	std	Z+38, r11	; 0x26
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	01 c0       	rjmp	.+2      	; 0x5918 <xTaskNotifyWait+0x176>
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    591c:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5920:	17 a2       	std	Z+39, r1	; 0x27
    5922:	0f 90       	pop	r0
    5924:	0f be       	out	0x3f, r0	; 63
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	bf 90       	pop	r11
    5930:	af 90       	pop	r10
    5932:	9f 90       	pop	r9
    5934:	8f 90       	pop	r8
    5936:	7f 90       	pop	r7
    5938:	6f 90       	pop	r6
    593a:	5f 90       	pop	r5
    593c:	4f 90       	pop	r4
    593e:	08 95       	ret

00005940 <xTaskGenericNotify>:
    5940:	0f 93       	push	r16
    5942:	1f 93       	push	r17
    5944:	cf 93       	push	r28
    5946:	df 93       	push	r29
    5948:	fc 01       	movw	r30, r24
    594a:	0f b6       	in	r0, 0x3f	; 63
    594c:	f8 94       	cli
    594e:	0f 92       	push	r0
    5950:	01 15       	cp	r16, r1
    5952:	11 05       	cpc	r17, r1
    5954:	49 f0       	breq	.+18     	; 0x5968 <xTaskGenericNotify+0x28>
    5956:	83 a1       	ldd	r24, Z+35	; 0x23
    5958:	94 a1       	ldd	r25, Z+36	; 0x24
    595a:	a5 a1       	ldd	r26, Z+37	; 0x25
    595c:	b6 a1       	ldd	r27, Z+38	; 0x26
    595e:	e8 01       	movw	r28, r16
    5960:	88 83       	st	Y, r24
    5962:	99 83       	std	Y+1, r25	; 0x01
    5964:	aa 83       	std	Y+2, r26	; 0x02
    5966:	bb 83       	std	Y+3, r27	; 0x03
    5968:	87 a1       	ldd	r24, Z+39	; 0x27
    596a:	92 e0       	ldi	r25, 0x02	; 2
    596c:	97 a3       	std	Z+39, r25	; 0x27
    596e:	22 30       	cpi	r18, 0x02	; 2
    5970:	b1 f0       	breq	.+44     	; 0x599e <xTaskGenericNotify+0x5e>
    5972:	18 f4       	brcc	.+6      	; 0x597a <xTaskGenericNotify+0x3a>
    5974:	21 30       	cpi	r18, 0x01	; 1
    5976:	31 f0       	breq	.+12     	; 0x5984 <xTaskGenericNotify+0x44>
    5978:	2a c0       	rjmp	.+84     	; 0x59ce <xTaskGenericNotify+0x8e>
    597a:	23 30       	cpi	r18, 0x03	; 3
    597c:	e9 f0       	breq	.+58     	; 0x59b8 <xTaskGenericNotify+0x78>
    597e:	24 30       	cpi	r18, 0x04	; 4
    5980:	01 f1       	breq	.+64     	; 0x59c2 <xTaskGenericNotify+0x82>
    5982:	25 c0       	rjmp	.+74     	; 0x59ce <xTaskGenericNotify+0x8e>
    5984:	03 a1       	ldd	r16, Z+35	; 0x23
    5986:	14 a1       	ldd	r17, Z+36	; 0x24
    5988:	25 a1       	ldd	r18, Z+37	; 0x25
    598a:	36 a1       	ldd	r19, Z+38	; 0x26
    598c:	40 2b       	or	r20, r16
    598e:	51 2b       	or	r21, r17
    5990:	62 2b       	or	r22, r18
    5992:	73 2b       	or	r23, r19
    5994:	43 a3       	std	Z+35, r20	; 0x23
    5996:	54 a3       	std	Z+36, r21	; 0x24
    5998:	65 a3       	std	Z+37, r22	; 0x25
    599a:	76 a3       	std	Z+38, r23	; 0x26
    599c:	18 c0       	rjmp	.+48     	; 0x59ce <xTaskGenericNotify+0x8e>
    599e:	43 a1       	ldd	r20, Z+35	; 0x23
    59a0:	54 a1       	ldd	r21, Z+36	; 0x24
    59a2:	65 a1       	ldd	r22, Z+37	; 0x25
    59a4:	76 a1       	ldd	r23, Z+38	; 0x26
    59a6:	4f 5f       	subi	r20, 0xFF	; 255
    59a8:	5f 4f       	sbci	r21, 0xFF	; 255
    59aa:	6f 4f       	sbci	r22, 0xFF	; 255
    59ac:	7f 4f       	sbci	r23, 0xFF	; 255
    59ae:	43 a3       	std	Z+35, r20	; 0x23
    59b0:	54 a3       	std	Z+36, r21	; 0x24
    59b2:	65 a3       	std	Z+37, r22	; 0x25
    59b4:	76 a3       	std	Z+38, r23	; 0x26
    59b6:	0b c0       	rjmp	.+22     	; 0x59ce <xTaskGenericNotify+0x8e>
    59b8:	43 a3       	std	Z+35, r20	; 0x23
    59ba:	54 a3       	std	Z+36, r21	; 0x24
    59bc:	65 a3       	std	Z+37, r22	; 0x25
    59be:	76 a3       	std	Z+38, r23	; 0x26
    59c0:	06 c0       	rjmp	.+12     	; 0x59ce <xTaskGenericNotify+0x8e>
    59c2:	82 30       	cpi	r24, 0x02	; 2
    59c4:	79 f1       	breq	.+94     	; 0x5a24 <xTaskGenericNotify+0xe4>
    59c6:	43 a3       	std	Z+35, r20	; 0x23
    59c8:	54 a3       	std	Z+36, r21	; 0x24
    59ca:	65 a3       	std	Z+37, r22	; 0x25
    59cc:	76 a3       	std	Z+38, r23	; 0x26
    59ce:	81 30       	cpi	r24, 0x01	; 1
    59d0:	59 f5       	brne	.+86     	; 0x5a28 <xTaskGenericNotify+0xe8>
    59d2:	ef 01       	movw	r28, r30
    59d4:	8f 01       	movw	r16, r30
    59d6:	0e 5f       	subi	r16, 0xFE	; 254
    59d8:	1f 4f       	sbci	r17, 0xFF	; 255
    59da:	c8 01       	movw	r24, r16
    59dc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    59e0:	8e 89       	ldd	r24, Y+22	; 0x16
    59e2:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    59e6:	98 17       	cp	r25, r24
    59e8:	10 f4       	brcc	.+4      	; 0x59ee <xTaskGenericNotify+0xae>
    59ea:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	9c 01       	movw	r18, r24
    59f2:	22 0f       	add	r18, r18
    59f4:	33 1f       	adc	r19, r19
    59f6:	22 0f       	add	r18, r18
    59f8:	33 1f       	adc	r19, r19
    59fa:	22 0f       	add	r18, r18
    59fc:	33 1f       	adc	r19, r19
    59fe:	82 0f       	add	r24, r18
    5a00:	93 1f       	adc	r25, r19
    5a02:	b8 01       	movw	r22, r16
    5a04:	83 59       	subi	r24, 0x93	; 147
    5a06:	95 4e       	sbci	r25, 0xE5	; 229
    5a08:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5a0c:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5a10:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5a14:	9e 89       	ldd	r25, Y+22	; 0x16
    5a16:	86 89       	ldd	r24, Z+22	; 0x16
    5a18:	89 17       	cp	r24, r25
    5a1a:	40 f4       	brcc	.+16     	; 0x5a2c <xTaskGenericNotify+0xec>
    5a1c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <vPortYield>
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	05 c0       	rjmp	.+10     	; 0x5a2e <xTaskGenericNotify+0xee>
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	03 c0       	rjmp	.+6      	; 0x5a2e <xTaskGenericNotify+0xee>
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	01 c0       	rjmp	.+2      	; 0x5a2e <xTaskGenericNotify+0xee>
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	0f 90       	pop	r0
    5a30:	0f be       	out	0x3f, r0	; 63
    5a32:	df 91       	pop	r29
    5a34:	cf 91       	pop	r28
    5a36:	1f 91       	pop	r17
    5a38:	0f 91       	pop	r16
    5a3a:	08 95       	ret

00005a3c <xTaskGenericNotifyFromISR>:
    5a3c:	ef 92       	push	r14
    5a3e:	ff 92       	push	r15
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
    5a48:	fc 01       	movw	r30, r24
    5a4a:	01 15       	cp	r16, r1
    5a4c:	11 05       	cpc	r17, r1
    5a4e:	49 f0       	breq	.+18     	; 0x5a62 <xTaskGenericNotifyFromISR+0x26>
    5a50:	83 a1       	ldd	r24, Z+35	; 0x23
    5a52:	94 a1       	ldd	r25, Z+36	; 0x24
    5a54:	a5 a1       	ldd	r26, Z+37	; 0x25
    5a56:	b6 a1       	ldd	r27, Z+38	; 0x26
    5a58:	e8 01       	movw	r28, r16
    5a5a:	88 83       	st	Y, r24
    5a5c:	99 83       	std	Y+1, r25	; 0x01
    5a5e:	aa 83       	std	Y+2, r26	; 0x02
    5a60:	bb 83       	std	Y+3, r27	; 0x03
    5a62:	87 a1       	ldd	r24, Z+39	; 0x27
    5a64:	92 e0       	ldi	r25, 0x02	; 2
    5a66:	97 a3       	std	Z+39, r25	; 0x27
    5a68:	22 30       	cpi	r18, 0x02	; 2
    5a6a:	b1 f0       	breq	.+44     	; 0x5a98 <xTaskGenericNotifyFromISR+0x5c>
    5a6c:	18 f4       	brcc	.+6      	; 0x5a74 <xTaskGenericNotifyFromISR+0x38>
    5a6e:	21 30       	cpi	r18, 0x01	; 1
    5a70:	31 f0       	breq	.+12     	; 0x5a7e <xTaskGenericNotifyFromISR+0x42>
    5a72:	2a c0       	rjmp	.+84     	; 0x5ac8 <xTaskGenericNotifyFromISR+0x8c>
    5a74:	23 30       	cpi	r18, 0x03	; 3
    5a76:	e9 f0       	breq	.+58     	; 0x5ab2 <xTaskGenericNotifyFromISR+0x76>
    5a78:	24 30       	cpi	r18, 0x04	; 4
    5a7a:	01 f1       	breq	.+64     	; 0x5abc <xTaskGenericNotifyFromISR+0x80>
    5a7c:	25 c0       	rjmp	.+74     	; 0x5ac8 <xTaskGenericNotifyFromISR+0x8c>
    5a7e:	03 a1       	ldd	r16, Z+35	; 0x23
    5a80:	14 a1       	ldd	r17, Z+36	; 0x24
    5a82:	25 a1       	ldd	r18, Z+37	; 0x25
    5a84:	36 a1       	ldd	r19, Z+38	; 0x26
    5a86:	40 2b       	or	r20, r16
    5a88:	51 2b       	or	r21, r17
    5a8a:	62 2b       	or	r22, r18
    5a8c:	73 2b       	or	r23, r19
    5a8e:	43 a3       	std	Z+35, r20	; 0x23
    5a90:	54 a3       	std	Z+36, r21	; 0x24
    5a92:	65 a3       	std	Z+37, r22	; 0x25
    5a94:	76 a3       	std	Z+38, r23	; 0x26
    5a96:	18 c0       	rjmp	.+48     	; 0x5ac8 <xTaskGenericNotifyFromISR+0x8c>
    5a98:	43 a1       	ldd	r20, Z+35	; 0x23
    5a9a:	54 a1       	ldd	r21, Z+36	; 0x24
    5a9c:	65 a1       	ldd	r22, Z+37	; 0x25
    5a9e:	76 a1       	ldd	r23, Z+38	; 0x26
    5aa0:	4f 5f       	subi	r20, 0xFF	; 255
    5aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa4:	6f 4f       	sbci	r22, 0xFF	; 255
    5aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa8:	43 a3       	std	Z+35, r20	; 0x23
    5aaa:	54 a3       	std	Z+36, r21	; 0x24
    5aac:	65 a3       	std	Z+37, r22	; 0x25
    5aae:	76 a3       	std	Z+38, r23	; 0x26
    5ab0:	0b c0       	rjmp	.+22     	; 0x5ac8 <xTaskGenericNotifyFromISR+0x8c>
    5ab2:	43 a3       	std	Z+35, r20	; 0x23
    5ab4:	54 a3       	std	Z+36, r21	; 0x24
    5ab6:	65 a3       	std	Z+37, r22	; 0x25
    5ab8:	76 a3       	std	Z+38, r23	; 0x26
    5aba:	06 c0       	rjmp	.+12     	; 0x5ac8 <xTaskGenericNotifyFromISR+0x8c>
    5abc:	82 30       	cpi	r24, 0x02	; 2
    5abe:	f1 f1       	breq	.+124    	; 0x5b3c <xTaskGenericNotifyFromISR+0x100>
    5ac0:	43 a3       	std	Z+35, r20	; 0x23
    5ac2:	54 a3       	std	Z+36, r21	; 0x24
    5ac4:	65 a3       	std	Z+37, r22	; 0x25
    5ac6:	76 a3       	std	Z+38, r23	; 0x26
    5ac8:	81 30       	cpi	r24, 0x01	; 1
    5aca:	d1 f5       	brne	.+116    	; 0x5b40 <xTaskGenericNotifyFromISR+0x104>
    5acc:	ef 01       	movw	r28, r30
    5ace:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <uxSchedulerSuspended>
    5ad2:	81 11       	cpse	r24, r1
    5ad4:	1d c0       	rjmp	.+58     	; 0x5b10 <xTaskGenericNotifyFromISR+0xd4>
    5ad6:	8f 01       	movw	r16, r30
    5ad8:	0e 5f       	subi	r16, 0xFE	; 254
    5ada:	1f 4f       	sbci	r17, 0xFF	; 255
    5adc:	c8 01       	movw	r24, r16
    5ade:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5ae2:	8e 89       	ldd	r24, Y+22	; 0x16
    5ae4:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <uxTopReadyPriority>
    5ae8:	98 17       	cp	r25, r24
    5aea:	10 f4       	brcc	.+4      	; 0x5af0 <xTaskGenericNotifyFromISR+0xb4>
    5aec:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <uxTopReadyPriority>
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	9c 01       	movw	r18, r24
    5af4:	22 0f       	add	r18, r18
    5af6:	33 1f       	adc	r19, r19
    5af8:	22 0f       	add	r18, r18
    5afa:	33 1f       	adc	r19, r19
    5afc:	22 0f       	add	r18, r18
    5afe:	33 1f       	adc	r19, r19
    5b00:	82 0f       	add	r24, r18
    5b02:	93 1f       	adc	r25, r19
    5b04:	b8 01       	movw	r22, r16
    5b06:	83 59       	subi	r24, 0x93	; 147
    5b08:	95 4e       	sbci	r25, 0xE5	; 229
    5b0a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b0e:	07 c0       	rjmp	.+14     	; 0x5b1e <xTaskGenericNotifyFromISR+0xe2>
    5b10:	bf 01       	movw	r22, r30
    5b12:	64 5f       	subi	r22, 0xF4	; 244
    5b14:	7f 4f       	sbci	r23, 0xFF	; 255
    5b16:	8e e4       	ldi	r24, 0x4E	; 78
    5b18:	9a e1       	ldi	r25, 0x1A	; 26
    5b1a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b1e:	e0 91 a3 1a 	lds	r30, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5b22:	f0 91 a4 1a 	lds	r31, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>
    5b26:	9e 89       	ldd	r25, Y+22	; 0x16
    5b28:	86 89       	ldd	r24, Z+22	; 0x16
    5b2a:	89 17       	cp	r24, r25
    5b2c:	58 f4       	brcc	.+22     	; 0x5b44 <xTaskGenericNotifyFromISR+0x108>
    5b2e:	e1 14       	cp	r14, r1
    5b30:	f1 04       	cpc	r15, r1
    5b32:	51 f0       	breq	.+20     	; 0x5b48 <xTaskGenericNotifyFromISR+0x10c>
    5b34:	81 e0       	ldi	r24, 0x01	; 1
    5b36:	f7 01       	movw	r30, r14
    5b38:	80 83       	st	Z, r24
    5b3a:	07 c0       	rjmp	.+14     	; 0x5b4a <xTaskGenericNotifyFromISR+0x10e>
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
    5b3e:	05 c0       	rjmp	.+10     	; 0x5b4a <xTaskGenericNotifyFromISR+0x10e>
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	03 c0       	rjmp	.+6      	; 0x5b4a <xTaskGenericNotifyFromISR+0x10e>
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	01 c0       	rjmp	.+2      	; 0x5b4a <xTaskGenericNotifyFromISR+0x10e>
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	df 91       	pop	r29
    5b4c:	cf 91       	pop	r28
    5b4e:	1f 91       	pop	r17
    5b50:	0f 91       	pop	r16
    5b52:	ff 90       	pop	r15
    5b54:	ef 90       	pop	r14
    5b56:	08 95       	ret

00005b58 <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	21 f4       	brne	.+8      	; 0x5b64 <xTaskNotifyStateClear+0xc>
    5b5c:	80 91 a3 1a 	lds	r24, 0x1AA3	; 0x801aa3 <pxCurrentTCB>
    5b60:	90 91 a4 1a 	lds	r25, 0x1AA4	; 0x801aa4 <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5b64:	0f b6       	in	r0, 0x3f	; 63
    5b66:	f8 94       	cli
    5b68:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5b6a:	fc 01       	movw	r30, r24
    5b6c:	27 a1       	ldd	r18, Z+39	; 0x27
    5b6e:	22 30       	cpi	r18, 0x02	; 2
    5b70:	19 f4       	brne	.+6      	; 0x5b78 <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5b72:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	01 c0       	rjmp	.+2      	; 0x5b7a <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5b78:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5b7a:	0f 90       	pop	r0
    5b7c:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5b7e:	08 95       	ret

00005b80 <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5b80:	cf 93       	push	r28
    5b82:	df 93       	push	r29
    5b84:	00 d0       	rcall	.+0      	; 0x5b86 <vFrameReaderTask+0x6>
    5b86:	1f 92       	push	r1
    5b88:	cd b7       	in	r28, 0x3d	; 61
    5b8a:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5b8c:	aa dc       	rcall	.-1708   	; 0x54e2 <xTaskGetCurrentTaskHandle>
    5b8e:	90 93 0c 1b 	sts	0x1B0C, r25	; 0x801b0c <frame_receiver+0x1>
    5b92:	80 93 0b 1b 	sts	0x1B0B, r24	; 0x801b0b <frame_receiver>
	uint32_t notification_value = 0;
    5b96:	19 82       	std	Y+1, r1	; 0x01
    5b98:	1a 82       	std	Y+2, r1	; 0x02
    5b9a:	1b 82       	std	Y+3, r1	; 0x03
    5b9c:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5b9e:	ee 24       	eor	r14, r14
    5ba0:	ea 94       	dec	r14
    5ba2:	fe 2c       	mov	r15, r14
    5ba4:	8e 01       	movw	r16, r28
    5ba6:	0f 5f       	subi	r16, 0xFF	; 255
    5ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    5baa:	2f ef       	ldi	r18, 0xFF	; 255
    5bac:	3f ef       	ldi	r19, 0xFF	; 255
    5bae:	a9 01       	movw	r20, r18
    5bb0:	6f ef       	ldi	r22, 0xFF	; 255
    5bb2:	7f ef       	ldi	r23, 0xFF	; 255
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	f5 dd       	rcall	.-1046   	; 0x57a2 <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5bb8:	e0 91 70 1b 	lds	r30, 0x1B70	; 0x801b70 <receive_callback>
    5bbc:	f0 91 71 1b 	lds	r31, 0x1B71	; 0x801b71 <receive_callback+0x1>
    5bc0:	30 97       	sbiw	r30, 0x00	; 0
    5bc2:	69 f3       	breq	.-38     	; 0x5b9e <vFrameReaderTask+0x1e>
    5bc4:	69 81       	ldd	r22, Y+1	; 0x01
    5bc6:	7a 81       	ldd	r23, Y+2	; 0x02
    5bc8:	82 e7       	ldi	r24, 0x72	; 114
    5bca:	9b e1       	ldi	r25, 0x1B	; 27
    5bcc:	19 95       	eicall
    5bce:	e7 cf       	rjmp	.-50     	; 0x5b9e <vFrameReaderTask+0x1e>

00005bd0 <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5bd0:	cf 93       	push	r28
    5bd2:	df 93       	push	r29
    5bd4:	cd b7       	in	r28, 0x3d	; 61
    5bd6:	de b7       	in	r29, 0x3e	; 62
    5bd8:	c4 56       	subi	r28, 0x64	; 100
    5bda:	d1 09       	sbc	r29, r1
    5bdc:	0f b6       	in	r0, 0x3f	; 63
    5bde:	f8 94       	cli
    5be0:	de bf       	out	0x3e, r29	; 62
    5be2:	0f be       	out	0x3f, r0	; 63
    5be4:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5be6:	00 ed       	ldi	r16, 0xD0	; 208
    5be8:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5bea:	0f 2e       	mov	r0, r31
    5bec:	f6 ed       	ldi	r31, 0xD6	; 214
    5bee:	ef 2e       	mov	r14, r31
    5bf0:	f1 2c       	mov	r15, r1
    5bf2:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5bf4:	20 e0       	ldi	r18, 0x00	; 0
    5bf6:	4f ef       	ldi	r20, 0xFF	; 255
    5bf8:	5f ef       	ldi	r21, 0xFF	; 255
    5bfa:	60 e0       	ldi	r22, 0x00	; 0
    5bfc:	70 e0       	ldi	r23, 0x00	; 0
    5bfe:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xUartMutex>
    5c02:	90 91 32 1b 	lds	r25, 0x1B32	; 0x801b32 <xUartMutex+0x1>
    5c06:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5c0a:	24 e6       	ldi	r18, 0x64	; 100
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e0       	ldi	r20, 0x00	; 0
    5c10:	be 01       	movw	r22, r28
    5c12:	6f 5f       	subi	r22, 0xFF	; 255
    5c14:	7f 4f       	sbci	r23, 0xFF	; 255
    5c16:	86 ed       	ldi	r24, 0xD6	; 214
    5c18:	9b e1       	ldi	r25, 0x1B	; 27
    5c1a:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5c1e:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5c20:	60 e0       	ldi	r22, 0x00	; 0
    5c22:	70 e0       	ldi	r23, 0x00	; 0
    5c24:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xUartMutex>
    5c28:	90 91 32 1b 	lds	r25, 0x1B32	; 0x801b32 <xUartMutex+0x1>
    5c2c:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
		if(num>0) {
    5c30:	c1 14       	cp	r12, r1
    5c32:	d1 04       	cpc	r13, r1
    5c34:	79 f0       	breq	.+30     	; 0x5c54 <vUartSendTask+0x84>
    5c36:	fe 01       	movw	r30, r28
    5c38:	31 96       	adiw	r30, 0x01	; 1
    5c3a:	9f 01       	movw	r18, r30
    5c3c:	2c 0d       	add	r18, r12
    5c3e:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5c40:	d8 01       	movw	r26, r16
    5c42:	8c 91       	ld	r24, X
    5c44:	85 ff       	sbrs	r24, 5
    5c46:	fc cf       	rjmp	.-8      	; 0x5c40 <vUartSendTask+0x70>
				UDR2 = data[i];
    5c48:	81 91       	ld	r24, Z+
    5c4a:	d7 01       	movw	r26, r14
    5c4c:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5c4e:	2e 17       	cp	r18, r30
    5c50:	3f 07       	cpc	r19, r31
    5c52:	b1 f7       	brne	.-20     	; 0x5c40 <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5c54:	8a e0       	ldi	r24, 0x0A	; 10
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	0e 94 87 24 	call	0x490e	; 0x490e <vTaskDelay>
	}
    5c5c:	cb cf       	rjmp	.-106    	; 0x5bf4 <vUartSendTask+0x24>

00005c5e <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5c5e:	af 92       	push	r10
    5c60:	bf 92       	push	r11
    5c62:	cf 92       	push	r12
    5c64:	df 92       	push	r13
    5c66:	ef 92       	push	r14
    5c68:	ff 92       	push	r15
    5c6a:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5c6c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5c70:	89 e1       	ldi	r24, 0x19	; 25
    5c72:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5c76:	80 ee       	ldi	r24, 0xE0	; 224
    5c78:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5c7c:	88 e9       	ldi	r24, 0x98	; 152
    5c7e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5c82:	e2 ed       	ldi	r30, 0xD2	; 210
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	86 e0       	ldi	r24, 0x06	; 6
    5c88:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5c8a:	80 81       	ld	r24, Z
    5c8c:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5c8e:	84 e6       	ldi	r24, 0x64	; 100
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5c96:	44 e6       	ldi	r20, 0x64	; 100
    5c98:	50 e0       	ldi	r21, 0x00	; 0
    5c9a:	bc 01       	movw	r22, r24
    5c9c:	86 ed       	ldi	r24, 0xD6	; 214
    5c9e:	9b e1       	ldi	r25, 0x1B	; 27
    5ca0:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5ca4:	a1 2c       	mov	r10, r1
    5ca6:	b1 2c       	mov	r11, r1
    5ca8:	c1 2c       	mov	r12, r1
    5caa:	d1 2c       	mov	r13, r1
    5cac:	e1 2c       	mov	r14, r1
    5cae:	f1 2c       	mov	r15, r1
    5cb0:	04 e0       	ldi	r16, 0x04	; 4
    5cb2:	20 e0       	ldi	r18, 0x00	; 0
    5cb4:	30 e0       	ldi	r19, 0x00	; 0
    5cb6:	4c e2       	ldi	r20, 0x2C	; 44
    5cb8:	51 e0       	ldi	r21, 0x01	; 1
    5cba:	60 e0       	ldi	r22, 0x00	; 0
    5cbc:	77 e0       	ldi	r23, 0x07	; 7
    5cbe:	80 ec       	ldi	r24, 0xC0	; 192
    5cc0:	9d e2       	ldi	r25, 0x2D	; 45
    5cc2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	4c e2       	ldi	r20, 0x2C	; 44
    5ccc:	51 e0       	ldi	r21, 0x01	; 1
    5cce:	6c e0       	ldi	r22, 0x0C	; 12
    5cd0:	77 e0       	ldi	r23, 0x07	; 7
    5cd2:	88 ee       	ldi	r24, 0xE8	; 232
    5cd4:	9d e2       	ldi	r25, 0x2D	; 45
    5cd6:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	0e 94 b5 18 	call	0x316a	; 0x316a <xQueueCreateMutex>
    5ce0:	90 93 32 1b 	sts	0x1B32, r25	; 0x801b32 <xUartMutex+0x1>
    5ce4:	80 93 31 1b 	sts	0x1B31, r24	; 0x801b31 <xUartMutex>
}
    5ce8:	0f 91       	pop	r16
    5cea:	ff 90       	pop	r15
    5cec:	ef 90       	pop	r14
    5cee:	df 90       	pop	r13
    5cf0:	cf 90       	pop	r12
    5cf2:	bf 90       	pop	r11
    5cf4:	af 90       	pop	r10
    5cf6:	08 95       	ret

00005cf8 <vUSART_send>:

void vUSART_send(uint8_t *data, uint16_t len) {
    5cf8:	0f 93       	push	r16
    5cfa:	1f 93       	push	r17
    5cfc:	cf 93       	push	r28
    5cfe:	df 93       	push	r29
    5d00:	ec 01       	movw	r28, r24
    5d02:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5d04:	20 e0       	ldi	r18, 0x00	; 0
    5d06:	4f ef       	ldi	r20, 0xFF	; 255
    5d08:	5f ef       	ldi	r21, 0xFF	; 255
    5d0a:	60 e0       	ldi	r22, 0x00	; 0
    5d0c:	70 e0       	ldi	r23, 0x00	; 0
    5d0e:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xUartMutex>
    5d12:	90 91 32 1b 	lds	r25, 0x1B32	; 0x801b32 <xUartMutex+0x1>
    5d16:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5d1a:	a8 01       	movw	r20, r16
    5d1c:	be 01       	movw	r22, r28
    5d1e:	86 ed       	ldi	r24, 0xD6	; 214
    5d20:	9b e1       	ldi	r25, 0x1B	; 27
    5d22:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5d26:	60 e0       	ldi	r22, 0x00	; 0
    5d28:	70 e0       	ldi	r23, 0x00	; 0
    5d2a:	80 91 31 1b 	lds	r24, 0x1B31	; 0x801b31 <xUartMutex>
    5d2e:	90 91 32 1b 	lds	r25, 0x1B32	; 0x801b32 <xUartMutex+0x1>
    5d32:	0e 94 07 1c 	call	0x380e	; 0x380e <xQueueGive>
}
    5d36:	df 91       	pop	r29
    5d38:	cf 91       	pop	r28
    5d3a:	1f 91       	pop	r17
    5d3c:	0f 91       	pop	r16
    5d3e:	08 95       	ret

00005d40 <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    5d40:	90 93 71 1b 	sts	0x1B71, r25	; 0x801b71 <receive_callback+0x1>
    5d44:	80 93 70 1b 	sts	0x1B70, r24	; 0x801b70 <receive_callback>
    5d48:	08 95       	ret

00005d4a <__vector_51>:
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}


ISR(USART2_RX_vect){
    5d4a:	1f 92       	push	r1
    5d4c:	0f 92       	push	r0
    5d4e:	0f b6       	in	r0, 0x3f	; 63
    5d50:	0f 92       	push	r0
    5d52:	11 24       	eor	r1, r1
    5d54:	0b b6       	in	r0, 0x3b	; 59
    5d56:	0f 92       	push	r0
    5d58:	cf 92       	push	r12
    5d5a:	df 92       	push	r13
    5d5c:	ef 92       	push	r14
    5d5e:	ff 92       	push	r15
    5d60:	0f 93       	push	r16
    5d62:	1f 93       	push	r17
    5d64:	2f 93       	push	r18
    5d66:	3f 93       	push	r19
    5d68:	4f 93       	push	r20
    5d6a:	5f 93       	push	r21
    5d6c:	6f 93       	push	r22
    5d6e:	7f 93       	push	r23
    5d70:	8f 93       	push	r24
    5d72:	9f 93       	push	r25
    5d74:	af 93       	push	r26
    5d76:	bf 93       	push	r27
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	ef 93       	push	r30
    5d7e:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    5d80:	80 91 09 1b 	lds	r24, 0x1B09	; 0x801b09 <input_index.2398>
    5d84:	90 91 0a 1b 	lds	r25, 0x1B0A	; 0x801b0a <input_index.2398+0x1>
    5d88:	ec 01       	movw	r28, r24
    5d8a:	21 96       	adiw	r28, 0x01	; 1
    5d8c:	d0 93 0a 1b 	sts	0x1B0A, r29	; 0x801b0a <input_index.2398+0x1>
    5d90:	c0 93 09 1b 	sts	0x1B09, r28	; 0x801b09 <input_index.2398>
    5d94:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5d98:	fc 01       	movw	r30, r24
    5d9a:	eb 55       	subi	r30, 0x5B	; 91
    5d9c:	f5 4e       	sbci	r31, 0xE5	; 229
    5d9e:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    5da0:	21 11       	cpse	r18, r1
    5da2:	1d c0       	rjmp	.+58     	; 0x5dde <__vector_51+0x94>
		if(frame_receiver != NULL) {
    5da4:	c0 90 0b 1b 	lds	r12, 0x1B0B	; 0x801b0b <frame_receiver>
    5da8:	d0 90 0c 1b 	lds	r13, 0x1B0C	; 0x801b0c <frame_receiver+0x1>
    5dac:	c1 14       	cp	r12, r1
    5dae:	d1 04       	cpc	r13, r1
    5db0:	89 f0       	breq	.+34     	; 0x5dd4 <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    5db2:	ae 01       	movw	r20, r28
    5db4:	65 ea       	ldi	r22, 0xA5	; 165
    5db6:	7a e1       	ldi	r23, 0x1A	; 26
    5db8:	82 e7       	ldi	r24, 0x72	; 114
    5dba:	9b e1       	ldi	r25, 0x1B	; 27
    5dbc:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    5dc0:	ae 01       	movw	r20, r28
    5dc2:	60 e0       	ldi	r22, 0x00	; 0
    5dc4:	70 e0       	ldi	r23, 0x00	; 0
    5dc6:	e1 2c       	mov	r14, r1
    5dc8:	f1 2c       	mov	r15, r1
    5dca:	00 e0       	ldi	r16, 0x00	; 0
    5dcc:	10 e0       	ldi	r17, 0x00	; 0
    5dce:	24 e0       	ldi	r18, 0x04	; 4
    5dd0:	c6 01       	movw	r24, r12
    5dd2:	34 de       	rcall	.-920    	; 0x5a3c <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    5dd4:	10 92 0a 1b 	sts	0x1B0A, r1	; 0x801b0a <input_index.2398+0x1>
    5dd8:	10 92 09 1b 	sts	0x1B09, r1	; 0x801b09 <input_index.2398>
    5ddc:	07 c0       	rjmp	.+14     	; 0x5dec <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    5dde:	c5 36       	cpi	r28, 0x65	; 101
    5de0:	d1 05       	cpc	r29, r1
    5de2:	20 f0       	brcs	.+8      	; 0x5dec <__vector_51+0xa2>
    5de4:	10 92 0a 1b 	sts	0x1B0A, r1	; 0x801b0a <input_index.2398+0x1>
    5de8:	10 92 09 1b 	sts	0x1B09, r1	; 0x801b09 <input_index.2398>
    5dec:	ff 91       	pop	r31
    5dee:	ef 91       	pop	r30
    5df0:	df 91       	pop	r29
    5df2:	cf 91       	pop	r28
    5df4:	bf 91       	pop	r27
    5df6:	af 91       	pop	r26
    5df8:	9f 91       	pop	r25
    5dfa:	8f 91       	pop	r24
    5dfc:	7f 91       	pop	r23
    5dfe:	6f 91       	pop	r22
    5e00:	5f 91       	pop	r21
    5e02:	4f 91       	pop	r20
    5e04:	3f 91       	pop	r19
    5e06:	2f 91       	pop	r18
    5e08:	1f 91       	pop	r17
    5e0a:	0f 91       	pop	r16
    5e0c:	ff 90       	pop	r15
    5e0e:	ef 90       	pop	r14
    5e10:	df 90       	pop	r13
    5e12:	cf 90       	pop	r12
    5e14:	0f 90       	pop	r0
    5e16:	0b be       	out	0x3b, r0	; 59
    5e18:	0f 90       	pop	r0
    5e1a:	0f be       	out	0x3f, r0	; 63
    5e1c:	0f 90       	pop	r0
    5e1e:	1f 90       	pop	r1
    5e20:	18 95       	reti

00005e22 <__subsf3>:
    5e22:	50 58       	subi	r21, 0x80	; 128

00005e24 <__addsf3>:
    5e24:	bb 27       	eor	r27, r27
    5e26:	aa 27       	eor	r26, r26
    5e28:	0e d0       	rcall	.+28     	; 0x5e46 <__addsf3x>
    5e2a:	27 c2       	rjmp	.+1102   	; 0x627a <__fp_round>
    5e2c:	f0 d1       	rcall	.+992    	; 0x620e <__fp_pscA>
    5e2e:	30 f0       	brcs	.+12     	; 0x5e3c <__addsf3+0x18>
    5e30:	f5 d1       	rcall	.+1002   	; 0x621c <__fp_pscB>
    5e32:	20 f0       	brcs	.+8      	; 0x5e3c <__addsf3+0x18>
    5e34:	31 f4       	brne	.+12     	; 0x5e42 <__addsf3+0x1e>
    5e36:	9f 3f       	cpi	r25, 0xFF	; 255
    5e38:	11 f4       	brne	.+4      	; 0x5e3e <__addsf3+0x1a>
    5e3a:	1e f4       	brtc	.+6      	; 0x5e42 <__addsf3+0x1e>
    5e3c:	c0 c1       	rjmp	.+896    	; 0x61be <__fp_nan>
    5e3e:	0e f4       	brtc	.+2      	; 0x5e42 <__addsf3+0x1e>
    5e40:	e0 95       	com	r30
    5e42:	e7 fb       	bst	r30, 7
    5e44:	b6 c1       	rjmp	.+876    	; 0x61b2 <__fp_inf>

00005e46 <__addsf3x>:
    5e46:	e9 2f       	mov	r30, r25
    5e48:	3a d2       	rcall	.+1140   	; 0x62be <__fp_split3>
    5e4a:	80 f3       	brcs	.-32     	; 0x5e2c <__addsf3+0x8>
    5e4c:	ba 17       	cp	r27, r26
    5e4e:	62 07       	cpc	r22, r18
    5e50:	73 07       	cpc	r23, r19
    5e52:	84 07       	cpc	r24, r20
    5e54:	95 07       	cpc	r25, r21
    5e56:	18 f0       	brcs	.+6      	; 0x5e5e <__addsf3x+0x18>
    5e58:	71 f4       	brne	.+28     	; 0x5e76 <__addsf3x+0x30>
    5e5a:	9e f5       	brtc	.+102    	; 0x5ec2 <__addsf3x+0x7c>
    5e5c:	52 c2       	rjmp	.+1188   	; 0x6302 <__fp_zero>
    5e5e:	0e f4       	brtc	.+2      	; 0x5e62 <__addsf3x+0x1c>
    5e60:	e0 95       	com	r30
    5e62:	0b 2e       	mov	r0, r27
    5e64:	ba 2f       	mov	r27, r26
    5e66:	a0 2d       	mov	r26, r0
    5e68:	0b 01       	movw	r0, r22
    5e6a:	b9 01       	movw	r22, r18
    5e6c:	90 01       	movw	r18, r0
    5e6e:	0c 01       	movw	r0, r24
    5e70:	ca 01       	movw	r24, r20
    5e72:	a0 01       	movw	r20, r0
    5e74:	11 24       	eor	r1, r1
    5e76:	ff 27       	eor	r31, r31
    5e78:	59 1b       	sub	r21, r25
    5e7a:	99 f0       	breq	.+38     	; 0x5ea2 <__addsf3x+0x5c>
    5e7c:	59 3f       	cpi	r21, 0xF9	; 249
    5e7e:	50 f4       	brcc	.+20     	; 0x5e94 <__addsf3x+0x4e>
    5e80:	50 3e       	cpi	r21, 0xE0	; 224
    5e82:	68 f1       	brcs	.+90     	; 0x5ede <__addsf3x+0x98>
    5e84:	1a 16       	cp	r1, r26
    5e86:	f0 40       	sbci	r31, 0x00	; 0
    5e88:	a2 2f       	mov	r26, r18
    5e8a:	23 2f       	mov	r18, r19
    5e8c:	34 2f       	mov	r19, r20
    5e8e:	44 27       	eor	r20, r20
    5e90:	58 5f       	subi	r21, 0xF8	; 248
    5e92:	f3 cf       	rjmp	.-26     	; 0x5e7a <__addsf3x+0x34>
    5e94:	46 95       	lsr	r20
    5e96:	37 95       	ror	r19
    5e98:	27 95       	ror	r18
    5e9a:	a7 95       	ror	r26
    5e9c:	f0 40       	sbci	r31, 0x00	; 0
    5e9e:	53 95       	inc	r21
    5ea0:	c9 f7       	brne	.-14     	; 0x5e94 <__addsf3x+0x4e>
    5ea2:	7e f4       	brtc	.+30     	; 0x5ec2 <__addsf3x+0x7c>
    5ea4:	1f 16       	cp	r1, r31
    5ea6:	ba 0b       	sbc	r27, r26
    5ea8:	62 0b       	sbc	r22, r18
    5eaa:	73 0b       	sbc	r23, r19
    5eac:	84 0b       	sbc	r24, r20
    5eae:	ba f0       	brmi	.+46     	; 0x5ede <__addsf3x+0x98>
    5eb0:	91 50       	subi	r25, 0x01	; 1
    5eb2:	a1 f0       	breq	.+40     	; 0x5edc <__addsf3x+0x96>
    5eb4:	ff 0f       	add	r31, r31
    5eb6:	bb 1f       	adc	r27, r27
    5eb8:	66 1f       	adc	r22, r22
    5eba:	77 1f       	adc	r23, r23
    5ebc:	88 1f       	adc	r24, r24
    5ebe:	c2 f7       	brpl	.-16     	; 0x5eb0 <__addsf3x+0x6a>
    5ec0:	0e c0       	rjmp	.+28     	; 0x5ede <__addsf3x+0x98>
    5ec2:	ba 0f       	add	r27, r26
    5ec4:	62 1f       	adc	r22, r18
    5ec6:	73 1f       	adc	r23, r19
    5ec8:	84 1f       	adc	r24, r20
    5eca:	48 f4       	brcc	.+18     	; 0x5ede <__addsf3x+0x98>
    5ecc:	87 95       	ror	r24
    5ece:	77 95       	ror	r23
    5ed0:	67 95       	ror	r22
    5ed2:	b7 95       	ror	r27
    5ed4:	f7 95       	ror	r31
    5ed6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ed8:	08 f0       	brcs	.+2      	; 0x5edc <__addsf3x+0x96>
    5eda:	b3 cf       	rjmp	.-154    	; 0x5e42 <__addsf3+0x1e>
    5edc:	93 95       	inc	r25
    5ede:	88 0f       	add	r24, r24
    5ee0:	08 f0       	brcs	.+2      	; 0x5ee4 <__addsf3x+0x9e>
    5ee2:	99 27       	eor	r25, r25
    5ee4:	ee 0f       	add	r30, r30
    5ee6:	97 95       	ror	r25
    5ee8:	87 95       	ror	r24
    5eea:	08 95       	ret
    5eec:	90 d1       	rcall	.+800    	; 0x620e <__fp_pscA>
    5eee:	58 f0       	brcs	.+22     	; 0x5f06 <__addsf3x+0xc0>
    5ef0:	80 e8       	ldi	r24, 0x80	; 128
    5ef2:	91 e0       	ldi	r25, 0x01	; 1
    5ef4:	09 f4       	brne	.+2      	; 0x5ef8 <__addsf3x+0xb2>
    5ef6:	9e ef       	ldi	r25, 0xFE	; 254
    5ef8:	91 d1       	rcall	.+802    	; 0x621c <__fp_pscB>
    5efa:	28 f0       	brcs	.+10     	; 0x5f06 <__addsf3x+0xc0>
    5efc:	40 e8       	ldi	r20, 0x80	; 128
    5efe:	51 e0       	ldi	r21, 0x01	; 1
    5f00:	59 f4       	brne	.+22     	; 0x5f18 <atan2+0xe>
    5f02:	5e ef       	ldi	r21, 0xFE	; 254
    5f04:	09 c0       	rjmp	.+18     	; 0x5f18 <atan2+0xe>
    5f06:	5b c1       	rjmp	.+694    	; 0x61be <__fp_nan>
    5f08:	fc c1       	rjmp	.+1016   	; 0x6302 <__fp_zero>

00005f0a <atan2>:
    5f0a:	e9 2f       	mov	r30, r25
    5f0c:	e0 78       	andi	r30, 0x80	; 128
    5f0e:	d7 d1       	rcall	.+942    	; 0x62be <__fp_split3>
    5f10:	68 f3       	brcs	.-38     	; 0x5eec <__addsf3x+0xa6>
    5f12:	09 2e       	mov	r0, r25
    5f14:	05 2a       	or	r0, r21
    5f16:	c1 f3       	breq	.-16     	; 0x5f08 <__addsf3x+0xc2>
    5f18:	26 17       	cp	r18, r22
    5f1a:	37 07       	cpc	r19, r23
    5f1c:	48 07       	cpc	r20, r24
    5f1e:	59 07       	cpc	r21, r25
    5f20:	38 f0       	brcs	.+14     	; 0x5f30 <atan2+0x26>
    5f22:	0e 2e       	mov	r0, r30
    5f24:	07 f8       	bld	r0, 7
    5f26:	e0 25       	eor	r30, r0
    5f28:	69 f0       	breq	.+26     	; 0x5f44 <atan2+0x3a>
    5f2a:	e0 25       	eor	r30, r0
    5f2c:	e0 64       	ori	r30, 0x40	; 64
    5f2e:	0a c0       	rjmp	.+20     	; 0x5f44 <atan2+0x3a>
    5f30:	ef 63       	ori	r30, 0x3F	; 63
    5f32:	07 f8       	bld	r0, 7
    5f34:	00 94       	com	r0
    5f36:	07 fa       	bst	r0, 7
    5f38:	db 01       	movw	r26, r22
    5f3a:	b9 01       	movw	r22, r18
    5f3c:	9d 01       	movw	r18, r26
    5f3e:	dc 01       	movw	r26, r24
    5f40:	ca 01       	movw	r24, r20
    5f42:	ad 01       	movw	r20, r26
    5f44:	ef 93       	push	r30
    5f46:	4a d0       	rcall	.+148    	; 0x5fdc <__divsf3_pse>
    5f48:	98 d1       	rcall	.+816    	; 0x627a <__fp_round>
    5f4a:	0a d0       	rcall	.+20     	; 0x5f60 <atan>
    5f4c:	5f 91       	pop	r21
    5f4e:	55 23       	and	r21, r21
    5f50:	31 f0       	breq	.+12     	; 0x5f5e <atan2+0x54>
    5f52:	2b ed       	ldi	r18, 0xDB	; 219
    5f54:	3f e0       	ldi	r19, 0x0F	; 15
    5f56:	49 e4       	ldi	r20, 0x49	; 73
    5f58:	50 fd       	sbrc	r21, 0
    5f5a:	49 ec       	ldi	r20, 0xC9	; 201
    5f5c:	63 cf       	rjmp	.-314    	; 0x5e24 <__addsf3>
    5f5e:	08 95       	ret

00005f60 <atan>:
    5f60:	df 93       	push	r29
    5f62:	dd 27       	eor	r29, r29
    5f64:	b9 2f       	mov	r27, r25
    5f66:	bf 77       	andi	r27, 0x7F	; 127
    5f68:	40 e8       	ldi	r20, 0x80	; 128
    5f6a:	5f e3       	ldi	r21, 0x3F	; 63
    5f6c:	16 16       	cp	r1, r22
    5f6e:	17 06       	cpc	r1, r23
    5f70:	48 07       	cpc	r20, r24
    5f72:	5b 07       	cpc	r21, r27
    5f74:	10 f4       	brcc	.+4      	; 0x5f7a <atan+0x1a>
    5f76:	d9 2f       	mov	r29, r25
    5f78:	cf d1       	rcall	.+926    	; 0x6318 <inverse>
    5f7a:	9f 93       	push	r25
    5f7c:	8f 93       	push	r24
    5f7e:	7f 93       	push	r23
    5f80:	6f 93       	push	r22
    5f82:	7c d2       	rcall	.+1272   	; 0x647c <square>
    5f84:	e4 ee       	ldi	r30, 0xE4	; 228
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	1d d1       	rcall	.+570    	; 0x61c4 <__fp_powser>
    5f8a:	77 d1       	rcall	.+750    	; 0x627a <__fp_round>
    5f8c:	2f 91       	pop	r18
    5f8e:	3f 91       	pop	r19
    5f90:	4f 91       	pop	r20
    5f92:	5f 91       	pop	r21
    5f94:	d4 d1       	rcall	.+936    	; 0x633e <__mulsf3x>
    5f96:	dd 23       	and	r29, r29
    5f98:	49 f0       	breq	.+18     	; 0x5fac <atan+0x4c>
    5f9a:	90 58       	subi	r25, 0x80	; 128
    5f9c:	a2 ea       	ldi	r26, 0xA2	; 162
    5f9e:	2a ed       	ldi	r18, 0xDA	; 218
    5fa0:	3f e0       	ldi	r19, 0x0F	; 15
    5fa2:	49 ec       	ldi	r20, 0xC9	; 201
    5fa4:	5f e3       	ldi	r21, 0x3F	; 63
    5fa6:	d0 78       	andi	r29, 0x80	; 128
    5fa8:	5d 27       	eor	r21, r29
    5faa:	4d df       	rcall	.-358    	; 0x5e46 <__addsf3x>
    5fac:	df 91       	pop	r29
    5fae:	65 c1       	rjmp	.+714    	; 0x627a <__fp_round>

00005fb0 <__cmpsf2>:
    5fb0:	dc d0       	rcall	.+440    	; 0x616a <__fp_cmp>
    5fb2:	08 f4       	brcc	.+2      	; 0x5fb6 <__cmpsf2+0x6>
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	08 95       	ret

00005fb8 <cos>:
    5fb8:	39 d1       	rcall	.+626    	; 0x622c <__fp_rempio2>
    5fba:	e3 95       	inc	r30
    5fbc:	6f c1       	rjmp	.+734    	; 0x629c <__fp_sinus>

00005fbe <__divsf3>:
    5fbe:	0c d0       	rcall	.+24     	; 0x5fd8 <__divsf3x>
    5fc0:	5c c1       	rjmp	.+696    	; 0x627a <__fp_round>
    5fc2:	2c d1       	rcall	.+600    	; 0x621c <__fp_pscB>
    5fc4:	40 f0       	brcs	.+16     	; 0x5fd6 <__divsf3+0x18>
    5fc6:	23 d1       	rcall	.+582    	; 0x620e <__fp_pscA>
    5fc8:	30 f0       	brcs	.+12     	; 0x5fd6 <__divsf3+0x18>
    5fca:	21 f4       	brne	.+8      	; 0x5fd4 <__divsf3+0x16>
    5fcc:	5f 3f       	cpi	r21, 0xFF	; 255
    5fce:	19 f0       	breq	.+6      	; 0x5fd6 <__divsf3+0x18>
    5fd0:	f0 c0       	rjmp	.+480    	; 0x61b2 <__fp_inf>
    5fd2:	51 11       	cpse	r21, r1
    5fd4:	97 c1       	rjmp	.+814    	; 0x6304 <__fp_szero>
    5fd6:	f3 c0       	rjmp	.+486    	; 0x61be <__fp_nan>

00005fd8 <__divsf3x>:
    5fd8:	72 d1       	rcall	.+740    	; 0x62be <__fp_split3>
    5fda:	98 f3       	brcs	.-26     	; 0x5fc2 <__divsf3+0x4>

00005fdc <__divsf3_pse>:
    5fdc:	99 23       	and	r25, r25
    5fde:	c9 f3       	breq	.-14     	; 0x5fd2 <__divsf3+0x14>
    5fe0:	55 23       	and	r21, r21
    5fe2:	b1 f3       	breq	.-20     	; 0x5fd0 <__divsf3+0x12>
    5fe4:	95 1b       	sub	r25, r21
    5fe6:	55 0b       	sbc	r21, r21
    5fe8:	bb 27       	eor	r27, r27
    5fea:	aa 27       	eor	r26, r26
    5fec:	62 17       	cp	r22, r18
    5fee:	73 07       	cpc	r23, r19
    5ff0:	84 07       	cpc	r24, r20
    5ff2:	38 f0       	brcs	.+14     	; 0x6002 <__divsf3_pse+0x26>
    5ff4:	9f 5f       	subi	r25, 0xFF	; 255
    5ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ff8:	22 0f       	add	r18, r18
    5ffa:	33 1f       	adc	r19, r19
    5ffc:	44 1f       	adc	r20, r20
    5ffe:	aa 1f       	adc	r26, r26
    6000:	a9 f3       	breq	.-22     	; 0x5fec <__divsf3_pse+0x10>
    6002:	33 d0       	rcall	.+102    	; 0x606a <__divsf3_pse+0x8e>
    6004:	0e 2e       	mov	r0, r30
    6006:	3a f0       	brmi	.+14     	; 0x6016 <__divsf3_pse+0x3a>
    6008:	e0 e8       	ldi	r30, 0x80	; 128
    600a:	30 d0       	rcall	.+96     	; 0x606c <__divsf3_pse+0x90>
    600c:	91 50       	subi	r25, 0x01	; 1
    600e:	50 40       	sbci	r21, 0x00	; 0
    6010:	e6 95       	lsr	r30
    6012:	00 1c       	adc	r0, r0
    6014:	ca f7       	brpl	.-14     	; 0x6008 <__divsf3_pse+0x2c>
    6016:	29 d0       	rcall	.+82     	; 0x606a <__divsf3_pse+0x8e>
    6018:	fe 2f       	mov	r31, r30
    601a:	27 d0       	rcall	.+78     	; 0x606a <__divsf3_pse+0x8e>
    601c:	66 0f       	add	r22, r22
    601e:	77 1f       	adc	r23, r23
    6020:	88 1f       	adc	r24, r24
    6022:	bb 1f       	adc	r27, r27
    6024:	26 17       	cp	r18, r22
    6026:	37 07       	cpc	r19, r23
    6028:	48 07       	cpc	r20, r24
    602a:	ab 07       	cpc	r26, r27
    602c:	b0 e8       	ldi	r27, 0x80	; 128
    602e:	09 f0       	breq	.+2      	; 0x6032 <__divsf3_pse+0x56>
    6030:	bb 0b       	sbc	r27, r27
    6032:	80 2d       	mov	r24, r0
    6034:	bf 01       	movw	r22, r30
    6036:	ff 27       	eor	r31, r31
    6038:	93 58       	subi	r25, 0x83	; 131
    603a:	5f 4f       	sbci	r21, 0xFF	; 255
    603c:	2a f0       	brmi	.+10     	; 0x6048 <__divsf3_pse+0x6c>
    603e:	9e 3f       	cpi	r25, 0xFE	; 254
    6040:	51 05       	cpc	r21, r1
    6042:	68 f0       	brcs	.+26     	; 0x605e <__divsf3_pse+0x82>
    6044:	b6 c0       	rjmp	.+364    	; 0x61b2 <__fp_inf>
    6046:	5e c1       	rjmp	.+700    	; 0x6304 <__fp_szero>
    6048:	5f 3f       	cpi	r21, 0xFF	; 255
    604a:	ec f3       	brlt	.-6      	; 0x6046 <__divsf3_pse+0x6a>
    604c:	98 3e       	cpi	r25, 0xE8	; 232
    604e:	dc f3       	brlt	.-10     	; 0x6046 <__divsf3_pse+0x6a>
    6050:	86 95       	lsr	r24
    6052:	77 95       	ror	r23
    6054:	67 95       	ror	r22
    6056:	b7 95       	ror	r27
    6058:	f7 95       	ror	r31
    605a:	9f 5f       	subi	r25, 0xFF	; 255
    605c:	c9 f7       	brne	.-14     	; 0x6050 <__divsf3_pse+0x74>
    605e:	88 0f       	add	r24, r24
    6060:	91 1d       	adc	r25, r1
    6062:	96 95       	lsr	r25
    6064:	87 95       	ror	r24
    6066:	97 f9       	bld	r25, 7
    6068:	08 95       	ret
    606a:	e1 e0       	ldi	r30, 0x01	; 1
    606c:	66 0f       	add	r22, r22
    606e:	77 1f       	adc	r23, r23
    6070:	88 1f       	adc	r24, r24
    6072:	bb 1f       	adc	r27, r27
    6074:	62 17       	cp	r22, r18
    6076:	73 07       	cpc	r23, r19
    6078:	84 07       	cpc	r24, r20
    607a:	ba 07       	cpc	r27, r26
    607c:	20 f0       	brcs	.+8      	; 0x6086 <__divsf3_pse+0xaa>
    607e:	62 1b       	sub	r22, r18
    6080:	73 0b       	sbc	r23, r19
    6082:	84 0b       	sbc	r24, r20
    6084:	ba 0b       	sbc	r27, r26
    6086:	ee 1f       	adc	r30, r30
    6088:	88 f7       	brcc	.-30     	; 0x606c <__divsf3_pse+0x90>
    608a:	e0 95       	com	r30
    608c:	08 95       	ret

0000608e <__fixsfsi>:
    608e:	04 d0       	rcall	.+8      	; 0x6098 <__fixunssfsi>
    6090:	68 94       	set
    6092:	b1 11       	cpse	r27, r1
    6094:	37 c1       	rjmp	.+622    	; 0x6304 <__fp_szero>
    6096:	08 95       	ret

00006098 <__fixunssfsi>:
    6098:	1a d1       	rcall	.+564    	; 0x62ce <__fp_splitA>
    609a:	88 f0       	brcs	.+34     	; 0x60be <__fixunssfsi+0x26>
    609c:	9f 57       	subi	r25, 0x7F	; 127
    609e:	90 f0       	brcs	.+36     	; 0x60c4 <__fixunssfsi+0x2c>
    60a0:	b9 2f       	mov	r27, r25
    60a2:	99 27       	eor	r25, r25
    60a4:	b7 51       	subi	r27, 0x17	; 23
    60a6:	a0 f0       	brcs	.+40     	; 0x60d0 <__fixunssfsi+0x38>
    60a8:	d1 f0       	breq	.+52     	; 0x60de <__fixunssfsi+0x46>
    60aa:	66 0f       	add	r22, r22
    60ac:	77 1f       	adc	r23, r23
    60ae:	88 1f       	adc	r24, r24
    60b0:	99 1f       	adc	r25, r25
    60b2:	1a f0       	brmi	.+6      	; 0x60ba <__fixunssfsi+0x22>
    60b4:	ba 95       	dec	r27
    60b6:	c9 f7       	brne	.-14     	; 0x60aa <__fixunssfsi+0x12>
    60b8:	12 c0       	rjmp	.+36     	; 0x60de <__fixunssfsi+0x46>
    60ba:	b1 30       	cpi	r27, 0x01	; 1
    60bc:	81 f0       	breq	.+32     	; 0x60de <__fixunssfsi+0x46>
    60be:	21 d1       	rcall	.+578    	; 0x6302 <__fp_zero>
    60c0:	b1 e0       	ldi	r27, 0x01	; 1
    60c2:	08 95       	ret
    60c4:	1e c1       	rjmp	.+572    	; 0x6302 <__fp_zero>
    60c6:	67 2f       	mov	r22, r23
    60c8:	78 2f       	mov	r23, r24
    60ca:	88 27       	eor	r24, r24
    60cc:	b8 5f       	subi	r27, 0xF8	; 248
    60ce:	39 f0       	breq	.+14     	; 0x60de <__fixunssfsi+0x46>
    60d0:	b9 3f       	cpi	r27, 0xF9	; 249
    60d2:	cc f3       	brlt	.-14     	; 0x60c6 <__fixunssfsi+0x2e>
    60d4:	86 95       	lsr	r24
    60d6:	77 95       	ror	r23
    60d8:	67 95       	ror	r22
    60da:	b3 95       	inc	r27
    60dc:	d9 f7       	brne	.-10     	; 0x60d4 <__fixunssfsi+0x3c>
    60de:	3e f4       	brtc	.+14     	; 0x60ee <__fixunssfsi+0x56>
    60e0:	90 95       	com	r25
    60e2:	80 95       	com	r24
    60e4:	70 95       	com	r23
    60e6:	61 95       	neg	r22
    60e8:	7f 4f       	sbci	r23, 0xFF	; 255
    60ea:	8f 4f       	sbci	r24, 0xFF	; 255
    60ec:	9f 4f       	sbci	r25, 0xFF	; 255
    60ee:	08 95       	ret

000060f0 <__floatunsisf>:
    60f0:	e8 94       	clt
    60f2:	09 c0       	rjmp	.+18     	; 0x6106 <__floatsisf+0x12>

000060f4 <__floatsisf>:
    60f4:	97 fb       	bst	r25, 7
    60f6:	3e f4       	brtc	.+14     	; 0x6106 <__floatsisf+0x12>
    60f8:	90 95       	com	r25
    60fa:	80 95       	com	r24
    60fc:	70 95       	com	r23
    60fe:	61 95       	neg	r22
    6100:	7f 4f       	sbci	r23, 0xFF	; 255
    6102:	8f 4f       	sbci	r24, 0xFF	; 255
    6104:	9f 4f       	sbci	r25, 0xFF	; 255
    6106:	99 23       	and	r25, r25
    6108:	a9 f0       	breq	.+42     	; 0x6134 <__floatsisf+0x40>
    610a:	f9 2f       	mov	r31, r25
    610c:	96 e9       	ldi	r25, 0x96	; 150
    610e:	bb 27       	eor	r27, r27
    6110:	93 95       	inc	r25
    6112:	f6 95       	lsr	r31
    6114:	87 95       	ror	r24
    6116:	77 95       	ror	r23
    6118:	67 95       	ror	r22
    611a:	b7 95       	ror	r27
    611c:	f1 11       	cpse	r31, r1
    611e:	f8 cf       	rjmp	.-16     	; 0x6110 <__floatsisf+0x1c>
    6120:	fa f4       	brpl	.+62     	; 0x6160 <__floatsisf+0x6c>
    6122:	bb 0f       	add	r27, r27
    6124:	11 f4       	brne	.+4      	; 0x612a <__floatsisf+0x36>
    6126:	60 ff       	sbrs	r22, 0
    6128:	1b c0       	rjmp	.+54     	; 0x6160 <__floatsisf+0x6c>
    612a:	6f 5f       	subi	r22, 0xFF	; 255
    612c:	7f 4f       	sbci	r23, 0xFF	; 255
    612e:	8f 4f       	sbci	r24, 0xFF	; 255
    6130:	9f 4f       	sbci	r25, 0xFF	; 255
    6132:	16 c0       	rjmp	.+44     	; 0x6160 <__floatsisf+0x6c>
    6134:	88 23       	and	r24, r24
    6136:	11 f0       	breq	.+4      	; 0x613c <__floatsisf+0x48>
    6138:	96 e9       	ldi	r25, 0x96	; 150
    613a:	11 c0       	rjmp	.+34     	; 0x615e <__floatsisf+0x6a>
    613c:	77 23       	and	r23, r23
    613e:	21 f0       	breq	.+8      	; 0x6148 <__floatsisf+0x54>
    6140:	9e e8       	ldi	r25, 0x8E	; 142
    6142:	87 2f       	mov	r24, r23
    6144:	76 2f       	mov	r23, r22
    6146:	05 c0       	rjmp	.+10     	; 0x6152 <__floatsisf+0x5e>
    6148:	66 23       	and	r22, r22
    614a:	71 f0       	breq	.+28     	; 0x6168 <__floatsisf+0x74>
    614c:	96 e8       	ldi	r25, 0x86	; 134
    614e:	86 2f       	mov	r24, r22
    6150:	70 e0       	ldi	r23, 0x00	; 0
    6152:	60 e0       	ldi	r22, 0x00	; 0
    6154:	2a f0       	brmi	.+10     	; 0x6160 <__floatsisf+0x6c>
    6156:	9a 95       	dec	r25
    6158:	66 0f       	add	r22, r22
    615a:	77 1f       	adc	r23, r23
    615c:	88 1f       	adc	r24, r24
    615e:	da f7       	brpl	.-10     	; 0x6156 <__floatsisf+0x62>
    6160:	88 0f       	add	r24, r24
    6162:	96 95       	lsr	r25
    6164:	87 95       	ror	r24
    6166:	97 f9       	bld	r25, 7
    6168:	08 95       	ret

0000616a <__fp_cmp>:
    616a:	99 0f       	add	r25, r25
    616c:	00 08       	sbc	r0, r0
    616e:	55 0f       	add	r21, r21
    6170:	aa 0b       	sbc	r26, r26
    6172:	e0 e8       	ldi	r30, 0x80	; 128
    6174:	fe ef       	ldi	r31, 0xFE	; 254
    6176:	16 16       	cp	r1, r22
    6178:	17 06       	cpc	r1, r23
    617a:	e8 07       	cpc	r30, r24
    617c:	f9 07       	cpc	r31, r25
    617e:	c0 f0       	brcs	.+48     	; 0x61b0 <__fp_cmp+0x46>
    6180:	12 16       	cp	r1, r18
    6182:	13 06       	cpc	r1, r19
    6184:	e4 07       	cpc	r30, r20
    6186:	f5 07       	cpc	r31, r21
    6188:	98 f0       	brcs	.+38     	; 0x61b0 <__fp_cmp+0x46>
    618a:	62 1b       	sub	r22, r18
    618c:	73 0b       	sbc	r23, r19
    618e:	84 0b       	sbc	r24, r20
    6190:	95 0b       	sbc	r25, r21
    6192:	39 f4       	brne	.+14     	; 0x61a2 <__fp_cmp+0x38>
    6194:	0a 26       	eor	r0, r26
    6196:	61 f0       	breq	.+24     	; 0x61b0 <__fp_cmp+0x46>
    6198:	23 2b       	or	r18, r19
    619a:	24 2b       	or	r18, r20
    619c:	25 2b       	or	r18, r21
    619e:	21 f4       	brne	.+8      	; 0x61a8 <__fp_cmp+0x3e>
    61a0:	08 95       	ret
    61a2:	0a 26       	eor	r0, r26
    61a4:	09 f4       	brne	.+2      	; 0x61a8 <__fp_cmp+0x3e>
    61a6:	a1 40       	sbci	r26, 0x01	; 1
    61a8:	a6 95       	lsr	r26
    61aa:	8f ef       	ldi	r24, 0xFF	; 255
    61ac:	81 1d       	adc	r24, r1
    61ae:	81 1d       	adc	r24, r1
    61b0:	08 95       	ret

000061b2 <__fp_inf>:
    61b2:	97 f9       	bld	r25, 7
    61b4:	9f 67       	ori	r25, 0x7F	; 127
    61b6:	80 e8       	ldi	r24, 0x80	; 128
    61b8:	70 e0       	ldi	r23, 0x00	; 0
    61ba:	60 e0       	ldi	r22, 0x00	; 0
    61bc:	08 95       	ret

000061be <__fp_nan>:
    61be:	9f ef       	ldi	r25, 0xFF	; 255
    61c0:	80 ec       	ldi	r24, 0xC0	; 192
    61c2:	08 95       	ret

000061c4 <__fp_powser>:
    61c4:	df 93       	push	r29
    61c6:	cf 93       	push	r28
    61c8:	1f 93       	push	r17
    61ca:	0f 93       	push	r16
    61cc:	ff 92       	push	r15
    61ce:	ef 92       	push	r14
    61d0:	df 92       	push	r13
    61d2:	7b 01       	movw	r14, r22
    61d4:	8c 01       	movw	r16, r24
    61d6:	68 94       	set
    61d8:	05 c0       	rjmp	.+10     	; 0x61e4 <__fp_powser+0x20>
    61da:	da 2e       	mov	r13, r26
    61dc:	ef 01       	movw	r28, r30
    61de:	af d0       	rcall	.+350    	; 0x633e <__mulsf3x>
    61e0:	fe 01       	movw	r30, r28
    61e2:	e8 94       	clt
    61e4:	a5 91       	lpm	r26, Z+
    61e6:	25 91       	lpm	r18, Z+
    61e8:	35 91       	lpm	r19, Z+
    61ea:	45 91       	lpm	r20, Z+
    61ec:	55 91       	lpm	r21, Z+
    61ee:	ae f3       	brts	.-22     	; 0x61da <__fp_powser+0x16>
    61f0:	ef 01       	movw	r28, r30
    61f2:	29 de       	rcall	.-942    	; 0x5e46 <__addsf3x>
    61f4:	fe 01       	movw	r30, r28
    61f6:	97 01       	movw	r18, r14
    61f8:	a8 01       	movw	r20, r16
    61fa:	da 94       	dec	r13
    61fc:	79 f7       	brne	.-34     	; 0x61dc <__fp_powser+0x18>
    61fe:	df 90       	pop	r13
    6200:	ef 90       	pop	r14
    6202:	ff 90       	pop	r15
    6204:	0f 91       	pop	r16
    6206:	1f 91       	pop	r17
    6208:	cf 91       	pop	r28
    620a:	df 91       	pop	r29
    620c:	08 95       	ret

0000620e <__fp_pscA>:
    620e:	00 24       	eor	r0, r0
    6210:	0a 94       	dec	r0
    6212:	16 16       	cp	r1, r22
    6214:	17 06       	cpc	r1, r23
    6216:	18 06       	cpc	r1, r24
    6218:	09 06       	cpc	r0, r25
    621a:	08 95       	ret

0000621c <__fp_pscB>:
    621c:	00 24       	eor	r0, r0
    621e:	0a 94       	dec	r0
    6220:	12 16       	cp	r1, r18
    6222:	13 06       	cpc	r1, r19
    6224:	14 06       	cpc	r1, r20
    6226:	05 06       	cpc	r0, r21
    6228:	08 95       	ret
    622a:	c9 cf       	rjmp	.-110    	; 0x61be <__fp_nan>

0000622c <__fp_rempio2>:
    622c:	50 d0       	rcall	.+160    	; 0x62ce <__fp_splitA>
    622e:	e8 f3       	brcs	.-6      	; 0x622a <__fp_pscB+0xe>
    6230:	e8 94       	clt
    6232:	e0 e0       	ldi	r30, 0x00	; 0
    6234:	bb 27       	eor	r27, r27
    6236:	9f 57       	subi	r25, 0x7F	; 127
    6238:	f0 f0       	brcs	.+60     	; 0x6276 <__fp_rempio2+0x4a>
    623a:	2a ed       	ldi	r18, 0xDA	; 218
    623c:	3f e0       	ldi	r19, 0x0F	; 15
    623e:	49 ec       	ldi	r20, 0xC9	; 201
    6240:	06 c0       	rjmp	.+12     	; 0x624e <__fp_rempio2+0x22>
    6242:	ee 0f       	add	r30, r30
    6244:	bb 0f       	add	r27, r27
    6246:	66 1f       	adc	r22, r22
    6248:	77 1f       	adc	r23, r23
    624a:	88 1f       	adc	r24, r24
    624c:	28 f0       	brcs	.+10     	; 0x6258 <__fp_rempio2+0x2c>
    624e:	b2 3a       	cpi	r27, 0xA2	; 162
    6250:	62 07       	cpc	r22, r18
    6252:	73 07       	cpc	r23, r19
    6254:	84 07       	cpc	r24, r20
    6256:	28 f0       	brcs	.+10     	; 0x6262 <__fp_rempio2+0x36>
    6258:	b2 5a       	subi	r27, 0xA2	; 162
    625a:	62 0b       	sbc	r22, r18
    625c:	73 0b       	sbc	r23, r19
    625e:	84 0b       	sbc	r24, r20
    6260:	e3 95       	inc	r30
    6262:	9a 95       	dec	r25
    6264:	72 f7       	brpl	.-36     	; 0x6242 <__fp_rempio2+0x16>
    6266:	80 38       	cpi	r24, 0x80	; 128
    6268:	30 f4       	brcc	.+12     	; 0x6276 <__fp_rempio2+0x4a>
    626a:	9a 95       	dec	r25
    626c:	bb 0f       	add	r27, r27
    626e:	66 1f       	adc	r22, r22
    6270:	77 1f       	adc	r23, r23
    6272:	88 1f       	adc	r24, r24
    6274:	d2 f7       	brpl	.-12     	; 0x626a <__fp_rempio2+0x3e>
    6276:	90 48       	sbci	r25, 0x80	; 128
    6278:	06 c1       	rjmp	.+524    	; 0x6486 <__fp_mpack_finite>

0000627a <__fp_round>:
    627a:	09 2e       	mov	r0, r25
    627c:	03 94       	inc	r0
    627e:	00 0c       	add	r0, r0
    6280:	11 f4       	brne	.+4      	; 0x6286 <__fp_round+0xc>
    6282:	88 23       	and	r24, r24
    6284:	52 f0       	brmi	.+20     	; 0x629a <__fp_round+0x20>
    6286:	bb 0f       	add	r27, r27
    6288:	40 f4       	brcc	.+16     	; 0x629a <__fp_round+0x20>
    628a:	bf 2b       	or	r27, r31
    628c:	11 f4       	brne	.+4      	; 0x6292 <__fp_round+0x18>
    628e:	60 ff       	sbrs	r22, 0
    6290:	04 c0       	rjmp	.+8      	; 0x629a <__fp_round+0x20>
    6292:	6f 5f       	subi	r22, 0xFF	; 255
    6294:	7f 4f       	sbci	r23, 0xFF	; 255
    6296:	8f 4f       	sbci	r24, 0xFF	; 255
    6298:	9f 4f       	sbci	r25, 0xFF	; 255
    629a:	08 95       	ret

0000629c <__fp_sinus>:
    629c:	ef 93       	push	r30
    629e:	e0 ff       	sbrs	r30, 0
    62a0:	06 c0       	rjmp	.+12     	; 0x62ae <__fp_sinus+0x12>
    62a2:	a2 ea       	ldi	r26, 0xA2	; 162
    62a4:	2a ed       	ldi	r18, 0xDA	; 218
    62a6:	3f e0       	ldi	r19, 0x0F	; 15
    62a8:	49 ec       	ldi	r20, 0xC9	; 201
    62aa:	5f eb       	ldi	r21, 0xBF	; 191
    62ac:	cc dd       	rcall	.-1128   	; 0x5e46 <__addsf3x>
    62ae:	e5 df       	rcall	.-54     	; 0x627a <__fp_round>
    62b0:	0f 90       	pop	r0
    62b2:	03 94       	inc	r0
    62b4:	01 fc       	sbrc	r0, 1
    62b6:	90 58       	subi	r25, 0x80	; 128
    62b8:	e1 e1       	ldi	r30, 0x11	; 17
    62ba:	f1 e0       	ldi	r31, 0x01	; 1
    62bc:	f7 c0       	rjmp	.+494    	; 0x64ac <__fp_powsodd>

000062be <__fp_split3>:
    62be:	57 fd       	sbrc	r21, 7
    62c0:	90 58       	subi	r25, 0x80	; 128
    62c2:	44 0f       	add	r20, r20
    62c4:	55 1f       	adc	r21, r21
    62c6:	59 f0       	breq	.+22     	; 0x62de <__fp_splitA+0x10>
    62c8:	5f 3f       	cpi	r21, 0xFF	; 255
    62ca:	71 f0       	breq	.+28     	; 0x62e8 <__fp_splitA+0x1a>
    62cc:	47 95       	ror	r20

000062ce <__fp_splitA>:
    62ce:	88 0f       	add	r24, r24
    62d0:	97 fb       	bst	r25, 7
    62d2:	99 1f       	adc	r25, r25
    62d4:	61 f0       	breq	.+24     	; 0x62ee <__fp_splitA+0x20>
    62d6:	9f 3f       	cpi	r25, 0xFF	; 255
    62d8:	79 f0       	breq	.+30     	; 0x62f8 <__fp_splitA+0x2a>
    62da:	87 95       	ror	r24
    62dc:	08 95       	ret
    62de:	12 16       	cp	r1, r18
    62e0:	13 06       	cpc	r1, r19
    62e2:	14 06       	cpc	r1, r20
    62e4:	55 1f       	adc	r21, r21
    62e6:	f2 cf       	rjmp	.-28     	; 0x62cc <__fp_split3+0xe>
    62e8:	46 95       	lsr	r20
    62ea:	f1 df       	rcall	.-30     	; 0x62ce <__fp_splitA>
    62ec:	08 c0       	rjmp	.+16     	; 0x62fe <__fp_splitA+0x30>
    62ee:	16 16       	cp	r1, r22
    62f0:	17 06       	cpc	r1, r23
    62f2:	18 06       	cpc	r1, r24
    62f4:	99 1f       	adc	r25, r25
    62f6:	f1 cf       	rjmp	.-30     	; 0x62da <__fp_splitA+0xc>
    62f8:	86 95       	lsr	r24
    62fa:	71 05       	cpc	r23, r1
    62fc:	61 05       	cpc	r22, r1
    62fe:	08 94       	sec
    6300:	08 95       	ret

00006302 <__fp_zero>:
    6302:	e8 94       	clt

00006304 <__fp_szero>:
    6304:	bb 27       	eor	r27, r27
    6306:	66 27       	eor	r22, r22
    6308:	77 27       	eor	r23, r23
    630a:	cb 01       	movw	r24, r22
    630c:	97 f9       	bld	r25, 7
    630e:	08 95       	ret

00006310 <__gesf2>:
    6310:	2c df       	rcall	.-424    	; 0x616a <__fp_cmp>
    6312:	08 f4       	brcc	.+2      	; 0x6316 <__gesf2+0x6>
    6314:	8f ef       	ldi	r24, 0xFF	; 255
    6316:	08 95       	ret

00006318 <inverse>:
    6318:	9b 01       	movw	r18, r22
    631a:	ac 01       	movw	r20, r24
    631c:	60 e0       	ldi	r22, 0x00	; 0
    631e:	70 e0       	ldi	r23, 0x00	; 0
    6320:	80 e8       	ldi	r24, 0x80	; 128
    6322:	9f e3       	ldi	r25, 0x3F	; 63
    6324:	4c ce       	rjmp	.-872    	; 0x5fbe <__divsf3>

00006326 <__mulsf3>:
    6326:	0b d0       	rcall	.+22     	; 0x633e <__mulsf3x>
    6328:	a8 cf       	rjmp	.-176    	; 0x627a <__fp_round>
    632a:	71 df       	rcall	.-286    	; 0x620e <__fp_pscA>
    632c:	28 f0       	brcs	.+10     	; 0x6338 <__mulsf3+0x12>
    632e:	76 df       	rcall	.-276    	; 0x621c <__fp_pscB>
    6330:	18 f0       	brcs	.+6      	; 0x6338 <__mulsf3+0x12>
    6332:	95 23       	and	r25, r21
    6334:	09 f0       	breq	.+2      	; 0x6338 <__mulsf3+0x12>
    6336:	3d cf       	rjmp	.-390    	; 0x61b2 <__fp_inf>
    6338:	42 cf       	rjmp	.-380    	; 0x61be <__fp_nan>
    633a:	11 24       	eor	r1, r1
    633c:	e3 cf       	rjmp	.-58     	; 0x6304 <__fp_szero>

0000633e <__mulsf3x>:
    633e:	bf df       	rcall	.-130    	; 0x62be <__fp_split3>
    6340:	a0 f3       	brcs	.-24     	; 0x632a <__mulsf3+0x4>

00006342 <__mulsf3_pse>:
    6342:	95 9f       	mul	r25, r21
    6344:	d1 f3       	breq	.-12     	; 0x633a <__mulsf3+0x14>
    6346:	95 0f       	add	r25, r21
    6348:	50 e0       	ldi	r21, 0x00	; 0
    634a:	55 1f       	adc	r21, r21
    634c:	62 9f       	mul	r22, r18
    634e:	f0 01       	movw	r30, r0
    6350:	72 9f       	mul	r23, r18
    6352:	bb 27       	eor	r27, r27
    6354:	f0 0d       	add	r31, r0
    6356:	b1 1d       	adc	r27, r1
    6358:	63 9f       	mul	r22, r19
    635a:	aa 27       	eor	r26, r26
    635c:	f0 0d       	add	r31, r0
    635e:	b1 1d       	adc	r27, r1
    6360:	aa 1f       	adc	r26, r26
    6362:	64 9f       	mul	r22, r20
    6364:	66 27       	eor	r22, r22
    6366:	b0 0d       	add	r27, r0
    6368:	a1 1d       	adc	r26, r1
    636a:	66 1f       	adc	r22, r22
    636c:	82 9f       	mul	r24, r18
    636e:	22 27       	eor	r18, r18
    6370:	b0 0d       	add	r27, r0
    6372:	a1 1d       	adc	r26, r1
    6374:	62 1f       	adc	r22, r18
    6376:	73 9f       	mul	r23, r19
    6378:	b0 0d       	add	r27, r0
    637a:	a1 1d       	adc	r26, r1
    637c:	62 1f       	adc	r22, r18
    637e:	83 9f       	mul	r24, r19
    6380:	a0 0d       	add	r26, r0
    6382:	61 1d       	adc	r22, r1
    6384:	22 1f       	adc	r18, r18
    6386:	74 9f       	mul	r23, r20
    6388:	33 27       	eor	r19, r19
    638a:	a0 0d       	add	r26, r0
    638c:	61 1d       	adc	r22, r1
    638e:	23 1f       	adc	r18, r19
    6390:	84 9f       	mul	r24, r20
    6392:	60 0d       	add	r22, r0
    6394:	21 1d       	adc	r18, r1
    6396:	82 2f       	mov	r24, r18
    6398:	76 2f       	mov	r23, r22
    639a:	6a 2f       	mov	r22, r26
    639c:	11 24       	eor	r1, r1
    639e:	9f 57       	subi	r25, 0x7F	; 127
    63a0:	50 40       	sbci	r21, 0x00	; 0
    63a2:	8a f0       	brmi	.+34     	; 0x63c6 <__mulsf3_pse+0x84>
    63a4:	e1 f0       	breq	.+56     	; 0x63de <__mulsf3_pse+0x9c>
    63a6:	88 23       	and	r24, r24
    63a8:	4a f0       	brmi	.+18     	; 0x63bc <__mulsf3_pse+0x7a>
    63aa:	ee 0f       	add	r30, r30
    63ac:	ff 1f       	adc	r31, r31
    63ae:	bb 1f       	adc	r27, r27
    63b0:	66 1f       	adc	r22, r22
    63b2:	77 1f       	adc	r23, r23
    63b4:	88 1f       	adc	r24, r24
    63b6:	91 50       	subi	r25, 0x01	; 1
    63b8:	50 40       	sbci	r21, 0x00	; 0
    63ba:	a9 f7       	brne	.-22     	; 0x63a6 <__mulsf3_pse+0x64>
    63bc:	9e 3f       	cpi	r25, 0xFE	; 254
    63be:	51 05       	cpc	r21, r1
    63c0:	70 f0       	brcs	.+28     	; 0x63de <__mulsf3_pse+0x9c>
    63c2:	f7 ce       	rjmp	.-530    	; 0x61b2 <__fp_inf>
    63c4:	9f cf       	rjmp	.-194    	; 0x6304 <__fp_szero>
    63c6:	5f 3f       	cpi	r21, 0xFF	; 255
    63c8:	ec f3       	brlt	.-6      	; 0x63c4 <__mulsf3_pse+0x82>
    63ca:	98 3e       	cpi	r25, 0xE8	; 232
    63cc:	dc f3       	brlt	.-10     	; 0x63c4 <__mulsf3_pse+0x82>
    63ce:	86 95       	lsr	r24
    63d0:	77 95       	ror	r23
    63d2:	67 95       	ror	r22
    63d4:	b7 95       	ror	r27
    63d6:	f7 95       	ror	r31
    63d8:	e7 95       	ror	r30
    63da:	9f 5f       	subi	r25, 0xFF	; 255
    63dc:	c1 f7       	brne	.-16     	; 0x63ce <__mulsf3_pse+0x8c>
    63de:	fe 2b       	or	r31, r30
    63e0:	88 0f       	add	r24, r24
    63e2:	91 1d       	adc	r25, r1
    63e4:	96 95       	lsr	r25
    63e6:	87 95       	ror	r24
    63e8:	97 f9       	bld	r25, 7
    63ea:	08 95       	ret

000063ec <sin>:
    63ec:	9f 93       	push	r25
    63ee:	1e df       	rcall	.-452    	; 0x622c <__fp_rempio2>
    63f0:	0f 90       	pop	r0
    63f2:	07 fc       	sbrc	r0, 7
    63f4:	ee 5f       	subi	r30, 0xFE	; 254
    63f6:	52 cf       	rjmp	.-348    	; 0x629c <__fp_sinus>
    63f8:	11 f4       	brne	.+4      	; 0x63fe <sin+0x12>
    63fa:	0e f4       	brtc	.+2      	; 0x63fe <sin+0x12>
    63fc:	e0 ce       	rjmp	.-576    	; 0x61be <__fp_nan>
    63fe:	41 c0       	rjmp	.+130    	; 0x6482 <__fp_mpack>

00006400 <sqrt>:
    6400:	66 df       	rcall	.-308    	; 0x62ce <__fp_splitA>
    6402:	d0 f3       	brcs	.-12     	; 0x63f8 <sin+0xc>
    6404:	99 23       	and	r25, r25
    6406:	d9 f3       	breq	.-10     	; 0x63fe <sin+0x12>
    6408:	ce f3       	brts	.-14     	; 0x63fc <sin+0x10>
    640a:	9f 57       	subi	r25, 0x7F	; 127
    640c:	55 0b       	sbc	r21, r21
    640e:	87 ff       	sbrs	r24, 7
    6410:	46 d0       	rcall	.+140    	; 0x649e <__fp_norm2>
    6412:	00 24       	eor	r0, r0
    6414:	a0 e6       	ldi	r26, 0x60	; 96
    6416:	40 ea       	ldi	r20, 0xA0	; 160
    6418:	90 01       	movw	r18, r0
    641a:	80 58       	subi	r24, 0x80	; 128
    641c:	56 95       	lsr	r21
    641e:	97 95       	ror	r25
    6420:	28 f4       	brcc	.+10     	; 0x642c <sqrt+0x2c>
    6422:	80 5c       	subi	r24, 0xC0	; 192
    6424:	66 0f       	add	r22, r22
    6426:	77 1f       	adc	r23, r23
    6428:	88 1f       	adc	r24, r24
    642a:	20 f0       	brcs	.+8      	; 0x6434 <sqrt+0x34>
    642c:	26 17       	cp	r18, r22
    642e:	37 07       	cpc	r19, r23
    6430:	48 07       	cpc	r20, r24
    6432:	30 f4       	brcc	.+12     	; 0x6440 <sqrt+0x40>
    6434:	62 1b       	sub	r22, r18
    6436:	73 0b       	sbc	r23, r19
    6438:	84 0b       	sbc	r24, r20
    643a:	20 29       	or	r18, r0
    643c:	31 29       	or	r19, r1
    643e:	4a 2b       	or	r20, r26
    6440:	a6 95       	lsr	r26
    6442:	17 94       	ror	r1
    6444:	07 94       	ror	r0
    6446:	20 25       	eor	r18, r0
    6448:	31 25       	eor	r19, r1
    644a:	4a 27       	eor	r20, r26
    644c:	58 f7       	brcc	.-42     	; 0x6424 <sqrt+0x24>
    644e:	66 0f       	add	r22, r22
    6450:	77 1f       	adc	r23, r23
    6452:	88 1f       	adc	r24, r24
    6454:	20 f0       	brcs	.+8      	; 0x645e <sqrt+0x5e>
    6456:	26 17       	cp	r18, r22
    6458:	37 07       	cpc	r19, r23
    645a:	48 07       	cpc	r20, r24
    645c:	30 f4       	brcc	.+12     	; 0x646a <sqrt+0x6a>
    645e:	62 0b       	sbc	r22, r18
    6460:	73 0b       	sbc	r23, r19
    6462:	84 0b       	sbc	r24, r20
    6464:	20 0d       	add	r18, r0
    6466:	31 1d       	adc	r19, r1
    6468:	41 1d       	adc	r20, r1
    646a:	a0 95       	com	r26
    646c:	81 f7       	brne	.-32     	; 0x644e <sqrt+0x4e>
    646e:	b9 01       	movw	r22, r18
    6470:	84 2f       	mov	r24, r20
    6472:	91 58       	subi	r25, 0x81	; 129
    6474:	88 0f       	add	r24, r24
    6476:	96 95       	lsr	r25
    6478:	87 95       	ror	r24
    647a:	08 95       	ret

0000647c <square>:
    647c:	9b 01       	movw	r18, r22
    647e:	ac 01       	movw	r20, r24
    6480:	52 cf       	rjmp	.-348    	; 0x6326 <__mulsf3>

00006482 <__fp_mpack>:
    6482:	9f 3f       	cpi	r25, 0xFF	; 255
    6484:	31 f0       	breq	.+12     	; 0x6492 <__fp_mpack_finite+0xc>

00006486 <__fp_mpack_finite>:
    6486:	91 50       	subi	r25, 0x01	; 1
    6488:	20 f4       	brcc	.+8      	; 0x6492 <__fp_mpack_finite+0xc>
    648a:	87 95       	ror	r24
    648c:	77 95       	ror	r23
    648e:	67 95       	ror	r22
    6490:	b7 95       	ror	r27
    6492:	88 0f       	add	r24, r24
    6494:	91 1d       	adc	r25, r1
    6496:	96 95       	lsr	r25
    6498:	87 95       	ror	r24
    649a:	97 f9       	bld	r25, 7
    649c:	08 95       	ret

0000649e <__fp_norm2>:
    649e:	91 50       	subi	r25, 0x01	; 1
    64a0:	50 40       	sbci	r21, 0x00	; 0
    64a2:	66 0f       	add	r22, r22
    64a4:	77 1f       	adc	r23, r23
    64a6:	88 1f       	adc	r24, r24
    64a8:	d2 f7       	brpl	.-12     	; 0x649e <__fp_norm2>
    64aa:	08 95       	ret

000064ac <__fp_powsodd>:
    64ac:	9f 93       	push	r25
    64ae:	8f 93       	push	r24
    64b0:	7f 93       	push	r23
    64b2:	6f 93       	push	r22
    64b4:	ff 93       	push	r31
    64b6:	ef 93       	push	r30
    64b8:	9b 01       	movw	r18, r22
    64ba:	ac 01       	movw	r20, r24
    64bc:	34 df       	rcall	.-408    	; 0x6326 <__mulsf3>
    64be:	ef 91       	pop	r30
    64c0:	ff 91       	pop	r31
    64c2:	80 de       	rcall	.-768    	; 0x61c4 <__fp_powser>
    64c4:	2f 91       	pop	r18
    64c6:	3f 91       	pop	r19
    64c8:	4f 91       	pop	r20
    64ca:	5f 91       	pop	r21
    64cc:	2c cf       	rjmp	.-424    	; 0x6326 <__mulsf3>

000064ce <vfprintf>:
    64ce:	2f 92       	push	r2
    64d0:	3f 92       	push	r3
    64d2:	4f 92       	push	r4
    64d4:	5f 92       	push	r5
    64d6:	6f 92       	push	r6
    64d8:	7f 92       	push	r7
    64da:	8f 92       	push	r8
    64dc:	9f 92       	push	r9
    64de:	af 92       	push	r10
    64e0:	bf 92       	push	r11
    64e2:	cf 92       	push	r12
    64e4:	df 92       	push	r13
    64e6:	ef 92       	push	r14
    64e8:	ff 92       	push	r15
    64ea:	0f 93       	push	r16
    64ec:	1f 93       	push	r17
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	cd b7       	in	r28, 0x3d	; 61
    64f4:	de b7       	in	r29, 0x3e	; 62
    64f6:	60 97       	sbiw	r28, 0x10	; 16
    64f8:	0f b6       	in	r0, 0x3f	; 63
    64fa:	f8 94       	cli
    64fc:	de bf       	out	0x3e, r29	; 62
    64fe:	0f be       	out	0x3f, r0	; 63
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	7c 01       	movw	r14, r24
    6504:	1b 01       	movw	r2, r22
    6506:	6a 01       	movw	r12, r20
    6508:	fc 01       	movw	r30, r24
    650a:	17 82       	std	Z+7, r1	; 0x07
    650c:	16 82       	std	Z+6, r1	; 0x06
    650e:	83 81       	ldd	r24, Z+3	; 0x03
    6510:	81 ff       	sbrs	r24, 1
    6512:	2a c3       	rjmp	.+1620   	; 0x6b68 <vfprintf+0x69a>
    6514:	9e 01       	movw	r18, r28
    6516:	2f 5f       	subi	r18, 0xFF	; 255
    6518:	3f 4f       	sbci	r19, 0xFF	; 255
    651a:	39 01       	movw	r6, r18
    651c:	f7 01       	movw	r30, r14
    651e:	93 81       	ldd	r25, Z+3	; 0x03
    6520:	f1 01       	movw	r30, r2
    6522:	93 fd       	sbrc	r25, 3
    6524:	85 91       	lpm	r24, Z+
    6526:	93 ff       	sbrs	r25, 3
    6528:	81 91       	ld	r24, Z+
    652a:	1f 01       	movw	r2, r30
    652c:	88 23       	and	r24, r24
    652e:	09 f4       	brne	.+2      	; 0x6532 <vfprintf+0x64>
    6530:	17 c3       	rjmp	.+1582   	; 0x6b60 <vfprintf+0x692>
    6532:	85 32       	cpi	r24, 0x25	; 37
    6534:	39 f4       	brne	.+14     	; 0x6544 <vfprintf+0x76>
    6536:	93 fd       	sbrc	r25, 3
    6538:	85 91       	lpm	r24, Z+
    653a:	93 ff       	sbrs	r25, 3
    653c:	81 91       	ld	r24, Z+
    653e:	1f 01       	movw	r2, r30
    6540:	85 32       	cpi	r24, 0x25	; 37
    6542:	31 f4       	brne	.+12     	; 0x6550 <vfprintf+0x82>
    6544:	b7 01       	movw	r22, r14
    6546:	90 e0       	ldi	r25, 0x00	; 0
    6548:	78 d4       	rcall	.+2288   	; 0x6e3a <fputc>
    654a:	56 01       	movw	r10, r12
    654c:	65 01       	movw	r12, r10
    654e:	e6 cf       	rjmp	.-52     	; 0x651c <vfprintf+0x4e>
    6550:	10 e0       	ldi	r17, 0x00	; 0
    6552:	51 2c       	mov	r5, r1
    6554:	91 2c       	mov	r9, r1
    6556:	ff e1       	ldi	r31, 0x1F	; 31
    6558:	f9 15       	cp	r31, r9
    655a:	d8 f0       	brcs	.+54     	; 0x6592 <vfprintf+0xc4>
    655c:	8b 32       	cpi	r24, 0x2B	; 43
    655e:	79 f0       	breq	.+30     	; 0x657e <vfprintf+0xb0>
    6560:	38 f4       	brcc	.+14     	; 0x6570 <vfprintf+0xa2>
    6562:	80 32       	cpi	r24, 0x20	; 32
    6564:	79 f0       	breq	.+30     	; 0x6584 <vfprintf+0xb6>
    6566:	83 32       	cpi	r24, 0x23	; 35
    6568:	a1 f4       	brne	.+40     	; 0x6592 <vfprintf+0xc4>
    656a:	f9 2d       	mov	r31, r9
    656c:	f0 61       	ori	r31, 0x10	; 16
    656e:	2e c0       	rjmp	.+92     	; 0x65cc <vfprintf+0xfe>
    6570:	8d 32       	cpi	r24, 0x2D	; 45
    6572:	61 f0       	breq	.+24     	; 0x658c <vfprintf+0xbe>
    6574:	80 33       	cpi	r24, 0x30	; 48
    6576:	69 f4       	brne	.+26     	; 0x6592 <vfprintf+0xc4>
    6578:	29 2d       	mov	r18, r9
    657a:	21 60       	ori	r18, 0x01	; 1
    657c:	2d c0       	rjmp	.+90     	; 0x65d8 <vfprintf+0x10a>
    657e:	39 2d       	mov	r19, r9
    6580:	32 60       	ori	r19, 0x02	; 2
    6582:	93 2e       	mov	r9, r19
    6584:	89 2d       	mov	r24, r9
    6586:	84 60       	ori	r24, 0x04	; 4
    6588:	98 2e       	mov	r9, r24
    658a:	2a c0       	rjmp	.+84     	; 0x65e0 <vfprintf+0x112>
    658c:	e9 2d       	mov	r30, r9
    658e:	e8 60       	ori	r30, 0x08	; 8
    6590:	15 c0       	rjmp	.+42     	; 0x65bc <vfprintf+0xee>
    6592:	97 fc       	sbrc	r9, 7
    6594:	2d c0       	rjmp	.+90     	; 0x65f0 <vfprintf+0x122>
    6596:	20 ed       	ldi	r18, 0xD0	; 208
    6598:	28 0f       	add	r18, r24
    659a:	2a 30       	cpi	r18, 0x0A	; 10
    659c:	88 f4       	brcc	.+34     	; 0x65c0 <vfprintf+0xf2>
    659e:	96 fe       	sbrs	r9, 6
    65a0:	06 c0       	rjmp	.+12     	; 0x65ae <vfprintf+0xe0>
    65a2:	3a e0       	ldi	r19, 0x0A	; 10
    65a4:	13 9f       	mul	r17, r19
    65a6:	20 0d       	add	r18, r0
    65a8:	11 24       	eor	r1, r1
    65aa:	12 2f       	mov	r17, r18
    65ac:	19 c0       	rjmp	.+50     	; 0x65e0 <vfprintf+0x112>
    65ae:	8a e0       	ldi	r24, 0x0A	; 10
    65b0:	58 9e       	mul	r5, r24
    65b2:	20 0d       	add	r18, r0
    65b4:	11 24       	eor	r1, r1
    65b6:	52 2e       	mov	r5, r18
    65b8:	e9 2d       	mov	r30, r9
    65ba:	e0 62       	ori	r30, 0x20	; 32
    65bc:	9e 2e       	mov	r9, r30
    65be:	10 c0       	rjmp	.+32     	; 0x65e0 <vfprintf+0x112>
    65c0:	8e 32       	cpi	r24, 0x2E	; 46
    65c2:	31 f4       	brne	.+12     	; 0x65d0 <vfprintf+0x102>
    65c4:	96 fc       	sbrc	r9, 6
    65c6:	cc c2       	rjmp	.+1432   	; 0x6b60 <vfprintf+0x692>
    65c8:	f9 2d       	mov	r31, r9
    65ca:	f0 64       	ori	r31, 0x40	; 64
    65cc:	9f 2e       	mov	r9, r31
    65ce:	08 c0       	rjmp	.+16     	; 0x65e0 <vfprintf+0x112>
    65d0:	8c 36       	cpi	r24, 0x6C	; 108
    65d2:	21 f4       	brne	.+8      	; 0x65dc <vfprintf+0x10e>
    65d4:	29 2d       	mov	r18, r9
    65d6:	20 68       	ori	r18, 0x80	; 128
    65d8:	92 2e       	mov	r9, r18
    65da:	02 c0       	rjmp	.+4      	; 0x65e0 <vfprintf+0x112>
    65dc:	88 36       	cpi	r24, 0x68	; 104
    65de:	41 f4       	brne	.+16     	; 0x65f0 <vfprintf+0x122>
    65e0:	f1 01       	movw	r30, r2
    65e2:	93 fd       	sbrc	r25, 3
    65e4:	85 91       	lpm	r24, Z+
    65e6:	93 ff       	sbrs	r25, 3
    65e8:	81 91       	ld	r24, Z+
    65ea:	1f 01       	movw	r2, r30
    65ec:	81 11       	cpse	r24, r1
    65ee:	b3 cf       	rjmp	.-154    	; 0x6556 <vfprintf+0x88>
    65f0:	9b eb       	ldi	r25, 0xBB	; 187
    65f2:	98 0f       	add	r25, r24
    65f4:	93 30       	cpi	r25, 0x03	; 3
    65f6:	20 f4       	brcc	.+8      	; 0x6600 <vfprintf+0x132>
    65f8:	99 2d       	mov	r25, r9
    65fa:	90 61       	ori	r25, 0x10	; 16
    65fc:	80 5e       	subi	r24, 0xE0	; 224
    65fe:	07 c0       	rjmp	.+14     	; 0x660e <vfprintf+0x140>
    6600:	9b e9       	ldi	r25, 0x9B	; 155
    6602:	98 0f       	add	r25, r24
    6604:	93 30       	cpi	r25, 0x03	; 3
    6606:	08 f0       	brcs	.+2      	; 0x660a <vfprintf+0x13c>
    6608:	59 c1       	rjmp	.+690    	; 0x68bc <vfprintf+0x3ee>
    660a:	99 2d       	mov	r25, r9
    660c:	9f 7e       	andi	r25, 0xEF	; 239
    660e:	96 ff       	sbrs	r25, 6
    6610:	16 e0       	ldi	r17, 0x06	; 6
    6612:	9f 73       	andi	r25, 0x3F	; 63
    6614:	99 2e       	mov	r9, r25
    6616:	85 36       	cpi	r24, 0x65	; 101
    6618:	19 f4       	brne	.+6      	; 0x6620 <vfprintf+0x152>
    661a:	90 64       	ori	r25, 0x40	; 64
    661c:	99 2e       	mov	r9, r25
    661e:	08 c0       	rjmp	.+16     	; 0x6630 <vfprintf+0x162>
    6620:	86 36       	cpi	r24, 0x66	; 102
    6622:	21 f4       	brne	.+8      	; 0x662c <vfprintf+0x15e>
    6624:	39 2f       	mov	r19, r25
    6626:	30 68       	ori	r19, 0x80	; 128
    6628:	93 2e       	mov	r9, r19
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <vfprintf+0x162>
    662c:	11 11       	cpse	r17, r1
    662e:	11 50       	subi	r17, 0x01	; 1
    6630:	97 fe       	sbrs	r9, 7
    6632:	07 c0       	rjmp	.+14     	; 0x6642 <vfprintf+0x174>
    6634:	1c 33       	cpi	r17, 0x3C	; 60
    6636:	50 f4       	brcc	.+20     	; 0x664c <vfprintf+0x17e>
    6638:	44 24       	eor	r4, r4
    663a:	43 94       	inc	r4
    663c:	41 0e       	add	r4, r17
    663e:	27 e0       	ldi	r18, 0x07	; 7
    6640:	0b c0       	rjmp	.+22     	; 0x6658 <vfprintf+0x18a>
    6642:	18 30       	cpi	r17, 0x08	; 8
    6644:	38 f0       	brcs	.+14     	; 0x6654 <vfprintf+0x186>
    6646:	27 e0       	ldi	r18, 0x07	; 7
    6648:	17 e0       	ldi	r17, 0x07	; 7
    664a:	05 c0       	rjmp	.+10     	; 0x6656 <vfprintf+0x188>
    664c:	27 e0       	ldi	r18, 0x07	; 7
    664e:	9c e3       	ldi	r25, 0x3C	; 60
    6650:	49 2e       	mov	r4, r25
    6652:	02 c0       	rjmp	.+4      	; 0x6658 <vfprintf+0x18a>
    6654:	21 2f       	mov	r18, r17
    6656:	41 2c       	mov	r4, r1
    6658:	56 01       	movw	r10, r12
    665a:	84 e0       	ldi	r24, 0x04	; 4
    665c:	a8 0e       	add	r10, r24
    665e:	b1 1c       	adc	r11, r1
    6660:	f6 01       	movw	r30, r12
    6662:	60 81       	ld	r22, Z
    6664:	71 81       	ldd	r23, Z+1	; 0x01
    6666:	82 81       	ldd	r24, Z+2	; 0x02
    6668:	93 81       	ldd	r25, Z+3	; 0x03
    666a:	04 2d       	mov	r16, r4
    666c:	a3 01       	movw	r20, r6
    666e:	ee d2       	rcall	.+1500   	; 0x6c4c <__ftoa_engine>
    6670:	6c 01       	movw	r12, r24
    6672:	f9 81       	ldd	r31, Y+1	; 0x01
    6674:	fc 87       	std	Y+12, r31	; 0x0c
    6676:	f0 ff       	sbrs	r31, 0
    6678:	02 c0       	rjmp	.+4      	; 0x667e <vfprintf+0x1b0>
    667a:	f3 ff       	sbrs	r31, 3
    667c:	06 c0       	rjmp	.+12     	; 0x668a <vfprintf+0x1bc>
    667e:	91 fc       	sbrc	r9, 1
    6680:	06 c0       	rjmp	.+12     	; 0x668e <vfprintf+0x1c0>
    6682:	92 fe       	sbrs	r9, 2
    6684:	06 c0       	rjmp	.+12     	; 0x6692 <vfprintf+0x1c4>
    6686:	00 e2       	ldi	r16, 0x20	; 32
    6688:	05 c0       	rjmp	.+10     	; 0x6694 <vfprintf+0x1c6>
    668a:	0d e2       	ldi	r16, 0x2D	; 45
    668c:	03 c0       	rjmp	.+6      	; 0x6694 <vfprintf+0x1c6>
    668e:	0b e2       	ldi	r16, 0x2B	; 43
    6690:	01 c0       	rjmp	.+2      	; 0x6694 <vfprintf+0x1c6>
    6692:	00 e0       	ldi	r16, 0x00	; 0
    6694:	8c 85       	ldd	r24, Y+12	; 0x0c
    6696:	8c 70       	andi	r24, 0x0C	; 12
    6698:	19 f0       	breq	.+6      	; 0x66a0 <vfprintf+0x1d2>
    669a:	01 11       	cpse	r16, r1
    669c:	43 c2       	rjmp	.+1158   	; 0x6b24 <vfprintf+0x656>
    669e:	80 c2       	rjmp	.+1280   	; 0x6ba0 <vfprintf+0x6d2>
    66a0:	97 fe       	sbrs	r9, 7
    66a2:	10 c0       	rjmp	.+32     	; 0x66c4 <vfprintf+0x1f6>
    66a4:	4c 0c       	add	r4, r12
    66a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    66a8:	f4 ff       	sbrs	r31, 4
    66aa:	04 c0       	rjmp	.+8      	; 0x66b4 <vfprintf+0x1e6>
    66ac:	8a 81       	ldd	r24, Y+2	; 0x02
    66ae:	81 33       	cpi	r24, 0x31	; 49
    66b0:	09 f4       	brne	.+2      	; 0x66b4 <vfprintf+0x1e6>
    66b2:	4a 94       	dec	r4
    66b4:	14 14       	cp	r1, r4
    66b6:	74 f5       	brge	.+92     	; 0x6714 <vfprintf+0x246>
    66b8:	28 e0       	ldi	r18, 0x08	; 8
    66ba:	24 15       	cp	r18, r4
    66bc:	78 f5       	brcc	.+94     	; 0x671c <vfprintf+0x24e>
    66be:	88 e0       	ldi	r24, 0x08	; 8
    66c0:	48 2e       	mov	r4, r24
    66c2:	2c c0       	rjmp	.+88     	; 0x671c <vfprintf+0x24e>
    66c4:	96 fc       	sbrc	r9, 6
    66c6:	2a c0       	rjmp	.+84     	; 0x671c <vfprintf+0x24e>
    66c8:	81 2f       	mov	r24, r17
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	8c 15       	cp	r24, r12
    66ce:	9d 05       	cpc	r25, r13
    66d0:	9c f0       	brlt	.+38     	; 0x66f8 <vfprintf+0x22a>
    66d2:	3c ef       	ldi	r19, 0xFC	; 252
    66d4:	c3 16       	cp	r12, r19
    66d6:	3f ef       	ldi	r19, 0xFF	; 255
    66d8:	d3 06       	cpc	r13, r19
    66da:	74 f0       	brlt	.+28     	; 0x66f8 <vfprintf+0x22a>
    66dc:	89 2d       	mov	r24, r9
    66de:	80 68       	ori	r24, 0x80	; 128
    66e0:	98 2e       	mov	r9, r24
    66e2:	0a c0       	rjmp	.+20     	; 0x66f8 <vfprintf+0x22a>
    66e4:	e2 e0       	ldi	r30, 0x02	; 2
    66e6:	f0 e0       	ldi	r31, 0x00	; 0
    66e8:	ec 0f       	add	r30, r28
    66ea:	fd 1f       	adc	r31, r29
    66ec:	e1 0f       	add	r30, r17
    66ee:	f1 1d       	adc	r31, r1
    66f0:	80 81       	ld	r24, Z
    66f2:	80 33       	cpi	r24, 0x30	; 48
    66f4:	19 f4       	brne	.+6      	; 0x66fc <vfprintf+0x22e>
    66f6:	11 50       	subi	r17, 0x01	; 1
    66f8:	11 11       	cpse	r17, r1
    66fa:	f4 cf       	rjmp	.-24     	; 0x66e4 <vfprintf+0x216>
    66fc:	97 fe       	sbrs	r9, 7
    66fe:	0e c0       	rjmp	.+28     	; 0x671c <vfprintf+0x24e>
    6700:	44 24       	eor	r4, r4
    6702:	43 94       	inc	r4
    6704:	41 0e       	add	r4, r17
    6706:	81 2f       	mov	r24, r17
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	c8 16       	cp	r12, r24
    670c:	d9 06       	cpc	r13, r25
    670e:	2c f4       	brge	.+10     	; 0x671a <vfprintf+0x24c>
    6710:	1c 19       	sub	r17, r12
    6712:	04 c0       	rjmp	.+8      	; 0x671c <vfprintf+0x24e>
    6714:	44 24       	eor	r4, r4
    6716:	43 94       	inc	r4
    6718:	01 c0       	rjmp	.+2      	; 0x671c <vfprintf+0x24e>
    671a:	10 e0       	ldi	r17, 0x00	; 0
    671c:	97 fe       	sbrs	r9, 7
    671e:	06 c0       	rjmp	.+12     	; 0x672c <vfprintf+0x25e>
    6720:	1c 14       	cp	r1, r12
    6722:	1d 04       	cpc	r1, r13
    6724:	34 f4       	brge	.+12     	; 0x6732 <vfprintf+0x264>
    6726:	c6 01       	movw	r24, r12
    6728:	01 96       	adiw	r24, 0x01	; 1
    672a:	05 c0       	rjmp	.+10     	; 0x6736 <vfprintf+0x268>
    672c:	85 e0       	ldi	r24, 0x05	; 5
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	02 c0       	rjmp	.+4      	; 0x6736 <vfprintf+0x268>
    6732:	81 e0       	ldi	r24, 0x01	; 1
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	01 11       	cpse	r16, r1
    6738:	01 96       	adiw	r24, 0x01	; 1
    673a:	11 23       	and	r17, r17
    673c:	31 f0       	breq	.+12     	; 0x674a <vfprintf+0x27c>
    673e:	21 2f       	mov	r18, r17
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	2f 5f       	subi	r18, 0xFF	; 255
    6744:	3f 4f       	sbci	r19, 0xFF	; 255
    6746:	82 0f       	add	r24, r18
    6748:	93 1f       	adc	r25, r19
    674a:	25 2d       	mov	r18, r5
    674c:	30 e0       	ldi	r19, 0x00	; 0
    674e:	82 17       	cp	r24, r18
    6750:	93 07       	cpc	r25, r19
    6752:	14 f4       	brge	.+4      	; 0x6758 <vfprintf+0x28a>
    6754:	58 1a       	sub	r5, r24
    6756:	01 c0       	rjmp	.+2      	; 0x675a <vfprintf+0x28c>
    6758:	51 2c       	mov	r5, r1
    675a:	89 2d       	mov	r24, r9
    675c:	89 70       	andi	r24, 0x09	; 9
    675e:	41 f4       	brne	.+16     	; 0x6770 <vfprintf+0x2a2>
    6760:	55 20       	and	r5, r5
    6762:	31 f0       	breq	.+12     	; 0x6770 <vfprintf+0x2a2>
    6764:	b7 01       	movw	r22, r14
    6766:	80 e2       	ldi	r24, 0x20	; 32
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	67 d3       	rcall	.+1742   	; 0x6e3a <fputc>
    676c:	5a 94       	dec	r5
    676e:	f8 cf       	rjmp	.-16     	; 0x6760 <vfprintf+0x292>
    6770:	00 23       	and	r16, r16
    6772:	21 f0       	breq	.+8      	; 0x677c <vfprintf+0x2ae>
    6774:	b7 01       	movw	r22, r14
    6776:	80 2f       	mov	r24, r16
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	5f d3       	rcall	.+1726   	; 0x6e3a <fputc>
    677c:	93 fc       	sbrc	r9, 3
    677e:	08 c0       	rjmp	.+16     	; 0x6790 <vfprintf+0x2c2>
    6780:	55 20       	and	r5, r5
    6782:	31 f0       	breq	.+12     	; 0x6790 <vfprintf+0x2c2>
    6784:	b7 01       	movw	r22, r14
    6786:	80 e3       	ldi	r24, 0x30	; 48
    6788:	90 e0       	ldi	r25, 0x00	; 0
    678a:	57 d3       	rcall	.+1710   	; 0x6e3a <fputc>
    678c:	5a 94       	dec	r5
    678e:	f8 cf       	rjmp	.-16     	; 0x6780 <vfprintf+0x2b2>
    6790:	97 fe       	sbrs	r9, 7
    6792:	4a c0       	rjmp	.+148    	; 0x6828 <vfprintf+0x35a>
    6794:	46 01       	movw	r8, r12
    6796:	d7 fe       	sbrs	r13, 7
    6798:	02 c0       	rjmp	.+4      	; 0x679e <vfprintf+0x2d0>
    679a:	81 2c       	mov	r8, r1
    679c:	91 2c       	mov	r9, r1
    679e:	c6 01       	movw	r24, r12
    67a0:	88 19       	sub	r24, r8
    67a2:	99 09       	sbc	r25, r9
    67a4:	f3 01       	movw	r30, r6
    67a6:	e8 0f       	add	r30, r24
    67a8:	f9 1f       	adc	r31, r25
    67aa:	fe 87       	std	Y+14, r31	; 0x0e
    67ac:	ed 87       	std	Y+13, r30	; 0x0d
    67ae:	96 01       	movw	r18, r12
    67b0:	24 19       	sub	r18, r4
    67b2:	31 09       	sbc	r19, r1
    67b4:	38 8b       	std	Y+16, r19	; 0x10
    67b6:	2f 87       	std	Y+15, r18	; 0x0f
    67b8:	01 2f       	mov	r16, r17
    67ba:	10 e0       	ldi	r17, 0x00	; 0
    67bc:	11 95       	neg	r17
    67be:	01 95       	neg	r16
    67c0:	11 09       	sbc	r17, r1
    67c2:	3f ef       	ldi	r19, 0xFF	; 255
    67c4:	83 16       	cp	r8, r19
    67c6:	93 06       	cpc	r9, r19
    67c8:	21 f4       	brne	.+8      	; 0x67d2 <vfprintf+0x304>
    67ca:	b7 01       	movw	r22, r14
    67cc:	8e e2       	ldi	r24, 0x2E	; 46
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	34 d3       	rcall	.+1640   	; 0x6e3a <fputc>
    67d2:	c8 14       	cp	r12, r8
    67d4:	d9 04       	cpc	r13, r9
    67d6:	4c f0       	brlt	.+18     	; 0x67ea <vfprintf+0x31c>
    67d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    67da:	98 89       	ldd	r25, Y+16	; 0x10
    67dc:	88 15       	cp	r24, r8
    67de:	99 05       	cpc	r25, r9
    67e0:	24 f4       	brge	.+8      	; 0x67ea <vfprintf+0x31c>
    67e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    67e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    67e6:	81 81       	ldd	r24, Z+1	; 0x01
    67e8:	01 c0       	rjmp	.+2      	; 0x67ec <vfprintf+0x31e>
    67ea:	80 e3       	ldi	r24, 0x30	; 48
    67ec:	f1 e0       	ldi	r31, 0x01	; 1
    67ee:	8f 1a       	sub	r8, r31
    67f0:	91 08       	sbc	r9, r1
    67f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    67f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    67f6:	2f 5f       	subi	r18, 0xFF	; 255
    67f8:	3f 4f       	sbci	r19, 0xFF	; 255
    67fa:	3e 87       	std	Y+14, r19	; 0x0e
    67fc:	2d 87       	std	Y+13, r18	; 0x0d
    67fe:	80 16       	cp	r8, r16
    6800:	91 06       	cpc	r9, r17
    6802:	24 f0       	brlt	.+8      	; 0x680c <vfprintf+0x33e>
    6804:	b7 01       	movw	r22, r14
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	18 d3       	rcall	.+1584   	; 0x6e3a <fputc>
    680a:	db cf       	rjmp	.-74     	; 0x67c2 <vfprintf+0x2f4>
    680c:	c8 14       	cp	r12, r8
    680e:	d9 04       	cpc	r13, r9
    6810:	41 f4       	brne	.+16     	; 0x6822 <vfprintf+0x354>
    6812:	9a 81       	ldd	r25, Y+2	; 0x02
    6814:	96 33       	cpi	r25, 0x36	; 54
    6816:	20 f4       	brcc	.+8      	; 0x6820 <vfprintf+0x352>
    6818:	95 33       	cpi	r25, 0x35	; 53
    681a:	19 f4       	brne	.+6      	; 0x6822 <vfprintf+0x354>
    681c:	3c 85       	ldd	r19, Y+12	; 0x0c
    681e:	34 ff       	sbrs	r19, 4
    6820:	81 e3       	ldi	r24, 0x31	; 49
    6822:	b7 01       	movw	r22, r14
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	48 c0       	rjmp	.+144    	; 0x68b8 <vfprintf+0x3ea>
    6828:	8a 81       	ldd	r24, Y+2	; 0x02
    682a:	81 33       	cpi	r24, 0x31	; 49
    682c:	19 f0       	breq	.+6      	; 0x6834 <vfprintf+0x366>
    682e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6830:	9f 7e       	andi	r25, 0xEF	; 239
    6832:	9c 87       	std	Y+12, r25	; 0x0c
    6834:	b7 01       	movw	r22, r14
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	00 d3       	rcall	.+1536   	; 0x6e3a <fputc>
    683a:	11 11       	cpse	r17, r1
    683c:	05 c0       	rjmp	.+10     	; 0x6848 <vfprintf+0x37a>
    683e:	94 fc       	sbrc	r9, 4
    6840:	16 c0       	rjmp	.+44     	; 0x686e <vfprintf+0x3a0>
    6842:	85 e6       	ldi	r24, 0x65	; 101
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	15 c0       	rjmp	.+42     	; 0x6872 <vfprintf+0x3a4>
    6848:	b7 01       	movw	r22, r14
    684a:	8e e2       	ldi	r24, 0x2E	; 46
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	f5 d2       	rcall	.+1514   	; 0x6e3a <fputc>
    6850:	1e 5f       	subi	r17, 0xFE	; 254
    6852:	82 e0       	ldi	r24, 0x02	; 2
    6854:	01 e0       	ldi	r16, 0x01	; 1
    6856:	08 0f       	add	r16, r24
    6858:	f3 01       	movw	r30, r6
    685a:	e8 0f       	add	r30, r24
    685c:	f1 1d       	adc	r31, r1
    685e:	80 81       	ld	r24, Z
    6860:	b7 01       	movw	r22, r14
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	ea d2       	rcall	.+1492   	; 0x6e3a <fputc>
    6866:	80 2f       	mov	r24, r16
    6868:	01 13       	cpse	r16, r17
    686a:	f4 cf       	rjmp	.-24     	; 0x6854 <vfprintf+0x386>
    686c:	e8 cf       	rjmp	.-48     	; 0x683e <vfprintf+0x370>
    686e:	85 e4       	ldi	r24, 0x45	; 69
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	b7 01       	movw	r22, r14
    6874:	e2 d2       	rcall	.+1476   	; 0x6e3a <fputc>
    6876:	d7 fc       	sbrc	r13, 7
    6878:	06 c0       	rjmp	.+12     	; 0x6886 <vfprintf+0x3b8>
    687a:	c1 14       	cp	r12, r1
    687c:	d1 04       	cpc	r13, r1
    687e:	41 f4       	brne	.+16     	; 0x6890 <vfprintf+0x3c2>
    6880:	ec 85       	ldd	r30, Y+12	; 0x0c
    6882:	e4 ff       	sbrs	r30, 4
    6884:	05 c0       	rjmp	.+10     	; 0x6890 <vfprintf+0x3c2>
    6886:	d1 94       	neg	r13
    6888:	c1 94       	neg	r12
    688a:	d1 08       	sbc	r13, r1
    688c:	8d e2       	ldi	r24, 0x2D	; 45
    688e:	01 c0       	rjmp	.+2      	; 0x6892 <vfprintf+0x3c4>
    6890:	8b e2       	ldi	r24, 0x2B	; 43
    6892:	b7 01       	movw	r22, r14
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	d1 d2       	rcall	.+1442   	; 0x6e3a <fputc>
    6898:	80 e3       	ldi	r24, 0x30	; 48
    689a:	2a e0       	ldi	r18, 0x0A	; 10
    689c:	c2 16       	cp	r12, r18
    689e:	d1 04       	cpc	r13, r1
    68a0:	2c f0       	brlt	.+10     	; 0x68ac <vfprintf+0x3de>
    68a2:	8f 5f       	subi	r24, 0xFF	; 255
    68a4:	fa e0       	ldi	r31, 0x0A	; 10
    68a6:	cf 1a       	sub	r12, r31
    68a8:	d1 08       	sbc	r13, r1
    68aa:	f7 cf       	rjmp	.-18     	; 0x689a <vfprintf+0x3cc>
    68ac:	b7 01       	movw	r22, r14
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	c4 d2       	rcall	.+1416   	; 0x6e3a <fputc>
    68b2:	b7 01       	movw	r22, r14
    68b4:	c6 01       	movw	r24, r12
    68b6:	c0 96       	adiw	r24, 0x30	; 48
    68b8:	c0 d2       	rcall	.+1408   	; 0x6e3a <fputc>
    68ba:	49 c1       	rjmp	.+658    	; 0x6b4e <vfprintf+0x680>
    68bc:	83 36       	cpi	r24, 0x63	; 99
    68be:	31 f0       	breq	.+12     	; 0x68cc <vfprintf+0x3fe>
    68c0:	83 37       	cpi	r24, 0x73	; 115
    68c2:	79 f0       	breq	.+30     	; 0x68e2 <vfprintf+0x414>
    68c4:	83 35       	cpi	r24, 0x53	; 83
    68c6:	09 f0       	breq	.+2      	; 0x68ca <vfprintf+0x3fc>
    68c8:	52 c0       	rjmp	.+164    	; 0x696e <vfprintf+0x4a0>
    68ca:	1f c0       	rjmp	.+62     	; 0x690a <vfprintf+0x43c>
    68cc:	56 01       	movw	r10, r12
    68ce:	32 e0       	ldi	r19, 0x02	; 2
    68d0:	a3 0e       	add	r10, r19
    68d2:	b1 1c       	adc	r11, r1
    68d4:	f6 01       	movw	r30, r12
    68d6:	80 81       	ld	r24, Z
    68d8:	89 83       	std	Y+1, r24	; 0x01
    68da:	01 e0       	ldi	r16, 0x01	; 1
    68dc:	10 e0       	ldi	r17, 0x00	; 0
    68de:	63 01       	movw	r12, r6
    68e0:	11 c0       	rjmp	.+34     	; 0x6904 <vfprintf+0x436>
    68e2:	56 01       	movw	r10, r12
    68e4:	f2 e0       	ldi	r31, 0x02	; 2
    68e6:	af 0e       	add	r10, r31
    68e8:	b1 1c       	adc	r11, r1
    68ea:	f6 01       	movw	r30, r12
    68ec:	c0 80       	ld	r12, Z
    68ee:	d1 80       	ldd	r13, Z+1	; 0x01
    68f0:	96 fe       	sbrs	r9, 6
    68f2:	03 c0       	rjmp	.+6      	; 0x68fa <vfprintf+0x42c>
    68f4:	61 2f       	mov	r22, r17
    68f6:	70 e0       	ldi	r23, 0x00	; 0
    68f8:	02 c0       	rjmp	.+4      	; 0x68fe <vfprintf+0x430>
    68fa:	6f ef       	ldi	r22, 0xFF	; 255
    68fc:	7f ef       	ldi	r23, 0xFF	; 255
    68fe:	c6 01       	movw	r24, r12
    6900:	91 d2       	rcall	.+1314   	; 0x6e24 <strnlen>
    6902:	8c 01       	movw	r16, r24
    6904:	f9 2d       	mov	r31, r9
    6906:	ff 77       	andi	r31, 0x7F	; 127
    6908:	13 c0       	rjmp	.+38     	; 0x6930 <vfprintf+0x462>
    690a:	56 01       	movw	r10, r12
    690c:	22 e0       	ldi	r18, 0x02	; 2
    690e:	a2 0e       	add	r10, r18
    6910:	b1 1c       	adc	r11, r1
    6912:	f6 01       	movw	r30, r12
    6914:	c0 80       	ld	r12, Z
    6916:	d1 80       	ldd	r13, Z+1	; 0x01
    6918:	96 fe       	sbrs	r9, 6
    691a:	03 c0       	rjmp	.+6      	; 0x6922 <vfprintf+0x454>
    691c:	61 2f       	mov	r22, r17
    691e:	70 e0       	ldi	r23, 0x00	; 0
    6920:	02 c0       	rjmp	.+4      	; 0x6926 <vfprintf+0x458>
    6922:	6f ef       	ldi	r22, 0xFF	; 255
    6924:	7f ef       	ldi	r23, 0xFF	; 255
    6926:	c6 01       	movw	r24, r12
    6928:	69 d2       	rcall	.+1234   	; 0x6dfc <strnlen_P>
    692a:	8c 01       	movw	r16, r24
    692c:	f9 2d       	mov	r31, r9
    692e:	f0 68       	ori	r31, 0x80	; 128
    6930:	9f 2e       	mov	r9, r31
    6932:	f3 fd       	sbrc	r31, 3
    6934:	18 c0       	rjmp	.+48     	; 0x6966 <vfprintf+0x498>
    6936:	85 2d       	mov	r24, r5
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	08 17       	cp	r16, r24
    693c:	19 07       	cpc	r17, r25
    693e:	98 f4       	brcc	.+38     	; 0x6966 <vfprintf+0x498>
    6940:	b7 01       	movw	r22, r14
    6942:	80 e2       	ldi	r24, 0x20	; 32
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	79 d2       	rcall	.+1266   	; 0x6e3a <fputc>
    6948:	5a 94       	dec	r5
    694a:	f5 cf       	rjmp	.-22     	; 0x6936 <vfprintf+0x468>
    694c:	f6 01       	movw	r30, r12
    694e:	97 fc       	sbrc	r9, 7
    6950:	85 91       	lpm	r24, Z+
    6952:	97 fe       	sbrs	r9, 7
    6954:	81 91       	ld	r24, Z+
    6956:	6f 01       	movw	r12, r30
    6958:	b7 01       	movw	r22, r14
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	6e d2       	rcall	.+1244   	; 0x6e3a <fputc>
    695e:	51 10       	cpse	r5, r1
    6960:	5a 94       	dec	r5
    6962:	01 50       	subi	r16, 0x01	; 1
    6964:	11 09       	sbc	r17, r1
    6966:	01 15       	cp	r16, r1
    6968:	11 05       	cpc	r17, r1
    696a:	81 f7       	brne	.-32     	; 0x694c <vfprintf+0x47e>
    696c:	f0 c0       	rjmp	.+480    	; 0x6b4e <vfprintf+0x680>
    696e:	84 36       	cpi	r24, 0x64	; 100
    6970:	11 f0       	breq	.+4      	; 0x6976 <vfprintf+0x4a8>
    6972:	89 36       	cpi	r24, 0x69	; 105
    6974:	59 f5       	brne	.+86     	; 0x69cc <vfprintf+0x4fe>
    6976:	56 01       	movw	r10, r12
    6978:	97 fe       	sbrs	r9, 7
    697a:	09 c0       	rjmp	.+18     	; 0x698e <vfprintf+0x4c0>
    697c:	24 e0       	ldi	r18, 0x04	; 4
    697e:	a2 0e       	add	r10, r18
    6980:	b1 1c       	adc	r11, r1
    6982:	f6 01       	movw	r30, r12
    6984:	60 81       	ld	r22, Z
    6986:	71 81       	ldd	r23, Z+1	; 0x01
    6988:	82 81       	ldd	r24, Z+2	; 0x02
    698a:	93 81       	ldd	r25, Z+3	; 0x03
    698c:	0a c0       	rjmp	.+20     	; 0x69a2 <vfprintf+0x4d4>
    698e:	f2 e0       	ldi	r31, 0x02	; 2
    6990:	af 0e       	add	r10, r31
    6992:	b1 1c       	adc	r11, r1
    6994:	f6 01       	movw	r30, r12
    6996:	60 81       	ld	r22, Z
    6998:	71 81       	ldd	r23, Z+1	; 0x01
    699a:	07 2e       	mov	r0, r23
    699c:	00 0c       	add	r0, r0
    699e:	88 0b       	sbc	r24, r24
    69a0:	99 0b       	sbc	r25, r25
    69a2:	f9 2d       	mov	r31, r9
    69a4:	ff 76       	andi	r31, 0x6F	; 111
    69a6:	9f 2e       	mov	r9, r31
    69a8:	97 ff       	sbrs	r25, 7
    69aa:	09 c0       	rjmp	.+18     	; 0x69be <vfprintf+0x4f0>
    69ac:	90 95       	com	r25
    69ae:	80 95       	com	r24
    69b0:	70 95       	com	r23
    69b2:	61 95       	neg	r22
    69b4:	7f 4f       	sbci	r23, 0xFF	; 255
    69b6:	8f 4f       	sbci	r24, 0xFF	; 255
    69b8:	9f 4f       	sbci	r25, 0xFF	; 255
    69ba:	f0 68       	ori	r31, 0x80	; 128
    69bc:	9f 2e       	mov	r9, r31
    69be:	2a e0       	ldi	r18, 0x0A	; 10
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	a3 01       	movw	r20, r6
    69c4:	9e d2       	rcall	.+1340   	; 0x6f02 <__ultoa_invert>
    69c6:	c8 2e       	mov	r12, r24
    69c8:	c6 18       	sub	r12, r6
    69ca:	3e c0       	rjmp	.+124    	; 0x6a48 <vfprintf+0x57a>
    69cc:	09 2d       	mov	r16, r9
    69ce:	85 37       	cpi	r24, 0x75	; 117
    69d0:	21 f4       	brne	.+8      	; 0x69da <vfprintf+0x50c>
    69d2:	0f 7e       	andi	r16, 0xEF	; 239
    69d4:	2a e0       	ldi	r18, 0x0A	; 10
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	1d c0       	rjmp	.+58     	; 0x6a14 <vfprintf+0x546>
    69da:	09 7f       	andi	r16, 0xF9	; 249
    69dc:	8f 36       	cpi	r24, 0x6F	; 111
    69de:	91 f0       	breq	.+36     	; 0x6a04 <vfprintf+0x536>
    69e0:	18 f4       	brcc	.+6      	; 0x69e8 <vfprintf+0x51a>
    69e2:	88 35       	cpi	r24, 0x58	; 88
    69e4:	59 f0       	breq	.+22     	; 0x69fc <vfprintf+0x52e>
    69e6:	bc c0       	rjmp	.+376    	; 0x6b60 <vfprintf+0x692>
    69e8:	80 37       	cpi	r24, 0x70	; 112
    69ea:	19 f0       	breq	.+6      	; 0x69f2 <vfprintf+0x524>
    69ec:	88 37       	cpi	r24, 0x78	; 120
    69ee:	11 f0       	breq	.+4      	; 0x69f4 <vfprintf+0x526>
    69f0:	b7 c0       	rjmp	.+366    	; 0x6b60 <vfprintf+0x692>
    69f2:	00 61       	ori	r16, 0x10	; 16
    69f4:	04 ff       	sbrs	r16, 4
    69f6:	09 c0       	rjmp	.+18     	; 0x6a0a <vfprintf+0x53c>
    69f8:	04 60       	ori	r16, 0x04	; 4
    69fa:	07 c0       	rjmp	.+14     	; 0x6a0a <vfprintf+0x53c>
    69fc:	94 fe       	sbrs	r9, 4
    69fe:	08 c0       	rjmp	.+16     	; 0x6a10 <vfprintf+0x542>
    6a00:	06 60       	ori	r16, 0x06	; 6
    6a02:	06 c0       	rjmp	.+12     	; 0x6a10 <vfprintf+0x542>
    6a04:	28 e0       	ldi	r18, 0x08	; 8
    6a06:	30 e0       	ldi	r19, 0x00	; 0
    6a08:	05 c0       	rjmp	.+10     	; 0x6a14 <vfprintf+0x546>
    6a0a:	20 e1       	ldi	r18, 0x10	; 16
    6a0c:	30 e0       	ldi	r19, 0x00	; 0
    6a0e:	02 c0       	rjmp	.+4      	; 0x6a14 <vfprintf+0x546>
    6a10:	20 e1       	ldi	r18, 0x10	; 16
    6a12:	32 e0       	ldi	r19, 0x02	; 2
    6a14:	56 01       	movw	r10, r12
    6a16:	07 ff       	sbrs	r16, 7
    6a18:	09 c0       	rjmp	.+18     	; 0x6a2c <vfprintf+0x55e>
    6a1a:	84 e0       	ldi	r24, 0x04	; 4
    6a1c:	a8 0e       	add	r10, r24
    6a1e:	b1 1c       	adc	r11, r1
    6a20:	f6 01       	movw	r30, r12
    6a22:	60 81       	ld	r22, Z
    6a24:	71 81       	ldd	r23, Z+1	; 0x01
    6a26:	82 81       	ldd	r24, Z+2	; 0x02
    6a28:	93 81       	ldd	r25, Z+3	; 0x03
    6a2a:	08 c0       	rjmp	.+16     	; 0x6a3c <vfprintf+0x56e>
    6a2c:	f2 e0       	ldi	r31, 0x02	; 2
    6a2e:	af 0e       	add	r10, r31
    6a30:	b1 1c       	adc	r11, r1
    6a32:	f6 01       	movw	r30, r12
    6a34:	60 81       	ld	r22, Z
    6a36:	71 81       	ldd	r23, Z+1	; 0x01
    6a38:	80 e0       	ldi	r24, 0x00	; 0
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	a3 01       	movw	r20, r6
    6a3e:	61 d2       	rcall	.+1218   	; 0x6f02 <__ultoa_invert>
    6a40:	c8 2e       	mov	r12, r24
    6a42:	c6 18       	sub	r12, r6
    6a44:	0f 77       	andi	r16, 0x7F	; 127
    6a46:	90 2e       	mov	r9, r16
    6a48:	96 fe       	sbrs	r9, 6
    6a4a:	0b c0       	rjmp	.+22     	; 0x6a62 <vfprintf+0x594>
    6a4c:	09 2d       	mov	r16, r9
    6a4e:	0e 7f       	andi	r16, 0xFE	; 254
    6a50:	c1 16       	cp	r12, r17
    6a52:	50 f4       	brcc	.+20     	; 0x6a68 <vfprintf+0x59a>
    6a54:	94 fe       	sbrs	r9, 4
    6a56:	0a c0       	rjmp	.+20     	; 0x6a6c <vfprintf+0x59e>
    6a58:	92 fc       	sbrc	r9, 2
    6a5a:	08 c0       	rjmp	.+16     	; 0x6a6c <vfprintf+0x59e>
    6a5c:	09 2d       	mov	r16, r9
    6a5e:	0e 7e       	andi	r16, 0xEE	; 238
    6a60:	05 c0       	rjmp	.+10     	; 0x6a6c <vfprintf+0x59e>
    6a62:	dc 2c       	mov	r13, r12
    6a64:	09 2d       	mov	r16, r9
    6a66:	03 c0       	rjmp	.+6      	; 0x6a6e <vfprintf+0x5a0>
    6a68:	dc 2c       	mov	r13, r12
    6a6a:	01 c0       	rjmp	.+2      	; 0x6a6e <vfprintf+0x5a0>
    6a6c:	d1 2e       	mov	r13, r17
    6a6e:	04 ff       	sbrs	r16, 4
    6a70:	0d c0       	rjmp	.+26     	; 0x6a8c <vfprintf+0x5be>
    6a72:	fe 01       	movw	r30, r28
    6a74:	ec 0d       	add	r30, r12
    6a76:	f1 1d       	adc	r31, r1
    6a78:	80 81       	ld	r24, Z
    6a7a:	80 33       	cpi	r24, 0x30	; 48
    6a7c:	11 f4       	brne	.+4      	; 0x6a82 <vfprintf+0x5b4>
    6a7e:	09 7e       	andi	r16, 0xE9	; 233
    6a80:	09 c0       	rjmp	.+18     	; 0x6a94 <vfprintf+0x5c6>
    6a82:	02 ff       	sbrs	r16, 2
    6a84:	06 c0       	rjmp	.+12     	; 0x6a92 <vfprintf+0x5c4>
    6a86:	d3 94       	inc	r13
    6a88:	d3 94       	inc	r13
    6a8a:	04 c0       	rjmp	.+8      	; 0x6a94 <vfprintf+0x5c6>
    6a8c:	80 2f       	mov	r24, r16
    6a8e:	86 78       	andi	r24, 0x86	; 134
    6a90:	09 f0       	breq	.+2      	; 0x6a94 <vfprintf+0x5c6>
    6a92:	d3 94       	inc	r13
    6a94:	03 fd       	sbrc	r16, 3
    6a96:	10 c0       	rjmp	.+32     	; 0x6ab8 <vfprintf+0x5ea>
    6a98:	00 ff       	sbrs	r16, 0
    6a9a:	06 c0       	rjmp	.+12     	; 0x6aa8 <vfprintf+0x5da>
    6a9c:	1c 2d       	mov	r17, r12
    6a9e:	d5 14       	cp	r13, r5
    6aa0:	78 f4       	brcc	.+30     	; 0x6ac0 <vfprintf+0x5f2>
    6aa2:	15 0d       	add	r17, r5
    6aa4:	1d 19       	sub	r17, r13
    6aa6:	0c c0       	rjmp	.+24     	; 0x6ac0 <vfprintf+0x5f2>
    6aa8:	d5 14       	cp	r13, r5
    6aaa:	50 f4       	brcc	.+20     	; 0x6ac0 <vfprintf+0x5f2>
    6aac:	b7 01       	movw	r22, r14
    6aae:	80 e2       	ldi	r24, 0x20	; 32
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	c3 d1       	rcall	.+902    	; 0x6e3a <fputc>
    6ab4:	d3 94       	inc	r13
    6ab6:	f8 cf       	rjmp	.-16     	; 0x6aa8 <vfprintf+0x5da>
    6ab8:	d5 14       	cp	r13, r5
    6aba:	10 f4       	brcc	.+4      	; 0x6ac0 <vfprintf+0x5f2>
    6abc:	5d 18       	sub	r5, r13
    6abe:	01 c0       	rjmp	.+2      	; 0x6ac2 <vfprintf+0x5f4>
    6ac0:	51 2c       	mov	r5, r1
    6ac2:	04 ff       	sbrs	r16, 4
    6ac4:	0f c0       	rjmp	.+30     	; 0x6ae4 <vfprintf+0x616>
    6ac6:	b7 01       	movw	r22, r14
    6ac8:	80 e3       	ldi	r24, 0x30	; 48
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	b6 d1       	rcall	.+876    	; 0x6e3a <fputc>
    6ace:	02 ff       	sbrs	r16, 2
    6ad0:	16 c0       	rjmp	.+44     	; 0x6afe <vfprintf+0x630>
    6ad2:	01 fd       	sbrc	r16, 1
    6ad4:	03 c0       	rjmp	.+6      	; 0x6adc <vfprintf+0x60e>
    6ad6:	88 e7       	ldi	r24, 0x78	; 120
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	02 c0       	rjmp	.+4      	; 0x6ae0 <vfprintf+0x612>
    6adc:	88 e5       	ldi	r24, 0x58	; 88
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	b7 01       	movw	r22, r14
    6ae2:	0c c0       	rjmp	.+24     	; 0x6afc <vfprintf+0x62e>
    6ae4:	80 2f       	mov	r24, r16
    6ae6:	86 78       	andi	r24, 0x86	; 134
    6ae8:	51 f0       	breq	.+20     	; 0x6afe <vfprintf+0x630>
    6aea:	01 ff       	sbrs	r16, 1
    6aec:	02 c0       	rjmp	.+4      	; 0x6af2 <vfprintf+0x624>
    6aee:	8b e2       	ldi	r24, 0x2B	; 43
    6af0:	01 c0       	rjmp	.+2      	; 0x6af4 <vfprintf+0x626>
    6af2:	80 e2       	ldi	r24, 0x20	; 32
    6af4:	07 fd       	sbrc	r16, 7
    6af6:	8d e2       	ldi	r24, 0x2D	; 45
    6af8:	b7 01       	movw	r22, r14
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	9e d1       	rcall	.+828    	; 0x6e3a <fputc>
    6afe:	c1 16       	cp	r12, r17
    6b00:	30 f4       	brcc	.+12     	; 0x6b0e <vfprintf+0x640>
    6b02:	b7 01       	movw	r22, r14
    6b04:	80 e3       	ldi	r24, 0x30	; 48
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	98 d1       	rcall	.+816    	; 0x6e3a <fputc>
    6b0a:	11 50       	subi	r17, 0x01	; 1
    6b0c:	f8 cf       	rjmp	.-16     	; 0x6afe <vfprintf+0x630>
    6b0e:	ca 94       	dec	r12
    6b10:	f3 01       	movw	r30, r6
    6b12:	ec 0d       	add	r30, r12
    6b14:	f1 1d       	adc	r31, r1
    6b16:	80 81       	ld	r24, Z
    6b18:	b7 01       	movw	r22, r14
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	8e d1       	rcall	.+796    	; 0x6e3a <fputc>
    6b1e:	c1 10       	cpse	r12, r1
    6b20:	f6 cf       	rjmp	.-20     	; 0x6b0e <vfprintf+0x640>
    6b22:	15 c0       	rjmp	.+42     	; 0x6b4e <vfprintf+0x680>
    6b24:	f4 e0       	ldi	r31, 0x04	; 4
    6b26:	f5 15       	cp	r31, r5
    6b28:	50 f5       	brcc	.+84     	; 0x6b7e <vfprintf+0x6b0>
    6b2a:	84 e0       	ldi	r24, 0x04	; 4
    6b2c:	58 1a       	sub	r5, r24
    6b2e:	93 fe       	sbrs	r9, 3
    6b30:	1e c0       	rjmp	.+60     	; 0x6b6e <vfprintf+0x6a0>
    6b32:	01 11       	cpse	r16, r1
    6b34:	25 c0       	rjmp	.+74     	; 0x6b80 <vfprintf+0x6b2>
    6b36:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b38:	23 ff       	sbrs	r18, 3
    6b3a:	27 c0       	rjmp	.+78     	; 0x6b8a <vfprintf+0x6bc>
    6b3c:	00 e3       	ldi	r16, 0x30	; 48
    6b3e:	11 e0       	ldi	r17, 0x01	; 1
    6b40:	39 2d       	mov	r19, r9
    6b42:	30 71       	andi	r19, 0x10	; 16
    6b44:	93 2e       	mov	r9, r19
    6b46:	f8 01       	movw	r30, r16
    6b48:	84 91       	lpm	r24, Z
    6b4a:	81 11       	cpse	r24, r1
    6b4c:	21 c0       	rjmp	.+66     	; 0x6b90 <vfprintf+0x6c2>
    6b4e:	55 20       	and	r5, r5
    6b50:	09 f4       	brne	.+2      	; 0x6b54 <vfprintf+0x686>
    6b52:	fc cc       	rjmp	.-1544   	; 0x654c <vfprintf+0x7e>
    6b54:	b7 01       	movw	r22, r14
    6b56:	80 e2       	ldi	r24, 0x20	; 32
    6b58:	90 e0       	ldi	r25, 0x00	; 0
    6b5a:	6f d1       	rcall	.+734    	; 0x6e3a <fputc>
    6b5c:	5a 94       	dec	r5
    6b5e:	f7 cf       	rjmp	.-18     	; 0x6b4e <vfprintf+0x680>
    6b60:	f7 01       	movw	r30, r14
    6b62:	86 81       	ldd	r24, Z+6	; 0x06
    6b64:	97 81       	ldd	r25, Z+7	; 0x07
    6b66:	23 c0       	rjmp	.+70     	; 0x6bae <vfprintf+0x6e0>
    6b68:	8f ef       	ldi	r24, 0xFF	; 255
    6b6a:	9f ef       	ldi	r25, 0xFF	; 255
    6b6c:	20 c0       	rjmp	.+64     	; 0x6bae <vfprintf+0x6e0>
    6b6e:	b7 01       	movw	r22, r14
    6b70:	80 e2       	ldi	r24, 0x20	; 32
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	62 d1       	rcall	.+708    	; 0x6e3a <fputc>
    6b76:	5a 94       	dec	r5
    6b78:	51 10       	cpse	r5, r1
    6b7a:	f9 cf       	rjmp	.-14     	; 0x6b6e <vfprintf+0x6a0>
    6b7c:	da cf       	rjmp	.-76     	; 0x6b32 <vfprintf+0x664>
    6b7e:	51 2c       	mov	r5, r1
    6b80:	b7 01       	movw	r22, r14
    6b82:	80 2f       	mov	r24, r16
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	59 d1       	rcall	.+690    	; 0x6e3a <fputc>
    6b88:	d6 cf       	rjmp	.-84     	; 0x6b36 <vfprintf+0x668>
    6b8a:	04 e3       	ldi	r16, 0x34	; 52
    6b8c:	11 e0       	ldi	r17, 0x01	; 1
    6b8e:	d8 cf       	rjmp	.-80     	; 0x6b40 <vfprintf+0x672>
    6b90:	91 10       	cpse	r9, r1
    6b92:	80 52       	subi	r24, 0x20	; 32
    6b94:	b7 01       	movw	r22, r14
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	50 d1       	rcall	.+672    	; 0x6e3a <fputc>
    6b9a:	0f 5f       	subi	r16, 0xFF	; 255
    6b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b9e:	d3 cf       	rjmp	.-90     	; 0x6b46 <vfprintf+0x678>
    6ba0:	23 e0       	ldi	r18, 0x03	; 3
    6ba2:	25 15       	cp	r18, r5
    6ba4:	10 f4       	brcc	.+4      	; 0x6baa <vfprintf+0x6dc>
    6ba6:	83 e0       	ldi	r24, 0x03	; 3
    6ba8:	c1 cf       	rjmp	.-126    	; 0x6b2c <vfprintf+0x65e>
    6baa:	51 2c       	mov	r5, r1
    6bac:	c4 cf       	rjmp	.-120    	; 0x6b36 <vfprintf+0x668>
    6bae:	60 96       	adiw	r28, 0x10	; 16
    6bb0:	0f b6       	in	r0, 0x3f	; 63
    6bb2:	f8 94       	cli
    6bb4:	de bf       	out	0x3e, r29	; 62
    6bb6:	0f be       	out	0x3f, r0	; 63
    6bb8:	cd bf       	out	0x3d, r28	; 61
    6bba:	df 91       	pop	r29
    6bbc:	cf 91       	pop	r28
    6bbe:	1f 91       	pop	r17
    6bc0:	0f 91       	pop	r16
    6bc2:	ff 90       	pop	r15
    6bc4:	ef 90       	pop	r14
    6bc6:	df 90       	pop	r13
    6bc8:	cf 90       	pop	r12
    6bca:	bf 90       	pop	r11
    6bcc:	af 90       	pop	r10
    6bce:	9f 90       	pop	r9
    6bd0:	8f 90       	pop	r8
    6bd2:	7f 90       	pop	r7
    6bd4:	6f 90       	pop	r6
    6bd6:	5f 90       	pop	r5
    6bd8:	4f 90       	pop	r4
    6bda:	3f 90       	pop	r3
    6bdc:	2f 90       	pop	r2
    6bde:	08 95       	ret

00006be0 <__divmodhi4>:
    6be0:	97 fb       	bst	r25, 7
    6be2:	07 2e       	mov	r0, r23
    6be4:	16 f4       	brtc	.+4      	; 0x6bea <__divmodhi4+0xa>
    6be6:	00 94       	com	r0
    6be8:	06 d0       	rcall	.+12     	; 0x6bf6 <__divmodhi4_neg1>
    6bea:	77 fd       	sbrc	r23, 7
    6bec:	08 d0       	rcall	.+16     	; 0x6bfe <__divmodhi4_neg2>
    6bee:	1a d0       	rcall	.+52     	; 0x6c24 <__udivmodhi4>
    6bf0:	07 fc       	sbrc	r0, 7
    6bf2:	05 d0       	rcall	.+10     	; 0x6bfe <__divmodhi4_neg2>
    6bf4:	3e f4       	brtc	.+14     	; 0x6c04 <__divmodhi4_exit>

00006bf6 <__divmodhi4_neg1>:
    6bf6:	90 95       	com	r25
    6bf8:	81 95       	neg	r24
    6bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    6bfc:	08 95       	ret

00006bfe <__divmodhi4_neg2>:
    6bfe:	70 95       	com	r23
    6c00:	61 95       	neg	r22
    6c02:	7f 4f       	sbci	r23, 0xFF	; 255

00006c04 <__divmodhi4_exit>:
    6c04:	08 95       	ret

00006c06 <__umulhisi3>:
    6c06:	a2 9f       	mul	r26, r18
    6c08:	b0 01       	movw	r22, r0
    6c0a:	b3 9f       	mul	r27, r19
    6c0c:	c0 01       	movw	r24, r0
    6c0e:	a3 9f       	mul	r26, r19
    6c10:	70 0d       	add	r23, r0
    6c12:	81 1d       	adc	r24, r1
    6c14:	11 24       	eor	r1, r1
    6c16:	91 1d       	adc	r25, r1
    6c18:	b2 9f       	mul	r27, r18
    6c1a:	70 0d       	add	r23, r0
    6c1c:	81 1d       	adc	r24, r1
    6c1e:	11 24       	eor	r1, r1
    6c20:	91 1d       	adc	r25, r1
    6c22:	08 95       	ret

00006c24 <__udivmodhi4>:
    6c24:	aa 1b       	sub	r26, r26
    6c26:	bb 1b       	sub	r27, r27
    6c28:	51 e1       	ldi	r21, 0x11	; 17
    6c2a:	07 c0       	rjmp	.+14     	; 0x6c3a <__udivmodhi4_ep>

00006c2c <__udivmodhi4_loop>:
    6c2c:	aa 1f       	adc	r26, r26
    6c2e:	bb 1f       	adc	r27, r27
    6c30:	a6 17       	cp	r26, r22
    6c32:	b7 07       	cpc	r27, r23
    6c34:	10 f0       	brcs	.+4      	; 0x6c3a <__udivmodhi4_ep>
    6c36:	a6 1b       	sub	r26, r22
    6c38:	b7 0b       	sbc	r27, r23

00006c3a <__udivmodhi4_ep>:
    6c3a:	88 1f       	adc	r24, r24
    6c3c:	99 1f       	adc	r25, r25
    6c3e:	5a 95       	dec	r21
    6c40:	a9 f7       	brne	.-22     	; 0x6c2c <__udivmodhi4_loop>
    6c42:	80 95       	com	r24
    6c44:	90 95       	com	r25
    6c46:	bc 01       	movw	r22, r24
    6c48:	cd 01       	movw	r24, r26
    6c4a:	08 95       	ret

00006c4c <__ftoa_engine>:
    6c4c:	28 30       	cpi	r18, 0x08	; 8
    6c4e:	08 f0       	brcs	.+2      	; 0x6c52 <__ftoa_engine+0x6>
    6c50:	27 e0       	ldi	r18, 0x07	; 7
    6c52:	33 27       	eor	r19, r19
    6c54:	da 01       	movw	r26, r20
    6c56:	99 0f       	add	r25, r25
    6c58:	31 1d       	adc	r19, r1
    6c5a:	87 fd       	sbrc	r24, 7
    6c5c:	91 60       	ori	r25, 0x01	; 1
    6c5e:	00 96       	adiw	r24, 0x00	; 0
    6c60:	61 05       	cpc	r22, r1
    6c62:	71 05       	cpc	r23, r1
    6c64:	39 f4       	brne	.+14     	; 0x6c74 <__ftoa_engine+0x28>
    6c66:	32 60       	ori	r19, 0x02	; 2
    6c68:	2e 5f       	subi	r18, 0xFE	; 254
    6c6a:	3d 93       	st	X+, r19
    6c6c:	30 e3       	ldi	r19, 0x30	; 48
    6c6e:	2a 95       	dec	r18
    6c70:	e1 f7       	brne	.-8      	; 0x6c6a <__ftoa_engine+0x1e>
    6c72:	08 95       	ret
    6c74:	9f 3f       	cpi	r25, 0xFF	; 255
    6c76:	30 f0       	brcs	.+12     	; 0x6c84 <__ftoa_engine+0x38>
    6c78:	80 38       	cpi	r24, 0x80	; 128
    6c7a:	71 05       	cpc	r23, r1
    6c7c:	61 05       	cpc	r22, r1
    6c7e:	09 f0       	breq	.+2      	; 0x6c82 <__ftoa_engine+0x36>
    6c80:	3c 5f       	subi	r19, 0xFC	; 252
    6c82:	3c 5f       	subi	r19, 0xFC	; 252
    6c84:	3d 93       	st	X+, r19
    6c86:	91 30       	cpi	r25, 0x01	; 1
    6c88:	08 f0       	brcs	.+2      	; 0x6c8c <__ftoa_engine+0x40>
    6c8a:	80 68       	ori	r24, 0x80	; 128
    6c8c:	91 1d       	adc	r25, r1
    6c8e:	df 93       	push	r29
    6c90:	cf 93       	push	r28
    6c92:	1f 93       	push	r17
    6c94:	0f 93       	push	r16
    6c96:	ff 92       	push	r15
    6c98:	ef 92       	push	r14
    6c9a:	19 2f       	mov	r17, r25
    6c9c:	98 7f       	andi	r25, 0xF8	; 248
    6c9e:	96 95       	lsr	r25
    6ca0:	e9 2f       	mov	r30, r25
    6ca2:	96 95       	lsr	r25
    6ca4:	96 95       	lsr	r25
    6ca6:	e9 0f       	add	r30, r25
    6ca8:	ff 27       	eor	r31, r31
    6caa:	ee 56       	subi	r30, 0x6E	; 110
    6cac:	fe 4f       	sbci	r31, 0xFE	; 254
    6cae:	99 27       	eor	r25, r25
    6cb0:	33 27       	eor	r19, r19
    6cb2:	ee 24       	eor	r14, r14
    6cb4:	ff 24       	eor	r15, r15
    6cb6:	a7 01       	movw	r20, r14
    6cb8:	e7 01       	movw	r28, r14
    6cba:	05 90       	lpm	r0, Z+
    6cbc:	08 94       	sec
    6cbe:	07 94       	ror	r0
    6cc0:	28 f4       	brcc	.+10     	; 0x6ccc <__ftoa_engine+0x80>
    6cc2:	36 0f       	add	r19, r22
    6cc4:	e7 1e       	adc	r14, r23
    6cc6:	f8 1e       	adc	r15, r24
    6cc8:	49 1f       	adc	r20, r25
    6cca:	51 1d       	adc	r21, r1
    6ccc:	66 0f       	add	r22, r22
    6cce:	77 1f       	adc	r23, r23
    6cd0:	88 1f       	adc	r24, r24
    6cd2:	99 1f       	adc	r25, r25
    6cd4:	06 94       	lsr	r0
    6cd6:	a1 f7       	brne	.-24     	; 0x6cc0 <__ftoa_engine+0x74>
    6cd8:	05 90       	lpm	r0, Z+
    6cda:	07 94       	ror	r0
    6cdc:	28 f4       	brcc	.+10     	; 0x6ce8 <__ftoa_engine+0x9c>
    6cde:	e7 0e       	add	r14, r23
    6ce0:	f8 1e       	adc	r15, r24
    6ce2:	49 1f       	adc	r20, r25
    6ce4:	56 1f       	adc	r21, r22
    6ce6:	c1 1d       	adc	r28, r1
    6ce8:	77 0f       	add	r23, r23
    6cea:	88 1f       	adc	r24, r24
    6cec:	99 1f       	adc	r25, r25
    6cee:	66 1f       	adc	r22, r22
    6cf0:	06 94       	lsr	r0
    6cf2:	a1 f7       	brne	.-24     	; 0x6cdc <__ftoa_engine+0x90>
    6cf4:	05 90       	lpm	r0, Z+
    6cf6:	07 94       	ror	r0
    6cf8:	28 f4       	brcc	.+10     	; 0x6d04 <__ftoa_engine+0xb8>
    6cfa:	f8 0e       	add	r15, r24
    6cfc:	49 1f       	adc	r20, r25
    6cfe:	56 1f       	adc	r21, r22
    6d00:	c7 1f       	adc	r28, r23
    6d02:	d1 1d       	adc	r29, r1
    6d04:	88 0f       	add	r24, r24
    6d06:	99 1f       	adc	r25, r25
    6d08:	66 1f       	adc	r22, r22
    6d0a:	77 1f       	adc	r23, r23
    6d0c:	06 94       	lsr	r0
    6d0e:	a1 f7       	brne	.-24     	; 0x6cf8 <__ftoa_engine+0xac>
    6d10:	05 90       	lpm	r0, Z+
    6d12:	07 94       	ror	r0
    6d14:	20 f4       	brcc	.+8      	; 0x6d1e <__ftoa_engine+0xd2>
    6d16:	49 0f       	add	r20, r25
    6d18:	56 1f       	adc	r21, r22
    6d1a:	c7 1f       	adc	r28, r23
    6d1c:	d8 1f       	adc	r29, r24
    6d1e:	99 0f       	add	r25, r25
    6d20:	66 1f       	adc	r22, r22
    6d22:	77 1f       	adc	r23, r23
    6d24:	88 1f       	adc	r24, r24
    6d26:	06 94       	lsr	r0
    6d28:	a9 f7       	brne	.-22     	; 0x6d14 <__ftoa_engine+0xc8>
    6d2a:	84 91       	lpm	r24, Z
    6d2c:	10 95       	com	r17
    6d2e:	17 70       	andi	r17, 0x07	; 7
    6d30:	41 f0       	breq	.+16     	; 0x6d42 <__ftoa_engine+0xf6>
    6d32:	d6 95       	lsr	r29
    6d34:	c7 95       	ror	r28
    6d36:	57 95       	ror	r21
    6d38:	47 95       	ror	r20
    6d3a:	f7 94       	ror	r15
    6d3c:	e7 94       	ror	r14
    6d3e:	1a 95       	dec	r17
    6d40:	c1 f7       	brne	.-16     	; 0x6d32 <__ftoa_engine+0xe6>
    6d42:	e8 e3       	ldi	r30, 0x38	; 56
    6d44:	f1 e0       	ldi	r31, 0x01	; 1
    6d46:	68 94       	set
    6d48:	15 90       	lpm	r1, Z+
    6d4a:	15 91       	lpm	r17, Z+
    6d4c:	35 91       	lpm	r19, Z+
    6d4e:	65 91       	lpm	r22, Z+
    6d50:	95 91       	lpm	r25, Z+
    6d52:	05 90       	lpm	r0, Z+
    6d54:	7f e2       	ldi	r23, 0x2F	; 47
    6d56:	73 95       	inc	r23
    6d58:	e1 18       	sub	r14, r1
    6d5a:	f1 0a       	sbc	r15, r17
    6d5c:	43 0b       	sbc	r20, r19
    6d5e:	56 0b       	sbc	r21, r22
    6d60:	c9 0b       	sbc	r28, r25
    6d62:	d0 09       	sbc	r29, r0
    6d64:	c0 f7       	brcc	.-16     	; 0x6d56 <__ftoa_engine+0x10a>
    6d66:	e1 0c       	add	r14, r1
    6d68:	f1 1e       	adc	r15, r17
    6d6a:	43 1f       	adc	r20, r19
    6d6c:	56 1f       	adc	r21, r22
    6d6e:	c9 1f       	adc	r28, r25
    6d70:	d0 1d       	adc	r29, r0
    6d72:	7e f4       	brtc	.+30     	; 0x6d92 <__ftoa_engine+0x146>
    6d74:	70 33       	cpi	r23, 0x30	; 48
    6d76:	11 f4       	brne	.+4      	; 0x6d7c <__ftoa_engine+0x130>
    6d78:	8a 95       	dec	r24
    6d7a:	e6 cf       	rjmp	.-52     	; 0x6d48 <__ftoa_engine+0xfc>
    6d7c:	e8 94       	clt
    6d7e:	01 50       	subi	r16, 0x01	; 1
    6d80:	30 f0       	brcs	.+12     	; 0x6d8e <__ftoa_engine+0x142>
    6d82:	08 0f       	add	r16, r24
    6d84:	0a f4       	brpl	.+2      	; 0x6d88 <__ftoa_engine+0x13c>
    6d86:	00 27       	eor	r16, r16
    6d88:	02 17       	cp	r16, r18
    6d8a:	08 f4       	brcc	.+2      	; 0x6d8e <__ftoa_engine+0x142>
    6d8c:	20 2f       	mov	r18, r16
    6d8e:	23 95       	inc	r18
    6d90:	02 2f       	mov	r16, r18
    6d92:	7a 33       	cpi	r23, 0x3A	; 58
    6d94:	28 f0       	brcs	.+10     	; 0x6da0 <__ftoa_engine+0x154>
    6d96:	79 e3       	ldi	r23, 0x39	; 57
    6d98:	7d 93       	st	X+, r23
    6d9a:	2a 95       	dec	r18
    6d9c:	e9 f7       	brne	.-6      	; 0x6d98 <__ftoa_engine+0x14c>
    6d9e:	10 c0       	rjmp	.+32     	; 0x6dc0 <__ftoa_engine+0x174>
    6da0:	7d 93       	st	X+, r23
    6da2:	2a 95       	dec	r18
    6da4:	89 f6       	brne	.-94     	; 0x6d48 <__ftoa_engine+0xfc>
    6da6:	06 94       	lsr	r0
    6da8:	97 95       	ror	r25
    6daa:	67 95       	ror	r22
    6dac:	37 95       	ror	r19
    6dae:	17 95       	ror	r17
    6db0:	17 94       	ror	r1
    6db2:	e1 18       	sub	r14, r1
    6db4:	f1 0a       	sbc	r15, r17
    6db6:	43 0b       	sbc	r20, r19
    6db8:	56 0b       	sbc	r21, r22
    6dba:	c9 0b       	sbc	r28, r25
    6dbc:	d0 09       	sbc	r29, r0
    6dbe:	98 f0       	brcs	.+38     	; 0x6de6 <__ftoa_engine+0x19a>
    6dc0:	23 95       	inc	r18
    6dc2:	7e 91       	ld	r23, -X
    6dc4:	73 95       	inc	r23
    6dc6:	7a 33       	cpi	r23, 0x3A	; 58
    6dc8:	08 f0       	brcs	.+2      	; 0x6dcc <__ftoa_engine+0x180>
    6dca:	70 e3       	ldi	r23, 0x30	; 48
    6dcc:	7c 93       	st	X, r23
    6dce:	20 13       	cpse	r18, r16
    6dd0:	b8 f7       	brcc	.-18     	; 0x6dc0 <__ftoa_engine+0x174>
    6dd2:	7e 91       	ld	r23, -X
    6dd4:	70 61       	ori	r23, 0x10	; 16
    6dd6:	7d 93       	st	X+, r23
    6dd8:	30 f0       	brcs	.+12     	; 0x6de6 <__ftoa_engine+0x19a>
    6dda:	83 95       	inc	r24
    6ddc:	71 e3       	ldi	r23, 0x31	; 49
    6dde:	7d 93       	st	X+, r23
    6de0:	70 e3       	ldi	r23, 0x30	; 48
    6de2:	2a 95       	dec	r18
    6de4:	e1 f7       	brne	.-8      	; 0x6dde <__ftoa_engine+0x192>
    6de6:	11 24       	eor	r1, r1
    6de8:	ef 90       	pop	r14
    6dea:	ff 90       	pop	r15
    6dec:	0f 91       	pop	r16
    6dee:	1f 91       	pop	r17
    6df0:	cf 91       	pop	r28
    6df2:	df 91       	pop	r29
    6df4:	99 27       	eor	r25, r25
    6df6:	87 fd       	sbrc	r24, 7
    6df8:	90 95       	com	r25
    6dfa:	08 95       	ret

00006dfc <strnlen_P>:
    6dfc:	fc 01       	movw	r30, r24
    6dfe:	05 90       	lpm	r0, Z+
    6e00:	61 50       	subi	r22, 0x01	; 1
    6e02:	70 40       	sbci	r23, 0x00	; 0
    6e04:	01 10       	cpse	r0, r1
    6e06:	d8 f7       	brcc	.-10     	; 0x6dfe <strnlen_P+0x2>
    6e08:	80 95       	com	r24
    6e0a:	90 95       	com	r25
    6e0c:	8e 0f       	add	r24, r30
    6e0e:	9f 1f       	adc	r25, r31
    6e10:	08 95       	ret

00006e12 <memcpy>:
    6e12:	fb 01       	movw	r30, r22
    6e14:	dc 01       	movw	r26, r24
    6e16:	02 c0       	rjmp	.+4      	; 0x6e1c <memcpy+0xa>
    6e18:	01 90       	ld	r0, Z+
    6e1a:	0d 92       	st	X+, r0
    6e1c:	41 50       	subi	r20, 0x01	; 1
    6e1e:	50 40       	sbci	r21, 0x00	; 0
    6e20:	d8 f7       	brcc	.-10     	; 0x6e18 <memcpy+0x6>
    6e22:	08 95       	ret

00006e24 <strnlen>:
    6e24:	fc 01       	movw	r30, r24
    6e26:	61 50       	subi	r22, 0x01	; 1
    6e28:	70 40       	sbci	r23, 0x00	; 0
    6e2a:	01 90       	ld	r0, Z+
    6e2c:	01 10       	cpse	r0, r1
    6e2e:	d8 f7       	brcc	.-10     	; 0x6e26 <strnlen+0x2>
    6e30:	80 95       	com	r24
    6e32:	90 95       	com	r25
    6e34:	8e 0f       	add	r24, r30
    6e36:	9f 1f       	adc	r25, r31
    6e38:	08 95       	ret

00006e3a <fputc>:
    6e3a:	0f 93       	push	r16
    6e3c:	1f 93       	push	r17
    6e3e:	cf 93       	push	r28
    6e40:	df 93       	push	r29
    6e42:	fb 01       	movw	r30, r22
    6e44:	23 81       	ldd	r18, Z+3	; 0x03
    6e46:	21 fd       	sbrc	r18, 1
    6e48:	03 c0       	rjmp	.+6      	; 0x6e50 <fputc+0x16>
    6e4a:	8f ef       	ldi	r24, 0xFF	; 255
    6e4c:	9f ef       	ldi	r25, 0xFF	; 255
    6e4e:	2c c0       	rjmp	.+88     	; 0x6ea8 <fputc+0x6e>
    6e50:	22 ff       	sbrs	r18, 2
    6e52:	16 c0       	rjmp	.+44     	; 0x6e80 <fputc+0x46>
    6e54:	46 81       	ldd	r20, Z+6	; 0x06
    6e56:	57 81       	ldd	r21, Z+7	; 0x07
    6e58:	24 81       	ldd	r18, Z+4	; 0x04
    6e5a:	35 81       	ldd	r19, Z+5	; 0x05
    6e5c:	42 17       	cp	r20, r18
    6e5e:	53 07       	cpc	r21, r19
    6e60:	44 f4       	brge	.+16     	; 0x6e72 <fputc+0x38>
    6e62:	a0 81       	ld	r26, Z
    6e64:	b1 81       	ldd	r27, Z+1	; 0x01
    6e66:	9d 01       	movw	r18, r26
    6e68:	2f 5f       	subi	r18, 0xFF	; 255
    6e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e6c:	31 83       	std	Z+1, r19	; 0x01
    6e6e:	20 83       	st	Z, r18
    6e70:	8c 93       	st	X, r24
    6e72:	26 81       	ldd	r18, Z+6	; 0x06
    6e74:	37 81       	ldd	r19, Z+7	; 0x07
    6e76:	2f 5f       	subi	r18, 0xFF	; 255
    6e78:	3f 4f       	sbci	r19, 0xFF	; 255
    6e7a:	37 83       	std	Z+7, r19	; 0x07
    6e7c:	26 83       	std	Z+6, r18	; 0x06
    6e7e:	14 c0       	rjmp	.+40     	; 0x6ea8 <fputc+0x6e>
    6e80:	8b 01       	movw	r16, r22
    6e82:	ec 01       	movw	r28, r24
    6e84:	fb 01       	movw	r30, r22
    6e86:	00 84       	ldd	r0, Z+8	; 0x08
    6e88:	f1 85       	ldd	r31, Z+9	; 0x09
    6e8a:	e0 2d       	mov	r30, r0
    6e8c:	19 95       	eicall
    6e8e:	89 2b       	or	r24, r25
    6e90:	e1 f6       	brne	.-72     	; 0x6e4a <fputc+0x10>
    6e92:	d8 01       	movw	r26, r16
    6e94:	16 96       	adiw	r26, 0x06	; 6
    6e96:	8d 91       	ld	r24, X+
    6e98:	9c 91       	ld	r25, X
    6e9a:	17 97       	sbiw	r26, 0x07	; 7
    6e9c:	01 96       	adiw	r24, 0x01	; 1
    6e9e:	17 96       	adiw	r26, 0x07	; 7
    6ea0:	9c 93       	st	X, r25
    6ea2:	8e 93       	st	-X, r24
    6ea4:	16 97       	sbiw	r26, 0x06	; 6
    6ea6:	ce 01       	movw	r24, r28
    6ea8:	df 91       	pop	r29
    6eaa:	cf 91       	pop	r28
    6eac:	1f 91       	pop	r17
    6eae:	0f 91       	pop	r16
    6eb0:	08 95       	ret

00006eb2 <vsprintf>:
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	cf 93       	push	r28
    6eb8:	df 93       	push	r29
    6eba:	cd b7       	in	r28, 0x3d	; 61
    6ebc:	de b7       	in	r29, 0x3e	; 62
    6ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    6ec0:	0f b6       	in	r0, 0x3f	; 63
    6ec2:	f8 94       	cli
    6ec4:	de bf       	out	0x3e, r29	; 62
    6ec6:	0f be       	out	0x3f, r0	; 63
    6ec8:	cd bf       	out	0x3d, r28	; 61
    6eca:	8c 01       	movw	r16, r24
    6ecc:	86 e0       	ldi	r24, 0x06	; 6
    6ece:	8c 83       	std	Y+4, r24	; 0x04
    6ed0:	1a 83       	std	Y+2, r17	; 0x02
    6ed2:	09 83       	std	Y+1, r16	; 0x01
    6ed4:	8f ef       	ldi	r24, 0xFF	; 255
    6ed6:	9f e7       	ldi	r25, 0x7F	; 127
    6ed8:	9e 83       	std	Y+6, r25	; 0x06
    6eda:	8d 83       	std	Y+5, r24	; 0x05
    6edc:	ce 01       	movw	r24, r28
    6ede:	01 96       	adiw	r24, 0x01	; 1
    6ee0:	f6 da       	rcall	.-2580   	; 0x64ce <vfprintf>
    6ee2:	ef 81       	ldd	r30, Y+7	; 0x07
    6ee4:	f8 85       	ldd	r31, Y+8	; 0x08
    6ee6:	e0 0f       	add	r30, r16
    6ee8:	f1 1f       	adc	r31, r17
    6eea:	10 82       	st	Z, r1
    6eec:	2e 96       	adiw	r28, 0x0e	; 14
    6eee:	0f b6       	in	r0, 0x3f	; 63
    6ef0:	f8 94       	cli
    6ef2:	de bf       	out	0x3e, r29	; 62
    6ef4:	0f be       	out	0x3f, r0	; 63
    6ef6:	cd bf       	out	0x3d, r28	; 61
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	1f 91       	pop	r17
    6efe:	0f 91       	pop	r16
    6f00:	08 95       	ret

00006f02 <__ultoa_invert>:
    6f02:	fa 01       	movw	r30, r20
    6f04:	aa 27       	eor	r26, r26
    6f06:	28 30       	cpi	r18, 0x08	; 8
    6f08:	51 f1       	breq	.+84     	; 0x6f5e <__ultoa_invert+0x5c>
    6f0a:	20 31       	cpi	r18, 0x10	; 16
    6f0c:	81 f1       	breq	.+96     	; 0x6f6e <__ultoa_invert+0x6c>
    6f0e:	e8 94       	clt
    6f10:	6f 93       	push	r22
    6f12:	6e 7f       	andi	r22, 0xFE	; 254
    6f14:	6e 5f       	subi	r22, 0xFE	; 254
    6f16:	7f 4f       	sbci	r23, 0xFF	; 255
    6f18:	8f 4f       	sbci	r24, 0xFF	; 255
    6f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f1c:	af 4f       	sbci	r26, 0xFF	; 255
    6f1e:	b1 e0       	ldi	r27, 0x01	; 1
    6f20:	3e d0       	rcall	.+124    	; 0x6f9e <__ultoa_invert+0x9c>
    6f22:	b4 e0       	ldi	r27, 0x04	; 4
    6f24:	3c d0       	rcall	.+120    	; 0x6f9e <__ultoa_invert+0x9c>
    6f26:	67 0f       	add	r22, r23
    6f28:	78 1f       	adc	r23, r24
    6f2a:	89 1f       	adc	r24, r25
    6f2c:	9a 1f       	adc	r25, r26
    6f2e:	a1 1d       	adc	r26, r1
    6f30:	68 0f       	add	r22, r24
    6f32:	79 1f       	adc	r23, r25
    6f34:	8a 1f       	adc	r24, r26
    6f36:	91 1d       	adc	r25, r1
    6f38:	a1 1d       	adc	r26, r1
    6f3a:	6a 0f       	add	r22, r26
    6f3c:	71 1d       	adc	r23, r1
    6f3e:	81 1d       	adc	r24, r1
    6f40:	91 1d       	adc	r25, r1
    6f42:	a1 1d       	adc	r26, r1
    6f44:	20 d0       	rcall	.+64     	; 0x6f86 <__ultoa_invert+0x84>
    6f46:	09 f4       	brne	.+2      	; 0x6f4a <__ultoa_invert+0x48>
    6f48:	68 94       	set
    6f4a:	3f 91       	pop	r19
    6f4c:	2a e0       	ldi	r18, 0x0A	; 10
    6f4e:	26 9f       	mul	r18, r22
    6f50:	11 24       	eor	r1, r1
    6f52:	30 19       	sub	r19, r0
    6f54:	30 5d       	subi	r19, 0xD0	; 208
    6f56:	31 93       	st	Z+, r19
    6f58:	de f6       	brtc	.-74     	; 0x6f10 <__ultoa_invert+0xe>
    6f5a:	cf 01       	movw	r24, r30
    6f5c:	08 95       	ret
    6f5e:	46 2f       	mov	r20, r22
    6f60:	47 70       	andi	r20, 0x07	; 7
    6f62:	40 5d       	subi	r20, 0xD0	; 208
    6f64:	41 93       	st	Z+, r20
    6f66:	b3 e0       	ldi	r27, 0x03	; 3
    6f68:	0f d0       	rcall	.+30     	; 0x6f88 <__ultoa_invert+0x86>
    6f6a:	c9 f7       	brne	.-14     	; 0x6f5e <__ultoa_invert+0x5c>
    6f6c:	f6 cf       	rjmp	.-20     	; 0x6f5a <__ultoa_invert+0x58>
    6f6e:	46 2f       	mov	r20, r22
    6f70:	4f 70       	andi	r20, 0x0F	; 15
    6f72:	40 5d       	subi	r20, 0xD0	; 208
    6f74:	4a 33       	cpi	r20, 0x3A	; 58
    6f76:	18 f0       	brcs	.+6      	; 0x6f7e <__ultoa_invert+0x7c>
    6f78:	49 5d       	subi	r20, 0xD9	; 217
    6f7a:	31 fd       	sbrc	r19, 1
    6f7c:	40 52       	subi	r20, 0x20	; 32
    6f7e:	41 93       	st	Z+, r20
    6f80:	02 d0       	rcall	.+4      	; 0x6f86 <__ultoa_invert+0x84>
    6f82:	a9 f7       	brne	.-22     	; 0x6f6e <__ultoa_invert+0x6c>
    6f84:	ea cf       	rjmp	.-44     	; 0x6f5a <__ultoa_invert+0x58>
    6f86:	b4 e0       	ldi	r27, 0x04	; 4
    6f88:	a6 95       	lsr	r26
    6f8a:	97 95       	ror	r25
    6f8c:	87 95       	ror	r24
    6f8e:	77 95       	ror	r23
    6f90:	67 95       	ror	r22
    6f92:	ba 95       	dec	r27
    6f94:	c9 f7       	brne	.-14     	; 0x6f88 <__ultoa_invert+0x86>
    6f96:	00 97       	sbiw	r24, 0x00	; 0
    6f98:	61 05       	cpc	r22, r1
    6f9a:	71 05       	cpc	r23, r1
    6f9c:	08 95       	ret
    6f9e:	9b 01       	movw	r18, r22
    6fa0:	ac 01       	movw	r20, r24
    6fa2:	0a 2e       	mov	r0, r26
    6fa4:	06 94       	lsr	r0
    6fa6:	57 95       	ror	r21
    6fa8:	47 95       	ror	r20
    6faa:	37 95       	ror	r19
    6fac:	27 95       	ror	r18
    6fae:	ba 95       	dec	r27
    6fb0:	c9 f7       	brne	.-14     	; 0x6fa4 <__ultoa_invert+0xa2>
    6fb2:	62 0f       	add	r22, r18
    6fb4:	73 1f       	adc	r23, r19
    6fb6:	84 1f       	adc	r24, r20
    6fb8:	95 1f       	adc	r25, r21
    6fba:	a0 1d       	adc	r26, r0
    6fbc:	08 95       	ret

00006fbe <_exit>:
    6fbe:	f8 94       	cli

00006fc0 <__stop_program>:
    6fc0:	ff cf       	rjmp	.-2      	; 0x6fc0 <__stop_program>
