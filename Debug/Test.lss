
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000054a  00800200  0000725c  000072f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000725c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  0080074a  0080074a  0000783a  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  0000783a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000078c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000810  00000000  00000000  00007908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af78  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002400  00000000  00000000  00013090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006508  00000000  00000000  00015490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001adc  00000000  00000000  0001b998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030ad  00000000  00000000  0001d474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b534  00000000  00000000  00020521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0002ba55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_3>
      10:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__vector_4>
      14:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	cd e9       	ldi	r28, 0x9D	; 157
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	ec e5       	ldi	r30, 0x5C	; 92
     25a:	f2 e7       	ldi	r31, 0x72	; 114
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	aa 34       	cpi	r26, 0x4A	; 74
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2c e1       	ldi	r18, 0x1C	; 28
     26e:	aa e4       	ldi	r26, 0x4A	; 74
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a0 31       	cpi	r26, 0x10	; 16
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <main>
     280:	0c 94 2c 39 	jmp	0x7258	; 0x7258 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <network_set_callback>
     294:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <__data_end+0x1>
     298:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <__data_end>
     29c:	cc e4       	ldi	r28, 0x4C	; 76
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 b1 19 	call	0x3362	; 0x3362 <xQueueCreateMutex>
     2b0:	90 93 d6 07 	sts	0x07D6, r25	; 0x8007d6 <connections+0x8a>
     2b4:	80 93 d5 07 	sts	0x07D5, r24	; 0x8007d5 <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	ec e4       	ldi	r30, 0x4C	; 76
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 d8 07 	sts	0x07D8, r1	; 0x8007d8 <connections+0x8c>
     2ea:	10 92 d7 07 	sts	0x07D7, r1	; 0x8007d7 <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	04 5b       	subi	r16, 0xB4	; 180
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 6d 2b 	call	0x56da	; 0x56da <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 a8 2e 	call	0x5d50	; 0x5d50 <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 26 2c 	call	0x584c	; 0x584c <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	e4 5b       	subi	r30, 0xB4	; 180
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	a7 d6       	rcall	.+3406   	; 0x10d2 <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	83 5b       	subi	r24, 0xB3	; 179
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	95 d6       	rcall	.+3370   	; 0x10d2 <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	89 5a       	subi	r24, 0xA9	; 169
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	e4 5b       	subi	r30, 0xB4	; 180
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     404:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     408:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
     40c:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     41c:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     420:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	cc e4       	ldi	r28, 0x4C	; 76
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	5a d7       	rcall	.+3764   	; 0x12e6 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	57 d7       	rcall	.+3758   	; 0x12e6 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     452:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     456:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     492:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     496:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
     49a:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     4be:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     4c2:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <connections+0x9>
     4d2:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 5f 07 	lds	r18, 0x075F	; 0x80075f <connections+0x13>
     4ea:	30 91 60 07 	lds	r19, 0x0760	; 0x800760 <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	8d e4       	ldi	r24, 0x4D	; 77
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	8d e4       	ldi	r24, 0x4D	; 77
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	87 e5       	ldi	r24, 0x57	; 87
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     558:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     55c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     56c:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     570:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <connections+0x20>
     5c2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     61c:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     620:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     634:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     638:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	ec e4       	ldi	r30, 0x4C	; 76
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     66a:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     66e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	ec e4       	ldi	r30, 0x4C	; 76
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	87 e5       	ldi	r24, 0x57	; 87
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8d e4       	ldi	r24, 0x4D	; 77
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	ec e4       	ldi	r30, 0x4C	; 76
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	87 e5       	ldi	r24, 0x57	; 87
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	8d e4       	ldi	r24, 0x4D	; 77
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <connections+0x89>
     7b2:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <connections+0x8a>
     7b6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <connections+0x23>
     7ee:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <connections+0x24>
     80c:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	0c e4       	ldi	r16, 0x4C	; 76
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	8f 58       	subi	r24, 0x8F	; 143
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	81 e7       	ldi	r24, 0x71	; 113
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fc e4       	ldi	r31, 0x4C	; 76
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <__data_end>
     8be:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 83 25 	call	0x4b06	; 0x4b06 <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <vCOM_getData>:
    ui8TWI_write(0x02); // set pointer to measurement mode
    ui8TWI_write(0x00); // continous measurement
    vTWI_stop();
}

void vCOM_getData(int16_t *xCom, int16_t *yCom, int16_t *zCom){
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	7c 01       	movw	r14, r24
     f12:	eb 01       	movw	r28, r22
     f14:	8a 01       	movw	r16, r20
    ui8TWI_start(HMC5883L_WRITE);
     f16:	8c e3       	ldi	r24, 0x3C	; 60
     f18:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <ui8TWI_start>
    ui8TWI_write(0x03); // set pointer to X axis MSB
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <ui8TWI_write>
    vTWI_stop();
     f22:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <vTWI_stop>
    ui8TWI_start(HMC5883L_READ);
     f26:	8d e3       	ldi	r24, 0x3D	; 61
     f28:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <ui8TWI_start>
    *xCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f2c:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <ui8TWI_read_ack>
     f30:	f7 01       	movw	r30, r14
     f32:	10 82       	st	Z, r1
     f34:	81 83       	std	Z+1, r24	; 0x01
    *xCom |= ui8TWI_read_ack();
     f36:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <ui8TWI_read_ack>
     f3a:	f7 01       	movw	r30, r14
     f3c:	20 81       	ld	r18, Z
     f3e:	31 81       	ldd	r19, Z+1	; 0x01
     f40:	28 2b       	or	r18, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
    *zCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f46:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <ui8TWI_read_ack>
     f4a:	f8 01       	movw	r30, r16
     f4c:	10 82       	st	Z, r1
     f4e:	81 83       	std	Z+1, r24	; 0x01
    *zCom |= ui8TWI_read_ack();
     f50:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <ui8TWI_read_ack>
     f54:	f8 01       	movw	r30, r16
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
     f5a:	28 2b       	or	r18, r24
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18
    *yCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f60:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <ui8TWI_read_ack>
     f64:	18 82       	st	Y, r1
     f66:	89 83       	std	Y+1, r24	; 0x01
    *yCom |= ui8TWI_read_nack();
     f68:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <ui8TWI_read_nack>
     f6c:	28 81       	ld	r18, Y
     f6e:	39 81       	ldd	r19, Y+1	; 0x01
     f70:	28 2b       	or	r18, r24
     f72:	39 83       	std	Y+1, r19	; 0x01
     f74:	28 83       	st	Y, r18
    vTWI_stop();
     f76:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <vTWI_stop>
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <crc_ibutton_update>:
     f88:	86 27       	eor	r24, r22
     f8a:	98 e0       	ldi	r25, 0x08	; 8
     f8c:	2c e8       	ldi	r18, 0x8C	; 140
     f8e:	80 ff       	sbrs	r24, 0
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <crc_ibutton_update+0x10>
     f92:	86 95       	lsr	r24
     f94:	82 27       	eor	r24, r18
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <crc_ibutton_update+0x12>
     f98:	86 95       	lsr	r24
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	c1 f7       	brne	.-16     	; 0xf8e <crc_ibutton_update+0x6>
     f9e:	08 95       	ret

00000fa0 <calculate_crc>:
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	66 23       	and	r22, r22
     faa:	59 f0       	breq	.+22     	; 0xfc2 <calculate_crc+0x22>
     fac:	8c 01       	movw	r16, r24
     fae:	ec 01       	movw	r28, r24
     fb0:	06 0f       	add	r16, r22
     fb2:	11 1d       	adc	r17, r1
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	69 91       	ld	r22, Y+
     fb8:	e7 df       	rcall	.-50     	; 0xf88 <crc_ibutton_update>
     fba:	c0 17       	cp	r28, r16
     fbc:	d1 07       	cpc	r29, r17
     fbe:	d9 f7       	brne	.-10     	; 0xfb6 <calculate_crc+0x16>
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <calculate_crc+0x24>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     fce:	80 b3       	in	r24, 0x10	; 16
     fd0:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     fd2:	ec e7       	ldi	r30, 0x7C	; 124
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 6c       	ori	r24, 0xC0	; 192
     fda:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     fdc:	ea e7       	ldi	r30, 0x7A	; 122
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     fe6:	80 81       	ld	r24, Z
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	80 83       	st	Z, r24
     fec:	08 95       	ret

00000fee <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     fee:	ec e7       	ldi	r30, 0x7C	; 124
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     ff4:	90 81       	ld	r25, Z
     ff6:	90 6c       	ori	r25, 0xC0	; 192
     ff8:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     ffa:	ea e7       	ldi	r30, 0x7A	; 122
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z
    1000:	90 64       	ori	r25, 0x40	; 64
    1002:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
    1004:	90 81       	ld	r25, Z
    1006:	96 fd       	sbrc	r25, 6
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
    100a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    100e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
    1012:	e8 2f       	mov	r30, r24
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	26 95       	lsr	r18
    1018:	26 95       	lsr	r18
    101a:	30 e4       	ldi	r19, 0x40	; 64
    101c:	93 9f       	mul	r25, r19
    101e:	c0 01       	movw	r24, r0
    1020:	11 24       	eor	r1, r1
    1022:	82 2b       	or	r24, r18
    1024:	fe 2f       	mov	r31, r30
    1026:	ee 27       	eor	r30, r30
    1028:	e0 50       	subi	r30, 0x00	; 0
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	e8 0f       	add	r30, r24
    102e:	f1 1d       	adc	r31, r1
}
    1030:	80 81       	ld	r24, Z
    1032:	08 95       	ret

00001034 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
    1042:	c8 80       	ld	r12, Y
    1044:	d9 80       	ldd	r13, Y+1	; 0x01
    1046:	ea 80       	ldd	r14, Y+2	; 0x02
    1048:	fb 80       	ldd	r15, Y+3	; 0x03
    104a:	2b ed       	ldi	r18, 0xDB	; 219
    104c:	3f e0       	ldi	r19, 0x0F	; 15
    104e:	49 e4       	ldi	r20, 0x49	; 73
    1050:	50 e4       	ldi	r21, 0x40	; 64
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    105a:	18 16       	cp	r1, r24
    105c:	6c f4       	brge	.+26     	; 0x1078 <vFunc_Inf2pi+0x44>
    105e:	2b ed       	ldi	r18, 0xDB	; 219
    1060:	3f e0       	ldi	r19, 0x0F	; 15
    1062:	49 ec       	ldi	r20, 0xC9	; 201
    1064:	50 e4       	ldi	r21, 0x40	; 64
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    106e:	68 83       	st	Y, r22
    1070:	79 83       	std	Y+1, r23	; 0x01
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	9b 83       	std	Y+3, r25	; 0x03
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
    1078:	2b ed       	ldi	r18, 0xDB	; 219
    107a:	3f e0       	ldi	r19, 0x0F	; 15
    107c:	49 e4       	ldi	r20, 0x49	; 73
    107e:	50 ec       	ldi	r21, 0xC0	; 192
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 25 31 	call	0x624a	; 0x624a <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	64 f4       	brge	.+24     	; 0x10a4 <vFunc_Inf2pi+0x70>
    108c:	2b ed       	ldi	r18, 0xDB	; 219
    108e:	3f e0       	ldi	r19, 0x0F	; 15
    1090:	49 ec       	ldi	r20, 0xC9	; 201
    1092:	50 e4       	ldi	r21, 0x40	; 64
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    109c:	68 83       	st	Y, r22
    109e:	79 83       	std	Y+1, r23	; 0x01
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    10a4:	88 81       	ld	r24, Y
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	aa 81       	ldd	r26, Y+2	; 0x02
    10aa:	bb 81       	ldd	r27, Y+3	; 0x03
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	9f 77       	andi	r25, 0x7F	; 127
    10b2:	2b ed       	ldi	r18, 0xDB	; 219
    10b4:	3f e0       	ldi	r19, 0x0F	; 15
    10b6:	49 e4       	ldi	r20, 0x49	; 73
    10b8:	50 e4       	ldi	r21, 0x40	; 64
    10ba:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	0c f4       	brge	.+2      	; 0x10c4 <vFunc_Inf2pi+0x90>
    10c2:	bf cf       	rjmp	.-130    	; 0x1042 <vFunc_Inf2pi+0xe>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    10e0:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    10e4:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <pxEnd>
    10e8:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <pxEnd+0x1>
    10ec:	89 2b       	or	r24, r25
    10ee:	41 f5       	brne	.+80     	; 0x1140 <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    10f0:	e1 ee       	ldi	r30, 0xE1	; 225
    10f2:	f7 e0       	ldi	r31, 0x07	; 7
    10f4:	a5 ee       	ldi	r26, 0xE5	; 229
    10f6:	b7 e0       	ldi	r27, 0x07	; 7
    10f8:	b1 83       	std	Z+1, r27	; 0x01
    10fa:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    10fc:	13 82       	std	Z+3, r1	; 0x03
    10fe:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1100:	e1 ee       	ldi	r30, 0xE1	; 225
    1102:	f9 e1       	ldi	r31, 0x19	; 25
    1104:	f0 93 e0 07 	sts	0x07E0, r31	; 0x8007e0 <pxEnd+0x1>
    1108:	e0 93 df 07 	sts	0x07DF, r30	; 0x8007df <pxEnd>
	pxEnd->xBlockSize = 0;
    110c:	13 82       	std	Z+3, r1	; 0x03
    110e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1110:	11 82       	std	Z+1, r1	; 0x01
    1112:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1114:	8c ef       	ldi	r24, 0xFC	; 252
    1116:	91 e1       	ldi	r25, 0x11	; 17
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
    111e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1120:	ed 93       	st	X+, r30
    1122:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1124:	90 93 dc 07 	sts	0x07DC, r25	; 0x8007dc <xMinimumEverFreeBytesRemaining+0x1>
    1128:	80 93 db 07 	sts	0x07DB, r24	; 0x8007db <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112c:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xFreeBytesRemaining+0x1>
    1130:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e8       	ldi	r25, 0x80	; 128
    1138:	90 93 da 07 	sts	0x07DA, r25	; 0x8007da <xBlockAllocatedBit+0x1>
    113c:	80 93 d9 07 	sts	0x07D9, r24	; 0x8007d9 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1140:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <xBlockAllocatedBit>
    1144:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <xBlockAllocatedBit+0x1>
    1148:	8c 23       	and	r24, r28
    114a:	9d 23       	and	r25, r29
    114c:	89 2b       	or	r24, r25
    114e:	09 f0       	breq	.+2      	; 0x1152 <pvPortMalloc+0x80>
    1150:	b2 c0       	rjmp	.+356    	; 0x12b6 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	09 f4       	brne	.+2      	; 0x1158 <pvPortMalloc+0x86>
    1156:	b2 c0       	rjmp	.+356    	; 0x12bc <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    1158:	ae 01       	movw	r20, r28
    115a:	4c 5f       	subi	r20, 0xFC	; 252
    115c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    115e:	09 f4       	brne	.+2      	; 0x1162 <pvPortMalloc+0x90>
    1160:	b0 c0       	rjmp	.+352    	; 0x12c2 <pvPortMalloc+0x1f0>
    1162:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <xFreeBytesRemaining>
    1166:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <xFreeBytesRemaining+0x1>
    116a:	84 17       	cp	r24, r20
    116c:	95 07       	cpc	r25, r21
    116e:	08 f4       	brcc	.+2      	; 0x1172 <pvPortMalloc+0xa0>
    1170:	ab c0       	rjmp	.+342    	; 0x12c8 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1172:	e0 91 e1 07 	lds	r30, 0x07E1	; 0x8007e1 <xStart>
    1176:	f0 91 e2 07 	lds	r31, 0x07E2	; 0x8007e2 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    117a:	a1 ee       	ldi	r26, 0xE1	; 225
    117c:	b7 e0       	ldi	r27, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <pvPortMalloc+0xb2>
    1180:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1182:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1184:	22 81       	ldd	r18, Z+2	; 0x02
    1186:	33 81       	ldd	r19, Z+3	; 0x03
    1188:	24 17       	cp	r18, r20
    118a:	35 07       	cpc	r19, r21
    118c:	28 f4       	brcc	.+10     	; 0x1198 <pvPortMalloc+0xc6>
    118e:	20 81       	ld	r18, Z
    1190:	31 81       	ldd	r19, Z+1	; 0x01
    1192:	21 15       	cp	r18, r1
    1194:	31 05       	cpc	r19, r1
    1196:	a1 f7       	brne	.-24     	; 0x1180 <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1198:	60 91 df 07 	lds	r22, 0x07DF	; 0x8007df <pxEnd>
    119c:	70 91 e0 07 	lds	r23, 0x07E0	; 0x8007e0 <pxEnd+0x1>
    11a0:	e6 17       	cp	r30, r22
    11a2:	f7 07       	cpc	r31, r23
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <pvPortMalloc+0xd6>
    11a6:	93 c0       	rjmp	.+294    	; 0x12ce <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    11a8:	cd 91       	ld	r28, X+
    11aa:	dc 91       	ld	r29, X
    11ac:	11 97       	sbiw	r26, 0x01	; 1
    11ae:	7e 01       	movw	r14, r28
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	e8 0e       	add	r14, r24
    11b4:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	8d 93       	st	X+, r24
    11bc:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	84 1b       	sub	r24, r20
    11c4:	95 0b       	sbc	r25, r21
    11c6:	89 30       	cpi	r24, 0x09	; 9
    11c8:	91 05       	cpc	r25, r1
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <pvPortMalloc+0xfc>
    11cc:	52 c0       	rjmp	.+164    	; 0x1272 <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    11ce:	9f 01       	movw	r18, r30
    11d0:	24 0f       	add	r18, r20
    11d2:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    11d4:	d9 01       	movw	r26, r18
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	9c 93       	st	X, r25
    11da:	8e 93       	st	-X, r24
    11dc:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    11de:	53 83       	std	Z+3, r21	; 0x03
    11e0:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11e2:	a1 ee       	ldi	r26, 0xE1	; 225
    11e4:	b7 e0       	ldi	r27, 0x07	; 7
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <pvPortMalloc+0x118>
    11e8:	dc 01       	movw	r26, r24
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	11 97       	sbiw	r26, 0x01	; 1
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	c8 f3       	brcs	.-14     	; 0x11e8 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	4d 91       	ld	r20, X+
    11fa:	5c 91       	ld	r21, X
    11fc:	13 97       	sbiw	r26, 0x03	; 3
    11fe:	8d 01       	movw	r16, r26
    1200:	04 0f       	add	r16, r20
    1202:	15 1f       	adc	r17, r21
    1204:	20 17       	cp	r18, r16
    1206:	31 07       	cpc	r19, r17
    1208:	51 f4       	brne	.+20     	; 0x121e <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    120a:	e9 01       	movw	r28, r18
    120c:	2a 81       	ldd	r18, Y+2	; 0x02
    120e:	3b 81       	ldd	r19, Y+3	; 0x03
    1210:	42 0f       	add	r20, r18
    1212:	53 1f       	adc	r21, r19
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	5c 93       	st	X, r21
    1218:	4e 93       	st	-X, r20
    121a:	12 97       	sbiw	r26, 0x02	; 2
    121c:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    121e:	e9 01       	movw	r28, r18
    1220:	4a 81       	ldd	r20, Y+2	; 0x02
    1222:	5b 81       	ldd	r21, Y+3	; 0x03
    1224:	89 01       	movw	r16, r18
    1226:	04 0f       	add	r16, r20
    1228:	15 1f       	adc	r17, r21
    122a:	80 17       	cp	r24, r16
    122c:	91 07       	cpc	r25, r17
    122e:	c9 f4       	brne	.+50     	; 0x1262 <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1230:	60 17       	cp	r22, r16
    1232:	71 07       	cpc	r23, r17
    1234:	91 f0       	breq	.+36     	; 0x125a <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1236:	e8 01       	movw	r28, r16
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	48 0f       	add	r20, r24
    123e:	59 1f       	adc	r21, r25
    1240:	e9 01       	movw	r28, r18
    1242:	5b 83       	std	Y+3, r21	; 0x03
    1244:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1246:	8d 91       	ld	r24, X+
    1248:	9c 91       	ld	r25, X
    124a:	11 97       	sbiw	r26, 0x01	; 1
    124c:	ec 01       	movw	r28, r24
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	e9 01       	movw	r28, r18
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	88 83       	st	Y, r24
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    125a:	e9 01       	movw	r28, r18
    125c:	79 83       	std	Y+1, r23	; 0x01
    125e:	68 83       	st	Y, r22
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1262:	e9 01       	movw	r28, r18
    1264:	99 83       	std	Y+1, r25	; 0x01
    1266:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1268:	a2 17       	cp	r26, r18
    126a:	b3 07       	cpc	r27, r19
    126c:	11 f0       	breq	.+4      	; 0x1272 <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    126e:	2d 93       	st	X+, r18
    1270:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1272:	22 81       	ldd	r18, Z+2	; 0x02
    1274:	33 81       	ldd	r19, Z+3	; 0x03
    1276:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <xFreeBytesRemaining>
    127a:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <xFreeBytesRemaining+0x1>
    127e:	82 1b       	sub	r24, r18
    1280:	93 0b       	sbc	r25, r19
    1282:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xFreeBytesRemaining+0x1>
    1286:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    128a:	40 91 db 07 	lds	r20, 0x07DB	; 0x8007db <xMinimumEverFreeBytesRemaining>
    128e:	50 91 dc 07 	lds	r21, 0x07DC	; 0x8007dc <xMinimumEverFreeBytesRemaining+0x1>
    1292:	84 17       	cp	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1298:	90 93 dc 07 	sts	0x07DC, r25	; 0x8007dc <xMinimumEverFreeBytesRemaining+0x1>
    129c:	80 93 db 07 	sts	0x07DB, r24	; 0x8007db <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    12a0:	80 91 d9 07 	lds	r24, 0x07D9	; 0x8007d9 <xBlockAllocatedBit>
    12a4:	90 91 da 07 	lds	r25, 0x07DA	; 0x8007da <xBlockAllocatedBit+0x1>
    12a8:	28 2b       	or	r18, r24
    12aa:	39 2b       	or	r19, r25
    12ac:	33 83       	std	Z+3, r19	; 0x03
    12ae:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    12b0:	11 82       	std	Z+1, r1	; 0x01
    12b2:	10 82       	st	Z, r1
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    12b6:	e1 2c       	mov	r14, r1
    12b8:	f1 2c       	mov	r15, r1
    12ba:	0b c0       	rjmp	.+22     	; 0x12d2 <pvPortMalloc+0x200>
    12bc:	e1 2c       	mov	r14, r1
    12be:	f1 2c       	mov	r15, r1
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <pvPortMalloc+0x200>
    12c2:	e1 2c       	mov	r14, r1
    12c4:	f1 2c       	mov	r15, r1
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <pvPortMalloc+0x200>
    12c8:	e1 2c       	mov	r14, r1
    12ca:	f1 2c       	mov	r15, r1
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <pvPortMalloc+0x200>
    12ce:	e1 2c       	mov	r14, r1
    12d0:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12d2:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    12d6:	c7 01       	movw	r24, r14
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <vPortFree+0xa>
    12ee:	68 c0       	rjmp	.+208    	; 0x13c0 <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    12f0:	fc 01       	movw	r30, r24
    12f2:	34 97       	sbiw	r30, 0x04	; 4
    12f4:	22 81       	ldd	r18, Z+2	; 0x02
    12f6:	33 81       	ldd	r19, Z+3	; 0x03
    12f8:	40 91 d9 07 	lds	r20, 0x07D9	; 0x8007d9 <xBlockAllocatedBit>
    12fc:	50 91 da 07 	lds	r21, 0x07DA	; 0x8007da <xBlockAllocatedBit+0x1>
    1300:	b9 01       	movw	r22, r18
    1302:	64 23       	and	r22, r20
    1304:	75 23       	and	r23, r21
    1306:	67 2b       	or	r22, r23
    1308:	09 f4       	brne	.+2      	; 0x130c <vPortFree+0x26>
    130a:	5a c0       	rjmp	.+180    	; 0x13c0 <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	67 2b       	or	r22, r23
    1312:	09 f0       	breq	.+2      	; 0x1316 <vPortFree+0x30>
    1314:	55 c0       	rjmp	.+170    	; 0x13c0 <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1316:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1318:	40 95       	com	r20
    131a:	50 95       	com	r21
    131c:	24 23       	and	r18, r20
    131e:	35 23       	and	r19, r21
    1320:	33 83       	std	Z+3, r19	; 0x03
    1322:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1324:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1328:	4a 81       	ldd	r20, Y+2	; 0x02
    132a:	5b 81       	ldd	r21, Y+3	; 0x03
    132c:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <xFreeBytesRemaining>
    1330:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <xFreeBytesRemaining+0x1>
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xFreeBytesRemaining+0x1>
    133c:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1340:	e1 ee       	ldi	r30, 0xE1	; 225
    1342:	f7 e0       	ldi	r31, 0x07	; 7
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <vPortFree+0x62>
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	8c 17       	cp	r24, r28
    134e:	9d 07       	cpc	r25, r29
    1350:	d0 f3       	brcs	.-12     	; 0x1346 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1352:	22 81       	ldd	r18, Z+2	; 0x02
    1354:	33 81       	ldd	r19, Z+3	; 0x03
    1356:	bf 01       	movw	r22, r30
    1358:	62 0f       	add	r22, r18
    135a:	73 1f       	adc	r23, r19
    135c:	c6 17       	cp	r28, r22
    135e:	d7 07       	cpc	r29, r23
    1360:	29 f4       	brne	.+10     	; 0x136c <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1362:	24 0f       	add	r18, r20
    1364:	35 1f       	adc	r19, r21
    1366:	33 83       	std	Z+3, r19	; 0x03
    1368:	22 83       	std	Z+2, r18	; 0x02
    136a:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    136c:	2a 81       	ldd	r18, Y+2	; 0x02
    136e:	3b 81       	ldd	r19, Y+3	; 0x03
    1370:	de 01       	movw	r26, r28
    1372:	a2 0f       	add	r26, r18
    1374:	b3 1f       	adc	r27, r19
    1376:	8a 17       	cp	r24, r26
    1378:	9b 07       	cpc	r25, r27
    137a:	c9 f4       	brne	.+50     	; 0x13ae <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    137c:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <pxEnd>
    1380:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <pxEnd+0x1>
    1384:	a8 17       	cp	r26, r24
    1386:	b9 07       	cpc	r27, r25
    1388:	79 f0       	breq	.+30     	; 0x13a8 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	13 97       	sbiw	r26, 0x03	; 3
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	3b 83       	std	Y+3, r19	; 0x03
    1398:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    139a:	a0 81       	ld	r26, Z
    139c:	b1 81       	ldd	r27, Z+1	; 0x01
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	99 83       	std	Y+1, r25	; 0x01
    13a4:	88 83       	st	Y, r24
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13a8:	b9 83       	std	Y+1, r27	; 0x01
    13aa:	a8 83       	st	Y, r26
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    13b2:	ec 17       	cp	r30, r28
    13b4:	fd 07       	cpc	r31, r29
    13b6:	11 f0       	breq	.+4      	; 0x13bc <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13b8:	d1 83       	std	Z+1, r29	; 0x01
    13ba:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    13bc:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
    13d4:	e4 2e       	mov	r14, r20
    13d6:	28 98       	cbi	0x05, 0	; 5
    13d8:	86 2f       	mov	r24, r22
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    13e0:	ee 20       	and	r14, r14
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <sIMU_readRegisterRegion+0x4a>
    13e4:	0f ef       	ldi	r16, 0xFF	; 255
    13e6:	0e 0d       	add	r16, r14
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	0c 0f       	add	r16, r28
    13f0:	1d 1f       	adc	r17, r29
    13f2:	f1 2c       	mov	r15, r1
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	09 f4       	brne	.+2      	; 0x1400 <sIMU_readRegisterRegion+0x3a>
    13fe:	f3 94       	inc	r15
    1400:	89 93       	st	Y+, r24
    1402:	0c 17       	cp	r16, r28
    1404:	1d 07       	cpc	r17, r29
    1406:	b1 f7       	brne	.-20     	; 0x13f4 <sIMU_readRegisterRegion+0x2e>
    1408:	fe 10       	cpse	r15, r14
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <sIMU_readRegisterRegion+0x4e>
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <sIMU_readRegisterRegion+0x50>
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <sIMU_readRegisterRegion+0x50>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	28 9a       	sbi	0x05, 0	; 5
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	08 95       	ret

00001426 <sIMU_readRegister>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ec 01       	movw	r28, r24
    142c:	28 98       	cbi	0x05, 0	; 5
    142e:	86 2f       	mov	r24, r22
    1430:	80 68       	ori	r24, 0x80	; 128
    1432:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    143c:	28 9a       	sbi	0x05, 0	; 5
    143e:	8f 3f       	cpi	r24, 0xFF	; 255
    1440:	11 f4       	brne	.+4      	; 0x1446 <sIMU_readRegister+0x20>
    1442:	95 e0       	ldi	r25, 0x05	; 5
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <sIMU_readRegister+0x22>
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 83       	st	Y, r24
    144a:	89 2f       	mov	r24, r25
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <sIMU_Init>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	1f 92       	push	r1
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	ed e3       	ldi	r30, 0x3D	; 61
    1460:	fb e1       	ldi	r31, 0x1B	; 27
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 83       	st	Z, r24
    1466:	24 ef       	ldi	r18, 0xF4	; 244
    1468:	31 e0       	ldi	r19, 0x01	; 1
    146a:	32 83       	std	Z+2, r19	; 0x02
    146c:	21 83       	std	Z+1, r18	; 0x01
    146e:	22 e8       	ldi	r18, 0x82	; 130
    1470:	36 e0       	ldi	r19, 0x06	; 6
    1472:	34 83       	std	Z+4, r19	; 0x04
    1474:	23 83       	std	Z+3, r18	; 0x03
    1476:	20 e9       	ldi	r18, 0x90	; 144
    1478:	31 e0       	ldi	r19, 0x01	; 1
    147a:	36 83       	std	Z+6, r19	; 0x06
    147c:	25 83       	std	Z+5, r18	; 0x05
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	10 86       	std	Z+8, r1	; 0x08
    1482:	81 87       	std	Z+9, r24	; 0x09
    1484:	82 87       	std	Z+10, r24	; 0x0a
    1486:	20 e1       	ldi	r18, 0x10	; 16
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	34 87       	std	Z+12, r19	; 0x0c
    148c:	23 87       	std	Z+11, r18	; 0x0b
    148e:	2d e0       	ldi	r18, 0x0D	; 13
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	36 87       	std	Z+14, r19	; 0x0e
    1494:	25 87       	std	Z+13, r18	; 0x0d
    1496:	22 e3       	ldi	r18, 0x32	; 50
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	30 8b       	std	Z+16, r19	; 0x10
    149c:	27 87       	std	Z+15, r18	; 0x0f
    149e:	11 8a       	std	Z+17, r1	; 0x11
    14a0:	12 8a       	std	Z+18, r1	; 0x12
    14a2:	83 8b       	std	Z+19, r24	; 0x13
    14a4:	84 8b       	std	Z+20, r24	; 0x14
    14a6:	88 eb       	ldi	r24, 0xB8	; 184
    14a8:	9b e0       	ldi	r25, 0x0B	; 11
    14aa:	96 8b       	std	Z+22, r25	; 0x16
    14ac:	85 8b       	std	Z+21, r24	; 0x15
    14ae:	8a e0       	ldi	r24, 0x0A	; 10
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	90 8f       	std	Z+24, r25	; 0x18
    14b4:	87 8b       	std	Z+23, r24	; 0x17
    14b6:	11 8e       	std	Z+25, r1	; 0x19
    14b8:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <allOnesCounter+0x1>
    14bc:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <allOnesCounter>
    14c0:	10 92 5a 1b 	sts	0x1B5A, r1	; 0x801b5a <nonSuccessCounter+0x1>
    14c4:	10 92 59 1b 	sts	0x1B59, r1	; 0x801b59 <nonSuccessCounter>
    14c8:	0e 94 b7 22 	call	0x456e	; 0x456e <vSPI_MasterInit>
    14cc:	20 9a       	sbi	0x04, 0	; 4
    14ce:	28 9a       	sbi	0x05, 0	; 5
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	20 e1       	ldi	r18, 0x10	; 16
    14d4:	37 e2       	ldi	r19, 0x27	; 39
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	31 09       	sbc	r19, r1
    14e0:	d1 f7       	brne	.-12     	; 0x14d6 <sIMU_Init+0x84>
    14e2:	6f e0       	ldi	r22, 0x0F	; 15
    14e4:	ce 01       	movw	r24, r28
    14e6:	02 96       	adiw	r24, 0x02	; 2
    14e8:	9e df       	rcall	.-196    	; 0x1426 <sIMU_readRegister>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	89 36       	cpi	r24, 0x69	; 105
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <sIMU_Init+0x90>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <sIMU_readRegisterInt16>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	1f 92       	push	r1
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8c 01       	movw	r16, r24
    150e:	42 e0       	ldi	r20, 0x02	; 2
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	58 df       	rcall	.-336    	; 0x13c6 <sIMU_readRegisterRegion>
    1516:	2a 81       	ldd	r18, Y+2	; 0x02
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	32 2f       	mov	r19, r18
    151c:	22 27       	eor	r18, r18
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	29 2b       	or	r18, r25
    1522:	f8 01       	movw	r30, r16
    1524:	31 83       	std	Z+1, r19	; 0x01
    1526:	20 83       	st	Z, r18
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <sIMU_writeRegister>:
    1536:	cf 93       	push	r28
    1538:	c6 2f       	mov	r28, r22
    153a:	28 98       	cbi	0x05, 0	; 5
    153c:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 c5 22 	call	0x458a	; 0x458a <ui8SPI_MasterTransmit>
    1546:	28 9a       	sbi	0x05, 0	; 5
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <sIMU_begin>:
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	1f 92       	push	r1
    1556:	1f 92       	push	r1
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	79 df       	rcall	.-270    	; 0x1452 <sIMU_Init>
    1560:	18 2f       	mov	r17, r24
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	80 91 46 1b 	lds	r24, 0x1B46	; 0x801b46 <settings+0x9>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <sIMU_begin+0x20>
    156c:	83 c0       	rjmp	.+262    	; 0x1674 <sIMU_begin+0x126>
    156e:	80 91 4c 1b 	lds	r24, 0x1B4C	; 0x801b4c <settings+0xf>
    1572:	90 91 4d 1b 	lds	r25, 0x1B4D	; 0x801b4d <settings+0x10>
    1576:	84 36       	cpi	r24, 0x64	; 100
    1578:	91 05       	cpc	r25, r1
    157a:	41 f0       	breq	.+16     	; 0x158c <sIMU_begin+0x3e>
    157c:	88 3c       	cpi	r24, 0xC8	; 200
    157e:	91 05       	cpc	r25, r1
    1580:	41 f0       	breq	.+16     	; 0x1592 <sIMU_begin+0x44>
    1582:	c2 97       	sbiw	r24, 0x32	; 50
    1584:	41 f4       	brne	.+16     	; 0x1596 <sIMU_begin+0x48>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <sIMU_begin+0x48>
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <sIMU_begin+0x48>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	80 91 48 1b 	lds	r24, 0x1B48	; 0x801b48 <settings+0xb>
    159a:	90 91 49 1b 	lds	r25, 0x1B49	; 0x801b49 <settings+0xc>
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	91 05       	cpc	r25, r1
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <sIMU_begin+0x62>
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	91 05       	cpc	r25, r1
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <sIMU_begin+0x6a>
    15aa:	02 97       	sbiw	r24, 0x02	; 2
    15ac:	49 f4       	brne	.+18     	; 0x15c0 <sIMU_begin+0x72>
    15ae:	0b c0       	rjmp	.+22     	; 0x15c6 <sIMU_begin+0x78>
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <sIMU_begin+0x78>
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	8c 60       	ori	r24, 0x0C	; 12
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <sIMU_begin+0x78>
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	84 60       	ori	r24, 0x04	; 4
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	80 91 4a 1b 	lds	r24, 0x1B4A	; 0x801b4a <settings+0xd>
    15ca:	90 91 4b 1b 	lds	r25, 0x1B4B	; 0x801b4b <settings+0xe>
    15ce:	80 3a       	cpi	r24, 0xA0	; 160
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	92 07       	cpc	r25, r18
    15d4:	c1 f1       	breq	.+112    	; 0x1646 <sIMU_begin+0xf8>
    15d6:	70 f4       	brcc	.+28     	; 0x15f4 <sIMU_begin+0xa6>
    15d8:	8a 31       	cpi	r24, 0x1A	; 26
    15da:	91 05       	cpc	r25, r1
    15dc:	21 f1       	breq	.+72     	; 0x1626 <sIMU_begin+0xd8>
    15de:	18 f4       	brcc	.+6      	; 0x15e6 <sIMU_begin+0x98>
    15e0:	0d 97       	sbiw	r24, 0x0d	; 13
    15e2:	e9 f0       	breq	.+58     	; 0x161e <sIMU_begin+0xd0>
    15e4:	28 c0       	rjmp	.+80     	; 0x1636 <sIMU_begin+0xe8>
    15e6:	84 33       	cpi	r24, 0x34	; 52
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f1       	breq	.+66     	; 0x162e <sIMU_begin+0xe0>
    15ec:	80 3d       	cpi	r24, 0xD0	; 208
    15ee:	91 05       	cpc	r25, r1
    15f0:	31 f1       	breq	.+76     	; 0x163e <sIMU_begin+0xf0>
    15f2:	21 c0       	rjmp	.+66     	; 0x1636 <sIMU_begin+0xe8>
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	2d e0       	ldi	r18, 0x0D	; 13
    15f8:	92 07       	cpc	r25, r18
    15fa:	89 f1       	breq	.+98     	; 0x165e <sIMU_begin+0x110>
    15fc:	40 f4       	brcc	.+16     	; 0x160e <sIMU_begin+0xc0>
    15fe:	81 34       	cpi	r24, 0x41	; 65
    1600:	23 e0       	ldi	r18, 0x03	; 3
    1602:	92 07       	cpc	r25, r18
    1604:	21 f1       	breq	.+72     	; 0x164e <sIMU_begin+0x100>
    1606:	8c 37       	cpi	r24, 0x7C	; 124
    1608:	96 40       	sbci	r25, 0x06	; 6
    160a:	29 f1       	breq	.+74     	; 0x1656 <sIMU_begin+0x108>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <sIMU_begin+0xe8>
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	2a e1       	ldi	r18, 0x1A	; 26
    1612:	92 07       	cpc	r25, r18
    1614:	41 f1       	breq	.+80     	; 0x1666 <sIMU_begin+0x118>
    1616:	82 31       	cpi	r24, 0x12	; 18
    1618:	94 43       	sbci	r25, 0x34	; 52
    161a:	49 f1       	breq	.+82     	; 0x166e <sIMU_begin+0x120>
    161c:	0c c0       	rjmp	.+24     	; 0x1636 <sIMU_begin+0xe8>
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	80 61       	ori	r24, 0x10	; 16
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <sIMU_begin+0x126>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 62       	ori	r24, 0x20	; 32
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	23 c0       	rjmp	.+70     	; 0x1674 <sIMU_begin+0x126>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	80 63       	ori	r24, 0x30	; 48
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <sIMU_begin+0x126>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	1b c0       	rjmp	.+54     	; 0x1674 <sIMU_begin+0x126>
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	80 65       	ori	r24, 0x50	; 80
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	17 c0       	rjmp	.+46     	; 0x1674 <sIMU_begin+0x126>
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	80 66       	ori	r24, 0x60	; 96
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <sIMU_begin+0x126>
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	80 67       	ori	r24, 0x70	; 112
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <sIMU_begin+0x126>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <sIMU_begin+0x126>
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	80 69       	ori	r24, 0x90	; 144
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <sIMU_begin+0x126>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	80 6a       	ori	r24, 0xA0	; 160
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <sIMU_begin+0x126>
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	80 6b       	ori	r24, 0xB0	; 176
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	69 81       	ldd	r22, Y+1	; 0x01
    1676:	80 e1       	ldi	r24, 0x10	; 16
    1678:	5e df       	rcall	.-324    	; 0x1536 <sIMU_writeRegister>
    167a:	63 e1       	ldi	r22, 0x13	; 19
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	d2 de       	rcall	.-604    	; 0x1426 <sIMU_readRegister>
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	90 91 47 1b 	lds	r25, 0x1B47	; 0x801b47 <settings+0xa>
    168c:	91 30       	cpi	r25, 0x01	; 1
    168e:	11 f4       	brne	.+4      	; 0x1694 <sIMU_begin+0x146>
    1690:	80 68       	ori	r24, 0x80	; 128
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	69 81       	ldd	r22, Y+1	; 0x01
    1696:	83 e1       	ldi	r24, 0x13	; 19
    1698:	4e df       	rcall	.-356    	; 0x1536 <sIMU_writeRegister>
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	80 91 3d 1b 	lds	r24, 0x1B3D	; 0x801b3d <settings>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <sIMU_begin+0x158>
    16a4:	5b c0       	rjmp	.+182    	; 0x175c <sIMU_begin+0x20e>
    16a6:	80 91 3e 1b 	lds	r24, 0x1B3E	; 0x801b3e <settings+0x1>
    16aa:	90 91 3f 1b 	lds	r25, 0x1B3F	; 0x801b3f <settings+0x2>
    16ae:	85 3f       	cpi	r24, 0xF5	; 245
    16b0:	91 05       	cpc	r25, r1
    16b2:	c1 f0       	breq	.+48     	; 0x16e4 <sIMU_begin+0x196>
    16b4:	20 f4       	brcc	.+8      	; 0x16be <sIMU_begin+0x170>
    16b6:	8d 37       	cpi	r24, 0x7D	; 125
    16b8:	91 05       	cpc	r25, r1
    16ba:	49 f0       	breq	.+18     	; 0x16ce <sIMU_begin+0x180>
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <sIMU_begin+0x192>
    16be:	84 3f       	cpi	r24, 0xF4	; 244
    16c0:	21 e0       	ldi	r18, 0x01	; 1
    16c2:	92 07       	cpc	r25, r18
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <sIMU_begin+0x186>
    16c6:	88 3e       	cpi	r24, 0xE8	; 232
    16c8:	93 40       	sbci	r25, 0x03	; 3
    16ca:	39 f0       	breq	.+14     	; 0x16da <sIMU_begin+0x18c>
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <sIMU_begin+0x192>
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <sIMU_begin+0x196>
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <sIMU_begin+0x196>
    16da:	88 e0       	ldi	r24, 0x08	; 8
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <sIMU_begin+0x196>
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	80 91 40 1b 	lds	r24, 0x1B40	; 0x801b40 <settings+0x3>
    16e8:	90 91 41 1b 	lds	r25, 0x1B41	; 0x801b41 <settings+0x4>
    16ec:	80 3d       	cpi	r24, 0xD0	; 208
    16ee:	91 05       	cpc	r25, r1
    16f0:	31 f1       	breq	.+76     	; 0x173e <sIMU_begin+0x1f0>
    16f2:	48 f4       	brcc	.+18     	; 0x1706 <sIMU_begin+0x1b8>
    16f4:	8a 31       	cpi	r24, 0x1A	; 26
    16f6:	91 05       	cpc	r25, r1
    16f8:	b1 f0       	breq	.+44     	; 0x1726 <sIMU_begin+0x1d8>
    16fa:	84 33       	cpi	r24, 0x34	; 52
    16fc:	91 05       	cpc	r25, r1
    16fe:	b9 f0       	breq	.+46     	; 0x172e <sIMU_begin+0x1e0>
    1700:	0d 97       	sbiw	r24, 0x0d	; 13
    1702:	c9 f4       	brne	.+50     	; 0x1736 <sIMU_begin+0x1e8>
    1704:	0c c0       	rjmp	.+24     	; 0x171e <sIMU_begin+0x1d0>
    1706:	81 34       	cpi	r24, 0x41	; 65
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	92 07       	cpc	r25, r18
    170c:	01 f1       	breq	.+64     	; 0x174e <sIMU_begin+0x200>
    170e:	8c 37       	cpi	r24, 0x7C	; 124
    1710:	26 e0       	ldi	r18, 0x06	; 6
    1712:	92 07       	cpc	r25, r18
    1714:	01 f1       	breq	.+64     	; 0x1756 <sIMU_begin+0x208>
    1716:	80 3a       	cpi	r24, 0xA0	; 160
    1718:	91 40       	sbci	r25, 0x01	; 1
    171a:	69 f4       	brne	.+26     	; 0x1736 <sIMU_begin+0x1e8>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <sIMU_begin+0x1f8>
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	80 61       	ori	r24, 0x10	; 16
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	1b c0       	rjmp	.+54     	; 0x175c <sIMU_begin+0x20e>
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	17 c0       	rjmp	.+46     	; 0x175c <sIMU_begin+0x20e>
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	80 63       	ori	r24, 0x30	; 48
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	13 c0       	rjmp	.+38     	; 0x175c <sIMU_begin+0x20e>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	0f c0       	rjmp	.+30     	; 0x175c <sIMU_begin+0x20e>
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	80 65       	ori	r24, 0x50	; 80
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	0b c0       	rjmp	.+22     	; 0x175c <sIMU_begin+0x20e>
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 66       	ori	r24, 0x60	; 96
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	07 c0       	rjmp	.+14     	; 0x175c <sIMU_begin+0x20e>
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	80 67       	ori	r24, 0x70	; 112
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	03 c0       	rjmp	.+6      	; 0x175c <sIMU_begin+0x20e>
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	69 81       	ldd	r22, Y+1	; 0x01
    175e:	81 e1       	ldi	r24, 0x11	; 17
    1760:	ea de       	rcall	.-556    	; 0x1536 <sIMU_writeRegister>
    1762:	6f e0       	ldi	r22, 0x0F	; 15
    1764:	ce 01       	movw	r24, r28
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	5e de       	rcall	.-836    	; 0x1426 <sIMU_readRegister>
    176a:	81 2f       	mov	r24, r17
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	08 95       	ret

00001778 <i16IMU_readRawGyroZ>:
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	1f 92       	push	r1
    177e:	1f 92       	push	r1
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	66 e2       	ldi	r22, 0x26	; 38
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	b8 de       	rcall	.-656    	; 0x14fc <sIMU_readRegisterInt16>
    178c:	88 23       	and	r24, r24
    178e:	a9 f0       	breq	.+42     	; 0x17ba <i16IMU_readRawGyroZ+0x42>
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	51 f4       	brne	.+20     	; 0x17a8 <i16IMU_readRawGyroZ+0x30>
    1794:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <allOnesCounter>
    1798:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <allOnesCounter+0x1>
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	90 93 58 1b 	sts	0x1B58, r25	; 0x801b58 <allOnesCounter+0x1>
    17a2:	80 93 57 1b 	sts	0x1B57, r24	; 0x801b57 <allOnesCounter>
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <i16IMU_readRawGyroZ+0x42>
    17a8:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <nonSuccessCounter>
    17ac:	90 91 5a 1b 	lds	r25, 0x1B5A	; 0x801b5a <nonSuccessCounter+0x1>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	90 93 5a 1b 	sts	0x1B5A, r25	; 0x801b5a <nonSuccessCounter+0x1>
    17b6:	80 93 59 1b 	sts	0x1B59, r24	; 0x801b59 <nonSuccessCounter>
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <fIMU_calcGyro>:
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	cf 93       	push	r28
    17d2:	fc 01       	movw	r30, r24
    17d4:	40 91 3e 1b 	lds	r20, 0x1B3E	; 0x801b3e <settings+0x1>
    17d8:	50 91 3f 1b 	lds	r21, 0x1B3F	; 0x801b3f <settings+0x2>
    17dc:	45 3f       	cpi	r20, 0xF5	; 245
    17de:	51 05       	cpc	r21, r1
    17e0:	b1 f0       	breq	.+44     	; 0x180e <fIMU_calcGyro+0x46>
    17e2:	9a 01       	movw	r18, r20
    17e4:	a5 e2       	ldi	r26, 0x25	; 37
    17e6:	b6 e0       	ldi	r27, 0x06	; 6
    17e8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__umulhisi3>
    17ec:	48 1b       	sub	r20, r24
    17ee:	59 0b       	sbc	r21, r25
    17f0:	56 95       	lsr	r21
    17f2:	47 95       	ror	r20
    17f4:	84 0f       	add	r24, r20
    17f6:	95 1f       	adc	r25, r21
    17f8:	00 24       	eor	r0, r0
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	00 1c       	adc	r0, r0
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	00 1c       	adc	r0, r0
    1806:	89 2f       	mov	r24, r25
    1808:	90 2d       	mov	r25, r0
    180a:	c8 2f       	mov	r28, r24
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <fIMU_calcGyro+0x48>
    180e:	c2 e0       	ldi	r28, 0x02	; 2
    1810:	bf 01       	movw	r22, r30
    1812:	ff 0f       	add	r31, r31
    1814:	88 0b       	sbc	r24, r24
    1816:	99 0b       	sbc	r25, r25
    1818:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4c e8       	ldi	r20, 0x8C	; 140
    1822:	50 e4       	ldi	r21, 0x40	; 64
    1824:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    1828:	6b 01       	movw	r12, r22
    182a:	7c 01       	movw	r14, r24
    182c:	6c 2f       	mov	r22, r28
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	c7 01       	movw	r24, r14
    183e:	b6 01       	movw	r22, r12
    1840:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    1850:	cf 91       	pop	r28
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	08 95       	ret

0000185c <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    185c:	8d df       	rcall	.-230    	; 0x1778 <i16IMU_readRawGyroZ>
    185e:	b4 cf       	rjmp	.-152    	; 0x17c8 <fIMU_calcGyro>
    
    return output;
}
    1860:	08 95       	ret

00001862 <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    1862:	ea e0       	ldi	r30, 0x0A	; 10
    1864:	f1 e0       	ldi	r31, 0x01	; 1
    1866:	80 81       	ld	r24, Z
    1868:	87 60       	ori	r24, 0x07	; 7
    186a:	80 83       	st	Z, r24
    186c:	08 95       	ret

0000186e <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	91 05       	cpc	r25, r1
    1872:	31 f4       	brne	.+12     	; 0x1880 <vLED_singleHigh+0x12>
    1874:	eb e0       	ldi	r30, 0x0B	; 11
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	80 81       	ld	r24, Z
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	80 83       	st	Z, r24
    187e:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	31 f4       	brne	.+12     	; 0x1892 <vLED_singleHigh+0x24>
    1886:	eb e0       	ldi	r30, 0x0B	; 11
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	80 81       	ld	r24, Z
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	80 83       	st	Z, r24
    1890:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    1892:	89 2b       	or	r24, r25
    1894:	29 f4       	brne	.+10     	; 0x18a0 <vLED_singleHigh+0x32>
    1896:	eb e0       	ldi	r30, 0x0B	; 11
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	80 81       	ld	r24, Z
    189c:	81 60       	ori	r24, 0x01	; 1
    189e:	80 83       	st	Z, r24
    18a0:	08 95       	ret

000018a2 <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	91 05       	cpc	r25, r1
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <vLED_singleLow+0x12>
    18a8:	eb e0       	ldi	r30, 0x0B	; 11
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	80 81       	ld	r24, Z
    18ae:	8b 7f       	andi	r24, 0xFB	; 251
    18b0:	80 83       	st	Z, r24
    18b2:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	91 05       	cpc	r25, r1
    18b8:	31 f4       	brne	.+12     	; 0x18c6 <vLED_singleLow+0x24>
    18ba:	eb e0       	ldi	r30, 0x0B	; 11
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	80 81       	ld	r24, Z
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	80 83       	st	Z, r24
    18c4:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    18c6:	89 2b       	or	r24, r25
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <vLED_singleLow+0x32>
    18ca:	eb e0       	ldi	r30, 0x0B	; 11
    18cc:	f1 e0       	ldi	r31, 0x01	; 1
    18ce:	80 81       	ld	r24, Z
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	80 83       	st	Z, r24
    18d4:	08 95       	ret

000018d6 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	91 05       	cpc	r25, r1
    18da:	39 f4       	brne	.+14     	; 0x18ea <vLED_toggle+0x14>
    18dc:	eb e0       	ldi	r30, 0x0B	; 11
    18de:	f1 e0       	ldi	r31, 0x01	; 1
    18e0:	90 81       	ld	r25, Z
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	89 27       	eor	r24, r25
    18e6:	80 83       	st	Z, r24
    18e8:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	39 f4       	brne	.+14     	; 0x18fe <vLED_toggle+0x28>
    18f0:	eb e0       	ldi	r30, 0x0B	; 11
    18f2:	f1 e0       	ldi	r31, 0x01	; 1
    18f4:	90 81       	ld	r25, Z
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 27       	eor	r24, r25
    18fa:	80 83       	st	Z, r24
    18fc:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    18fe:	89 2b       	or	r24, r25
    1900:	31 f4       	brne	.+12     	; 0x190e <vLED_toggle+0x38>
    1902:	eb e0       	ldi	r30, 0x0B	; 11
    1904:	f1 e0       	ldi	r31, 0x01	; 1
    1906:	90 81       	ld	r25, Z
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 27       	eor	r24, r25
    190c:	80 83       	st	Z, r24
    190e:	08 95       	ret

00001910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1910:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1912:	03 96       	adiw	r24, 0x03	; 3
    1914:	92 83       	std	Z+2, r25	; 0x02
    1916:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1918:	2f ef       	ldi	r18, 0xFF	; 255
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	34 83       	std	Z+4, r19	; 0x04
    191e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1920:	96 83       	std	Z+6, r25	; 0x06
    1922:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1924:	90 87       	std	Z+8, r25	; 0x08
    1926:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1928:	10 82       	st	Z, r1
    192a:	08 95       	ret

0000192c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    192c:	fc 01       	movw	r30, r24
    192e:	11 86       	std	Z+9, r1	; 0x09
    1930:	10 86       	std	Z+8, r1	; 0x08
    1932:	08 95       	ret

00001934 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	9c 01       	movw	r18, r24
    193a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    193c:	dc 01       	movw	r26, r24
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	cd 91       	ld	r28, X+
    1942:	dc 91       	ld	r29, X
    1944:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1946:	d3 83       	std	Z+3, r29	; 0x03
    1948:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	95 83       	std	Z+5, r25	; 0x05
    1950:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	dc 01       	movw	r26, r24
    1958:	13 96       	adiw	r26, 0x03	; 3
    195a:	7c 93       	st	X, r23
    195c:	6e 93       	st	-X, r22
    195e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1960:	7d 83       	std	Y+5, r23	; 0x05
    1962:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1964:	31 87       	std	Z+9, r19	; 0x09
    1966:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1968:	f9 01       	movw	r30, r18
    196a:	80 81       	ld	r24, Z
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	80 83       	st	Z, r24
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    197c:	48 81       	ld	r20, Y
    197e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1980:	4f 3f       	cpi	r20, 0xFF	; 255
    1982:	2f ef       	ldi	r18, 0xFF	; 255
    1984:	52 07       	cpc	r21, r18
    1986:	21 f4       	brne	.+8      	; 0x1990 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1988:	fc 01       	movw	r30, r24
    198a:	a7 81       	ldd	r26, Z+7	; 0x07
    198c:	b0 85       	ldd	r27, Z+8	; 0x08
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1990:	dc 01       	movw	r26, r24
    1992:	13 96       	adiw	r26, 0x03	; 3
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vListInsert+0x22>
    1996:	df 01       	movw	r26, r30
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	13 97       	sbiw	r26, 0x03	; 3
    19a0:	20 81       	ld	r18, Z
    19a2:	31 81       	ldd	r19, Z+1	; 0x01
    19a4:	42 17       	cp	r20, r18
    19a6:	53 07       	cpc	r21, r19
    19a8:	b0 f7       	brcc	.-20     	; 0x1996 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    19aa:	12 96       	adiw	r26, 0x02	; 2
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	13 97       	sbiw	r26, 0x03	; 3
    19b2:	fb 83       	std	Y+3, r31	; 0x03
    19b4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    19b6:	d5 83       	std	Z+5, r29	; 0x05
    19b8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    19ba:	bd 83       	std	Y+5, r27	; 0x05
    19bc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	dc 93       	st	X, r29
    19c2:	ce 93       	st	-X, r28
    19c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    19c6:	99 87       	std	Y+9, r25	; 0x09
    19c8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 81       	ld	r18, Z
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	20 83       	st	Z, r18
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    19de:	a0 85       	ldd	r26, Z+8	; 0x08
    19e0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    19e2:	c2 81       	ldd	r28, Z+2	; 0x02
    19e4:	d3 81       	ldd	r29, Z+3	; 0x03
    19e6:	84 81       	ldd	r24, Z+4	; 0x04
    19e8:	95 81       	ldd	r25, Z+5	; 0x05
    19ea:	9d 83       	std	Y+5, r25	; 0x05
    19ec:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    19ee:	c4 81       	ldd	r28, Z+4	; 0x04
    19f0:	d5 81       	ldd	r29, Z+5	; 0x05
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	e8 17       	cp	r30, r24
    1a04:	f9 07       	cpc	r31, r25
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a08:	84 81       	ldd	r24, Z+4	; 0x04
    1a0a:	95 81       	ldd	r25, Z+5	; 0x05
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1a14:	11 86       	std	Z+9, r1	; 0x09
    1a16:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1a18:	8c 91       	ld	r24, X
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <vMainCommunicationTask>:
    #define toc PORTH &= ~(1<<PINH5)
#endif

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <vMainCommunicationTask+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <vMainCommunicationTask+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	// Setup for the communication task
	struct sPolar Setpoint = {0}; // Struct for setpoints from server
    1a30:	fe 01       	movw	r30, r28
    1a32:	31 96       	adiw	r30, 0x01	; 1
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	df 01       	movw	r26, r30
    1a38:	1d 92       	st	X+, r1
    1a3a:	8a 95       	dec	r24
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <vMainCommunicationTask+0x14>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    1a3e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    1a42:	a1 2c       	mov	r10, r1
    1a44:	b1 2c       	mov	r11, r1
    1a46:	c1 2c       	mov	r12, r1
    1a48:	d1 2c       	mov	r13, r1
    1a4a:	e1 2c       	mov	r14, r1
    1a4c:	f1 2c       	mov	r15, r1
    1a4e:	03 e0       	ldi	r16, 0x03	; 3
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	48 ec       	ldi	r20, 0xC8	; 200
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	6b e0       	ldi	r22, 0x0B	; 11
    1a5a:	76 e0       	ldi	r23, 0x06	; 6
    1a5c:	85 e2       	ldi	r24, 0x25	; 37
    1a5e:	95 e0       	ldi	r25, 0x05	; 5
    1a60:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <vMainCommunicationTask+0x4a>
		vLED_singleHigh(ledRED);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	00 df       	rcall	.-512    	; 0x186e <vLED_singleHigh>
	}
	uint8_t success = 0;
	
	while(!success) {
		success = server_connect();
    1a6e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <server_connect>
    1a72:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    1a74:	88 ee       	ldi	r24, 0xE8	; 232
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	0e 94 83 25 	call	0x4b06	; 0x4b06 <vTaskDelay>
		vLED_toggle(ledGREEN);
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2a df       	rcall	.-428    	; 0x18d6 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	
	while(!success) {
    1a82:	11 23       	and	r17, r17
    1a84:	a1 f3       	breq	.-24     	; 0x1a6e <vMainCommunicationTask+0x4a>
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	
	send_handshake();
    1a86:	0e 94 66 20 	call	0x40cc	; 0x40cc <send_handshake>
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f7 e6       	ldi	r31, 0x67	; 103
    1a8e:	cf 2e       	mov	r12, r31
    1a90:	fb e1       	ldi	r31, 0x1B	; 27
    1a92:	df 2e       	mov	r13, r31
    1a94:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			debug("Message received: \n");
    1a96:	0f 2e       	mov	r0, r31
    1a98:	ff e0       	ldi	r31, 0x0F	; 15
    1a9a:	8f 2e       	mov	r8, r31
    1a9c:	f6 e0       	ldi	r31, 0x06	; 6
    1a9e:	9f 2e       	mov	r9, r31
    1aa0:	f0 2d       	mov	r31, r0
			debug("Orientation: %i", command_in.message.order.orientation);
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	f3 e2       	ldi	r31, 0x23	; 35
    1aa6:	af 2e       	mov	r10, r31
    1aa8:	f6 e0       	ldi	r31, 0x06	; 6
    1aaa:	bf 2e       	mov	r11, r31
    1aac:	f0 2d       	mov	r31, r0
			debug("Distance: %i", command_in.message.order.distance);
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f3 e3       	ldi	r31, 0x33	; 51
    1ab2:	6f 2e       	mov	r6, r31
    1ab4:	f6 e0       	ldi	r31, 0x06	; 6
    1ab6:	7f 2e       	mov	r7, r31
    1ab8:	f0 2d       	mov	r31, r0
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1aba:	22 24       	eor	r2, r2
    1abc:	23 94       	inc	r2
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
    1abe:	68 94       	set
    1ac0:	44 24       	eor	r4, r4
    1ac2:	46 f8       	bld	r4, 6
    1ac4:	55 24       	eor	r5, r5
    1ac6:	53 94       	inc	r5
	}
	
	send_handshake();
	
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	4f ef       	ldi	r20, 0xFF	; 255
    1acc:	5f ef       	ldi	r21, 0xFF	; 255
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <xCommandReadyBSem>
    1ad6:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <xCommandReadyBSem+0x1>
    1ada:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	99 f7       	brne	.-26     	; 0x1ac8 <vMainCommunicationTask+0xa4>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1ae2:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
			command_in = message_in;
    1aec:	f6 01       	movw	r30, r12
    1aee:	30 80       	ld	r3, Z
    1af0:	01 81       	ldd	r16, Z+1	; 0x01
    1af2:	12 81       	ldd	r17, Z+2	; 0x02
    1af4:	e3 80       	ldd	r14, Z+3	; 0x03
    1af6:	f4 80       	ldd	r15, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1afc:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
			debug("Message received: \n");
    1b00:	9f 92       	push	r9
    1b02:	8f 92       	push	r8
    1b04:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			debug("Orientation: %i", command_in.message.order.orientation);
    1b08:	1f 93       	push	r17
    1b0a:	0f 93       	push	r16
    1b0c:	bf 92       	push	r11
    1b0e:	af 92       	push	r10
    1b10:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			debug("Distance: %i", command_in.message.order.distance);
    1b14:	ff 92       	push	r15
    1b16:	ef 92       	push	r14
    1b18:	7f 92       	push	r7
    1b1a:	6f 92       	push	r6
    1b1c:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			switch(command_in.type){
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	35 e0       	ldi	r19, 0x05	; 5
    1b2c:	33 16       	cp	r3, r19
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <vMainCommunicationTask+0x10e>
    1b30:	6d c0       	rjmp	.+218    	; 0x1c0c <vMainCommunicationTask+0x1e8>
    1b32:	33 15       	cp	r19, r3
    1b34:	40 f0       	brcs	.+16     	; 0x1b46 <vMainCommunicationTask+0x122>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	38 16       	cp	r3, r24
    1b3a:	d1 f0       	breq	.+52     	; 0x1b70 <vMainCommunicationTask+0x14c>
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	39 16       	cp	r3, r25
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <vMainCommunicationTask+0x120>
    1b42:	4a c0       	rjmp	.+148    	; 0x1bd8 <vMainCommunicationTask+0x1b4>
    1b44:	c1 cf       	rjmp	.-126    	; 0x1ac8 <vMainCommunicationTask+0xa4>
    1b46:	a7 e0       	ldi	r26, 0x07	; 7
    1b48:	3a 16       	cp	r3, r26
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <vMainCommunicationTask+0x12a>
    1b4c:	67 c0       	rjmp	.+206    	; 0x1c1c <vMainCommunicationTask+0x1f8>
    1b4e:	3a 16       	cp	r3, r26
    1b50:	20 f0       	brcs	.+8      	; 0x1b5a <vMainCommunicationTask+0x136>
    1b52:	b8 e0       	ldi	r27, 0x08	; 8
    1b54:	3b 16       	cp	r3, r27
    1b56:	49 f0       	breq	.+18     	; 0x1b6a <vMainCommunicationTask+0x146>
    1b58:	b7 cf       	rjmp	.-146    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1b60:	20 92 f2 19 	sts	0x19F2, r2	; 0x8019f2 <gHandshook>
					taskEXIT_CRITICAL();
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63

					break;
    1b68:	af cf       	rjmp	.-162    	; 0x1ac8 <vMainCommunicationTask+0xa4>
					case TYPE_PING:
					send_ping_response();
    1b6a:	0e 94 6f 21 	call	0x42de	; 0x42de <send_ping_response>
					break;
    1b6e:	ac cf       	rjmp	.-168    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
    1b70:	b8 01       	movw	r22, r16
    1b72:	11 0f       	add	r17, r17
    1b74:	88 0b       	sbc	r24, r24
    1b76:	99 0b       	sbc	r25, r25
    1b78:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
    1b7c:	e1 e4       	ldi	r30, 0x41	; 65
    1b7e:	ee 16       	cp	r14, r30
    1b80:	e1 e0       	ldi	r30, 0x01	; 1
    1b82:	fe 06       	cpc	r15, r30
    1b84:	1c f0       	brlt	.+6      	; 0x1b8c <vMainCommunicationTask+0x168>
						Setpoint.distance = 320;
    1b86:	5e 82       	std	Y+6, r5	; 0x06
    1b88:	4d 82       	std	Y+5, r4	; 0x05
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <vMainCommunicationTask+0x180>
					}
					else if (Setpoint.distance < -320){
    1b8c:	f0 ec       	ldi	r31, 0xC0	; 192
    1b8e:	ef 16       	cp	r14, r31
    1b90:	fe ef       	ldi	r31, 0xFE	; 254
    1b92:	ff 06       	cpc	r15, r31
    1b94:	1c f0       	brlt	.+6      	; 0x1b9c <vMainCommunicationTask+0x178>
					case TYPE_PING:
					send_ping_response();
					break;
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
    1b96:	fe 82       	std	Y+6, r15	; 0x06
    1b98:	ed 82       	std	Y+5, r14	; 0x05
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <vMainCommunicationTask+0x180>
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
					}
					else if (Setpoint.distance < -320){
						Setpoint.distance = -320;
    1b9c:	20 ec       	ldi	r18, 0xC0	; 192
    1b9e:	3e ef       	ldi	r19, 0xFE	; 254
    1ba0:	3e 83       	std	Y+6, r19	; 0x06
    1ba2:	2d 83       	std	Y+5, r18	; 0x05
					}
					Setpoint.heading *= DEG2RAD; // Convert received set point to radians
    1ba4:	25 e3       	ldi	r18, 0x35	; 53
    1ba6:	3a ef       	ldi	r19, 0xFA	; 250
    1ba8:	4e e8       	ldi	r20, 0x8E	; 142
    1baa:	5c e3       	ldi	r21, 0x3C	; 60
    1bac:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    1bb0:	69 83       	std	Y+1, r22	; 0x01
    1bb2:	7a 83       	std	Y+2, r23	; 0x02
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
					vFunc_Inf2pi(&Setpoint.heading);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	3b da       	rcall	.-2954   	; 0x1034 <vFunc_Inf2pi>
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	44 e6       	ldi	r20, 0x64	; 100
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	be 01       	movw	r22, r28
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <poseControllerQ>
    1bce:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <poseControllerQ+0x1>
    1bd2:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
					break;
    1bd6:	78 cf       	rjmp	.-272    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_PAUSE:
					// Stop sending update messages
					taskENTER_CRITICAL();
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	0f 92       	push	r0
					gPaused = TRUE;
    1bde:	20 92 f1 19 	sts	0x19F1, r2	; 0x8019f1 <gPaused>
					taskEXIT_CRITICAL();
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.distance = 0;
    1be6:	1e 82       	std	Y+6, r1	; 0x06
    1be8:	1d 82       	std	Y+5, r1	; 0x05
					Setpoint.heading = 0;
    1bea:	19 82       	std	Y+1, r1	; 0x01
    1bec:	1a 82       	std	Y+2, r1	; 0x02
    1bee:	1b 82       	std	Y+3, r1	; 0x03
    1bf0:	1c 82       	std	Y+4, r1	; 0x04
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	44 e6       	ldi	r20, 0x64	; 100
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <poseControllerQ>
    1c02:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <poseControllerQ+0x1>
    1c06:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
					break;
    1c0a:	5e cf       	rjmp	.-324    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	0f 92       	push	r0
					gPaused = FALSE;
    1c12:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <gPaused>
					taskEXIT_CRITICAL();
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
					break;
    1c1a:	56 cf       	rjmp	.-340    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	0f 92       	push	r0
					gHandshook = FALSE;
    1c22:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <gHandshook>
					taskEXIT_CRITICAL();
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
					break;
    1c2a:	4e cf       	rjmp	.-356    	; 0x1ac8 <vMainCommunicationTask+0xa4>

00001c2c <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	1f 92       	push	r1
    1c32:	1f 92       	push	r1
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1c38:	0e 94 2d 29 	call	0x525a	; 0x525a <xTaskGetTickCount>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1c40:	64 e1       	ldi	r22, 0x14	; 20
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <vTaskDelayUntil>
    1c4c:	f9 cf       	rjmp	.-14     	; 0x1c40 <vMainMovementTask+0x14>

00001c4e <vMainSensorTowerTask>:
		} // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2f 97       	sbiw	r28, 0x0f	; 15
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1c62:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1c64:	f1 2c       	mov	r15, r1
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1c66:	33 24       	eor	r3, r3
    1c68:	33 94       	inc	r3
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1c6c:	68 94       	set
    1c6e:	dd 24       	eor	r13, r13
    1c70:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1c72:	68 94       	set
    1c74:	22 24       	eor	r2, r2
    1c76:	22 f8       	bld	r2, 2
    1c78:	0e c0       	rjmp	.+28     	; 0x1c96 <vMainSensorTowerTask+0x48>
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1c7a:	0f 2e       	mov	r0, r31
    1c7c:	f3 e0       	ldi	r31, 0x03	; 3
    1c7e:	df 2e       	mov	r13, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <vMainSensorTowerTask+0x48>
    1c84:	0f 2e       	mov	r0, r31
    1c86:	f3 e0       	ldi	r31, 0x03	; 3
    1c88:	df 2e       	mov	r13, r31
    1c8a:	f0 2d       	mov	r31, r0
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <vMainSensorTowerTask+0x48>
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	f3 e0       	ldi	r31, 0x03	; 3
    1c92:	df 2e       	mov	r13, r31
    1c94:	f0 2d       	mov	r31, r0
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
        // Loop
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1c96:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <gHandshook>
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <vMainSensorTowerTask+0x52>
    1c9e:	06 c1       	rjmp	.+524    	; 0x1eac <vMainSensorTowerTask+0x25e>
    1ca0:	80 91 f1 19 	lds	r24, 0x19F1	; 0x8019f1 <gPaused>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	02 c1       	rjmp	.+516    	; 0x1eac <vMainSensorTowerTask+0x25e>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1ca8:	0e 94 2d 29 	call	0x525a	; 0x525a <xTaskGetTickCount>
    1cac:	9b 83       	std	Y+3, r25	; 0x03
    1cae:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	46 e9       	ldi	r20, 0x96	; 150
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	be 01       	movw	r22, r28
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <scanStatusQ>
    1cc0:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <scanStatusQ+0x1>
    1cc4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	d9 f4       	brne	.+54     	; 0x1d02 <vMainSensorTowerTask+0xb4>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 23       	and	r24, r24
    1cd0:	19 f0       	breq	.+6      	; 0x1cd8 <vMainSensorTowerTask+0x8a>
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	a8 f4       	brcc	.+42     	; 0x1d00 <vMainSensorTowerTask+0xb2>
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <vMainSensorTowerTask+0x9a>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1cd8:	13 9d       	mul	r17, r3
    1cda:	10 2d       	mov	r17, r0
    1cdc:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1cde:	ff 24       	eor	r15, r15
    1ce0:	f3 94       	inc	r15
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1ce2:	33 24       	eor	r3, r3
    1ce4:	33 94       	inc	r3
                        idleCounter = 1;
                    break;
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <vMainSensorTowerTask+0xb4>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1ce8:	8d ec       	ldi	r24, 0xCD	; 205
    1cea:	18 9f       	mul	r17, r24
    1cec:	11 2d       	mov	r17, r1
    1cee:	11 24       	eor	r1, r1
    1cf0:	16 95       	lsr	r17
    1cf2:	16 95       	lsr	r17
                        idleCounter = 0;
    1cf4:	f1 2c       	mov	r15, r1
                        servoResolution = 1;
                        idleCounter = 1;
                    break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1cf6:	0f 2e       	mov	r0, r31
    1cf8:	f5 e0       	ldi	r31, 0x05	; 5
    1cfa:	3f 2e       	mov	r3, r31
    1cfc:	f0 2d       	mov	r31, r0
                        servoStep /= servoResolution;
                        idleCounter = 0;
                    break;
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vMainSensorTowerTask+0xb4>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1d00:	f1 2c       	mov	r15, r1
                    default:
                        idleCounter = 0;
                    break;
                }
            }
            vServo_setAngle(servoStep*servoResolution);
    1d02:	13 9d       	mul	r17, r3
    1d04:	80 2d       	mov	r24, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	0e 94 93 21 	call	0x4326	; 0x4326 <vServo_setAngle>
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point
    1d0c:	68 ec       	ldi	r22, 0xC8	; 200
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	69 d9       	rcall	.-3374   	; 0xfee <ui8DistSens_readCM>
    1d1c:	8e 87       	std	Y+14, r24	; 0x0e
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	66 d9       	rcall	.-3380   	; 0xfee <ui8DistSens_readCM>
    1d22:	e8 2e       	mov	r14, r24
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	63 d9       	rcall	.-3386   	; 0xfee <ui8DistSens_readCM>
    1d28:	c8 2e       	mov	r12, r24
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	60 d9       	rcall	.-3392   	; 0xfee <ui8DistSens_readCM>
    1d2e:	8f 87       	std	Y+15, r24	; 0x0f
    1d30:	20 e0       	ldi	r18, 0x00	; 0
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1d32:	48 e2       	ldi	r20, 0x28	; 40
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    1d3e:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    1d42:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1d46:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <gTheta_hat>
                thetahat = gTheta_hat;
    1d4a:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <gTheta_hat+0x1>
    1d4e:	a0 91 ef 19 	lds	r26, 0x19EF	; 0x8019ef <gTheta_hat+0x2>
    1d52:	b0 91 f0 19 	lds	r27, 0x19F0	; 0x8019f0 <gTheta_hat+0x3>
    1d56:	8a 87       	std	Y+10, r24	; 0x0a
    1d58:	9b 87       	std	Y+11, r25	; 0x0b
    1d5a:	ac 87       	std	Y+12, r26	; 0x0c
    1d5c:	bd 87       	std	Y+13, r27	; 0x0d
    1d5e:	a0 90 eb 19 	lds	r10, 0x19EB	; 0x8019eb <gX_hat>
                xhat = gX_hat;
    1d62:	b0 90 ec 19 	lds	r11, 0x19EC	; 0x8019ec <gX_hat+0x1>
    1d66:	60 90 e9 19 	lds	r6, 0x19E9	; 0x8019e9 <gY_hat>
                yhat = gY_hat;
    1d6a:	70 90 ea 19 	lds	r7, 0x19EA	; 0x8019ea <gY_hat+0x1>
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    1d76:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    1d7a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    1d7e:	9a e0       	ldi	r25, 0x0A	; 10
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1d80:	9f 15       	cp	r25, r15
    1d82:	40 f4       	brcc	.+16     	; 0x1d94 <vMainSensorTowerTask+0x146>
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	81 11       	cpse	r24, r1
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <vMainSensorTowerTask+0x146>
    1d8a:	0e 94 0e 21 	call	0x421c	; 0x421c <send_idle>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1d8e:	ff 24       	eor	r15, r15
                idleCounter = 1;
    1d90:	f3 94       	inc	r15
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d94:	ff 20       	and	r15, r15
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d9e:	f3 94       	inc	r15
                idleCounter++;
    1da0:	43 2c       	mov	r4, r3
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1da2:	51 2c       	mov	r5, r1
    1da4:	14 9d       	mul	r17, r4
    1da6:	40 01       	movw	r8, r0
    1da8:	15 9d       	mul	r17, r5
    1daa:	90 0c       	add	r9, r0
    1dac:	11 24       	eor	r1, r1
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	44 e3       	ldi	r20, 0x34	; 52
    1db4:	53 e4       	ldi	r21, 0x43	; 67
    1db6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1db8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1dba:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dbe:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    1dc2:	2b ed       	ldi	r18, 0xDB	; 219
    1dc4:	3f e0       	ldi	r19, 0x0F	; 15
    1dc6:	49 e4       	ldi	r20, 0x49	; 73
    1dc8:	50 e4       	ldi	r21, 0x40	; 64
    1dca:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    1dce:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    1dd2:	6a 87       	std	Y+10, r22	; 0x0a
    1dd4:	7b 87       	std	Y+11, r23	; 0x0b
    1dd6:	8c 87       	std	Y+12, r24	; 0x0c
    1dd8:	9d 87       	std	Y+13, r25	; 0x0d
    1dda:	c3 01       	movw	r24, r6
    1ddc:	6a e0       	ldi	r22, 0x0A	; 10
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__divmodhi4>
    1de4:	fb 01       	movw	r30, r22
    1de6:	c5 01       	movw	r24, r10
    1de8:	6a e0       	ldi	r22, 0x0A	; 10
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__divmodhi4>
    1df0:	cb 01       	movw	r24, r22
    1df2:	af 84       	ldd	r10, Y+15	; 0x0f
    1df4:	0e 85       	ldd	r16, Y+14	; 0x0e
    1df6:	94 01       	movw	r18, r8
    1df8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dfa:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dfc:	bf 01       	movw	r22, r30
    1dfe:	0e 94 cc 20 	call	0x4198	; 0x4198 <send_update>
    1e02:	af e1       	ldi	r26, 0x1F	; 31
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1e04:	8a 16       	cp	r8, r26
    1e06:	91 04       	cpc	r9, r1
    1e08:	34 f0       	brlt	.+12     	; 0x1e16 <vMainSensorTowerTask+0x1c8>
    1e0a:	bc e3       	ldi	r27, 0x3C	; 60
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1e0c:	8b 16       	cp	r8, r27
    1e0e:	91 04       	cpc	r9, r1
    1e10:	c4 f0       	brlt	.+48     	; 0x1e42 <vMainSensorTowerTask+0x1f4>
    1e12:	af 84       	ldd	r10, Y+15	; 0x0f
    1e14:	ae 86       	std	Y+14, r10	; 0x0e
    1e16:	8e 85       	ldd	r24, Y+14	; 0x0e
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1e18:	81 50       	subi	r24, 0x01	; 1
    1e1a:	83 31       	cpi	r24, 0x13	; 19
    1e1c:	90 f4       	brcc	.+36     	; 0x1e42 <vMainSensorTowerTask+0x1f4>
    1e1e:	1c 82       	std	Y+4, r1	; 0x04
                // Stop controller
                struct sPolar Setpoint = {0, 0};
    1e20:	1d 82       	std	Y+5, r1	; 0x05
    1e22:	1e 82       	std	Y+6, r1	; 0x06
    1e24:	1f 82       	std	Y+7, r1	; 0x07
    1e26:	19 86       	std	Y+9, r1	; 0x09
    1e28:	18 86       	std	Y+8, r1	; 0x08
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1e2c:	44 e6       	ldi	r20, 0x64	; 100
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	be 01       	movw	r22, r28
    1e32:	6c 5f       	subi	r22, 0xFC	; 252
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <poseControllerQ>
    1e3a:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <poseControllerQ+0x1>
    1e3e:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
    1e42:	8b e5       	ldi	r24, 0x5B	; 91
				
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1e44:	88 16       	cp	r8, r24
    1e46:	91 04       	cpc	r9, r1
    1e48:	9c f4       	brge	.+38     	; 0x1e70 <vMainSensorTowerTask+0x222>
    1e4a:	94 e0       	ldi	r25, 0x04	; 4
    1e4c:	d9 12       	cpse	r13, r25
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <vMainSensorTowerTask+0x222>
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <vMainSensorTowerTask+0x20a>
    1e56:	40 c0       	rjmp	.+128    	; 0x1ed8 <vMainSensorTowerTask+0x28a>
    1e58:	1f 5f       	subi	r17, 0xFF	; 255
                servoStep++;
    1e5a:	14 9d       	mul	r17, r4
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e5c:	40 01       	movw	r8, r0
    1e5e:	15 9d       	mul	r17, r5
    1e60:	90 0c       	add	r9, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	aa e5       	ldi	r26, 0x5A	; 90
    1e66:	8a 16       	cp	r8, r26
    1e68:	91 04       	cpc	r9, r1
    1e6a:	0c f0       	brlt	.+2      	; 0x1e6e <vMainSensorTowerTask+0x220>
    1e6c:	06 cf       	rjmp	.-500    	; 0x1c7a <vMainSensorTowerTask+0x2c>
    1e6e:	15 c0       	rjmp	.+42     	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e70:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e72:	19 04       	cpc	r1, r9
    1e74:	34 f5       	brge	.+76     	; 0x1ec2 <vMainSensorTowerTask+0x274>
    1e76:	b3 e0       	ldi	r27, 0x03	; 3
    1e78:	db 12       	cpse	r13, r27
    1e7a:	28 c0       	rjmp	.+80     	; 0x1ecc <vMainSensorTowerTask+0x27e>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <vMainSensorTowerTask+0x236>
    1e82:	09 cf       	rjmp	.-494    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1e84:	11 50       	subi	r17, 0x01	; 1
                servoStep --;
    1e86:	14 9d       	mul	r17, r4
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e88:	40 01       	movw	r8, r0
    1e8a:	15 9d       	mul	r17, r5
    1e8c:	90 0c       	add	r9, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e92:	84 e0       	ldi	r24, 0x04	; 4
    1e94:	d8 16       	cp	r13, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e98:	f5 ce       	rjmp	.-534    	; 0x1c84 <vMainSensorTowerTask+0x36>
    1e9a:	18 14       	cp	r1, r8
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1e9c:	19 04       	cpc	r1, r9
    1e9e:	0c f4       	brge	.+2      	; 0x1ea2 <vMainSensorTowerTask+0x254>
    1ea0:	fa ce       	rjmp	.-524    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	d9 12       	cpse	r13, r25
    1ea6:	f7 ce       	rjmp	.-530    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ea8:	d2 2c       	mov	r13, r2
                rotationDirection = moveCounterClockwise;
    1eaa:	f5 ce       	rjmp	.-534    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1eae:	0e 94 93 21 	call	0x4326	; 0x4326 <vServo_setAngle>
    1eb2:	84 e6       	ldi	r24, 0x64	; 100
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 83 25 	call	0x4b06	; 0x4b06 <vTaskDelay>
    1eba:	f1 2c       	mov	r15, r1
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1ebe:	d2 2c       	mov	r13, r2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1ec0:	ea ce       	rjmp	.-556    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ec2:	aa e5       	ldi	r26, 0x5A	; 90
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1ec4:	8a 16       	cp	r8, r26
    1ec6:	91 04       	cpc	r9, r1
    1ec8:	64 f3       	brlt	.-40     	; 0x1ea2 <vMainSensorTowerTask+0x254>
    1eca:	0a c0       	rjmp	.+20     	; 0x1ee0 <vMainSensorTowerTask+0x292>
    1ecc:	ba e5       	ldi	r27, 0x5A	; 90
    1ece:	8b 16       	cp	r8, r27
    1ed0:	91 04       	cpc	r9, r1
    1ed2:	0c f4       	brge	.+2      	; 0x1ed6 <vMainSensorTowerTask+0x288>
    1ed4:	e0 ce       	rjmp	.-576    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ed6:	dd cf       	rjmp	.-70     	; 0x1e92 <vMainSensorTowerTask+0x244>
    1ed8:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1eda:	19 04       	cpc	r1, r9
    1edc:	bc f3       	brlt	.-18     	; 0x1ecc <vMainSensorTowerTask+0x27e>
    1ede:	f1 cf       	rjmp	.-30     	; 0x1ec2 <vMainSensorTowerTask+0x274>
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1ee2:	d8 16       	cp	r13, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <vMainSensorTowerTask+0x29a>
    1ee6:	d3 ce       	rjmp	.-602    	; 0x1c8e <vMainSensorTowerTask+0x40>
    1ee8:	dc cf       	rjmp	.-72     	; 0x1ea2 <vMainSensorTowerTask+0x254>

00001eea <vMainPoseControllerTask>:
    1eea:	cf 93       	push	r28
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	ab 97       	sbiw	r28, 0x2b	; 43
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    #ifdef DEBUG
        printf("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
    /* Task init */    
    struct sPolar Setpoint = {0}; // Updates from server
    1efe:	fe 01       	movw	r30, r28
    1f00:	31 96       	adiw	r30, 0x01	; 1
    1f02:	86 e0       	ldi	r24, 0x06	; 6
    1f04:	df 01       	movw	r26, r30
    1f06:	1d 92       	st	X+, r1
    1f08:	8a 95       	dec	r24
    1f0a:	e9 f7       	brne	.-6      	; 0x1f06 <vMainPoseControllerTask+0x1c>
    struct sCartesian Error = {0}; // Error values
    struct sPolar oldVal = {0};
    struct sPolar referenceModel = {0};
	float radiusEpsilon = 15; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1f0c:	1f 82       	std	Y+7, r1	; 0x07
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1f0e:	19 86       	std	Y+9, r1	; 0x09
    1f10:	18 86       	std	Y+8, r1	; 0x08
	int16_t rightWheelTicks = 0;
    1f12:	1b 86       	std	Y+11, r1	; 0x0b
    1f14:	1a 86       	std	Y+10, r1	; 0x0a
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1f16:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t gRightWheelDirection = 0;
    1f18:	1d 86       	std	Y+13, r1	; 0x0d
	
	uint8_t idleSendt = FALSE;
    1f1a:	1a 8e       	std	Y+26, r1	; 0x1a
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1f1c:	b1 e0       	ldi	r27, 0x01	; 1
    1f1e:	bb a7       	std	Y+43, r27	; 0x2b
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1f20:	1f a2       	std	Y+39, r1	; 0x27
    1f22:	18 a6       	std	Y+40, r1	; 0x28
    1f24:	19 a6       	std	Y+41, r1	; 0x29
    1f26:	1a a6       	std	Y+42, r1	; 0x2a
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1f28:	1b a2       	std	Y+35, r1	; 0x23
    1f2a:	1c a2       	std	Y+36, r1	; 0x24
    1f2c:	1d a2       	std	Y+37, r1	; 0x25
    1f2e:	1e a2       	std	Y+38, r1	; 0x26
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
	float yTargt = 0;
    1f30:	1f 8e       	std	Y+31, r1	; 0x1f
    1f32:	18 a2       	std	Y+32, r1	; 0x20
    1f34:	19 a2       	std	Y+33, r1	; 0x21
    1f36:	1a a2       	std	Y+34, r1	; 0x22
	int16_t yhat = 0;
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
    1f38:	1b 8e       	std	Y+27, r1	; 0x1b
    1f3a:	1c 8e       	std	Y+28, r1	; 0x1c
    1f3c:	1d 8e       	std	Y+29, r1	; 0x1d
    1f3e:	1e 8e       	std	Y+30, r1	; 0x1e
	
	
      
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1f40:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <gHandshook>
    1f44:	88 23       	and	r24, r24
    1f46:	e1 f3       	breq	.-8      	; 0x1f40 <vMainPoseControllerTask+0x56>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f48:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1f4a:	40 91 f3 19 	lds	r20, 0x19F3	; 0x8019f3 <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1f4e:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1f52:	10 91 f4 19 	lds	r17, 0x19F4	; 0x8019f4 <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1f56:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1f5a:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1f5c:	be 01       	movw	r22, r28
    1f5e:	68 5f       	subi	r22, 0xF8	; 248
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f64:	10 d7       	rcall	.+3616   	; 0x2d86 <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1f66:	41 2f       	mov	r20, r17
    1f68:	be 01       	movw	r22, r28
    1f6a:	66 5f       	subi	r22, 0xF6	; 246
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	21 d7       	rcall	.+3650   	; 0x2db4 <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	80 91 5f 1b 	lds	r24, 0x1B5F	; 0x801b5f <xTickMutex>
    1f80:	90 91 60 1b 	lds	r25, 0x1B60	; 0x801b60 <xTickMutex+0x1>
    1f84:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <gLeftWheelTicks+0x1>
    1f90:	80 93 e5 19 	sts	0x19E5, r24	; 0x8019e5 <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f98:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <gRightWheelTicks+0x1>
    1f9c:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	80 91 5f 1b 	lds	r24, 0x1B5F	; 0x801b5f <xTickMutex>
    1fa8:	90 91 60 1b 	lds	r25, 0x1B60	; 0x801b60 <xTickMutex+0x1>
    1fac:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	4f ef       	ldi	r20, 0xFF	; 255
    1fb4:	5f ef       	ldi	r21, 0xFF	; 255
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	80 91 5d 1b 	lds	r24, 0x1B5D	; 0x801b5d <xControllerBSem>
    1fbe:	90 91 5e 1b 	lds	r25, 0x1B5E	; 0x801b5e <xControllerBSem+0x1>
    1fc2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <vMainPoseControllerTask+0xe2>
    1fca:	ba cf       	rjmp	.-140    	; 0x1f40 <vMainPoseControllerTask+0x56>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	4f ef       	ldi	r20, 0xFF	; 255
    1fd0:	5f ef       	ldi	r21, 0xFF	; 255
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    1fda:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    1fde:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1fe2:	40 90 ed 19 	lds	r4, 0x19ED	; 0x8019ed <gTheta_hat>
    1fe6:	50 90 ee 19 	lds	r5, 0x19EE	; 0x8019ee <gTheta_hat+0x1>
    1fea:	60 90 ef 19 	lds	r6, 0x19EF	; 0x8019ef <gTheta_hat+0x2>
    1fee:	70 90 f0 19 	lds	r7, 0x19F0	; 0x8019f0 <gTheta_hat+0x3>
					xhat = gX_hat;
    1ff2:	00 91 eb 19 	lds	r16, 0x19EB	; 0x8019eb <gX_hat>
    1ff6:	10 91 ec 19 	lds	r17, 0x19EC	; 0x8019ec <gX_hat+0x1>
					yhat = gY_hat;
    1ffa:	20 90 e9 19 	lds	r2, 0x19E9	; 0x8019e9 <gY_hat>
    1ffe:	30 90 ea 19 	lds	r3, 0x19EA	; 0x8019ea <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    200a:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    200e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	be 01       	movw	r22, r28
    201a:	6f 5f       	subi	r22, 0xFF	; 255
    201c:	7f 4f       	sbci	r23, 0xFF	; 255
    201e:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <poseControllerQ>
    2022:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <poseControllerQ+0x1>
    2026:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	09 f0       	breq	.+2      	; 0x2030 <vMainPoseControllerTask+0x146>
    202e:	73 c0       	rjmp	.+230    	; 0x2116 <vMainPoseControllerTask+0x22c>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	44 e1       	ldi	r20, 0x14	; 20
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	be 01       	movw	r22, r28
    2038:	6f 5f       	subi	r22, 0xFF	; 255
    203a:	7f 4f       	sbci	r23, 0xFF	; 255
    203c:	80 91 f9 19 	lds	r24, 0x19F9	; 0x8019f9 <poseControllerQ>
    2040:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <poseControllerQ+0x1>
    2044:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
					Setpoint.distance = Setpoint.distance*10; //Distance is received in cm, convert to mm for continuity
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	bc 01       	movw	r22, r24
    204e:	66 0f       	add	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	68 0f       	add	r22, r24
    2060:	79 1f       	adc	r23, r25
    2062:	7e 83       	std	Y+6, r23	; 0x06
    2064:	6d 83       	std	Y+5, r22	; 0x05
					
					
					
					xTargt = xhat + Setpoint.distance*cos(Setpoint.heading + thetahat);
    2066:	07 2e       	mov	r0, r23
    2068:	00 0c       	add	r0, r0
    206a:	88 0b       	sbc	r24, r24
    206c:	99 0b       	sbc	r25, r25
    206e:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    2072:	6a 8b       	std	Y+18, r22	; 0x12
    2074:	7b 8b       	std	Y+19, r23	; 0x13
    2076:	8c 8b       	std	Y+20, r24	; 0x14
    2078:	9d 8b       	std	Y+21, r25	; 0x15
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	4b 81       	ldd	r20, Y+3	; 0x03
    2080:	5c 81       	ldd	r21, Y+4	; 0x04
    2082:	c3 01       	movw	r24, r6
    2084:	b2 01       	movw	r22, r4
    2086:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    208a:	6b 01       	movw	r12, r22
    208c:	7c 01       	movw	r14, r24
    208e:	0e 94 29 31 	call	0x6252	; 0x6252 <cos>
    2092:	6e 8b       	std	Y+22, r22	; 0x16
    2094:	7f 8b       	std	Y+23, r23	; 0x17
    2096:	88 8f       	std	Y+24, r24	; 0x18
    2098:	99 8f       	std	Y+25, r25	; 0x19
    209a:	b8 01       	movw	r22, r16
    209c:	01 2e       	mov	r0, r17
    209e:	00 0c       	add	r0, r0
    20a0:	88 0b       	sbc	r24, r24
    20a2:	99 0b       	sbc	r25, r25
    20a4:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    20a8:	4b 01       	movw	r8, r22
    20aa:	5c 01       	movw	r10, r24
    20ac:	2e 89       	ldd	r18, Y+22	; 0x16
    20ae:	3f 89       	ldd	r19, Y+23	; 0x17
    20b0:	48 8d       	ldd	r20, Y+24	; 0x18
    20b2:	59 8d       	ldd	r21, Y+25	; 0x19
    20b4:	6a 89       	ldd	r22, Y+18	; 0x12
    20b6:	7b 89       	ldd	r23, Y+19	; 0x13
    20b8:	8c 89       	ldd	r24, Y+20	; 0x14
    20ba:	9d 89       	ldd	r25, Y+21	; 0x15
    20bc:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	c5 01       	movw	r24, r10
    20c6:	b4 01       	movw	r22, r8
    20c8:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    20cc:	6b 8f       	std	Y+27, r22	; 0x1b
    20ce:	7c 8f       	std	Y+28, r23	; 0x1c
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	9e 8f       	std	Y+30, r25	; 0x1e
					yTargt = yhat + Setpoint.distance*sin(Setpoint.heading + thetahat);
    20d4:	c7 01       	movw	r24, r14
    20d6:	b6 01       	movw	r22, r12
    20d8:	0e 94 43 33 	call	0x6686	; 0x6686 <sin>
    20dc:	4b 01       	movw	r8, r22
    20de:	5c 01       	movw	r10, r24
    20e0:	b1 01       	movw	r22, r2
    20e2:	03 2c       	mov	r0, r3
    20e4:	00 0c       	add	r0, r0
    20e6:	88 0b       	sbc	r24, r24
    20e8:	99 0b       	sbc	r25, r25
    20ea:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    20ee:	6b 01       	movw	r12, r22
    20f0:	7c 01       	movw	r14, r24
    20f2:	a5 01       	movw	r20, r10
    20f4:	94 01       	movw	r18, r8
    20f6:	6a 89       	ldd	r22, Y+18	; 0x12
    20f8:	7b 89       	ldd	r23, Y+19	; 0x13
    20fa:	8c 89       	ldd	r24, Y+20	; 0x14
    20fc:	9d 89       	ldd	r25, Y+21	; 0x15
    20fe:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	c7 01       	movw	r24, r14
    2108:	b6 01       	movw	r22, r12
    210a:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    210e:	6f 8f       	std	Y+31, r22	; 0x1f
    2110:	78 a3       	std	Y+32, r23	; 0x20
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	9a a3       	std	Y+34, r25	; 0x22
					
					
				
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    2116:	b8 01       	movw	r22, r16
    2118:	11 0f       	add	r17, r17
    211a:	88 0b       	sbc	r24, r24
    211c:	99 0b       	sbc	r25, r25
    211e:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2128:	7c 8d       	ldd	r23, Y+28	; 0x1c
    212a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2132:	6a 8b       	std	Y+18, r22	; 0x12
    2134:	7b 8b       	std	Y+19, r23	; 0x13
    2136:	8c 8b       	std	Y+20, r24	; 0x14
    2138:	9d 8b       	std	Y+21, r25	; 0x15
    213a:	b1 01       	movw	r22, r2
    213c:	33 0c       	add	r3, r3
    213e:	88 0b       	sbc	r24, r24
    2140:	99 0b       	sbc	r25, r25
    2142:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    2146:	9b 01       	movw	r18, r22
    2148:	ac 01       	movw	r20, r24
    214a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    214c:	78 a1       	ldd	r23, Y+32	; 0x20
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2156:	6b 01       	movw	r12, r22
    2158:	7c 01       	movw	r14, r24
    215a:	2a 89       	ldd	r18, Y+18	; 0x12
    215c:	3b 89       	ldd	r19, Y+19	; 0x13
    215e:	4c 89       	ldd	r20, Y+20	; 0x14
    2160:	5d 89       	ldd	r21, Y+21	; 0x15
    2162:	ca 01       	movw	r24, r20
    2164:	b9 01       	movw	r22, r18
    2166:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    216a:	4b 01       	movw	r8, r22
    216c:	5c 01       	movw	r10, r24
    216e:	a7 01       	movw	r20, r14
    2170:	96 01       	movw	r18, r12
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    217a:	6e 8b       	std	Y+22, r22	; 0x16
    217c:	7f 8b       	std	Y+23, r23	; 0x17
    217e:	88 8f       	std	Y+24, r24	; 0x18
    2180:	99 8f       	std	Y+25, r25	; 0x19
    2182:	2e 89       	ldd	r18, Y+22	; 0x16
    2184:	3f 89       	ldd	r19, Y+23	; 0x17
    2186:	48 8d       	ldd	r20, Y+24	; 0x18
    2188:	59 8d       	ldd	r21, Y+25	; 0x19
    218a:	c5 01       	movw	r24, r10
    218c:	b4 01       	movw	r22, r8
    218e:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2192:	0e 94 4d 33 	call	0x669a	; 0x669a <sqrt>
    2196:	4b 01       	movw	r8, r22
    2198:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 25 31 	call	0x624a	; 0x624a <__cmpsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	c4 f4       	brge	.+48     	; 0x21da <vMainPoseControllerTask+0x2f0>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	48 e8       	ldi	r20, 0x88	; 136
    21b0:	52 e4       	ldi	r21, 0x42	; 66
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	53 e4       	ldi	r21, 0x43	; 67
    21c2:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	52 e4       	ldi	r21, 0x42	; 66
    21ce:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    21d2:	0e 94 99 31 	call	0x6332	; 0x6332 <__fixunssfsi>
    21d6:	06 2f       	mov	r16, r22
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <vMainPoseControllerTask+0x2f2>
				}else{
					currentDriveActuation = maxDriveActuation;
    21da:	04 e6       	ldi	r16, 0x64	; 100
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e7       	ldi	r20, 0x70	; 112
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	c5 01       	movw	r24, r10
    21e6:	b4 01       	movw	r22, r8
    21e8:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <vMainPoseControllerTask+0x308>
    21f0:	4e c1       	rjmp	.+668    	; 0x248e <__stack+0x28f>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    21f2:	2a 89       	ldd	r18, Y+18	; 0x12
    21f4:	3b 89       	ldd	r19, Y+19	; 0x13
    21f6:	4c 89       	ldd	r20, Y+20	; 0x14
    21f8:	5d 89       	ldd	r21, Y+21	; 0x15
    21fa:	c7 01       	movw	r24, r14
    21fc:	b6 01       	movw	r22, r12
    21fe:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    2202:	a3 01       	movw	r20, r6
    2204:	92 01       	movw	r18, r4
    2206:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    220a:	6e 87       	std	Y+14, r22	; 0x0e
    220c:	7f 87       	std	Y+15, r23	; 0x0f
    220e:	88 8b       	std	Y+16, r24	; 0x10
    2210:	99 8b       	std	Y+17, r25	; 0x11
					vFunc_Inf2pi(&thetaDiff);
    2212:	ce 01       	movw	r24, r28
    2214:	0e 96       	adiw	r24, 0x0e	; 14
    2216:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    221a:	4e 84       	ldd	r4, Y+14	; 0x0e
    221c:	5f 84       	ldd	r5, Y+15	; 0x0f
    221e:	68 88       	ldd	r6, Y+16	; 0x10
    2220:	79 88       	ldd	r7, Y+17	; 0x11
    2222:	53 01       	movw	r10, r6
    2224:	42 01       	movw	r8, r4
    2226:	e8 94       	clt
    2228:	b7 f8       	bld	r11, 7
    222a:	29 e1       	ldi	r18, 0x19	; 25
    222c:	34 e0       	ldi	r19, 0x04	; 4
    222e:	46 e0       	ldi	r20, 0x06	; 6
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	c5 01       	movw	r24, r10
    2234:	b4 01       	movw	r22, r8
    2236:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f4       	brge	.+2      	; 0x2240 <__stack+0x41>
    223e:	ac c0       	rjmp	.+344    	; 0x2398 <__stack+0x199>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    2240:	22 e7       	ldi	r18, 0x72	; 114
    2242:	3a e8       	ldi	r19, 0x8A	; 138
    2244:	4e e8       	ldi	r20, 0x8E	; 142
    2246:	5c e3       	ldi	r21, 0x3C	; 60
    2248:	c5 01       	movw	r24, r10
    224a:	b4 01       	movw	r22, r8
    224c:	0e 94 25 31 	call	0x624a	; 0x624a <__cmpsf2>
    2250:	88 23       	and	r24, r24
    2252:	24 f0       	brlt	.+8      	; 0x225c <__stack+0x5d>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	81 11       	cpse	r24, r1
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <__stack+0x61>
    225a:	9e c0       	rjmp	.+316    	; 0x2398 <__stack+0x199>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    225c:	a1 e0       	ldi	r26, 0x01	; 1
    225e:	ab a7       	std	Y+43, r26	; 0x2b
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	c3 01       	movw	r24, r6
    2268:	b2 01       	movw	r22, r4
    226a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    226e:	88 23       	and	r24, r24
    2270:	bc f1       	brlt	.+110    	; 0x22e0 <__stack+0xe1>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    2272:	10 e0       	ldi	r17, 0x00	; 0
    2274:	b8 01       	movw	r22, r16
    2276:	01 2e       	mov	r0, r17
    2278:	00 0c       	add	r0, r0
    227a:	88 0b       	sbc	r24, r24
    227c:	99 0b       	sbc	r25, r25
    227e:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    2282:	6b 01       	movw	r12, r22
    2284:	7c 01       	movw	r14, r24
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	46 e1       	ldi	r20, 0x16	; 22
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	c5 01       	movw	r24, r10
    2290:	b4 01       	movw	r22, r8
    2292:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	c7 01       	movw	r24, r14
    229c:	b6 01       	movw	r22, r12
    229e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    22a2:	6b 01       	movw	r12, r22
    22a4:	7c 01       	movw	r14, r24
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    22ba:	9b 01       	movw	r18, r22
    22bc:	ac 01       	movw	r20, r24
    22be:	c7 01       	movw	r24, r14
    22c0:	b6 01       	movw	r22, r12
    22c2:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    22c6:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    22ca:	06 17       	cp	r16, r22
    22cc:	17 07       	cpc	r17, r23
    22ce:	0c f4       	brge	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	41 c0       	rjmp	.+130    	; 0x2354 <__stack+0x155>
    22d2:	7b 01       	movw	r14, r22
    22d4:	77 23       	and	r23, r23
    22d6:	0c f0       	brlt	.+2      	; 0x22da <__stack+0xdb>
    22d8:	40 c0       	rjmp	.+128    	; 0x235a <__stack+0x15b>
    22da:	e1 2c       	mov	r14, r1
    22dc:	f1 2c       	mov	r15, r1
    22de:	3d c0       	rjmp	.+122    	; 0x235a <__stack+0x15b>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    22e0:	e0 2e       	mov	r14, r16
    22e2:	f1 2c       	mov	r15, r1
    22e4:	b7 01       	movw	r22, r14
    22e6:	0f 2c       	mov	r0, r15
    22e8:	00 0c       	add	r0, r0
    22ea:	88 0b       	sbc	r24, r24
    22ec:	99 0b       	sbc	r25, r25
    22ee:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    22f2:	6a 8b       	std	Y+18, r22	; 0x12
    22f4:	7b 8b       	std	Y+19, r23	; 0x13
    22f6:	8c 8b       	std	Y+20, r24	; 0x14
    22f8:	9d 8b       	std	Y+21, r25	; 0x15
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	46 e1       	ldi	r20, 0x16	; 22
    2300:	54 e4       	ldi	r21, 0x44	; 68
    2302:	c5 01       	movw	r24, r10
    2304:	b4 01       	movw	r22, r8
    2306:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	6a 89       	ldd	r22, Y+18	; 0x12
    2310:	7b 89       	ldd	r23, Y+19	; 0x13
    2312:	8c 89       	ldd	r24, Y+20	; 0x14
    2314:	9d 89       	ldd	r25, Y+21	; 0x15
    2316:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    231a:	4b 01       	movw	r8, r22
    231c:	5c 01       	movw	r10, r24
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	c5 01       	movw	r24, r10
    2338:	b4 01       	movw	r22, r8
    233a:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    233e:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    2342:	e6 16       	cp	r14, r22
    2344:	f7 06       	cpc	r15, r23
    2346:	44 f0       	brlt	.+16     	; 0x2358 <__stack+0x159>
    2348:	8b 01       	movw	r16, r22
    234a:	77 23       	and	r23, r23
    234c:	34 f4       	brge	.+12     	; 0x235a <__stack+0x15b>
    234e:	00 e0       	ldi	r16, 0x00	; 0
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	03 c0       	rjmp	.+6      	; 0x235a <__stack+0x15b>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    2354:	78 01       	movw	r14, r16
    2356:	01 c0       	rjmp	.+2      	; 0x235a <__stack+0x15b>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    2358:	87 01       	movw	r16, r14
							
							
							
						}
						
						leftIntError += thetaDiff;
    235a:	a3 01       	movw	r20, r6
    235c:	92 01       	movw	r18, r4
    235e:	6b a1       	ldd	r22, Y+35	; 0x23
    2360:	7c a1       	ldd	r23, Y+36	; 0x24
    2362:	8d a1       	ldd	r24, Y+37	; 0x25
    2364:	9e a1       	ldd	r25, Y+38	; 0x26
    2366:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    236a:	6b a3       	std	Y+35, r22	; 0x23
    236c:	7c a3       	std	Y+36, r23	; 0x24
    236e:	8d a3       	std	Y+37, r24	; 0x25
    2370:	9e a3       	std	Y+38, r25	; 0x26
						rightIntError -= thetaDiff;
    2372:	a3 01       	movw	r20, r6
    2374:	92 01       	movw	r18, r4
    2376:	6f a1       	ldd	r22, Y+39	; 0x27
    2378:	78 a5       	ldd	r23, Y+40	; 0x28
    237a:	89 a5       	ldd	r24, Y+41	; 0x29
    237c:	9a a5       	ldd	r25, Y+42	; 0x2a
    237e:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2382:	6f a3       	std	Y+39, r22	; 0x27
    2384:	78 a7       	std	Y+40, r23	; 0x28
    2386:	89 a7       	std	Y+41, r24	; 0x29
    2388:	9a a7       	std	Y+42, r25	; 0x2a
						
						
						gRightWheelDirection = motorRightForward;
    238a:	b6 e0       	ldi	r27, 0x06	; 6
    238c:	bd 87       	std	Y+13, r27	; 0x0d
						gLeftWheelDirection = motorLeftForward;
    238e:	84 e0       	ldi	r24, 0x04	; 4
    2390:	8c 87       	std	Y+12, r24	; 0x0c
						lastMovement = moveForward;
    2392:	a1 e0       	ldi	r26, 0x01	; 1
    2394:	af 83       	std	Y+7, r26	; 0x07
    2396:	70 c0       	rjmp	.+224    	; 0x2478 <__stack+0x279>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	c3 01       	movw	r24, r6
    23a0:	b2 01       	movw	r22, r4
    23a2:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    23a6:	88 23       	and	r24, r24
    23a8:	a4 f1       	brlt	.+104    	; 0x2412 <__stack+0x213>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    23aa:	2e ea       	ldi	r18, 0xAE	; 174
    23ac:	37 e4       	ldi	r19, 0x47	; 71
    23ae:	41 e6       	ldi	r20, 0x61	; 97
    23b0:	5e e3       	ldi	r21, 0x3E	; 62
    23b2:	c5 01       	movw	r24, r10
    23b4:	b4 01       	movw	r22, r8
    23b6:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    23ba:	2a e9       	ldi	r18, 0x9A	; 154
    23bc:	39 e9       	ldi	r19, 0x99	; 153
    23be:	49 e9       	ldi	r20, 0x99	; 153
    23c0:	5e e3       	ldi	r21, 0x3E	; 62
    23c2:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    23c6:	4b 01       	movw	r8, r22
    23c8:	5c 01       	movw	r10, r24
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	46 e9       	ldi	r20, 0x96	; 150
    23d0:	52 ec       	ldi	r21, 0xC2	; 194
    23d2:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    23d6:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    23da:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftBackward;
    23dc:	b5 e0       	ldi	r27, 0x05	; 5
    23de:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	46 e9       	ldi	r20, 0x96	; 150
    23e6:	52 e4       	ldi	r21, 0x42	; 66
    23e8:	c5 01       	movw	r24, r10
    23ea:	b4 01       	movw	r22, r8
    23ec:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    23f0:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    23f4:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightForward;
    23f6:	86 e0       	ldi	r24, 0x06	; 6
    23f8:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveCounterClockwise;
    23fa:	a4 e0       	ldi	r26, 0x04	; 4
    23fc:	af 83       	std	Y+7, r26	; 0x07
    23fe:	1b a6       	std	Y+43, r1	; 0x2b
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2400:	1f a2       	std	Y+39, r1	; 0x27
    2402:	18 a6       	std	Y+40, r1	; 0x28
    2404:	19 a6       	std	Y+41, r1	; 0x29
    2406:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2408:	1b a2       	std	Y+35, r1	; 0x23
    240a:	1c a2       	std	Y+36, r1	; 0x24
    240c:	1d a2       	std	Y+37, r1	; 0x25
    240e:	1e a2       	std	Y+38, r1	; 0x26
    2410:	33 c0       	rjmp	.+102    	; 0x2478 <__stack+0x279>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2412:	2e ea       	ldi	r18, 0xAE	; 174
    2414:	37 e4       	ldi	r19, 0x47	; 71
    2416:	41 e6       	ldi	r20, 0x61	; 97
    2418:	5e e3       	ldi	r21, 0x3E	; 62
    241a:	c5 01       	movw	r24, r10
    241c:	b4 01       	movw	r22, r8
    241e:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2422:	2a e9       	ldi	r18, 0x9A	; 154
    2424:	39 e9       	ldi	r19, 0x99	; 153
    2426:	49 e9       	ldi	r20, 0x99	; 153
    2428:	5e e3       	ldi	r21, 0x3E	; 62
    242a:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    242e:	4b 01       	movw	r8, r22
    2430:	5c 01       	movw	r10, r24
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	46 e9       	ldi	r20, 0x96	; 150
    2438:	52 e4       	ldi	r21, 0x42	; 66
    243a:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    243e:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    2442:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftForward;
    2444:	b4 e0       	ldi	r27, 0x04	; 4
    2446:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	46 e9       	ldi	r20, 0x96	; 150
    244e:	52 ec       	ldi	r21, 0xC2	; 194
    2450:	c5 01       	movw	r24, r10
    2452:	b4 01       	movw	r22, r8
    2454:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2458:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    245c:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightBackward;
    245e:	85 e0       	ldi	r24, 0x05	; 5
    2460:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveClockwise;
    2462:	a3 e0       	ldi	r26, 0x03	; 3
    2464:	af 83       	std	Y+7, r26	; 0x07
    2466:	1b a6       	std	Y+43, r1	; 0x2b
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2468:	1f a2       	std	Y+39, r1	; 0x27
    246a:	18 a6       	std	Y+40, r1	; 0x28
    246c:	19 a6       	std	Y+41, r1	; 0x29
    246e:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2470:	1b a2       	std	Y+35, r1	; 0x23
    2472:	1c a2       	std	Y+36, r1	; 0x24
    2474:	1d a2       	std	Y+37, r1	; 0x25
    2476:	1e a2       	std	Y+38, r1	; 0x26
					
					
					
					
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    2478:	9e 01       	movw	r18, r28
    247a:	23 5f       	subi	r18, 0xF3	; 243
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	ae 01       	movw	r20, r28
    2480:	44 5f       	subi	r20, 0xF4	; 244
    2482:	5f 4f       	sbci	r21, 0xFF	; 255
    2484:	b8 01       	movw	r22, r16
    2486:	c7 01       	movw	r24, r14
    2488:	57 d4       	rcall	.+2222   	; 0x2d38 <vMotorMovementSwitch>
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    248a:	1a 8e       	std	Y+26, r1	; 0x1a
    248c:	0a c0       	rjmp	.+20     	; 0x24a2 <__stack+0x2a3>
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    248e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2490:	b1 11       	cpse	r27, r1
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__stack+0x29d>
						send_idle();
    2494:	0e 94 0e 21 	call	0x421c	; 0x421c <send_idle>
						idleSendt = TRUE;
					}
					
					
					vMotorBrakeLeft();
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	8a 8f       	std	Y+26, r24	; 0x1a
					vMotorBrakeRight();
    249c:	39 d4       	rcall	.+2162   	; 0x2d10 <vMotorBrakeLeft>
    249e:	3d d4       	rcall	.+2170   	; 0x2d1a <vMotorBrakeRight>
					lastMovement = moveStop;
    24a0:	1f 82       	std	Y+7, r1	; 0x07
				}
				
				
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	69 5f       	subi	r22, 0xF9	; 249
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	80 91 f7 19 	lds	r24, 0x19F7	; 0x8019f7 <scanStatusQ>
    24b2:	90 91 f8 19 	lds	r25, 0x19F8	; 0x8019f8 <scanStatusQ+0x1>
    24b6:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
    24ba:	42 cd       	rjmp	.-1404   	; 0x1f40 <vMainPoseControllerTask+0x56>

000024bc <vMainPoseEstimatorTask>:
	  
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	e1 97       	sbiw	r28, 0x31	; 49
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    24d0:	19 82       	std	Y+1, r1	; 0x01
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	1b 82       	std	Y+3, r1	; 0x03
    24d6:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    24d8:	0e 94 2d 29 	call	0x525a	; 0x525a <xTaskGetTickCount>
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    24e0:	1d a6       	std	Y+45, r1	; 0x2d
    24e2:	1e a6       	std	Y+46, r1	; 0x2e
    24e4:	1f a6       	std	Y+47, r1	; 0x2f
    24e6:	18 aa       	std	Y+48, r1	; 0x30
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    float compassOffset = 0.0;
    24e8:	19 a2       	std	Y+33, r1	; 0x21
    24ea:	1a a2       	std	Y+34, r1	; 0x22
    24ec:	1b a2       	std	Y+35, r1	; 0x23
    24ee:	1c a2       	std	Y+36, r1	; 0x24
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    24f0:	1d 8e       	std	Y+29, r1	; 0x1d
    24f2:	1e 8e       	std	Y+30, r1	; 0x1e
    24f4:	1f 8e       	std	Y+31, r1	; 0x1f
    24f6:	18 a2       	std	Y+32, r1	; 0x20
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    24f8:	1d 8a       	std	Y+21, r1	; 0x15
    24fa:	1e 8a       	std	Y+22, r1	; 0x16
    24fc:	1f 8a       	std	Y+23, r1	; 0x17
    24fe:	18 8e       	std	Y+24, r1	; 0x18
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    2500:	19 8a       	std	Y+17, r1	; 0x11
    2502:	1a 8a       	std	Y+18, r1	; 0x12
    2504:	1b 8a       	std	Y+19, r1	; 0x13
    2506:	1c 8a       	std	Y+20, r1	; 0x14
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    2508:	61 2c       	mov	r6, r1
    250a:	71 2c       	mov	r7, r1
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    250c:	1a 8e       	std	Y+26, r1	; 0x1a
    250e:	19 8e       	std	Y+25, r1	; 0x19
    2510:	41 2c       	mov	r4, r1
    2512:	31 2c       	mov	r3, r1
    2514:	21 2c       	mov	r2, r1
    2516:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    2518:	68 e2       	ldi	r22, 0x28	; 40
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	ce 01       	movw	r24, r28
    251e:	05 96       	adiw	r24, 0x05	; 5
    2520:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    2524:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <gHandshook>
    2528:	88 23       	and	r24, r24
    252a:	09 f4       	brne	.+2      	; 0x252e <vMainPoseEstimatorTask+0x72>
    252c:	f0 c1       	rjmp	.+992    	; 0x290e <vMainPoseEstimatorTask+0x452>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	4f e0       	ldi	r20, 0x0F	; 15
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	80 91 5f 1b 	lds	r24, 0x1B5F	; 0x801b5f <xTickMutex>
    253c:	90 91 60 1b 	lds	r25, 0x1B60	; 0x801b60 <xTickMutex+0x1>
    2540:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    2544:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <gLeftWheelTicks>
    2548:	90 91 e6 19 	lds	r25, 0x19E6	; 0x8019e6 <gLeftWheelTicks+0x1>
    254c:	9e a3       	std	Y+38, r25	; 0x26
    254e:	8d a3       	std	Y+37, r24	; 0x25
                rightWheelTicks = gRightWheelTicks;
    2550:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <gRightWheelTicks>
    2554:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <gRightWheelTicks+0x1>
    2558:	98 a7       	std	Y+40, r25	; 0x28
    255a:	8f a3       	std	Y+39, r24	; 0x27
            xSemaphoreGive(xTickMutex);
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	80 91 5f 1b 	lds	r24, 0x1B5F	; 0x801b5f <xTickMutex>
    2564:	90 91 60 1b 	lds	r25, 0x1B60	; 0x801b60 <xTickMutex+0x1>
    2568:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    256c:	6d a1       	ldd	r22, Y+37	; 0x25
    256e:	7e a1       	ldd	r23, Y+38	; 0x26
    2570:	89 8d       	ldd	r24, Y+25	; 0x19
    2572:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2574:	68 1b       	sub	r22, r24
    2576:	79 0b       	sbc	r23, r25
    2578:	07 2e       	mov	r0, r23
    257a:	00 0c       	add	r0, r0
    257c:	88 0b       	sbc	r24, r24
    257e:	99 0b       	sbc	r25, r25
    2580:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    2584:	28 ef       	ldi	r18, 0xF8	; 248
    2586:	33 e5       	ldi	r19, 0x53	; 83
    2588:	43 e2       	ldi	r20, 0x23	; 35
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2590:	4b 01       	movw	r8, r22
    2592:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    2594:	6f a1       	ldd	r22, Y+39	; 0x27
    2596:	78 a5       	ldd	r23, Y+40	; 0x28
    2598:	66 19       	sub	r22, r6
    259a:	77 09       	sbc	r23, r7
    259c:	07 2e       	mov	r0, r23
    259e:	00 0c       	add	r0, r0
    25a0:	88 0b       	sbc	r24, r24
    25a2:	99 0b       	sbc	r25, r25
    25a4:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    25a8:	28 ef       	ldi	r18, 0xF8	; 248
    25aa:	33 e5       	ldi	r19, 0x53	; 83
    25ac:	43 e2       	ldi	r20, 0x23	; 35
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    25b4:	6b 01       	movw	r12, r22
    25b6:	7c 01       	movw	r14, r24
            
			
			
					   
					   
            float dRobot = (dLeft + dRight) / 2;           
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	c5 01       	movw	r24, r10
    25be:	b4 01       	movw	r22, r8
    25c0:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    25d0:	69 8f       	std	Y+25, r22	; 0x19
    25d2:	7a 8f       	std	Y+26, r23	; 0x1a
    25d4:	8b 8f       	std	Y+27, r24	; 0x1b
    25d6:	9c 8f       	std	Y+28, r25	; 0x1c
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    25d8:	a5 01       	movw	r20, r10
    25da:	94 01       	movw	r18, r8
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	43 e1       	ldi	r20, 0x13	; 19
    25ea:	53 e4       	ldi	r21, 0x43	; 67
    25ec:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    25f0:	4b 01       	movw	r8, r22
    25f2:	5c 01       	movw	r10, r24
			
			
            
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    25f4:	33 d9       	rcall	.-3482   	; 0x185c <fIMU_readFloatGyroZ>
    25f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    25f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    25fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    25fc:	58 a1       	ldd	r21, Y+32	; 0x20
    25fe:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2602:	6b 01       	movw	r12, r22
    2604:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    2606:	9f 77       	andi	r25, 0x7F	; 127
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 25 31 	call	0x624a	; 0x624a <__cmpsf2>
    2614:	88 23       	and	r24, r24
    2616:	6c f0       	brlt	.+26     	; 0x2632 <vMainPoseEstimatorTask+0x176>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	99 ab       	std	Y+49, r25	; 0x31
                gyroWeight = 0.85; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders
    261c:	1a e9       	ldi	r17, 0x9A	; 154
    261e:	09 e9       	ldi	r16, 0x99	; 153
    2620:	0f 2e       	mov	r0, r31
    2622:	f9 e5       	ldi	r31, 0x59	; 89
    2624:	7f 2e       	mov	r7, r31
    2626:	f0 2d       	mov	r31, r0
    2628:	0f 2e       	mov	r0, r31
    262a:	ff e3       	ldi	r31, 0x3F	; 63
    262c:	6f 2e       	mov	r6, r31
    262e:	f0 2d       	mov	r31, r0
    2630:	05 c0       	rjmp	.+10     	; 0x263c <vMainPoseEstimatorTask+0x180>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    2632:	19 aa       	std	Y+49, r1	; 0x31
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    2634:	14 2d       	mov	r17, r4
    2636:	03 2d       	mov	r16, r3
    2638:	72 2c       	mov	r7, r2
    263a:	65 2c       	mov	r6, r5
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
            
			
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    263c:	21 2f       	mov	r18, r17
    263e:	30 2f       	mov	r19, r16
    2640:	47 2d       	mov	r20, r7
    2642:	56 2d       	mov	r21, r6
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	80 e8       	ldi	r24, 0x80	; 128
    264a:	9f e3       	ldi	r25, 0x3F	; 63
    264c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2650:	a5 01       	movw	r20, r10
    2652:	94 01       	movw	r18, r8
    2654:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2658:	4b 01       	movw	r8, r22
    265a:	5c 01       	movw	r10, r24
    265c:	24 ed       	ldi	r18, 0xD4	; 212
    265e:	32 e0       	ldi	r19, 0x02	; 2
    2660:	47 e3       	ldi	r20, 0x37	; 55
    2662:	5a e3       	ldi	r21, 0x3A	; 58
    2664:	c7 01       	movw	r24, r14
    2666:	b6 01       	movw	r22, r12
    2668:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    266c:	21 2f       	mov	r18, r17
    266e:	30 2f       	mov	r19, r16
    2670:	47 2d       	mov	r20, r7
    2672:	56 2d       	mov	r21, r6
    2674:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2678:	a5 01       	movw	r20, r10
    267a:	94 01       	movw	r18, r8
    267c:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2680:	69 a7       	std	Y+41, r22	; 0x29
    2682:	7a a7       	std	Y+42, r23	; 0x2a
    2684:	8b a7       	std	Y+43, r24	; 0x2b
    2686:	9c a7       	std	Y+44, r25	; 0x2c
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    2688:	c9 80       	ldd	r12, Y+1	; 0x01
    268a:	da 80       	ldd	r13, Y+2	; 0x02
    268c:	eb 80       	ldd	r14, Y+3	; 0x03
    268e:	fc 80       	ldd	r15, Y+4	; 0x04
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    269c:	a7 01       	movw	r20, r14
    269e:	96 01       	movw	r18, r12
    26a0:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    26a4:	4b 01       	movw	r8, r22
    26a6:	5c 01       	movw	r10, r24
    26a8:	0e 94 29 31 	call	0x6252	; 0x6252 <cos>
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	69 89       	ldd	r22, Y+17	; 0x11
    26c2:	7a 89       	ldd	r23, Y+18	; 0x12
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    26cc:	69 8b       	std	Y+17, r22	; 0x11
    26ce:	7a 8b       	std	Y+18, r23	; 0x12
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    26d4:	c5 01       	movw	r24, r10
    26d6:	b4 01       	movw	r22, r8
    26d8:	0e 94 43 33 	call	0x6686	; 0x6686 <sin>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	69 8d       	ldd	r22, Y+25	; 0x19
    26e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e8:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    26ec:	9b 01       	movw	r18, r22
    26ee:	ac 01       	movw	r20, r24
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    26fc:	6d 8b       	std	Y+21, r22	; 0x15
    26fe:	7e 8b       	std	Y+22, r23	; 0x16
    2700:	8f 8b       	std	Y+23, r24	; 0x17
    2702:	98 8f       	std	Y+24, r25	; 0x18

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    2704:	a7 01       	movw	r20, r14
    2706:	96 01       	movw	r18, r12
    2708:	69 a5       	ldd	r22, Y+41	; 0x29
    270a:	7a a5       	ldd	r23, Y+42	; 0x2a
    270c:	8b a5       	ldd	r24, Y+43	; 0x2b
    270e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2710:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2714:	69 83       	std	Y+1, r22	; 0x01
    2716:	7a 83       	std	Y+2, r23	; 0x02
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    271c:	2f ee       	ldi	r18, 0xEF	; 239
    271e:	3c ed       	ldi	r19, 0xDC	; 220
    2720:	4b e2       	ldi	r20, 0x2B	; 43
    2722:	5b e3       	ldi	r21, 0x3B	; 59
    2724:	6d a5       	ldd	r22, Y+45	; 0x2d
    2726:	7e a5       	ldd	r23, Y+46	; 0x2e
    2728:	8f a5       	ldd	r24, Y+47	; 0x2f
    272a:	98 a9       	ldd	r25, Y+48	; 0x30
    272c:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2730:	4b 01       	movw	r8, r22
    2732:	5c 01       	movw	r10, r24
            
            /* UPDATE */
            // Get compass data: ( Request and recheck after 6 ms?)
            int16_t xCom, yCom, zCom;
            vCOM_getData(&xCom, &yCom, &zCom);
    2734:	ae 01       	movw	r20, r28
    2736:	45 5f       	subi	r20, 0xF5	; 245
    2738:	5f 4f       	sbci	r21, 0xFF	; 255
    273a:	be 01       	movw	r22, r28
    273c:	63 5f       	subi	r22, 0xF3	; 243
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	ce 01       	movw	r24, r28
    2742:	0f 96       	adiw	r24, 0x0f	; 15
    2744:	0e 94 82 07 	call	0xf04	; 0xf04 <vCOM_getData>
            // Add calibrated bias
            xCom += xComOff;
    2748:	6f 85       	ldd	r22, Y+15	; 0x0f
    274a:	78 89       	ldd	r23, Y+16	; 0x10
    274c:	65 5f       	subi	r22, 0xF5	; 245
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	78 8b       	std	Y+16, r23	; 0x10
    2752:	6f 87       	std	Y+15, r22	; 0x0f
            yCom += yComOff;
    2754:	0d 85       	ldd	r16, Y+13	; 0x0d
    2756:	1e 85       	ldd	r17, Y+14	; 0x0e
    2758:	0e 54       	subi	r16, 0x4E	; 78
    275a:	11 09       	sbc	r17, r1
    275c:	1e 87       	std	Y+14, r17	; 0x0e
    275e:	0d 87       	std	Y+13, r16	; 0x0d
            // calculate heading
            float compassHeading;
            compassHeading = atan2(yCom, xCom) - compassOffset ; // returns -pi, pi
    2760:	07 2e       	mov	r0, r23
    2762:	00 0c       	add	r0, r0
    2764:	88 0b       	sbc	r24, r24
    2766:	99 0b       	sbc	r25, r25
    2768:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    276c:	6b 01       	movw	r12, r22
    276e:	7c 01       	movw	r14, r24
    2770:	b8 01       	movw	r22, r16
    2772:	11 0f       	add	r17, r17
    2774:	88 0b       	sbc	r24, r24
    2776:	99 0b       	sbc	r25, r25
    2778:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    277c:	a7 01       	movw	r20, r14
    277e:	96 01       	movw	r18, r12
    2780:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <atan2>
            // Update predicted state:    
            float error = (compassHeading - predictedTheta);
    2784:	29 a1       	ldd	r18, Y+33	; 0x21
    2786:	3a a1       	ldd	r19, Y+34	; 0x22
    2788:	4b a1       	ldd	r20, Y+35	; 0x23
    278a:	5c a1       	ldd	r21, Y+36	; 0x24
    278c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    2790:	29 81       	ldd	r18, Y+1	; 0x01
    2792:	3a 81       	ldd	r19, Y+2	; 0x02
    2794:	4b 81       	ldd	r20, Y+3	; 0x03
    2796:	5c 81       	ldd	r21, Y+4	; 0x04
    2798:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    279c:	6f 83       	std	Y+7, r22	; 0x07
    279e:	78 87       	std	Y+8, r23	; 0x08
    27a0:	89 87       	std	Y+9, r24	; 0x09
    27a2:	9a 87       	std	Y+10, r25	; 0x0a
            vFunc_Inf2pi(&error);
    27a4:	ce 01       	movw	r24, r28
    27a6:	07 96       	adiw	r24, 0x07	; 7
    27a8:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
            
            
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if (fabs(error) > (0.8727*period_in_S)){ // 0.8727 rad/s is top speed while turning
    27ac:	8f 81       	ldd	r24, Y+7	; 0x07
    27ae:	98 85       	ldd	r25, Y+8	; 0x08
    27b0:	a9 85       	ldd	r26, Y+9	; 0x09
    27b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	9f 77       	andi	r25, 0x7F	; 127
    27ba:	20 eb       	ldi	r18, 0xB0	; 176
    27bc:	3b ef       	ldi	r19, 0xFB	; 251
    27be:	4e e0       	ldi	r20, 0x0E	; 14
    27c0:	5d e3       	ldi	r21, 0x3D	; 61
    27c2:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__gesf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	44 f4       	brge	.+16     	; 0x27da <vMainPoseEstimatorTask+0x31e>
                // If we have a reading over this, we can safely ignore the compass
                // Ignore compass while driving in a straight line
                kalmanGain = 0;
                vLED_singleLow(ledYELLOW);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	69 d8       	rcall	.-3886   	; 0x18a2 <vLED_singleLow>
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if (fabs(error) > (0.8727*period_in_S)){ // 0.8727 rad/s is top speed while turning
                // If we have a reading over this, we can safely ignore the compass
                // Ignore compass while driving in a straight line
                kalmanGain = 0;
    27d0:	14 2d       	mov	r17, r4
    27d2:	03 2d       	mov	r16, r3
    27d4:	f2 2c       	mov	r15, r2
    27d6:	e5 2c       	mov	r14, r5
    27d8:	2c c0       	rjmp	.+88     	; 0x2832 <vMainPoseEstimatorTask+0x376>
                vLED_singleLow(ledYELLOW);
            }
            else if ((robot_is_turning == FALSE) && (dRobot == 0)){
    27da:	89 a9       	ldd	r24, Y+49	; 0x31
    27dc:	81 11       	cpse	r24, r1
    27de:	22 c0       	rjmp	.+68     	; 0x2824 <vMainPoseEstimatorTask+0x368>
    27e0:	24 2d       	mov	r18, r4
    27e2:	33 2d       	mov	r19, r3
    27e4:	42 2d       	mov	r20, r2
    27e6:	55 2d       	mov	r21, r5
    27e8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f0:	0e 94 25 31 	call	0x624a	; 0x624a <__cmpsf2>
    27f4:	81 11       	cpse	r24, r1
    27f6:	16 c0       	rjmp	.+44     	; 0x2824 <vMainPoseEstimatorTask+0x368>
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
    27f8:	21 e2       	ldi	r18, 0x21	; 33
    27fa:	30 eb       	ldi	r19, 0xB0	; 176
    27fc:	42 eb       	ldi	r20, 0xB2	; 178
    27fe:	5e e3       	ldi	r21, 0x3E	; 62
    2800:	c5 01       	movw	r24, r10
    2802:	b4 01       	movw	r22, r8
    2804:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	c5 01       	movw	r24, r10
    280e:	b4 01       	movw	r22, r8
    2810:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    2814:	16 2f       	mov	r17, r22
    2816:	07 2f       	mov	r16, r23
    2818:	f8 2e       	mov	r15, r24
    281a:	e9 2e       	mov	r14, r25
                vLED_singleHigh(ledYELLOW);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	26 d8       	rcall	.-4020   	; 0x186e <vLED_singleHigh>
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <vMainPoseEstimatorTask+0x376>
            }
            else{
                kalmanGain = 0;
                vLED_singleLow(ledYELLOW);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	3c d8       	rcall	.-3976   	; 0x18a2 <vLED_singleLow>
    282a:	14 2d       	mov	r17, r4
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
                vLED_singleHigh(ledYELLOW);
            }
            else{
                kalmanGain = 0;
    282c:	03 2d       	mov	r16, r3
    282e:	f2 2c       	mov	r15, r2
    2830:	e5 2c       	mov	r14, r5
    2832:	2f 81       	ldd	r18, Y+7	; 0x07
                vLED_singleLow(ledYELLOW);
            }            
            //*/
           
            predictedTheta  += kalmanGain*(error);
    2834:	38 85       	ldd	r19, Y+8	; 0x08
    2836:	49 85       	ldd	r20, Y+9	; 0x09
    2838:	5a 85       	ldd	r21, Y+10	; 0x0a
    283a:	61 2f       	mov	r22, r17
    283c:	70 2f       	mov	r23, r16
    283e:	8f 2d       	mov	r24, r15
    2840:	9e 2d       	mov	r25, r14
    2842:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	69 81       	ldd	r22, Y+1	; 0x01
    284c:	7a 81       	ldd	r23, Y+2	; 0x02
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    2856:	69 83       	std	Y+1, r22	; 0x01
    2858:	7a 83       	std	Y+2, r23	; 0x02
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	ce 01       	movw	r24, r28
			vFunc_Inf2pi(&predictedTheta);            
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
    2866:	21 2f       	mov	r18, r17
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    2868:	30 2f       	mov	r19, r16
    286a:	4f 2d       	mov	r20, r15
    286c:	5e 2d       	mov	r21, r14
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	80 e8       	ldi	r24, 0x80	; 128
    2874:	9f e3       	ldi	r25, 0x3F	; 63
    2876:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__subsf3>
    287a:	a5 01       	movw	r20, r10
    287c:	94 01       	movw	r18, r8
    287e:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulsf3>
    2882:	6d a7       	std	Y+45, r22	; 0x2d
    2884:	7e a7       	std	Y+46, r23	; 0x2e
    2886:	8f a7       	std	Y+47, r24	; 0x2f
    2888:	98 ab       	std	Y+48, r25	; 0x30
    288a:	20 e0       	ldi	r18, 0x00	; 0

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    288c:	4f e0       	ldi	r20, 0x0F	; 15
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    2898:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    289c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
                gTheta_hat = predictedTheta;
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	ab 81       	ldd	r26, Y+3	; 0x03
    28a6:	bc 81       	ldd	r27, Y+4	; 0x04
    28a8:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <gTheta_hat>
    28ac:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <gTheta_hat+0x1>
    28b0:	a0 93 ef 19 	sts	0x19EF, r26	; 0x8019ef <gTheta_hat+0x2>
    28b4:	b0 93 f0 19 	sts	0x19F0, r27	; 0x8019f0 <gTheta_hat+0x3>
    28b8:	69 89       	ldd	r22, Y+17	; 0x11
                gX_hat = predictedX;
    28ba:	7a 89       	ldd	r23, Y+18	; 0x12
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    28c4:	70 93 ec 19 	sts	0x19EC, r23	; 0x8019ec <gX_hat+0x1>
    28c8:	60 93 eb 19 	sts	0x19EB, r22	; 0x8019eb <gX_hat>
    28cc:	6d 89       	ldd	r22, Y+21	; 0x15
                gY_hat = predictedY;
    28ce:	7e 89       	ldd	r23, Y+22	; 0x16
    28d0:	8f 89       	ldd	r24, Y+23	; 0x17
    28d2:	98 8d       	ldd	r25, Y+24	; 0x18
    28d4:	0e 94 94 31 	call	0x6328	; 0x6328 <__fixsfsi>
    28d8:	70 93 ea 19 	sts	0x19EA, r23	; 0x8019ea <gY_hat+0x1>
    28dc:	60 93 e9 19 	sts	0x19E9, r22	; 0x8019e9 <gY_hat>
    28e0:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	80 91 65 1b 	lds	r24, 0x1B65	; 0x801b65 <xPoseMutex>
    28e8:	90 91 66 1b 	lds	r25, 0x1B66	; 0x801b66 <xPoseMutex+0x1>
    28ec:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    28f0:	60 e0       	ldi	r22, 0x00	; 0
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	80 91 5d 1b 	lds	r24, 0x1B5D	; 0x801b5d <xControllerBSem>
    28f8:	90 91 5e 1b 	lds	r25, 0x1B5E	; 0x801b5e <xControllerBSem+0x1>
    28fc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    2900:	6f a0       	ldd	r6, Y+39	; 0x27
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    2902:	78 a4       	ldd	r7, Y+40	; 0x28
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	9a 8f       	std	Y+26, r25	; 0x1a
    290a:	89 8f       	std	Y+25, r24	; 0x19
    290c:	05 ce       	rjmp	.-1014   	; 0x2518 <vMainPoseEstimatorTask+0x5c>
    290e:	05 e6       	ldi	r16, 0x65	; 101
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	c4 2c       	mov	r12, r4
    2914:	d3 2c       	mov	r13, r3
    2916:	e2 2c       	mov	r14, r2
    2918:	f5 2c       	mov	r15, r5
    291a:	0e 94 2e 0c 	call	0x185c	; 0x185c <fIMU_readFloatGyroZ>
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    291e:	9b 01       	movw	r18, r22
    2920:	ac 01       	movw	r20, r24
    2922:	6c 2d       	mov	r22, r12
    2924:	7d 2d       	mov	r23, r13
    2926:	8e 2d       	mov	r24, r14
    2928:	9f 2d       	mov	r25, r15
    292a:	0e 94 5f 30 	call	0x60be	; 0x60be <__addsf3>
    292e:	c6 2e       	mov	r12, r22
    2930:	d7 2e       	mov	r13, r23
    2932:	e8 2e       	mov	r14, r24
    2934:	f9 2e       	mov	r15, r25
    2936:	01 50       	subi	r16, 0x01	; 1
    2938:	11 09       	sbc	r17, r1
    293a:	79 f7       	brne	.-34     	; 0x291a <vMainPoseEstimatorTask+0x45e>
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    293c:	ae 01       	movw	r20, r28
                gyro+= fIMU_readFloatGyroZ();
            }
            
            int16_t xCom, yCom, zCom;
            vCOM_getData(&xCom, &yCom, &zCom);
    293e:	49 5f       	subi	r20, 0xF9	; 249
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	be 01       	movw	r22, r28
    2944:	65 5f       	subi	r22, 0xF5	; 245
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	ce 01       	movw	r24, r28
    294a:	0d 96       	adiw	r24, 0x0d	; 13
    294c:	0e 94 82 07 	call	0xf04	; 0xf04 <vCOM_getData>
    2950:	6d 85       	ldd	r22, Y+13	; 0x0d
            xCom += xComOff;
    2952:	7e 85       	ldd	r23, Y+14	; 0x0e
    2954:	65 5f       	subi	r22, 0xF5	; 245
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	0b 85       	ldd	r16, Y+11	; 0x0b
            yCom += yComOff;
    295a:	1c 85       	ldd	r17, Y+12	; 0x0c
    295c:	0e 54       	subi	r16, 0x4E	; 78
    295e:	11 09       	sbc	r17, r1
    2960:	84 2d       	mov	r24, r4
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    2962:	93 2d       	mov	r25, r3
    2964:	a2 2d       	mov	r26, r2
    2966:	b5 2d       	mov	r27, r5
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	ab 83       	std	Y+3, r26	; 0x03
    296e:	bc 83       	std	Y+4, r27	; 0x04
    2970:	07 2e       	mov	r0, r23
            
            compassOffset = atan2(yCom, xCom);    
    2972:	00 0c       	add	r0, r0
    2974:	88 0b       	sbc	r24, r24
    2976:	99 0b       	sbc	r25, r25
    2978:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    297c:	4b 01       	movw	r8, r22
    297e:	5c 01       	movw	r10, r24
    2980:	b8 01       	movw	r22, r16
    2982:	11 0f       	add	r17, r17
    2984:	88 0b       	sbc	r24, r24
    2986:	99 0b       	sbc	r25, r25
    2988:	0e 94 c7 31 	call	0x638e	; 0x638e <__floatsisf>
    298c:	a5 01       	movw	r20, r10
    298e:	94 01       	movw	r18, r8
    2990:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <atan2>
    2994:	69 a3       	std	Y+33, r22	; 0x21
    2996:	7a a3       	std	Y+34, r23	; 0x22
    2998:	8b a3       	std	Y+35, r24	; 0x23
    299a:	9c a3       	std	Y+36, r25	; 0x24
    299c:	20 e0       	ldi	r18, 0x00	; 0
            gyroOffset = gyro / (float)i;               
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ec       	ldi	r20, 0xCA	; 202
    29a2:	52 e4       	ldi	r21, 0x42	; 66
    29a4:	6c 2d       	mov	r22, r12
    29a6:	7d 2d       	mov	r23, r13
    29a8:	8e 2d       	mov	r24, r14
    29aa:	9f 2d       	mov	r25, r15
    29ac:	0e 94 2c 31 	call	0x6258	; 0x6258 <__divsf3>
    29b0:	6d 8f       	std	Y+29, r22	; 0x1d
    29b2:	7e 8f       	std	Y+30, r23	; 0x1e
    29b4:	8f 8f       	std	Y+31, r24	; 0x1f
    29b6:	98 a3       	std	Y+32, r25	; 0x20
    29b8:	4d 8a       	std	Y+21, r4	; 0x15
            yCom += yComOff;
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    29ba:	3e 8a       	std	Y+22, r3	; 0x16
    29bc:	2f 8a       	std	Y+23, r2	; 0x17
    29be:	58 8e       	std	Y+24, r5	; 0x18
    29c0:	49 8a       	std	Y+17, r4	; 0x11
            xCom += xComOff;
            yCom += yComOff;
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    29c2:	3a 8a       	std	Y+18, r3	; 0x12
    29c4:	2b 8a       	std	Y+19, r2	; 0x13
    29c6:	5c 8a       	std	Y+20, r5	; 0x14
    29c8:	a7 cd       	rjmp	.-1202   	; 0x2518 <vMainPoseEstimatorTask+0x5c>

000029ca <vApplicationStackOverflowHook>:
    29ca:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vLED_toggle>
    29d4:	fb cf       	rjmp	.-10     	; 0x29cc <vApplicationStackOverflowHook+0x2>

000029d6 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    29d6:	0e 94 31 0c 	call	0x1862	; 0x1862 <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    29e2:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <vUSART_init>
    network_init();
    29e6:	54 d2       	rcall	.+1192   	; 0x2e90 <network_init>
    arq_init();
    29e8:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    29ec:	8f e3       	ldi	r24, 0x3F	; 63
    29ee:	90 e2       	ldi	r25, 0x20	; 32
    29f0:	0e 94 2b 22 	call	0x4456	; 0x4456 <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	0e 94 a3 21 	call	0x4346	; 0x4346 <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    29fa:	0e 94 e7 07 	call	0xfce	; 0xfce <vDistSens_init>
    /* Initialize motor controller */
    vMotor_init();
    29fe:	05 d1       	rcall	.+522    	; 0x2c0a <vMotor_init>
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
    sIMU_begin(); 
    2a00:	0e 94 a7 0a 	call	0x154e	; 0x154e <sIMU_begin>
    #endif
    
    //vCOM_init();
    
    /* Initialize RTOS utilities  */
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	59 d4       	rcall	.+2226   	; 0x32be <xQueueGenericCreate>
    2a0c:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <movementQ+0x1>
    2a10:	80 93 fb 19 	sts	0x19FB, r24	; 0x8019fb <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPolar)); // For setpoints to controller
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	66 e0       	ldi	r22, 0x06	; 6
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	51 d4       	rcall	.+2210   	; 0x32be <xQueueGenericCreate>
    2a1c:	90 93 fa 19 	sts	0x19FA, r25	; 0x8019fa <poseControllerQ+0x1>
    2a20:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	49 d4       	rcall	.+2194   	; 0x32be <xQueueGenericCreate>
    2a2c:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <scanStatusQ+0x1>
    2a30:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	41 d4       	rcall	.+2178   	; 0x32be <xQueueGenericCreate>
    2a3c:	90 93 f6 19 	sts	0x19F6, r25	; 0x8019f6 <actuationQ+0x1>
    2a40:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	8d d4       	rcall	.+2330   	; 0x3362 <xQueueCreateMutex>
    2a48:	90 93 66 1b 	sts	0x1B66, r25	; 0x801b66 <xPoseMutex+0x1>
    2a4c:	80 93 65 1b 	sts	0x1B65, r24	; 0x801b65 <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	87 d4       	rcall	.+2318   	; 0x3362 <xQueueCreateMutex>
    2a54:	90 93 62 1b 	sts	0x1B62, r25	; 0x801b62 <xUartMutex+0x1>
    2a58:	80 93 61 1b 	sts	0x1B61, r24	; 0x801b61 <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	81 d4       	rcall	.+2306   	; 0x3362 <xQueueCreateMutex>
    2a60:	90 93 60 1b 	sts	0x1B60, r25	; 0x801b60 <xTickMutex+0x1>
    2a64:	80 93 5f 1b 	sts	0x1B5F, r24	; 0x801b5f <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    2a68:	43 e0       	ldi	r20, 0x03	; 3
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	27 d4       	rcall	.+2126   	; 0x32be <xQueueGenericCreate>
    2a70:	90 93 5e 1b 	sts	0x1B5E, r25	; 0x801b5e <xControllerBSem+0x1>
    2a74:	80 93 5d 1b 	sts	0x1B5D, r24	; 0x801b5d <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    2a78:	43 e0       	ldi	r20, 0x03	; 3
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	1f d4       	rcall	.+2110   	; 0x32be <xQueueGenericCreate>
    2a80:	90 93 64 1b 	sts	0x1B64, r25	; 0x801b64 <xCommandReadyBSem+0x1>
    2a84:	80 93 63 1b 	sts	0x1B63, r24	; 0x801b63 <xCommandReadyBSem>
    2a88:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    2a8a:	b1 2c       	mov	r11, r1
    2a8c:	c1 2c       	mov	r12, r1
    2a8e:	d1 2c       	mov	r13, r1
    2a90:	e1 2c       	mov	r14, r1
    2a92:	f1 2c       	mov	r15, r1
    2a94:	04 e0       	ldi	r16, 0x04	; 4
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4c e2       	ldi	r20, 0x2C	; 44
    2a9c:	51 e0       	ldi	r21, 0x01	; 1
    2a9e:	60 e4       	ldi	r22, 0x40	; 64
    2aa0:	76 e0       	ldi	r23, 0x06	; 6
    2aa2:	86 e1       	ldi	r24, 0x16	; 22
    2aa4:	9e e0       	ldi	r25, 0x0E	; 14
    2aa6:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    2aaa:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4c e2       	ldi	r20, 0x2C	; 44
    2ab2:	51 e0       	ldi	r21, 0x01	; 1
    2ab4:	69 e4       	ldi	r22, 0x49	; 73
    2ab6:	76 e0       	ldi	r23, 0x06	; 6
    2ab8:	82 e1       	ldi	r24, 0x12	; 18
    2aba:	9d e0       	ldi	r25, 0x0D	; 13
    2abc:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    2ac0:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4c e2       	ldi	r20, 0x2C	; 44
    2ac8:	51 e0       	ldi	r21, 0x01	; 1
    2aca:	6e e4       	ldi	r22, 0x4E	; 78
    2acc:	76 e0       	ldi	r23, 0x06	; 6
    2ace:	85 e7       	ldi	r24, 0x75	; 117
    2ad0:	9f e0       	ldi	r25, 0x0F	; 15
    2ad2:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    2ad6:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4c e2       	ldi	r20, 0x2C	; 44
    2ade:	51 e0       	ldi	r21, 0x01	; 1
    2ae0:	66 e5       	ldi	r22, 0x56	; 86
    2ae2:	76 e0       	ldi	r23, 0x06	; 6
    2ae4:	8e e5       	ldi	r24, 0x5E	; 94
    2ae6:	92 e1       	ldi	r25, 0x12	; 18
    2ae8:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    2aec:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4c e2       	ldi	r20, 0x2C	; 44
    2af4:	51 e0       	ldi	r21, 0x01	; 1
    2af6:	6e e5       	ldi	r22, 0x5E	; 94
    2af8:	76 e0       	ldi	r23, 0x06	; 6
    2afa:	87 e2       	ldi	r24, 0x27	; 39
    2afc:	9e e0       	ldi	r25, 0x0E	; 14
    2afe:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
    2b02:	78 94       	sei
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif
    
    

    sei();
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    vLED_singleLow(ledRED);
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
    2b0c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <vTaskStartScheduler>
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    /*  Start scheduler */
    vTaskStartScheduler();
    2b10:	c4 e6       	ldi	r28, 0x64	; 100

    /*  MCU is out of RAM if the program comes here */
    while(1){
        cli();
        debug("RAM fail\n");
    2b12:	d6 e0       	ldi	r29, 0x06	; 6
    2b14:	f8 94       	cli
    /*  Start scheduler */
    vTaskStartScheduler();

    /*  MCU is out of RAM if the program comes here */
    while(1){
        cli();
    2b16:	df 93       	push	r29
        debug("RAM fail\n");
    2b18:	cf 93       	push	r28
    2b1a:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	f8 cf       	rjmp	.-16     	; 0x2b14 <main+0x13e>

00002b24 <__vector_4>:
    2b24:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    2b26:	0f 92       	push	r0
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	0f 92       	push	r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    2b30:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <gISR_leftWheelTicks>
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <gISR_leftWheelTicks>
}
    2b3a:	8f 91       	pop	r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	0f 90       	pop	r0
    2b42:	1f 90       	pop	r1
    2b44:	18 95       	reti

00002b46 <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    2b52:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <gISR_rightWheelTicks>
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	80 93 f4 19 	sts	0x19F4, r24	; 0x8019f4 <gISR_rightWheelTicks>
}
    2b5c:	8f 91       	pop	r24
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	0f 90       	pop	r0
    2b64:	1f 90       	pop	r1
    2b66:	18 95       	reti

00002b68 <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    2b68:	1f 92       	push	r1
    2b6a:	0f 92       	push	r0
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	0f 92       	push	r0
    2b70:	11 24       	eor	r1, r1
    2b72:	0b b6       	in	r0, 0x3b	; 59
    2b74:	0f 92       	push	r0
    2b76:	2f 93       	push	r18
    2b78:	3f 93       	push	r19
    2b7a:	4f 93       	push	r20
    2b7c:	5f 93       	push	r21
    2b7e:	6f 93       	push	r22
    2b80:	7f 93       	push	r23
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
    2b8a:	ef 93       	push	r30
    2b8c:	ff 93       	push	r31
    if (nRFconnected){
    2b8e:	64 99       	sbic	0x0c, 4	; 12
    2b90:	09 c0       	rjmp	.+18     	; 0x2ba4 <__vector_5+0x3c>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
        vLED_singleHigh(ledYELLOW);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
    2ba2:	18 c0       	rjmp	.+48     	; 0x2bd4 <__vector_5+0x6c>
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    2ba4:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <gHandshook>
        gPaused = FALSE;
    2ba8:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <gPaused>
        vLED_singleLow(ledGREEN);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        vLED_singleLow(ledYELLOW);
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        vLED_singleLow(ledRED);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <xCommandReadyBSem>
    2bcc:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <xCommandReadyBSem+0x1>
    2bd0:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	80 91 5d 1b 	lds	r24, 0x1B5D	; 0x801b5d <xControllerBSem>
    2bdc:	90 91 5e 1b 	lds	r25, 0x1B5E	; 0x801b5e <xControllerBSem+0x1>
    2be0:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <xQueueGiveFromISR>
}
    2be4:	ff 91       	pop	r31
    2be6:	ef 91       	pop	r30
    2be8:	bf 91       	pop	r27
    2bea:	af 91       	pop	r26
    2bec:	9f 91       	pop	r25
    2bee:	8f 91       	pop	r24
    2bf0:	7f 91       	pop	r23
    2bf2:	6f 91       	pop	r22
    2bf4:	5f 91       	pop	r21
    2bf6:	4f 91       	pop	r20
    2bf8:	3f 91       	pop	r19
    2bfa:	2f 91       	pop	r18
    2bfc:	0f 90       	pop	r0
    2bfe:	0b be       	out	0x3b, r0	; 59
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    2c0a:	27 9a       	sbi	0x04, 7	; 4
    2c0c:	84 b1       	in	r24, 0x04	; 4
    2c0e:	80 63       	ori	r24, 0x30	; 48
    2c10:	84 b9       	out	0x04, r24	; 4
    2c12:	26 9a       	sbi	0x04, 6	; 4
    2c14:	e1 e0       	ldi	r30, 0x01	; 1
    2c16:	f1 e0       	ldi	r31, 0x01	; 1
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 66       	ori	r24, 0x60	; 96
    2c1c:	80 83       	st	Z, r24
    2c1e:	2f 98       	cbi	0x05, 7	; 5
    2c20:	2e 98       	cbi	0x05, 6	; 5
    2c22:	e2 e0       	ldi	r30, 0x02	; 2
    2c24:	f1 e0       	ldi	r31, 0x01	; 1
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 79       	andi	r24, 0x9F	; 159
    2c2a:	80 83       	st	Z, r24
    2c2c:	85 b1       	in	r24, 0x05	; 5
    2c2e:	8f 7c       	andi	r24, 0xCF	; 207
    2c30:	85 b9       	out	0x05, r24	; 5
    2c32:	8a b1       	in	r24, 0x0a	; 10
    2c34:	8a b9       	out	0x0a, r24	; 10
    2c36:	8b b1       	in	r24, 0x0b	; 11
    2c38:	8c 60       	ori	r24, 0x0C	; 12
    2c3a:	8b b9       	out	0x0b, r24	; 11
    2c3c:	6c 98       	cbi	0x0d, 4	; 13
    2c3e:	8d b3       	in	r24, 0x1d	; 29
    2c40:	8d bb       	out	0x1d, r24	; 29
    2c42:	e9 e6       	ldi	r30, 0x69	; 105
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	80 6f       	ori	r24, 0xF0	; 240
    2c4a:	80 83       	st	Z, r24
    2c4c:	ea e6       	ldi	r30, 0x6A	; 106
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	81 60       	ori	r24, 0x01	; 1
    2c54:	80 83       	st	Z, r24
    2c56:	8c e1       	ldi	r24, 0x1C	; 28
    2c58:	8c bb       	out	0x1c, r24	; 28
    2c5a:	8d b3       	in	r24, 0x1d	; 29
    2c5c:	8c 61       	ori	r24, 0x1C	; 28
    2c5e:	8d bb       	out	0x1d, r24	; 29
    2c60:	84 b5       	in	r24, 0x24	; 36
    2c62:	80 68       	ori	r24, 0x80	; 128
    2c64:	84 bd       	out	0x24, r24	; 36
    2c66:	e0 e8       	ldi	r30, 0x80	; 128
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 62       	ori	r24, 0x20	; 32
    2c6e:	80 83       	st	Z, r24
    2c70:	85 b5       	in	r24, 0x25	; 37
    2c72:	85 bd       	out	0x25, r24	; 37
    2c74:	84 b5       	in	r24, 0x24	; 36
    2c76:	83 60       	ori	r24, 0x03	; 3
    2c78:	84 bd       	out	0x24, r24	; 36
    2c7a:	a1 e8       	ldi	r26, 0x81	; 129
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	8c 91       	ld	r24, X
    2c80:	88 60       	ori	r24, 0x08	; 8
    2c82:	8c 93       	st	X, r24
    2c84:	80 81       	ld	r24, Z
    2c86:	81 60       	ori	r24, 0x01	; 1
    2c88:	80 83       	st	Z, r24
    2c8a:	85 b5       	in	r24, 0x25	; 37
    2c8c:	82 60       	ori	r24, 0x02	; 2
    2c8e:	85 bd       	out	0x25, r24	; 37
    2c90:	8c 91       	ld	r24, X
    2c92:	82 60       	ori	r24, 0x02	; 2
    2c94:	8c 93       	st	X, r24
    2c96:	80 81       	ld	r24, Z
    2c98:	80 83       	st	Z, r24
    2c9a:	e0 eb       	ldi	r30, 0xB0	; 176
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 83       	st	Z, r24
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 83       	st	Z, r24
    2ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 83       	st	Z, r24
    2cae:	08 95       	ret

00002cb0 <vMotorMoveLeftForward>:
    2cb0:	87 bd       	out	0x27, r24	; 39
    2cb2:	2c 9a       	sbi	0x05, 4	; 5
    2cb4:	2d 98       	cbi	0x05, 5	; 5
    2cb6:	84 e0       	ldi	r24, 0x04	; 4
    2cb8:	fb 01       	movw	r30, r22
    2cba:	80 83       	st	Z, r24
    2cbc:	08 95       	ret

00002cbe <vMotorMoveRightForward>:
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2cc4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2cc8:	e2 e0       	ldi	r30, 0x02	; 2
    2cca:	f1 e0       	ldi	r31, 0x01	; 1
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 64       	ori	r24, 0x40	; 64
    2cd0:	80 83       	st	Z, r24
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8f 7d       	andi	r24, 0xDF	; 223
    2cd6:	80 83       	st	Z, r24
    2cd8:	86 e0       	ldi	r24, 0x06	; 6
    2cda:	fb 01       	movw	r30, r22
    2cdc:	80 83       	st	Z, r24
    2cde:	08 95       	ret

00002ce0 <vMotorMoveLeftBackward>:
    2ce0:	87 bd       	out	0x27, r24	; 39
    2ce2:	2c 98       	cbi	0x05, 4	; 5
    2ce4:	2d 9a       	sbi	0x05, 5	; 5
    2ce6:	85 e0       	ldi	r24, 0x05	; 5
    2ce8:	fb 01       	movw	r30, r22
    2cea:	80 83       	st	Z, r24
    2cec:	08 95       	ret

00002cee <vMotorMoveRightBackward>:
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2cf4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2cf8:	e2 e0       	ldi	r30, 0x02	; 2
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8f 7b       	andi	r24, 0xBF	; 191
    2d00:	80 83       	st	Z, r24
    2d02:	80 81       	ld	r24, Z
    2d04:	80 62       	ori	r24, 0x20	; 32
    2d06:	80 83       	st	Z, r24
    2d08:	85 e0       	ldi	r24, 0x05	; 5
    2d0a:	fb 01       	movw	r30, r22
    2d0c:	80 83       	st	Z, r24
    2d0e:	08 95       	ret

00002d10 <vMotorBrakeLeft>:
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	87 bd       	out	0x27, r24	; 39
    2d14:	2c 98       	cbi	0x05, 4	; 5
    2d16:	2d 98       	cbi	0x05, 5	; 5
    2d18:	08 95       	ret

00002d1a <vMotorBrakeRight>:
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2d22:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2d26:	e2 e0       	ldi	r30, 0x02	; 2
    2d28:	f1 e0       	ldi	r31, 0x01	; 1
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8f 7b       	andi	r24, 0xBF	; 191
    2d2e:	80 83       	st	Z, r24
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 7d       	andi	r24, 0xDF	; 223
    2d34:	80 83       	st	Z, r24
    2d36:	08 95       	ret

00002d38 <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	eb 01       	movw	r28, r22
    2d42:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2d44:	18 16       	cp	r1, r24
    2d46:	19 06       	cpc	r1, r25
    2d48:	1c f4       	brge	.+6      	; 0x2d50 <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	b1 df       	rcall	.-158    	; 0x2cb0 <vMotorMoveLeftForward>
    2d4e:	07 c0       	rjmp	.+14     	; 0x2d5e <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2d50:	99 23       	and	r25, r25
    2d52:	24 f4       	brge	.+8      	; 0x2d5c <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2d54:	ba 01       	movw	r22, r20
    2d56:	81 95       	neg	r24
    2d58:	c3 df       	rcall	.-122    	; 0x2ce0 <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <vMotorMovementSwitch+0x26>
    2d5c:	d9 df       	rcall	.-78     	; 0x2d10 <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2d5e:	1c 16       	cp	r1, r28
    2d60:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2d62:	24 f4       	brge	.+8      	; 0x2d6c <vMotorMovementSwitch+0x34>
    2d64:	b8 01       	movw	r22, r16
    2d66:	8c 2f       	mov	r24, r28
    2d68:	aa df       	rcall	.-172    	; 0x2cbe <vMotorMoveRightForward>
    2d6a:	08 c0       	rjmp	.+16     	; 0x2d7c <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2d6c:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <vMotorMovementSwitch+0x42>
    2d70:	b8 01       	movw	r22, r16
    2d72:	8c 2f       	mov	r24, r28
    2d74:	81 95       	neg	r24
    2d76:	bb df       	rcall	.-138    	; 0x2cee <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <vMotorMovementSwitch+0x44>
    2d7a:	cf df       	rcall	.-98     	; 0x2d1a <vMotorBrakeRight>
	
	
	
	

}
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret

00002d86 <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2d86:	84 30       	cpi	r24, 0x04	; 4
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <vMotorEncoderLeftTickFromISR+0xa>
    2d8a:	85 30       	cpi	r24, 0x05	; 5
    2d8c:	51 f0       	breq	.+20     	; 0x2da2 <vMotorEncoderLeftTickFromISR+0x1c>
    2d8e:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2d90:	46 95       	lsr	r20
    2d92:	fb 01       	movw	r30, r22
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	84 0f       	add	r24, r20
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
            break;
    2da0:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2da2:	46 95       	lsr	r20
    2da4:	fb 01       	movw	r30, r22
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	84 1b       	sub	r24, r20
    2dac:	91 09       	sbc	r25, r1
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	08 95       	ret

00002db4 <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2db4:	85 30       	cpi	r24, 0x05	; 5
    2db6:	59 f0       	breq	.+22     	; 0x2dce <vMotorEncoderRightTickFromISR+0x1a>
    2db8:	86 30       	cpi	r24, 0x06	; 6
    2dba:	89 f4       	brne	.+34     	; 0x2dde <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2dbc:	46 95       	lsr	r20
    2dbe:	fb 01       	movw	r30, r22
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	84 0f       	add	r24, r20
    2dc6:	91 1d       	adc	r25, r1
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
            break;
    2dcc:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2dce:	46 95       	lsr	r20
    2dd0:	fb 01       	movw	r30, r22
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	84 1b       	sub	r24, r20
    2dd8:	91 09       	sbc	r25, r1
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	80 83       	st	Z, r24
    2dde:	08 95       	ret

00002de0 <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	7c 01       	movw	r14, r24
    2dee:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2df0:	cb 01       	movw	r24, r22
    2df2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2df6:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2df8:	98 01       	movw	r18, r16
    2dfa:	21 50       	subi	r18, 0x01	; 1
    2dfc:	31 09       	sbc	r19, r1
    2dfe:	a7 01       	movw	r20, r14
    2e00:	b8 01       	movw	r22, r16
    2e02:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2e06:	88 23       	and	r24, r24
    2e08:	49 f0       	breq	.+18     	; 0x2e1c <network_receive+0x3c>
	   ++cobs;
    2e0a:	80 91 fe 19 	lds	r24, 0x19FE	; 0x8019fe <cobs.2024>
    2e0e:	8f 5f       	subi	r24, 0xFF	; 255
    2e10:	80 93 fe 19 	sts	0x19FE, r24	; 0x8019fe <cobs.2024>
	   vPortFree(decoded_data);
    2e14:	ce 01       	movw	r24, r28
    2e16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e1a:	33 c0       	rjmp	.+102    	; 0x2e82 <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2e1c:	86 2f       	mov	r24, r22
    2e1e:	97 2f       	mov	r25, r23
    2e20:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2e22:	fe 01       	movw	r30, r28
    2e24:	e8 0f       	add	r30, r24
    2e26:	f9 1f       	adc	r31, r25
    2e28:	31 97       	sbiw	r30, 0x01	; 1
    2e2a:	f0 80       	ld	r15, Z
    2e2c:	6f ef       	ldi	r22, 0xFF	; 255
    2e2e:	68 0f       	add	r22, r24
    2e30:	ce 01       	movw	r24, r28
    2e32:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <calculate_crc>
    2e36:	f8 16       	cp	r15, r24
    2e38:	49 f0       	breq	.+18     	; 0x2e4c <network_receive+0x6c>
	   ++crc;
    2e3a:	80 91 fd 19 	lds	r24, 0x19FD	; 0x8019fd <crc.2025>
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 fd 19 	sts	0x19FD, r24	; 0x8019fd <crc.2025>
	   vPortFree(decoded_data);
    2e44:	ce 01       	movw	r24, r28
    2e46:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e4a:	1b c0       	rjmp	.+54     	; 0x2e82 <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2e4c:	88 81       	ld	r24, Y
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	21 f0       	breq	.+8      	; 0x2e5a <network_receive+0x7a>
	   vPortFree(decoded_data);
    2e52:	ce 01       	movw	r24, r28
    2e54:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2e5a:	a8 01       	movw	r20, r16
    2e5c:	44 50       	subi	r20, 0x04	; 4
    2e5e:	51 09       	sbc	r21, r1
    2e60:	be 01       	movw	r22, r28
    2e62:	6d 5f       	subi	r22, 0xFD	; 253
    2e64:	7f 4f       	sbci	r23, 0xFF	; 255
    2e66:	ea 81       	ldd	r30, Y+2	; 0x02
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	eb 57       	subi	r30, 0x7B	; 123
    2e70:	f4 4e       	sbci	r31, 0xE4	; 228
    2e72:	01 90       	ld	r0, Z+
    2e74:	f0 81       	ld	r31, Z
    2e76:	e0 2d       	mov	r30, r0
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	19 95       	eicall
   vPortFree(decoded_data);
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
}
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	ff 90       	pop	r15
    2e8c:	ef 90       	pop	r14
    2e8e:	08 95       	ret

00002e90 <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2e90:	80 ef       	ldi	r24, 0xF0	; 240
    2e92:	96 e1       	ldi	r25, 0x16	; 22
    2e94:	0c 94 ed 2f 	jmp	0x5fda	; 0x5fda <vUSART_set_receive_callback>
    2e98:	08 95       	ret

00002e9a <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	40 f4       	brcc	.+16     	; 0x2eae <network_set_callback+0x14>
    2e9e:	e8 2f       	mov	r30, r24
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	ee 0f       	add	r30, r30
    2ea4:	ff 1f       	adc	r31, r31
    2ea6:	eb 57       	subi	r30, 0x7B	; 123
    2ea8:	f4 4e       	sbci	r31, 0xE4	; 228
    2eaa:	71 83       	std	Z+1, r23	; 0x01
    2eac:	60 83       	st	Z, r22
    2eae:	08 95       	ret

00002eb0 <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	88 2e       	mov	r8, r24
    2eca:	96 2e       	mov	r9, r22
    2ecc:	5a 01       	movw	r10, r20
    2ece:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2ed0:	69 01       	movw	r12, r18
    2ed2:	84 e0       	ldi	r24, 0x04	; 4
    2ed4:	c8 0e       	add	r12, r24
    2ed6:	d1 1c       	adc	r13, r1
    2ed8:	c6 01       	movw	r24, r12
    2eda:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2ede:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	06 96       	adiw	r24, 0x06	; 6
    2ee4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2ee8:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2eea:	20 97       	sbiw	r28, 0x00	; 0
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <network_send+0x42>
    2eee:	89 2b       	or	r24, r25
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <network_send+0x52>
    vPortFree(packet);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    vPortFree(encoded_data);
    2ef8:	c7 01       	movw	r24, r14
    2efa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    return 0;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	3c c0       	rjmp	.+120    	; 0x2f7a <network_send+0xca>
  }
  packet[0] = remote_address;
    2f02:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2f04:	83 e0       	ldi	r24, 0x03	; 3
    2f06:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2f08:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2f0a:	a8 01       	movw	r20, r16
    2f0c:	b5 01       	movw	r22, r10
    2f0e:	ce 01       	movw	r24, r28
    2f10:	03 96       	adiw	r24, 0x03	; 3
    2f12:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2f16:	58 01       	movw	r10, r16
    2f18:	e3 e0       	ldi	r30, 0x03	; 3
    2f1a:	ae 0e       	add	r10, r30
    2f1c:	b1 1c       	adc	r11, r1
    2f1e:	ac 0e       	add	r10, r28
    2f20:	bd 1e       	adc	r11, r29
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	60 0f       	add	r22, r16
    2f26:	ce 01       	movw	r24, r28
    2f28:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <calculate_crc>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2f30:	b8 01       	movw	r22, r16
    2f32:	6b 5f       	subi	r22, 0xFB	; 251
    2f34:	7f 4f       	sbci	r23, 0xFF	; 255
    2f36:	96 01       	movw	r18, r12
    2f38:	ae 01       	movw	r20, r28
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2f40:	88 23       	and	r24, r24
    2f42:	41 f0       	breq	.+16     	; 0x2f54 <network_send+0xa4>
    vPortFree(packet);
    2f44:	ce 01       	movw	r24, r28
    2f46:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    vPortFree(encoded_data);
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    return 0;
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	13 c0       	rjmp	.+38     	; 0x2f7a <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2f54:	86 2f       	mov	r24, r22
    2f56:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2f58:	f7 01       	movw	r30, r14
    2f5a:	e8 0f       	add	r30, r24
    2f5c:	f9 1f       	adc	r31, r25
    2f5e:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2f60:	bc 01       	movw	r22, r24
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	c7 01       	movw	r24, r14
    2f68:	0e 94 c9 2f 	call	0x5f92	; 0x5f92 <vUSART_send>
  vPortFree(packet);
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
  vPortFree(encoded_data);
    2f72:	c7 01       	movw	r24, r14
    2f74:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
  return 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	ff 90       	pop	r15
    2f84:	ef 90       	pop	r14
    2f86:	df 90       	pop	r13
    2f88:	cf 90       	pop	r12
    2f8a:	bf 90       	pop	r11
    2f8c:	af 90       	pop	r10
    2f8e:	9f 90       	pop	r9
    2f90:	8f 90       	pop	r8
    2f92:	08 95       	ret

00002f94 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2f94:	31 e1       	ldi	r19, 0x11	; 17
    2f96:	fc 01       	movw	r30, r24
    2f98:	30 83       	st	Z, r19
    2f9a:	31 97       	sbiw	r30, 0x01	; 1
    2f9c:	22 e2       	ldi	r18, 0x22	; 34
    2f9e:	20 83       	st	Z, r18
    2fa0:	31 97       	sbiw	r30, 0x01	; 1
    2fa2:	a3 e3       	ldi	r26, 0x33	; 51
    2fa4:	a0 83       	st	Z, r26
    2fa6:	31 97       	sbiw	r30, 0x01	; 1
    2fa8:	60 83       	st	Z, r22
    2faa:	31 97       	sbiw	r30, 0x01	; 1
    2fac:	70 83       	st	Z, r23
    2fae:	31 97       	sbiw	r30, 0x01	; 1
    2fb0:	10 82       	st	Z, r1
    2fb2:	31 97       	sbiw	r30, 0x01	; 1
    2fb4:	10 82       	st	Z, r1
    2fb6:	31 97       	sbiw	r30, 0x01	; 1
    2fb8:	60 e8       	ldi	r22, 0x80	; 128
    2fba:	60 83       	st	Z, r22
    2fbc:	31 97       	sbiw	r30, 0x01	; 1
    2fbe:	10 82       	st	Z, r1
    2fc0:	31 97       	sbiw	r30, 0x01	; 1
    2fc2:	10 82       	st	Z, r1
    2fc4:	31 97       	sbiw	r30, 0x01	; 1
    2fc6:	10 82       	st	Z, r1
    2fc8:	31 97       	sbiw	r30, 0x01	; 1
    2fca:	62 e0       	ldi	r22, 0x02	; 2
    2fcc:	60 83       	st	Z, r22
    2fce:	31 97       	sbiw	r30, 0x01	; 1
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	60 83       	st	Z, r22
    2fd4:	31 97       	sbiw	r30, 0x01	; 1
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	60 83       	st	Z, r22
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	65 e0       	ldi	r22, 0x05	; 5
    2fde:	60 83       	st	Z, r22
    2fe0:	31 97       	sbiw	r30, 0x01	; 1
    2fe2:	66 e0       	ldi	r22, 0x06	; 6
    2fe4:	60 83       	st	Z, r22
    2fe6:	31 97       	sbiw	r30, 0x01	; 1
    2fe8:	67 e0       	ldi	r22, 0x07	; 7
    2fea:	60 83       	st	Z, r22
    2fec:	31 97       	sbiw	r30, 0x01	; 1
    2fee:	68 e0       	ldi	r22, 0x08	; 8
    2ff0:	60 83       	st	Z, r22
    2ff2:	31 97       	sbiw	r30, 0x01	; 1
    2ff4:	69 e0       	ldi	r22, 0x09	; 9
    2ff6:	60 83       	st	Z, r22
    2ff8:	31 97       	sbiw	r30, 0x01	; 1
    2ffa:	60 e1       	ldi	r22, 0x10	; 16
    2ffc:	60 83       	st	Z, r22
    2ffe:	31 97       	sbiw	r30, 0x01	; 1
    3000:	30 83       	st	Z, r19
    3002:	31 97       	sbiw	r30, 0x01	; 1
    3004:	32 e1       	ldi	r19, 0x12	; 18
    3006:	30 83       	st	Z, r19
    3008:	31 97       	sbiw	r30, 0x01	; 1
    300a:	33 e1       	ldi	r19, 0x13	; 19
    300c:	30 83       	st	Z, r19
    300e:	31 97       	sbiw	r30, 0x01	; 1
    3010:	34 e1       	ldi	r19, 0x14	; 20
    3012:	30 83       	st	Z, r19
    3014:	31 97       	sbiw	r30, 0x01	; 1
    3016:	35 e1       	ldi	r19, 0x15	; 21
    3018:	30 83       	st	Z, r19
    301a:	31 97       	sbiw	r30, 0x01	; 1
    301c:	36 e1       	ldi	r19, 0x16	; 22
    301e:	30 83       	st	Z, r19
    3020:	31 97       	sbiw	r30, 0x01	; 1
    3022:	37 e1       	ldi	r19, 0x17	; 23
    3024:	30 83       	st	Z, r19
    3026:	31 97       	sbiw	r30, 0x01	; 1
    3028:	38 e1       	ldi	r19, 0x18	; 24
    302a:	30 83       	st	Z, r19
    302c:	31 97       	sbiw	r30, 0x01	; 1
    302e:	39 e1       	ldi	r19, 0x19	; 25
    3030:	30 83       	st	Z, r19
    3032:	31 97       	sbiw	r30, 0x01	; 1
    3034:	30 e2       	ldi	r19, 0x20	; 32
    3036:	30 83       	st	Z, r19
    3038:	31 97       	sbiw	r30, 0x01	; 1
    303a:	31 e2       	ldi	r19, 0x21	; 33
    303c:	30 83       	st	Z, r19
    303e:	31 97       	sbiw	r30, 0x01	; 1
    3040:	20 83       	st	Z, r18
    3042:	31 97       	sbiw	r30, 0x01	; 1
    3044:	23 e2       	ldi	r18, 0x23	; 35
    3046:	20 83       	st	Z, r18
    3048:	31 97       	sbiw	r30, 0x01	; 1
    304a:	40 83       	st	Z, r20
    304c:	31 97       	sbiw	r30, 0x01	; 1
    304e:	50 83       	st	Z, r21
    3050:	31 97       	sbiw	r30, 0x01	; 1
    3052:	26 e2       	ldi	r18, 0x26	; 38
    3054:	20 83       	st	Z, r18
    3056:	31 97       	sbiw	r30, 0x01	; 1
    3058:	27 e2       	ldi	r18, 0x27	; 39
    305a:	20 83       	st	Z, r18
    305c:	31 97       	sbiw	r30, 0x01	; 1
    305e:	28 e2       	ldi	r18, 0x28	; 40
    3060:	20 83       	st	Z, r18
    3062:	31 97       	sbiw	r30, 0x01	; 1
    3064:	29 e2       	ldi	r18, 0x29	; 41
    3066:	20 83       	st	Z, r18
    3068:	31 97       	sbiw	r30, 0x01	; 1
    306a:	20 e3       	ldi	r18, 0x30	; 48
    306c:	20 83       	st	Z, r18
    306e:	31 97       	sbiw	r30, 0x01	; 1
    3070:	21 e3       	ldi	r18, 0x31	; 49
    3072:	20 83       	st	Z, r18
    3074:	89 97       	sbiw	r24, 0x29	; 41
    3076:	08 95       	ret

00003078 <xPortStartScheduler>:
    3078:	88 ee       	ldi	r24, 0xE8	; 232
    307a:	93 e0       	ldi	r25, 0x03	; 3
    307c:	90 93 9a 1b 	sts	0x1B9A, r25	; 0x801b9a <portTickRateHz+0x1>
    3080:	80 93 99 1b 	sts	0x1B99, r24	; 0x801b99 <portTickRateHz>
    3084:	90 93 9c 1b 	sts	0x1B9C, r25	; 0x801b9c <ticksRemainingInSec+0x1>
    3088:	80 93 9b 1b 	sts	0x1B9B, r24	; 0x801b9b <ticksRemainingInSec>
    308c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    3090:	89 ef       	ldi	r24, 0xF9	; 249
    3092:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    3096:	8b e0       	ldi	r24, 0x0B	; 11
    3098:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    309c:	e1 e7       	ldi	r30, 0x71	; 113
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	82 60       	ori	r24, 0x02	; 2
    30a4:	80 83       	st	Z, r24
    30a6:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    30aa:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    30ae:	cd 91       	ld	r28, X+
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	dd 91       	ld	r29, X+
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	df 90       	pop	r13
    30dc:	cf 90       	pop	r12
    30de:	bf 90       	pop	r11
    30e0:	af 90       	pop	r10
    30e2:	9f 90       	pop	r9
    30e4:	8f 90       	pop	r8
    30e6:	7f 90       	pop	r7
    30e8:	6f 90       	pop	r6
    30ea:	5f 90       	pop	r5
    30ec:	4f 90       	pop	r4
    30ee:	3f 90       	pop	r3
    30f0:	2f 90       	pop	r2
    30f2:	1f 90       	pop	r1
    30f4:	0f 90       	pop	r0
    30f6:	0c be       	out	0x3c, r0	; 60
    30f8:	0f 90       	pop	r0
    30fa:	0b be       	out	0x3b, r0	; 59
    30fc:	0f 90       	pop	r0
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	0f 90       	pop	r0
    3102:	08 95       	ret
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	08 95       	ret

00003108 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3108:	0f 92       	push	r0
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	0f 92       	push	r0
    3110:	0b b6       	in	r0, 0x3b	; 59
    3112:	0f 92       	push	r0
    3114:	0c b6       	in	r0, 0x3c	; 60
    3116:	0f 92       	push	r0
    3118:	1f 92       	push	r1
    311a:	11 24       	eor	r1, r1
    311c:	2f 92       	push	r2
    311e:	3f 92       	push	r3
    3120:	4f 92       	push	r4
    3122:	5f 92       	push	r5
    3124:	6f 92       	push	r6
    3126:	7f 92       	push	r7
    3128:	8f 92       	push	r8
    312a:	9f 92       	push	r9
    312c:	af 92       	push	r10
    312e:	bf 92       	push	r11
    3130:	cf 92       	push	r12
    3132:	df 92       	push	r13
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	2f 93       	push	r18
    313e:	3f 93       	push	r19
    3140:	4f 93       	push	r20
    3142:	5f 93       	push	r21
    3144:	6f 93       	push	r22
    3146:	7f 93       	push	r23
    3148:	8f 93       	push	r24
    314a:	9f 93       	push	r25
    314c:	af 93       	push	r26
    314e:	bf 93       	push	r27
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ef 93       	push	r30
    3156:	ff 93       	push	r31
    3158:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    315c:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    3160:	0d b6       	in	r0, 0x3d	; 61
    3162:	0d 92       	st	X+, r0
    3164:	0e b6       	in	r0, 0x3e	; 62
    3166:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3168:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    316c:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    3170:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    3174:	cd 91       	ld	r28, X+
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	dd 91       	ld	r29, X+
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	bf 91       	pop	r27
    3186:	af 91       	pop	r26
    3188:	9f 91       	pop	r25
    318a:	8f 91       	pop	r24
    318c:	7f 91       	pop	r23
    318e:	6f 91       	pop	r22
    3190:	5f 91       	pop	r21
    3192:	4f 91       	pop	r20
    3194:	3f 91       	pop	r19
    3196:	2f 91       	pop	r18
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	bf 90       	pop	r11
    31a6:	af 90       	pop	r10
    31a8:	9f 90       	pop	r9
    31aa:	8f 90       	pop	r8
    31ac:	7f 90       	pop	r7
    31ae:	6f 90       	pop	r6
    31b0:	5f 90       	pop	r5
    31b2:	4f 90       	pop	r4
    31b4:	3f 90       	pop	r3
    31b6:	2f 90       	pop	r2
    31b8:	1f 90       	pop	r1
    31ba:	0f 90       	pop	r0
    31bc:	0c be       	out	0x3c, r0	; 60
    31be:	0f 90       	pop	r0
    31c0:	0b be       	out	0x3b, r0	; 59
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    31c8:	08 95       	ret

000031ca <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    31ca:	0f 92       	push	r0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	0f 92       	push	r0
    31d2:	0b b6       	in	r0, 0x3b	; 59
    31d4:	0f 92       	push	r0
    31d6:	0c b6       	in	r0, 0x3c	; 60
    31d8:	0f 92       	push	r0
    31da:	1f 92       	push	r1
    31dc:	11 24       	eor	r1, r1
    31de:	2f 92       	push	r2
    31e0:	3f 92       	push	r3
    31e2:	4f 92       	push	r4
    31e4:	5f 92       	push	r5
    31e6:	6f 92       	push	r6
    31e8:	7f 92       	push	r7
    31ea:	8f 92       	push	r8
    31ec:	9f 92       	push	r9
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	2f 93       	push	r18
    3200:	3f 93       	push	r19
    3202:	4f 93       	push	r20
    3204:	5f 93       	push	r21
    3206:	6f 93       	push	r22
    3208:	7f 93       	push	r23
    320a:	8f 93       	push	r24
    320c:	9f 93       	push	r25
    320e:	af 93       	push	r26
    3210:	bf 93       	push	r27
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	ef 93       	push	r30
    3218:	ff 93       	push	r31
    321a:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    321e:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    3222:	0d b6       	in	r0, 0x3d	; 61
    3224:	0d 92       	st	X+, r0
    3226:	0e b6       	in	r0, 0x3e	; 62
    3228:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    322a:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    322c:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <ticksRemainingInSec>
    3230:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <ticksRemainingInSec+0x1>
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	90 93 9c 1b 	sts	0x1B9C, r25	; 0x801b9c <ticksRemainingInSec+0x1>
    323a:	80 93 9b 1b 	sts	0x1B9B, r24	; 0x801b9b <ticksRemainingInSec>
    323e:	89 2b       	or	r24, r25
    3240:	41 f4       	brne	.+16     	; 0x3252 <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    3242:	80 91 99 1b 	lds	r24, 0x1B99	; 0x801b99 <portTickRateHz>
    3246:	90 91 9a 1b 	lds	r25, 0x1B9A	; 0x801b9a <portTickRateHz+0x1>
    324a:	90 93 9c 1b 	sts	0x1B9C, r25	; 0x801b9c <ticksRemainingInSec+0x1>
    324e:	80 93 9b 1b 	sts	0x1B9B, r24	; 0x801b9b <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    3252:	0e 94 37 29 	call	0x526e	; 0x526e <xTaskIncrementTick>
    3256:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    3258:	0e 94 f8 29 	call	0x53f0	; 0x53f0 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    325c:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    3260:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    3264:	cd 91       	ld	r28, X+
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	dd 91       	ld	r29, X+
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	ff 91       	pop	r31
    326e:	ef 91       	pop	r30
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	bf 91       	pop	r27
    3276:	af 91       	pop	r26
    3278:	9f 91       	pop	r25
    327a:	8f 91       	pop	r24
    327c:	7f 91       	pop	r23
    327e:	6f 91       	pop	r22
    3280:	5f 91       	pop	r21
    3282:	4f 91       	pop	r20
    3284:	3f 91       	pop	r19
    3286:	2f 91       	pop	r18
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	df 90       	pop	r13
    3292:	cf 90       	pop	r12
    3294:	bf 90       	pop	r11
    3296:	af 90       	pop	r10
    3298:	9f 90       	pop	r9
    329a:	8f 90       	pop	r8
    329c:	7f 90       	pop	r7
    329e:	6f 90       	pop	r6
    32a0:	5f 90       	pop	r5
    32a2:	4f 90       	pop	r4
    32a4:	3f 90       	pop	r3
    32a6:	2f 90       	pop	r2
    32a8:	1f 90       	pop	r1
    32aa:	0f 90       	pop	r0
    32ac:	0c be       	out	0x3c, r0	; 60
    32ae:	0f 90       	pop	r0
    32b0:	0b be       	out	0x3b, r0	; 59
    32b2:	0f 90       	pop	r0
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    32b8:	08 95       	ret

000032ba <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    32ba:	87 df       	rcall	.-242    	; 0x31ca <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    32bc:	18 95       	reti

000032be <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	08 2f       	mov	r16, r24
    32c8:	16 2f       	mov	r17, r22
    32ca:	66 23       	and	r22, r22
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <xQueueGenericCreate+0x12>
    32ce:	3b c0       	rjmp	.+118    	; 0x3346 <xQueueGenericCreate+0x88>
    32d0:	86 9f       	mul	r24, r22
    32d2:	c0 01       	movw	r24, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	80 96       	adiw	r24, 0x20	; 32
    32d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    32dc:	ec 01       	movw	r28, r24
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	21 f4       	brne	.+8      	; 0x32ea <xQueueGenericCreate+0x2c>
    32e2:	39 c0       	rjmp	.+114    	; 0x3356 <xQueueGenericCreate+0x98>
    32e4:	d9 83       	std	Y+1, r29	; 0x01
    32e6:	c8 83       	st	Y, r28
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <xQueueGenericCreate+0x32>
    32ea:	4f 96       	adiw	r24, 0x1f	; 31
    32ec:	99 83       	std	Y+1, r25	; 0x01
    32ee:	88 83       	st	Y, r24
    32f0:	0b 8f       	std	Y+27, r16	; 0x1b
    32f2:	1c 8f       	std	Y+28, r17	; 0x1c
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	0f 92       	push	r0
    32fa:	48 81       	ld	r20, Y
    32fc:	59 81       	ldd	r21, Y+1	; 0x01
    32fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3304:	62 9f       	mul	r22, r18
    3306:	c0 01       	movw	r24, r0
    3308:	63 9f       	mul	r22, r19
    330a:	90 0d       	add	r25, r0
    330c:	11 24       	eor	r1, r1
    330e:	ba 01       	movw	r22, r20
    3310:	68 0f       	add	r22, r24
    3312:	79 1f       	adc	r23, r25
    3314:	7b 83       	std	Y+3, r23	; 0x03
    3316:	6a 83       	std	Y+2, r22	; 0x02
    3318:	1a 8e       	std	Y+26, r1	; 0x1a
    331a:	5d 83       	std	Y+5, r21	; 0x05
    331c:	4c 83       	std	Y+4, r20	; 0x04
    331e:	82 1b       	sub	r24, r18
    3320:	93 0b       	sbc	r25, r19
    3322:	84 0f       	add	r24, r20
    3324:	95 1f       	adc	r25, r21
    3326:	9f 83       	std	Y+7, r25	; 0x07
    3328:	8e 83       	std	Y+6, r24	; 0x06
    332a:	8f ef       	ldi	r24, 0xFF	; 255
    332c:	8d 8f       	std	Y+29, r24	; 0x1d
    332e:	8e 8f       	std	Y+30, r24	; 0x1e
    3330:	ce 01       	movw	r24, r28
    3332:	08 96       	adiw	r24, 0x08	; 8
    3334:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    3338:	ce 01       	movw	r24, r28
    333a:	41 96       	adiw	r24, 0x11	; 17
    333c:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    3340:	0f 90       	pop	r0
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	08 c0       	rjmp	.+16     	; 0x3356 <xQueueGenericCreate+0x98>
    3346:	8f e1       	ldi	r24, 0x1F	; 31
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    334e:	ec 01       	movw	r28, r24
    3350:	89 2b       	or	r24, r25
    3352:	09 f0       	breq	.+2      	; 0x3356 <xQueueGenericCreate+0x98>
    3354:	c7 cf       	rjmp	.-114    	; 0x32e4 <xQueueGenericCreate+0x26>
    3356:	ce 01       	movw	r24, r28
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <xQueueCreateMutex>:
    3362:	9f 92       	push	r9
    3364:	af 92       	push	r10
    3366:	bf 92       	push	r11
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	00 d0       	rcall	.+0      	; 0x337a <xQueueCreateMutex+0x18>
    337a:	1f 92       	push	r1
    337c:	1f 92       	push	r1
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	8f e1       	ldi	r24, 0x1F	; 31
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    338a:	8c 01       	movw	r16, r24
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	09 f4       	brne	.+2      	; 0x3392 <xQueueCreateMutex+0x30>
    3390:	58 c1       	rjmp	.+688    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3392:	fc 01       	movw	r30, r24
    3394:	13 82       	std	Z+3, r1	; 0x03
    3396:	12 82       	std	Z+2, r1	; 0x02
    3398:	11 82       	std	Z+1, r1	; 0x01
    339a:	10 82       	st	Z, r1
    339c:	15 82       	std	Z+5, r1	; 0x05
    339e:	14 82       	std	Z+4, r1	; 0x04
    33a0:	17 82       	std	Z+7, r1	; 0x07
    33a2:	16 82       	std	Z+6, r1	; 0x06
    33a4:	12 8e       	std	Z+26, r1	; 0x1a
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	83 8f       	std	Z+27, r24	; 0x1b
    33aa:	14 8e       	std	Z+28, r1	; 0x1c
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	85 8f       	std	Z+29, r24	; 0x1d
    33b0:	86 8f       	std	Z+30, r24	; 0x1e
    33b2:	78 01       	movw	r14, r16
    33b4:	f8 e0       	ldi	r31, 0x08	; 8
    33b6:	ef 0e       	add	r14, r31
    33b8:	f1 1c       	adc	r15, r1
    33ba:	c7 01       	movw	r24, r14
    33bc:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    33c0:	68 01       	movw	r12, r16
    33c2:	81 e1       	ldi	r24, 0x11	; 17
    33c4:	c8 0e       	add	r12, r24
    33c6:	d1 1c       	adc	r13, r1
    33c8:	c6 01       	movw	r24, r12
    33ca:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    33ce:	1d 82       	std	Y+5, r1	; 0x05
    33d0:	1c 82       	std	Y+4, r1	; 0x04
    33d2:	a1 2c       	mov	r10, r1
    33d4:	99 24       	eor	r9, r9
    33d6:	93 94       	inc	r9
    33d8:	bb 24       	eor	r11, r11
    33da:	ba 94       	dec	r11
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	0f 92       	push	r0
    33e2:	f8 01       	movw	r30, r16
    33e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    33e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    33e8:	98 17       	cp	r25, r24
    33ea:	f0 f4       	brcc	.+60     	; 0x3428 <xQueueCreateMutex+0xc6>
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	89 2b       	or	r24, r25
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <xQueueCreateMutex+0x94>
    33f4:	1d c1       	rjmp	.+570    	; 0x3630 <xQueueCreateMutex+0x2ce>
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <xTaskPriorityDisinherit>
    33fe:	f8 01       	movw	r30, r16
    3400:	13 82       	std	Z+3, r1	; 0x03
    3402:	12 82       	std	Z+2, r1	; 0x02
    3404:	92 8d       	ldd	r25, Z+26	; 0x1a
    3406:	9f 5f       	subi	r25, 0xFF	; 255
    3408:	92 8f       	std	Z+26, r25	; 0x1a
    340a:	91 89       	ldd	r25, Z+17	; 0x11
    340c:	99 23       	and	r25, r25
    340e:	39 f0       	breq	.+14     	; 0x341e <xQueueCreateMutex+0xbc>
    3410:	c6 01       	movw	r24, r12
    3412:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	21 f4       	brne	.+8      	; 0x3422 <xQueueCreateMutex+0xc0>
    341a:	76 de       	rcall	.-788    	; 0x3108 <vPortYield>
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <xQueueCreateMutex+0xc0>
    341e:	81 11       	cpse	r24, r1
    3420:	73 de       	rcall	.-794    	; 0x3108 <vPortYield>
    3422:	0f 90       	pop	r0
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	0d c1       	rjmp	.+538    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	89 2b       	or	r24, r25
    342e:	19 f4       	brne	.+6      	; 0x3436 <xQueueCreateMutex+0xd4>
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	06 c1       	rjmp	.+524    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3436:	a1 10       	cpse	r10, r1
    3438:	05 c0       	rjmp	.+10     	; 0x3444 <xQueueCreateMutex+0xe2>
    343a:	ce 01       	movw	r24, r28
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	0e 94 23 2b 	call	0x5646	; 0x5646 <vTaskSetTimeOutState>
    3442:	a9 2c       	mov	r10, r9
    3444:	0f 90       	pop	r0
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	0f 92       	push	r0
    3452:	f8 01       	movw	r30, r16
    3454:	85 8d       	ldd	r24, Z+29	; 0x1d
    3456:	8f 3f       	cpi	r24, 0xFF	; 255
    3458:	09 f4       	brne	.+2      	; 0x345c <xQueueCreateMutex+0xfa>
    345a:	15 8e       	std	Z+29, r1	; 0x1d
    345c:	f8 01       	movw	r30, r16
    345e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3460:	8f 3f       	cpi	r24, 0xFF	; 255
    3462:	09 f4       	brne	.+2      	; 0x3466 <xQueueCreateMutex+0x104>
    3464:	16 8e       	std	Z+30, r1	; 0x1e
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	be 01       	movw	r22, r28
    346c:	6c 5f       	subi	r22, 0xFC	; 252
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	ce 01       	movw	r24, r28
    3472:	01 96       	adiw	r24, 0x01	; 1
    3474:	0e 94 2e 2b 	call	0x565c	; 0x565c <xTaskCheckForTimeOut>
    3478:	81 11       	cpse	r24, r1
    347a:	96 c0       	rjmp	.+300    	; 0x35a8 <xQueueCreateMutex+0x246>
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	0f 92       	push	r0
    3482:	f8 01       	movw	r30, r16
    3484:	92 8d       	ldd	r25, Z+26	; 0x1a
    3486:	83 8d       	ldd	r24, Z+27	; 0x1b
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	98 13       	cpse	r25, r24
    348e:	4a c0       	rjmp	.+148    	; 0x3524 <xQueueCreateMutex+0x1c2>
    3490:	6c 81       	ldd	r22, Y+4	; 0x04
    3492:	7d 81       	ldd	r23, Y+5	; 0x05
    3494:	c7 01       	movw	r24, r14
    3496:	0e 94 80 2a 	call	0x5500	; 0x5500 <vTaskPlaceOnEventList>
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	0f 92       	push	r0
    34a0:	f8 01       	movw	r30, r16
    34a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    34a4:	18 16       	cp	r1, r24
    34a6:	ac f4       	brge	.+42     	; 0x34d2 <xQueueCreateMutex+0x170>
    34a8:	81 89       	ldd	r24, Z+17	; 0x11
    34aa:	81 11       	cpse	r24, r1
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <xQueueCreateMutex+0x156>
    34ae:	11 c0       	rjmp	.+34     	; 0x34d2 <xQueueCreateMutex+0x170>
    34b0:	f8 01       	movw	r30, r16
    34b2:	81 89       	ldd	r24, Z+17	; 0x11
    34b4:	88 23       	and	r24, r24
    34b6:	69 f0       	breq	.+26     	; 0x34d2 <xQueueCreateMutex+0x170>
    34b8:	c6 01       	movw	r24, r12
    34ba:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    34be:	81 11       	cpse	r24, r1
    34c0:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    34c4:	f8 01       	movw	r30, r16
    34c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    34c8:	81 50       	subi	r24, 0x01	; 1
    34ca:	86 8f       	std	Z+30, r24	; 0x1e
    34cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    34ce:	18 16       	cp	r1, r24
    34d0:	7c f3       	brlt	.-34     	; 0x34b0 <xQueueCreateMutex+0x14e>
    34d2:	f8 01       	movw	r30, r16
    34d4:	b6 8e       	std	Z+30, r11	; 0x1e
    34d6:	0f 90       	pop	r0
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	0f 92       	push	r0
    34e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    34e2:	18 16       	cp	r1, r24
    34e4:	ac f4       	brge	.+42     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34e6:	80 85       	ldd	r24, Z+8	; 0x08
    34e8:	81 11       	cpse	r24, r1
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <xQueueCreateMutex+0x194>
    34ec:	11 c0       	rjmp	.+34     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34ee:	f8 01       	movw	r30, r16
    34f0:	80 85       	ldd	r24, Z+8	; 0x08
    34f2:	88 23       	and	r24, r24
    34f4:	69 f0       	breq	.+26     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34f6:	c7 01       	movw	r24, r14
    34f8:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    34fc:	81 11       	cpse	r24, r1
    34fe:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3502:	f8 01       	movw	r30, r16
    3504:	85 8d       	ldd	r24, Z+29	; 0x1d
    3506:	81 50       	subi	r24, 0x01	; 1
    3508:	85 8f       	std	Z+29, r24	; 0x1d
    350a:	85 8d       	ldd	r24, Z+29	; 0x1d
    350c:	18 16       	cp	r1, r24
    350e:	7c f3       	brlt	.-34     	; 0x34ee <xQueueCreateMutex+0x18c>
    3510:	f8 01       	movw	r30, r16
    3512:	b5 8e       	std	Z+29, r11	; 0x1d
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    351c:	81 11       	cpse	r24, r1
    351e:	5e cf       	rjmp	.-324    	; 0x33dc <xQueueCreateMutex+0x7a>
    3520:	f3 dd       	rcall	.-1050   	; 0x3108 <vPortYield>
    3522:	5c cf       	rjmp	.-328    	; 0x33dc <xQueueCreateMutex+0x7a>
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	0f 92       	push	r0
    352a:	f8 01       	movw	r30, r16
    352c:	86 8d       	ldd	r24, Z+30	; 0x1e
    352e:	18 16       	cp	r1, r24
    3530:	ac f4       	brge	.+42     	; 0x355c <xQueueCreateMutex+0x1fa>
    3532:	81 89       	ldd	r24, Z+17	; 0x11
    3534:	81 11       	cpse	r24, r1
    3536:	05 c0       	rjmp	.+10     	; 0x3542 <xQueueCreateMutex+0x1e0>
    3538:	11 c0       	rjmp	.+34     	; 0x355c <xQueueCreateMutex+0x1fa>
    353a:	f8 01       	movw	r30, r16
    353c:	81 89       	ldd	r24, Z+17	; 0x11
    353e:	88 23       	and	r24, r24
    3540:	69 f0       	breq	.+26     	; 0x355c <xQueueCreateMutex+0x1fa>
    3542:	c6 01       	movw	r24, r12
    3544:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3548:	81 11       	cpse	r24, r1
    354a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    354e:	f8 01       	movw	r30, r16
    3550:	86 8d       	ldd	r24, Z+30	; 0x1e
    3552:	81 50       	subi	r24, 0x01	; 1
    3554:	86 8f       	std	Z+30, r24	; 0x1e
    3556:	86 8d       	ldd	r24, Z+30	; 0x1e
    3558:	18 16       	cp	r1, r24
    355a:	7c f3       	brlt	.-34     	; 0x353a <xQueueCreateMutex+0x1d8>
    355c:	f8 01       	movw	r30, r16
    355e:	b6 8e       	std	Z+30, r11	; 0x1e
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	0f 92       	push	r0
    356a:	85 8d       	ldd	r24, Z+29	; 0x1d
    356c:	18 16       	cp	r1, r24
    356e:	ac f4       	brge	.+42     	; 0x359a <xQueueCreateMutex+0x238>
    3570:	80 85       	ldd	r24, Z+8	; 0x08
    3572:	81 11       	cpse	r24, r1
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <xQueueCreateMutex+0x21e>
    3576:	11 c0       	rjmp	.+34     	; 0x359a <xQueueCreateMutex+0x238>
    3578:	f8 01       	movw	r30, r16
    357a:	80 85       	ldd	r24, Z+8	; 0x08
    357c:	88 23       	and	r24, r24
    357e:	69 f0       	breq	.+26     	; 0x359a <xQueueCreateMutex+0x238>
    3580:	c7 01       	movw	r24, r14
    3582:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3586:	81 11       	cpse	r24, r1
    3588:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    358c:	f8 01       	movw	r30, r16
    358e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3590:	81 50       	subi	r24, 0x01	; 1
    3592:	85 8f       	std	Z+29, r24	; 0x1d
    3594:	85 8d       	ldd	r24, Z+29	; 0x1d
    3596:	18 16       	cp	r1, r24
    3598:	7c f3       	brlt	.-34     	; 0x3578 <xQueueCreateMutex+0x216>
    359a:	f8 01       	movw	r30, r16
    359c:	b5 8e       	std	Z+29, r11	; 0x1d
    359e:	0f 90       	pop	r0
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    35a6:	1a cf       	rjmp	.-460    	; 0x33dc <xQueueCreateMutex+0x7a>
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	0f 92       	push	r0
    35ae:	f8 01       	movw	r30, r16
    35b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    35b2:	18 16       	cp	r1, r24
    35b4:	ac f4       	brge	.+42     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35b6:	81 89       	ldd	r24, Z+17	; 0x11
    35b8:	81 11       	cpse	r24, r1
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <xQueueCreateMutex+0x264>
    35bc:	11 c0       	rjmp	.+34     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35be:	f8 01       	movw	r30, r16
    35c0:	81 89       	ldd	r24, Z+17	; 0x11
    35c2:	88 23       	and	r24, r24
    35c4:	69 f0       	breq	.+26     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35c6:	c6 01       	movw	r24, r12
    35c8:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    35cc:	81 11       	cpse	r24, r1
    35ce:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    35d2:	f8 01       	movw	r30, r16
    35d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    35d6:	81 50       	subi	r24, 0x01	; 1
    35d8:	86 8f       	std	Z+30, r24	; 0x1e
    35da:	86 8d       	ldd	r24, Z+30	; 0x1e
    35dc:	18 16       	cp	r1, r24
    35de:	7c f3       	brlt	.-34     	; 0x35be <xQueueCreateMutex+0x25c>
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	f8 01       	movw	r30, r16
    35e4:	86 8f       	std	Z+30, r24	; 0x1e
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	0f 92       	push	r0
    35f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    35f2:	18 16       	cp	r1, r24
    35f4:	ac f4       	brge	.+42     	; 0x3620 <xQueueCreateMutex+0x2be>
    35f6:	80 85       	ldd	r24, Z+8	; 0x08
    35f8:	81 11       	cpse	r24, r1
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <xQueueCreateMutex+0x2a4>
    35fc:	11 c0       	rjmp	.+34     	; 0x3620 <xQueueCreateMutex+0x2be>
    35fe:	f8 01       	movw	r30, r16
    3600:	80 85       	ldd	r24, Z+8	; 0x08
    3602:	88 23       	and	r24, r24
    3604:	69 f0       	breq	.+26     	; 0x3620 <xQueueCreateMutex+0x2be>
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    360c:	81 11       	cpse	r24, r1
    360e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3612:	f8 01       	movw	r30, r16
    3614:	85 8d       	ldd	r24, Z+29	; 0x1d
    3616:	81 50       	subi	r24, 0x01	; 1
    3618:	85 8f       	std	Z+29, r24	; 0x1d
    361a:	85 8d       	ldd	r24, Z+29	; 0x1d
    361c:	18 16       	cp	r1, r24
    361e:	7c f3       	brlt	.-34     	; 0x35fe <xQueueCreateMutex+0x29c>
    3620:	8f ef       	ldi	r24, 0xFF	; 255
    3622:	f8 01       	movw	r30, r16
    3624:	85 8f       	std	Z+29, r24	; 0x1d
    3626:	0f 90       	pop	r0
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    362e:	09 c0       	rjmp	.+18     	; 0x3642 <xQueueCreateMutex+0x2e0>
    3630:	f8 01       	movw	r30, r16
    3632:	82 8d       	ldd	r24, Z+26	; 0x1a
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	82 8f       	std	Z+26, r24	; 0x1a
    3638:	81 89       	ldd	r24, Z+17	; 0x11
    363a:	88 23       	and	r24, r24
    363c:	09 f4       	brne	.+2      	; 0x3640 <xQueueCreateMutex+0x2de>
    363e:	f1 ce       	rjmp	.-542    	; 0x3422 <xQueueCreateMutex+0xc0>
    3640:	e7 ce       	rjmp	.-562    	; 0x3410 <xQueueCreateMutex+0xae>
    3642:	c8 01       	movw	r24, r16
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	af 90       	pop	r10
    3662:	9f 90       	pop	r9
    3664:	08 95       	ret

00003666 <xQueueGenericSend>:
    3666:	6f 92       	push	r6
    3668:	7f 92       	push	r7
    366a:	8f 92       	push	r8
    366c:	9f 92       	push	r9
    366e:	af 92       	push	r10
    3670:	bf 92       	push	r11
    3672:	cf 92       	push	r12
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	00 d0       	rcall	.+0      	; 0x3684 <xQueueGenericSend+0x1e>
    3684:	1f 92       	push	r1
    3686:	1f 92       	push	r1
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	8c 01       	movw	r16, r24
    368e:	5b 01       	movw	r10, r22
    3690:	5d 83       	std	Y+5, r21	; 0x05
    3692:	4c 83       	std	Y+4, r20	; 0x04
    3694:	72 2e       	mov	r7, r18
    3696:	81 2c       	mov	r8, r1
    3698:	66 24       	eor	r6, r6
    369a:	63 94       	inc	r6
    369c:	99 24       	eor	r9, r9
    369e:	9a 94       	dec	r9
    36a0:	7c 01       	movw	r14, r24
    36a2:	88 e0       	ldi	r24, 0x08	; 8
    36a4:	e8 0e       	add	r14, r24
    36a6:	f1 1c       	adc	r15, r1
    36a8:	68 01       	movw	r12, r16
    36aa:	e1 e1       	ldi	r30, 0x11	; 17
    36ac:	ce 0e       	add	r12, r30
    36ae:	d1 1c       	adc	r13, r1
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	0f 92       	push	r0
    36b6:	f8 01       	movw	r30, r16
    36b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    36ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    36bc:	98 17       	cp	r25, r24
    36be:	20 f0       	brcs	.+8      	; 0x36c8 <xQueueGenericSend+0x62>
    36c0:	f2 e0       	ldi	r31, 0x02	; 2
    36c2:	7f 12       	cpse	r7, r31
    36c4:	6e c0       	rjmp	.+220    	; 0x37a2 <xQueueGenericSend+0x13c>
    36c6:	7d c1       	rjmp	.+762    	; 0x39c2 <xQueueGenericSend+0x35c>
    36c8:	f8 01       	movw	r30, r16
    36ca:	44 8d       	ldd	r20, Z+28	; 0x1c
    36cc:	41 11       	cpse	r20, r1
    36ce:	15 c0       	rjmp	.+42     	; 0x36fa <xQueueGenericSend+0x94>
    36d0:	f8 01       	movw	r30, r16
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	89 2b       	or	r24, r25
    36d8:	09 f0       	breq	.+2      	; 0x36dc <xQueueGenericSend+0x76>
    36da:	79 c1       	rjmp	.+754    	; 0x39ce <xQueueGenericSend+0x368>
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	93 81       	ldd	r25, Z+3	; 0x03
    36e0:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <xTaskPriorityDisinherit>
    36e4:	f8 01       	movw	r30, r16
    36e6:	13 82       	std	Z+3, r1	; 0x03
    36e8:	12 82       	std	Z+2, r1	; 0x02
    36ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    36ec:	9f 5f       	subi	r25, 0xFF	; 255
    36ee:	92 8f       	std	Z+26, r25	; 0x1a
    36f0:	91 89       	ldd	r25, Z+17	; 0x11
    36f2:	99 23       	and	r25, r25
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <xQueueGenericSend+0x92>
    36f6:	4f c0       	rjmp	.+158    	; 0x3796 <xQueueGenericSend+0x130>
    36f8:	46 c0       	rjmp	.+140    	; 0x3786 <xQueueGenericSend+0x120>
    36fa:	71 10       	cpse	r7, r1
    36fc:	1a c0       	rjmp	.+52     	; 0x3732 <xQueueGenericSend+0xcc>
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	b5 01       	movw	r22, r10
    3702:	f8 01       	movw	r30, r16
    3704:	84 81       	ldd	r24, Z+4	; 0x04
    3706:	95 81       	ldd	r25, Z+5	; 0x05
    3708:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    370c:	f8 01       	movw	r30, r16
    370e:	24 8d       	ldd	r18, Z+28	; 0x1c
    3710:	84 81       	ldd	r24, Z+4	; 0x04
    3712:	95 81       	ldd	r25, Z+5	; 0x05
    3714:	82 0f       	add	r24, r18
    3716:	91 1d       	adc	r25, r1
    3718:	95 83       	std	Z+5, r25	; 0x05
    371a:	84 83       	std	Z+4, r24	; 0x04
    371c:	22 81       	ldd	r18, Z+2	; 0x02
    371e:	33 81       	ldd	r19, Z+3	; 0x03
    3720:	82 17       	cp	r24, r18
    3722:	93 07       	cpc	r25, r19
    3724:	08 f4       	brcc	.+2      	; 0x3728 <xQueueGenericSend+0xc2>
    3726:	53 c1       	rjmp	.+678    	; 0x39ce <xQueueGenericSend+0x368>
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	95 83       	std	Z+5, r25	; 0x05
    372e:	84 83       	std	Z+4, r24	; 0x04
    3730:	4e c1       	rjmp	.+668    	; 0x39ce <xQueueGenericSend+0x368>
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	b5 01       	movw	r22, r10
    3736:	f8 01       	movw	r30, r16
    3738:	86 81       	ldd	r24, Z+6	; 0x06
    373a:	97 81       	ldd	r25, Z+7	; 0x07
    373c:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    3740:	f8 01       	movw	r30, r16
    3742:	84 8d       	ldd	r24, Z+28	; 0x1c
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	91 95       	neg	r25
    3748:	81 95       	neg	r24
    374a:	91 09       	sbc	r25, r1
    374c:	26 81       	ldd	r18, Z+6	; 0x06
    374e:	37 81       	ldd	r19, Z+7	; 0x07
    3750:	28 0f       	add	r18, r24
    3752:	39 1f       	adc	r19, r25
    3754:	37 83       	std	Z+7, r19	; 0x07
    3756:	26 83       	std	Z+6, r18	; 0x06
    3758:	40 81       	ld	r20, Z
    375a:	51 81       	ldd	r21, Z+1	; 0x01
    375c:	24 17       	cp	r18, r20
    375e:	35 07       	cpc	r19, r21
    3760:	30 f4       	brcc	.+12     	; 0x376e <xQueueGenericSend+0x108>
    3762:	22 81       	ldd	r18, Z+2	; 0x02
    3764:	33 81       	ldd	r19, Z+3	; 0x03
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	97 83       	std	Z+7, r25	; 0x07
    376c:	86 83       	std	Z+6, r24	; 0x06
    376e:	f2 e0       	ldi	r31, 0x02	; 2
    3770:	7f 12       	cpse	r7, r31
    3772:	2d c1       	rjmp	.+602    	; 0x39ce <xQueueGenericSend+0x368>
    3774:	f8 01       	movw	r30, r16
    3776:	82 8d       	ldd	r24, Z+26	; 0x1a
    3778:	88 23       	and	r24, r24
    377a:	09 f4       	brne	.+2      	; 0x377e <xQueueGenericSend+0x118>
    377c:	28 c1       	rjmp	.+592    	; 0x39ce <xQueueGenericSend+0x368>
    377e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3780:	81 50       	subi	r24, 0x01	; 1
    3782:	82 8f       	std	Z+26, r24	; 0x1a
    3784:	24 c1       	rjmp	.+584    	; 0x39ce <xQueueGenericSend+0x368>
    3786:	c8 01       	movw	r24, r16
    3788:	41 96       	adiw	r24, 0x11	; 17
    378a:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    378e:	81 30       	cpi	r24, 0x01	; 1
    3790:	21 f4       	brne	.+8      	; 0x379a <xQueueGenericSend+0x134>
    3792:	ba dc       	rcall	.-1676   	; 0x3108 <vPortYield>
    3794:	02 c0       	rjmp	.+4      	; 0x379a <xQueueGenericSend+0x134>
    3796:	81 11       	cpse	r24, r1
    3798:	b7 dc       	rcall	.-1682   	; 0x3108 <vPortYield>
    379a:	0f 90       	pop	r0
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	1e c1       	rjmp	.+572    	; 0x39de <xQueueGenericSend+0x378>
    37a2:	8c 81       	ldd	r24, Y+4	; 0x04
    37a4:	9d 81       	ldd	r25, Y+5	; 0x05
    37a6:	89 2b       	or	r24, r25
    37a8:	21 f4       	brne	.+8      	; 0x37b2 <xQueueGenericSend+0x14c>
    37aa:	0f 90       	pop	r0
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	16 c1       	rjmp	.+556    	; 0x39de <xQueueGenericSend+0x378>
    37b2:	81 10       	cpse	r8, r1
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <xQueueGenericSend+0x15a>
    37b6:	ce 01       	movw	r24, r28
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	0e 94 23 2b 	call	0x5646	; 0x5646 <vTaskSetTimeOutState>
    37be:	86 2c       	mov	r8, r6
    37c0:	0f 90       	pop	r0
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	0f 92       	push	r0
    37ce:	f8 01       	movw	r30, r16
    37d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    37d2:	8f 3f       	cpi	r24, 0xFF	; 255
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <xQueueGenericSend+0x172>
    37d6:	15 8e       	std	Z+29, r1	; 0x1d
    37d8:	f8 01       	movw	r30, r16
    37da:	86 8d       	ldd	r24, Z+30	; 0x1e
    37dc:	8f 3f       	cpi	r24, 0xFF	; 255
    37de:	09 f4       	brne	.+2      	; 0x37e2 <xQueueGenericSend+0x17c>
    37e0:	16 8e       	std	Z+30, r1	; 0x1e
    37e2:	0f 90       	pop	r0
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	be 01       	movw	r22, r28
    37e8:	6c 5f       	subi	r22, 0xFC	; 252
    37ea:	7f 4f       	sbci	r23, 0xFF	; 255
    37ec:	ce 01       	movw	r24, r28
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	0e 94 2e 2b 	call	0x565c	; 0x565c <xTaskCheckForTimeOut>
    37f4:	81 11       	cpse	r24, r1
    37f6:	96 c0       	rjmp	.+300    	; 0x3924 <xQueueGenericSend+0x2be>
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	0f 92       	push	r0
    37fe:	f8 01       	movw	r30, r16
    3800:	92 8d       	ldd	r25, Z+26	; 0x1a
    3802:	83 8d       	ldd	r24, Z+27	; 0x1b
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	98 13       	cpse	r25, r24
    380a:	4a c0       	rjmp	.+148    	; 0x38a0 <xQueueGenericSend+0x23a>
    380c:	6c 81       	ldd	r22, Y+4	; 0x04
    380e:	7d 81       	ldd	r23, Y+5	; 0x05
    3810:	c7 01       	movw	r24, r14
    3812:	0e 94 80 2a 	call	0x5500	; 0x5500 <vTaskPlaceOnEventList>
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	0f 92       	push	r0
    381c:	f8 01       	movw	r30, r16
    381e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3820:	18 16       	cp	r1, r24
    3822:	ac f4       	brge	.+42     	; 0x384e <xQueueGenericSend+0x1e8>
    3824:	81 89       	ldd	r24, Z+17	; 0x11
    3826:	81 11       	cpse	r24, r1
    3828:	05 c0       	rjmp	.+10     	; 0x3834 <xQueueGenericSend+0x1ce>
    382a:	11 c0       	rjmp	.+34     	; 0x384e <xQueueGenericSend+0x1e8>
    382c:	f8 01       	movw	r30, r16
    382e:	81 89       	ldd	r24, Z+17	; 0x11
    3830:	88 23       	and	r24, r24
    3832:	69 f0       	breq	.+26     	; 0x384e <xQueueGenericSend+0x1e8>
    3834:	c6 01       	movw	r24, r12
    3836:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    383a:	81 11       	cpse	r24, r1
    383c:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3840:	f8 01       	movw	r30, r16
    3842:	86 8d       	ldd	r24, Z+30	; 0x1e
    3844:	81 50       	subi	r24, 0x01	; 1
    3846:	86 8f       	std	Z+30, r24	; 0x1e
    3848:	86 8d       	ldd	r24, Z+30	; 0x1e
    384a:	18 16       	cp	r1, r24
    384c:	7c f3       	brlt	.-34     	; 0x382c <xQueueGenericSend+0x1c6>
    384e:	f8 01       	movw	r30, r16
    3850:	96 8e       	std	Z+30, r9	; 0x1e
    3852:	0f 90       	pop	r0
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	0f 92       	push	r0
    385c:	85 8d       	ldd	r24, Z+29	; 0x1d
    385e:	18 16       	cp	r1, r24
    3860:	ac f4       	brge	.+42     	; 0x388c <xQueueGenericSend+0x226>
    3862:	80 85       	ldd	r24, Z+8	; 0x08
    3864:	81 11       	cpse	r24, r1
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <xQueueGenericSend+0x20c>
    3868:	11 c0       	rjmp	.+34     	; 0x388c <xQueueGenericSend+0x226>
    386a:	f8 01       	movw	r30, r16
    386c:	80 85       	ldd	r24, Z+8	; 0x08
    386e:	88 23       	and	r24, r24
    3870:	69 f0       	breq	.+26     	; 0x388c <xQueueGenericSend+0x226>
    3872:	c7 01       	movw	r24, r14
    3874:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3878:	81 11       	cpse	r24, r1
    387a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    387e:	f8 01       	movw	r30, r16
    3880:	85 8d       	ldd	r24, Z+29	; 0x1d
    3882:	81 50       	subi	r24, 0x01	; 1
    3884:	85 8f       	std	Z+29, r24	; 0x1d
    3886:	85 8d       	ldd	r24, Z+29	; 0x1d
    3888:	18 16       	cp	r1, r24
    388a:	7c f3       	brlt	.-34     	; 0x386a <xQueueGenericSend+0x204>
    388c:	f8 01       	movw	r30, r16
    388e:	95 8e       	std	Z+29, r9	; 0x1d
    3890:	0f 90       	pop	r0
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3898:	81 11       	cpse	r24, r1
    389a:	0a cf       	rjmp	.-492    	; 0x36b0 <xQueueGenericSend+0x4a>
    389c:	35 dc       	rcall	.-1942   	; 0x3108 <vPortYield>
    389e:	08 cf       	rjmp	.-496    	; 0x36b0 <xQueueGenericSend+0x4a>
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	0f 92       	push	r0
    38a6:	f8 01       	movw	r30, r16
    38a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    38aa:	18 16       	cp	r1, r24
    38ac:	ac f4       	brge	.+42     	; 0x38d8 <xQueueGenericSend+0x272>
    38ae:	81 89       	ldd	r24, Z+17	; 0x11
    38b0:	81 11       	cpse	r24, r1
    38b2:	05 c0       	rjmp	.+10     	; 0x38be <xQueueGenericSend+0x258>
    38b4:	11 c0       	rjmp	.+34     	; 0x38d8 <xQueueGenericSend+0x272>
    38b6:	f8 01       	movw	r30, r16
    38b8:	81 89       	ldd	r24, Z+17	; 0x11
    38ba:	88 23       	and	r24, r24
    38bc:	69 f0       	breq	.+26     	; 0x38d8 <xQueueGenericSend+0x272>
    38be:	c6 01       	movw	r24, r12
    38c0:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    38c4:	81 11       	cpse	r24, r1
    38c6:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    38ca:	f8 01       	movw	r30, r16
    38cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    38ce:	81 50       	subi	r24, 0x01	; 1
    38d0:	86 8f       	std	Z+30, r24	; 0x1e
    38d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    38d4:	18 16       	cp	r1, r24
    38d6:	7c f3       	brlt	.-34     	; 0x38b6 <xQueueGenericSend+0x250>
    38d8:	f8 01       	movw	r30, r16
    38da:	96 8e       	std	Z+30, r9	; 0x1e
    38dc:	0f 90       	pop	r0
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	0f 92       	push	r0
    38e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    38e8:	18 16       	cp	r1, r24
    38ea:	ac f4       	brge	.+42     	; 0x3916 <xQueueGenericSend+0x2b0>
    38ec:	80 85       	ldd	r24, Z+8	; 0x08
    38ee:	81 11       	cpse	r24, r1
    38f0:	05 c0       	rjmp	.+10     	; 0x38fc <xQueueGenericSend+0x296>
    38f2:	11 c0       	rjmp	.+34     	; 0x3916 <xQueueGenericSend+0x2b0>
    38f4:	f8 01       	movw	r30, r16
    38f6:	80 85       	ldd	r24, Z+8	; 0x08
    38f8:	88 23       	and	r24, r24
    38fa:	69 f0       	breq	.+26     	; 0x3916 <xQueueGenericSend+0x2b0>
    38fc:	c7 01       	movw	r24, r14
    38fe:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3902:	81 11       	cpse	r24, r1
    3904:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3908:	f8 01       	movw	r30, r16
    390a:	85 8d       	ldd	r24, Z+29	; 0x1d
    390c:	81 50       	subi	r24, 0x01	; 1
    390e:	85 8f       	std	Z+29, r24	; 0x1d
    3910:	85 8d       	ldd	r24, Z+29	; 0x1d
    3912:	18 16       	cp	r1, r24
    3914:	7c f3       	brlt	.-34     	; 0x38f4 <xQueueGenericSend+0x28e>
    3916:	f8 01       	movw	r30, r16
    3918:	95 8e       	std	Z+29, r9	; 0x1d
    391a:	0f 90       	pop	r0
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3922:	c6 ce       	rjmp	.-628    	; 0x36b0 <xQueueGenericSend+0x4a>
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	f8 94       	cli
    3928:	0f 92       	push	r0
    392a:	f8 01       	movw	r30, r16
    392c:	86 8d       	ldd	r24, Z+30	; 0x1e
    392e:	18 16       	cp	r1, r24
    3930:	d4 f4       	brge	.+52     	; 0x3966 <xQueueGenericSend+0x300>
    3932:	81 89       	ldd	r24, Z+17	; 0x11
    3934:	81 11       	cpse	r24, r1
    3936:	06 c0       	rjmp	.+12     	; 0x3944 <xQueueGenericSend+0x2de>
    3938:	16 c0       	rjmp	.+44     	; 0x3966 <xQueueGenericSend+0x300>
    393a:	f8 01       	movw	r30, r16
    393c:	81 89       	ldd	r24, Z+17	; 0x11
    393e:	81 11       	cpse	r24, r1
    3940:	05 c0       	rjmp	.+10     	; 0x394c <xQueueGenericSend+0x2e6>
    3942:	11 c0       	rjmp	.+34     	; 0x3966 <xQueueGenericSend+0x300>
    3944:	78 01       	movw	r14, r16
    3946:	f1 e1       	ldi	r31, 0x11	; 17
    3948:	ef 0e       	add	r14, r31
    394a:	f1 1c       	adc	r15, r1
    394c:	c7 01       	movw	r24, r14
    394e:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3952:	81 11       	cpse	r24, r1
    3954:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3958:	f8 01       	movw	r30, r16
    395a:	86 8d       	ldd	r24, Z+30	; 0x1e
    395c:	81 50       	subi	r24, 0x01	; 1
    395e:	86 8f       	std	Z+30, r24	; 0x1e
    3960:	86 8d       	ldd	r24, Z+30	; 0x1e
    3962:	18 16       	cp	r1, r24
    3964:	54 f3       	brlt	.-44     	; 0x393a <xQueueGenericSend+0x2d4>
    3966:	8f ef       	ldi	r24, 0xFF	; 255
    3968:	f8 01       	movw	r30, r16
    396a:	86 8f       	std	Z+30, r24	; 0x1e
    396c:	0f 90       	pop	r0
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	0f 92       	push	r0
    3976:	85 8d       	ldd	r24, Z+29	; 0x1d
    3978:	18 16       	cp	r1, r24
    397a:	d4 f4       	brge	.+52     	; 0x39b0 <xQueueGenericSend+0x34a>
    397c:	80 85       	ldd	r24, Z+8	; 0x08
    397e:	81 11       	cpse	r24, r1
    3980:	06 c0       	rjmp	.+12     	; 0x398e <xQueueGenericSend+0x328>
    3982:	16 c0       	rjmp	.+44     	; 0x39b0 <xQueueGenericSend+0x34a>
    3984:	f8 01       	movw	r30, r16
    3986:	80 85       	ldd	r24, Z+8	; 0x08
    3988:	81 11       	cpse	r24, r1
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <xQueueGenericSend+0x330>
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <xQueueGenericSend+0x34a>
    398e:	78 01       	movw	r14, r16
    3990:	f8 e0       	ldi	r31, 0x08	; 8
    3992:	ef 0e       	add	r14, r31
    3994:	f1 1c       	adc	r15, r1
    3996:	c7 01       	movw	r24, r14
    3998:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    399c:	81 11       	cpse	r24, r1
    399e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    39a2:	f8 01       	movw	r30, r16
    39a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    39a6:	81 50       	subi	r24, 0x01	; 1
    39a8:	85 8f       	std	Z+29, r24	; 0x1d
    39aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    39ac:	18 16       	cp	r1, r24
    39ae:	54 f3       	brlt	.-44     	; 0x3984 <xQueueGenericSend+0x31e>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	f8 01       	movw	r30, r16
    39b4:	85 8f       	std	Z+29, r24	; 0x1d
    39b6:	0f 90       	pop	r0
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	0e c0       	rjmp	.+28     	; 0x39de <xQueueGenericSend+0x378>
    39c2:	f8 01       	movw	r30, r16
    39c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    39c6:	44 23       	and	r20, r20
    39c8:	09 f4       	brne	.+2      	; 0x39cc <xQueueGenericSend+0x366>
    39ca:	82 ce       	rjmp	.-764    	; 0x36d0 <xQueueGenericSend+0x6a>
    39cc:	b2 ce       	rjmp	.-668    	; 0x3732 <xQueueGenericSend+0xcc>
    39ce:	f8 01       	movw	r30, r16
    39d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	82 8f       	std	Z+26, r24	; 0x1a
    39d6:	81 89       	ldd	r24, Z+17	; 0x11
    39d8:	81 11       	cpse	r24, r1
    39da:	d5 ce       	rjmp	.-598    	; 0x3786 <xQueueGenericSend+0x120>
    39dc:	de ce       	rjmp	.-580    	; 0x379a <xQueueGenericSend+0x134>
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	8f 90       	pop	r8
    3a00:	7f 90       	pop	r7
    3a02:	6f 90       	pop	r6
    3a04:	08 95       	ret

00003a06 <xQueueGive>:
    3a06:	9f 92       	push	r9
    3a08:	af 92       	push	r10
    3a0a:	bf 92       	push	r11
    3a0c:	cf 92       	push	r12
    3a0e:	df 92       	push	r13
    3a10:	ef 92       	push	r14
    3a12:	ff 92       	push	r15
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <xQueueGive+0x18>
    3a1e:	1f 92       	push	r1
    3a20:	1f 92       	push	r1
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	8c 01       	movw	r16, r24
    3a28:	7d 83       	std	Y+5, r23	; 0x05
    3a2a:	6c 83       	std	Y+4, r22	; 0x04
    3a2c:	a1 2c       	mov	r10, r1
    3a2e:	99 24       	eor	r9, r9
    3a30:	93 94       	inc	r9
    3a32:	bb 24       	eor	r11, r11
    3a34:	ba 94       	dec	r11
    3a36:	7c 01       	movw	r14, r24
    3a38:	88 e0       	ldi	r24, 0x08	; 8
    3a3a:	e8 0e       	add	r14, r24
    3a3c:	f1 1c       	adc	r15, r1
    3a3e:	68 01       	movw	r12, r16
    3a40:	e1 e1       	ldi	r30, 0x11	; 17
    3a42:	ce 0e       	add	r12, r30
    3a44:	d1 1c       	adc	r13, r1
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	0f 92       	push	r0
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a50:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a52:	98 17       	cp	r25, r24
    3a54:	00 f5       	brcc	.+64     	; 0x3a96 <xQueueGive+0x90>
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	89 2b       	or	r24, r25
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <xQueueGive+0x5a>
    3a5e:	2b c1       	rjmp	.+598    	; 0x3cb6 <xQueueGive+0x2b0>
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <xTaskPriorityDisinherit>
    3a68:	f8 01       	movw	r30, r16
    3a6a:	13 82       	std	Z+3, r1	; 0x03
    3a6c:	12 82       	std	Z+2, r1	; 0x02
    3a6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a70:	9f 5f       	subi	r25, 0xFF	; 255
    3a72:	92 8f       	std	Z+26, r25	; 0x1a
    3a74:	91 89       	ldd	r25, Z+17	; 0x11
    3a76:	99 23       	and	r25, r25
    3a78:	41 f0       	breq	.+16     	; 0x3a8a <xQueueGive+0x84>
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	41 96       	adiw	r24, 0x11	; 17
    3a7e:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3a82:	81 30       	cpi	r24, 0x01	; 1
    3a84:	21 f4       	brne	.+8      	; 0x3a8e <xQueueGive+0x88>
    3a86:	40 db       	rcall	.-2432   	; 0x3108 <vPortYield>
    3a88:	02 c0       	rjmp	.+4      	; 0x3a8e <xQueueGive+0x88>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	3d db       	rcall	.-2438   	; 0x3108 <vPortYield>
    3a8e:	0f 90       	pop	r0
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	18 c1       	rjmp	.+560    	; 0x3cc6 <xQueueGive+0x2c0>
    3a96:	8c 81       	ldd	r24, Y+4	; 0x04
    3a98:	9d 81       	ldd	r25, Y+5	; 0x05
    3a9a:	89 2b       	or	r24, r25
    3a9c:	21 f4       	brne	.+8      	; 0x3aa6 <xQueueGive+0xa0>
    3a9e:	0f 90       	pop	r0
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	10 c1       	rjmp	.+544    	; 0x3cc6 <xQueueGive+0x2c0>
    3aa6:	a1 10       	cpse	r10, r1
    3aa8:	05 c0       	rjmp	.+10     	; 0x3ab4 <xQueueGive+0xae>
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	0e 94 23 2b 	call	0x5646	; 0x5646 <vTaskSetTimeOutState>
    3ab2:	a9 2c       	mov	r10, r9
    3ab4:	0f 90       	pop	r0
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	0f 92       	push	r0
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <xQueueGive+0xc6>
    3aca:	15 8e       	std	Z+29, r1	; 0x1d
    3acc:	f8 01       	movw	r30, r16
    3ace:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <xQueueGive+0xd0>
    3ad4:	16 8e       	std	Z+30, r1	; 0x1e
    3ad6:	0f 90       	pop	r0
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	be 01       	movw	r22, r28
    3adc:	6c 5f       	subi	r22, 0xFC	; 252
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	01 96       	adiw	r24, 0x01	; 1
    3ae4:	0e 94 2e 2b 	call	0x565c	; 0x565c <xTaskCheckForTimeOut>
    3ae8:	81 11       	cpse	r24, r1
    3aea:	96 c0       	rjmp	.+300    	; 0x3c18 <xQueueGive+0x212>
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	0f 92       	push	r0
    3af2:	f8 01       	movw	r30, r16
    3af4:	92 8d       	ldd	r25, Z+26	; 0x1a
    3af6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3af8:	0f 90       	pop	r0
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	98 13       	cpse	r25, r24
    3afe:	4a c0       	rjmp	.+148    	; 0x3b94 <xQueueGive+0x18e>
    3b00:	6c 81       	ldd	r22, Y+4	; 0x04
    3b02:	7d 81       	ldd	r23, Y+5	; 0x05
    3b04:	c7 01       	movw	r24, r14
    3b06:	0e 94 80 2a 	call	0x5500	; 0x5500 <vTaskPlaceOnEventList>
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	0f 92       	push	r0
    3b10:	f8 01       	movw	r30, r16
    3b12:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b14:	18 16       	cp	r1, r24
    3b16:	ac f4       	brge	.+42     	; 0x3b42 <xQueueGive+0x13c>
    3b18:	81 89       	ldd	r24, Z+17	; 0x11
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <xQueueGive+0x122>
    3b1e:	11 c0       	rjmp	.+34     	; 0x3b42 <xQueueGive+0x13c>
    3b20:	f8 01       	movw	r30, r16
    3b22:	81 89       	ldd	r24, Z+17	; 0x11
    3b24:	88 23       	and	r24, r24
    3b26:	69 f0       	breq	.+26     	; 0x3b42 <xQueueGive+0x13c>
    3b28:	c6 01       	movw	r24, r12
    3b2a:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3b2e:	81 11       	cpse	r24, r1
    3b30:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3b34:	f8 01       	movw	r30, r16
    3b36:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b38:	81 50       	subi	r24, 0x01	; 1
    3b3a:	86 8f       	std	Z+30, r24	; 0x1e
    3b3c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b3e:	18 16       	cp	r1, r24
    3b40:	7c f3       	brlt	.-34     	; 0x3b20 <xQueueGive+0x11a>
    3b42:	f8 01       	movw	r30, r16
    3b44:	b6 8e       	std	Z+30, r11	; 0x1e
    3b46:	0f 90       	pop	r0
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	0f 92       	push	r0
    3b50:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b52:	18 16       	cp	r1, r24
    3b54:	ac f4       	brge	.+42     	; 0x3b80 <xQueueGive+0x17a>
    3b56:	80 85       	ldd	r24, Z+8	; 0x08
    3b58:	81 11       	cpse	r24, r1
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <xQueueGive+0x160>
    3b5c:	11 c0       	rjmp	.+34     	; 0x3b80 <xQueueGive+0x17a>
    3b5e:	f8 01       	movw	r30, r16
    3b60:	80 85       	ldd	r24, Z+8	; 0x08
    3b62:	88 23       	and	r24, r24
    3b64:	69 f0       	breq	.+26     	; 0x3b80 <xQueueGive+0x17a>
    3b66:	c7 01       	movw	r24, r14
    3b68:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3b72:	f8 01       	movw	r30, r16
    3b74:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b76:	81 50       	subi	r24, 0x01	; 1
    3b78:	85 8f       	std	Z+29, r24	; 0x1d
    3b7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b7c:	18 16       	cp	r1, r24
    3b7e:	7c f3       	brlt	.-34     	; 0x3b5e <xQueueGive+0x158>
    3b80:	f8 01       	movw	r30, r16
    3b82:	b5 8e       	std	Z+29, r11	; 0x1d
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3b8c:	81 11       	cpse	r24, r1
    3b8e:	5b cf       	rjmp	.-330    	; 0x3a46 <xQueueGive+0x40>
    3b90:	bb da       	rcall	.-2698   	; 0x3108 <vPortYield>
    3b92:	59 cf       	rjmp	.-334    	; 0x3a46 <xQueueGive+0x40>
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	0f 92       	push	r0
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b9e:	18 16       	cp	r1, r24
    3ba0:	ac f4       	brge	.+42     	; 0x3bcc <xQueueGive+0x1c6>
    3ba2:	81 89       	ldd	r24, Z+17	; 0x11
    3ba4:	81 11       	cpse	r24, r1
    3ba6:	05 c0       	rjmp	.+10     	; 0x3bb2 <xQueueGive+0x1ac>
    3ba8:	11 c0       	rjmp	.+34     	; 0x3bcc <xQueueGive+0x1c6>
    3baa:	f8 01       	movw	r30, r16
    3bac:	81 89       	ldd	r24, Z+17	; 0x11
    3bae:	88 23       	and	r24, r24
    3bb0:	69 f0       	breq	.+26     	; 0x3bcc <xQueueGive+0x1c6>
    3bb2:	c6 01       	movw	r24, r12
    3bb4:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3bb8:	81 11       	cpse	r24, r1
    3bba:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3bbe:	f8 01       	movw	r30, r16
    3bc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bc2:	81 50       	subi	r24, 0x01	; 1
    3bc4:	86 8f       	std	Z+30, r24	; 0x1e
    3bc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bc8:	18 16       	cp	r1, r24
    3bca:	7c f3       	brlt	.-34     	; 0x3baa <xQueueGive+0x1a4>
    3bcc:	f8 01       	movw	r30, r16
    3bce:	b6 8e       	std	Z+30, r11	; 0x1e
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	0f 92       	push	r0
    3bda:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bdc:	18 16       	cp	r1, r24
    3bde:	ac f4       	brge	.+42     	; 0x3c0a <xQueueGive+0x204>
    3be0:	80 85       	ldd	r24, Z+8	; 0x08
    3be2:	81 11       	cpse	r24, r1
    3be4:	05 c0       	rjmp	.+10     	; 0x3bf0 <xQueueGive+0x1ea>
    3be6:	11 c0       	rjmp	.+34     	; 0x3c0a <xQueueGive+0x204>
    3be8:	f8 01       	movw	r30, r16
    3bea:	80 85       	ldd	r24, Z+8	; 0x08
    3bec:	88 23       	and	r24, r24
    3bee:	69 f0       	breq	.+26     	; 0x3c0a <xQueueGive+0x204>
    3bf0:	c7 01       	movw	r24, r14
    3bf2:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c00:	81 50       	subi	r24, 0x01	; 1
    3c02:	85 8f       	std	Z+29, r24	; 0x1d
    3c04:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c06:	18 16       	cp	r1, r24
    3c08:	7c f3       	brlt	.-34     	; 0x3be8 <xQueueGive+0x1e2>
    3c0a:	f8 01       	movw	r30, r16
    3c0c:	b5 8e       	std	Z+29, r11	; 0x1d
    3c0e:	0f 90       	pop	r0
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3c16:	17 cf       	rjmp	.-466    	; 0x3a46 <xQueueGive+0x40>
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	0f 92       	push	r0
    3c1e:	f8 01       	movw	r30, r16
    3c20:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c22:	18 16       	cp	r1, r24
    3c24:	d4 f4       	brge	.+52     	; 0x3c5a <xQueueGive+0x254>
    3c26:	81 89       	ldd	r24, Z+17	; 0x11
    3c28:	81 11       	cpse	r24, r1
    3c2a:	06 c0       	rjmp	.+12     	; 0x3c38 <xQueueGive+0x232>
    3c2c:	16 c0       	rjmp	.+44     	; 0x3c5a <xQueueGive+0x254>
    3c2e:	f8 01       	movw	r30, r16
    3c30:	81 89       	ldd	r24, Z+17	; 0x11
    3c32:	81 11       	cpse	r24, r1
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <xQueueGive+0x23a>
    3c36:	11 c0       	rjmp	.+34     	; 0x3c5a <xQueueGive+0x254>
    3c38:	78 01       	movw	r14, r16
    3c3a:	f1 e1       	ldi	r31, 0x11	; 17
    3c3c:	ef 0e       	add	r14, r31
    3c3e:	f1 1c       	adc	r15, r1
    3c40:	c7 01       	movw	r24, r14
    3c42:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3c46:	81 11       	cpse	r24, r1
    3c48:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c50:	81 50       	subi	r24, 0x01	; 1
    3c52:	86 8f       	std	Z+30, r24	; 0x1e
    3c54:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c56:	18 16       	cp	r1, r24
    3c58:	54 f3       	brlt	.-44     	; 0x3c2e <xQueueGive+0x228>
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	86 8f       	std	Z+30, r24	; 0x1e
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	0f 92       	push	r0
    3c6a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c6c:	18 16       	cp	r1, r24
    3c6e:	d4 f4       	brge	.+52     	; 0x3ca4 <xQueueGive+0x29e>
    3c70:	80 85       	ldd	r24, Z+8	; 0x08
    3c72:	81 11       	cpse	r24, r1
    3c74:	06 c0       	rjmp	.+12     	; 0x3c82 <xQueueGive+0x27c>
    3c76:	16 c0       	rjmp	.+44     	; 0x3ca4 <xQueueGive+0x29e>
    3c78:	f8 01       	movw	r30, r16
    3c7a:	80 85       	ldd	r24, Z+8	; 0x08
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	05 c0       	rjmp	.+10     	; 0x3c8a <xQueueGive+0x284>
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <xQueueGive+0x29e>
    3c82:	78 01       	movw	r14, r16
    3c84:	f8 e0       	ldi	r31, 0x08	; 8
    3c86:	ef 0e       	add	r14, r31
    3c88:	f1 1c       	adc	r15, r1
    3c8a:	c7 01       	movw	r24, r14
    3c8c:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3c90:	81 11       	cpse	r24, r1
    3c92:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
    3c96:	f8 01       	movw	r30, r16
    3c98:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c9a:	81 50       	subi	r24, 0x01	; 1
    3c9c:	85 8f       	std	Z+29, r24	; 0x1d
    3c9e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ca0:	18 16       	cp	r1, r24
    3ca2:	54 f3       	brlt	.-44     	; 0x3c78 <xQueueGive+0x272>
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
    3ca6:	f8 01       	movw	r30, r16
    3ca8:	85 8f       	std	Z+29, r24	; 0x1d
    3caa:	0f 90       	pop	r0
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <xQueueGive+0x2c0>
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cba:	8f 5f       	subi	r24, 0xFF	; 255
    3cbc:	82 8f       	std	Z+26, r24	; 0x1a
    3cbe:	81 89       	ldd	r24, Z+17	; 0x11
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	db ce       	rjmp	.-586    	; 0x3a7a <xQueueGive+0x74>
    3cc4:	e4 ce       	rjmp	.-568    	; 0x3a8e <xQueueGive+0x88>
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	df 90       	pop	r13
    3cde:	cf 90       	pop	r12
    3ce0:	bf 90       	pop	r11
    3ce2:	af 90       	pop	r10
    3ce4:	9f 90       	pop	r9
    3ce6:	08 95       	ret

00003ce8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3cee:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cf0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3cf2:	98 17       	cp	r25, r24
    3cf4:	d0 f4       	brcc	.+52     	; 0x3d2a <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    3d00:	79 f4       	brne	.+30     	; 0x3d20 <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d02:	81 89       	ldd	r24, Z+17	; 0x11
    3d04:	88 23       	and	r24, r24
    3d06:	99 f0       	breq	.+38     	; 0x3d2e <xQueueGiveFromISR+0x46>
    3d08:	eb 01       	movw	r28, r22
    3d0a:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d0c:	41 96       	adiw	r24, 0x11	; 17
    3d0e:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3d12:	88 23       	and	r24, r24
    3d14:	71 f0       	breq	.+28     	; 0x3d32 <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3d16:	20 97       	sbiw	r28, 0x00	; 0
    3d18:	71 f0       	breq	.+28     	; 0x3d36 <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	88 83       	st	Y, r24
    3d1e:	0c c0       	rjmp	.+24     	; 0x3d38 <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3d20:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d22:	8f 5f       	subi	r24, 0xFF	; 255
    3d24:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	07 c0       	rjmp	.+14     	; 0x3d38 <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	05 c0       	rjmp	.+10     	; 0x3d38 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <xQueueGiveFromISR+0x50>
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <xQueueGiveFromISR+0x50>
    3d36:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

00003d3e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <xQueueGenericReceive+0x1e>
    3d5c:	1f 92       	push	r1
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	8c 01       	movw	r16, r24
    3d66:	5b 01       	movw	r10, r22
    3d68:	5d 83       	std	Y+5, r21	; 0x05
    3d6a:	4c 83       	std	Y+4, r20	; 0x04
    3d6c:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3d6e:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3d70:	77 24       	eor	r7, r7
    3d72:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d74:	99 24       	eor	r9, r9
    3d76:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d78:	6c 01       	movw	r12, r24
    3d7a:	88 e0       	ldi	r24, 0x08	; 8
    3d7c:	c8 0e       	add	r12, r24
    3d7e:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d80:	78 01       	movw	r14, r16
    3d82:	e1 e1       	ldi	r30, 0x11	; 17
    3d84:	ee 0e       	add	r14, r30
    3d86:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3d8e:	f8 01       	movw	r30, r16
    3d90:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d92:	88 23       	and	r24, r24
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <xQueueGenericReceive+0x5a>
    3d96:	45 c0       	rjmp	.+138    	; 0x3e22 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3d98:	e6 80       	ldd	r14, Z+6	; 0x06
    3d9a:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3d9c:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d9e:	44 23       	and	r20, r20
    3da0:	a9 f0       	breq	.+42     	; 0x3dcc <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	c7 01       	movw	r24, r14
    3da6:	84 0f       	add	r24, r20
    3da8:	95 1f       	adc	r25, r21
    3daa:	97 83       	std	Z+7, r25	; 0x07
    3dac:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3dae:	22 81       	ldd	r18, Z+2	; 0x02
    3db0:	33 81       	ldd	r19, Z+3	; 0x03
    3db2:	82 17       	cp	r24, r18
    3db4:	93 07       	cpc	r25, r19
    3db6:	20 f0       	brcs	.+8      	; 0x3dc0 <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	97 83       	std	Z+7, r25	; 0x07
    3dbe:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	66 81       	ldd	r22, Z+6	; 0x06
    3dc4:	77 81       	ldd	r23, Z+7	; 0x07
    3dc6:	c5 01       	movw	r24, r10
    3dc8:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3dcc:	61 10       	cpse	r6, r1
    3dce:	19 c0       	rjmp	.+50     	; 0x3e02 <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3dd0:	f8 01       	movw	r30, r16
    3dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dd4:	81 50       	subi	r24, 0x01	; 1
    3dd6:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	89 2b       	or	r24, r25
    3dde:	29 f4       	brne	.+10     	; 0x3dea <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3de0:	0e 94 14 2c 	call	0x5828	; 0x5828 <pvTaskIncrementMutexHeldCount>
    3de4:	f8 01       	movw	r30, r16
    3de6:	93 83       	std	Z+3, r25	; 0x03
    3de8:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dea:	f8 01       	movw	r30, r16
    3dec:	80 85       	ldd	r24, Z+8	; 0x08
    3dee:	88 23       	and	r24, r24
    3df0:	a1 f0       	breq	.+40     	; 0x3e1a <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3df2:	c8 01       	movw	r24, r16
    3df4:	08 96       	adiw	r24, 0x08	; 8
    3df6:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3dfa:	81 30       	cpi	r24, 0x01	; 1
    3dfc:	71 f4       	brne	.+28     	; 0x3e1a <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3dfe:	84 d9       	rcall	.-3320   	; 0x3108 <vPortYield>
    3e00:	0c c0       	rjmp	.+24     	; 0x3e1a <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3e02:	f8 01       	movw	r30, r16
    3e04:	f7 82       	std	Z+7, r15	; 0x07
    3e06:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e08:	81 89       	ldd	r24, Z+17	; 0x11
    3e0a:	88 23       	and	r24, r24
    3e0c:	31 f0       	breq	.+12     	; 0x3e1a <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3e0e:	c8 01       	movw	r24, r16
    3e10:	41 96       	adiw	r24, 0x11	; 17
    3e12:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3e16:	81 11       	cpse	r24, r1
    3e18:	77 d9       	rcall	.-3346   	; 0x3108 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	1a c1       	rjmp	.+564    	; 0x4056 <xQueueGenericReceive+0x318>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3e22:	8c 81       	ldd	r24, Y+4	; 0x04
    3e24:	9d 81       	ldd	r25, Y+5	; 0x05
    3e26:	89 2b       	or	r24, r25
    3e28:	21 f4       	brne	.+8      	; 0x3e32 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3e2a:	0f 90       	pop	r0
    3e2c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	12 c1       	rjmp	.+548    	; 0x4056 <xQueueGenericReceive+0x318>
				}
				else if( xEntryTimeSet == pdFALSE )
    3e32:	81 10       	cpse	r8, r1
    3e34:	05 c0       	rjmp	.+10     	; 0x3e40 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3e36:	ce 01       	movw	r24, r28
    3e38:	01 96       	adiw	r24, 0x01	; 1
    3e3a:	0e 94 23 2b 	call	0x5646	; 0x5646 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3e3e:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3e40:	0f 90       	pop	r0
    3e42:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3e44:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	0f 92       	push	r0
    3e4e:	f8 01       	movw	r30, r16
    3e50:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e52:	8f 3f       	cpi	r24, 0xFF	; 255
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <xQueueGenericReceive+0x11a>
    3e56:	15 8e       	std	Z+29, r1	; 0x1d
    3e58:	f8 01       	movw	r30, r16
    3e5a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <xQueueGenericReceive+0x124>
    3e60:	16 8e       	std	Z+30, r1	; 0x1e
    3e62:	0f 90       	pop	r0
    3e64:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e66:	be 01       	movw	r22, r28
    3e68:	6c 5f       	subi	r22, 0xFC	; 252
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	0e 94 2e 2b 	call	0x565c	; 0x565c <xTaskCheckForTimeOut>
    3e74:	81 11       	cpse	r24, r1
    3e76:	a2 c0       	rjmp	.+324    	; 0x3fbc <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3e7e:	f8 01       	movw	r30, r16
    3e80:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3e82:	0f 90       	pop	r0
    3e84:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e86:	81 11       	cpse	r24, r1
    3e88:	57 c0       	rjmp	.+174    	; 0x3f38 <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	89 2b       	or	r24, r25
    3e90:	49 f4       	brne	.+18     	; 0x3ea4 <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3ea0:	0f 90       	pop	r0
    3ea2:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3ea4:	6c 81       	ldd	r22, Y+4	; 0x04
    3ea6:	7d 81       	ldd	r23, Y+5	; 0x05
    3ea8:	c7 01       	movw	r24, r14
    3eaa:	0e 94 80 2a 	call	0x5500	; 0x5500 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3eb8:	18 16       	cp	r1, r24
    3eba:	ac f4       	brge	.+42     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ebc:	81 89       	ldd	r24, Z+17	; 0x11
    3ebe:	81 11       	cpse	r24, r1
    3ec0:	05 c0       	rjmp	.+10     	; 0x3ecc <xQueueGenericReceive+0x18e>
    3ec2:	11 c0       	rjmp	.+34     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	81 89       	ldd	r24, Z+17	; 0x11
    3ec8:	88 23       	and	r24, r24
    3eca:	69 f0       	breq	.+26     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ecc:	c7 01       	movw	r24, r14
    3ece:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3ed2:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3ed4:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ed8:	f8 01       	movw	r30, r16
    3eda:	86 8d       	ldd	r24, Z+30	; 0x1e
    3edc:	81 50       	subi	r24, 0x01	; 1
    3ede:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ee0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ee2:	18 16       	cp	r1, r24
    3ee4:	7c f3       	brlt	.-34     	; 0x3ec4 <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3ee6:	f8 01       	movw	r30, r16
    3ee8:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3eea:	0f 90       	pop	r0
    3eec:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3ef4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ef6:	18 16       	cp	r1, r24
    3ef8:	ac f4       	brge	.+42     	; 0x3f24 <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3efa:	80 85       	ldd	r24, Z+8	; 0x08
    3efc:	81 11       	cpse	r24, r1
    3efe:	05 c0       	rjmp	.+10     	; 0x3f0a <xQueueGenericReceive+0x1cc>
    3f00:	11 c0       	rjmp	.+34     	; 0x3f24 <xQueueGenericReceive+0x1e6>
    3f02:	f8 01       	movw	r30, r16
    3f04:	80 85       	ldd	r24, Z+8	; 0x08
    3f06:	88 23       	and	r24, r24
    3f08:	69 f0       	breq	.+26     	; 0x3f24 <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f0a:	c6 01       	movw	r24, r12
    3f0c:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3f10:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3f12:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3f16:	f8 01       	movw	r30, r16
    3f18:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f1a:	81 50       	subi	r24, 0x01	; 1
    3f1c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3f1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f20:	18 16       	cp	r1, r24
    3f22:	7c f3       	brlt	.-34     	; 0x3f02 <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3f24:	f8 01       	movw	r30, r16
    3f26:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3f28:	0f 90       	pop	r0
    3f2a:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3f2c:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3f30:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3f32:	2a cf       	rjmp	.-428    	; 0x3d88 <xQueueGenericReceive+0x4a>
    3f34:	e9 d8       	rcall	.-3630   	; 0x3108 <vPortYield>
    3f36:	28 cf       	rjmp	.-432    	; 0x3d88 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3f3e:	f8 01       	movw	r30, r16
    3f40:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f42:	18 16       	cp	r1, r24
    3f44:	ac f4       	brge	.+42     	; 0x3f70 <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f46:	81 89       	ldd	r24, Z+17	; 0x11
    3f48:	81 11       	cpse	r24, r1
    3f4a:	05 c0       	rjmp	.+10     	; 0x3f56 <xQueueGenericReceive+0x218>
    3f4c:	11 c0       	rjmp	.+34     	; 0x3f70 <xQueueGenericReceive+0x232>
    3f4e:	f8 01       	movw	r30, r16
    3f50:	81 89       	ldd	r24, Z+17	; 0x11
    3f52:	88 23       	and	r24, r24
    3f54:	69 f0       	breq	.+26     	; 0x3f70 <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3f56:	c7 01       	movw	r24, r14
    3f58:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3f5c:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3f5e:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3f62:	f8 01       	movw	r30, r16
    3f64:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f66:	81 50       	subi	r24, 0x01	; 1
    3f68:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3f6a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f6c:	18 16       	cp	r1, r24
    3f6e:	7c f3       	brlt	.-34     	; 0x3f4e <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3f70:	f8 01       	movw	r30, r16
    3f72:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3f74:	0f 90       	pop	r0
    3f76:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3f7e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f80:	18 16       	cp	r1, r24
    3f82:	ac f4       	brge	.+42     	; 0x3fae <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f84:	80 85       	ldd	r24, Z+8	; 0x08
    3f86:	81 11       	cpse	r24, r1
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <xQueueGenericReceive+0x256>
    3f8a:	11 c0       	rjmp	.+34     	; 0x3fae <xQueueGenericReceive+0x270>
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	80 85       	ldd	r24, Z+8	; 0x08
    3f90:	88 23       	and	r24, r24
    3f92:	69 f0       	breq	.+26     	; 0x3fae <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f94:	c6 01       	movw	r24, r12
    3f96:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3f9a:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3f9c:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3fa0:	f8 01       	movw	r30, r16
    3fa2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3fa4:	81 50       	subi	r24, 0x01	; 1
    3fa6:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3fa8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3faa:	18 16       	cp	r1, r24
    3fac:	7c f3       	brlt	.-34     	; 0x3f8c <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3fae:	f8 01       	movw	r30, r16
    3fb0:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3fb2:	0f 90       	pop	r0
    3fb4:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3fb6:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <xTaskResumeAll>
    3fba:	e6 ce       	rjmp	.-564    	; 0x3d88 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3fc2:	f8 01       	movw	r30, r16
    3fc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fc6:	18 16       	cp	r1, r24
    3fc8:	d4 f4       	brge	.+52     	; 0x3ffe <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fca:	81 89       	ldd	r24, Z+17	; 0x11
    3fcc:	81 11       	cpse	r24, r1
    3fce:	06 c0       	rjmp	.+12     	; 0x3fdc <xQueueGenericReceive+0x29e>
    3fd0:	16 c0       	rjmp	.+44     	; 0x3ffe <xQueueGenericReceive+0x2c0>
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	81 89       	ldd	r24, Z+17	; 0x11
    3fd6:	81 11       	cpse	r24, r1
    3fd8:	05 c0       	rjmp	.+10     	; 0x3fe4 <xQueueGenericReceive+0x2a6>
    3fda:	11 c0       	rjmp	.+34     	; 0x3ffe <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3fdc:	78 01       	movw	r14, r16
    3fde:	f1 e1       	ldi	r31, 0x11	; 17
    3fe0:	ef 0e       	add	r14, r31
    3fe2:	f1 1c       	adc	r15, r1
    3fe4:	c7 01       	movw	r24, r14
    3fe6:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    3fea:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3fec:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ff4:	81 50       	subi	r24, 0x01	; 1
    3ff6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ff8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ffa:	18 16       	cp	r1, r24
    3ffc:	54 f3       	brlt	.-44     	; 0x3fd2 <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3ffe:	8f ef       	ldi	r24, 0xFF	; 255
    4000:	f8 01       	movw	r30, r16
    4002:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    4004:	0f 90       	pop	r0
    4006:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    400e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4010:	18 16       	cp	r1, r24
    4012:	d4 f4       	brge	.+52     	; 0x4048 <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4014:	80 85       	ldd	r24, Z+8	; 0x08
    4016:	81 11       	cpse	r24, r1
    4018:	06 c0       	rjmp	.+12     	; 0x4026 <xQueueGenericReceive+0x2e8>
    401a:	16 c0       	rjmp	.+44     	; 0x4048 <xQueueGenericReceive+0x30a>
    401c:	f8 01       	movw	r30, r16
    401e:	80 85       	ldd	r24, Z+8	; 0x08
    4020:	81 11       	cpse	r24, r1
    4022:	05 c0       	rjmp	.+10     	; 0x402e <xQueueGenericReceive+0x2f0>
    4024:	11 c0       	rjmp	.+34     	; 0x4048 <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4026:	78 01       	movw	r14, r16
    4028:	f8 e0       	ldi	r31, 0x08	; 8
    402a:	ef 0e       	add	r14, r31
    402c:	f1 1c       	adc	r15, r1
    402e:	c7 01       	movw	r24, r14
    4030:	0e 94 db 2a 	call	0x55b6	; 0x55b6 <xTaskRemoveFromEventList>
    4034:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    4036:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    403a:	f8 01       	movw	r30, r16
    403c:	85 8d       	ldd	r24, Z+29	; 0x1d
    403e:	81 50       	subi	r24, 0x01	; 1
    4040:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4042:	85 8d       	ldd	r24, Z+29	; 0x1d
    4044:	18 16       	cp	r1, r24
    4046:	54 f3       	brlt	.-44     	; 0x401c <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	f8 01       	movw	r30, r16
	}
	taskEXIT_CRITICAL();
    404c:	85 8f       	std	Z+29, r24	; 0x1d
    404e:	0f 90       	pop	r0
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	c8 d7       	rcall	.+3984   	; 0x4fe4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4054:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	0f 91       	pop	r16
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	df 90       	pop	r13
    406e:	cf 90       	pop	r12
    4070:	bf 90       	pop	r11
    4072:	af 90       	pop	r10
    4074:	9f 90       	pop	r9
    4076:	8f 90       	pop	r8
    4078:	7f 90       	pop	r7
    407a:	6f 90       	pop	r6
    407c:	08 95       	ret

0000407e <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    407e:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	11 f4       	brne	.+4      	; 0x4088 <server_receiver+0xa>
      gHandshook = 0;
    4084:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <gHandshook>
  }
  memcpy(&message_in, data, len);
    4088:	bc 01       	movw	r22, r24
    408a:	87 e6       	ldi	r24, 0x67	; 103
    408c:	9b e1       	ldi	r25, 0x1B	; 27
    408e:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	80 91 63 1b 	lds	r24, 0x1B63	; 0x801b63 <xCommandReadyBSem>
    409a:	90 91 64 1b 	lds	r25, 0x1B64	; 0x801b64 <xCommandReadyBSem+0x1>
    409e:	b3 cc       	rjmp	.-1690   	; 0x3a06 <xQueueGive>
    40a0:	08 95       	ret

000040a2 <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    40a2:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <connected>
    40a6:	81 11       	cpse	r24, r1
    40a8:	04 c0       	rjmp	.+8      	; 0x40b2 <server_communication_init+0x10>
  server_connection = arq_new_connection();
    40aa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    40ae:	80 93 9d 1b 	sts	0x1B9D, r24	; 0x801b9d <server_connection>
    40b2:	08 95       	ret

000040b4 <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    40b4:	28 ee       	ldi	r18, 0xE8	; 232
    40b6:	33 e0       	ldi	r19, 0x03	; 3
    40b8:	4f e3       	ldi	r20, 0x3F	; 63
    40ba:	50 e2       	ldi	r21, 0x20	; 32
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    40c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    40c6:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <connected>
  return connected;
}
    40ca:	08 95       	ret

000040cc <send_handshake>:

uint8_t send_handshake(void) {
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	ec 97       	sbiw	r28, 0x3c	; 60
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    40e0:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <connected>
    40e4:	88 23       	and	r24, r24
    40e6:	09 f4       	brne	.+2      	; 0x40ea <send_handshake+0x1e>
    40e8:	4e c0       	rjmp	.+156    	; 0x4186 <send_handshake+0xba>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    40ea:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    40ec:	87 e0       	ldi	r24, 0x07	; 7
    40ee:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    40f0:	88 e0       	ldi	r24, 0x08	; 8
    40f2:	ee e6       	ldi	r30, 0x6E	; 110
    40f4:	f6 e0       	ldi	r31, 0x06	; 6
    40f6:	de 01       	movw	r26, r28
    40f8:	13 96       	adiw	r26, 0x03	; 3
    40fa:	01 90       	ld	r0, Z+
    40fc:	0d 92       	st	X+, r0
    40fe:	8a 95       	dec	r24
    4100:	e1 f7       	brne	.-8      	; 0x40fa <send_handshake+0x2e>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    4102:	24 eb       	ldi	r18, 0xB4	; 180
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	3b 87       	std	Y+11, r19	; 0x0b
    4108:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    410a:	85 ef       	ldi	r24, 0xF5	; 245
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	9d 87       	std	Y+13, r25	; 0x0d
    4110:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    4112:	88 e3       	ldi	r24, 0x38	; 56
    4114:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    4116:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    4118:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    411a:	85 e1       	ldi	r24, 0x15	; 21
    411c:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    411e:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    4120:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    4122:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    4124:	1e 8a       	std	Y+22, r1	; 0x16
    4126:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    4128:	8a e5       	ldi	r24, 0x5A	; 90
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	98 8f       	std	Y+24, r25	; 0x18
    412e:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    4130:	3a 8f       	std	Y+26, r19	; 0x1a
    4132:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    4134:	8e e0       	ldi	r24, 0x0E	; 14
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	9c 8f       	std	Y+28, r25	; 0x1c
    413a:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9e 8f       	std	Y+30, r25	; 0x1e
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    4144:	8e e1       	ldi	r24, 0x1E	; 30
    4146:	fe 01       	movw	r30, r28
    4148:	31 96       	adiw	r30, 0x01	; 1
    414a:	de 01       	movw	r26, r28
    414c:	5f 96       	adiw	r26, 0x1f	; 31
    414e:	01 90       	ld	r0, Z+
    4150:	0d 92       	st	X+, r0
    4152:	8a 95       	dec	r24
    4154:	e1 f7       	brne	.-8      	; 0x414e <send_handshake+0x82>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    4156:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    415a:	88 23       	and	r24, r24
    415c:	59 f0       	breq	.+22     	; 0x4174 <send_handshake+0xa8>
    415e:	4e e1       	ldi	r20, 0x1E	; 30
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	be 01       	movw	r22, r28
    4164:	61 5e       	subi	r22, 0xE1	; 225
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    416c:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	09 c0       	rjmp	.+18     	; 0x4186 <send_handshake+0xba>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    4174:	4e e1       	ldi	r20, 0x1E	; 30
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	be 01       	movw	r22, r28
    417a:	61 5e       	subi	r22, 0xE1	; 225
    417c:	7f 4f       	sbci	r23, 0xFF	; 255
    417e:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    4182:	76 d1       	rcall	.+748    	; 0x4470 <simple_p_send>
  return 1;
    4184:	81 e0       	ldi	r24, 0x01	; 1
}
    4186:	ec 96       	adiw	r28, 0x3c	; 60
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	08 95       	ret

00004198 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    4198:	af 92       	push	r10
    419a:	cf 92       	push	r12
    419c:	ef 92       	push	r14
    419e:	0f 93       	push	r16
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	2d 97       	sbiw	r28, 0x0d	; 13
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return;
    41b4:	e0 91 ff 19 	lds	r30, 0x19FF	; 0x8019ff <connected>
    41b8:	ee 23       	and	r30, r30
    41ba:	19 f1       	breq	.+70     	; 0x4202 <send_update+0x6a>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    41bc:	e1 e0       	ldi	r30, 0x01	; 1
    41be:	e9 83       	std	Y+1, r30	; 0x01
    41c0:	9b 83       	std	Y+3, r25	; 0x03
    41c2:	8a 83       	std	Y+2, r24	; 0x02
    41c4:	7d 83       	std	Y+5, r23	; 0x05
    41c6:	6c 83       	std	Y+4, r22	; 0x04
    41c8:	5f 83       	std	Y+7, r21	; 0x07
    41ca:	4e 83       	std	Y+6, r20	; 0x06
    41cc:	39 87       	std	Y+9, r19	; 0x09
    41ce:	28 87       	std	Y+8, r18	; 0x08
    41d0:	0a 87       	std	Y+10, r16	; 0x0a
    41d2:	eb 86       	std	Y+11, r14	; 0x0b
    41d4:	cc 86       	std	Y+12, r12	; 0x0c
    41d6:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    41d8:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    41dc:	88 23       	and	r24, r24
    41de:	51 f0       	breq	.+20     	; 0x41f4 <send_update+0x5c>
    41e0:	4d e0       	ldi	r20, 0x0D	; 13
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	be 01       	movw	r22, r28
    41e6:	6f 5f       	subi	r22, 0xFF	; 255
    41e8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ea:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    41ee:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    41f2:	07 c0       	rjmp	.+14     	; 0x4202 <send_update+0x6a>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    41f4:	4d e0       	ldi	r20, 0x0D	; 13
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	be 01       	movw	r22, r28
    41fa:	6f 5f       	subi	r22, 0xFF	; 255
    41fc:	7f 4f       	sbci	r23, 0xFF	; 255
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	37 d1       	rcall	.+622    	; 0x4470 <simple_p_send>
}
    4202:	2d 96       	adiw	r28, 0x0d	; 13
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	0f 91       	pop	r16
    4214:	ef 90       	pop	r14
    4216:	cf 90       	pop	r12
    4218:	af 90       	pop	r10
    421a:	08 95       	ret

0000421c <send_idle>:

void send_idle(void) {
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	1f 92       	push	r1
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    4226:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <connected>
    422a:	88 23       	and	r24, r24
    422c:	b9 f0       	breq	.+46     	; 0x425c <send_idle+0x40>
  uint8_t status = TYPE_IDLE;
    422e:	83 e0       	ldi	r24, 0x03	; 3
    4230:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    4232:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    4236:	88 23       	and	r24, r24
    4238:	51 f0       	breq	.+20     	; 0x424e <send_idle+0x32>
    423a:	41 e0       	ldi	r20, 0x01	; 1
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	be 01       	movw	r22, r28
    4240:	6f 5f       	subi	r22, 0xFF	; 255
    4242:	7f 4f       	sbci	r23, 0xFF	; 255
    4244:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    4248:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    424c:	07 c0       	rjmp	.+14     	; 0x425c <send_idle+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    424e:	41 e0       	ldi	r20, 0x01	; 1
    4250:	50 e0       	ldi	r21, 0x00	; 0
    4252:	be 01       	movw	r22, r28
    4254:	6f 5f       	subi	r22, 0xFF	; 255
    4256:	7f 4f       	sbci	r23, 0xFF	; 255
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	0a d1       	rcall	.+532    	; 0x4470 <simple_p_send>
}
    425c:	0f 90       	pop	r0
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <debug>:
void debug(const char *fmt, ...) {
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	c4 56       	subi	r28, 0x64	; 100
    426e:	d1 09       	sbc	r29, r1
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	de bf       	out	0x3e, r29	; 62
    4276:	0f be       	out	0x3f, r0	; 63
    4278:	cd bf       	out	0x3d, r28	; 61
    427a:	ae 01       	movw	r20, r28
    427c:	46 59       	subi	r20, 0x96	; 150
    427e:	5f 4f       	sbci	r21, 0xFF	; 255
    4280:	fa 01       	movw	r30, r20
    4282:	61 91       	ld	r22, Z+
    4284:	71 91       	ld	r23, Z+
    4286:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    4288:	8a e0       	ldi	r24, 0x0A	; 10
    428a:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    428c:	ce 01       	movw	r24, r28
    428e:	02 96       	adiw	r24, 0x02	; 2
    4290:	0e 94 a6 38 	call	0x714c	; 0x714c <vsprintf>
	va_end(ap);
	if (ret > 0) {
    4294:	88 23       	and	r24, r24
    4296:	c9 f0       	breq	.+50     	; 0x42ca <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    4298:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    429c:	22 23       	and	r18, r18
    429e:	61 f0       	breq	.+24     	; 0x42b8 <debug+0x54>
    42a0:	99 27       	eor	r25, r25
    42a2:	ac 01       	movw	r20, r24
    42a4:	4f 5f       	subi	r20, 0xFF	; 255
    42a6:	5f 4f       	sbci	r21, 0xFF	; 255
    42a8:	be 01       	movw	r22, r28
    42aa:	6f 5f       	subi	r22, 0xFF	; 255
    42ac:	7f 4f       	sbci	r23, 0xFF	; 255
    42ae:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    42b2:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    42b6:	09 c0       	rjmp	.+18     	; 0x42ca <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    42b8:	99 27       	eor	r25, r25
    42ba:	ac 01       	movw	r20, r24
    42bc:	4f 5f       	subi	r20, 0xFF	; 255
    42be:	5f 4f       	sbci	r21, 0xFF	; 255
    42c0:	be 01       	movw	r22, r28
    42c2:	6f 5f       	subi	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	d3 d0       	rcall	.+422    	; 0x4470 <simple_p_send>
	}
}
    42ca:	cc 59       	subi	r28, 0x9C	; 156
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

000042de <send_ping_response>:

void send_ping_response(void) {
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	1f 92       	push	r1
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    42e8:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <connected>
    42ec:	88 23       	and	r24, r24
    42ee:	b9 f0       	breq	.+46     	; 0x431e <send_ping_response+0x40>
  uint8_t status = TYPE_PING_RESPONSE;
    42f0:	89 e0       	ldi	r24, 0x09	; 9
    42f2:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    42f4:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    42f8:	88 23       	and	r24, r24
    42fa:	51 f0       	breq	.+20     	; 0x4310 <send_ping_response+0x32>
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	be 01       	movw	r22, r28
    4302:	6f 5f       	subi	r22, 0xFF	; 255
    4304:	7f 4f       	sbci	r23, 0xFF	; 255
    4306:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <server_connection>
    430a:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    430e:	07 c0       	rjmp	.+14     	; 0x431e <send_ping_response+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    4310:	41 e0       	ldi	r20, 0x01	; 1
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	be 01       	movw	r22, r28
    4316:	6f 5f       	subi	r22, 0xFF	; 255
    4318:	7f 4f       	sbci	r23, 0xFF	; 255
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	a9 d0       	rcall	.+338    	; 0x4470 <simple_p_send>
}
    431e:	0f 90       	pop	r0
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	08 95       	ret

00004326 <vServo_setAngle>:
}

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    4326:	8a 35       	cpi	r24, 0x5A	; 90
    4328:	08 f0       	brcs	.+2      	; 0x432c <vServo_setAngle+0x6>
        ServoAngleDeg = 90;
    432a:	8a e5       	ldi	r24, 0x5A	; 90
    }
    else if(ServoAngleDeg <= 0){
        ServoAngleDeg = 0;
    }
    /* Fetch pulse width from array and set to output */
    servoOCR = DEG_TO_PWM[ServoAngleDeg];
    432c:	e8 2f       	mov	r30, r24
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	ea 58       	subi	r30, 0x8A	; 138
    4336:	f9 4f       	sbci	r31, 0xF9	; 249
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
    433c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4340:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4344:	08 95       	ret

00004346 <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    4346:	a0 ea       	ldi	r26, 0xA0	; 160
    4348:	b0 e0       	ldi	r27, 0x00	; 0
    434a:	9c 91       	ld	r25, X
    434c:	90 62       	ori	r25, 0x20	; 32
    434e:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    4350:	e1 ea       	ldi	r30, 0xA1	; 161
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	90 81       	ld	r25, Z
    4356:	98 61       	ori	r25, 0x18	; 24
    4358:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    435a:	9c 91       	ld	r25, X
    435c:	92 60       	ori	r25, 0x02	; 2
    435e:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    4360:	90 81       	ld	r25, Z
    4362:	92 60       	ori	r25, 0x02	; 2
    4364:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    4366:	2f e3       	ldi	r18, 0x3F	; 63
    4368:	3c e9       	ldi	r19, 0x9C	; 156
    436a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    436e:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    4372:	e1 e0       	ldi	r30, 0x01	; 1
    4374:	f1 e0       	ldi	r31, 0x01	; 1
    4376:	90 81       	ld	r25, Z
    4378:	90 61       	ori	r25, 0x10	; 16
    437a:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    437c:	d4 cf       	rjmp	.-88     	; 0x4326 <vServo_setAngle>
    437e:	08 95       	ret

00004380 <simple_p_reassembly>:
    4380:	ef 92       	push	r14
    4382:	ff 92       	push	r15
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	90 91 01 1a 	lds	r25, 0x1A01	; 0x801a01 <messages+0x1>
    4390:	9f 3f       	cpi	r25, 0xFF	; 255
    4392:	11 f0       	breq	.+4      	; 0x4398 <simple_p_reassembly+0x18>
    4394:	98 13       	cpse	r25, r24
    4396:	58 c0       	rjmp	.+176    	; 0x4448 <simple_p_reassembly+0xc8>
    4398:	fb 01       	movw	r30, r22
    439a:	80 81       	ld	r24, Z
    439c:	81 11       	cpse	r24, r1
    439e:	05 c0       	rjmp	.+10     	; 0x43aa <simple_p_reassembly+0x2a>
    43a0:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <messages+0x3>
    43a4:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <messages+0x2>
    43a8:	0c c0       	rjmp	.+24     	; 0x43c2 <simple_p_reassembly+0x42>
    43aa:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <messages+0x4>
    43ae:	89 17       	cp	r24, r25
    43b0:	41 f0       	breq	.+16     	; 0x43c2 <simple_p_reassembly+0x42>
    43b2:	e0 e0       	ldi	r30, 0x00	; 0
    43b4:	fa e1       	ldi	r31, 0x1A	; 26
    43b6:	14 82       	std	Z+4, r1	; 0x04
    43b8:	13 82       	std	Z+3, r1	; 0x03
    43ba:	12 82       	std	Z+2, r1	; 0x02
    43bc:	8f ef       	ldi	r24, 0xFF	; 255
    43be:	81 83       	std	Z+1, r24	; 0x01
    43c0:	43 c0       	rjmp	.+134    	; 0x4448 <simple_p_reassembly+0xc8>
    43c2:	80 91 02 1a 	lds	r24, 0x1A02	; 0x801a02 <messages+0x2>
    43c6:	90 91 03 1a 	lds	r25, 0x1A03	; 0x801a03 <messages+0x3>
    43ca:	02 97       	sbiw	r24, 0x02	; 2
    43cc:	84 0f       	add	r24, r20
    43ce:	95 1f       	adc	r25, r21
    43d0:	85 36       	cpi	r24, 0x65	; 101
    43d2:	91 05       	cpc	r25, r1
    43d4:	40 f0       	brcs	.+16     	; 0x43e6 <simple_p_reassembly+0x66>
    43d6:	e0 e0       	ldi	r30, 0x00	; 0
    43d8:	fa e1       	ldi	r31, 0x1A	; 26
    43da:	13 82       	std	Z+3, r1	; 0x03
    43dc:	12 82       	std	Z+2, r1	; 0x02
    43de:	14 82       	std	Z+4, r1	; 0x04
    43e0:	8f ef       	ldi	r24, 0xFF	; 255
    43e2:	81 83       	std	Z+1, r24	; 0x01
    43e4:	31 c0       	rjmp	.+98     	; 0x4448 <simple_p_reassembly+0xc8>
    43e6:	8a 01       	movw	r16, r20
    43e8:	eb 01       	movw	r28, r22
    43ea:	0f 2e       	mov	r0, r31
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	ef 2e       	mov	r14, r31
    43f0:	fa e1       	ldi	r31, 0x1A	; 26
    43f2:	ff 2e       	mov	r15, r31
    43f4:	f0 2d       	mov	r31, r0
    43f6:	f7 01       	movw	r30, r14
    43f8:	84 81       	ldd	r24, Z+4	; 0x04
    43fa:	8f 5f       	subi	r24, 0xFF	; 255
    43fc:	84 83       	std	Z+4, r24	; 0x04
    43fe:	82 81       	ldd	r24, Z+2	; 0x02
    4400:	93 81       	ldd	r25, Z+3	; 0x03
    4402:	42 50       	subi	r20, 0x02	; 2
    4404:	51 09       	sbc	r21, r1
    4406:	6e 5f       	subi	r22, 0xFE	; 254
    4408:	7f 4f       	sbci	r23, 0xFF	; 255
    440a:	8b 5f       	subi	r24, 0xFB	; 251
    440c:	95 4e       	sbci	r25, 0xE5	; 229
    440e:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    4412:	f7 01       	movw	r30, r14
    4414:	42 81       	ldd	r20, Z+2	; 0x02
    4416:	53 81       	ldd	r21, Z+3	; 0x03
    4418:	42 50       	subi	r20, 0x02	; 2
    441a:	51 09       	sbc	r21, r1
    441c:	ba 01       	movw	r22, r20
    441e:	60 0f       	add	r22, r16
    4420:	71 1f       	adc	r23, r17
    4422:	73 83       	std	Z+3, r23	; 0x03
    4424:	62 83       	std	Z+2, r22	; 0x02
    4426:	98 81       	ld	r25, Y
    4428:	89 81       	ldd	r24, Y+1	; 0x01
    442a:	98 13       	cpse	r25, r24
    442c:	0d c0       	rjmp	.+26     	; 0x4448 <simple_p_reassembly+0xc8>
    442e:	e0 91 9e 1b 	lds	r30, 0x1B9E	; 0x801b9e <callback_data_received>
    4432:	f0 91 9f 1b 	lds	r31, 0x1B9F	; 0x801b9f <callback_data_received+0x1>
    4436:	85 e0       	ldi	r24, 0x05	; 5
    4438:	9a e1       	ldi	r25, 0x1A	; 26
    443a:	19 95       	eicall
    443c:	f7 01       	movw	r30, r14
    443e:	14 82       	std	Z+4, r1	; 0x04
    4440:	13 82       	std	Z+3, r1	; 0x03
    4442:	12 82       	std	Z+2, r1	; 0x02
    4444:	8f ef       	ldi	r24, 0xFF	; 255
    4446:	81 83       	std	Z+1, r24	; 0x01
    4448:	df 91       	pop	r29
    444a:	cf 91       	pop	r28
    444c:	1f 91       	pop	r17
    444e:	0f 91       	pop	r16
    4450:	ff 90       	pop	r15
    4452:	ef 90       	pop	r14
    4454:	08 95       	ret

00004456 <simple_p_init>:
    4456:	90 93 9f 1b 	sts	0x1B9F, r25	; 0x801b9f <callback_data_received+0x1>
    445a:	80 93 9e 1b 	sts	0x1B9E, r24	; 0x801b9e <callback_data_received>
    445e:	60 ec       	ldi	r22, 0xC0	; 192
    4460:	71 e2       	ldi	r23, 0x21	; 33
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <network_set_callback>
    4468:	8f ef       	ldi	r24, 0xFF	; 255
    446a:	80 93 01 1a 	sts	0x1A01, r24	; 0x801a01 <messages+0x1>
    446e:	08 95       	ret

00004470 <simple_p_send>:
    4470:	5f 92       	push	r5
    4472:	6f 92       	push	r6
    4474:	7f 92       	push	r7
    4476:	8f 92       	push	r8
    4478:	9f 92       	push	r9
    447a:	af 92       	push	r10
    447c:	bf 92       	push	r11
    447e:	cf 92       	push	r12
    4480:	df 92       	push	r13
    4482:	ef 92       	push	r14
    4484:	ff 92       	push	r15
    4486:	0f 93       	push	r16
    4488:	1f 93       	push	r17
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	58 2e       	mov	r5, r24
    4490:	5b 01       	movw	r10, r22
    4492:	8a 01       	movw	r16, r20
    4494:	8c e2       	ldi	r24, 0x2C	; 44
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    449c:	7c 01       	movw	r14, r24
    449e:	98 01       	movw	r18, r16
    44a0:	36 95       	lsr	r19
    44a2:	27 95       	ror	r18
    44a4:	ad e0       	ldi	r26, 0x0D	; 13
    44a6:	b3 ec       	ldi	r27, 0xC3	; 195
    44a8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__umulhisi3>
    44ac:	92 95       	swap	r25
    44ae:	82 95       	swap	r24
    44b0:	8f 70       	andi	r24, 0x0F	; 15
    44b2:	89 27       	eor	r24, r25
    44b4:	9f 70       	andi	r25, 0x0F	; 15
    44b6:	89 27       	eor	r24, r25
    44b8:	4a e2       	ldi	r20, 0x2A	; 42
    44ba:	48 9f       	mul	r20, r24
    44bc:	90 01       	movw	r18, r0
    44be:	49 9f       	mul	r20, r25
    44c0:	30 0d       	add	r19, r0
    44c2:	11 24       	eor	r1, r1
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	02 17       	cp	r16, r18
    44c8:	13 07       	cpc	r17, r19
    44ca:	09 f4       	brne	.+2      	; 0x44ce <simple_p_send+0x5e>
    44cc:	40 e0       	ldi	r20, 0x00	; 0
    44ce:	98 01       	movw	r18, r16
    44d0:	36 95       	lsr	r19
    44d2:	27 95       	ror	r18
    44d4:	ad e0       	ldi	r26, 0x0D	; 13
    44d6:	b3 ec       	ldi	r27, 0xC3	; 195
    44d8:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__umulhisi3>
    44dc:	92 95       	swap	r25
    44de:	82 95       	swap	r24
    44e0:	8f 70       	andi	r24, 0x0F	; 15
    44e2:	89 27       	eor	r24, r25
    44e4:	9f 70       	andi	r25, 0x0F	; 15
    44e6:	89 27       	eor	r24, r25
    44e8:	84 0f       	add	r24, r20
    44ea:	01 15       	cp	r16, r1
    44ec:	11 05       	cpc	r17, r1
    44ee:	59 f1       	breq	.+86     	; 0x4546 <simple_p_send+0xd6>
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	c1 2c       	mov	r12, r1
    44f4:	d1 2c       	mov	r13, r1
    44f6:	66 24       	eor	r6, r6
    44f8:	6a 94       	dec	r6
    44fa:	68 0e       	add	r6, r24
    44fc:	47 01       	movw	r8, r14
    44fe:	82 e0       	ldi	r24, 0x02	; 2
    4500:	88 0e       	add	r8, r24
    4502:	91 1c       	adc	r9, r1
    4504:	e8 01       	movw	r28, r16
    4506:	0b 32       	cpi	r16, 0x2B	; 43
    4508:	11 05       	cpc	r17, r1
    450a:	10 f0       	brcs	.+4      	; 0x4510 <simple_p_send+0xa0>
    450c:	ca e2       	ldi	r28, 0x2A	; 42
    450e:	d0 e0       	ldi	r29, 0x00	; 0
    4510:	77 24       	eor	r7, r7
    4512:	73 94       	inc	r7
    4514:	79 0e       	add	r7, r25
    4516:	f7 01       	movw	r30, r14
    4518:	90 83       	st	Z, r25
    451a:	61 82       	std	Z+1, r6	; 0x01
    451c:	b5 01       	movw	r22, r10
    451e:	6c 0d       	add	r22, r12
    4520:	7d 1d       	adc	r23, r13
    4522:	ae 01       	movw	r20, r28
    4524:	c4 01       	movw	r24, r8
    4526:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
    452a:	9e 01       	movw	r18, r28
    452c:	2e 5f       	subi	r18, 0xFE	; 254
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	a7 01       	movw	r20, r14
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	85 2d       	mov	r24, r5
    4536:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
    453a:	cc 0e       	add	r12, r28
    453c:	dd 1e       	adc	r13, r29
    453e:	0c 1b       	sub	r16, r28
    4540:	1d 0b       	sbc	r17, r29
    4542:	97 2d       	mov	r25, r7
    4544:	f9 f6       	brne	.-66     	; 0x4504 <simple_p_send+0x94>
    4546:	c7 01       	movw	r24, r14
    4548:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	df 91       	pop	r29
    4550:	cf 91       	pop	r28
    4552:	1f 91       	pop	r17
    4554:	0f 91       	pop	r16
    4556:	ff 90       	pop	r15
    4558:	ef 90       	pop	r14
    455a:	df 90       	pop	r13
    455c:	cf 90       	pop	r12
    455e:	bf 90       	pop	r11
    4560:	af 90       	pop	r10
    4562:	9f 90       	pop	r9
    4564:	8f 90       	pop	r8
    4566:	7f 90       	pop	r7
    4568:	6f 90       	pop	r6
    456a:	5f 90       	pop	r5
    456c:	08 95       	ret

0000456e <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    456e:	84 b1       	in	r24, 0x04	; 4
    4570:	87 60       	ori	r24, 0x07	; 7
    4572:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    4574:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    4576:	8c b5       	in	r24, 0x2c	; 44
    4578:	81 60       	ori	r24, 0x01	; 1
    457a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    457c:	8c b5       	in	r24, 0x2c	; 44
    457e:	8c 65       	ori	r24, 0x5C	; 92
    4580:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    4582:	8c b5       	in	r24, 0x2c	; 44
    4584:	8f 7d       	andi	r24, 0xDF	; 223
    4586:	8c bd       	out	0x2c, r24	; 44
    4588:	08 95       	ret

0000458a <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    458a:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    458c:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    458e:	0d b4       	in	r0, 0x2d	; 45
    4590:	07 fe       	sbrs	r0, 7
    4592:	fd cf       	rjmp	.-6      	; 0x458e <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    4594:	8e b5       	in	r24, 0x2e	; 46
}
    4596:	08 95       	ret

00004598 <xTaskGenericCreate>:
    4598:	4f 92       	push	r4
    459a:	5f 92       	push	r5
    459c:	6f 92       	push	r6
    459e:	7f 92       	push	r7
    45a0:	8f 92       	push	r8
    45a2:	9f 92       	push	r9
    45a4:	af 92       	push	r10
    45a6:	bf 92       	push	r11
    45a8:	cf 92       	push	r12
    45aa:	df 92       	push	r13
    45ac:	ef 92       	push	r14
    45ae:	ff 92       	push	r15
    45b0:	0f 93       	push	r16
    45b2:	1f 93       	push	r17
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	3c 01       	movw	r6, r24
    45ba:	5b 01       	movw	r10, r22
    45bc:	4a 01       	movw	r8, r20
    45be:	29 01       	movw	r4, r18
    45c0:	c1 14       	cp	r12, r1
    45c2:	d1 04       	cpc	r13, r1
    45c4:	39 f4       	brne	.+14     	; 0x45d4 <xTaskGenericCreate+0x3c>
    45c6:	ca 01       	movw	r24, r20
    45c8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    45cc:	6c 01       	movw	r12, r24
    45ce:	89 2b       	or	r24, r25
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <xTaskGenericCreate+0x3c>
    45d2:	e4 c0       	rjmp	.+456    	; 0x479c <xTaskGenericCreate+0x204>
    45d4:	88 e2       	ldi	r24, 0x28	; 40
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    45dc:	ec 01       	movw	r28, r24
    45de:	89 2b       	or	r24, r25
    45e0:	71 f0       	breq	.+28     	; 0x45fe <xTaskGenericCreate+0x66>
    45e2:	d8 8e       	std	Y+24, r13	; 0x18
    45e4:	cf 8a       	std	Y+23, r12	; 0x17
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	88 1a       	sub	r8, r24
    45ea:	91 08       	sbc	r9, r1
    45ec:	c8 0c       	add	r12, r8
    45ee:	d9 1c       	adc	r13, r9
    45f0:	d5 01       	movw	r26, r10
    45f2:	8c 91       	ld	r24, X
    45f4:	89 8f       	std	Y+25, r24	; 0x19
    45f6:	8c 91       	ld	r24, X
    45f8:	81 11       	cpse	r24, r1
    45fa:	05 c0       	rjmp	.+10     	; 0x4606 <xTaskGenericCreate+0x6e>
    45fc:	18 c0       	rjmp	.+48     	; 0x462e <xTaskGenericCreate+0x96>
    45fe:	c6 01       	movw	r24, r12
    4600:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    4604:	cb c0       	rjmp	.+406    	; 0x479c <xTaskGenericCreate+0x204>
    4606:	ae 01       	movw	r20, r28
    4608:	46 5e       	subi	r20, 0xE6	; 230
    460a:	5f 4f       	sbci	r21, 0xFF	; 255
    460c:	f5 01       	movw	r30, r10
    460e:	31 96       	adiw	r30, 0x01	; 1
    4610:	b8 e0       	ldi	r27, 0x08	; 8
    4612:	ab 0e       	add	r10, r27
    4614:	b1 1c       	adc	r11, r1
    4616:	cf 01       	movw	r24, r30
    4618:	21 91       	ld	r18, Z+
    461a:	da 01       	movw	r26, r20
    461c:	2d 93       	st	X+, r18
    461e:	ad 01       	movw	r20, r26
    4620:	dc 01       	movw	r26, r24
    4622:	8c 91       	ld	r24, X
    4624:	88 23       	and	r24, r24
    4626:	19 f0       	breq	.+6      	; 0x462e <xTaskGenericCreate+0x96>
    4628:	ae 16       	cp	r10, r30
    462a:	bf 06       	cpc	r11, r31
    462c:	a1 f7       	brne	.-24     	; 0x4616 <xTaskGenericCreate+0x7e>
    462e:	18 a2       	std	Y+32, r1	; 0x20
    4630:	10 2f       	mov	r17, r16
    4632:	06 30       	cpi	r16, 0x06	; 6
    4634:	08 f0       	brcs	.+2      	; 0x4638 <xTaskGenericCreate+0xa0>
    4636:	15 e0       	ldi	r17, 0x05	; 5
    4638:	1e 8b       	std	Y+22, r17	; 0x16
    463a:	19 a3       	std	Y+33, r17	; 0x21
    463c:	1a a2       	std	Y+34, r1	; 0x22
    463e:	5e 01       	movw	r10, r28
    4640:	b2 e0       	ldi	r27, 0x02	; 2
    4642:	ab 0e       	add	r10, r27
    4644:	b1 1c       	adc	r11, r1
    4646:	c5 01       	movw	r24, r10
    4648:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    464c:	ce 01       	movw	r24, r28
    464e:	0c 96       	adiw	r24, 0x0c	; 12
    4650:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4654:	d9 87       	std	Y+9, r29	; 0x09
    4656:	c8 87       	std	Y+8, r28	; 0x08
    4658:	86 e0       	ldi	r24, 0x06	; 6
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	81 1b       	sub	r24, r17
    465e:	91 09       	sbc	r25, r1
    4660:	9d 87       	std	Y+13, r25	; 0x0d
    4662:	8c 87       	std	Y+12, r24	; 0x0c
    4664:	db 8b       	std	Y+19, r29	; 0x13
    4666:	ca 8b       	std	Y+18, r28	; 0x12
    4668:	1b a2       	std	Y+35, r1	; 0x23
    466a:	1c a2       	std	Y+36, r1	; 0x24
    466c:	1d a2       	std	Y+37, r1	; 0x25
    466e:	1e a2       	std	Y+38, r1	; 0x26
    4670:	1f a2       	std	Y+39, r1	; 0x27
    4672:	a2 01       	movw	r20, r4
    4674:	b3 01       	movw	r22, r6
    4676:	c6 01       	movw	r24, r12
    4678:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <pxPortInitialiseStack>
    467c:	99 83       	std	Y+1, r25	; 0x01
    467e:	88 83       	st	Y, r24
    4680:	e1 14       	cp	r14, r1
    4682:	f1 04       	cpc	r15, r1
    4684:	19 f0       	breq	.+6      	; 0x468c <xTaskGenericCreate+0xf4>
    4686:	f7 01       	movw	r30, r14
    4688:	d1 83       	std	Z+1, r29	; 0x01
    468a:	c0 83       	st	Z, r28
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	f8 94       	cli
    4690:	0f 92       	push	r0
    4692:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    4696:	8f 5f       	subi	r24, 0xFF	; 255
    4698:	80 93 74 1a 	sts	0x1A74, r24	; 0x801a74 <uxCurrentNumberOfTasks>
    469c:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    46a0:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    46a4:	89 2b       	or	r24, r25
    46a6:	d9 f5       	brne	.+118    	; 0x471e <xTaskGenericCreate+0x186>
    46a8:	d0 93 d4 1a 	sts	0x1AD4, r29	; 0x801ad4 <pxCurrentTCB+0x1>
    46ac:	c0 93 d3 1a 	sts	0x1AD3, r28	; 0x801ad3 <pxCurrentTCB>
    46b0:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    46b4:	81 30       	cpi	r24, 0x01	; 1
    46b6:	09 f0       	breq	.+2      	; 0x46ba <xTaskGenericCreate+0x122>
    46b8:	41 c0       	rjmp	.+130    	; 0x473c <xTaskGenericCreate+0x1a4>
    46ba:	0f 2e       	mov	r0, r31
    46bc:	fd e9       	ldi	r31, 0x9D	; 157
    46be:	ef 2e       	mov	r14, r31
    46c0:	fa e1       	ldi	r31, 0x1A	; 26
    46c2:	ff 2e       	mov	r15, r31
    46c4:	f0 2d       	mov	r31, r0
    46c6:	0f 2e       	mov	r0, r31
    46c8:	f3 ed       	ldi	r31, 0xD3	; 211
    46ca:	cf 2e       	mov	r12, r31
    46cc:	fa e1       	ldi	r31, 0x1A	; 26
    46ce:	df 2e       	mov	r13, r31
    46d0:	f0 2d       	mov	r31, r0
    46d2:	c7 01       	movw	r24, r14
    46d4:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    46d8:	f9 e0       	ldi	r31, 0x09	; 9
    46da:	ef 0e       	add	r14, r31
    46dc:	f1 1c       	adc	r15, r1
    46de:	ec 14       	cp	r14, r12
    46e0:	fd 04       	cpc	r15, r13
    46e2:	b9 f7       	brne	.-18     	; 0x46d2 <xTaskGenericCreate+0x13a>
    46e4:	84 e9       	ldi	r24, 0x94	; 148
    46e6:	9a e1       	ldi	r25, 0x1A	; 26
    46e8:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    46ec:	8b e8       	ldi	r24, 0x8B	; 139
    46ee:	9a e1       	ldi	r25, 0x1A	; 26
    46f0:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    46f4:	8e e7       	ldi	r24, 0x7E	; 126
    46f6:	9a e1       	ldi	r25, 0x1A	; 26
    46f8:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    46fc:	85 e7       	ldi	r24, 0x75	; 117
    46fe:	9a e1       	ldi	r25, 0x1A	; 26
    4700:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4704:	84 e9       	ldi	r24, 0x94	; 148
    4706:	9a e1       	ldi	r25, 0x1A	; 26
    4708:	90 93 8a 1a 	sts	0x1A8A, r25	; 0x801a8a <pxDelayedTaskList+0x1>
    470c:	80 93 89 1a 	sts	0x1A89, r24	; 0x801a89 <pxDelayedTaskList>
    4710:	8b e8       	ldi	r24, 0x8B	; 139
    4712:	9a e1       	ldi	r25, 0x1A	; 26
    4714:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4718:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    471c:	0f c0       	rjmp	.+30     	; 0x473c <xTaskGenericCreate+0x1a4>
    471e:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <xSchedulerRunning>
    4722:	81 11       	cpse	r24, r1
    4724:	0b c0       	rjmp	.+22     	; 0x473c <xTaskGenericCreate+0x1a4>
    4726:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    472a:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    472e:	86 89       	ldd	r24, Z+22	; 0x16
    4730:	08 17       	cp	r16, r24
    4732:	20 f0       	brcs	.+8      	; 0x473c <xTaskGenericCreate+0x1a4>
    4734:	d0 93 d4 1a 	sts	0x1AD4, r29	; 0x801ad4 <pxCurrentTCB+0x1>
    4738:	c0 93 d3 1a 	sts	0x1AD3, r28	; 0x801ad3 <pxCurrentTCB>
    473c:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <uxTaskNumber>
    4740:	8f 5f       	subi	r24, 0xFF	; 255
    4742:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTaskNumber>
    4746:	8e 89       	ldd	r24, Y+22	; 0x16
    4748:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    474c:	98 17       	cp	r25, r24
    474e:	10 f4       	brcc	.+4      	; 0x4754 <xTaskGenericCreate+0x1bc>
    4750:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	9c 01       	movw	r18, r24
    4758:	22 0f       	add	r18, r18
    475a:	33 1f       	adc	r19, r19
    475c:	22 0f       	add	r18, r18
    475e:	33 1f       	adc	r19, r19
    4760:	22 0f       	add	r18, r18
    4762:	33 1f       	adc	r19, r19
    4764:	82 0f       	add	r24, r18
    4766:	93 1f       	adc	r25, r19
    4768:	b5 01       	movw	r22, r10
    476a:	83 56       	subi	r24, 0x63	; 99
    476c:	95 4e       	sbci	r25, 0xE5	; 229
    476e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4772:	0f 90       	pop	r0
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <xSchedulerRunning>
    477a:	88 23       	and	r24, r24
    477c:	59 f0       	breq	.+22     	; 0x4794 <xTaskGenericCreate+0x1fc>
    477e:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4782:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4786:	86 89       	ldd	r24, Z+22	; 0x16
    4788:	80 17       	cp	r24, r16
    478a:	30 f4       	brcc	.+12     	; 0x4798 <xTaskGenericCreate+0x200>
    478c:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	05 c0       	rjmp	.+10     	; 0x479e <xTaskGenericCreate+0x206>
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	03 c0       	rjmp	.+6      	; 0x479e <xTaskGenericCreate+0x206>
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	01 c0       	rjmp	.+2      	; 0x479e <xTaskGenericCreate+0x206>
    479c:	8f ef       	ldi	r24, 0xFF	; 255
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	ff 90       	pop	r15
    47a8:	ef 90       	pop	r14
    47aa:	df 90       	pop	r13
    47ac:	cf 90       	pop	r12
    47ae:	bf 90       	pop	r11
    47b0:	af 90       	pop	r10
    47b2:	9f 90       	pop	r9
    47b4:	8f 90       	pop	r8
    47b6:	7f 90       	pop	r7
    47b8:	6f 90       	pop	r6
    47ba:	5f 90       	pop	r5
    47bc:	4f 90       	pop	r4
    47be:	08 95       	ret

000047c0 <vTaskDelayUntil>:
    47c0:	9f 92       	push	r9
    47c2:	af 92       	push	r10
    47c4:	bf 92       	push	r11
    47c6:	cf 92       	push	r12
    47c8:	df 92       	push	r13
    47ca:	ef 92       	push	r14
    47cc:	ff 92       	push	r15
    47ce:	0f 93       	push	r16
    47d0:	1f 93       	push	r17
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	fc 01       	movw	r30, r24
    47d8:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    47dc:	9f 5f       	subi	r25, 0xFF	; 255
    47de:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <uxSchedulerSuspended>
    47e2:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    47e6:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    47ea:	20 81       	ld	r18, Z
    47ec:	31 81       	ldd	r19, Z+1	; 0x01
    47ee:	e9 01       	movw	r28, r18
    47f0:	c6 0f       	add	r28, r22
    47f2:	d7 1f       	adc	r29, r23
    47f4:	82 17       	cp	r24, r18
    47f6:	93 07       	cpc	r25, r19
    47f8:	58 f4       	brcc	.+22     	; 0x4810 <vTaskDelayUntil+0x50>
    47fa:	c2 17       	cp	r28, r18
    47fc:	d3 07       	cpc	r29, r19
    47fe:	08 f0       	brcs	.+2      	; 0x4802 <vTaskDelayUntil+0x42>
    4800:	6e c1       	rjmp	.+732    	; 0x4ade <vTaskDelayUntil+0x31e>
    4802:	d1 83       	std	Z+1, r29	; 0x01
    4804:	c0 83       	st	Z, r28
    4806:	8c 17       	cp	r24, r28
    4808:	9d 07       	cpc	r25, r29
    480a:	08 f0       	brcs	.+2      	; 0x480e <vTaskDelayUntil+0x4e>
    480c:	42 c0       	rjmp	.+132    	; 0x4892 <vTaskDelayUntil+0xd2>
    480e:	09 c0       	rjmp	.+18     	; 0x4822 <vTaskDelayUntil+0x62>
    4810:	c2 17       	cp	r28, r18
    4812:	d3 07       	cpc	r29, r19
    4814:	08 f4       	brcc	.+2      	; 0x4818 <vTaskDelayUntil+0x58>
    4816:	60 c1       	rjmp	.+704    	; 0x4ad8 <vTaskDelayUntil+0x318>
    4818:	8c 17       	cp	r24, r28
    481a:	9d 07       	cpc	r25, r29
    481c:	08 f4       	brcc	.+2      	; 0x4820 <vTaskDelayUntil+0x60>
    481e:	5c c1       	rjmp	.+696    	; 0x4ad8 <vTaskDelayUntil+0x318>
    4820:	5e c1       	rjmp	.+700    	; 0x4ade <vTaskDelayUntil+0x31e>
    4822:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4826:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    482a:	02 96       	adiw	r24, 0x02	; 2
    482c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4830:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4834:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4838:	d3 83       	std	Z+3, r29	; 0x03
    483a:	c2 83       	std	Z+2, r28	; 0x02
    483c:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    4840:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4844:	c8 17       	cp	r28, r24
    4846:	d9 07       	cpc	r29, r25
    4848:	68 f4       	brcc	.+26     	; 0x4864 <vTaskDelayUntil+0xa4>
    484a:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    484e:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4852:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    4856:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    485a:	6e 5f       	subi	r22, 0xFE	; 254
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4862:	17 c0       	rjmp	.+46     	; 0x4892 <vTaskDelayUntil+0xd2>
    4864:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4868:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    486c:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4870:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4874:	6e 5f       	subi	r22, 0xFE	; 254
    4876:	7f 4f       	sbci	r23, 0xFF	; 255
    4878:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    487c:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    4880:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4884:	c8 17       	cp	r28, r24
    4886:	d9 07       	cpc	r29, r25
    4888:	20 f4       	brcc	.+8      	; 0x4892 <vTaskDelayUntil+0xd2>
    488a:	d0 93 6b 1a 	sts	0x1A6B, r29	; 0x801a6b <xNextTaskUnblockTime+0x1>
    488e:	c0 93 6a 1a 	sts	0x1A6A, r28	; 0x801a6a <xNextTaskUnblockTime>
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	0f 92       	push	r0
    4898:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    489c:	81 50       	subi	r24, 0x01	; 1
    489e:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <uxSchedulerSuspended>
    48a2:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    48a6:	81 11       	cpse	r24, r1
    48a8:	0d c1       	rjmp	.+538    	; 0x4ac4 <vTaskDelayUntil+0x304>
    48aa:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    48ae:	81 11       	cpse	r24, r1
    48b0:	33 c0       	rjmp	.+102    	; 0x4918 <vTaskDelayUntil+0x158>
    48b2:	0b c1       	rjmp	.+534    	; 0x4aca <vTaskDelayUntil+0x30a>
    48b4:	d7 01       	movw	r26, r14
    48b6:	15 96       	adiw	r26, 0x05	; 5
    48b8:	ed 91       	ld	r30, X+
    48ba:	fc 91       	ld	r31, X
    48bc:	16 97       	sbiw	r26, 0x06	; 6
    48be:	c6 81       	ldd	r28, Z+6	; 0x06
    48c0:	d7 81       	ldd	r29, Z+7	; 0x07
    48c2:	ce 01       	movw	r24, r28
    48c4:	0c 96       	adiw	r24, 0x0c	; 12
    48c6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    48ca:	8e 01       	movw	r16, r28
    48cc:	0e 5f       	subi	r16, 0xFE	; 254
    48ce:	1f 4f       	sbci	r17, 0xFF	; 255
    48d0:	c8 01       	movw	r24, r16
    48d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    48d6:	8e 89       	ldd	r24, Y+22	; 0x16
    48d8:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    48dc:	98 17       	cp	r25, r24
    48de:	10 f4       	brcc	.+4      	; 0x48e4 <vTaskDelayUntil+0x124>
    48e0:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	9c 01       	movw	r18, r24
    48e8:	22 0f       	add	r18, r18
    48ea:	33 1f       	adc	r19, r19
    48ec:	22 0f       	add	r18, r18
    48ee:	33 1f       	adc	r19, r19
    48f0:	22 0f       	add	r18, r18
    48f2:	33 1f       	adc	r19, r19
    48f4:	82 0f       	add	r24, r18
    48f6:	93 1f       	adc	r25, r19
    48f8:	b8 01       	movw	r22, r16
    48fa:	83 56       	subi	r24, 0x63	; 99
    48fc:	95 4e       	sbci	r25, 0xE5	; 229
    48fe:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4902:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4906:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    490a:	9e 89       	ldd	r25, Y+22	; 0x16
    490c:	86 89       	ldd	r24, Z+22	; 0x16
    490e:	98 17       	cp	r25, r24
    4910:	58 f0       	brcs	.+22     	; 0x4928 <vTaskDelayUntil+0x168>
    4912:	d0 92 6e 1a 	sts	0x1A6E, r13	; 0x801a6e <xYieldPending>
    4916:	08 c0       	rjmp	.+16     	; 0x4928 <vTaskDelayUntil+0x168>
    4918:	0f 2e       	mov	r0, r31
    491a:	fe e7       	ldi	r31, 0x7E	; 126
    491c:	ef 2e       	mov	r14, r31
    491e:	fa e1       	ldi	r31, 0x1A	; 26
    4920:	ff 2e       	mov	r15, r31
    4922:	f0 2d       	mov	r31, r0
    4924:	dd 24       	eor	r13, r13
    4926:	d3 94       	inc	r13
    4928:	f7 01       	movw	r30, r14
    492a:	80 81       	ld	r24, Z
    492c:	81 11       	cpse	r24, r1
    492e:	c2 cf       	rjmp	.-124    	; 0x48b4 <vTaskDelayUntil+0xf4>
    4930:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4934:	88 23       	and	r24, r24
    4936:	09 f4       	brne	.+2      	; 0x493a <vTaskDelayUntil+0x17a>
    4938:	bd c0       	rjmp	.+378    	; 0x4ab4 <vTaskDelayUntil+0x2f4>
    493a:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    493e:	88 23       	and	r24, r24
    4940:	09 f4       	brne	.+2      	; 0x4944 <vTaskDelayUntil+0x184>
    4942:	b8 c0       	rjmp	.+368    	; 0x4ab4 <vTaskDelayUntil+0x2f4>
    4944:	91 2c       	mov	r9, r1
    4946:	bb 24       	eor	r11, r11
    4948:	b3 94       	inc	r11
    494a:	cc 24       	eor	r12, r12
    494c:	ca 94       	dec	r12
    494e:	dc 2c       	mov	r13, r12
    4950:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4954:	81 11       	cpse	r24, r1
    4956:	98 c0       	rjmp	.+304    	; 0x4a88 <vTaskDelayUntil+0x2c8>
    4958:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    495c:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4960:	01 96       	adiw	r24, 0x01	; 1
    4962:	90 93 73 1a 	sts	0x1A73, r25	; 0x801a73 <xTickCount+0x1>
    4966:	80 93 72 1a 	sts	0x1A72, r24	; 0x801a72 <xTickCount>
    496a:	e0 90 72 1a 	lds	r14, 0x1A72	; 0x801a72 <xTickCount>
    496e:	f0 90 73 1a 	lds	r15, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4972:	e1 14       	cp	r14, r1
    4974:	f1 04       	cpc	r15, r1
    4976:	89 f5       	brne	.+98     	; 0x49da <vTaskDelayUntil+0x21a>
    4978:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    497c:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4980:	20 91 87 1a 	lds	r18, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    4984:	30 91 88 1a 	lds	r19, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4988:	30 93 8a 1a 	sts	0x1A8A, r19	; 0x801a8a <pxDelayedTaskList+0x1>
    498c:	20 93 89 1a 	sts	0x1A89, r18	; 0x801a89 <pxDelayedTaskList>
    4990:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4994:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    4998:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    499c:	8f 5f       	subi	r24, 0xFF	; 255
    499e:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <xNumOfOverflows>
    49a2:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    49a6:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    49aa:	80 81       	ld	r24, Z
    49ac:	81 11       	cpse	r24, r1
    49ae:	05 c0       	rjmp	.+10     	; 0x49ba <vTaskDelayUntil+0x1fa>
    49b0:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    49b4:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    49b8:	10 c0       	rjmp	.+32     	; 0x49da <vTaskDelayUntil+0x21a>
    49ba:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    49be:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    49c2:	05 80       	ldd	r0, Z+5	; 0x05
    49c4:	f6 81       	ldd	r31, Z+6	; 0x06
    49c6:	e0 2d       	mov	r30, r0
    49c8:	06 80       	ldd	r0, Z+6	; 0x06
    49ca:	f7 81       	ldd	r31, Z+7	; 0x07
    49cc:	e0 2d       	mov	r30, r0
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    49d6:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    49da:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    49de:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    49e2:	e8 16       	cp	r14, r24
    49e4:	f9 06       	cpc	r15, r25
    49e6:	08 f4       	brcc	.+2      	; 0x49ea <vTaskDelayUntil+0x22a>
    49e8:	7d c0       	rjmp	.+250    	; 0x4ae4 <vTaskDelayUntil+0x324>
    49ea:	a9 2c       	mov	r10, r9
    49ec:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    49f0:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    49f4:	80 81       	ld	r24, Z
    49f6:	81 11       	cpse	r24, r1
    49f8:	05 c0       	rjmp	.+10     	; 0x4a04 <vTaskDelayUntil+0x244>
    49fa:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    49fe:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    4a02:	48 c0       	rjmp	.+144    	; 0x4a94 <vTaskDelayUntil+0x2d4>
    4a04:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4a08:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4a0c:	05 80       	ldd	r0, Z+5	; 0x05
    4a0e:	f6 81       	ldd	r31, Z+6	; 0x06
    4a10:	e0 2d       	mov	r30, r0
    4a12:	c6 81       	ldd	r28, Z+6	; 0x06
    4a14:	d7 81       	ldd	r29, Z+7	; 0x07
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1a:	e8 16       	cp	r14, r24
    4a1c:	f9 06       	cpc	r15, r25
    4a1e:	28 f4       	brcc	.+10     	; 0x4a2a <vTaskDelayUntil+0x26a>
    4a20:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4a24:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    4a28:	35 c0       	rjmp	.+106    	; 0x4a94 <vTaskDelayUntil+0x2d4>
    4a2a:	8e 01       	movw	r16, r28
    4a2c:	0e 5f       	subi	r16, 0xFE	; 254
    4a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a30:	c8 01       	movw	r24, r16
    4a32:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4a36:	8c 89       	ldd	r24, Y+20	; 0x14
    4a38:	9d 89       	ldd	r25, Y+21	; 0x15
    4a3a:	89 2b       	or	r24, r25
    4a3c:	21 f0       	breq	.+8      	; 0x4a46 <vTaskDelayUntil+0x286>
    4a3e:	ce 01       	movw	r24, r28
    4a40:	0c 96       	adiw	r24, 0x0c	; 12
    4a42:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4a46:	8e 89       	ldd	r24, Y+22	; 0x16
    4a48:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    4a4c:	98 17       	cp	r25, r24
    4a4e:	10 f4       	brcc	.+4      	; 0x4a54 <vTaskDelayUntil+0x294>
    4a50:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	9c 01       	movw	r18, r24
    4a58:	22 0f       	add	r18, r18
    4a5a:	33 1f       	adc	r19, r19
    4a5c:	22 0f       	add	r18, r18
    4a5e:	33 1f       	adc	r19, r19
    4a60:	22 0f       	add	r18, r18
    4a62:	33 1f       	adc	r19, r19
    4a64:	82 0f       	add	r24, r18
    4a66:	93 1f       	adc	r25, r19
    4a68:	b8 01       	movw	r22, r16
    4a6a:	83 56       	subi	r24, 0x63	; 99
    4a6c:	95 4e       	sbci	r25, 0xE5	; 229
    4a6e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4a72:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4a76:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4a7a:	9e 89       	ldd	r25, Y+22	; 0x16
    4a7c:	86 89       	ldd	r24, Z+22	; 0x16
    4a7e:	98 17       	cp	r25, r24
    4a80:	08 f4       	brcc	.+2      	; 0x4a84 <vTaskDelayUntil+0x2c4>
    4a82:	b4 cf       	rjmp	.-152    	; 0x49ec <vTaskDelayUntil+0x22c>
    4a84:	ab 2c       	mov	r10, r11
    4a86:	b2 cf       	rjmp	.-156    	; 0x49ec <vTaskDelayUntil+0x22c>
    4a88:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4a8c:	8f 5f       	subi	r24, 0xFF	; 255
    4a8e:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    4a92:	28 c0       	rjmp	.+80     	; 0x4ae4 <vTaskDelayUntil+0x324>
    4a94:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4a98:	81 11       	cpse	r24, r1
    4a9a:	01 c0       	rjmp	.+2      	; 0x4a9e <vTaskDelayUntil+0x2de>
    4a9c:	a1 10       	cpse	r10, r1
    4a9e:	b0 92 6e 1a 	sts	0x1A6E, r11	; 0x801a6e <xYieldPending>
    4aa2:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4aa6:	81 50       	subi	r24, 0x01	; 1
    4aa8:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    4aac:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4ab0:	81 11       	cpse	r24, r1
    4ab2:	4e cf       	rjmp	.-356    	; 0x4950 <vTaskDelayUntil+0x190>
    4ab4:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4ab8:	81 30       	cpi	r24, 0x01	; 1
    4aba:	31 f4       	brne	.+12     	; 0x4ac8 <vTaskDelayUntil+0x308>
    4abc:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	03 c0       	rjmp	.+6      	; 0x4aca <vTaskDelayUntil+0x30a>
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	01 c0       	rjmp	.+2      	; 0x4aca <vTaskDelayUntil+0x30a>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	0f 90       	pop	r0
    4acc:	0f be       	out	0x3f, r0	; 63
    4ace:	81 11       	cpse	r24, r1
    4ad0:	0e c0       	rjmp	.+28     	; 0x4aee <vTaskDelayUntil+0x32e>
    4ad2:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4ad6:	0b c0       	rjmp	.+22     	; 0x4aee <vTaskDelayUntil+0x32e>
    4ad8:	d1 83       	std	Z+1, r29	; 0x01
    4ada:	c0 83       	st	Z, r28
    4adc:	a2 ce       	rjmp	.-700    	; 0x4822 <vTaskDelayUntil+0x62>
    4ade:	d1 83       	std	Z+1, r29	; 0x01
    4ae0:	c0 83       	st	Z, r28
    4ae2:	d7 ce       	rjmp	.-594    	; 0x4892 <vTaskDelayUntil+0xd2>
    4ae4:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4ae8:	81 11       	cpse	r24, r1
    4aea:	d9 cf       	rjmp	.-78     	; 0x4a9e <vTaskDelayUntil+0x2de>
    4aec:	da cf       	rjmp	.-76     	; 0x4aa2 <vTaskDelayUntil+0x2e2>
    4aee:	df 91       	pop	r29
    4af0:	cf 91       	pop	r28
    4af2:	1f 91       	pop	r17
    4af4:	0f 91       	pop	r16
    4af6:	ff 90       	pop	r15
    4af8:	ef 90       	pop	r14
    4afa:	df 90       	pop	r13
    4afc:	cf 90       	pop	r12
    4afe:	bf 90       	pop	r11
    4b00:	af 90       	pop	r10
    4b02:	9f 90       	pop	r9
    4b04:	08 95       	ret

00004b06 <vTaskDelay>:
    4b06:	9f 92       	push	r9
    4b08:	af 92       	push	r10
    4b0a:	bf 92       	push	r11
    4b0c:	cf 92       	push	r12
    4b0e:	df 92       	push	r13
    4b10:	ef 92       	push	r14
    4b12:	ff 92       	push	r15
    4b14:	0f 93       	push	r16
    4b16:	1f 93       	push	r17
    4b18:	cf 93       	push	r28
    4b1a:	df 93       	push	r29
    4b1c:	00 97       	sbiw	r24, 0x00	; 0
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <vTaskDelay+0x1c>
    4b20:	63 c1       	rjmp	.+710    	; 0x4de8 <vTaskDelay+0x2e2>
    4b22:	20 91 69 1a 	lds	r18, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4b26:	2f 5f       	subi	r18, 0xFF	; 255
    4b28:	20 93 69 1a 	sts	0x1A69, r18	; 0x801a69 <uxSchedulerSuspended>
    4b2c:	c0 91 72 1a 	lds	r28, 0x1A72	; 0x801a72 <xTickCount>
    4b30:	d0 91 73 1a 	lds	r29, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4b34:	c8 0f       	add	r28, r24
    4b36:	d9 1f       	adc	r29, r25
    4b38:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4b3c:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4b40:	02 96       	adiw	r24, 0x02	; 2
    4b42:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4b46:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4b4a:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4b4e:	d3 83       	std	Z+3, r29	; 0x03
    4b50:	c2 83       	std	Z+2, r28	; 0x02
    4b52:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    4b56:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4b5a:	c8 17       	cp	r28, r24
    4b5c:	d9 07       	cpc	r29, r25
    4b5e:	68 f4       	brcc	.+26     	; 0x4b7a <vTaskDelay+0x74>
    4b60:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4b64:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4b68:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    4b6c:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4b70:	6e 5f       	subi	r22, 0xFE	; 254
    4b72:	7f 4f       	sbci	r23, 0xFF	; 255
    4b74:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4b78:	17 c0       	rjmp	.+46     	; 0x4ba8 <vTaskDelay+0xa2>
    4b7a:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4b7e:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4b82:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4b86:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4b8a:	6e 5f       	subi	r22, 0xFE	; 254
    4b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b8e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4b92:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    4b96:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4b9a:	c8 17       	cp	r28, r24
    4b9c:	d9 07       	cpc	r29, r25
    4b9e:	20 f4       	brcc	.+8      	; 0x4ba8 <vTaskDelay+0xa2>
    4ba0:	d0 93 6b 1a 	sts	0x1A6B, r29	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4ba4:	c0 93 6a 1a 	sts	0x1A6A, r28	; 0x801a6a <xNextTaskUnblockTime>
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	0f 92       	push	r0
    4bae:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4bb2:	81 50       	subi	r24, 0x01	; 1
    4bb4:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <uxSchedulerSuspended>
    4bb8:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4bbc:	81 11       	cpse	r24, r1
    4bbe:	0d c1       	rjmp	.+538    	; 0x4dda <vTaskDelay+0x2d4>
    4bc0:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    4bc4:	81 11       	cpse	r24, r1
    4bc6:	33 c0       	rjmp	.+102    	; 0x4c2e <vTaskDelay+0x128>
    4bc8:	0b c1       	rjmp	.+534    	; 0x4de0 <vTaskDelay+0x2da>
    4bca:	d7 01       	movw	r26, r14
    4bcc:	15 96       	adiw	r26, 0x05	; 5
    4bce:	ed 91       	ld	r30, X+
    4bd0:	fc 91       	ld	r31, X
    4bd2:	16 97       	sbiw	r26, 0x06	; 6
    4bd4:	c6 81       	ldd	r28, Z+6	; 0x06
    4bd6:	d7 81       	ldd	r29, Z+7	; 0x07
    4bd8:	ce 01       	movw	r24, r28
    4bda:	0c 96       	adiw	r24, 0x0c	; 12
    4bdc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4be0:	8e 01       	movw	r16, r28
    4be2:	0e 5f       	subi	r16, 0xFE	; 254
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
    4be6:	c8 01       	movw	r24, r16
    4be8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4bec:	8e 89       	ldd	r24, Y+22	; 0x16
    4bee:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    4bf2:	98 17       	cp	r25, r24
    4bf4:	10 f4       	brcc	.+4      	; 0x4bfa <vTaskDelay+0xf4>
    4bf6:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	9c 01       	movw	r18, r24
    4bfe:	22 0f       	add	r18, r18
    4c00:	33 1f       	adc	r19, r19
    4c02:	22 0f       	add	r18, r18
    4c04:	33 1f       	adc	r19, r19
    4c06:	22 0f       	add	r18, r18
    4c08:	33 1f       	adc	r19, r19
    4c0a:	82 0f       	add	r24, r18
    4c0c:	93 1f       	adc	r25, r19
    4c0e:	b8 01       	movw	r22, r16
    4c10:	83 56       	subi	r24, 0x63	; 99
    4c12:	95 4e       	sbci	r25, 0xE5	; 229
    4c14:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4c18:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4c1c:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4c20:	9e 89       	ldd	r25, Y+22	; 0x16
    4c22:	86 89       	ldd	r24, Z+22	; 0x16
    4c24:	98 17       	cp	r25, r24
    4c26:	58 f0       	brcs	.+22     	; 0x4c3e <vTaskDelay+0x138>
    4c28:	d0 92 6e 1a 	sts	0x1A6E, r13	; 0x801a6e <xYieldPending>
    4c2c:	08 c0       	rjmp	.+16     	; 0x4c3e <vTaskDelay+0x138>
    4c2e:	0f 2e       	mov	r0, r31
    4c30:	fe e7       	ldi	r31, 0x7E	; 126
    4c32:	ef 2e       	mov	r14, r31
    4c34:	fa e1       	ldi	r31, 0x1A	; 26
    4c36:	ff 2e       	mov	r15, r31
    4c38:	f0 2d       	mov	r31, r0
    4c3a:	dd 24       	eor	r13, r13
    4c3c:	d3 94       	inc	r13
    4c3e:	f7 01       	movw	r30, r14
    4c40:	80 81       	ld	r24, Z
    4c42:	81 11       	cpse	r24, r1
    4c44:	c2 cf       	rjmp	.-124    	; 0x4bca <vTaskDelay+0xc4>
    4c46:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4c4a:	88 23       	and	r24, r24
    4c4c:	09 f4       	brne	.+2      	; 0x4c50 <vTaskDelay+0x14a>
    4c4e:	bd c0       	rjmp	.+378    	; 0x4dca <vTaskDelay+0x2c4>
    4c50:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4c54:	88 23       	and	r24, r24
    4c56:	09 f4       	brne	.+2      	; 0x4c5a <vTaskDelay+0x154>
    4c58:	b8 c0       	rjmp	.+368    	; 0x4dca <vTaskDelay+0x2c4>
    4c5a:	91 2c       	mov	r9, r1
    4c5c:	bb 24       	eor	r11, r11
    4c5e:	b3 94       	inc	r11
    4c60:	cc 24       	eor	r12, r12
    4c62:	ca 94       	dec	r12
    4c64:	dc 2c       	mov	r13, r12
    4c66:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4c6a:	81 11       	cpse	r24, r1
    4c6c:	98 c0       	rjmp	.+304    	; 0x4d9e <vTaskDelay+0x298>
    4c6e:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    4c72:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4c76:	01 96       	adiw	r24, 0x01	; 1
    4c78:	90 93 73 1a 	sts	0x1A73, r25	; 0x801a73 <xTickCount+0x1>
    4c7c:	80 93 72 1a 	sts	0x1A72, r24	; 0x801a72 <xTickCount>
    4c80:	e0 90 72 1a 	lds	r14, 0x1A72	; 0x801a72 <xTickCount>
    4c84:	f0 90 73 1a 	lds	r15, 0x1A73	; 0x801a73 <xTickCount+0x1>
    4c88:	e1 14       	cp	r14, r1
    4c8a:	f1 04       	cpc	r15, r1
    4c8c:	89 f5       	brne	.+98     	; 0x4cf0 <vTaskDelay+0x1ea>
    4c8e:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4c92:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4c96:	20 91 87 1a 	lds	r18, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    4c9a:	30 91 88 1a 	lds	r19, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4c9e:	30 93 8a 1a 	sts	0x1A8A, r19	; 0x801a8a <pxDelayedTaskList+0x1>
    4ca2:	20 93 89 1a 	sts	0x1A89, r18	; 0x801a89 <pxDelayedTaskList>
    4ca6:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4caa:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    4cae:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    4cb2:	8f 5f       	subi	r24, 0xFF	; 255
    4cb4:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <xNumOfOverflows>
    4cb8:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4cbc:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4cc0:	80 81       	ld	r24, Z
    4cc2:	81 11       	cpse	r24, r1
    4cc4:	05 c0       	rjmp	.+10     	; 0x4cd0 <vTaskDelay+0x1ca>
    4cc6:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4cca:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    4cce:	10 c0       	rjmp	.+32     	; 0x4cf0 <vTaskDelay+0x1ea>
    4cd0:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4cd4:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4cd8:	05 80       	ldd	r0, Z+5	; 0x05
    4cda:	f6 81       	ldd	r31, Z+6	; 0x06
    4cdc:	e0 2d       	mov	r30, r0
    4cde:	06 80       	ldd	r0, Z+6	; 0x06
    4ce0:	f7 81       	ldd	r31, Z+7	; 0x07
    4ce2:	e0 2d       	mov	r30, r0
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4cec:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    4cf0:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    4cf4:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4cf8:	e8 16       	cp	r14, r24
    4cfa:	f9 06       	cpc	r15, r25
    4cfc:	08 f4       	brcc	.+2      	; 0x4d00 <vTaskDelay+0x1fa>
    4cfe:	77 c0       	rjmp	.+238    	; 0x4dee <vTaskDelay+0x2e8>
    4d00:	a9 2c       	mov	r10, r9
    4d02:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4d06:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4d0a:	80 81       	ld	r24, Z
    4d0c:	81 11       	cpse	r24, r1
    4d0e:	05 c0       	rjmp	.+10     	; 0x4d1a <vTaskDelay+0x214>
    4d10:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4d14:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    4d18:	48 c0       	rjmp	.+144    	; 0x4daa <vTaskDelay+0x2a4>
    4d1a:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    4d1e:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    4d22:	05 80       	ldd	r0, Z+5	; 0x05
    4d24:	f6 81       	ldd	r31, Z+6	; 0x06
    4d26:	e0 2d       	mov	r30, r0
    4d28:	c6 81       	ldd	r28, Z+6	; 0x06
    4d2a:	d7 81       	ldd	r29, Z+7	; 0x07
    4d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d30:	e8 16       	cp	r14, r24
    4d32:	f9 06       	cpc	r15, r25
    4d34:	28 f4       	brcc	.+10     	; 0x4d40 <vTaskDelay+0x23a>
    4d36:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4d3a:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    4d3e:	35 c0       	rjmp	.+106    	; 0x4daa <vTaskDelay+0x2a4>
    4d40:	8e 01       	movw	r16, r28
    4d42:	0e 5f       	subi	r16, 0xFE	; 254
    4d44:	1f 4f       	sbci	r17, 0xFF	; 255
    4d46:	c8 01       	movw	r24, r16
    4d48:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4d4c:	8c 89       	ldd	r24, Y+20	; 0x14
    4d4e:	9d 89       	ldd	r25, Y+21	; 0x15
    4d50:	89 2b       	or	r24, r25
    4d52:	21 f0       	breq	.+8      	; 0x4d5c <vTaskDelay+0x256>
    4d54:	ce 01       	movw	r24, r28
    4d56:	0c 96       	adiw	r24, 0x0c	; 12
    4d58:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4d5c:	8e 89       	ldd	r24, Y+22	; 0x16
    4d5e:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    4d62:	98 17       	cp	r25, r24
    4d64:	10 f4       	brcc	.+4      	; 0x4d6a <vTaskDelay+0x264>
    4d66:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	9c 01       	movw	r18, r24
    4d6e:	22 0f       	add	r18, r18
    4d70:	33 1f       	adc	r19, r19
    4d72:	22 0f       	add	r18, r18
    4d74:	33 1f       	adc	r19, r19
    4d76:	22 0f       	add	r18, r18
    4d78:	33 1f       	adc	r19, r19
    4d7a:	82 0f       	add	r24, r18
    4d7c:	93 1f       	adc	r25, r19
    4d7e:	b8 01       	movw	r22, r16
    4d80:	83 56       	subi	r24, 0x63	; 99
    4d82:	95 4e       	sbci	r25, 0xE5	; 229
    4d84:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4d88:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4d8c:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4d90:	9e 89       	ldd	r25, Y+22	; 0x16
    4d92:	86 89       	ldd	r24, Z+22	; 0x16
    4d94:	98 17       	cp	r25, r24
    4d96:	08 f4       	brcc	.+2      	; 0x4d9a <vTaskDelay+0x294>
    4d98:	b4 cf       	rjmp	.-152    	; 0x4d02 <vTaskDelay+0x1fc>
    4d9a:	ab 2c       	mov	r10, r11
    4d9c:	b2 cf       	rjmp	.-156    	; 0x4d02 <vTaskDelay+0x1fc>
    4d9e:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4da2:	8f 5f       	subi	r24, 0xFF	; 255
    4da4:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    4da8:	22 c0       	rjmp	.+68     	; 0x4dee <vTaskDelay+0x2e8>
    4daa:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4dae:	81 11       	cpse	r24, r1
    4db0:	01 c0       	rjmp	.+2      	; 0x4db4 <vTaskDelay+0x2ae>
    4db2:	a1 10       	cpse	r10, r1
    4db4:	b0 92 6e 1a 	sts	0x1A6E, r11	; 0x801a6e <xYieldPending>
    4db8:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4dbc:	81 50       	subi	r24, 0x01	; 1
    4dbe:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    4dc2:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    4dc6:	81 11       	cpse	r24, r1
    4dc8:	4e cf       	rjmp	.-356    	; 0x4c66 <vTaskDelay+0x160>
    4dca:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	31 f4       	brne	.+12     	; 0x4dde <vTaskDelay+0x2d8>
    4dd2:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	03 c0       	rjmp	.+6      	; 0x4de0 <vTaskDelay+0x2da>
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <vTaskDelay+0x2da>
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	0f 90       	pop	r0
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	81 11       	cpse	r24, r1
    4de6:	08 c0       	rjmp	.+16     	; 0x4df8 <vTaskDelay+0x2f2>
    4de8:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4dec:	05 c0       	rjmp	.+10     	; 0x4df8 <vTaskDelay+0x2f2>
    4dee:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    4df2:	81 11       	cpse	r24, r1
    4df4:	df cf       	rjmp	.-66     	; 0x4db4 <vTaskDelay+0x2ae>
    4df6:	e0 cf       	rjmp	.-64     	; 0x4db8 <vTaskDelay+0x2b2>
    4df8:	df 91       	pop	r29
    4dfa:	cf 91       	pop	r28
    4dfc:	1f 91       	pop	r17
    4dfe:	0f 91       	pop	r16
    4e00:	ff 90       	pop	r15
    4e02:	ef 90       	pop	r14
    4e04:	df 90       	pop	r13
    4e06:	cf 90       	pop	r12
    4e08:	bf 90       	pop	r11
    4e0a:	af 90       	pop	r10
    4e0c:	9f 90       	pop	r9
    4e0e:	08 95       	ret

00004e10 <vTaskStartScheduler>:
    4e10:	cf 92       	push	r12
    4e12:	df 92       	push	r13
    4e14:	ef 92       	push	r14
    4e16:	ff 92       	push	r15
    4e18:	0f 93       	push	r16
    4e1a:	1f 93       	push	r17
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	85 e5       	ldi	r24, 0x55	; 85
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4e28:	8c 01       	movw	r16, r24
    4e2a:	89 2b       	or	r24, r25
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <vTaskStartScheduler+0x20>
    4e2e:	cb c0       	rjmp	.+406    	; 0x4fc6 <vTaskStartScheduler+0x1b6>
    4e30:	88 e2       	ldi	r24, 0x28	; 40
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4e38:	ec 01       	movw	r28, r24
    4e3a:	89 2b       	or	r24, r25
    4e3c:	69 f0       	breq	.+26     	; 0x4e58 <vTaskStartScheduler+0x48>
    4e3e:	18 8f       	std	Y+24, r17	; 0x18
    4e40:	0f 8b       	std	Y+23, r16	; 0x17
    4e42:	0c 5a       	subi	r16, 0xAC	; 172
    4e44:	1f 4f       	sbci	r17, 0xFF	; 255
    4e46:	89 e4       	ldi	r24, 0x49	; 73
    4e48:	89 8f       	std	Y+25, r24	; 0x19
    4e4a:	ed e2       	ldi	r30, 0x2D	; 45
    4e4c:	f7 e0       	ldi	r31, 0x07	; 7
    4e4e:	de 01       	movw	r26, r28
    4e50:	5a 96       	adiw	r26, 0x1a	; 26
    4e52:	24 e3       	ldi	r18, 0x34	; 52
    4e54:	37 e0       	ldi	r19, 0x07	; 7
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <vTaskStartScheduler+0x50>
    4e58:	c8 01       	movw	r24, r16
    4e5a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    4e5e:	b3 c0       	rjmp	.+358    	; 0x4fc6 <vTaskStartScheduler+0x1b6>
    4e60:	91 91       	ld	r25, Z+
    4e62:	9d 93       	st	X+, r25
    4e64:	99 23       	and	r25, r25
    4e66:	19 f0       	breq	.+6      	; 0x4e6e <vTaskStartScheduler+0x5e>
    4e68:	2e 17       	cp	r18, r30
    4e6a:	3f 07       	cpc	r19, r31
    4e6c:	c9 f7       	brne	.-14     	; 0x4e60 <vTaskStartScheduler+0x50>
    4e6e:	18 a2       	std	Y+32, r1	; 0x20
    4e70:	1e 8a       	std	Y+22, r1	; 0x16
    4e72:	19 a2       	std	Y+33, r1	; 0x21
    4e74:	1a a2       	std	Y+34, r1	; 0x22
    4e76:	7e 01       	movw	r14, r28
    4e78:	82 e0       	ldi	r24, 0x02	; 2
    4e7a:	e8 0e       	add	r14, r24
    4e7c:	f1 1c       	adc	r15, r1
    4e7e:	c7 01       	movw	r24, r14
    4e80:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4e84:	ce 01       	movw	r24, r28
    4e86:	0c 96       	adiw	r24, 0x0c	; 12
    4e88:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4e8c:	d9 87       	std	Y+9, r29	; 0x09
    4e8e:	c8 87       	std	Y+8, r28	; 0x08
    4e90:	86 e0       	ldi	r24, 0x06	; 6
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	9d 87       	std	Y+13, r25	; 0x0d
    4e96:	8c 87       	std	Y+12, r24	; 0x0c
    4e98:	db 8b       	std	Y+19, r29	; 0x13
    4e9a:	ca 8b       	std	Y+18, r28	; 0x12
    4e9c:	1b a2       	std	Y+35, r1	; 0x23
    4e9e:	1c a2       	std	Y+36, r1	; 0x24
    4ea0:	1d a2       	std	Y+37, r1	; 0x25
    4ea2:	1e a2       	std	Y+38, r1	; 0x26
    4ea4:	1f a2       	std	Y+39, r1	; 0x27
    4ea6:	40 e0       	ldi	r20, 0x00	; 0
    4ea8:	50 e0       	ldi	r21, 0x00	; 0
    4eaa:	69 e1       	ldi	r22, 0x19	; 25
    4eac:	71 e0       	ldi	r23, 0x01	; 1
    4eae:	c8 01       	movw	r24, r16
    4eb0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <pxPortInitialiseStack>
    4eb4:	99 83       	std	Y+1, r25	; 0x01
    4eb6:	88 83       	st	Y, r24
    4eb8:	0f b6       	in	r0, 0x3f	; 63
    4eba:	f8 94       	cli
    4ebc:	0f 92       	push	r0
    4ebe:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    4ec2:	8f 5f       	subi	r24, 0xFF	; 255
    4ec4:	80 93 74 1a 	sts	0x1A74, r24	; 0x801a74 <uxCurrentNumberOfTasks>
    4ec8:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4ecc:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4ed0:	89 2b       	or	r24, r25
    4ed2:	a9 f5       	brne	.+106    	; 0x4f3e <vTaskStartScheduler+0x12e>
    4ed4:	d0 93 d4 1a 	sts	0x1AD4, r29	; 0x801ad4 <pxCurrentTCB+0x1>
    4ed8:	c0 93 d3 1a 	sts	0x1AD3, r28	; 0x801ad3 <pxCurrentTCB>
    4edc:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    4ee0:	81 30       	cpi	r24, 0x01	; 1
    4ee2:	e1 f5       	brne	.+120    	; 0x4f5c <vTaskStartScheduler+0x14c>
    4ee4:	0d e9       	ldi	r16, 0x9D	; 157
    4ee6:	1a e1       	ldi	r17, 0x1A	; 26
    4ee8:	0f 2e       	mov	r0, r31
    4eea:	f3 ed       	ldi	r31, 0xD3	; 211
    4eec:	cf 2e       	mov	r12, r31
    4eee:	fa e1       	ldi	r31, 0x1A	; 26
    4ef0:	df 2e       	mov	r13, r31
    4ef2:	f0 2d       	mov	r31, r0
    4ef4:	c8 01       	movw	r24, r16
    4ef6:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4efa:	07 5f       	subi	r16, 0xF7	; 247
    4efc:	1f 4f       	sbci	r17, 0xFF	; 255
    4efe:	0c 15       	cp	r16, r12
    4f00:	1d 05       	cpc	r17, r13
    4f02:	c1 f7       	brne	.-16     	; 0x4ef4 <vTaskStartScheduler+0xe4>
    4f04:	84 e9       	ldi	r24, 0x94	; 148
    4f06:	9a e1       	ldi	r25, 0x1A	; 26
    4f08:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f0c:	8b e8       	ldi	r24, 0x8B	; 139
    4f0e:	9a e1       	ldi	r25, 0x1A	; 26
    4f10:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f14:	8e e7       	ldi	r24, 0x7E	; 126
    4f16:	9a e1       	ldi	r25, 0x1A	; 26
    4f18:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f1c:	85 e7       	ldi	r24, 0x75	; 117
    4f1e:	9a e1       	ldi	r25, 0x1A	; 26
    4f20:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f24:	84 e9       	ldi	r24, 0x94	; 148
    4f26:	9a e1       	ldi	r25, 0x1A	; 26
    4f28:	90 93 8a 1a 	sts	0x1A8A, r25	; 0x801a8a <pxDelayedTaskList+0x1>
    4f2c:	80 93 89 1a 	sts	0x1A89, r24	; 0x801a89 <pxDelayedTaskList>
    4f30:	8b e8       	ldi	r24, 0x8B	; 139
    4f32:	9a e1       	ldi	r25, 0x1A	; 26
    4f34:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    4f38:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    4f3c:	0f c0       	rjmp	.+30     	; 0x4f5c <vTaskStartScheduler+0x14c>
    4f3e:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <xSchedulerRunning>
    4f42:	81 11       	cpse	r24, r1
    4f44:	0b c0       	rjmp	.+22     	; 0x4f5c <vTaskStartScheduler+0x14c>
    4f46:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4f4a:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4f4e:	86 89       	ldd	r24, Z+22	; 0x16
    4f50:	81 11       	cpse	r24, r1
    4f52:	04 c0       	rjmp	.+8      	; 0x4f5c <vTaskStartScheduler+0x14c>
    4f54:	d0 93 d4 1a 	sts	0x1AD4, r29	; 0x801ad4 <pxCurrentTCB+0x1>
    4f58:	c0 93 d3 1a 	sts	0x1AD3, r28	; 0x801ad3 <pxCurrentTCB>
    4f5c:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <uxTaskNumber>
    4f60:	8f 5f       	subi	r24, 0xFF	; 255
    4f62:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <uxTaskNumber>
    4f66:	8e 89       	ldd	r24, Y+22	; 0x16
    4f68:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    4f6c:	98 17       	cp	r25, r24
    4f6e:	10 f4       	brcc	.+4      	; 0x4f74 <vTaskStartScheduler+0x164>
    4f70:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	9c 01       	movw	r18, r24
    4f78:	22 0f       	add	r18, r18
    4f7a:	33 1f       	adc	r19, r19
    4f7c:	22 0f       	add	r18, r18
    4f7e:	33 1f       	adc	r19, r19
    4f80:	22 0f       	add	r18, r18
    4f82:	33 1f       	adc	r19, r19
    4f84:	82 0f       	add	r24, r18
    4f86:	93 1f       	adc	r25, r19
    4f88:	b7 01       	movw	r22, r14
    4f8a:	83 56       	subi	r24, 0x63	; 99
    4f8c:	95 4e       	sbci	r25, 0xE5	; 229
    4f8e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4f92:	0f 90       	pop	r0
    4f94:	0f be       	out	0x3f, r0	; 63
    4f96:	80 91 70 1a 	lds	r24, 0x1A70	; 0x801a70 <xSchedulerRunning>
    4f9a:	88 23       	and	r24, r24
    4f9c:	21 f0       	breq	.+8      	; 0x4fa6 <vTaskStartScheduler+0x196>
    4f9e:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    4fa2:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    4fa6:	f8 94       	cli
    4fa8:	8f ef       	ldi	r24, 0xFF	; 255
    4faa:	9f ef       	ldi	r25, 0xFF	; 255
    4fac:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    4fb0:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    4fb4:	81 e0       	ldi	r24, 0x01	; 1
    4fb6:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <xSchedulerRunning>
    4fba:	10 92 73 1a 	sts	0x1A73, r1	; 0x801a73 <xTickCount+0x1>
    4fbe:	10 92 72 1a 	sts	0x1A72, r1	; 0x801a72 <xTickCount>
    4fc2:	0e 94 3c 18 	call	0x3078	; 0x3078 <xPortStartScheduler>
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	1f 91       	pop	r17
    4fcc:	0f 91       	pop	r16
    4fce:	ff 90       	pop	r15
    4fd0:	ef 90       	pop	r14
    4fd2:	df 90       	pop	r13
    4fd4:	cf 90       	pop	r12
    4fd6:	08 95       	ret

00004fd8 <vTaskSuspendAll>:
    4fd8:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    4fdc:	8f 5f       	subi	r24, 0xFF	; 255
    4fde:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <uxSchedulerSuspended>
    4fe2:	08 95       	ret

00004fe4 <xTaskResumeAll>:
    4fe4:	9f 92       	push	r9
    4fe6:	af 92       	push	r10
    4fe8:	bf 92       	push	r11
    4fea:	cf 92       	push	r12
    4fec:	df 92       	push	r13
    4fee:	ef 92       	push	r14
    4ff0:	ff 92       	push	r15
    4ff2:	0f 93       	push	r16
    4ff4:	1f 93       	push	r17
    4ff6:	cf 93       	push	r28
    4ff8:	df 93       	push	r29
    4ffa:	0f b6       	in	r0, 0x3f	; 63
    4ffc:	f8 94       	cli
    4ffe:	0f 92       	push	r0
    5000:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    5004:	81 50       	subi	r24, 0x01	; 1
    5006:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <uxSchedulerSuspended>
    500a:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    500e:	81 11       	cpse	r24, r1
    5010:	0d c1       	rjmp	.+538    	; 0x522c <xTaskResumeAll+0x248>
    5012:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <uxCurrentNumberOfTasks>
    5016:	81 11       	cpse	r24, r1
    5018:	33 c0       	rjmp	.+102    	; 0x5080 <xTaskResumeAll+0x9c>
    501a:	0b c1       	rjmp	.+534    	; 0x5232 <xTaskResumeAll+0x24e>
    501c:	d7 01       	movw	r26, r14
    501e:	15 96       	adiw	r26, 0x05	; 5
    5020:	ed 91       	ld	r30, X+
    5022:	fc 91       	ld	r31, X
    5024:	16 97       	sbiw	r26, 0x06	; 6
    5026:	c6 81       	ldd	r28, Z+6	; 0x06
    5028:	d7 81       	ldd	r29, Z+7	; 0x07
    502a:	ce 01       	movw	r24, r28
    502c:	0c 96       	adiw	r24, 0x0c	; 12
    502e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5032:	8e 01       	movw	r16, r28
    5034:	0e 5f       	subi	r16, 0xFE	; 254
    5036:	1f 4f       	sbci	r17, 0xFF	; 255
    5038:	c8 01       	movw	r24, r16
    503a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    503e:	8e 89       	ldd	r24, Y+22	; 0x16
    5040:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5044:	98 17       	cp	r25, r24
    5046:	10 f4       	brcc	.+4      	; 0x504c <xTaskResumeAll+0x68>
    5048:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	9c 01       	movw	r18, r24
    5050:	22 0f       	add	r18, r18
    5052:	33 1f       	adc	r19, r19
    5054:	22 0f       	add	r18, r18
    5056:	33 1f       	adc	r19, r19
    5058:	22 0f       	add	r18, r18
    505a:	33 1f       	adc	r19, r19
    505c:	82 0f       	add	r24, r18
    505e:	93 1f       	adc	r25, r19
    5060:	b8 01       	movw	r22, r16
    5062:	83 56       	subi	r24, 0x63	; 99
    5064:	95 4e       	sbci	r25, 0xE5	; 229
    5066:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    506a:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    506e:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5072:	9e 89       	ldd	r25, Y+22	; 0x16
    5074:	86 89       	ldd	r24, Z+22	; 0x16
    5076:	98 17       	cp	r25, r24
    5078:	58 f0       	brcs	.+22     	; 0x5090 <xTaskResumeAll+0xac>
    507a:	d0 92 6e 1a 	sts	0x1A6E, r13	; 0x801a6e <xYieldPending>
    507e:	08 c0       	rjmp	.+16     	; 0x5090 <xTaskResumeAll+0xac>
    5080:	0f 2e       	mov	r0, r31
    5082:	fe e7       	ldi	r31, 0x7E	; 126
    5084:	ef 2e       	mov	r14, r31
    5086:	fa e1       	ldi	r31, 0x1A	; 26
    5088:	ff 2e       	mov	r15, r31
    508a:	f0 2d       	mov	r31, r0
    508c:	dd 24       	eor	r13, r13
    508e:	d3 94       	inc	r13
    5090:	f7 01       	movw	r30, r14
    5092:	80 81       	ld	r24, Z
    5094:	81 11       	cpse	r24, r1
    5096:	c2 cf       	rjmp	.-124    	; 0x501c <xTaskResumeAll+0x38>
    5098:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    509c:	88 23       	and	r24, r24
    509e:	09 f4       	brne	.+2      	; 0x50a2 <xTaskResumeAll+0xbe>
    50a0:	bd c0       	rjmp	.+378    	; 0x521c <xTaskResumeAll+0x238>
    50a2:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    50a6:	88 23       	and	r24, r24
    50a8:	09 f4       	brne	.+2      	; 0x50ac <xTaskResumeAll+0xc8>
    50aa:	b8 c0       	rjmp	.+368    	; 0x521c <xTaskResumeAll+0x238>
    50ac:	91 2c       	mov	r9, r1
    50ae:	bb 24       	eor	r11, r11
    50b0:	b3 94       	inc	r11
    50b2:	cc 24       	eor	r12, r12
    50b4:	ca 94       	dec	r12
    50b6:	dc 2c       	mov	r13, r12
    50b8:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    50bc:	81 11       	cpse	r24, r1
    50be:	98 c0       	rjmp	.+304    	; 0x51f0 <xTaskResumeAll+0x20c>
    50c0:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    50c4:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    50c8:	01 96       	adiw	r24, 0x01	; 1
    50ca:	90 93 73 1a 	sts	0x1A73, r25	; 0x801a73 <xTickCount+0x1>
    50ce:	80 93 72 1a 	sts	0x1A72, r24	; 0x801a72 <xTickCount>
    50d2:	e0 90 72 1a 	lds	r14, 0x1A72	; 0x801a72 <xTickCount>
    50d6:	f0 90 73 1a 	lds	r15, 0x1A73	; 0x801a73 <xTickCount+0x1>
    50da:	e1 14       	cp	r14, r1
    50dc:	f1 04       	cpc	r15, r1
    50de:	89 f5       	brne	.+98     	; 0x5142 <xTaskResumeAll+0x15e>
    50e0:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    50e4:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    50e8:	20 91 87 1a 	lds	r18, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    50ec:	30 91 88 1a 	lds	r19, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    50f0:	30 93 8a 1a 	sts	0x1A8A, r19	; 0x801a8a <pxDelayedTaskList+0x1>
    50f4:	20 93 89 1a 	sts	0x1A89, r18	; 0x801a89 <pxDelayedTaskList>
    50f8:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    50fc:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    5100:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    5104:	8f 5f       	subi	r24, 0xFF	; 255
    5106:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <xNumOfOverflows>
    510a:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    510e:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5112:	80 81       	ld	r24, Z
    5114:	81 11       	cpse	r24, r1
    5116:	05 c0       	rjmp	.+10     	; 0x5122 <xTaskResumeAll+0x13e>
    5118:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    511c:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    5120:	10 c0       	rjmp	.+32     	; 0x5142 <xTaskResumeAll+0x15e>
    5122:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5126:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    512a:	05 80       	ldd	r0, Z+5	; 0x05
    512c:	f6 81       	ldd	r31, Z+6	; 0x06
    512e:	e0 2d       	mov	r30, r0
    5130:	06 80       	ldd	r0, Z+6	; 0x06
    5132:	f7 81       	ldd	r31, Z+7	; 0x07
    5134:	e0 2d       	mov	r30, r0
    5136:	82 81       	ldd	r24, Z+2	; 0x02
    5138:	93 81       	ldd	r25, Z+3	; 0x03
    513a:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    513e:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    5142:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    5146:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    514a:	e8 16       	cp	r14, r24
    514c:	f9 06       	cpc	r15, r25
    514e:	08 f4       	brcc	.+2      	; 0x5152 <xTaskResumeAll+0x16e>
    5150:	73 c0       	rjmp	.+230    	; 0x5238 <xTaskResumeAll+0x254>
    5152:	a9 2c       	mov	r10, r9
    5154:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5158:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    515c:	80 81       	ld	r24, Z
    515e:	81 11       	cpse	r24, r1
    5160:	05 c0       	rjmp	.+10     	; 0x516c <xTaskResumeAll+0x188>
    5162:	d0 92 6b 1a 	sts	0x1A6B, r13	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5166:	c0 92 6a 1a 	sts	0x1A6A, r12	; 0x801a6a <xNextTaskUnblockTime>
    516a:	48 c0       	rjmp	.+144    	; 0x51fc <xTaskResumeAll+0x218>
    516c:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5170:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5174:	05 80       	ldd	r0, Z+5	; 0x05
    5176:	f6 81       	ldd	r31, Z+6	; 0x06
    5178:	e0 2d       	mov	r30, r0
    517a:	c6 81       	ldd	r28, Z+6	; 0x06
    517c:	d7 81       	ldd	r29, Z+7	; 0x07
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	9b 81       	ldd	r25, Y+3	; 0x03
    5182:	e8 16       	cp	r14, r24
    5184:	f9 06       	cpc	r15, r25
    5186:	28 f4       	brcc	.+10     	; 0x5192 <xTaskResumeAll+0x1ae>
    5188:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    518c:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    5190:	35 c0       	rjmp	.+106    	; 0x51fc <xTaskResumeAll+0x218>
    5192:	8e 01       	movw	r16, r28
    5194:	0e 5f       	subi	r16, 0xFE	; 254
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	c8 01       	movw	r24, r16
    519a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    519e:	8c 89       	ldd	r24, Y+20	; 0x14
    51a0:	9d 89       	ldd	r25, Y+21	; 0x15
    51a2:	89 2b       	or	r24, r25
    51a4:	21 f0       	breq	.+8      	; 0x51ae <xTaskResumeAll+0x1ca>
    51a6:	ce 01       	movw	r24, r28
    51a8:	0c 96       	adiw	r24, 0x0c	; 12
    51aa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    51ae:	8e 89       	ldd	r24, Y+22	; 0x16
    51b0:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    51b4:	98 17       	cp	r25, r24
    51b6:	10 f4       	brcc	.+4      	; 0x51bc <xTaskResumeAll+0x1d8>
    51b8:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	9c 01       	movw	r18, r24
    51c0:	22 0f       	add	r18, r18
    51c2:	33 1f       	adc	r19, r19
    51c4:	22 0f       	add	r18, r18
    51c6:	33 1f       	adc	r19, r19
    51c8:	22 0f       	add	r18, r18
    51ca:	33 1f       	adc	r19, r19
    51cc:	82 0f       	add	r24, r18
    51ce:	93 1f       	adc	r25, r19
    51d0:	b8 01       	movw	r22, r16
    51d2:	83 56       	subi	r24, 0x63	; 99
    51d4:	95 4e       	sbci	r25, 0xE5	; 229
    51d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    51da:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    51de:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    51e2:	9e 89       	ldd	r25, Y+22	; 0x16
    51e4:	86 89       	ldd	r24, Z+22	; 0x16
    51e6:	98 17       	cp	r25, r24
    51e8:	08 f4       	brcc	.+2      	; 0x51ec <xTaskResumeAll+0x208>
    51ea:	b4 cf       	rjmp	.-152    	; 0x5154 <xTaskResumeAll+0x170>
    51ec:	ab 2c       	mov	r10, r11
    51ee:	b2 cf       	rjmp	.-156    	; 0x5154 <xTaskResumeAll+0x170>
    51f0:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    51f4:	8f 5f       	subi	r24, 0xFF	; 255
    51f6:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    51fa:	1e c0       	rjmp	.+60     	; 0x5238 <xTaskResumeAll+0x254>
    51fc:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    5200:	81 11       	cpse	r24, r1
    5202:	01 c0       	rjmp	.+2      	; 0x5206 <xTaskResumeAll+0x222>
    5204:	a1 10       	cpse	r10, r1
    5206:	b0 92 6e 1a 	sts	0x1A6E, r11	; 0x801a6e <xYieldPending>
    520a:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    520e:	81 50       	subi	r24, 0x01	; 1
    5210:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    5214:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    5218:	81 11       	cpse	r24, r1
    521a:	4e cf       	rjmp	.-356    	; 0x50b8 <xTaskResumeAll+0xd4>
    521c:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    5220:	81 30       	cpi	r24, 0x01	; 1
    5222:	31 f4       	brne	.+12     	; 0x5230 <xTaskResumeAll+0x24c>
    5224:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	03 c0       	rjmp	.+6      	; 0x5232 <xTaskResumeAll+0x24e>
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	01 c0       	rjmp	.+2      	; 0x5232 <xTaskResumeAll+0x24e>
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	0f 90       	pop	r0
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	05 c0       	rjmp	.+10     	; 0x5242 <xTaskResumeAll+0x25e>
    5238:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    523c:	81 11       	cpse	r24, r1
    523e:	e3 cf       	rjmp	.-58     	; 0x5206 <xTaskResumeAll+0x222>
    5240:	e4 cf       	rjmp	.-56     	; 0x520a <xTaskResumeAll+0x226>
    5242:	df 91       	pop	r29
    5244:	cf 91       	pop	r28
    5246:	1f 91       	pop	r17
    5248:	0f 91       	pop	r16
    524a:	ff 90       	pop	r15
    524c:	ef 90       	pop	r14
    524e:	df 90       	pop	r13
    5250:	cf 90       	pop	r12
    5252:	bf 90       	pop	r11
    5254:	af 90       	pop	r10
    5256:	9f 90       	pop	r9
    5258:	08 95       	ret

0000525a <xTaskGetTickCount>:
    525a:	0f b6       	in	r0, 0x3f	; 63
    525c:	f8 94       	cli
    525e:	0f 92       	push	r0
    5260:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    5264:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    5268:	0f 90       	pop	r0
    526a:	0f be       	out	0x3f, r0	; 63
    526c:	08 95       	ret

0000526e <xTaskIncrementTick>:
    526e:	cf 92       	push	r12
    5270:	df 92       	push	r13
    5272:	ef 92       	push	r14
    5274:	ff 92       	push	r15
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    5282:	81 11       	cpse	r24, r1
    5284:	9f c0       	rjmp	.+318    	; 0x53c4 <xTaskIncrementTick+0x156>
    5286:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    528a:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    528e:	01 96       	adiw	r24, 0x01	; 1
    5290:	90 93 73 1a 	sts	0x1A73, r25	; 0x801a73 <xTickCount+0x1>
    5294:	80 93 72 1a 	sts	0x1A72, r24	; 0x801a72 <xTickCount>
    5298:	e0 90 72 1a 	lds	r14, 0x1A72	; 0x801a72 <xTickCount>
    529c:	f0 90 73 1a 	lds	r15, 0x1A73	; 0x801a73 <xTickCount+0x1>
    52a0:	e1 14       	cp	r14, r1
    52a2:	f1 04       	cpc	r15, r1
    52a4:	99 f5       	brne	.+102    	; 0x530c <xTaskIncrementTick+0x9e>
    52a6:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    52aa:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    52ae:	20 91 87 1a 	lds	r18, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    52b2:	30 91 88 1a 	lds	r19, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    52b6:	30 93 8a 1a 	sts	0x1A8A, r19	; 0x801a8a <pxDelayedTaskList+0x1>
    52ba:	20 93 89 1a 	sts	0x1A89, r18	; 0x801a89 <pxDelayedTaskList>
    52be:	90 93 88 1a 	sts	0x1A88, r25	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    52c2:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <pxOverflowDelayedTaskList>
    52c6:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    52ca:	8f 5f       	subi	r24, 0xFF	; 255
    52cc:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <xNumOfOverflows>
    52d0:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    52d4:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    52d8:	80 81       	ld	r24, Z
    52da:	81 11       	cpse	r24, r1
    52dc:	07 c0       	rjmp	.+14     	; 0x52ec <xTaskIncrementTick+0x7e>
    52de:	8f ef       	ldi	r24, 0xFF	; 255
    52e0:	9f ef       	ldi	r25, 0xFF	; 255
    52e2:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    52e6:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    52ea:	10 c0       	rjmp	.+32     	; 0x530c <xTaskIncrementTick+0x9e>
    52ec:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    52f0:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    52f4:	05 80       	ldd	r0, Z+5	; 0x05
    52f6:	f6 81       	ldd	r31, Z+6	; 0x06
    52f8:	e0 2d       	mov	r30, r0
    52fa:	06 80       	ldd	r0, Z+6	; 0x06
    52fc:	f7 81       	ldd	r31, Z+7	; 0x07
    52fe:	e0 2d       	mov	r30, r0
    5300:	82 81       	ldd	r24, Z+2	; 0x02
    5302:	93 81       	ldd	r25, Z+3	; 0x03
    5304:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5308:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    530c:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    5310:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5314:	e8 16       	cp	r14, r24
    5316:	f9 06       	cpc	r15, r25
    5318:	10 f4       	brcc	.+4      	; 0x531e <xTaskIncrementTick+0xb0>
    531a:	d1 2c       	mov	r13, r1
    531c:	59 c0       	rjmp	.+178    	; 0x53d0 <xTaskIncrementTick+0x162>
    531e:	d1 2c       	mov	r13, r1
    5320:	cc 24       	eor	r12, r12
    5322:	c3 94       	inc	r12
    5324:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5328:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    532c:	80 81       	ld	r24, Z
    532e:	81 11       	cpse	r24, r1
    5330:	07 c0       	rjmp	.+14     	; 0x5340 <xTaskIncrementTick+0xd2>
    5332:	8f ef       	ldi	r24, 0xFF	; 255
    5334:	9f ef       	ldi	r25, 0xFF	; 255
    5336:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    533a:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    533e:	48 c0       	rjmp	.+144    	; 0x53d0 <xTaskIncrementTick+0x162>
    5340:	e0 91 89 1a 	lds	r30, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5344:	f0 91 8a 1a 	lds	r31, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5348:	05 80       	ldd	r0, Z+5	; 0x05
    534a:	f6 81       	ldd	r31, Z+6	; 0x06
    534c:	e0 2d       	mov	r30, r0
    534e:	c6 81       	ldd	r28, Z+6	; 0x06
    5350:	d7 81       	ldd	r29, Z+7	; 0x07
    5352:	8a 81       	ldd	r24, Y+2	; 0x02
    5354:	9b 81       	ldd	r25, Y+3	; 0x03
    5356:	e8 16       	cp	r14, r24
    5358:	f9 06       	cpc	r15, r25
    535a:	28 f4       	brcc	.+10     	; 0x5366 <xTaskIncrementTick+0xf8>
    535c:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5360:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <xNextTaskUnblockTime>
    5364:	35 c0       	rjmp	.+106    	; 0x53d0 <xTaskIncrementTick+0x162>
    5366:	8e 01       	movw	r16, r28
    5368:	0e 5f       	subi	r16, 0xFE	; 254
    536a:	1f 4f       	sbci	r17, 0xFF	; 255
    536c:	c8 01       	movw	r24, r16
    536e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5372:	8c 89       	ldd	r24, Y+20	; 0x14
    5374:	9d 89       	ldd	r25, Y+21	; 0x15
    5376:	89 2b       	or	r24, r25
    5378:	21 f0       	breq	.+8      	; 0x5382 <xTaskIncrementTick+0x114>
    537a:	ce 01       	movw	r24, r28
    537c:	0c 96       	adiw	r24, 0x0c	; 12
    537e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5382:	8e 89       	ldd	r24, Y+22	; 0x16
    5384:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5388:	98 17       	cp	r25, r24
    538a:	10 f4       	brcc	.+4      	; 0x5390 <xTaskIncrementTick+0x122>
    538c:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	9c 01       	movw	r18, r24
    5394:	22 0f       	add	r18, r18
    5396:	33 1f       	adc	r19, r19
    5398:	22 0f       	add	r18, r18
    539a:	33 1f       	adc	r19, r19
    539c:	22 0f       	add	r18, r18
    539e:	33 1f       	adc	r19, r19
    53a0:	82 0f       	add	r24, r18
    53a2:	93 1f       	adc	r25, r19
    53a4:	b8 01       	movw	r22, r16
    53a6:	83 56       	subi	r24, 0x63	; 99
    53a8:	95 4e       	sbci	r25, 0xE5	; 229
    53aa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    53ae:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    53b2:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    53b6:	9e 89       	ldd	r25, Y+22	; 0x16
    53b8:	86 89       	ldd	r24, Z+22	; 0x16
    53ba:	98 17       	cp	r25, r24
    53bc:	08 f4       	brcc	.+2      	; 0x53c0 <xTaskIncrementTick+0x152>
    53be:	b2 cf       	rjmp	.-156    	; 0x5324 <xTaskIncrementTick+0xb6>
    53c0:	dc 2c       	mov	r13, r12
    53c2:	b0 cf       	rjmp	.-160    	; 0x5324 <xTaskIncrementTick+0xb6>
    53c4:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <uxPendedTicks>
    53c8:	8f 5f       	subi	r24, 0xFF	; 255
    53ca:	80 93 6f 1a 	sts	0x1A6F, r24	; 0x801a6f <uxPendedTicks>
    53ce:	d1 2c       	mov	r13, r1
    53d0:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <xYieldPending>
    53d4:	88 23       	and	r24, r24
    53d6:	11 f0       	breq	.+4      	; 0x53dc <xTaskIncrementTick+0x16e>
    53d8:	dd 24       	eor	r13, r13
    53da:	d3 94       	inc	r13
    53dc:	8d 2d       	mov	r24, r13
    53de:	df 91       	pop	r29
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	ff 90       	pop	r15
    53e8:	ef 90       	pop	r14
    53ea:	df 90       	pop	r13
    53ec:	cf 90       	pop	r12
    53ee:	08 95       	ret

000053f0 <vTaskSwitchContext>:
    53f0:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    53f4:	88 23       	and	r24, r24
    53f6:	21 f0       	breq	.+8      	; 0x5400 <vTaskSwitchContext+0x10>
    53f8:	81 e0       	ldi	r24, 0x01	; 1
    53fa:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <xYieldPending>
    53fe:	08 95       	ret
    5400:	10 92 6e 1a 	sts	0x1A6E, r1	; 0x801a6e <xYieldPending>
    5404:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5408:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    540c:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5410:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5414:	2d 91       	ld	r18, X+
    5416:	3c 91       	ld	r19, X
    5418:	87 89       	ldd	r24, Z+23	; 0x17
    541a:	90 8d       	ldd	r25, Z+24	; 0x18
    541c:	82 17       	cp	r24, r18
    541e:	93 07       	cpc	r25, r19
    5420:	60 f0       	brcs	.+24     	; 0x543a <vTaskSwitchContext+0x4a>
    5422:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5426:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    542a:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    542e:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5432:	67 5e       	subi	r22, 0xE7	; 231
    5434:	7f 4f       	sbci	r23, 0xFF	; 255
    5436:	0e 94 e5 14 	call	0x29ca	; 0x29ca <vApplicationStackOverflowHook>
    543a:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	fc 01       	movw	r30, r24
    5442:	ee 0f       	add	r30, r30
    5444:	ff 1f       	adc	r31, r31
    5446:	ee 0f       	add	r30, r30
    5448:	ff 1f       	adc	r31, r31
    544a:	ee 0f       	add	r30, r30
    544c:	ff 1f       	adc	r31, r31
    544e:	8e 0f       	add	r24, r30
    5450:	9f 1f       	adc	r25, r31
    5452:	fc 01       	movw	r30, r24
    5454:	e3 56       	subi	r30, 0x63	; 99
    5456:	f5 4e       	sbci	r31, 0xE5	; 229
    5458:	80 81       	ld	r24, Z
    545a:	81 11       	cpse	r24, r1
    545c:	17 c0       	rjmp	.+46     	; 0x548c <vTaskSwitchContext+0x9c>
    545e:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5462:	81 50       	subi	r24, 0x01	; 1
    5464:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    5468:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	fc 01       	movw	r30, r24
    5470:	ee 0f       	add	r30, r30
    5472:	ff 1f       	adc	r31, r31
    5474:	ee 0f       	add	r30, r30
    5476:	ff 1f       	adc	r31, r31
    5478:	ee 0f       	add	r30, r30
    547a:	ff 1f       	adc	r31, r31
    547c:	8e 0f       	add	r24, r30
    547e:	9f 1f       	adc	r25, r31
    5480:	fc 01       	movw	r30, r24
    5482:	e3 56       	subi	r30, 0x63	; 99
    5484:	f5 4e       	sbci	r31, 0xE5	; 229
    5486:	80 81       	ld	r24, Z
    5488:	88 23       	and	r24, r24
    548a:	49 f3       	breq	.-46     	; 0x545e <vTaskSwitchContext+0x6e>
    548c:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	9c 01       	movw	r18, r24
    5494:	22 0f       	add	r18, r18
    5496:	33 1f       	adc	r19, r19
    5498:	22 0f       	add	r18, r18
    549a:	33 1f       	adc	r19, r19
    549c:	22 0f       	add	r18, r18
    549e:	33 1f       	adc	r19, r19
    54a0:	28 0f       	add	r18, r24
    54a2:	39 1f       	adc	r19, r25
    54a4:	d9 01       	movw	r26, r18
    54a6:	a3 56       	subi	r26, 0x63	; 99
    54a8:	b5 4e       	sbci	r27, 0xE5	; 229
    54aa:	11 96       	adiw	r26, 0x01	; 1
    54ac:	ed 91       	ld	r30, X+
    54ae:	fc 91       	ld	r31, X
    54b0:	12 97       	sbiw	r26, 0x02	; 2
    54b2:	02 80       	ldd	r0, Z+2	; 0x02
    54b4:	f3 81       	ldd	r31, Z+3	; 0x03
    54b6:	e0 2d       	mov	r30, r0
    54b8:	12 96       	adiw	r26, 0x02	; 2
    54ba:	fc 93       	st	X, r31
    54bc:	ee 93       	st	-X, r30
    54be:	11 97       	sbiw	r26, 0x01	; 1
    54c0:	20 56       	subi	r18, 0x60	; 96
    54c2:	35 4e       	sbci	r19, 0xE5	; 229
    54c4:	e2 17       	cp	r30, r18
    54c6:	f3 07       	cpc	r31, r19
    54c8:	29 f4       	brne	.+10     	; 0x54d4 <vTaskSwitchContext+0xe4>
    54ca:	22 81       	ldd	r18, Z+2	; 0x02
    54cc:	33 81       	ldd	r19, Z+3	; 0x03
    54ce:	fd 01       	movw	r30, r26
    54d0:	32 83       	std	Z+2, r19	; 0x02
    54d2:	21 83       	std	Z+1, r18	; 0x01
    54d4:	fc 01       	movw	r30, r24
    54d6:	ee 0f       	add	r30, r30
    54d8:	ff 1f       	adc	r31, r31
    54da:	ee 0f       	add	r30, r30
    54dc:	ff 1f       	adc	r31, r31
    54de:	ee 0f       	add	r30, r30
    54e0:	ff 1f       	adc	r31, r31
    54e2:	8e 0f       	add	r24, r30
    54e4:	9f 1f       	adc	r25, r31
    54e6:	fc 01       	movw	r30, r24
    54e8:	e3 56       	subi	r30, 0x63	; 99
    54ea:	f5 4e       	sbci	r31, 0xE5	; 229
    54ec:	01 80       	ldd	r0, Z+1	; 0x01
    54ee:	f2 81       	ldd	r31, Z+2	; 0x02
    54f0:	e0 2d       	mov	r30, r0
    54f2:	86 81       	ldd	r24, Z+6	; 0x06
    54f4:	97 81       	ldd	r25, Z+7	; 0x07
    54f6:	90 93 d4 1a 	sts	0x1AD4, r25	; 0x801ad4 <pxCurrentTCB+0x1>
    54fa:	80 93 d3 1a 	sts	0x1AD3, r24	; 0x801ad3 <pxCurrentTCB>
    54fe:	08 95       	ret

00005500 <vTaskPlaceOnEventList>:
    5500:	cf 93       	push	r28
    5502:	df 93       	push	r29
    5504:	eb 01       	movw	r28, r22
    5506:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    550a:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    550e:	64 5f       	subi	r22, 0xF4	; 244
    5510:	7f 4f       	sbci	r23, 0xFF	; 255
    5512:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5516:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    551a:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    551e:	02 96       	adiw	r24, 0x02	; 2
    5520:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5524:	cf 3f       	cpi	r28, 0xFF	; 255
    5526:	8f ef       	ldi	r24, 0xFF	; 255
    5528:	d8 07       	cpc	r29, r24
    552a:	59 f4       	brne	.+22     	; 0x5542 <vTaskPlaceOnEventList+0x42>
    552c:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5530:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5534:	6e 5f       	subi	r22, 0xFE	; 254
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	85 e7       	ldi	r24, 0x75	; 117
    553a:	9a e1       	ldi	r25, 0x1A	; 26
    553c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5540:	37 c0       	rjmp	.+110    	; 0x55b0 <vTaskPlaceOnEventList+0xb0>
    5542:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    5546:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    554a:	c8 0f       	add	r28, r24
    554c:	d9 1f       	adc	r29, r25
    554e:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5552:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5556:	d3 83       	std	Z+3, r29	; 0x03
    5558:	c2 83       	std	Z+2, r28	; 0x02
    555a:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    555e:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    5562:	c8 17       	cp	r28, r24
    5564:	d9 07       	cpc	r29, r25
    5566:	68 f4       	brcc	.+26     	; 0x5582 <vTaskPlaceOnEventList+0x82>
    5568:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    556c:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5570:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    5574:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    5578:	6e 5f       	subi	r22, 0xFE	; 254
    557a:	7f 4f       	sbci	r23, 0xFF	; 255
    557c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5580:	17 c0       	rjmp	.+46     	; 0x55b0 <vTaskPlaceOnEventList+0xb0>
    5582:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5586:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    558a:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    558e:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5592:	6e 5f       	subi	r22, 0xFE	; 254
    5594:	7f 4f       	sbci	r23, 0xFF	; 255
    5596:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    559a:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    559e:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    55a2:	c8 17       	cp	r28, r24
    55a4:	d9 07       	cpc	r29, r25
    55a6:	20 f4       	brcc	.+8      	; 0x55b0 <vTaskPlaceOnEventList+0xb0>
    55a8:	d0 93 6b 1a 	sts	0x1A6B, r29	; 0x801a6b <xNextTaskUnblockTime+0x1>
    55ac:	c0 93 6a 1a 	sts	0x1A6A, r28	; 0x801a6a <xNextTaskUnblockTime>
    55b0:	df 91       	pop	r29
    55b2:	cf 91       	pop	r28
    55b4:	08 95       	ret

000055b6 <xTaskRemoveFromEventList>:
    55b6:	0f 93       	push	r16
    55b8:	1f 93       	push	r17
    55ba:	cf 93       	push	r28
    55bc:	df 93       	push	r29
    55be:	dc 01       	movw	r26, r24
    55c0:	15 96       	adiw	r26, 0x05	; 5
    55c2:	ed 91       	ld	r30, X+
    55c4:	fc 91       	ld	r31, X
    55c6:	16 97       	sbiw	r26, 0x06	; 6
    55c8:	c6 81       	ldd	r28, Z+6	; 0x06
    55ca:	d7 81       	ldd	r29, Z+7	; 0x07
    55cc:	8e 01       	movw	r16, r28
    55ce:	04 5f       	subi	r16, 0xF4	; 244
    55d0:	1f 4f       	sbci	r17, 0xFF	; 255
    55d2:	c8 01       	movw	r24, r16
    55d4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    55d8:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    55dc:	81 11       	cpse	r24, r1
    55de:	1c c0       	rjmp	.+56     	; 0x5618 <xTaskRemoveFromEventList+0x62>
    55e0:	0a 50       	subi	r16, 0x0A	; 10
    55e2:	11 09       	sbc	r17, r1
    55e4:	c8 01       	movw	r24, r16
    55e6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    55ea:	8e 89       	ldd	r24, Y+22	; 0x16
    55ec:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    55f0:	98 17       	cp	r25, r24
    55f2:	10 f4       	brcc	.+4      	; 0x55f8 <xTaskRemoveFromEventList+0x42>
    55f4:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	9c 01       	movw	r18, r24
    55fc:	22 0f       	add	r18, r18
    55fe:	33 1f       	adc	r19, r19
    5600:	22 0f       	add	r18, r18
    5602:	33 1f       	adc	r19, r19
    5604:	22 0f       	add	r18, r18
    5606:	33 1f       	adc	r19, r19
    5608:	82 0f       	add	r24, r18
    560a:	93 1f       	adc	r25, r19
    560c:	b8 01       	movw	r22, r16
    560e:	83 56       	subi	r24, 0x63	; 99
    5610:	95 4e       	sbci	r25, 0xE5	; 229
    5612:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5616:	05 c0       	rjmp	.+10     	; 0x5622 <xTaskRemoveFromEventList+0x6c>
    5618:	b8 01       	movw	r22, r16
    561a:	8e e7       	ldi	r24, 0x7E	; 126
    561c:	9a e1       	ldi	r25, 0x1A	; 26
    561e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5622:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5626:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    562a:	9e 89       	ldd	r25, Y+22	; 0x16
    562c:	86 89       	ldd	r24, Z+22	; 0x16
    562e:	89 17       	cp	r24, r25
    5630:	20 f4       	brcc	.+8      	; 0x563a <xTaskRemoveFromEventList+0x84>
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <xYieldPending>
    5638:	01 c0       	rjmp	.+2      	; 0x563c <xTaskRemoveFromEventList+0x86>
    563a:	80 e0       	ldi	r24, 0x00	; 0
    563c:	df 91       	pop	r29
    563e:	cf 91       	pop	r28
    5640:	1f 91       	pop	r17
    5642:	0f 91       	pop	r16
    5644:	08 95       	ret

00005646 <vTaskSetTimeOutState>:
    5646:	20 91 6d 1a 	lds	r18, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    564a:	fc 01       	movw	r30, r24
    564c:	20 83       	st	Z, r18
    564e:	20 91 72 1a 	lds	r18, 0x1A72	; 0x801a72 <xTickCount>
    5652:	30 91 73 1a 	lds	r19, 0x1A73	; 0x801a73 <xTickCount+0x1>
    5656:	32 83       	std	Z+2, r19	; 0x02
    5658:	21 83       	std	Z+1, r18	; 0x01
    565a:	08 95       	ret

0000565c <xTaskCheckForTimeOut>:
    565c:	fc 01       	movw	r30, r24
    565e:	0f b6       	in	r0, 0x3f	; 63
    5660:	f8 94       	cli
    5662:	0f 92       	push	r0
    5664:	20 91 72 1a 	lds	r18, 0x1A72	; 0x801a72 <xTickCount>
    5668:	30 91 73 1a 	lds	r19, 0x1A73	; 0x801a73 <xTickCount+0x1>
    566c:	db 01       	movw	r26, r22
    566e:	8d 91       	ld	r24, X+
    5670:	9c 91       	ld	r25, X
    5672:	8f 3f       	cpi	r24, 0xFF	; 255
    5674:	bf ef       	ldi	r27, 0xFF	; 255
    5676:	9b 07       	cpc	r25, r27
    5678:	21 f1       	breq	.+72     	; 0x56c2 <xTaskCheckForTimeOut+0x66>
    567a:	40 91 6d 1a 	lds	r20, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    567e:	50 81       	ld	r21, Z
    5680:	54 17       	cp	r21, r20
    5682:	29 f0       	breq	.+10     	; 0x568e <xTaskCheckForTimeOut+0x32>
    5684:	41 81       	ldd	r20, Z+1	; 0x01
    5686:	52 81       	ldd	r21, Z+2	; 0x02
    5688:	24 17       	cp	r18, r20
    568a:	35 07       	cpc	r19, r21
    568c:	e0 f4       	brcc	.+56     	; 0x56c6 <xTaskCheckForTimeOut+0x6a>
    568e:	41 81       	ldd	r20, Z+1	; 0x01
    5690:	52 81       	ldd	r21, Z+2	; 0x02
    5692:	d9 01       	movw	r26, r18
    5694:	a4 1b       	sub	r26, r20
    5696:	b5 0b       	sbc	r27, r21
    5698:	a8 17       	cp	r26, r24
    569a:	b9 07       	cpc	r27, r25
    569c:	b0 f4       	brcc	.+44     	; 0x56ca <xTaskCheckForTimeOut+0x6e>
    569e:	42 1b       	sub	r20, r18
    56a0:	53 0b       	sbc	r21, r19
    56a2:	84 0f       	add	r24, r20
    56a4:	95 1f       	adc	r25, r21
    56a6:	db 01       	movw	r26, r22
    56a8:	8d 93       	st	X+, r24
    56aa:	9c 93       	st	X, r25
    56ac:	80 91 6d 1a 	lds	r24, 0x1A6D	; 0x801a6d <xNumOfOverflows>
    56b0:	80 83       	st	Z, r24
    56b2:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    56b6:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    56ba:	92 83       	std	Z+2, r25	; 0x02
    56bc:	81 83       	std	Z+1, r24	; 0x01
    56be:	80 e0       	ldi	r24, 0x00	; 0
    56c0:	05 c0       	rjmp	.+10     	; 0x56cc <xTaskCheckForTimeOut+0x70>
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	03 c0       	rjmp	.+6      	; 0x56cc <xTaskCheckForTimeOut+0x70>
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	01 c0       	rjmp	.+2      	; 0x56cc <xTaskCheckForTimeOut+0x70>
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	0f 90       	pop	r0
    56ce:	0f be       	out	0x3f, r0	; 63
    56d0:	08 95       	ret

000056d2 <vTaskMissedYield>:
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <xYieldPending>
    56d8:	08 95       	ret

000056da <xTaskGetCurrentTaskHandle>:
    56da:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    56de:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    56e2:	08 95       	ret

000056e4 <vTaskPriorityInherit>:
    56e4:	0f 93       	push	r16
    56e6:	1f 93       	push	r17
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
    56ec:	fc 01       	movw	r30, r24
    56ee:	89 2b       	or	r24, r25
    56f0:	09 f4       	brne	.+2      	; 0x56f4 <vTaskPriorityInherit+0x10>
    56f2:	55 c0       	rjmp	.+170    	; 0x579e <vTaskPriorityInherit+0xba>
    56f4:	26 89       	ldd	r18, Z+22	; 0x16
    56f6:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    56fa:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    56fe:	56 96       	adiw	r26, 0x16	; 22
    5700:	8c 91       	ld	r24, X
    5702:	28 17       	cp	r18, r24
    5704:	08 f0       	brcs	.+2      	; 0x5708 <vTaskPriorityInherit+0x24>
    5706:	4b c0       	rjmp	.+150    	; 0x579e <vTaskPriorityInherit+0xba>
    5708:	84 85       	ldd	r24, Z+12	; 0x0c
    570a:	95 85       	ldd	r25, Z+13	; 0x0d
    570c:	99 23       	and	r25, r25
    570e:	64 f0       	brlt	.+24     	; 0x5728 <vTaskPriorityInherit+0x44>
    5710:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5714:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5718:	56 96       	adiw	r26, 0x16	; 22
    571a:	3c 91       	ld	r19, X
    571c:	86 e0       	ldi	r24, 0x06	; 6
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	83 1b       	sub	r24, r19
    5722:	91 09       	sbc	r25, r1
    5724:	95 87       	std	Z+13, r25	; 0x0d
    5726:	84 87       	std	Z+12, r24	; 0x0c
    5728:	30 e0       	ldi	r19, 0x00	; 0
    572a:	c9 01       	movw	r24, r18
    572c:	88 0f       	add	r24, r24
    572e:	99 1f       	adc	r25, r25
    5730:	88 0f       	add	r24, r24
    5732:	99 1f       	adc	r25, r25
    5734:	88 0f       	add	r24, r24
    5736:	99 1f       	adc	r25, r25
    5738:	28 0f       	add	r18, r24
    573a:	39 1f       	adc	r19, r25
    573c:	23 56       	subi	r18, 0x63	; 99
    573e:	35 4e       	sbci	r19, 0xE5	; 229
    5740:	82 85       	ldd	r24, Z+10	; 0x0a
    5742:	93 85       	ldd	r25, Z+11	; 0x0b
    5744:	82 17       	cp	r24, r18
    5746:	93 07       	cpc	r25, r19
    5748:	19 f5       	brne	.+70     	; 0x5790 <vTaskPriorityInherit+0xac>
    574a:	8f 01       	movw	r16, r30
    574c:	ef 01       	movw	r28, r30
    574e:	22 96       	adiw	r28, 0x02	; 2
    5750:	ce 01       	movw	r24, r28
    5752:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5756:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    575a:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    575e:	86 89       	ldd	r24, Z+22	; 0x16
    5760:	f8 01       	movw	r30, r16
    5762:	86 8b       	std	Z+22, r24	; 0x16
    5764:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5768:	98 17       	cp	r25, r24
    576a:	10 f4       	brcc	.+4      	; 0x5770 <vTaskPriorityInherit+0x8c>
    576c:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	9c 01       	movw	r18, r24
    5774:	22 0f       	add	r18, r18
    5776:	33 1f       	adc	r19, r19
    5778:	22 0f       	add	r18, r18
    577a:	33 1f       	adc	r19, r19
    577c:	22 0f       	add	r18, r18
    577e:	33 1f       	adc	r19, r19
    5780:	82 0f       	add	r24, r18
    5782:	93 1f       	adc	r25, r19
    5784:	be 01       	movw	r22, r28
    5786:	83 56       	subi	r24, 0x63	; 99
    5788:	95 4e       	sbci	r25, 0xE5	; 229
    578a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    578e:	07 c0       	rjmp	.+14     	; 0x579e <vTaskPriorityInherit+0xba>
    5790:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5794:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5798:	56 96       	adiw	r26, 0x16	; 22
    579a:	8c 91       	ld	r24, X
    579c:	86 8b       	std	Z+22, r24	; 0x16
    579e:	df 91       	pop	r29
    57a0:	cf 91       	pop	r28
    57a2:	1f 91       	pop	r17
    57a4:	0f 91       	pop	r16
    57a6:	08 95       	ret

000057a8 <xTaskPriorityDisinherit>:
    57a8:	0f 93       	push	r16
    57aa:	1f 93       	push	r17
    57ac:	cf 93       	push	r28
    57ae:	df 93       	push	r29
    57b0:	fc 01       	movw	r30, r24
    57b2:	89 2b       	or	r24, r25
    57b4:	79 f1       	breq	.+94     	; 0x5814 <xTaskPriorityDisinherit+0x6c>
    57b6:	82 a1       	ldd	r24, Z+34	; 0x22
    57b8:	81 50       	subi	r24, 0x01	; 1
    57ba:	82 a3       	std	Z+34, r24	; 0x22
    57bc:	26 89       	ldd	r18, Z+22	; 0x16
    57be:	91 a1       	ldd	r25, Z+33	; 0x21
    57c0:	29 17       	cp	r18, r25
    57c2:	51 f1       	breq	.+84     	; 0x5818 <xTaskPriorityDisinherit+0x70>
    57c4:	81 11       	cpse	r24, r1
    57c6:	2a c0       	rjmp	.+84     	; 0x581c <xTaskPriorityDisinherit+0x74>
    57c8:	ef 01       	movw	r28, r30
    57ca:	8f 01       	movw	r16, r30
    57cc:	0e 5f       	subi	r16, 0xFE	; 254
    57ce:	1f 4f       	sbci	r17, 0xFF	; 255
    57d0:	c8 01       	movw	r24, r16
    57d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    57d6:	89 a1       	ldd	r24, Y+33	; 0x21
    57d8:	8e 8b       	std	Y+22, r24	; 0x16
    57da:	26 e0       	ldi	r18, 0x06	; 6
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	28 1b       	sub	r18, r24
    57e0:	31 09       	sbc	r19, r1
    57e2:	3d 87       	std	Y+13, r19	; 0x0d
    57e4:	2c 87       	std	Y+12, r18	; 0x0c
    57e6:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    57ea:	98 17       	cp	r25, r24
    57ec:	10 f4       	brcc	.+4      	; 0x57f2 <xTaskPriorityDisinherit+0x4a>
    57ee:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	9c 01       	movw	r18, r24
    57f6:	22 0f       	add	r18, r18
    57f8:	33 1f       	adc	r19, r19
    57fa:	22 0f       	add	r18, r18
    57fc:	33 1f       	adc	r19, r19
    57fe:	22 0f       	add	r18, r18
    5800:	33 1f       	adc	r19, r19
    5802:	82 0f       	add	r24, r18
    5804:	93 1f       	adc	r25, r19
    5806:	b8 01       	movw	r22, r16
    5808:	83 56       	subi	r24, 0x63	; 99
    580a:	95 4e       	sbci	r25, 0xE5	; 229
    580c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	05 c0       	rjmp	.+10     	; 0x581e <xTaskPriorityDisinherit+0x76>
    5814:	80 e0       	ldi	r24, 0x00	; 0
    5816:	03 c0       	rjmp	.+6      	; 0x581e <xTaskPriorityDisinherit+0x76>
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	01 c0       	rjmp	.+2      	; 0x581e <xTaskPriorityDisinherit+0x76>
    581c:	80 e0       	ldi	r24, 0x00	; 0
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	08 95       	ret

00005828 <pvTaskIncrementMutexHeldCount>:
    5828:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    582c:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5830:	89 2b       	or	r24, r25
    5832:	39 f0       	breq	.+14     	; 0x5842 <pvTaskIncrementMutexHeldCount+0x1a>
    5834:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5838:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    583c:	82 a1       	ldd	r24, Z+34	; 0x22
    583e:	8f 5f       	subi	r24, 0xFF	; 255
    5840:	82 a3       	std	Z+34, r24	; 0x22
    5842:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5846:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    584a:	08 95       	ret

0000584c <ulTaskNotifyTake>:
    584c:	0f 93       	push	r16
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	18 2f       	mov	r17, r24
    5856:	eb 01       	movw	r28, r22
    5858:	0f b6       	in	r0, 0x3f	; 63
    585a:	f8 94       	cli
    585c:	0f 92       	push	r0
    585e:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5862:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5866:	83 a1       	ldd	r24, Z+35	; 0x23
    5868:	94 a1       	ldd	r25, Z+36	; 0x24
    586a:	a5 a1       	ldd	r26, Z+37	; 0x25
    586c:	b6 a1       	ldd	r27, Z+38	; 0x26
    586e:	89 2b       	or	r24, r25
    5870:	8a 2b       	or	r24, r26
    5872:	8b 2b       	or	r24, r27
    5874:	09 f0       	breq	.+2      	; 0x5878 <ulTaskNotifyTake+0x2c>
    5876:	58 c0       	rjmp	.+176    	; 0x5928 <ulTaskNotifyTake+0xdc>
    5878:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    587c:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5880:	81 e0       	ldi	r24, 0x01	; 1
    5882:	87 a3       	std	Z+39, r24	; 0x27
    5884:	20 97       	sbiw	r28, 0x00	; 0
    5886:	09 f4       	brne	.+2      	; 0x588a <ulTaskNotifyTake+0x3e>
    5888:	4f c0       	rjmp	.+158    	; 0x5928 <ulTaskNotifyTake+0xdc>
    588a:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    588e:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5892:	02 96       	adiw	r24, 0x02	; 2
    5894:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5898:	cf 3f       	cpi	r28, 0xFF	; 255
    589a:	8f ef       	ldi	r24, 0xFF	; 255
    589c:	d8 07       	cpc	r29, r24
    589e:	59 f4       	brne	.+22     	; 0x58b6 <ulTaskNotifyTake+0x6a>
    58a0:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    58a4:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    58a8:	6e 5f       	subi	r22, 0xFE	; 254
    58aa:	7f 4f       	sbci	r23, 0xFF	; 255
    58ac:	85 e7       	ldi	r24, 0x75	; 117
    58ae:	9a e1       	ldi	r25, 0x1A	; 26
    58b0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    58b4:	37 c0       	rjmp	.+110    	; 0x5924 <ulTaskNotifyTake+0xd8>
    58b6:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    58ba:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    58be:	c8 0f       	add	r28, r24
    58c0:	d9 1f       	adc	r29, r25
    58c2:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    58c6:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    58ca:	d3 83       	std	Z+3, r29	; 0x03
    58cc:	c2 83       	std	Z+2, r28	; 0x02
    58ce:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    58d2:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    58d6:	c8 17       	cp	r28, r24
    58d8:	d9 07       	cpc	r29, r25
    58da:	68 f4       	brcc	.+26     	; 0x58f6 <ulTaskNotifyTake+0xaa>
    58dc:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    58e0:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    58e4:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    58e8:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    58ec:	6e 5f       	subi	r22, 0xFE	; 254
    58ee:	7f 4f       	sbci	r23, 0xFF	; 255
    58f0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    58f4:	17 c0       	rjmp	.+46     	; 0x5924 <ulTaskNotifyTake+0xd8>
    58f6:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    58fa:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    58fe:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5902:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5906:	6e 5f       	subi	r22, 0xFE	; 254
    5908:	7f 4f       	sbci	r23, 0xFF	; 255
    590a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    590e:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    5912:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5916:	c8 17       	cp	r28, r24
    5918:	d9 07       	cpc	r29, r25
    591a:	20 f4       	brcc	.+8      	; 0x5924 <ulTaskNotifyTake+0xd8>
    591c:	d0 93 6b 1a 	sts	0x1A6B, r29	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5920:	c0 93 6a 1a 	sts	0x1A6A, r28	; 0x801a6a <xNextTaskUnblockTime>
    5924:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5928:	0f 90       	pop	r0
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	0f b6       	in	r0, 0x3f	; 63
    592e:	f8 94       	cli
    5930:	0f 92       	push	r0
    5932:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5936:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    593a:	63 a1       	ldd	r22, Z+35	; 0x23
    593c:	74 a1       	ldd	r23, Z+36	; 0x24
    593e:	85 a1       	ldd	r24, Z+37	; 0x25
    5940:	96 a1       	ldd	r25, Z+38	; 0x26
    5942:	61 15       	cp	r22, r1
    5944:	71 05       	cpc	r23, r1
    5946:	81 05       	cpc	r24, r1
    5948:	91 05       	cpc	r25, r1
    594a:	d9 f0       	breq	.+54     	; 0x5982 <ulTaskNotifyTake+0x136>
    594c:	11 23       	and	r17, r17
    594e:	49 f0       	breq	.+18     	; 0x5962 <ulTaskNotifyTake+0x116>
    5950:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5954:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5958:	13 a2       	std	Z+35, r1	; 0x23
    595a:	14 a2       	std	Z+36, r1	; 0x24
    595c:	15 a2       	std	Z+37, r1	; 0x25
    595e:	16 a2       	std	Z+38, r1	; 0x26
    5960:	10 c0       	rjmp	.+32     	; 0x5982 <ulTaskNotifyTake+0x136>
    5962:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5966:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    596a:	03 a1       	ldd	r16, Z+35	; 0x23
    596c:	14 a1       	ldd	r17, Z+36	; 0x24
    596e:	25 a1       	ldd	r18, Z+37	; 0x25
    5970:	36 a1       	ldd	r19, Z+38	; 0x26
    5972:	01 50       	subi	r16, 0x01	; 1
    5974:	11 09       	sbc	r17, r1
    5976:	21 09       	sbc	r18, r1
    5978:	31 09       	sbc	r19, r1
    597a:	03 a3       	std	Z+35, r16	; 0x23
    597c:	14 a3       	std	Z+36, r17	; 0x24
    597e:	25 a3       	std	Z+37, r18	; 0x25
    5980:	36 a3       	std	Z+38, r19	; 0x26
    5982:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5986:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    598a:	17 a2       	std	Z+39, r1	; 0x27
    598c:	0f 90       	pop	r0
    598e:	0f be       	out	0x3f, r0	; 63
    5990:	df 91       	pop	r29
    5992:	cf 91       	pop	r28
    5994:	1f 91       	pop	r17
    5996:	0f 91       	pop	r16
    5998:	08 95       	ret

0000599a <xTaskNotifyWait>:
    599a:	4f 92       	push	r4
    599c:	5f 92       	push	r5
    599e:	6f 92       	push	r6
    59a0:	7f 92       	push	r7
    59a2:	8f 92       	push	r8
    59a4:	9f 92       	push	r9
    59a6:	af 92       	push	r10
    59a8:	bf 92       	push	r11
    59aa:	ef 92       	push	r14
    59ac:	ff 92       	push	r15
    59ae:	0f 93       	push	r16
    59b0:	1f 93       	push	r17
    59b2:	49 01       	movw	r8, r18
    59b4:	5a 01       	movw	r10, r20
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	0f 92       	push	r0
    59bc:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    59c0:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    59c4:	27 a1       	ldd	r18, Z+39	; 0x27
    59c6:	22 30       	cpi	r18, 0x02	; 2
    59c8:	09 f4       	brne	.+2      	; 0x59cc <xTaskNotifyWait+0x32>
    59ca:	6f c0       	rjmp	.+222    	; 0x5aaa <xTaskNotifyWait+0x110>
    59cc:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    59d0:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    59d4:	43 a0       	ldd	r4, Z+35	; 0x23
    59d6:	54 a0       	ldd	r5, Z+36	; 0x24
    59d8:	65 a0       	ldd	r6, Z+37	; 0x25
    59da:	76 a0       	ldd	r7, Z+38	; 0x26
    59dc:	dc 01       	movw	r26, r24
    59de:	cb 01       	movw	r24, r22
    59e0:	80 95       	com	r24
    59e2:	90 95       	com	r25
    59e4:	a0 95       	com	r26
    59e6:	b0 95       	com	r27
    59e8:	84 21       	and	r24, r4
    59ea:	95 21       	and	r25, r5
    59ec:	a6 21       	and	r26, r6
    59ee:	b7 21       	and	r27, r7
    59f0:	83 a3       	std	Z+35, r24	; 0x23
    59f2:	94 a3       	std	Z+36, r25	; 0x24
    59f4:	a5 a3       	std	Z+37, r26	; 0x25
    59f6:	b6 a3       	std	Z+38, r27	; 0x26
    59f8:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    59fc:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	87 a3       	std	Z+39, r24	; 0x27
    5a04:	e1 14       	cp	r14, r1
    5a06:	f1 04       	cpc	r15, r1
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <xTaskNotifyWait+0x72>
    5a0a:	4f c0       	rjmp	.+158    	; 0x5aaa <xTaskNotifyWait+0x110>
    5a0c:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5a10:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a14:	02 96       	adiw	r24, 0x02	; 2
    5a16:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5a1a:	8f ef       	ldi	r24, 0xFF	; 255
    5a1c:	e8 16       	cp	r14, r24
    5a1e:	f8 06       	cpc	r15, r24
    5a20:	59 f4       	brne	.+22     	; 0x5a38 <xTaskNotifyWait+0x9e>
    5a22:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5a26:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a2a:	6e 5f       	subi	r22, 0xFE	; 254
    5a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a2e:	85 e7       	ldi	r24, 0x75	; 117
    5a30:	9a e1       	ldi	r25, 0x1A	; 26
    5a32:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5a36:	37 c0       	rjmp	.+110    	; 0x5aa6 <xTaskNotifyWait+0x10c>
    5a38:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    5a3c:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    5a40:	e8 0e       	add	r14, r24
    5a42:	f9 1e       	adc	r15, r25
    5a44:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5a48:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a4c:	f3 82       	std	Z+3, r15	; 0x03
    5a4e:	e2 82       	std	Z+2, r14	; 0x02
    5a50:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <xTickCount>
    5a54:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <xTickCount+0x1>
    5a58:	e8 16       	cp	r14, r24
    5a5a:	f9 06       	cpc	r15, r25
    5a5c:	68 f4       	brcc	.+26     	; 0x5a78 <xTaskNotifyWait+0xde>
    5a5e:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5a62:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a66:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <pxOverflowDelayedTaskList>
    5a6a:	90 91 88 1a 	lds	r25, 0x1A88	; 0x801a88 <pxOverflowDelayedTaskList+0x1>
    5a6e:	6e 5f       	subi	r22, 0xFE	; 254
    5a70:	7f 4f       	sbci	r23, 0xFF	; 255
    5a72:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5a76:	17 c0       	rjmp	.+46     	; 0x5aa6 <xTaskNotifyWait+0x10c>
    5a78:	60 91 d3 1a 	lds	r22, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5a7c:	70 91 d4 1a 	lds	r23, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5a80:	80 91 89 1a 	lds	r24, 0x1A89	; 0x801a89 <pxDelayedTaskList>
    5a84:	90 91 8a 1a 	lds	r25, 0x1A8A	; 0x801a8a <pxDelayedTaskList+0x1>
    5a88:	6e 5f       	subi	r22, 0xFE	; 254
    5a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5a90:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <xNextTaskUnblockTime>
    5a94:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5a98:	e8 16       	cp	r14, r24
    5a9a:	f9 06       	cpc	r15, r25
    5a9c:	20 f4       	brcc	.+8      	; 0x5aa6 <xTaskNotifyWait+0x10c>
    5a9e:	f0 92 6b 1a 	sts	0x1A6B, r15	; 0x801a6b <xNextTaskUnblockTime+0x1>
    5aa2:	e0 92 6a 1a 	sts	0x1A6A, r14	; 0x801a6a <xNextTaskUnblockTime>
    5aa6:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5aaa:	0f 90       	pop	r0
    5aac:	0f be       	out	0x3f, r0	; 63
    5aae:	0f b6       	in	r0, 0x3f	; 63
    5ab0:	f8 94       	cli
    5ab2:	0f 92       	push	r0
    5ab4:	01 15       	cp	r16, r1
    5ab6:	11 05       	cpc	r17, r1
    5ab8:	69 f0       	breq	.+26     	; 0x5ad4 <xTaskNotifyWait+0x13a>
    5aba:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5abe:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5ac2:	83 a1       	ldd	r24, Z+35	; 0x23
    5ac4:	94 a1       	ldd	r25, Z+36	; 0x24
    5ac6:	a5 a1       	ldd	r26, Z+37	; 0x25
    5ac8:	b6 a1       	ldd	r27, Z+38	; 0x26
    5aca:	f8 01       	movw	r30, r16
    5acc:	80 83       	st	Z, r24
    5ace:	91 83       	std	Z+1, r25	; 0x01
    5ad0:	a2 83       	std	Z+2, r26	; 0x02
    5ad2:	b3 83       	std	Z+3, r27	; 0x03
    5ad4:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5ad8:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5adc:	87 a1       	ldd	r24, Z+39	; 0x27
    5ade:	81 30       	cpi	r24, 0x01	; 1
    5ae0:	b1 f0       	breq	.+44     	; 0x5b0e <xTaskNotifyWait+0x174>
    5ae2:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5ae6:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5aea:	83 a1       	ldd	r24, Z+35	; 0x23
    5aec:	94 a1       	ldd	r25, Z+36	; 0x24
    5aee:	a5 a1       	ldd	r26, Z+37	; 0x25
    5af0:	b6 a1       	ldd	r27, Z+38	; 0x26
    5af2:	80 94       	com	r8
    5af4:	90 94       	com	r9
    5af6:	a0 94       	com	r10
    5af8:	b0 94       	com	r11
    5afa:	88 22       	and	r8, r24
    5afc:	99 22       	and	r9, r25
    5afe:	aa 22       	and	r10, r26
    5b00:	bb 22       	and	r11, r27
    5b02:	83 a2       	std	Z+35, r8	; 0x23
    5b04:	94 a2       	std	Z+36, r9	; 0x24
    5b06:	a5 a2       	std	Z+37, r10	; 0x25
    5b08:	b6 a2       	std	Z+38, r11	; 0x26
    5b0a:	81 e0       	ldi	r24, 0x01	; 1
    5b0c:	01 c0       	rjmp	.+2      	; 0x5b10 <xTaskNotifyWait+0x176>
    5b0e:	80 e0       	ldi	r24, 0x00	; 0
    5b10:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5b14:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5b18:	17 a2       	std	Z+39, r1	; 0x27
    5b1a:	0f 90       	pop	r0
    5b1c:	0f be       	out	0x3f, r0	; 63
    5b1e:	1f 91       	pop	r17
    5b20:	0f 91       	pop	r16
    5b22:	ff 90       	pop	r15
    5b24:	ef 90       	pop	r14
    5b26:	bf 90       	pop	r11
    5b28:	af 90       	pop	r10
    5b2a:	9f 90       	pop	r9
    5b2c:	8f 90       	pop	r8
    5b2e:	7f 90       	pop	r7
    5b30:	6f 90       	pop	r6
    5b32:	5f 90       	pop	r5
    5b34:	4f 90       	pop	r4
    5b36:	08 95       	ret

00005b38 <xTaskGenericNotify>:
    5b38:	0f 93       	push	r16
    5b3a:	1f 93       	push	r17
    5b3c:	cf 93       	push	r28
    5b3e:	df 93       	push	r29
    5b40:	fc 01       	movw	r30, r24
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	0f 92       	push	r0
    5b48:	01 15       	cp	r16, r1
    5b4a:	11 05       	cpc	r17, r1
    5b4c:	49 f0       	breq	.+18     	; 0x5b60 <xTaskGenericNotify+0x28>
    5b4e:	83 a1       	ldd	r24, Z+35	; 0x23
    5b50:	94 a1       	ldd	r25, Z+36	; 0x24
    5b52:	a5 a1       	ldd	r26, Z+37	; 0x25
    5b54:	b6 a1       	ldd	r27, Z+38	; 0x26
    5b56:	e8 01       	movw	r28, r16
    5b58:	88 83       	st	Y, r24
    5b5a:	99 83       	std	Y+1, r25	; 0x01
    5b5c:	aa 83       	std	Y+2, r26	; 0x02
    5b5e:	bb 83       	std	Y+3, r27	; 0x03
    5b60:	87 a1       	ldd	r24, Z+39	; 0x27
    5b62:	92 e0       	ldi	r25, 0x02	; 2
    5b64:	97 a3       	std	Z+39, r25	; 0x27
    5b66:	22 30       	cpi	r18, 0x02	; 2
    5b68:	b1 f0       	breq	.+44     	; 0x5b96 <xTaskGenericNotify+0x5e>
    5b6a:	18 f4       	brcc	.+6      	; 0x5b72 <xTaskGenericNotify+0x3a>
    5b6c:	21 30       	cpi	r18, 0x01	; 1
    5b6e:	31 f0       	breq	.+12     	; 0x5b7c <xTaskGenericNotify+0x44>
    5b70:	2a c0       	rjmp	.+84     	; 0x5bc6 <xTaskGenericNotify+0x8e>
    5b72:	23 30       	cpi	r18, 0x03	; 3
    5b74:	e9 f0       	breq	.+58     	; 0x5bb0 <xTaskGenericNotify+0x78>
    5b76:	24 30       	cpi	r18, 0x04	; 4
    5b78:	01 f1       	breq	.+64     	; 0x5bba <xTaskGenericNotify+0x82>
    5b7a:	25 c0       	rjmp	.+74     	; 0x5bc6 <xTaskGenericNotify+0x8e>
    5b7c:	03 a1       	ldd	r16, Z+35	; 0x23
    5b7e:	14 a1       	ldd	r17, Z+36	; 0x24
    5b80:	25 a1       	ldd	r18, Z+37	; 0x25
    5b82:	36 a1       	ldd	r19, Z+38	; 0x26
    5b84:	40 2b       	or	r20, r16
    5b86:	51 2b       	or	r21, r17
    5b88:	62 2b       	or	r22, r18
    5b8a:	73 2b       	or	r23, r19
    5b8c:	43 a3       	std	Z+35, r20	; 0x23
    5b8e:	54 a3       	std	Z+36, r21	; 0x24
    5b90:	65 a3       	std	Z+37, r22	; 0x25
    5b92:	76 a3       	std	Z+38, r23	; 0x26
    5b94:	18 c0       	rjmp	.+48     	; 0x5bc6 <xTaskGenericNotify+0x8e>
    5b96:	43 a1       	ldd	r20, Z+35	; 0x23
    5b98:	54 a1       	ldd	r21, Z+36	; 0x24
    5b9a:	65 a1       	ldd	r22, Z+37	; 0x25
    5b9c:	76 a1       	ldd	r23, Z+38	; 0x26
    5b9e:	4f 5f       	subi	r20, 0xFF	; 255
    5ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba2:	6f 4f       	sbci	r22, 0xFF	; 255
    5ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba6:	43 a3       	std	Z+35, r20	; 0x23
    5ba8:	54 a3       	std	Z+36, r21	; 0x24
    5baa:	65 a3       	std	Z+37, r22	; 0x25
    5bac:	76 a3       	std	Z+38, r23	; 0x26
    5bae:	0b c0       	rjmp	.+22     	; 0x5bc6 <xTaskGenericNotify+0x8e>
    5bb0:	43 a3       	std	Z+35, r20	; 0x23
    5bb2:	54 a3       	std	Z+36, r21	; 0x24
    5bb4:	65 a3       	std	Z+37, r22	; 0x25
    5bb6:	76 a3       	std	Z+38, r23	; 0x26
    5bb8:	06 c0       	rjmp	.+12     	; 0x5bc6 <xTaskGenericNotify+0x8e>
    5bba:	82 30       	cpi	r24, 0x02	; 2
    5bbc:	79 f1       	breq	.+94     	; 0x5c1c <xTaskGenericNotify+0xe4>
    5bbe:	43 a3       	std	Z+35, r20	; 0x23
    5bc0:	54 a3       	std	Z+36, r21	; 0x24
    5bc2:	65 a3       	std	Z+37, r22	; 0x25
    5bc4:	76 a3       	std	Z+38, r23	; 0x26
    5bc6:	81 30       	cpi	r24, 0x01	; 1
    5bc8:	59 f5       	brne	.+86     	; 0x5c20 <xTaskGenericNotify+0xe8>
    5bca:	ef 01       	movw	r28, r30
    5bcc:	8f 01       	movw	r16, r30
    5bce:	0e 5f       	subi	r16, 0xFE	; 254
    5bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd2:	c8 01       	movw	r24, r16
    5bd4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5bd8:	8e 89       	ldd	r24, Y+22	; 0x16
    5bda:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5bde:	98 17       	cp	r25, r24
    5be0:	10 f4       	brcc	.+4      	; 0x5be6 <xTaskGenericNotify+0xae>
    5be2:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	9c 01       	movw	r18, r24
    5bea:	22 0f       	add	r18, r18
    5bec:	33 1f       	adc	r19, r19
    5bee:	22 0f       	add	r18, r18
    5bf0:	33 1f       	adc	r19, r19
    5bf2:	22 0f       	add	r18, r18
    5bf4:	33 1f       	adc	r19, r19
    5bf6:	82 0f       	add	r24, r18
    5bf8:	93 1f       	adc	r25, r19
    5bfa:	b8 01       	movw	r22, r16
    5bfc:	83 56       	subi	r24, 0x63	; 99
    5bfe:	95 4e       	sbci	r25, 0xE5	; 229
    5c00:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5c04:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5c08:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5c0c:	9e 89       	ldd	r25, Y+22	; 0x16
    5c0e:	86 89       	ldd	r24, Z+22	; 0x16
    5c10:	89 17       	cp	r24, r25
    5c12:	40 f4       	brcc	.+16     	; 0x5c24 <xTaskGenericNotify+0xec>
    5c14:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	05 c0       	rjmp	.+10     	; 0x5c26 <xTaskGenericNotify+0xee>
    5c1c:	80 e0       	ldi	r24, 0x00	; 0
    5c1e:	03 c0       	rjmp	.+6      	; 0x5c26 <xTaskGenericNotify+0xee>
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	01 c0       	rjmp	.+2      	; 0x5c26 <xTaskGenericNotify+0xee>
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	0f 90       	pop	r0
    5c28:	0f be       	out	0x3f, r0	; 63
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	08 95       	ret

00005c34 <xTaskGenericNotifyFromISR>:
    5c34:	ef 92       	push	r14
    5c36:	ff 92       	push	r15
    5c38:	0f 93       	push	r16
    5c3a:	1f 93       	push	r17
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	fc 01       	movw	r30, r24
    5c42:	01 15       	cp	r16, r1
    5c44:	11 05       	cpc	r17, r1
    5c46:	49 f0       	breq	.+18     	; 0x5c5a <xTaskGenericNotifyFromISR+0x26>
    5c48:	83 a1       	ldd	r24, Z+35	; 0x23
    5c4a:	94 a1       	ldd	r25, Z+36	; 0x24
    5c4c:	a5 a1       	ldd	r26, Z+37	; 0x25
    5c4e:	b6 a1       	ldd	r27, Z+38	; 0x26
    5c50:	e8 01       	movw	r28, r16
    5c52:	88 83       	st	Y, r24
    5c54:	99 83       	std	Y+1, r25	; 0x01
    5c56:	aa 83       	std	Y+2, r26	; 0x02
    5c58:	bb 83       	std	Y+3, r27	; 0x03
    5c5a:	87 a1       	ldd	r24, Z+39	; 0x27
    5c5c:	92 e0       	ldi	r25, 0x02	; 2
    5c5e:	97 a3       	std	Z+39, r25	; 0x27
    5c60:	22 30       	cpi	r18, 0x02	; 2
    5c62:	b1 f0       	breq	.+44     	; 0x5c90 <xTaskGenericNotifyFromISR+0x5c>
    5c64:	18 f4       	brcc	.+6      	; 0x5c6c <xTaskGenericNotifyFromISR+0x38>
    5c66:	21 30       	cpi	r18, 0x01	; 1
    5c68:	31 f0       	breq	.+12     	; 0x5c76 <xTaskGenericNotifyFromISR+0x42>
    5c6a:	2a c0       	rjmp	.+84     	; 0x5cc0 <xTaskGenericNotifyFromISR+0x8c>
    5c6c:	23 30       	cpi	r18, 0x03	; 3
    5c6e:	e9 f0       	breq	.+58     	; 0x5caa <xTaskGenericNotifyFromISR+0x76>
    5c70:	24 30       	cpi	r18, 0x04	; 4
    5c72:	01 f1       	breq	.+64     	; 0x5cb4 <xTaskGenericNotifyFromISR+0x80>
    5c74:	25 c0       	rjmp	.+74     	; 0x5cc0 <xTaskGenericNotifyFromISR+0x8c>
    5c76:	03 a1       	ldd	r16, Z+35	; 0x23
    5c78:	14 a1       	ldd	r17, Z+36	; 0x24
    5c7a:	25 a1       	ldd	r18, Z+37	; 0x25
    5c7c:	36 a1       	ldd	r19, Z+38	; 0x26
    5c7e:	40 2b       	or	r20, r16
    5c80:	51 2b       	or	r21, r17
    5c82:	62 2b       	or	r22, r18
    5c84:	73 2b       	or	r23, r19
    5c86:	43 a3       	std	Z+35, r20	; 0x23
    5c88:	54 a3       	std	Z+36, r21	; 0x24
    5c8a:	65 a3       	std	Z+37, r22	; 0x25
    5c8c:	76 a3       	std	Z+38, r23	; 0x26
    5c8e:	18 c0       	rjmp	.+48     	; 0x5cc0 <xTaskGenericNotifyFromISR+0x8c>
    5c90:	43 a1       	ldd	r20, Z+35	; 0x23
    5c92:	54 a1       	ldd	r21, Z+36	; 0x24
    5c94:	65 a1       	ldd	r22, Z+37	; 0x25
    5c96:	76 a1       	ldd	r23, Z+38	; 0x26
    5c98:	4f 5f       	subi	r20, 0xFF	; 255
    5c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c9c:	6f 4f       	sbci	r22, 0xFF	; 255
    5c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca0:	43 a3       	std	Z+35, r20	; 0x23
    5ca2:	54 a3       	std	Z+36, r21	; 0x24
    5ca4:	65 a3       	std	Z+37, r22	; 0x25
    5ca6:	76 a3       	std	Z+38, r23	; 0x26
    5ca8:	0b c0       	rjmp	.+22     	; 0x5cc0 <xTaskGenericNotifyFromISR+0x8c>
    5caa:	43 a3       	std	Z+35, r20	; 0x23
    5cac:	54 a3       	std	Z+36, r21	; 0x24
    5cae:	65 a3       	std	Z+37, r22	; 0x25
    5cb0:	76 a3       	std	Z+38, r23	; 0x26
    5cb2:	06 c0       	rjmp	.+12     	; 0x5cc0 <xTaskGenericNotifyFromISR+0x8c>
    5cb4:	82 30       	cpi	r24, 0x02	; 2
    5cb6:	f1 f1       	breq	.+124    	; 0x5d34 <xTaskGenericNotifyFromISR+0x100>
    5cb8:	43 a3       	std	Z+35, r20	; 0x23
    5cba:	54 a3       	std	Z+36, r21	; 0x24
    5cbc:	65 a3       	std	Z+37, r22	; 0x25
    5cbe:	76 a3       	std	Z+38, r23	; 0x26
    5cc0:	81 30       	cpi	r24, 0x01	; 1
    5cc2:	d1 f5       	brne	.+116    	; 0x5d38 <xTaskGenericNotifyFromISR+0x104>
    5cc4:	ef 01       	movw	r28, r30
    5cc6:	80 91 69 1a 	lds	r24, 0x1A69	; 0x801a69 <uxSchedulerSuspended>
    5cca:	81 11       	cpse	r24, r1
    5ccc:	1d c0       	rjmp	.+58     	; 0x5d08 <xTaskGenericNotifyFromISR+0xd4>
    5cce:	8f 01       	movw	r16, r30
    5cd0:	0e 5f       	subi	r16, 0xFE	; 254
    5cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    5cd4:	c8 01       	movw	r24, r16
    5cd6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5cda:	8e 89       	ldd	r24, Y+22	; 0x16
    5cdc:	90 91 71 1a 	lds	r25, 0x1A71	; 0x801a71 <uxTopReadyPriority>
    5ce0:	98 17       	cp	r25, r24
    5ce2:	10 f4       	brcc	.+4      	; 0x5ce8 <xTaskGenericNotifyFromISR+0xb4>
    5ce4:	80 93 71 1a 	sts	0x1A71, r24	; 0x801a71 <uxTopReadyPriority>
    5ce8:	90 e0       	ldi	r25, 0x00	; 0
    5cea:	9c 01       	movw	r18, r24
    5cec:	22 0f       	add	r18, r18
    5cee:	33 1f       	adc	r19, r19
    5cf0:	22 0f       	add	r18, r18
    5cf2:	33 1f       	adc	r19, r19
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	82 0f       	add	r24, r18
    5cfa:	93 1f       	adc	r25, r19
    5cfc:	b8 01       	movw	r22, r16
    5cfe:	83 56       	subi	r24, 0x63	; 99
    5d00:	95 4e       	sbci	r25, 0xE5	; 229
    5d02:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5d06:	07 c0       	rjmp	.+14     	; 0x5d16 <xTaskGenericNotifyFromISR+0xe2>
    5d08:	bf 01       	movw	r22, r30
    5d0a:	64 5f       	subi	r22, 0xF4	; 244
    5d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0e:	8e e7       	ldi	r24, 0x7E	; 126
    5d10:	9a e1       	ldi	r25, 0x1A	; 26
    5d12:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5d16:	e0 91 d3 1a 	lds	r30, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5d1a:	f0 91 d4 1a 	lds	r31, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>
    5d1e:	9e 89       	ldd	r25, Y+22	; 0x16
    5d20:	86 89       	ldd	r24, Z+22	; 0x16
    5d22:	89 17       	cp	r24, r25
    5d24:	58 f4       	brcc	.+22     	; 0x5d3c <xTaskGenericNotifyFromISR+0x108>
    5d26:	e1 14       	cp	r14, r1
    5d28:	f1 04       	cpc	r15, r1
    5d2a:	51 f0       	breq	.+20     	; 0x5d40 <xTaskGenericNotifyFromISR+0x10c>
    5d2c:	81 e0       	ldi	r24, 0x01	; 1
    5d2e:	f7 01       	movw	r30, r14
    5d30:	80 83       	st	Z, r24
    5d32:	07 c0       	rjmp	.+14     	; 0x5d42 <xTaskGenericNotifyFromISR+0x10e>
    5d34:	80 e0       	ldi	r24, 0x00	; 0
    5d36:	05 c0       	rjmp	.+10     	; 0x5d42 <xTaskGenericNotifyFromISR+0x10e>
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	03 c0       	rjmp	.+6      	; 0x5d42 <xTaskGenericNotifyFromISR+0x10e>
    5d3c:	81 e0       	ldi	r24, 0x01	; 1
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <xTaskGenericNotifyFromISR+0x10e>
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	df 91       	pop	r29
    5d44:	cf 91       	pop	r28
    5d46:	1f 91       	pop	r17
    5d48:	0f 91       	pop	r16
    5d4a:	ff 90       	pop	r15
    5d4c:	ef 90       	pop	r14
    5d4e:	08 95       	ret

00005d50 <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5d50:	00 97       	sbiw	r24, 0x00	; 0
    5d52:	21 f4       	brne	.+8      	; 0x5d5c <xTaskNotifyStateClear+0xc>
    5d54:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <pxCurrentTCB>
    5d58:	90 91 d4 1a 	lds	r25, 0x1AD4	; 0x801ad4 <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5d5c:	0f b6       	in	r0, 0x3f	; 63
    5d5e:	f8 94       	cli
    5d60:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5d62:	fc 01       	movw	r30, r24
    5d64:	27 a1       	ldd	r18, Z+39	; 0x27
    5d66:	22 30       	cpi	r18, 0x02	; 2
    5d68:	19 f4       	brne	.+6      	; 0x5d70 <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5d6a:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	01 c0       	rjmp	.+2      	; 0x5d72 <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5d70:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5d72:	0f 90       	pop	r0
    5d74:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5d76:	08 95       	ret

00005d78 <ui8TWI_start>:
    data[(length-1)] = ui8TWI_read_nack();

    vTWI_stop();

    return 0;
}
    5d78:	ec eb       	ldi	r30, 0xBC	; 188
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	10 82       	st	Z, r1
    5d7e:	94 ea       	ldi	r25, 0xA4	; 164
    5d80:	90 83       	st	Z, r25
    5d82:	90 81       	ld	r25, Z
    5d84:	99 23       	and	r25, r25
    5d86:	ec f7       	brge	.-6      	; 0x5d82 <ui8TWI_start+0xa>
    5d88:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5d8c:	98 7f       	andi	r25, 0xF8	; 248
    5d8e:	98 30       	cpi	r25, 0x08	; 8
    5d90:	a1 f4       	brne	.+40     	; 0x5dba <ui8TWI_start+0x42>
    5d92:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5d96:	84 e8       	ldi	r24, 0x84	; 132
    5d98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5d9c:	ec eb       	ldi	r30, 0xBC	; 188
    5d9e:	f0 e0       	ldi	r31, 0x00	; 0
    5da0:	80 81       	ld	r24, Z
    5da2:	88 23       	and	r24, r24
    5da4:	ec f7       	brge	.-6      	; 0x5da0 <ui8TWI_start+0x28>
    5da6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5daa:	98 7f       	andi	r25, 0xF8	; 248
    5dac:	98 31       	cpi	r25, 0x18	; 24
    5dae:	39 f0       	breq	.+14     	; 0x5dbe <ui8TWI_start+0x46>
    5db0:	81 e0       	ldi	r24, 0x01	; 1
    5db2:	90 34       	cpi	r25, 0x40	; 64
    5db4:	29 f4       	brne	.+10     	; 0x5dc0 <ui8TWI_start+0x48>
    5db6:	80 e0       	ldi	r24, 0x00	; 0
    5db8:	08 95       	ret
    5dba:	81 e0       	ldi	r24, 0x01	; 1
    5dbc:	08 95       	ret
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	08 95       	ret

00005dc2 <ui8TWI_write>:
    5dc2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5dc6:	84 e8       	ldi	r24, 0x84	; 132
    5dc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5dcc:	ec eb       	ldi	r30, 0xBC	; 188
    5dce:	f0 e0       	ldi	r31, 0x00	; 0
    5dd0:	80 81       	ld	r24, Z
    5dd2:	88 23       	and	r24, r24
    5dd4:	ec f7       	brge	.-6      	; 0x5dd0 <ui8TWI_write+0xe>
    5dd6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5dda:	98 7f       	andi	r25, 0xF8	; 248
    5ddc:	81 e0       	ldi	r24, 0x01	; 1
    5dde:	98 32       	cpi	r25, 0x28	; 40
    5de0:	09 f4       	brne	.+2      	; 0x5de4 <ui8TWI_write+0x22>
    5de2:	80 e0       	ldi	r24, 0x00	; 0
    5de4:	08 95       	ret

00005de6 <ui8TWI_read_ack>:
    5de6:	84 ec       	ldi	r24, 0xC4	; 196
    5de8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5dec:	ec eb       	ldi	r30, 0xBC	; 188
    5dee:	f0 e0       	ldi	r31, 0x00	; 0
    5df0:	80 81       	ld	r24, Z
    5df2:	88 23       	and	r24, r24
    5df4:	ec f7       	brge	.-6      	; 0x5df0 <ui8TWI_read_ack+0xa>
    5df6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5dfa:	08 95       	ret

00005dfc <ui8TWI_read_nack>:
    5dfc:	84 e8       	ldi	r24, 0x84	; 132
    5dfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e02:	ec eb       	ldi	r30, 0xBC	; 188
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	80 81       	ld	r24, Z
    5e08:	88 23       	and	r24, r24
    5e0a:	ec f7       	brge	.-6      	; 0x5e06 <ui8TWI_read_nack+0xa>
    5e0c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5e10:	08 95       	ret

00005e12 <vTWI_stop>:

void vTWI_stop(void){
    // transmit STOP condition
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    5e12:	84 e9       	ldi	r24, 0x94	; 148
    5e14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e18:	08 95       	ret

00005e1a <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5e1a:	cf 93       	push	r28
    5e1c:	df 93       	push	r29
    5e1e:	00 d0       	rcall	.+0      	; 0x5e20 <vFrameReaderTask+0x6>
    5e20:	1f 92       	push	r1
    5e22:	cd b7       	in	r28, 0x3d	; 61
    5e24:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5e26:	59 dc       	rcall	.-1870   	; 0x56da <xTaskGetCurrentTaskHandle>
    5e28:	90 93 3c 1b 	sts	0x1B3C, r25	; 0x801b3c <frame_receiver+0x1>
    5e2c:	80 93 3b 1b 	sts	0x1B3B, r24	; 0x801b3b <frame_receiver>
	uint32_t notification_value = 0;
    5e30:	19 82       	std	Y+1, r1	; 0x01
    5e32:	1a 82       	std	Y+2, r1	; 0x02
    5e34:	1b 82       	std	Y+3, r1	; 0x03
    5e36:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5e38:	ee 24       	eor	r14, r14
    5e3a:	ea 94       	dec	r14
    5e3c:	fe 2c       	mov	r15, r14
    5e3e:	8e 01       	movw	r16, r28
    5e40:	0f 5f       	subi	r16, 0xFF	; 255
    5e42:	1f 4f       	sbci	r17, 0xFF	; 255
    5e44:	2f ef       	ldi	r18, 0xFF	; 255
    5e46:	3f ef       	ldi	r19, 0xFF	; 255
    5e48:	a9 01       	movw	r20, r18
    5e4a:	6f ef       	ldi	r22, 0xFF	; 255
    5e4c:	7f ef       	ldi	r23, 0xFF	; 255
    5e4e:	cb 01       	movw	r24, r22
    5e50:	a4 dd       	rcall	.-1208   	; 0x599a <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5e52:	e0 91 a0 1b 	lds	r30, 0x1BA0	; 0x801ba0 <receive_callback>
    5e56:	f0 91 a1 1b 	lds	r31, 0x1BA1	; 0x801ba1 <receive_callback+0x1>
    5e5a:	30 97       	sbiw	r30, 0x00	; 0
    5e5c:	69 f3       	breq	.-38     	; 0x5e38 <vFrameReaderTask+0x1e>
    5e5e:	69 81       	ldd	r22, Y+1	; 0x01
    5e60:	7a 81       	ldd	r23, Y+2	; 0x02
    5e62:	82 ea       	ldi	r24, 0xA2	; 162
    5e64:	9b e1       	ldi	r25, 0x1B	; 27
    5e66:	19 95       	eicall
    5e68:	e7 cf       	rjmp	.-50     	; 0x5e38 <vFrameReaderTask+0x1e>

00005e6a <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	c4 56       	subi	r28, 0x64	; 100
    5e74:	d1 09       	sbc	r29, r1
    5e76:	0f b6       	in	r0, 0x3f	; 63
    5e78:	f8 94       	cli
    5e7a:	de bf       	out	0x3e, r29	; 62
    5e7c:	0f be       	out	0x3f, r0	; 63
    5e7e:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5e80:	00 ed       	ldi	r16, 0xD0	; 208
    5e82:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5e84:	0f 2e       	mov	r0, r31
    5e86:	f6 ed       	ldi	r31, 0xD6	; 214
    5e88:	ef 2e       	mov	r14, r31
    5e8a:	f1 2c       	mov	r15, r1
    5e8c:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5e8e:	20 e0       	ldi	r18, 0x00	; 0
    5e90:	4f ef       	ldi	r20, 0xFF	; 255
    5e92:	5f ef       	ldi	r21, 0xFF	; 255
    5e94:	60 e0       	ldi	r22, 0x00	; 0
    5e96:	70 e0       	ldi	r23, 0x00	; 0
    5e98:	80 91 61 1b 	lds	r24, 0x1B61	; 0x801b61 <xUartMutex>
    5e9c:	90 91 62 1b 	lds	r25, 0x1B62	; 0x801b62 <xUartMutex+0x1>
    5ea0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5ea4:	24 e6       	ldi	r18, 0x64	; 100
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	40 e0       	ldi	r20, 0x00	; 0
    5eaa:	be 01       	movw	r22, r28
    5eac:	6f 5f       	subi	r22, 0xFF	; 255
    5eae:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb0:	86 e0       	ldi	r24, 0x06	; 6
    5eb2:	9c e1       	ldi	r25, 0x1C	; 28
    5eb4:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5eb8:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5eba:	60 e0       	ldi	r22, 0x00	; 0
    5ebc:	70 e0       	ldi	r23, 0x00	; 0
    5ebe:	80 91 61 1b 	lds	r24, 0x1B61	; 0x801b61 <xUartMutex>
    5ec2:	90 91 62 1b 	lds	r25, 0x1B62	; 0x801b62 <xUartMutex+0x1>
    5ec6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
		if(num>0) {
    5eca:	c1 14       	cp	r12, r1
    5ecc:	d1 04       	cpc	r13, r1
    5ece:	79 f0       	breq	.+30     	; 0x5eee <vUartSendTask+0x84>
    5ed0:	fe 01       	movw	r30, r28
    5ed2:	31 96       	adiw	r30, 0x01	; 1
    5ed4:	9f 01       	movw	r18, r30
    5ed6:	2c 0d       	add	r18, r12
    5ed8:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5eda:	d8 01       	movw	r26, r16
    5edc:	8c 91       	ld	r24, X
    5ede:	85 ff       	sbrs	r24, 5
    5ee0:	fc cf       	rjmp	.-8      	; 0x5eda <vUartSendTask+0x70>
				UDR2 = data[i];
    5ee2:	81 91       	ld	r24, Z+
    5ee4:	d7 01       	movw	r26, r14
    5ee6:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5ee8:	2e 17       	cp	r18, r30
    5eea:	3f 07       	cpc	r19, r31
    5eec:	b1 f7       	brne	.-20     	; 0x5eda <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5eee:	8a e0       	ldi	r24, 0x0A	; 10
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	0e 94 83 25 	call	0x4b06	; 0x4b06 <vTaskDelay>
	}
    5ef6:	cb cf       	rjmp	.-106    	; 0x5e8e <vUartSendTask+0x24>

00005ef8 <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5ef8:	af 92       	push	r10
    5efa:	bf 92       	push	r11
    5efc:	cf 92       	push	r12
    5efe:	df 92       	push	r13
    5f00:	ef 92       	push	r14
    5f02:	ff 92       	push	r15
    5f04:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5f06:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5f0a:	89 e1       	ldi	r24, 0x19	; 25
    5f0c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5f10:	80 ee       	ldi	r24, 0xE0	; 224
    5f12:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5f16:	88 e9       	ldi	r24, 0x98	; 152
    5f18:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5f1c:	e2 ed       	ldi	r30, 0xD2	; 210
    5f1e:	f0 e0       	ldi	r31, 0x00	; 0
    5f20:	86 e0       	ldi	r24, 0x06	; 6
    5f22:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5f24:	80 81       	ld	r24, Z
    5f26:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5f28:	84 e6       	ldi	r24, 0x64	; 100
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5f30:	44 e6       	ldi	r20, 0x64	; 100
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	bc 01       	movw	r22, r24
    5f36:	86 e0       	ldi	r24, 0x06	; 6
    5f38:	9c e1       	ldi	r25, 0x1C	; 28
    5f3a:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5f3e:	a1 2c       	mov	r10, r1
    5f40:	b1 2c       	mov	r11, r1
    5f42:	c1 2c       	mov	r12, r1
    5f44:	d1 2c       	mov	r13, r1
    5f46:	e1 2c       	mov	r14, r1
    5f48:	f1 2c       	mov	r15, r1
    5f4a:	04 e0       	ldi	r16, 0x04	; 4
    5f4c:	20 e0       	ldi	r18, 0x00	; 0
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	4c e2       	ldi	r20, 0x2C	; 44
    5f52:	51 e0       	ldi	r21, 0x01	; 1
    5f54:	61 e3       	ldi	r22, 0x31	; 49
    5f56:	77 e0       	ldi	r23, 0x07	; 7
    5f58:	8d e0       	ldi	r24, 0x0D	; 13
    5f5a:	9f e2       	ldi	r25, 0x2F	; 47
    5f5c:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5f60:	20 e0       	ldi	r18, 0x00	; 0
    5f62:	30 e0       	ldi	r19, 0x00	; 0
    5f64:	4c e2       	ldi	r20, 0x2C	; 44
    5f66:	51 e0       	ldi	r21, 0x01	; 1
    5f68:	6d e3       	ldi	r22, 0x3D	; 61
    5f6a:	77 e0       	ldi	r23, 0x07	; 7
    5f6c:	85 e3       	ldi	r24, 0x35	; 53
    5f6e:	9f e2       	ldi	r25, 0x2F	; 47
    5f70:	0e 94 cc 22 	call	0x4598	; 0x4598 <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	0e 94 b1 19 	call	0x3362	; 0x3362 <xQueueCreateMutex>
    5f7a:	90 93 62 1b 	sts	0x1B62, r25	; 0x801b62 <xUartMutex+0x1>
    5f7e:	80 93 61 1b 	sts	0x1B61, r24	; 0x801b61 <xUartMutex>
}
    5f82:	0f 91       	pop	r16
    5f84:	ff 90       	pop	r15
    5f86:	ef 90       	pop	r14
    5f88:	df 90       	pop	r13
    5f8a:	cf 90       	pop	r12
    5f8c:	bf 90       	pop	r11
    5f8e:	af 90       	pop	r10
    5f90:	08 95       	ret

00005f92 <vUSART_send>:

void vUSART_send(uint8_t *data, uint16_t len) {
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	cf 93       	push	r28
    5f98:	df 93       	push	r29
    5f9a:	ec 01       	movw	r28, r24
    5f9c:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5f9e:	20 e0       	ldi	r18, 0x00	; 0
    5fa0:	4f ef       	ldi	r20, 0xFF	; 255
    5fa2:	5f ef       	ldi	r21, 0xFF	; 255
    5fa4:	60 e0       	ldi	r22, 0x00	; 0
    5fa6:	70 e0       	ldi	r23, 0x00	; 0
    5fa8:	80 91 61 1b 	lds	r24, 0x1B61	; 0x801b61 <xUartMutex>
    5fac:	90 91 62 1b 	lds	r25, 0x1B62	; 0x801b62 <xUartMutex+0x1>
    5fb0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5fb4:	a8 01       	movw	r20, r16
    5fb6:	be 01       	movw	r22, r28
    5fb8:	86 e0       	ldi	r24, 0x06	; 6
    5fba:	9c e1       	ldi	r25, 0x1C	; 28
    5fbc:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5fc0:	60 e0       	ldi	r22, 0x00	; 0
    5fc2:	70 e0       	ldi	r23, 0x00	; 0
    5fc4:	80 91 61 1b 	lds	r24, 0x1B61	; 0x801b61 <xUartMutex>
    5fc8:	90 91 62 1b 	lds	r25, 0x1B62	; 0x801b62 <xUartMutex+0x1>
    5fcc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
}
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	1f 91       	pop	r17
    5fd6:	0f 91       	pop	r16
    5fd8:	08 95       	ret

00005fda <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    5fda:	90 93 a1 1b 	sts	0x1BA1, r25	; 0x801ba1 <receive_callback+0x1>
    5fde:	80 93 a0 1b 	sts	0x1BA0, r24	; 0x801ba0 <receive_callback>
    5fe2:	08 95       	ret

00005fe4 <__vector_51>:
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}


ISR(USART2_RX_vect){
    5fe4:	1f 92       	push	r1
    5fe6:	0f 92       	push	r0
    5fe8:	0f b6       	in	r0, 0x3f	; 63
    5fea:	0f 92       	push	r0
    5fec:	11 24       	eor	r1, r1
    5fee:	0b b6       	in	r0, 0x3b	; 59
    5ff0:	0f 92       	push	r0
    5ff2:	cf 92       	push	r12
    5ff4:	df 92       	push	r13
    5ff6:	ef 92       	push	r14
    5ff8:	ff 92       	push	r15
    5ffa:	0f 93       	push	r16
    5ffc:	1f 93       	push	r17
    5ffe:	2f 93       	push	r18
    6000:	3f 93       	push	r19
    6002:	4f 93       	push	r20
    6004:	5f 93       	push	r21
    6006:	6f 93       	push	r22
    6008:	7f 93       	push	r23
    600a:	8f 93       	push	r24
    600c:	9f 93       	push	r25
    600e:	af 93       	push	r26
    6010:	bf 93       	push	r27
    6012:	cf 93       	push	r28
    6014:	df 93       	push	r29
    6016:	ef 93       	push	r30
    6018:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    601a:	80 91 39 1b 	lds	r24, 0x1B39	; 0x801b39 <input_index.2398>
    601e:	90 91 3a 1b 	lds	r25, 0x1B3A	; 0x801b3a <input_index.2398+0x1>
    6022:	ec 01       	movw	r28, r24
    6024:	21 96       	adiw	r28, 0x01	; 1
    6026:	d0 93 3a 1b 	sts	0x1B3A, r29	; 0x801b3a <input_index.2398+0x1>
    602a:	c0 93 39 1b 	sts	0x1B39, r28	; 0x801b39 <input_index.2398>
    602e:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    6032:	fc 01       	movw	r30, r24
    6034:	eb 52       	subi	r30, 0x2B	; 43
    6036:	f5 4e       	sbci	r31, 0xE5	; 229
    6038:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    603a:	21 11       	cpse	r18, r1
    603c:	1d c0       	rjmp	.+58     	; 0x6078 <__vector_51+0x94>
		if(frame_receiver != NULL) {
    603e:	c0 90 3b 1b 	lds	r12, 0x1B3B	; 0x801b3b <frame_receiver>
    6042:	d0 90 3c 1b 	lds	r13, 0x1B3C	; 0x801b3c <frame_receiver+0x1>
    6046:	c1 14       	cp	r12, r1
    6048:	d1 04       	cpc	r13, r1
    604a:	89 f0       	breq	.+34     	; 0x606e <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    604c:	ae 01       	movw	r20, r28
    604e:	65 ed       	ldi	r22, 0xD5	; 213
    6050:	7a e1       	ldi	r23, 0x1A	; 26
    6052:	82 ea       	ldi	r24, 0xA2	; 162
    6054:	9b e1       	ldi	r25, 0x1B	; 27
    6056:	0e 94 56 38 	call	0x70ac	; 0x70ac <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    605a:	ae 01       	movw	r20, r28
    605c:	60 e0       	ldi	r22, 0x00	; 0
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	e1 2c       	mov	r14, r1
    6062:	f1 2c       	mov	r15, r1
    6064:	00 e0       	ldi	r16, 0x00	; 0
    6066:	10 e0       	ldi	r17, 0x00	; 0
    6068:	24 e0       	ldi	r18, 0x04	; 4
    606a:	c6 01       	movw	r24, r12
    606c:	e3 dd       	rcall	.-1082   	; 0x5c34 <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    606e:	10 92 3a 1b 	sts	0x1B3A, r1	; 0x801b3a <input_index.2398+0x1>
    6072:	10 92 39 1b 	sts	0x1B39, r1	; 0x801b39 <input_index.2398>
    6076:	07 c0       	rjmp	.+14     	; 0x6086 <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    6078:	c5 36       	cpi	r28, 0x65	; 101
    607a:	d1 05       	cpc	r29, r1
    607c:	20 f0       	brcs	.+8      	; 0x6086 <__vector_51+0xa2>
    607e:	10 92 3a 1b 	sts	0x1B3A, r1	; 0x801b3a <input_index.2398+0x1>
    6082:	10 92 39 1b 	sts	0x1B39, r1	; 0x801b39 <input_index.2398>
    6086:	ff 91       	pop	r31
    6088:	ef 91       	pop	r30
    608a:	df 91       	pop	r29
    608c:	cf 91       	pop	r28
    608e:	bf 91       	pop	r27
    6090:	af 91       	pop	r26
    6092:	9f 91       	pop	r25
    6094:	8f 91       	pop	r24
    6096:	7f 91       	pop	r23
    6098:	6f 91       	pop	r22
    609a:	5f 91       	pop	r21
    609c:	4f 91       	pop	r20
    609e:	3f 91       	pop	r19
    60a0:	2f 91       	pop	r18
    60a2:	1f 91       	pop	r17
    60a4:	0f 91       	pop	r16
    60a6:	ff 90       	pop	r15
    60a8:	ef 90       	pop	r14
    60aa:	df 90       	pop	r13
    60ac:	cf 90       	pop	r12
    60ae:	0f 90       	pop	r0
    60b0:	0b be       	out	0x3b, r0	; 59
    60b2:	0f 90       	pop	r0
    60b4:	0f be       	out	0x3f, r0	; 63
    60b6:	0f 90       	pop	r0
    60b8:	1f 90       	pop	r1
    60ba:	18 95       	reti

000060bc <__subsf3>:
    60bc:	50 58       	subi	r21, 0x80	; 128

000060be <__addsf3>:
    60be:	bb 27       	eor	r27, r27
    60c0:	aa 27       	eor	r26, r26
    60c2:	0e d0       	rcall	.+28     	; 0x60e0 <__addsf3x>
    60c4:	27 c2       	rjmp	.+1102   	; 0x6514 <__fp_round>
    60c6:	f0 d1       	rcall	.+992    	; 0x64a8 <__fp_pscA>
    60c8:	30 f0       	brcs	.+12     	; 0x60d6 <__addsf3+0x18>
    60ca:	f5 d1       	rcall	.+1002   	; 0x64b6 <__fp_pscB>
    60cc:	20 f0       	brcs	.+8      	; 0x60d6 <__addsf3+0x18>
    60ce:	31 f4       	brne	.+12     	; 0x60dc <__addsf3+0x1e>
    60d0:	9f 3f       	cpi	r25, 0xFF	; 255
    60d2:	11 f4       	brne	.+4      	; 0x60d8 <__addsf3+0x1a>
    60d4:	1e f4       	brtc	.+6      	; 0x60dc <__addsf3+0x1e>
    60d6:	c0 c1       	rjmp	.+896    	; 0x6458 <__fp_nan>
    60d8:	0e f4       	brtc	.+2      	; 0x60dc <__addsf3+0x1e>
    60da:	e0 95       	com	r30
    60dc:	e7 fb       	bst	r30, 7
    60de:	b6 c1       	rjmp	.+876    	; 0x644c <__fp_inf>

000060e0 <__addsf3x>:
    60e0:	e9 2f       	mov	r30, r25
    60e2:	3a d2       	rcall	.+1140   	; 0x6558 <__fp_split3>
    60e4:	80 f3       	brcs	.-32     	; 0x60c6 <__addsf3+0x8>
    60e6:	ba 17       	cp	r27, r26
    60e8:	62 07       	cpc	r22, r18
    60ea:	73 07       	cpc	r23, r19
    60ec:	84 07       	cpc	r24, r20
    60ee:	95 07       	cpc	r25, r21
    60f0:	18 f0       	brcs	.+6      	; 0x60f8 <__addsf3x+0x18>
    60f2:	71 f4       	brne	.+28     	; 0x6110 <__addsf3x+0x30>
    60f4:	9e f5       	brtc	.+102    	; 0x615c <__addsf3x+0x7c>
    60f6:	52 c2       	rjmp	.+1188   	; 0x659c <__fp_zero>
    60f8:	0e f4       	brtc	.+2      	; 0x60fc <__addsf3x+0x1c>
    60fa:	e0 95       	com	r30
    60fc:	0b 2e       	mov	r0, r27
    60fe:	ba 2f       	mov	r27, r26
    6100:	a0 2d       	mov	r26, r0
    6102:	0b 01       	movw	r0, r22
    6104:	b9 01       	movw	r22, r18
    6106:	90 01       	movw	r18, r0
    6108:	0c 01       	movw	r0, r24
    610a:	ca 01       	movw	r24, r20
    610c:	a0 01       	movw	r20, r0
    610e:	11 24       	eor	r1, r1
    6110:	ff 27       	eor	r31, r31
    6112:	59 1b       	sub	r21, r25
    6114:	99 f0       	breq	.+38     	; 0x613c <__addsf3x+0x5c>
    6116:	59 3f       	cpi	r21, 0xF9	; 249
    6118:	50 f4       	brcc	.+20     	; 0x612e <__addsf3x+0x4e>
    611a:	50 3e       	cpi	r21, 0xE0	; 224
    611c:	68 f1       	brcs	.+90     	; 0x6178 <__addsf3x+0x98>
    611e:	1a 16       	cp	r1, r26
    6120:	f0 40       	sbci	r31, 0x00	; 0
    6122:	a2 2f       	mov	r26, r18
    6124:	23 2f       	mov	r18, r19
    6126:	34 2f       	mov	r19, r20
    6128:	44 27       	eor	r20, r20
    612a:	58 5f       	subi	r21, 0xF8	; 248
    612c:	f3 cf       	rjmp	.-26     	; 0x6114 <__addsf3x+0x34>
    612e:	46 95       	lsr	r20
    6130:	37 95       	ror	r19
    6132:	27 95       	ror	r18
    6134:	a7 95       	ror	r26
    6136:	f0 40       	sbci	r31, 0x00	; 0
    6138:	53 95       	inc	r21
    613a:	c9 f7       	brne	.-14     	; 0x612e <__addsf3x+0x4e>
    613c:	7e f4       	brtc	.+30     	; 0x615c <__addsf3x+0x7c>
    613e:	1f 16       	cp	r1, r31
    6140:	ba 0b       	sbc	r27, r26
    6142:	62 0b       	sbc	r22, r18
    6144:	73 0b       	sbc	r23, r19
    6146:	84 0b       	sbc	r24, r20
    6148:	ba f0       	brmi	.+46     	; 0x6178 <__addsf3x+0x98>
    614a:	91 50       	subi	r25, 0x01	; 1
    614c:	a1 f0       	breq	.+40     	; 0x6176 <__addsf3x+0x96>
    614e:	ff 0f       	add	r31, r31
    6150:	bb 1f       	adc	r27, r27
    6152:	66 1f       	adc	r22, r22
    6154:	77 1f       	adc	r23, r23
    6156:	88 1f       	adc	r24, r24
    6158:	c2 f7       	brpl	.-16     	; 0x614a <__addsf3x+0x6a>
    615a:	0e c0       	rjmp	.+28     	; 0x6178 <__addsf3x+0x98>
    615c:	ba 0f       	add	r27, r26
    615e:	62 1f       	adc	r22, r18
    6160:	73 1f       	adc	r23, r19
    6162:	84 1f       	adc	r24, r20
    6164:	48 f4       	brcc	.+18     	; 0x6178 <__addsf3x+0x98>
    6166:	87 95       	ror	r24
    6168:	77 95       	ror	r23
    616a:	67 95       	ror	r22
    616c:	b7 95       	ror	r27
    616e:	f7 95       	ror	r31
    6170:	9e 3f       	cpi	r25, 0xFE	; 254
    6172:	08 f0       	brcs	.+2      	; 0x6176 <__addsf3x+0x96>
    6174:	b3 cf       	rjmp	.-154    	; 0x60dc <__addsf3+0x1e>
    6176:	93 95       	inc	r25
    6178:	88 0f       	add	r24, r24
    617a:	08 f0       	brcs	.+2      	; 0x617e <__addsf3x+0x9e>
    617c:	99 27       	eor	r25, r25
    617e:	ee 0f       	add	r30, r30
    6180:	97 95       	ror	r25
    6182:	87 95       	ror	r24
    6184:	08 95       	ret
    6186:	90 d1       	rcall	.+800    	; 0x64a8 <__fp_pscA>
    6188:	58 f0       	brcs	.+22     	; 0x61a0 <__addsf3x+0xc0>
    618a:	80 e8       	ldi	r24, 0x80	; 128
    618c:	91 e0       	ldi	r25, 0x01	; 1
    618e:	09 f4       	brne	.+2      	; 0x6192 <__addsf3x+0xb2>
    6190:	9e ef       	ldi	r25, 0xFE	; 254
    6192:	91 d1       	rcall	.+802    	; 0x64b6 <__fp_pscB>
    6194:	28 f0       	brcs	.+10     	; 0x61a0 <__addsf3x+0xc0>
    6196:	40 e8       	ldi	r20, 0x80	; 128
    6198:	51 e0       	ldi	r21, 0x01	; 1
    619a:	59 f4       	brne	.+22     	; 0x61b2 <atan2+0xe>
    619c:	5e ef       	ldi	r21, 0xFE	; 254
    619e:	09 c0       	rjmp	.+18     	; 0x61b2 <atan2+0xe>
    61a0:	5b c1       	rjmp	.+694    	; 0x6458 <__fp_nan>
    61a2:	fc c1       	rjmp	.+1016   	; 0x659c <__fp_zero>

000061a4 <atan2>:
    61a4:	e9 2f       	mov	r30, r25
    61a6:	e0 78       	andi	r30, 0x80	; 128
    61a8:	d7 d1       	rcall	.+942    	; 0x6558 <__fp_split3>
    61aa:	68 f3       	brcs	.-38     	; 0x6186 <__addsf3x+0xa6>
    61ac:	09 2e       	mov	r0, r25
    61ae:	05 2a       	or	r0, r21
    61b0:	c1 f3       	breq	.-16     	; 0x61a2 <__addsf3x+0xc2>
    61b2:	26 17       	cp	r18, r22
    61b4:	37 07       	cpc	r19, r23
    61b6:	48 07       	cpc	r20, r24
    61b8:	59 07       	cpc	r21, r25
    61ba:	38 f0       	brcs	.+14     	; 0x61ca <atan2+0x26>
    61bc:	0e 2e       	mov	r0, r30
    61be:	07 f8       	bld	r0, 7
    61c0:	e0 25       	eor	r30, r0
    61c2:	69 f0       	breq	.+26     	; 0x61de <atan2+0x3a>
    61c4:	e0 25       	eor	r30, r0
    61c6:	e0 64       	ori	r30, 0x40	; 64
    61c8:	0a c0       	rjmp	.+20     	; 0x61de <atan2+0x3a>
    61ca:	ef 63       	ori	r30, 0x3F	; 63
    61cc:	07 f8       	bld	r0, 7
    61ce:	00 94       	com	r0
    61d0:	07 fa       	bst	r0, 7
    61d2:	db 01       	movw	r26, r22
    61d4:	b9 01       	movw	r22, r18
    61d6:	9d 01       	movw	r18, r26
    61d8:	dc 01       	movw	r26, r24
    61da:	ca 01       	movw	r24, r20
    61dc:	ad 01       	movw	r20, r26
    61de:	ef 93       	push	r30
    61e0:	4a d0       	rcall	.+148    	; 0x6276 <__divsf3_pse>
    61e2:	98 d1       	rcall	.+816    	; 0x6514 <__fp_round>
    61e4:	0a d0       	rcall	.+20     	; 0x61fa <atan>
    61e6:	5f 91       	pop	r21
    61e8:	55 23       	and	r21, r21
    61ea:	31 f0       	breq	.+12     	; 0x61f8 <atan2+0x54>
    61ec:	2b ed       	ldi	r18, 0xDB	; 219
    61ee:	3f e0       	ldi	r19, 0x0F	; 15
    61f0:	49 e4       	ldi	r20, 0x49	; 73
    61f2:	50 fd       	sbrc	r21, 0
    61f4:	49 ec       	ldi	r20, 0xC9	; 201
    61f6:	63 cf       	rjmp	.-314    	; 0x60be <__addsf3>
    61f8:	08 95       	ret

000061fa <atan>:
    61fa:	df 93       	push	r29
    61fc:	dd 27       	eor	r29, r29
    61fe:	b9 2f       	mov	r27, r25
    6200:	bf 77       	andi	r27, 0x7F	; 127
    6202:	40 e8       	ldi	r20, 0x80	; 128
    6204:	5f e3       	ldi	r21, 0x3F	; 63
    6206:	16 16       	cp	r1, r22
    6208:	17 06       	cpc	r1, r23
    620a:	48 07       	cpc	r20, r24
    620c:	5b 07       	cpc	r21, r27
    620e:	10 f4       	brcc	.+4      	; 0x6214 <atan+0x1a>
    6210:	d9 2f       	mov	r29, r25
    6212:	cf d1       	rcall	.+926    	; 0x65b2 <inverse>
    6214:	9f 93       	push	r25
    6216:	8f 93       	push	r24
    6218:	7f 93       	push	r23
    621a:	6f 93       	push	r22
    621c:	7c d2       	rcall	.+1272   	; 0x6716 <square>
    621e:	e4 ee       	ldi	r30, 0xE4	; 228
    6220:	f0 e0       	ldi	r31, 0x00	; 0
    6222:	1d d1       	rcall	.+570    	; 0x645e <__fp_powser>
    6224:	77 d1       	rcall	.+750    	; 0x6514 <__fp_round>
    6226:	2f 91       	pop	r18
    6228:	3f 91       	pop	r19
    622a:	4f 91       	pop	r20
    622c:	5f 91       	pop	r21
    622e:	d4 d1       	rcall	.+936    	; 0x65d8 <__mulsf3x>
    6230:	dd 23       	and	r29, r29
    6232:	49 f0       	breq	.+18     	; 0x6246 <atan+0x4c>
    6234:	90 58       	subi	r25, 0x80	; 128
    6236:	a2 ea       	ldi	r26, 0xA2	; 162
    6238:	2a ed       	ldi	r18, 0xDA	; 218
    623a:	3f e0       	ldi	r19, 0x0F	; 15
    623c:	49 ec       	ldi	r20, 0xC9	; 201
    623e:	5f e3       	ldi	r21, 0x3F	; 63
    6240:	d0 78       	andi	r29, 0x80	; 128
    6242:	5d 27       	eor	r21, r29
    6244:	4d df       	rcall	.-358    	; 0x60e0 <__addsf3x>
    6246:	df 91       	pop	r29
    6248:	65 c1       	rjmp	.+714    	; 0x6514 <__fp_round>

0000624a <__cmpsf2>:
    624a:	dc d0       	rcall	.+440    	; 0x6404 <__fp_cmp>
    624c:	08 f4       	brcc	.+2      	; 0x6250 <__cmpsf2+0x6>
    624e:	81 e0       	ldi	r24, 0x01	; 1
    6250:	08 95       	ret

00006252 <cos>:
    6252:	39 d1       	rcall	.+626    	; 0x64c6 <__fp_rempio2>
    6254:	e3 95       	inc	r30
    6256:	6f c1       	rjmp	.+734    	; 0x6536 <__fp_sinus>

00006258 <__divsf3>:
    6258:	0c d0       	rcall	.+24     	; 0x6272 <__divsf3x>
    625a:	5c c1       	rjmp	.+696    	; 0x6514 <__fp_round>
    625c:	2c d1       	rcall	.+600    	; 0x64b6 <__fp_pscB>
    625e:	40 f0       	brcs	.+16     	; 0x6270 <__divsf3+0x18>
    6260:	23 d1       	rcall	.+582    	; 0x64a8 <__fp_pscA>
    6262:	30 f0       	brcs	.+12     	; 0x6270 <__divsf3+0x18>
    6264:	21 f4       	brne	.+8      	; 0x626e <__divsf3+0x16>
    6266:	5f 3f       	cpi	r21, 0xFF	; 255
    6268:	19 f0       	breq	.+6      	; 0x6270 <__divsf3+0x18>
    626a:	f0 c0       	rjmp	.+480    	; 0x644c <__fp_inf>
    626c:	51 11       	cpse	r21, r1
    626e:	97 c1       	rjmp	.+814    	; 0x659e <__fp_szero>
    6270:	f3 c0       	rjmp	.+486    	; 0x6458 <__fp_nan>

00006272 <__divsf3x>:
    6272:	72 d1       	rcall	.+740    	; 0x6558 <__fp_split3>
    6274:	98 f3       	brcs	.-26     	; 0x625c <__divsf3+0x4>

00006276 <__divsf3_pse>:
    6276:	99 23       	and	r25, r25
    6278:	c9 f3       	breq	.-14     	; 0x626c <__divsf3+0x14>
    627a:	55 23       	and	r21, r21
    627c:	b1 f3       	breq	.-20     	; 0x626a <__divsf3+0x12>
    627e:	95 1b       	sub	r25, r21
    6280:	55 0b       	sbc	r21, r21
    6282:	bb 27       	eor	r27, r27
    6284:	aa 27       	eor	r26, r26
    6286:	62 17       	cp	r22, r18
    6288:	73 07       	cpc	r23, r19
    628a:	84 07       	cpc	r24, r20
    628c:	38 f0       	brcs	.+14     	; 0x629c <__divsf3_pse+0x26>
    628e:	9f 5f       	subi	r25, 0xFF	; 255
    6290:	5f 4f       	sbci	r21, 0xFF	; 255
    6292:	22 0f       	add	r18, r18
    6294:	33 1f       	adc	r19, r19
    6296:	44 1f       	adc	r20, r20
    6298:	aa 1f       	adc	r26, r26
    629a:	a9 f3       	breq	.-22     	; 0x6286 <__divsf3_pse+0x10>
    629c:	33 d0       	rcall	.+102    	; 0x6304 <__divsf3_pse+0x8e>
    629e:	0e 2e       	mov	r0, r30
    62a0:	3a f0       	brmi	.+14     	; 0x62b0 <__divsf3_pse+0x3a>
    62a2:	e0 e8       	ldi	r30, 0x80	; 128
    62a4:	30 d0       	rcall	.+96     	; 0x6306 <__divsf3_pse+0x90>
    62a6:	91 50       	subi	r25, 0x01	; 1
    62a8:	50 40       	sbci	r21, 0x00	; 0
    62aa:	e6 95       	lsr	r30
    62ac:	00 1c       	adc	r0, r0
    62ae:	ca f7       	brpl	.-14     	; 0x62a2 <__divsf3_pse+0x2c>
    62b0:	29 d0       	rcall	.+82     	; 0x6304 <__divsf3_pse+0x8e>
    62b2:	fe 2f       	mov	r31, r30
    62b4:	27 d0       	rcall	.+78     	; 0x6304 <__divsf3_pse+0x8e>
    62b6:	66 0f       	add	r22, r22
    62b8:	77 1f       	adc	r23, r23
    62ba:	88 1f       	adc	r24, r24
    62bc:	bb 1f       	adc	r27, r27
    62be:	26 17       	cp	r18, r22
    62c0:	37 07       	cpc	r19, r23
    62c2:	48 07       	cpc	r20, r24
    62c4:	ab 07       	cpc	r26, r27
    62c6:	b0 e8       	ldi	r27, 0x80	; 128
    62c8:	09 f0       	breq	.+2      	; 0x62cc <__divsf3_pse+0x56>
    62ca:	bb 0b       	sbc	r27, r27
    62cc:	80 2d       	mov	r24, r0
    62ce:	bf 01       	movw	r22, r30
    62d0:	ff 27       	eor	r31, r31
    62d2:	93 58       	subi	r25, 0x83	; 131
    62d4:	5f 4f       	sbci	r21, 0xFF	; 255
    62d6:	2a f0       	brmi	.+10     	; 0x62e2 <__divsf3_pse+0x6c>
    62d8:	9e 3f       	cpi	r25, 0xFE	; 254
    62da:	51 05       	cpc	r21, r1
    62dc:	68 f0       	brcs	.+26     	; 0x62f8 <__divsf3_pse+0x82>
    62de:	b6 c0       	rjmp	.+364    	; 0x644c <__fp_inf>
    62e0:	5e c1       	rjmp	.+700    	; 0x659e <__fp_szero>
    62e2:	5f 3f       	cpi	r21, 0xFF	; 255
    62e4:	ec f3       	brlt	.-6      	; 0x62e0 <__divsf3_pse+0x6a>
    62e6:	98 3e       	cpi	r25, 0xE8	; 232
    62e8:	dc f3       	brlt	.-10     	; 0x62e0 <__divsf3_pse+0x6a>
    62ea:	86 95       	lsr	r24
    62ec:	77 95       	ror	r23
    62ee:	67 95       	ror	r22
    62f0:	b7 95       	ror	r27
    62f2:	f7 95       	ror	r31
    62f4:	9f 5f       	subi	r25, 0xFF	; 255
    62f6:	c9 f7       	brne	.-14     	; 0x62ea <__divsf3_pse+0x74>
    62f8:	88 0f       	add	r24, r24
    62fa:	91 1d       	adc	r25, r1
    62fc:	96 95       	lsr	r25
    62fe:	87 95       	ror	r24
    6300:	97 f9       	bld	r25, 7
    6302:	08 95       	ret
    6304:	e1 e0       	ldi	r30, 0x01	; 1
    6306:	66 0f       	add	r22, r22
    6308:	77 1f       	adc	r23, r23
    630a:	88 1f       	adc	r24, r24
    630c:	bb 1f       	adc	r27, r27
    630e:	62 17       	cp	r22, r18
    6310:	73 07       	cpc	r23, r19
    6312:	84 07       	cpc	r24, r20
    6314:	ba 07       	cpc	r27, r26
    6316:	20 f0       	brcs	.+8      	; 0x6320 <__divsf3_pse+0xaa>
    6318:	62 1b       	sub	r22, r18
    631a:	73 0b       	sbc	r23, r19
    631c:	84 0b       	sbc	r24, r20
    631e:	ba 0b       	sbc	r27, r26
    6320:	ee 1f       	adc	r30, r30
    6322:	88 f7       	brcc	.-30     	; 0x6306 <__divsf3_pse+0x90>
    6324:	e0 95       	com	r30
    6326:	08 95       	ret

00006328 <__fixsfsi>:
    6328:	04 d0       	rcall	.+8      	; 0x6332 <__fixunssfsi>
    632a:	68 94       	set
    632c:	b1 11       	cpse	r27, r1
    632e:	37 c1       	rjmp	.+622    	; 0x659e <__fp_szero>
    6330:	08 95       	ret

00006332 <__fixunssfsi>:
    6332:	1a d1       	rcall	.+564    	; 0x6568 <__fp_splitA>
    6334:	88 f0       	brcs	.+34     	; 0x6358 <__fixunssfsi+0x26>
    6336:	9f 57       	subi	r25, 0x7F	; 127
    6338:	90 f0       	brcs	.+36     	; 0x635e <__fixunssfsi+0x2c>
    633a:	b9 2f       	mov	r27, r25
    633c:	99 27       	eor	r25, r25
    633e:	b7 51       	subi	r27, 0x17	; 23
    6340:	a0 f0       	brcs	.+40     	; 0x636a <__fixunssfsi+0x38>
    6342:	d1 f0       	breq	.+52     	; 0x6378 <__fixunssfsi+0x46>
    6344:	66 0f       	add	r22, r22
    6346:	77 1f       	adc	r23, r23
    6348:	88 1f       	adc	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	1a f0       	brmi	.+6      	; 0x6354 <__fixunssfsi+0x22>
    634e:	ba 95       	dec	r27
    6350:	c9 f7       	brne	.-14     	; 0x6344 <__fixunssfsi+0x12>
    6352:	12 c0       	rjmp	.+36     	; 0x6378 <__fixunssfsi+0x46>
    6354:	b1 30       	cpi	r27, 0x01	; 1
    6356:	81 f0       	breq	.+32     	; 0x6378 <__fixunssfsi+0x46>
    6358:	21 d1       	rcall	.+578    	; 0x659c <__fp_zero>
    635a:	b1 e0       	ldi	r27, 0x01	; 1
    635c:	08 95       	ret
    635e:	1e c1       	rjmp	.+572    	; 0x659c <__fp_zero>
    6360:	67 2f       	mov	r22, r23
    6362:	78 2f       	mov	r23, r24
    6364:	88 27       	eor	r24, r24
    6366:	b8 5f       	subi	r27, 0xF8	; 248
    6368:	39 f0       	breq	.+14     	; 0x6378 <__fixunssfsi+0x46>
    636a:	b9 3f       	cpi	r27, 0xF9	; 249
    636c:	cc f3       	brlt	.-14     	; 0x6360 <__fixunssfsi+0x2e>
    636e:	86 95       	lsr	r24
    6370:	77 95       	ror	r23
    6372:	67 95       	ror	r22
    6374:	b3 95       	inc	r27
    6376:	d9 f7       	brne	.-10     	; 0x636e <__fixunssfsi+0x3c>
    6378:	3e f4       	brtc	.+14     	; 0x6388 <__fixunssfsi+0x56>
    637a:	90 95       	com	r25
    637c:	80 95       	com	r24
    637e:	70 95       	com	r23
    6380:	61 95       	neg	r22
    6382:	7f 4f       	sbci	r23, 0xFF	; 255
    6384:	8f 4f       	sbci	r24, 0xFF	; 255
    6386:	9f 4f       	sbci	r25, 0xFF	; 255
    6388:	08 95       	ret

0000638a <__floatunsisf>:
    638a:	e8 94       	clt
    638c:	09 c0       	rjmp	.+18     	; 0x63a0 <__floatsisf+0x12>

0000638e <__floatsisf>:
    638e:	97 fb       	bst	r25, 7
    6390:	3e f4       	brtc	.+14     	; 0x63a0 <__floatsisf+0x12>
    6392:	90 95       	com	r25
    6394:	80 95       	com	r24
    6396:	70 95       	com	r23
    6398:	61 95       	neg	r22
    639a:	7f 4f       	sbci	r23, 0xFF	; 255
    639c:	8f 4f       	sbci	r24, 0xFF	; 255
    639e:	9f 4f       	sbci	r25, 0xFF	; 255
    63a0:	99 23       	and	r25, r25
    63a2:	a9 f0       	breq	.+42     	; 0x63ce <__floatsisf+0x40>
    63a4:	f9 2f       	mov	r31, r25
    63a6:	96 e9       	ldi	r25, 0x96	; 150
    63a8:	bb 27       	eor	r27, r27
    63aa:	93 95       	inc	r25
    63ac:	f6 95       	lsr	r31
    63ae:	87 95       	ror	r24
    63b0:	77 95       	ror	r23
    63b2:	67 95       	ror	r22
    63b4:	b7 95       	ror	r27
    63b6:	f1 11       	cpse	r31, r1
    63b8:	f8 cf       	rjmp	.-16     	; 0x63aa <__floatsisf+0x1c>
    63ba:	fa f4       	brpl	.+62     	; 0x63fa <__floatsisf+0x6c>
    63bc:	bb 0f       	add	r27, r27
    63be:	11 f4       	brne	.+4      	; 0x63c4 <__floatsisf+0x36>
    63c0:	60 ff       	sbrs	r22, 0
    63c2:	1b c0       	rjmp	.+54     	; 0x63fa <__floatsisf+0x6c>
    63c4:	6f 5f       	subi	r22, 0xFF	; 255
    63c6:	7f 4f       	sbci	r23, 0xFF	; 255
    63c8:	8f 4f       	sbci	r24, 0xFF	; 255
    63ca:	9f 4f       	sbci	r25, 0xFF	; 255
    63cc:	16 c0       	rjmp	.+44     	; 0x63fa <__floatsisf+0x6c>
    63ce:	88 23       	and	r24, r24
    63d0:	11 f0       	breq	.+4      	; 0x63d6 <__floatsisf+0x48>
    63d2:	96 e9       	ldi	r25, 0x96	; 150
    63d4:	11 c0       	rjmp	.+34     	; 0x63f8 <__floatsisf+0x6a>
    63d6:	77 23       	and	r23, r23
    63d8:	21 f0       	breq	.+8      	; 0x63e2 <__floatsisf+0x54>
    63da:	9e e8       	ldi	r25, 0x8E	; 142
    63dc:	87 2f       	mov	r24, r23
    63de:	76 2f       	mov	r23, r22
    63e0:	05 c0       	rjmp	.+10     	; 0x63ec <__floatsisf+0x5e>
    63e2:	66 23       	and	r22, r22
    63e4:	71 f0       	breq	.+28     	; 0x6402 <__floatsisf+0x74>
    63e6:	96 e8       	ldi	r25, 0x86	; 134
    63e8:	86 2f       	mov	r24, r22
    63ea:	70 e0       	ldi	r23, 0x00	; 0
    63ec:	60 e0       	ldi	r22, 0x00	; 0
    63ee:	2a f0       	brmi	.+10     	; 0x63fa <__floatsisf+0x6c>
    63f0:	9a 95       	dec	r25
    63f2:	66 0f       	add	r22, r22
    63f4:	77 1f       	adc	r23, r23
    63f6:	88 1f       	adc	r24, r24
    63f8:	da f7       	brpl	.-10     	; 0x63f0 <__floatsisf+0x62>
    63fa:	88 0f       	add	r24, r24
    63fc:	96 95       	lsr	r25
    63fe:	87 95       	ror	r24
    6400:	97 f9       	bld	r25, 7
    6402:	08 95       	ret

00006404 <__fp_cmp>:
    6404:	99 0f       	add	r25, r25
    6406:	00 08       	sbc	r0, r0
    6408:	55 0f       	add	r21, r21
    640a:	aa 0b       	sbc	r26, r26
    640c:	e0 e8       	ldi	r30, 0x80	; 128
    640e:	fe ef       	ldi	r31, 0xFE	; 254
    6410:	16 16       	cp	r1, r22
    6412:	17 06       	cpc	r1, r23
    6414:	e8 07       	cpc	r30, r24
    6416:	f9 07       	cpc	r31, r25
    6418:	c0 f0       	brcs	.+48     	; 0x644a <__fp_cmp+0x46>
    641a:	12 16       	cp	r1, r18
    641c:	13 06       	cpc	r1, r19
    641e:	e4 07       	cpc	r30, r20
    6420:	f5 07       	cpc	r31, r21
    6422:	98 f0       	brcs	.+38     	; 0x644a <__fp_cmp+0x46>
    6424:	62 1b       	sub	r22, r18
    6426:	73 0b       	sbc	r23, r19
    6428:	84 0b       	sbc	r24, r20
    642a:	95 0b       	sbc	r25, r21
    642c:	39 f4       	brne	.+14     	; 0x643c <__fp_cmp+0x38>
    642e:	0a 26       	eor	r0, r26
    6430:	61 f0       	breq	.+24     	; 0x644a <__fp_cmp+0x46>
    6432:	23 2b       	or	r18, r19
    6434:	24 2b       	or	r18, r20
    6436:	25 2b       	or	r18, r21
    6438:	21 f4       	brne	.+8      	; 0x6442 <__fp_cmp+0x3e>
    643a:	08 95       	ret
    643c:	0a 26       	eor	r0, r26
    643e:	09 f4       	brne	.+2      	; 0x6442 <__fp_cmp+0x3e>
    6440:	a1 40       	sbci	r26, 0x01	; 1
    6442:	a6 95       	lsr	r26
    6444:	8f ef       	ldi	r24, 0xFF	; 255
    6446:	81 1d       	adc	r24, r1
    6448:	81 1d       	adc	r24, r1
    644a:	08 95       	ret

0000644c <__fp_inf>:
    644c:	97 f9       	bld	r25, 7
    644e:	9f 67       	ori	r25, 0x7F	; 127
    6450:	80 e8       	ldi	r24, 0x80	; 128
    6452:	70 e0       	ldi	r23, 0x00	; 0
    6454:	60 e0       	ldi	r22, 0x00	; 0
    6456:	08 95       	ret

00006458 <__fp_nan>:
    6458:	9f ef       	ldi	r25, 0xFF	; 255
    645a:	80 ec       	ldi	r24, 0xC0	; 192
    645c:	08 95       	ret

0000645e <__fp_powser>:
    645e:	df 93       	push	r29
    6460:	cf 93       	push	r28
    6462:	1f 93       	push	r17
    6464:	0f 93       	push	r16
    6466:	ff 92       	push	r15
    6468:	ef 92       	push	r14
    646a:	df 92       	push	r13
    646c:	7b 01       	movw	r14, r22
    646e:	8c 01       	movw	r16, r24
    6470:	68 94       	set
    6472:	05 c0       	rjmp	.+10     	; 0x647e <__fp_powser+0x20>
    6474:	da 2e       	mov	r13, r26
    6476:	ef 01       	movw	r28, r30
    6478:	af d0       	rcall	.+350    	; 0x65d8 <__mulsf3x>
    647a:	fe 01       	movw	r30, r28
    647c:	e8 94       	clt
    647e:	a5 91       	lpm	r26, Z+
    6480:	25 91       	lpm	r18, Z+
    6482:	35 91       	lpm	r19, Z+
    6484:	45 91       	lpm	r20, Z+
    6486:	55 91       	lpm	r21, Z+
    6488:	ae f3       	brts	.-22     	; 0x6474 <__fp_powser+0x16>
    648a:	ef 01       	movw	r28, r30
    648c:	29 de       	rcall	.-942    	; 0x60e0 <__addsf3x>
    648e:	fe 01       	movw	r30, r28
    6490:	97 01       	movw	r18, r14
    6492:	a8 01       	movw	r20, r16
    6494:	da 94       	dec	r13
    6496:	79 f7       	brne	.-34     	; 0x6476 <__fp_powser+0x18>
    6498:	df 90       	pop	r13
    649a:	ef 90       	pop	r14
    649c:	ff 90       	pop	r15
    649e:	0f 91       	pop	r16
    64a0:	1f 91       	pop	r17
    64a2:	cf 91       	pop	r28
    64a4:	df 91       	pop	r29
    64a6:	08 95       	ret

000064a8 <__fp_pscA>:
    64a8:	00 24       	eor	r0, r0
    64aa:	0a 94       	dec	r0
    64ac:	16 16       	cp	r1, r22
    64ae:	17 06       	cpc	r1, r23
    64b0:	18 06       	cpc	r1, r24
    64b2:	09 06       	cpc	r0, r25
    64b4:	08 95       	ret

000064b6 <__fp_pscB>:
    64b6:	00 24       	eor	r0, r0
    64b8:	0a 94       	dec	r0
    64ba:	12 16       	cp	r1, r18
    64bc:	13 06       	cpc	r1, r19
    64be:	14 06       	cpc	r1, r20
    64c0:	05 06       	cpc	r0, r21
    64c2:	08 95       	ret
    64c4:	c9 cf       	rjmp	.-110    	; 0x6458 <__fp_nan>

000064c6 <__fp_rempio2>:
    64c6:	50 d0       	rcall	.+160    	; 0x6568 <__fp_splitA>
    64c8:	e8 f3       	brcs	.-6      	; 0x64c4 <__fp_pscB+0xe>
    64ca:	e8 94       	clt
    64cc:	e0 e0       	ldi	r30, 0x00	; 0
    64ce:	bb 27       	eor	r27, r27
    64d0:	9f 57       	subi	r25, 0x7F	; 127
    64d2:	f0 f0       	brcs	.+60     	; 0x6510 <__fp_rempio2+0x4a>
    64d4:	2a ed       	ldi	r18, 0xDA	; 218
    64d6:	3f e0       	ldi	r19, 0x0F	; 15
    64d8:	49 ec       	ldi	r20, 0xC9	; 201
    64da:	06 c0       	rjmp	.+12     	; 0x64e8 <__fp_rempio2+0x22>
    64dc:	ee 0f       	add	r30, r30
    64de:	bb 0f       	add	r27, r27
    64e0:	66 1f       	adc	r22, r22
    64e2:	77 1f       	adc	r23, r23
    64e4:	88 1f       	adc	r24, r24
    64e6:	28 f0       	brcs	.+10     	; 0x64f2 <__fp_rempio2+0x2c>
    64e8:	b2 3a       	cpi	r27, 0xA2	; 162
    64ea:	62 07       	cpc	r22, r18
    64ec:	73 07       	cpc	r23, r19
    64ee:	84 07       	cpc	r24, r20
    64f0:	28 f0       	brcs	.+10     	; 0x64fc <__fp_rempio2+0x36>
    64f2:	b2 5a       	subi	r27, 0xA2	; 162
    64f4:	62 0b       	sbc	r22, r18
    64f6:	73 0b       	sbc	r23, r19
    64f8:	84 0b       	sbc	r24, r20
    64fa:	e3 95       	inc	r30
    64fc:	9a 95       	dec	r25
    64fe:	72 f7       	brpl	.-36     	; 0x64dc <__fp_rempio2+0x16>
    6500:	80 38       	cpi	r24, 0x80	; 128
    6502:	30 f4       	brcc	.+12     	; 0x6510 <__fp_rempio2+0x4a>
    6504:	9a 95       	dec	r25
    6506:	bb 0f       	add	r27, r27
    6508:	66 1f       	adc	r22, r22
    650a:	77 1f       	adc	r23, r23
    650c:	88 1f       	adc	r24, r24
    650e:	d2 f7       	brpl	.-12     	; 0x6504 <__fp_rempio2+0x3e>
    6510:	90 48       	sbci	r25, 0x80	; 128
    6512:	06 c1       	rjmp	.+524    	; 0x6720 <__fp_mpack_finite>

00006514 <__fp_round>:
    6514:	09 2e       	mov	r0, r25
    6516:	03 94       	inc	r0
    6518:	00 0c       	add	r0, r0
    651a:	11 f4       	brne	.+4      	; 0x6520 <__fp_round+0xc>
    651c:	88 23       	and	r24, r24
    651e:	52 f0       	brmi	.+20     	; 0x6534 <__fp_round+0x20>
    6520:	bb 0f       	add	r27, r27
    6522:	40 f4       	brcc	.+16     	; 0x6534 <__fp_round+0x20>
    6524:	bf 2b       	or	r27, r31
    6526:	11 f4       	brne	.+4      	; 0x652c <__fp_round+0x18>
    6528:	60 ff       	sbrs	r22, 0
    652a:	04 c0       	rjmp	.+8      	; 0x6534 <__fp_round+0x20>
    652c:	6f 5f       	subi	r22, 0xFF	; 255
    652e:	7f 4f       	sbci	r23, 0xFF	; 255
    6530:	8f 4f       	sbci	r24, 0xFF	; 255
    6532:	9f 4f       	sbci	r25, 0xFF	; 255
    6534:	08 95       	ret

00006536 <__fp_sinus>:
    6536:	ef 93       	push	r30
    6538:	e0 ff       	sbrs	r30, 0
    653a:	06 c0       	rjmp	.+12     	; 0x6548 <__fp_sinus+0x12>
    653c:	a2 ea       	ldi	r26, 0xA2	; 162
    653e:	2a ed       	ldi	r18, 0xDA	; 218
    6540:	3f e0       	ldi	r19, 0x0F	; 15
    6542:	49 ec       	ldi	r20, 0xC9	; 201
    6544:	5f eb       	ldi	r21, 0xBF	; 191
    6546:	cc dd       	rcall	.-1128   	; 0x60e0 <__addsf3x>
    6548:	e5 df       	rcall	.-54     	; 0x6514 <__fp_round>
    654a:	0f 90       	pop	r0
    654c:	03 94       	inc	r0
    654e:	01 fc       	sbrc	r0, 1
    6550:	90 58       	subi	r25, 0x80	; 128
    6552:	e1 e1       	ldi	r30, 0x11	; 17
    6554:	f1 e0       	ldi	r31, 0x01	; 1
    6556:	f7 c0       	rjmp	.+494    	; 0x6746 <__fp_powsodd>

00006558 <__fp_split3>:
    6558:	57 fd       	sbrc	r21, 7
    655a:	90 58       	subi	r25, 0x80	; 128
    655c:	44 0f       	add	r20, r20
    655e:	55 1f       	adc	r21, r21
    6560:	59 f0       	breq	.+22     	; 0x6578 <__fp_splitA+0x10>
    6562:	5f 3f       	cpi	r21, 0xFF	; 255
    6564:	71 f0       	breq	.+28     	; 0x6582 <__fp_splitA+0x1a>
    6566:	47 95       	ror	r20

00006568 <__fp_splitA>:
    6568:	88 0f       	add	r24, r24
    656a:	97 fb       	bst	r25, 7
    656c:	99 1f       	adc	r25, r25
    656e:	61 f0       	breq	.+24     	; 0x6588 <__fp_splitA+0x20>
    6570:	9f 3f       	cpi	r25, 0xFF	; 255
    6572:	79 f0       	breq	.+30     	; 0x6592 <__fp_splitA+0x2a>
    6574:	87 95       	ror	r24
    6576:	08 95       	ret
    6578:	12 16       	cp	r1, r18
    657a:	13 06       	cpc	r1, r19
    657c:	14 06       	cpc	r1, r20
    657e:	55 1f       	adc	r21, r21
    6580:	f2 cf       	rjmp	.-28     	; 0x6566 <__fp_split3+0xe>
    6582:	46 95       	lsr	r20
    6584:	f1 df       	rcall	.-30     	; 0x6568 <__fp_splitA>
    6586:	08 c0       	rjmp	.+16     	; 0x6598 <__fp_splitA+0x30>
    6588:	16 16       	cp	r1, r22
    658a:	17 06       	cpc	r1, r23
    658c:	18 06       	cpc	r1, r24
    658e:	99 1f       	adc	r25, r25
    6590:	f1 cf       	rjmp	.-30     	; 0x6574 <__fp_splitA+0xc>
    6592:	86 95       	lsr	r24
    6594:	71 05       	cpc	r23, r1
    6596:	61 05       	cpc	r22, r1
    6598:	08 94       	sec
    659a:	08 95       	ret

0000659c <__fp_zero>:
    659c:	e8 94       	clt

0000659e <__fp_szero>:
    659e:	bb 27       	eor	r27, r27
    65a0:	66 27       	eor	r22, r22
    65a2:	77 27       	eor	r23, r23
    65a4:	cb 01       	movw	r24, r22
    65a6:	97 f9       	bld	r25, 7
    65a8:	08 95       	ret

000065aa <__gesf2>:
    65aa:	2c df       	rcall	.-424    	; 0x6404 <__fp_cmp>
    65ac:	08 f4       	brcc	.+2      	; 0x65b0 <__gesf2+0x6>
    65ae:	8f ef       	ldi	r24, 0xFF	; 255
    65b0:	08 95       	ret

000065b2 <inverse>:
    65b2:	9b 01       	movw	r18, r22
    65b4:	ac 01       	movw	r20, r24
    65b6:	60 e0       	ldi	r22, 0x00	; 0
    65b8:	70 e0       	ldi	r23, 0x00	; 0
    65ba:	80 e8       	ldi	r24, 0x80	; 128
    65bc:	9f e3       	ldi	r25, 0x3F	; 63
    65be:	4c ce       	rjmp	.-872    	; 0x6258 <__divsf3>

000065c0 <__mulsf3>:
    65c0:	0b d0       	rcall	.+22     	; 0x65d8 <__mulsf3x>
    65c2:	a8 cf       	rjmp	.-176    	; 0x6514 <__fp_round>
    65c4:	71 df       	rcall	.-286    	; 0x64a8 <__fp_pscA>
    65c6:	28 f0       	brcs	.+10     	; 0x65d2 <__mulsf3+0x12>
    65c8:	76 df       	rcall	.-276    	; 0x64b6 <__fp_pscB>
    65ca:	18 f0       	brcs	.+6      	; 0x65d2 <__mulsf3+0x12>
    65cc:	95 23       	and	r25, r21
    65ce:	09 f0       	breq	.+2      	; 0x65d2 <__mulsf3+0x12>
    65d0:	3d cf       	rjmp	.-390    	; 0x644c <__fp_inf>
    65d2:	42 cf       	rjmp	.-380    	; 0x6458 <__fp_nan>
    65d4:	11 24       	eor	r1, r1
    65d6:	e3 cf       	rjmp	.-58     	; 0x659e <__fp_szero>

000065d8 <__mulsf3x>:
    65d8:	bf df       	rcall	.-130    	; 0x6558 <__fp_split3>
    65da:	a0 f3       	brcs	.-24     	; 0x65c4 <__mulsf3+0x4>

000065dc <__mulsf3_pse>:
    65dc:	95 9f       	mul	r25, r21
    65de:	d1 f3       	breq	.-12     	; 0x65d4 <__mulsf3+0x14>
    65e0:	95 0f       	add	r25, r21
    65e2:	50 e0       	ldi	r21, 0x00	; 0
    65e4:	55 1f       	adc	r21, r21
    65e6:	62 9f       	mul	r22, r18
    65e8:	f0 01       	movw	r30, r0
    65ea:	72 9f       	mul	r23, r18
    65ec:	bb 27       	eor	r27, r27
    65ee:	f0 0d       	add	r31, r0
    65f0:	b1 1d       	adc	r27, r1
    65f2:	63 9f       	mul	r22, r19
    65f4:	aa 27       	eor	r26, r26
    65f6:	f0 0d       	add	r31, r0
    65f8:	b1 1d       	adc	r27, r1
    65fa:	aa 1f       	adc	r26, r26
    65fc:	64 9f       	mul	r22, r20
    65fe:	66 27       	eor	r22, r22
    6600:	b0 0d       	add	r27, r0
    6602:	a1 1d       	adc	r26, r1
    6604:	66 1f       	adc	r22, r22
    6606:	82 9f       	mul	r24, r18
    6608:	22 27       	eor	r18, r18
    660a:	b0 0d       	add	r27, r0
    660c:	a1 1d       	adc	r26, r1
    660e:	62 1f       	adc	r22, r18
    6610:	73 9f       	mul	r23, r19
    6612:	b0 0d       	add	r27, r0
    6614:	a1 1d       	adc	r26, r1
    6616:	62 1f       	adc	r22, r18
    6618:	83 9f       	mul	r24, r19
    661a:	a0 0d       	add	r26, r0
    661c:	61 1d       	adc	r22, r1
    661e:	22 1f       	adc	r18, r18
    6620:	74 9f       	mul	r23, r20
    6622:	33 27       	eor	r19, r19
    6624:	a0 0d       	add	r26, r0
    6626:	61 1d       	adc	r22, r1
    6628:	23 1f       	adc	r18, r19
    662a:	84 9f       	mul	r24, r20
    662c:	60 0d       	add	r22, r0
    662e:	21 1d       	adc	r18, r1
    6630:	82 2f       	mov	r24, r18
    6632:	76 2f       	mov	r23, r22
    6634:	6a 2f       	mov	r22, r26
    6636:	11 24       	eor	r1, r1
    6638:	9f 57       	subi	r25, 0x7F	; 127
    663a:	50 40       	sbci	r21, 0x00	; 0
    663c:	8a f0       	brmi	.+34     	; 0x6660 <__mulsf3_pse+0x84>
    663e:	e1 f0       	breq	.+56     	; 0x6678 <__mulsf3_pse+0x9c>
    6640:	88 23       	and	r24, r24
    6642:	4a f0       	brmi	.+18     	; 0x6656 <__mulsf3_pse+0x7a>
    6644:	ee 0f       	add	r30, r30
    6646:	ff 1f       	adc	r31, r31
    6648:	bb 1f       	adc	r27, r27
    664a:	66 1f       	adc	r22, r22
    664c:	77 1f       	adc	r23, r23
    664e:	88 1f       	adc	r24, r24
    6650:	91 50       	subi	r25, 0x01	; 1
    6652:	50 40       	sbci	r21, 0x00	; 0
    6654:	a9 f7       	brne	.-22     	; 0x6640 <__mulsf3_pse+0x64>
    6656:	9e 3f       	cpi	r25, 0xFE	; 254
    6658:	51 05       	cpc	r21, r1
    665a:	70 f0       	brcs	.+28     	; 0x6678 <__mulsf3_pse+0x9c>
    665c:	f7 ce       	rjmp	.-530    	; 0x644c <__fp_inf>
    665e:	9f cf       	rjmp	.-194    	; 0x659e <__fp_szero>
    6660:	5f 3f       	cpi	r21, 0xFF	; 255
    6662:	ec f3       	brlt	.-6      	; 0x665e <__mulsf3_pse+0x82>
    6664:	98 3e       	cpi	r25, 0xE8	; 232
    6666:	dc f3       	brlt	.-10     	; 0x665e <__mulsf3_pse+0x82>
    6668:	86 95       	lsr	r24
    666a:	77 95       	ror	r23
    666c:	67 95       	ror	r22
    666e:	b7 95       	ror	r27
    6670:	f7 95       	ror	r31
    6672:	e7 95       	ror	r30
    6674:	9f 5f       	subi	r25, 0xFF	; 255
    6676:	c1 f7       	brne	.-16     	; 0x6668 <__mulsf3_pse+0x8c>
    6678:	fe 2b       	or	r31, r30
    667a:	88 0f       	add	r24, r24
    667c:	91 1d       	adc	r25, r1
    667e:	96 95       	lsr	r25
    6680:	87 95       	ror	r24
    6682:	97 f9       	bld	r25, 7
    6684:	08 95       	ret

00006686 <sin>:
    6686:	9f 93       	push	r25
    6688:	1e df       	rcall	.-452    	; 0x64c6 <__fp_rempio2>
    668a:	0f 90       	pop	r0
    668c:	07 fc       	sbrc	r0, 7
    668e:	ee 5f       	subi	r30, 0xFE	; 254
    6690:	52 cf       	rjmp	.-348    	; 0x6536 <__fp_sinus>
    6692:	11 f4       	brne	.+4      	; 0x6698 <sin+0x12>
    6694:	0e f4       	brtc	.+2      	; 0x6698 <sin+0x12>
    6696:	e0 ce       	rjmp	.-576    	; 0x6458 <__fp_nan>
    6698:	41 c0       	rjmp	.+130    	; 0x671c <__fp_mpack>

0000669a <sqrt>:
    669a:	66 df       	rcall	.-308    	; 0x6568 <__fp_splitA>
    669c:	d0 f3       	brcs	.-12     	; 0x6692 <sin+0xc>
    669e:	99 23       	and	r25, r25
    66a0:	d9 f3       	breq	.-10     	; 0x6698 <sin+0x12>
    66a2:	ce f3       	brts	.-14     	; 0x6696 <sin+0x10>
    66a4:	9f 57       	subi	r25, 0x7F	; 127
    66a6:	55 0b       	sbc	r21, r21
    66a8:	87 ff       	sbrs	r24, 7
    66aa:	46 d0       	rcall	.+140    	; 0x6738 <__fp_norm2>
    66ac:	00 24       	eor	r0, r0
    66ae:	a0 e6       	ldi	r26, 0x60	; 96
    66b0:	40 ea       	ldi	r20, 0xA0	; 160
    66b2:	90 01       	movw	r18, r0
    66b4:	80 58       	subi	r24, 0x80	; 128
    66b6:	56 95       	lsr	r21
    66b8:	97 95       	ror	r25
    66ba:	28 f4       	brcc	.+10     	; 0x66c6 <sqrt+0x2c>
    66bc:	80 5c       	subi	r24, 0xC0	; 192
    66be:	66 0f       	add	r22, r22
    66c0:	77 1f       	adc	r23, r23
    66c2:	88 1f       	adc	r24, r24
    66c4:	20 f0       	brcs	.+8      	; 0x66ce <sqrt+0x34>
    66c6:	26 17       	cp	r18, r22
    66c8:	37 07       	cpc	r19, r23
    66ca:	48 07       	cpc	r20, r24
    66cc:	30 f4       	brcc	.+12     	; 0x66da <sqrt+0x40>
    66ce:	62 1b       	sub	r22, r18
    66d0:	73 0b       	sbc	r23, r19
    66d2:	84 0b       	sbc	r24, r20
    66d4:	20 29       	or	r18, r0
    66d6:	31 29       	or	r19, r1
    66d8:	4a 2b       	or	r20, r26
    66da:	a6 95       	lsr	r26
    66dc:	17 94       	ror	r1
    66de:	07 94       	ror	r0
    66e0:	20 25       	eor	r18, r0
    66e2:	31 25       	eor	r19, r1
    66e4:	4a 27       	eor	r20, r26
    66e6:	58 f7       	brcc	.-42     	; 0x66be <sqrt+0x24>
    66e8:	66 0f       	add	r22, r22
    66ea:	77 1f       	adc	r23, r23
    66ec:	88 1f       	adc	r24, r24
    66ee:	20 f0       	brcs	.+8      	; 0x66f8 <sqrt+0x5e>
    66f0:	26 17       	cp	r18, r22
    66f2:	37 07       	cpc	r19, r23
    66f4:	48 07       	cpc	r20, r24
    66f6:	30 f4       	brcc	.+12     	; 0x6704 <sqrt+0x6a>
    66f8:	62 0b       	sbc	r22, r18
    66fa:	73 0b       	sbc	r23, r19
    66fc:	84 0b       	sbc	r24, r20
    66fe:	20 0d       	add	r18, r0
    6700:	31 1d       	adc	r19, r1
    6702:	41 1d       	adc	r20, r1
    6704:	a0 95       	com	r26
    6706:	81 f7       	brne	.-32     	; 0x66e8 <sqrt+0x4e>
    6708:	b9 01       	movw	r22, r18
    670a:	84 2f       	mov	r24, r20
    670c:	91 58       	subi	r25, 0x81	; 129
    670e:	88 0f       	add	r24, r24
    6710:	96 95       	lsr	r25
    6712:	87 95       	ror	r24
    6714:	08 95       	ret

00006716 <square>:
    6716:	9b 01       	movw	r18, r22
    6718:	ac 01       	movw	r20, r24
    671a:	52 cf       	rjmp	.-348    	; 0x65c0 <__mulsf3>

0000671c <__fp_mpack>:
    671c:	9f 3f       	cpi	r25, 0xFF	; 255
    671e:	31 f0       	breq	.+12     	; 0x672c <__fp_mpack_finite+0xc>

00006720 <__fp_mpack_finite>:
    6720:	91 50       	subi	r25, 0x01	; 1
    6722:	20 f4       	brcc	.+8      	; 0x672c <__fp_mpack_finite+0xc>
    6724:	87 95       	ror	r24
    6726:	77 95       	ror	r23
    6728:	67 95       	ror	r22
    672a:	b7 95       	ror	r27
    672c:	88 0f       	add	r24, r24
    672e:	91 1d       	adc	r25, r1
    6730:	96 95       	lsr	r25
    6732:	87 95       	ror	r24
    6734:	97 f9       	bld	r25, 7
    6736:	08 95       	ret

00006738 <__fp_norm2>:
    6738:	91 50       	subi	r25, 0x01	; 1
    673a:	50 40       	sbci	r21, 0x00	; 0
    673c:	66 0f       	add	r22, r22
    673e:	77 1f       	adc	r23, r23
    6740:	88 1f       	adc	r24, r24
    6742:	d2 f7       	brpl	.-12     	; 0x6738 <__fp_norm2>
    6744:	08 95       	ret

00006746 <__fp_powsodd>:
    6746:	9f 93       	push	r25
    6748:	8f 93       	push	r24
    674a:	7f 93       	push	r23
    674c:	6f 93       	push	r22
    674e:	ff 93       	push	r31
    6750:	ef 93       	push	r30
    6752:	9b 01       	movw	r18, r22
    6754:	ac 01       	movw	r20, r24
    6756:	34 df       	rcall	.-408    	; 0x65c0 <__mulsf3>
    6758:	ef 91       	pop	r30
    675a:	ff 91       	pop	r31
    675c:	80 de       	rcall	.-768    	; 0x645e <__fp_powser>
    675e:	2f 91       	pop	r18
    6760:	3f 91       	pop	r19
    6762:	4f 91       	pop	r20
    6764:	5f 91       	pop	r21
    6766:	2c cf       	rjmp	.-424    	; 0x65c0 <__mulsf3>

00006768 <vfprintf>:
    6768:	2f 92       	push	r2
    676a:	3f 92       	push	r3
    676c:	4f 92       	push	r4
    676e:	5f 92       	push	r5
    6770:	6f 92       	push	r6
    6772:	7f 92       	push	r7
    6774:	8f 92       	push	r8
    6776:	9f 92       	push	r9
    6778:	af 92       	push	r10
    677a:	bf 92       	push	r11
    677c:	cf 92       	push	r12
    677e:	df 92       	push	r13
    6780:	ef 92       	push	r14
    6782:	ff 92       	push	r15
    6784:	0f 93       	push	r16
    6786:	1f 93       	push	r17
    6788:	cf 93       	push	r28
    678a:	df 93       	push	r29
    678c:	cd b7       	in	r28, 0x3d	; 61
    678e:	de b7       	in	r29, 0x3e	; 62
    6790:	60 97       	sbiw	r28, 0x10	; 16
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	f8 94       	cli
    6796:	de bf       	out	0x3e, r29	; 62
    6798:	0f be       	out	0x3f, r0	; 63
    679a:	cd bf       	out	0x3d, r28	; 61
    679c:	7c 01       	movw	r14, r24
    679e:	1b 01       	movw	r2, r22
    67a0:	6a 01       	movw	r12, r20
    67a2:	fc 01       	movw	r30, r24
    67a4:	17 82       	std	Z+7, r1	; 0x07
    67a6:	16 82       	std	Z+6, r1	; 0x06
    67a8:	83 81       	ldd	r24, Z+3	; 0x03
    67aa:	81 ff       	sbrs	r24, 1
    67ac:	2a c3       	rjmp	.+1620   	; 0x6e02 <vfprintf+0x69a>
    67ae:	9e 01       	movw	r18, r28
    67b0:	2f 5f       	subi	r18, 0xFF	; 255
    67b2:	3f 4f       	sbci	r19, 0xFF	; 255
    67b4:	39 01       	movw	r6, r18
    67b6:	f7 01       	movw	r30, r14
    67b8:	93 81       	ldd	r25, Z+3	; 0x03
    67ba:	f1 01       	movw	r30, r2
    67bc:	93 fd       	sbrc	r25, 3
    67be:	85 91       	lpm	r24, Z+
    67c0:	93 ff       	sbrs	r25, 3
    67c2:	81 91       	ld	r24, Z+
    67c4:	1f 01       	movw	r2, r30
    67c6:	88 23       	and	r24, r24
    67c8:	09 f4       	brne	.+2      	; 0x67cc <vfprintf+0x64>
    67ca:	17 c3       	rjmp	.+1582   	; 0x6dfa <vfprintf+0x692>
    67cc:	85 32       	cpi	r24, 0x25	; 37
    67ce:	39 f4       	brne	.+14     	; 0x67de <vfprintf+0x76>
    67d0:	93 fd       	sbrc	r25, 3
    67d2:	85 91       	lpm	r24, Z+
    67d4:	93 ff       	sbrs	r25, 3
    67d6:	81 91       	ld	r24, Z+
    67d8:	1f 01       	movw	r2, r30
    67da:	85 32       	cpi	r24, 0x25	; 37
    67dc:	31 f4       	brne	.+12     	; 0x67ea <vfprintf+0x82>
    67de:	b7 01       	movw	r22, r14
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	78 d4       	rcall	.+2288   	; 0x70d4 <fputc>
    67e4:	56 01       	movw	r10, r12
    67e6:	65 01       	movw	r12, r10
    67e8:	e6 cf       	rjmp	.-52     	; 0x67b6 <vfprintf+0x4e>
    67ea:	10 e0       	ldi	r17, 0x00	; 0
    67ec:	51 2c       	mov	r5, r1
    67ee:	91 2c       	mov	r9, r1
    67f0:	ff e1       	ldi	r31, 0x1F	; 31
    67f2:	f9 15       	cp	r31, r9
    67f4:	d8 f0       	brcs	.+54     	; 0x682c <vfprintf+0xc4>
    67f6:	8b 32       	cpi	r24, 0x2B	; 43
    67f8:	79 f0       	breq	.+30     	; 0x6818 <vfprintf+0xb0>
    67fa:	38 f4       	brcc	.+14     	; 0x680a <vfprintf+0xa2>
    67fc:	80 32       	cpi	r24, 0x20	; 32
    67fe:	79 f0       	breq	.+30     	; 0x681e <vfprintf+0xb6>
    6800:	83 32       	cpi	r24, 0x23	; 35
    6802:	a1 f4       	brne	.+40     	; 0x682c <vfprintf+0xc4>
    6804:	f9 2d       	mov	r31, r9
    6806:	f0 61       	ori	r31, 0x10	; 16
    6808:	2e c0       	rjmp	.+92     	; 0x6866 <vfprintf+0xfe>
    680a:	8d 32       	cpi	r24, 0x2D	; 45
    680c:	61 f0       	breq	.+24     	; 0x6826 <vfprintf+0xbe>
    680e:	80 33       	cpi	r24, 0x30	; 48
    6810:	69 f4       	brne	.+26     	; 0x682c <vfprintf+0xc4>
    6812:	29 2d       	mov	r18, r9
    6814:	21 60       	ori	r18, 0x01	; 1
    6816:	2d c0       	rjmp	.+90     	; 0x6872 <vfprintf+0x10a>
    6818:	39 2d       	mov	r19, r9
    681a:	32 60       	ori	r19, 0x02	; 2
    681c:	93 2e       	mov	r9, r19
    681e:	89 2d       	mov	r24, r9
    6820:	84 60       	ori	r24, 0x04	; 4
    6822:	98 2e       	mov	r9, r24
    6824:	2a c0       	rjmp	.+84     	; 0x687a <vfprintf+0x112>
    6826:	e9 2d       	mov	r30, r9
    6828:	e8 60       	ori	r30, 0x08	; 8
    682a:	15 c0       	rjmp	.+42     	; 0x6856 <vfprintf+0xee>
    682c:	97 fc       	sbrc	r9, 7
    682e:	2d c0       	rjmp	.+90     	; 0x688a <vfprintf+0x122>
    6830:	20 ed       	ldi	r18, 0xD0	; 208
    6832:	28 0f       	add	r18, r24
    6834:	2a 30       	cpi	r18, 0x0A	; 10
    6836:	88 f4       	brcc	.+34     	; 0x685a <vfprintf+0xf2>
    6838:	96 fe       	sbrs	r9, 6
    683a:	06 c0       	rjmp	.+12     	; 0x6848 <vfprintf+0xe0>
    683c:	3a e0       	ldi	r19, 0x0A	; 10
    683e:	13 9f       	mul	r17, r19
    6840:	20 0d       	add	r18, r0
    6842:	11 24       	eor	r1, r1
    6844:	12 2f       	mov	r17, r18
    6846:	19 c0       	rjmp	.+50     	; 0x687a <vfprintf+0x112>
    6848:	8a e0       	ldi	r24, 0x0A	; 10
    684a:	58 9e       	mul	r5, r24
    684c:	20 0d       	add	r18, r0
    684e:	11 24       	eor	r1, r1
    6850:	52 2e       	mov	r5, r18
    6852:	e9 2d       	mov	r30, r9
    6854:	e0 62       	ori	r30, 0x20	; 32
    6856:	9e 2e       	mov	r9, r30
    6858:	10 c0       	rjmp	.+32     	; 0x687a <vfprintf+0x112>
    685a:	8e 32       	cpi	r24, 0x2E	; 46
    685c:	31 f4       	brne	.+12     	; 0x686a <vfprintf+0x102>
    685e:	96 fc       	sbrc	r9, 6
    6860:	cc c2       	rjmp	.+1432   	; 0x6dfa <vfprintf+0x692>
    6862:	f9 2d       	mov	r31, r9
    6864:	f0 64       	ori	r31, 0x40	; 64
    6866:	9f 2e       	mov	r9, r31
    6868:	08 c0       	rjmp	.+16     	; 0x687a <vfprintf+0x112>
    686a:	8c 36       	cpi	r24, 0x6C	; 108
    686c:	21 f4       	brne	.+8      	; 0x6876 <vfprintf+0x10e>
    686e:	29 2d       	mov	r18, r9
    6870:	20 68       	ori	r18, 0x80	; 128
    6872:	92 2e       	mov	r9, r18
    6874:	02 c0       	rjmp	.+4      	; 0x687a <vfprintf+0x112>
    6876:	88 36       	cpi	r24, 0x68	; 104
    6878:	41 f4       	brne	.+16     	; 0x688a <vfprintf+0x122>
    687a:	f1 01       	movw	r30, r2
    687c:	93 fd       	sbrc	r25, 3
    687e:	85 91       	lpm	r24, Z+
    6880:	93 ff       	sbrs	r25, 3
    6882:	81 91       	ld	r24, Z+
    6884:	1f 01       	movw	r2, r30
    6886:	81 11       	cpse	r24, r1
    6888:	b3 cf       	rjmp	.-154    	; 0x67f0 <vfprintf+0x88>
    688a:	9b eb       	ldi	r25, 0xBB	; 187
    688c:	98 0f       	add	r25, r24
    688e:	93 30       	cpi	r25, 0x03	; 3
    6890:	20 f4       	brcc	.+8      	; 0x689a <vfprintf+0x132>
    6892:	99 2d       	mov	r25, r9
    6894:	90 61       	ori	r25, 0x10	; 16
    6896:	80 5e       	subi	r24, 0xE0	; 224
    6898:	07 c0       	rjmp	.+14     	; 0x68a8 <vfprintf+0x140>
    689a:	9b e9       	ldi	r25, 0x9B	; 155
    689c:	98 0f       	add	r25, r24
    689e:	93 30       	cpi	r25, 0x03	; 3
    68a0:	08 f0       	brcs	.+2      	; 0x68a4 <vfprintf+0x13c>
    68a2:	59 c1       	rjmp	.+690    	; 0x6b56 <vfprintf+0x3ee>
    68a4:	99 2d       	mov	r25, r9
    68a6:	9f 7e       	andi	r25, 0xEF	; 239
    68a8:	96 ff       	sbrs	r25, 6
    68aa:	16 e0       	ldi	r17, 0x06	; 6
    68ac:	9f 73       	andi	r25, 0x3F	; 63
    68ae:	99 2e       	mov	r9, r25
    68b0:	85 36       	cpi	r24, 0x65	; 101
    68b2:	19 f4       	brne	.+6      	; 0x68ba <vfprintf+0x152>
    68b4:	90 64       	ori	r25, 0x40	; 64
    68b6:	99 2e       	mov	r9, r25
    68b8:	08 c0       	rjmp	.+16     	; 0x68ca <vfprintf+0x162>
    68ba:	86 36       	cpi	r24, 0x66	; 102
    68bc:	21 f4       	brne	.+8      	; 0x68c6 <vfprintf+0x15e>
    68be:	39 2f       	mov	r19, r25
    68c0:	30 68       	ori	r19, 0x80	; 128
    68c2:	93 2e       	mov	r9, r19
    68c4:	02 c0       	rjmp	.+4      	; 0x68ca <vfprintf+0x162>
    68c6:	11 11       	cpse	r17, r1
    68c8:	11 50       	subi	r17, 0x01	; 1
    68ca:	97 fe       	sbrs	r9, 7
    68cc:	07 c0       	rjmp	.+14     	; 0x68dc <vfprintf+0x174>
    68ce:	1c 33       	cpi	r17, 0x3C	; 60
    68d0:	50 f4       	brcc	.+20     	; 0x68e6 <vfprintf+0x17e>
    68d2:	44 24       	eor	r4, r4
    68d4:	43 94       	inc	r4
    68d6:	41 0e       	add	r4, r17
    68d8:	27 e0       	ldi	r18, 0x07	; 7
    68da:	0b c0       	rjmp	.+22     	; 0x68f2 <vfprintf+0x18a>
    68dc:	18 30       	cpi	r17, 0x08	; 8
    68de:	38 f0       	brcs	.+14     	; 0x68ee <vfprintf+0x186>
    68e0:	27 e0       	ldi	r18, 0x07	; 7
    68e2:	17 e0       	ldi	r17, 0x07	; 7
    68e4:	05 c0       	rjmp	.+10     	; 0x68f0 <vfprintf+0x188>
    68e6:	27 e0       	ldi	r18, 0x07	; 7
    68e8:	9c e3       	ldi	r25, 0x3C	; 60
    68ea:	49 2e       	mov	r4, r25
    68ec:	02 c0       	rjmp	.+4      	; 0x68f2 <vfprintf+0x18a>
    68ee:	21 2f       	mov	r18, r17
    68f0:	41 2c       	mov	r4, r1
    68f2:	56 01       	movw	r10, r12
    68f4:	84 e0       	ldi	r24, 0x04	; 4
    68f6:	a8 0e       	add	r10, r24
    68f8:	b1 1c       	adc	r11, r1
    68fa:	f6 01       	movw	r30, r12
    68fc:	60 81       	ld	r22, Z
    68fe:	71 81       	ldd	r23, Z+1	; 0x01
    6900:	82 81       	ldd	r24, Z+2	; 0x02
    6902:	93 81       	ldd	r25, Z+3	; 0x03
    6904:	04 2d       	mov	r16, r4
    6906:	a3 01       	movw	r20, r6
    6908:	ee d2       	rcall	.+1500   	; 0x6ee6 <__ftoa_engine>
    690a:	6c 01       	movw	r12, r24
    690c:	f9 81       	ldd	r31, Y+1	; 0x01
    690e:	fc 87       	std	Y+12, r31	; 0x0c
    6910:	f0 ff       	sbrs	r31, 0
    6912:	02 c0       	rjmp	.+4      	; 0x6918 <vfprintf+0x1b0>
    6914:	f3 ff       	sbrs	r31, 3
    6916:	06 c0       	rjmp	.+12     	; 0x6924 <vfprintf+0x1bc>
    6918:	91 fc       	sbrc	r9, 1
    691a:	06 c0       	rjmp	.+12     	; 0x6928 <vfprintf+0x1c0>
    691c:	92 fe       	sbrs	r9, 2
    691e:	06 c0       	rjmp	.+12     	; 0x692c <vfprintf+0x1c4>
    6920:	00 e2       	ldi	r16, 0x20	; 32
    6922:	05 c0       	rjmp	.+10     	; 0x692e <vfprintf+0x1c6>
    6924:	0d e2       	ldi	r16, 0x2D	; 45
    6926:	03 c0       	rjmp	.+6      	; 0x692e <vfprintf+0x1c6>
    6928:	0b e2       	ldi	r16, 0x2B	; 43
    692a:	01 c0       	rjmp	.+2      	; 0x692e <vfprintf+0x1c6>
    692c:	00 e0       	ldi	r16, 0x00	; 0
    692e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6930:	8c 70       	andi	r24, 0x0C	; 12
    6932:	19 f0       	breq	.+6      	; 0x693a <vfprintf+0x1d2>
    6934:	01 11       	cpse	r16, r1
    6936:	43 c2       	rjmp	.+1158   	; 0x6dbe <vfprintf+0x656>
    6938:	80 c2       	rjmp	.+1280   	; 0x6e3a <vfprintf+0x6d2>
    693a:	97 fe       	sbrs	r9, 7
    693c:	10 c0       	rjmp	.+32     	; 0x695e <vfprintf+0x1f6>
    693e:	4c 0c       	add	r4, r12
    6940:	fc 85       	ldd	r31, Y+12	; 0x0c
    6942:	f4 ff       	sbrs	r31, 4
    6944:	04 c0       	rjmp	.+8      	; 0x694e <vfprintf+0x1e6>
    6946:	8a 81       	ldd	r24, Y+2	; 0x02
    6948:	81 33       	cpi	r24, 0x31	; 49
    694a:	09 f4       	brne	.+2      	; 0x694e <vfprintf+0x1e6>
    694c:	4a 94       	dec	r4
    694e:	14 14       	cp	r1, r4
    6950:	74 f5       	brge	.+92     	; 0x69ae <vfprintf+0x246>
    6952:	28 e0       	ldi	r18, 0x08	; 8
    6954:	24 15       	cp	r18, r4
    6956:	78 f5       	brcc	.+94     	; 0x69b6 <vfprintf+0x24e>
    6958:	88 e0       	ldi	r24, 0x08	; 8
    695a:	48 2e       	mov	r4, r24
    695c:	2c c0       	rjmp	.+88     	; 0x69b6 <vfprintf+0x24e>
    695e:	96 fc       	sbrc	r9, 6
    6960:	2a c0       	rjmp	.+84     	; 0x69b6 <vfprintf+0x24e>
    6962:	81 2f       	mov	r24, r17
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	8c 15       	cp	r24, r12
    6968:	9d 05       	cpc	r25, r13
    696a:	9c f0       	brlt	.+38     	; 0x6992 <vfprintf+0x22a>
    696c:	3c ef       	ldi	r19, 0xFC	; 252
    696e:	c3 16       	cp	r12, r19
    6970:	3f ef       	ldi	r19, 0xFF	; 255
    6972:	d3 06       	cpc	r13, r19
    6974:	74 f0       	brlt	.+28     	; 0x6992 <vfprintf+0x22a>
    6976:	89 2d       	mov	r24, r9
    6978:	80 68       	ori	r24, 0x80	; 128
    697a:	98 2e       	mov	r9, r24
    697c:	0a c0       	rjmp	.+20     	; 0x6992 <vfprintf+0x22a>
    697e:	e2 e0       	ldi	r30, 0x02	; 2
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	ec 0f       	add	r30, r28
    6984:	fd 1f       	adc	r31, r29
    6986:	e1 0f       	add	r30, r17
    6988:	f1 1d       	adc	r31, r1
    698a:	80 81       	ld	r24, Z
    698c:	80 33       	cpi	r24, 0x30	; 48
    698e:	19 f4       	brne	.+6      	; 0x6996 <vfprintf+0x22e>
    6990:	11 50       	subi	r17, 0x01	; 1
    6992:	11 11       	cpse	r17, r1
    6994:	f4 cf       	rjmp	.-24     	; 0x697e <vfprintf+0x216>
    6996:	97 fe       	sbrs	r9, 7
    6998:	0e c0       	rjmp	.+28     	; 0x69b6 <vfprintf+0x24e>
    699a:	44 24       	eor	r4, r4
    699c:	43 94       	inc	r4
    699e:	41 0e       	add	r4, r17
    69a0:	81 2f       	mov	r24, r17
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	c8 16       	cp	r12, r24
    69a6:	d9 06       	cpc	r13, r25
    69a8:	2c f4       	brge	.+10     	; 0x69b4 <vfprintf+0x24c>
    69aa:	1c 19       	sub	r17, r12
    69ac:	04 c0       	rjmp	.+8      	; 0x69b6 <vfprintf+0x24e>
    69ae:	44 24       	eor	r4, r4
    69b0:	43 94       	inc	r4
    69b2:	01 c0       	rjmp	.+2      	; 0x69b6 <vfprintf+0x24e>
    69b4:	10 e0       	ldi	r17, 0x00	; 0
    69b6:	97 fe       	sbrs	r9, 7
    69b8:	06 c0       	rjmp	.+12     	; 0x69c6 <vfprintf+0x25e>
    69ba:	1c 14       	cp	r1, r12
    69bc:	1d 04       	cpc	r1, r13
    69be:	34 f4       	brge	.+12     	; 0x69cc <vfprintf+0x264>
    69c0:	c6 01       	movw	r24, r12
    69c2:	01 96       	adiw	r24, 0x01	; 1
    69c4:	05 c0       	rjmp	.+10     	; 0x69d0 <vfprintf+0x268>
    69c6:	85 e0       	ldi	r24, 0x05	; 5
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	02 c0       	rjmp	.+4      	; 0x69d0 <vfprintf+0x268>
    69cc:	81 e0       	ldi	r24, 0x01	; 1
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	01 11       	cpse	r16, r1
    69d2:	01 96       	adiw	r24, 0x01	; 1
    69d4:	11 23       	and	r17, r17
    69d6:	31 f0       	breq	.+12     	; 0x69e4 <vfprintf+0x27c>
    69d8:	21 2f       	mov	r18, r17
    69da:	30 e0       	ldi	r19, 0x00	; 0
    69dc:	2f 5f       	subi	r18, 0xFF	; 255
    69de:	3f 4f       	sbci	r19, 0xFF	; 255
    69e0:	82 0f       	add	r24, r18
    69e2:	93 1f       	adc	r25, r19
    69e4:	25 2d       	mov	r18, r5
    69e6:	30 e0       	ldi	r19, 0x00	; 0
    69e8:	82 17       	cp	r24, r18
    69ea:	93 07       	cpc	r25, r19
    69ec:	14 f4       	brge	.+4      	; 0x69f2 <vfprintf+0x28a>
    69ee:	58 1a       	sub	r5, r24
    69f0:	01 c0       	rjmp	.+2      	; 0x69f4 <vfprintf+0x28c>
    69f2:	51 2c       	mov	r5, r1
    69f4:	89 2d       	mov	r24, r9
    69f6:	89 70       	andi	r24, 0x09	; 9
    69f8:	41 f4       	brne	.+16     	; 0x6a0a <vfprintf+0x2a2>
    69fa:	55 20       	and	r5, r5
    69fc:	31 f0       	breq	.+12     	; 0x6a0a <vfprintf+0x2a2>
    69fe:	b7 01       	movw	r22, r14
    6a00:	80 e2       	ldi	r24, 0x20	; 32
    6a02:	90 e0       	ldi	r25, 0x00	; 0
    6a04:	67 d3       	rcall	.+1742   	; 0x70d4 <fputc>
    6a06:	5a 94       	dec	r5
    6a08:	f8 cf       	rjmp	.-16     	; 0x69fa <vfprintf+0x292>
    6a0a:	00 23       	and	r16, r16
    6a0c:	21 f0       	breq	.+8      	; 0x6a16 <vfprintf+0x2ae>
    6a0e:	b7 01       	movw	r22, r14
    6a10:	80 2f       	mov	r24, r16
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	5f d3       	rcall	.+1726   	; 0x70d4 <fputc>
    6a16:	93 fc       	sbrc	r9, 3
    6a18:	08 c0       	rjmp	.+16     	; 0x6a2a <vfprintf+0x2c2>
    6a1a:	55 20       	and	r5, r5
    6a1c:	31 f0       	breq	.+12     	; 0x6a2a <vfprintf+0x2c2>
    6a1e:	b7 01       	movw	r22, r14
    6a20:	80 e3       	ldi	r24, 0x30	; 48
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	57 d3       	rcall	.+1710   	; 0x70d4 <fputc>
    6a26:	5a 94       	dec	r5
    6a28:	f8 cf       	rjmp	.-16     	; 0x6a1a <vfprintf+0x2b2>
    6a2a:	97 fe       	sbrs	r9, 7
    6a2c:	4a c0       	rjmp	.+148    	; 0x6ac2 <vfprintf+0x35a>
    6a2e:	46 01       	movw	r8, r12
    6a30:	d7 fe       	sbrs	r13, 7
    6a32:	02 c0       	rjmp	.+4      	; 0x6a38 <vfprintf+0x2d0>
    6a34:	81 2c       	mov	r8, r1
    6a36:	91 2c       	mov	r9, r1
    6a38:	c6 01       	movw	r24, r12
    6a3a:	88 19       	sub	r24, r8
    6a3c:	99 09       	sbc	r25, r9
    6a3e:	f3 01       	movw	r30, r6
    6a40:	e8 0f       	add	r30, r24
    6a42:	f9 1f       	adc	r31, r25
    6a44:	fe 87       	std	Y+14, r31	; 0x0e
    6a46:	ed 87       	std	Y+13, r30	; 0x0d
    6a48:	96 01       	movw	r18, r12
    6a4a:	24 19       	sub	r18, r4
    6a4c:	31 09       	sbc	r19, r1
    6a4e:	38 8b       	std	Y+16, r19	; 0x10
    6a50:	2f 87       	std	Y+15, r18	; 0x0f
    6a52:	01 2f       	mov	r16, r17
    6a54:	10 e0       	ldi	r17, 0x00	; 0
    6a56:	11 95       	neg	r17
    6a58:	01 95       	neg	r16
    6a5a:	11 09       	sbc	r17, r1
    6a5c:	3f ef       	ldi	r19, 0xFF	; 255
    6a5e:	83 16       	cp	r8, r19
    6a60:	93 06       	cpc	r9, r19
    6a62:	21 f4       	brne	.+8      	; 0x6a6c <vfprintf+0x304>
    6a64:	b7 01       	movw	r22, r14
    6a66:	8e e2       	ldi	r24, 0x2E	; 46
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	34 d3       	rcall	.+1640   	; 0x70d4 <fputc>
    6a6c:	c8 14       	cp	r12, r8
    6a6e:	d9 04       	cpc	r13, r9
    6a70:	4c f0       	brlt	.+18     	; 0x6a84 <vfprintf+0x31c>
    6a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a74:	98 89       	ldd	r25, Y+16	; 0x10
    6a76:	88 15       	cp	r24, r8
    6a78:	99 05       	cpc	r25, r9
    6a7a:	24 f4       	brge	.+8      	; 0x6a84 <vfprintf+0x31c>
    6a7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    6a7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    6a80:	81 81       	ldd	r24, Z+1	; 0x01
    6a82:	01 c0       	rjmp	.+2      	; 0x6a86 <vfprintf+0x31e>
    6a84:	80 e3       	ldi	r24, 0x30	; 48
    6a86:	f1 e0       	ldi	r31, 0x01	; 1
    6a88:	8f 1a       	sub	r8, r31
    6a8a:	91 08       	sbc	r9, r1
    6a8c:	2d 85       	ldd	r18, Y+13	; 0x0d
    6a8e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6a90:	2f 5f       	subi	r18, 0xFF	; 255
    6a92:	3f 4f       	sbci	r19, 0xFF	; 255
    6a94:	3e 87       	std	Y+14, r19	; 0x0e
    6a96:	2d 87       	std	Y+13, r18	; 0x0d
    6a98:	80 16       	cp	r8, r16
    6a9a:	91 06       	cpc	r9, r17
    6a9c:	24 f0       	brlt	.+8      	; 0x6aa6 <vfprintf+0x33e>
    6a9e:	b7 01       	movw	r22, r14
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	18 d3       	rcall	.+1584   	; 0x70d4 <fputc>
    6aa4:	db cf       	rjmp	.-74     	; 0x6a5c <vfprintf+0x2f4>
    6aa6:	c8 14       	cp	r12, r8
    6aa8:	d9 04       	cpc	r13, r9
    6aaa:	41 f4       	brne	.+16     	; 0x6abc <vfprintf+0x354>
    6aac:	9a 81       	ldd	r25, Y+2	; 0x02
    6aae:	96 33       	cpi	r25, 0x36	; 54
    6ab0:	20 f4       	brcc	.+8      	; 0x6aba <vfprintf+0x352>
    6ab2:	95 33       	cpi	r25, 0x35	; 53
    6ab4:	19 f4       	brne	.+6      	; 0x6abc <vfprintf+0x354>
    6ab6:	3c 85       	ldd	r19, Y+12	; 0x0c
    6ab8:	34 ff       	sbrs	r19, 4
    6aba:	81 e3       	ldi	r24, 0x31	; 49
    6abc:	b7 01       	movw	r22, r14
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	48 c0       	rjmp	.+144    	; 0x6b52 <vfprintf+0x3ea>
    6ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac4:	81 33       	cpi	r24, 0x31	; 49
    6ac6:	19 f0       	breq	.+6      	; 0x6ace <vfprintf+0x366>
    6ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
    6aca:	9f 7e       	andi	r25, 0xEF	; 239
    6acc:	9c 87       	std	Y+12, r25	; 0x0c
    6ace:	b7 01       	movw	r22, r14
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	00 d3       	rcall	.+1536   	; 0x70d4 <fputc>
    6ad4:	11 11       	cpse	r17, r1
    6ad6:	05 c0       	rjmp	.+10     	; 0x6ae2 <vfprintf+0x37a>
    6ad8:	94 fc       	sbrc	r9, 4
    6ada:	16 c0       	rjmp	.+44     	; 0x6b08 <vfprintf+0x3a0>
    6adc:	85 e6       	ldi	r24, 0x65	; 101
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	15 c0       	rjmp	.+42     	; 0x6b0c <vfprintf+0x3a4>
    6ae2:	b7 01       	movw	r22, r14
    6ae4:	8e e2       	ldi	r24, 0x2E	; 46
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	f5 d2       	rcall	.+1514   	; 0x70d4 <fputc>
    6aea:	1e 5f       	subi	r17, 0xFE	; 254
    6aec:	82 e0       	ldi	r24, 0x02	; 2
    6aee:	01 e0       	ldi	r16, 0x01	; 1
    6af0:	08 0f       	add	r16, r24
    6af2:	f3 01       	movw	r30, r6
    6af4:	e8 0f       	add	r30, r24
    6af6:	f1 1d       	adc	r31, r1
    6af8:	80 81       	ld	r24, Z
    6afa:	b7 01       	movw	r22, r14
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	ea d2       	rcall	.+1492   	; 0x70d4 <fputc>
    6b00:	80 2f       	mov	r24, r16
    6b02:	01 13       	cpse	r16, r17
    6b04:	f4 cf       	rjmp	.-24     	; 0x6aee <vfprintf+0x386>
    6b06:	e8 cf       	rjmp	.-48     	; 0x6ad8 <vfprintf+0x370>
    6b08:	85 e4       	ldi	r24, 0x45	; 69
    6b0a:	90 e0       	ldi	r25, 0x00	; 0
    6b0c:	b7 01       	movw	r22, r14
    6b0e:	e2 d2       	rcall	.+1476   	; 0x70d4 <fputc>
    6b10:	d7 fc       	sbrc	r13, 7
    6b12:	06 c0       	rjmp	.+12     	; 0x6b20 <vfprintf+0x3b8>
    6b14:	c1 14       	cp	r12, r1
    6b16:	d1 04       	cpc	r13, r1
    6b18:	41 f4       	brne	.+16     	; 0x6b2a <vfprintf+0x3c2>
    6b1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b1c:	e4 ff       	sbrs	r30, 4
    6b1e:	05 c0       	rjmp	.+10     	; 0x6b2a <vfprintf+0x3c2>
    6b20:	d1 94       	neg	r13
    6b22:	c1 94       	neg	r12
    6b24:	d1 08       	sbc	r13, r1
    6b26:	8d e2       	ldi	r24, 0x2D	; 45
    6b28:	01 c0       	rjmp	.+2      	; 0x6b2c <vfprintf+0x3c4>
    6b2a:	8b e2       	ldi	r24, 0x2B	; 43
    6b2c:	b7 01       	movw	r22, r14
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	d1 d2       	rcall	.+1442   	; 0x70d4 <fputc>
    6b32:	80 e3       	ldi	r24, 0x30	; 48
    6b34:	2a e0       	ldi	r18, 0x0A	; 10
    6b36:	c2 16       	cp	r12, r18
    6b38:	d1 04       	cpc	r13, r1
    6b3a:	2c f0       	brlt	.+10     	; 0x6b46 <vfprintf+0x3de>
    6b3c:	8f 5f       	subi	r24, 0xFF	; 255
    6b3e:	fa e0       	ldi	r31, 0x0A	; 10
    6b40:	cf 1a       	sub	r12, r31
    6b42:	d1 08       	sbc	r13, r1
    6b44:	f7 cf       	rjmp	.-18     	; 0x6b34 <vfprintf+0x3cc>
    6b46:	b7 01       	movw	r22, r14
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	c4 d2       	rcall	.+1416   	; 0x70d4 <fputc>
    6b4c:	b7 01       	movw	r22, r14
    6b4e:	c6 01       	movw	r24, r12
    6b50:	c0 96       	adiw	r24, 0x30	; 48
    6b52:	c0 d2       	rcall	.+1408   	; 0x70d4 <fputc>
    6b54:	49 c1       	rjmp	.+658    	; 0x6de8 <vfprintf+0x680>
    6b56:	83 36       	cpi	r24, 0x63	; 99
    6b58:	31 f0       	breq	.+12     	; 0x6b66 <vfprintf+0x3fe>
    6b5a:	83 37       	cpi	r24, 0x73	; 115
    6b5c:	79 f0       	breq	.+30     	; 0x6b7c <vfprintf+0x414>
    6b5e:	83 35       	cpi	r24, 0x53	; 83
    6b60:	09 f0       	breq	.+2      	; 0x6b64 <vfprintf+0x3fc>
    6b62:	52 c0       	rjmp	.+164    	; 0x6c08 <vfprintf+0x4a0>
    6b64:	1f c0       	rjmp	.+62     	; 0x6ba4 <vfprintf+0x43c>
    6b66:	56 01       	movw	r10, r12
    6b68:	32 e0       	ldi	r19, 0x02	; 2
    6b6a:	a3 0e       	add	r10, r19
    6b6c:	b1 1c       	adc	r11, r1
    6b6e:	f6 01       	movw	r30, r12
    6b70:	80 81       	ld	r24, Z
    6b72:	89 83       	std	Y+1, r24	; 0x01
    6b74:	01 e0       	ldi	r16, 0x01	; 1
    6b76:	10 e0       	ldi	r17, 0x00	; 0
    6b78:	63 01       	movw	r12, r6
    6b7a:	11 c0       	rjmp	.+34     	; 0x6b9e <vfprintf+0x436>
    6b7c:	56 01       	movw	r10, r12
    6b7e:	f2 e0       	ldi	r31, 0x02	; 2
    6b80:	af 0e       	add	r10, r31
    6b82:	b1 1c       	adc	r11, r1
    6b84:	f6 01       	movw	r30, r12
    6b86:	c0 80       	ld	r12, Z
    6b88:	d1 80       	ldd	r13, Z+1	; 0x01
    6b8a:	96 fe       	sbrs	r9, 6
    6b8c:	03 c0       	rjmp	.+6      	; 0x6b94 <vfprintf+0x42c>
    6b8e:	61 2f       	mov	r22, r17
    6b90:	70 e0       	ldi	r23, 0x00	; 0
    6b92:	02 c0       	rjmp	.+4      	; 0x6b98 <vfprintf+0x430>
    6b94:	6f ef       	ldi	r22, 0xFF	; 255
    6b96:	7f ef       	ldi	r23, 0xFF	; 255
    6b98:	c6 01       	movw	r24, r12
    6b9a:	91 d2       	rcall	.+1314   	; 0x70be <strnlen>
    6b9c:	8c 01       	movw	r16, r24
    6b9e:	f9 2d       	mov	r31, r9
    6ba0:	ff 77       	andi	r31, 0x7F	; 127
    6ba2:	13 c0       	rjmp	.+38     	; 0x6bca <vfprintf+0x462>
    6ba4:	56 01       	movw	r10, r12
    6ba6:	22 e0       	ldi	r18, 0x02	; 2
    6ba8:	a2 0e       	add	r10, r18
    6baa:	b1 1c       	adc	r11, r1
    6bac:	f6 01       	movw	r30, r12
    6bae:	c0 80       	ld	r12, Z
    6bb0:	d1 80       	ldd	r13, Z+1	; 0x01
    6bb2:	96 fe       	sbrs	r9, 6
    6bb4:	03 c0       	rjmp	.+6      	; 0x6bbc <vfprintf+0x454>
    6bb6:	61 2f       	mov	r22, r17
    6bb8:	70 e0       	ldi	r23, 0x00	; 0
    6bba:	02 c0       	rjmp	.+4      	; 0x6bc0 <vfprintf+0x458>
    6bbc:	6f ef       	ldi	r22, 0xFF	; 255
    6bbe:	7f ef       	ldi	r23, 0xFF	; 255
    6bc0:	c6 01       	movw	r24, r12
    6bc2:	69 d2       	rcall	.+1234   	; 0x7096 <strnlen_P>
    6bc4:	8c 01       	movw	r16, r24
    6bc6:	f9 2d       	mov	r31, r9
    6bc8:	f0 68       	ori	r31, 0x80	; 128
    6bca:	9f 2e       	mov	r9, r31
    6bcc:	f3 fd       	sbrc	r31, 3
    6bce:	18 c0       	rjmp	.+48     	; 0x6c00 <vfprintf+0x498>
    6bd0:	85 2d       	mov	r24, r5
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	08 17       	cp	r16, r24
    6bd6:	19 07       	cpc	r17, r25
    6bd8:	98 f4       	brcc	.+38     	; 0x6c00 <vfprintf+0x498>
    6bda:	b7 01       	movw	r22, r14
    6bdc:	80 e2       	ldi	r24, 0x20	; 32
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	79 d2       	rcall	.+1266   	; 0x70d4 <fputc>
    6be2:	5a 94       	dec	r5
    6be4:	f5 cf       	rjmp	.-22     	; 0x6bd0 <vfprintf+0x468>
    6be6:	f6 01       	movw	r30, r12
    6be8:	97 fc       	sbrc	r9, 7
    6bea:	85 91       	lpm	r24, Z+
    6bec:	97 fe       	sbrs	r9, 7
    6bee:	81 91       	ld	r24, Z+
    6bf0:	6f 01       	movw	r12, r30
    6bf2:	b7 01       	movw	r22, r14
    6bf4:	90 e0       	ldi	r25, 0x00	; 0
    6bf6:	6e d2       	rcall	.+1244   	; 0x70d4 <fputc>
    6bf8:	51 10       	cpse	r5, r1
    6bfa:	5a 94       	dec	r5
    6bfc:	01 50       	subi	r16, 0x01	; 1
    6bfe:	11 09       	sbc	r17, r1
    6c00:	01 15       	cp	r16, r1
    6c02:	11 05       	cpc	r17, r1
    6c04:	81 f7       	brne	.-32     	; 0x6be6 <vfprintf+0x47e>
    6c06:	f0 c0       	rjmp	.+480    	; 0x6de8 <vfprintf+0x680>
    6c08:	84 36       	cpi	r24, 0x64	; 100
    6c0a:	11 f0       	breq	.+4      	; 0x6c10 <vfprintf+0x4a8>
    6c0c:	89 36       	cpi	r24, 0x69	; 105
    6c0e:	59 f5       	brne	.+86     	; 0x6c66 <vfprintf+0x4fe>
    6c10:	56 01       	movw	r10, r12
    6c12:	97 fe       	sbrs	r9, 7
    6c14:	09 c0       	rjmp	.+18     	; 0x6c28 <vfprintf+0x4c0>
    6c16:	24 e0       	ldi	r18, 0x04	; 4
    6c18:	a2 0e       	add	r10, r18
    6c1a:	b1 1c       	adc	r11, r1
    6c1c:	f6 01       	movw	r30, r12
    6c1e:	60 81       	ld	r22, Z
    6c20:	71 81       	ldd	r23, Z+1	; 0x01
    6c22:	82 81       	ldd	r24, Z+2	; 0x02
    6c24:	93 81       	ldd	r25, Z+3	; 0x03
    6c26:	0a c0       	rjmp	.+20     	; 0x6c3c <vfprintf+0x4d4>
    6c28:	f2 e0       	ldi	r31, 0x02	; 2
    6c2a:	af 0e       	add	r10, r31
    6c2c:	b1 1c       	adc	r11, r1
    6c2e:	f6 01       	movw	r30, r12
    6c30:	60 81       	ld	r22, Z
    6c32:	71 81       	ldd	r23, Z+1	; 0x01
    6c34:	07 2e       	mov	r0, r23
    6c36:	00 0c       	add	r0, r0
    6c38:	88 0b       	sbc	r24, r24
    6c3a:	99 0b       	sbc	r25, r25
    6c3c:	f9 2d       	mov	r31, r9
    6c3e:	ff 76       	andi	r31, 0x6F	; 111
    6c40:	9f 2e       	mov	r9, r31
    6c42:	97 ff       	sbrs	r25, 7
    6c44:	09 c0       	rjmp	.+18     	; 0x6c58 <vfprintf+0x4f0>
    6c46:	90 95       	com	r25
    6c48:	80 95       	com	r24
    6c4a:	70 95       	com	r23
    6c4c:	61 95       	neg	r22
    6c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c50:	8f 4f       	sbci	r24, 0xFF	; 255
    6c52:	9f 4f       	sbci	r25, 0xFF	; 255
    6c54:	f0 68       	ori	r31, 0x80	; 128
    6c56:	9f 2e       	mov	r9, r31
    6c58:	2a e0       	ldi	r18, 0x0A	; 10
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	a3 01       	movw	r20, r6
    6c5e:	9e d2       	rcall	.+1340   	; 0x719c <__ultoa_invert>
    6c60:	c8 2e       	mov	r12, r24
    6c62:	c6 18       	sub	r12, r6
    6c64:	3e c0       	rjmp	.+124    	; 0x6ce2 <vfprintf+0x57a>
    6c66:	09 2d       	mov	r16, r9
    6c68:	85 37       	cpi	r24, 0x75	; 117
    6c6a:	21 f4       	brne	.+8      	; 0x6c74 <vfprintf+0x50c>
    6c6c:	0f 7e       	andi	r16, 0xEF	; 239
    6c6e:	2a e0       	ldi	r18, 0x0A	; 10
    6c70:	30 e0       	ldi	r19, 0x00	; 0
    6c72:	1d c0       	rjmp	.+58     	; 0x6cae <vfprintf+0x546>
    6c74:	09 7f       	andi	r16, 0xF9	; 249
    6c76:	8f 36       	cpi	r24, 0x6F	; 111
    6c78:	91 f0       	breq	.+36     	; 0x6c9e <vfprintf+0x536>
    6c7a:	18 f4       	brcc	.+6      	; 0x6c82 <vfprintf+0x51a>
    6c7c:	88 35       	cpi	r24, 0x58	; 88
    6c7e:	59 f0       	breq	.+22     	; 0x6c96 <vfprintf+0x52e>
    6c80:	bc c0       	rjmp	.+376    	; 0x6dfa <vfprintf+0x692>
    6c82:	80 37       	cpi	r24, 0x70	; 112
    6c84:	19 f0       	breq	.+6      	; 0x6c8c <vfprintf+0x524>
    6c86:	88 37       	cpi	r24, 0x78	; 120
    6c88:	11 f0       	breq	.+4      	; 0x6c8e <vfprintf+0x526>
    6c8a:	b7 c0       	rjmp	.+366    	; 0x6dfa <vfprintf+0x692>
    6c8c:	00 61       	ori	r16, 0x10	; 16
    6c8e:	04 ff       	sbrs	r16, 4
    6c90:	09 c0       	rjmp	.+18     	; 0x6ca4 <vfprintf+0x53c>
    6c92:	04 60       	ori	r16, 0x04	; 4
    6c94:	07 c0       	rjmp	.+14     	; 0x6ca4 <vfprintf+0x53c>
    6c96:	94 fe       	sbrs	r9, 4
    6c98:	08 c0       	rjmp	.+16     	; 0x6caa <vfprintf+0x542>
    6c9a:	06 60       	ori	r16, 0x06	; 6
    6c9c:	06 c0       	rjmp	.+12     	; 0x6caa <vfprintf+0x542>
    6c9e:	28 e0       	ldi	r18, 0x08	; 8
    6ca0:	30 e0       	ldi	r19, 0x00	; 0
    6ca2:	05 c0       	rjmp	.+10     	; 0x6cae <vfprintf+0x546>
    6ca4:	20 e1       	ldi	r18, 0x10	; 16
    6ca6:	30 e0       	ldi	r19, 0x00	; 0
    6ca8:	02 c0       	rjmp	.+4      	; 0x6cae <vfprintf+0x546>
    6caa:	20 e1       	ldi	r18, 0x10	; 16
    6cac:	32 e0       	ldi	r19, 0x02	; 2
    6cae:	56 01       	movw	r10, r12
    6cb0:	07 ff       	sbrs	r16, 7
    6cb2:	09 c0       	rjmp	.+18     	; 0x6cc6 <vfprintf+0x55e>
    6cb4:	84 e0       	ldi	r24, 0x04	; 4
    6cb6:	a8 0e       	add	r10, r24
    6cb8:	b1 1c       	adc	r11, r1
    6cba:	f6 01       	movw	r30, r12
    6cbc:	60 81       	ld	r22, Z
    6cbe:	71 81       	ldd	r23, Z+1	; 0x01
    6cc0:	82 81       	ldd	r24, Z+2	; 0x02
    6cc2:	93 81       	ldd	r25, Z+3	; 0x03
    6cc4:	08 c0       	rjmp	.+16     	; 0x6cd6 <vfprintf+0x56e>
    6cc6:	f2 e0       	ldi	r31, 0x02	; 2
    6cc8:	af 0e       	add	r10, r31
    6cca:	b1 1c       	adc	r11, r1
    6ccc:	f6 01       	movw	r30, r12
    6cce:	60 81       	ld	r22, Z
    6cd0:	71 81       	ldd	r23, Z+1	; 0x01
    6cd2:	80 e0       	ldi	r24, 0x00	; 0
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	a3 01       	movw	r20, r6
    6cd8:	61 d2       	rcall	.+1218   	; 0x719c <__ultoa_invert>
    6cda:	c8 2e       	mov	r12, r24
    6cdc:	c6 18       	sub	r12, r6
    6cde:	0f 77       	andi	r16, 0x7F	; 127
    6ce0:	90 2e       	mov	r9, r16
    6ce2:	96 fe       	sbrs	r9, 6
    6ce4:	0b c0       	rjmp	.+22     	; 0x6cfc <vfprintf+0x594>
    6ce6:	09 2d       	mov	r16, r9
    6ce8:	0e 7f       	andi	r16, 0xFE	; 254
    6cea:	c1 16       	cp	r12, r17
    6cec:	50 f4       	brcc	.+20     	; 0x6d02 <vfprintf+0x59a>
    6cee:	94 fe       	sbrs	r9, 4
    6cf0:	0a c0       	rjmp	.+20     	; 0x6d06 <vfprintf+0x59e>
    6cf2:	92 fc       	sbrc	r9, 2
    6cf4:	08 c0       	rjmp	.+16     	; 0x6d06 <vfprintf+0x59e>
    6cf6:	09 2d       	mov	r16, r9
    6cf8:	0e 7e       	andi	r16, 0xEE	; 238
    6cfa:	05 c0       	rjmp	.+10     	; 0x6d06 <vfprintf+0x59e>
    6cfc:	dc 2c       	mov	r13, r12
    6cfe:	09 2d       	mov	r16, r9
    6d00:	03 c0       	rjmp	.+6      	; 0x6d08 <vfprintf+0x5a0>
    6d02:	dc 2c       	mov	r13, r12
    6d04:	01 c0       	rjmp	.+2      	; 0x6d08 <vfprintf+0x5a0>
    6d06:	d1 2e       	mov	r13, r17
    6d08:	04 ff       	sbrs	r16, 4
    6d0a:	0d c0       	rjmp	.+26     	; 0x6d26 <vfprintf+0x5be>
    6d0c:	fe 01       	movw	r30, r28
    6d0e:	ec 0d       	add	r30, r12
    6d10:	f1 1d       	adc	r31, r1
    6d12:	80 81       	ld	r24, Z
    6d14:	80 33       	cpi	r24, 0x30	; 48
    6d16:	11 f4       	brne	.+4      	; 0x6d1c <vfprintf+0x5b4>
    6d18:	09 7e       	andi	r16, 0xE9	; 233
    6d1a:	09 c0       	rjmp	.+18     	; 0x6d2e <vfprintf+0x5c6>
    6d1c:	02 ff       	sbrs	r16, 2
    6d1e:	06 c0       	rjmp	.+12     	; 0x6d2c <vfprintf+0x5c4>
    6d20:	d3 94       	inc	r13
    6d22:	d3 94       	inc	r13
    6d24:	04 c0       	rjmp	.+8      	; 0x6d2e <vfprintf+0x5c6>
    6d26:	80 2f       	mov	r24, r16
    6d28:	86 78       	andi	r24, 0x86	; 134
    6d2a:	09 f0       	breq	.+2      	; 0x6d2e <vfprintf+0x5c6>
    6d2c:	d3 94       	inc	r13
    6d2e:	03 fd       	sbrc	r16, 3
    6d30:	10 c0       	rjmp	.+32     	; 0x6d52 <vfprintf+0x5ea>
    6d32:	00 ff       	sbrs	r16, 0
    6d34:	06 c0       	rjmp	.+12     	; 0x6d42 <vfprintf+0x5da>
    6d36:	1c 2d       	mov	r17, r12
    6d38:	d5 14       	cp	r13, r5
    6d3a:	78 f4       	brcc	.+30     	; 0x6d5a <vfprintf+0x5f2>
    6d3c:	15 0d       	add	r17, r5
    6d3e:	1d 19       	sub	r17, r13
    6d40:	0c c0       	rjmp	.+24     	; 0x6d5a <vfprintf+0x5f2>
    6d42:	d5 14       	cp	r13, r5
    6d44:	50 f4       	brcc	.+20     	; 0x6d5a <vfprintf+0x5f2>
    6d46:	b7 01       	movw	r22, r14
    6d48:	80 e2       	ldi	r24, 0x20	; 32
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	c3 d1       	rcall	.+902    	; 0x70d4 <fputc>
    6d4e:	d3 94       	inc	r13
    6d50:	f8 cf       	rjmp	.-16     	; 0x6d42 <vfprintf+0x5da>
    6d52:	d5 14       	cp	r13, r5
    6d54:	10 f4       	brcc	.+4      	; 0x6d5a <vfprintf+0x5f2>
    6d56:	5d 18       	sub	r5, r13
    6d58:	01 c0       	rjmp	.+2      	; 0x6d5c <vfprintf+0x5f4>
    6d5a:	51 2c       	mov	r5, r1
    6d5c:	04 ff       	sbrs	r16, 4
    6d5e:	0f c0       	rjmp	.+30     	; 0x6d7e <vfprintf+0x616>
    6d60:	b7 01       	movw	r22, r14
    6d62:	80 e3       	ldi	r24, 0x30	; 48
    6d64:	90 e0       	ldi	r25, 0x00	; 0
    6d66:	b6 d1       	rcall	.+876    	; 0x70d4 <fputc>
    6d68:	02 ff       	sbrs	r16, 2
    6d6a:	16 c0       	rjmp	.+44     	; 0x6d98 <vfprintf+0x630>
    6d6c:	01 fd       	sbrc	r16, 1
    6d6e:	03 c0       	rjmp	.+6      	; 0x6d76 <vfprintf+0x60e>
    6d70:	88 e7       	ldi	r24, 0x78	; 120
    6d72:	90 e0       	ldi	r25, 0x00	; 0
    6d74:	02 c0       	rjmp	.+4      	; 0x6d7a <vfprintf+0x612>
    6d76:	88 e5       	ldi	r24, 0x58	; 88
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	b7 01       	movw	r22, r14
    6d7c:	0c c0       	rjmp	.+24     	; 0x6d96 <vfprintf+0x62e>
    6d7e:	80 2f       	mov	r24, r16
    6d80:	86 78       	andi	r24, 0x86	; 134
    6d82:	51 f0       	breq	.+20     	; 0x6d98 <vfprintf+0x630>
    6d84:	01 ff       	sbrs	r16, 1
    6d86:	02 c0       	rjmp	.+4      	; 0x6d8c <vfprintf+0x624>
    6d88:	8b e2       	ldi	r24, 0x2B	; 43
    6d8a:	01 c0       	rjmp	.+2      	; 0x6d8e <vfprintf+0x626>
    6d8c:	80 e2       	ldi	r24, 0x20	; 32
    6d8e:	07 fd       	sbrc	r16, 7
    6d90:	8d e2       	ldi	r24, 0x2D	; 45
    6d92:	b7 01       	movw	r22, r14
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	9e d1       	rcall	.+828    	; 0x70d4 <fputc>
    6d98:	c1 16       	cp	r12, r17
    6d9a:	30 f4       	brcc	.+12     	; 0x6da8 <vfprintf+0x640>
    6d9c:	b7 01       	movw	r22, r14
    6d9e:	80 e3       	ldi	r24, 0x30	; 48
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	98 d1       	rcall	.+816    	; 0x70d4 <fputc>
    6da4:	11 50       	subi	r17, 0x01	; 1
    6da6:	f8 cf       	rjmp	.-16     	; 0x6d98 <vfprintf+0x630>
    6da8:	ca 94       	dec	r12
    6daa:	f3 01       	movw	r30, r6
    6dac:	ec 0d       	add	r30, r12
    6dae:	f1 1d       	adc	r31, r1
    6db0:	80 81       	ld	r24, Z
    6db2:	b7 01       	movw	r22, r14
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	8e d1       	rcall	.+796    	; 0x70d4 <fputc>
    6db8:	c1 10       	cpse	r12, r1
    6dba:	f6 cf       	rjmp	.-20     	; 0x6da8 <vfprintf+0x640>
    6dbc:	15 c0       	rjmp	.+42     	; 0x6de8 <vfprintf+0x680>
    6dbe:	f4 e0       	ldi	r31, 0x04	; 4
    6dc0:	f5 15       	cp	r31, r5
    6dc2:	50 f5       	brcc	.+84     	; 0x6e18 <vfprintf+0x6b0>
    6dc4:	84 e0       	ldi	r24, 0x04	; 4
    6dc6:	58 1a       	sub	r5, r24
    6dc8:	93 fe       	sbrs	r9, 3
    6dca:	1e c0       	rjmp	.+60     	; 0x6e08 <vfprintf+0x6a0>
    6dcc:	01 11       	cpse	r16, r1
    6dce:	25 c0       	rjmp	.+74     	; 0x6e1a <vfprintf+0x6b2>
    6dd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    6dd2:	23 ff       	sbrs	r18, 3
    6dd4:	27 c0       	rjmp	.+78     	; 0x6e24 <vfprintf+0x6bc>
    6dd6:	00 e3       	ldi	r16, 0x30	; 48
    6dd8:	11 e0       	ldi	r17, 0x01	; 1
    6dda:	39 2d       	mov	r19, r9
    6ddc:	30 71       	andi	r19, 0x10	; 16
    6dde:	93 2e       	mov	r9, r19
    6de0:	f8 01       	movw	r30, r16
    6de2:	84 91       	lpm	r24, Z
    6de4:	81 11       	cpse	r24, r1
    6de6:	21 c0       	rjmp	.+66     	; 0x6e2a <vfprintf+0x6c2>
    6de8:	55 20       	and	r5, r5
    6dea:	09 f4       	brne	.+2      	; 0x6dee <vfprintf+0x686>
    6dec:	fc cc       	rjmp	.-1544   	; 0x67e6 <vfprintf+0x7e>
    6dee:	b7 01       	movw	r22, r14
    6df0:	80 e2       	ldi	r24, 0x20	; 32
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	6f d1       	rcall	.+734    	; 0x70d4 <fputc>
    6df6:	5a 94       	dec	r5
    6df8:	f7 cf       	rjmp	.-18     	; 0x6de8 <vfprintf+0x680>
    6dfa:	f7 01       	movw	r30, r14
    6dfc:	86 81       	ldd	r24, Z+6	; 0x06
    6dfe:	97 81       	ldd	r25, Z+7	; 0x07
    6e00:	23 c0       	rjmp	.+70     	; 0x6e48 <vfprintf+0x6e0>
    6e02:	8f ef       	ldi	r24, 0xFF	; 255
    6e04:	9f ef       	ldi	r25, 0xFF	; 255
    6e06:	20 c0       	rjmp	.+64     	; 0x6e48 <vfprintf+0x6e0>
    6e08:	b7 01       	movw	r22, r14
    6e0a:	80 e2       	ldi	r24, 0x20	; 32
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	62 d1       	rcall	.+708    	; 0x70d4 <fputc>
    6e10:	5a 94       	dec	r5
    6e12:	51 10       	cpse	r5, r1
    6e14:	f9 cf       	rjmp	.-14     	; 0x6e08 <vfprintf+0x6a0>
    6e16:	da cf       	rjmp	.-76     	; 0x6dcc <vfprintf+0x664>
    6e18:	51 2c       	mov	r5, r1
    6e1a:	b7 01       	movw	r22, r14
    6e1c:	80 2f       	mov	r24, r16
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	59 d1       	rcall	.+690    	; 0x70d4 <fputc>
    6e22:	d6 cf       	rjmp	.-84     	; 0x6dd0 <vfprintf+0x668>
    6e24:	04 e3       	ldi	r16, 0x34	; 52
    6e26:	11 e0       	ldi	r17, 0x01	; 1
    6e28:	d8 cf       	rjmp	.-80     	; 0x6dda <vfprintf+0x672>
    6e2a:	91 10       	cpse	r9, r1
    6e2c:	80 52       	subi	r24, 0x20	; 32
    6e2e:	b7 01       	movw	r22, r14
    6e30:	90 e0       	ldi	r25, 0x00	; 0
    6e32:	50 d1       	rcall	.+672    	; 0x70d4 <fputc>
    6e34:	0f 5f       	subi	r16, 0xFF	; 255
    6e36:	1f 4f       	sbci	r17, 0xFF	; 255
    6e38:	d3 cf       	rjmp	.-90     	; 0x6de0 <vfprintf+0x678>
    6e3a:	23 e0       	ldi	r18, 0x03	; 3
    6e3c:	25 15       	cp	r18, r5
    6e3e:	10 f4       	brcc	.+4      	; 0x6e44 <vfprintf+0x6dc>
    6e40:	83 e0       	ldi	r24, 0x03	; 3
    6e42:	c1 cf       	rjmp	.-126    	; 0x6dc6 <vfprintf+0x65e>
    6e44:	51 2c       	mov	r5, r1
    6e46:	c4 cf       	rjmp	.-120    	; 0x6dd0 <vfprintf+0x668>
    6e48:	60 96       	adiw	r28, 0x10	; 16
    6e4a:	0f b6       	in	r0, 0x3f	; 63
    6e4c:	f8 94       	cli
    6e4e:	de bf       	out	0x3e, r29	; 62
    6e50:	0f be       	out	0x3f, r0	; 63
    6e52:	cd bf       	out	0x3d, r28	; 61
    6e54:	df 91       	pop	r29
    6e56:	cf 91       	pop	r28
    6e58:	1f 91       	pop	r17
    6e5a:	0f 91       	pop	r16
    6e5c:	ff 90       	pop	r15
    6e5e:	ef 90       	pop	r14
    6e60:	df 90       	pop	r13
    6e62:	cf 90       	pop	r12
    6e64:	bf 90       	pop	r11
    6e66:	af 90       	pop	r10
    6e68:	9f 90       	pop	r9
    6e6a:	8f 90       	pop	r8
    6e6c:	7f 90       	pop	r7
    6e6e:	6f 90       	pop	r6
    6e70:	5f 90       	pop	r5
    6e72:	4f 90       	pop	r4
    6e74:	3f 90       	pop	r3
    6e76:	2f 90       	pop	r2
    6e78:	08 95       	ret

00006e7a <__divmodhi4>:
    6e7a:	97 fb       	bst	r25, 7
    6e7c:	07 2e       	mov	r0, r23
    6e7e:	16 f4       	brtc	.+4      	; 0x6e84 <__divmodhi4+0xa>
    6e80:	00 94       	com	r0
    6e82:	06 d0       	rcall	.+12     	; 0x6e90 <__divmodhi4_neg1>
    6e84:	77 fd       	sbrc	r23, 7
    6e86:	08 d0       	rcall	.+16     	; 0x6e98 <__divmodhi4_neg2>
    6e88:	1a d0       	rcall	.+52     	; 0x6ebe <__udivmodhi4>
    6e8a:	07 fc       	sbrc	r0, 7
    6e8c:	05 d0       	rcall	.+10     	; 0x6e98 <__divmodhi4_neg2>
    6e8e:	3e f4       	brtc	.+14     	; 0x6e9e <__divmodhi4_exit>

00006e90 <__divmodhi4_neg1>:
    6e90:	90 95       	com	r25
    6e92:	81 95       	neg	r24
    6e94:	9f 4f       	sbci	r25, 0xFF	; 255
    6e96:	08 95       	ret

00006e98 <__divmodhi4_neg2>:
    6e98:	70 95       	com	r23
    6e9a:	61 95       	neg	r22
    6e9c:	7f 4f       	sbci	r23, 0xFF	; 255

00006e9e <__divmodhi4_exit>:
    6e9e:	08 95       	ret

00006ea0 <__umulhisi3>:
    6ea0:	a2 9f       	mul	r26, r18
    6ea2:	b0 01       	movw	r22, r0
    6ea4:	b3 9f       	mul	r27, r19
    6ea6:	c0 01       	movw	r24, r0
    6ea8:	a3 9f       	mul	r26, r19
    6eaa:	70 0d       	add	r23, r0
    6eac:	81 1d       	adc	r24, r1
    6eae:	11 24       	eor	r1, r1
    6eb0:	91 1d       	adc	r25, r1
    6eb2:	b2 9f       	mul	r27, r18
    6eb4:	70 0d       	add	r23, r0
    6eb6:	81 1d       	adc	r24, r1
    6eb8:	11 24       	eor	r1, r1
    6eba:	91 1d       	adc	r25, r1
    6ebc:	08 95       	ret

00006ebe <__udivmodhi4>:
    6ebe:	aa 1b       	sub	r26, r26
    6ec0:	bb 1b       	sub	r27, r27
    6ec2:	51 e1       	ldi	r21, 0x11	; 17
    6ec4:	07 c0       	rjmp	.+14     	; 0x6ed4 <__udivmodhi4_ep>

00006ec6 <__udivmodhi4_loop>:
    6ec6:	aa 1f       	adc	r26, r26
    6ec8:	bb 1f       	adc	r27, r27
    6eca:	a6 17       	cp	r26, r22
    6ecc:	b7 07       	cpc	r27, r23
    6ece:	10 f0       	brcs	.+4      	; 0x6ed4 <__udivmodhi4_ep>
    6ed0:	a6 1b       	sub	r26, r22
    6ed2:	b7 0b       	sbc	r27, r23

00006ed4 <__udivmodhi4_ep>:
    6ed4:	88 1f       	adc	r24, r24
    6ed6:	99 1f       	adc	r25, r25
    6ed8:	5a 95       	dec	r21
    6eda:	a9 f7       	brne	.-22     	; 0x6ec6 <__udivmodhi4_loop>
    6edc:	80 95       	com	r24
    6ede:	90 95       	com	r25
    6ee0:	bc 01       	movw	r22, r24
    6ee2:	cd 01       	movw	r24, r26
    6ee4:	08 95       	ret

00006ee6 <__ftoa_engine>:
    6ee6:	28 30       	cpi	r18, 0x08	; 8
    6ee8:	08 f0       	brcs	.+2      	; 0x6eec <__ftoa_engine+0x6>
    6eea:	27 e0       	ldi	r18, 0x07	; 7
    6eec:	33 27       	eor	r19, r19
    6eee:	da 01       	movw	r26, r20
    6ef0:	99 0f       	add	r25, r25
    6ef2:	31 1d       	adc	r19, r1
    6ef4:	87 fd       	sbrc	r24, 7
    6ef6:	91 60       	ori	r25, 0x01	; 1
    6ef8:	00 96       	adiw	r24, 0x00	; 0
    6efa:	61 05       	cpc	r22, r1
    6efc:	71 05       	cpc	r23, r1
    6efe:	39 f4       	brne	.+14     	; 0x6f0e <__ftoa_engine+0x28>
    6f00:	32 60       	ori	r19, 0x02	; 2
    6f02:	2e 5f       	subi	r18, 0xFE	; 254
    6f04:	3d 93       	st	X+, r19
    6f06:	30 e3       	ldi	r19, 0x30	; 48
    6f08:	2a 95       	dec	r18
    6f0a:	e1 f7       	brne	.-8      	; 0x6f04 <__ftoa_engine+0x1e>
    6f0c:	08 95       	ret
    6f0e:	9f 3f       	cpi	r25, 0xFF	; 255
    6f10:	30 f0       	brcs	.+12     	; 0x6f1e <__ftoa_engine+0x38>
    6f12:	80 38       	cpi	r24, 0x80	; 128
    6f14:	71 05       	cpc	r23, r1
    6f16:	61 05       	cpc	r22, r1
    6f18:	09 f0       	breq	.+2      	; 0x6f1c <__ftoa_engine+0x36>
    6f1a:	3c 5f       	subi	r19, 0xFC	; 252
    6f1c:	3c 5f       	subi	r19, 0xFC	; 252
    6f1e:	3d 93       	st	X+, r19
    6f20:	91 30       	cpi	r25, 0x01	; 1
    6f22:	08 f0       	brcs	.+2      	; 0x6f26 <__ftoa_engine+0x40>
    6f24:	80 68       	ori	r24, 0x80	; 128
    6f26:	91 1d       	adc	r25, r1
    6f28:	df 93       	push	r29
    6f2a:	cf 93       	push	r28
    6f2c:	1f 93       	push	r17
    6f2e:	0f 93       	push	r16
    6f30:	ff 92       	push	r15
    6f32:	ef 92       	push	r14
    6f34:	19 2f       	mov	r17, r25
    6f36:	98 7f       	andi	r25, 0xF8	; 248
    6f38:	96 95       	lsr	r25
    6f3a:	e9 2f       	mov	r30, r25
    6f3c:	96 95       	lsr	r25
    6f3e:	96 95       	lsr	r25
    6f40:	e9 0f       	add	r30, r25
    6f42:	ff 27       	eor	r31, r31
    6f44:	ee 56       	subi	r30, 0x6E	; 110
    6f46:	fe 4f       	sbci	r31, 0xFE	; 254
    6f48:	99 27       	eor	r25, r25
    6f4a:	33 27       	eor	r19, r19
    6f4c:	ee 24       	eor	r14, r14
    6f4e:	ff 24       	eor	r15, r15
    6f50:	a7 01       	movw	r20, r14
    6f52:	e7 01       	movw	r28, r14
    6f54:	05 90       	lpm	r0, Z+
    6f56:	08 94       	sec
    6f58:	07 94       	ror	r0
    6f5a:	28 f4       	brcc	.+10     	; 0x6f66 <__ftoa_engine+0x80>
    6f5c:	36 0f       	add	r19, r22
    6f5e:	e7 1e       	adc	r14, r23
    6f60:	f8 1e       	adc	r15, r24
    6f62:	49 1f       	adc	r20, r25
    6f64:	51 1d       	adc	r21, r1
    6f66:	66 0f       	add	r22, r22
    6f68:	77 1f       	adc	r23, r23
    6f6a:	88 1f       	adc	r24, r24
    6f6c:	99 1f       	adc	r25, r25
    6f6e:	06 94       	lsr	r0
    6f70:	a1 f7       	brne	.-24     	; 0x6f5a <__ftoa_engine+0x74>
    6f72:	05 90       	lpm	r0, Z+
    6f74:	07 94       	ror	r0
    6f76:	28 f4       	brcc	.+10     	; 0x6f82 <__ftoa_engine+0x9c>
    6f78:	e7 0e       	add	r14, r23
    6f7a:	f8 1e       	adc	r15, r24
    6f7c:	49 1f       	adc	r20, r25
    6f7e:	56 1f       	adc	r21, r22
    6f80:	c1 1d       	adc	r28, r1
    6f82:	77 0f       	add	r23, r23
    6f84:	88 1f       	adc	r24, r24
    6f86:	99 1f       	adc	r25, r25
    6f88:	66 1f       	adc	r22, r22
    6f8a:	06 94       	lsr	r0
    6f8c:	a1 f7       	brne	.-24     	; 0x6f76 <__ftoa_engine+0x90>
    6f8e:	05 90       	lpm	r0, Z+
    6f90:	07 94       	ror	r0
    6f92:	28 f4       	brcc	.+10     	; 0x6f9e <__ftoa_engine+0xb8>
    6f94:	f8 0e       	add	r15, r24
    6f96:	49 1f       	adc	r20, r25
    6f98:	56 1f       	adc	r21, r22
    6f9a:	c7 1f       	adc	r28, r23
    6f9c:	d1 1d       	adc	r29, r1
    6f9e:	88 0f       	add	r24, r24
    6fa0:	99 1f       	adc	r25, r25
    6fa2:	66 1f       	adc	r22, r22
    6fa4:	77 1f       	adc	r23, r23
    6fa6:	06 94       	lsr	r0
    6fa8:	a1 f7       	brne	.-24     	; 0x6f92 <__ftoa_engine+0xac>
    6faa:	05 90       	lpm	r0, Z+
    6fac:	07 94       	ror	r0
    6fae:	20 f4       	brcc	.+8      	; 0x6fb8 <__ftoa_engine+0xd2>
    6fb0:	49 0f       	add	r20, r25
    6fb2:	56 1f       	adc	r21, r22
    6fb4:	c7 1f       	adc	r28, r23
    6fb6:	d8 1f       	adc	r29, r24
    6fb8:	99 0f       	add	r25, r25
    6fba:	66 1f       	adc	r22, r22
    6fbc:	77 1f       	adc	r23, r23
    6fbe:	88 1f       	adc	r24, r24
    6fc0:	06 94       	lsr	r0
    6fc2:	a9 f7       	brne	.-22     	; 0x6fae <__ftoa_engine+0xc8>
    6fc4:	84 91       	lpm	r24, Z
    6fc6:	10 95       	com	r17
    6fc8:	17 70       	andi	r17, 0x07	; 7
    6fca:	41 f0       	breq	.+16     	; 0x6fdc <__ftoa_engine+0xf6>
    6fcc:	d6 95       	lsr	r29
    6fce:	c7 95       	ror	r28
    6fd0:	57 95       	ror	r21
    6fd2:	47 95       	ror	r20
    6fd4:	f7 94       	ror	r15
    6fd6:	e7 94       	ror	r14
    6fd8:	1a 95       	dec	r17
    6fda:	c1 f7       	brne	.-16     	; 0x6fcc <__ftoa_engine+0xe6>
    6fdc:	e8 e3       	ldi	r30, 0x38	; 56
    6fde:	f1 e0       	ldi	r31, 0x01	; 1
    6fe0:	68 94       	set
    6fe2:	15 90       	lpm	r1, Z+
    6fe4:	15 91       	lpm	r17, Z+
    6fe6:	35 91       	lpm	r19, Z+
    6fe8:	65 91       	lpm	r22, Z+
    6fea:	95 91       	lpm	r25, Z+
    6fec:	05 90       	lpm	r0, Z+
    6fee:	7f e2       	ldi	r23, 0x2F	; 47
    6ff0:	73 95       	inc	r23
    6ff2:	e1 18       	sub	r14, r1
    6ff4:	f1 0a       	sbc	r15, r17
    6ff6:	43 0b       	sbc	r20, r19
    6ff8:	56 0b       	sbc	r21, r22
    6ffa:	c9 0b       	sbc	r28, r25
    6ffc:	d0 09       	sbc	r29, r0
    6ffe:	c0 f7       	brcc	.-16     	; 0x6ff0 <__ftoa_engine+0x10a>
    7000:	e1 0c       	add	r14, r1
    7002:	f1 1e       	adc	r15, r17
    7004:	43 1f       	adc	r20, r19
    7006:	56 1f       	adc	r21, r22
    7008:	c9 1f       	adc	r28, r25
    700a:	d0 1d       	adc	r29, r0
    700c:	7e f4       	brtc	.+30     	; 0x702c <__ftoa_engine+0x146>
    700e:	70 33       	cpi	r23, 0x30	; 48
    7010:	11 f4       	brne	.+4      	; 0x7016 <__ftoa_engine+0x130>
    7012:	8a 95       	dec	r24
    7014:	e6 cf       	rjmp	.-52     	; 0x6fe2 <__ftoa_engine+0xfc>
    7016:	e8 94       	clt
    7018:	01 50       	subi	r16, 0x01	; 1
    701a:	30 f0       	brcs	.+12     	; 0x7028 <__ftoa_engine+0x142>
    701c:	08 0f       	add	r16, r24
    701e:	0a f4       	brpl	.+2      	; 0x7022 <__ftoa_engine+0x13c>
    7020:	00 27       	eor	r16, r16
    7022:	02 17       	cp	r16, r18
    7024:	08 f4       	brcc	.+2      	; 0x7028 <__ftoa_engine+0x142>
    7026:	20 2f       	mov	r18, r16
    7028:	23 95       	inc	r18
    702a:	02 2f       	mov	r16, r18
    702c:	7a 33       	cpi	r23, 0x3A	; 58
    702e:	28 f0       	brcs	.+10     	; 0x703a <__ftoa_engine+0x154>
    7030:	79 e3       	ldi	r23, 0x39	; 57
    7032:	7d 93       	st	X+, r23
    7034:	2a 95       	dec	r18
    7036:	e9 f7       	brne	.-6      	; 0x7032 <__ftoa_engine+0x14c>
    7038:	10 c0       	rjmp	.+32     	; 0x705a <__ftoa_engine+0x174>
    703a:	7d 93       	st	X+, r23
    703c:	2a 95       	dec	r18
    703e:	89 f6       	brne	.-94     	; 0x6fe2 <__ftoa_engine+0xfc>
    7040:	06 94       	lsr	r0
    7042:	97 95       	ror	r25
    7044:	67 95       	ror	r22
    7046:	37 95       	ror	r19
    7048:	17 95       	ror	r17
    704a:	17 94       	ror	r1
    704c:	e1 18       	sub	r14, r1
    704e:	f1 0a       	sbc	r15, r17
    7050:	43 0b       	sbc	r20, r19
    7052:	56 0b       	sbc	r21, r22
    7054:	c9 0b       	sbc	r28, r25
    7056:	d0 09       	sbc	r29, r0
    7058:	98 f0       	brcs	.+38     	; 0x7080 <__ftoa_engine+0x19a>
    705a:	23 95       	inc	r18
    705c:	7e 91       	ld	r23, -X
    705e:	73 95       	inc	r23
    7060:	7a 33       	cpi	r23, 0x3A	; 58
    7062:	08 f0       	brcs	.+2      	; 0x7066 <__ftoa_engine+0x180>
    7064:	70 e3       	ldi	r23, 0x30	; 48
    7066:	7c 93       	st	X, r23
    7068:	20 13       	cpse	r18, r16
    706a:	b8 f7       	brcc	.-18     	; 0x705a <__ftoa_engine+0x174>
    706c:	7e 91       	ld	r23, -X
    706e:	70 61       	ori	r23, 0x10	; 16
    7070:	7d 93       	st	X+, r23
    7072:	30 f0       	brcs	.+12     	; 0x7080 <__ftoa_engine+0x19a>
    7074:	83 95       	inc	r24
    7076:	71 e3       	ldi	r23, 0x31	; 49
    7078:	7d 93       	st	X+, r23
    707a:	70 e3       	ldi	r23, 0x30	; 48
    707c:	2a 95       	dec	r18
    707e:	e1 f7       	brne	.-8      	; 0x7078 <__ftoa_engine+0x192>
    7080:	11 24       	eor	r1, r1
    7082:	ef 90       	pop	r14
    7084:	ff 90       	pop	r15
    7086:	0f 91       	pop	r16
    7088:	1f 91       	pop	r17
    708a:	cf 91       	pop	r28
    708c:	df 91       	pop	r29
    708e:	99 27       	eor	r25, r25
    7090:	87 fd       	sbrc	r24, 7
    7092:	90 95       	com	r25
    7094:	08 95       	ret

00007096 <strnlen_P>:
    7096:	fc 01       	movw	r30, r24
    7098:	05 90       	lpm	r0, Z+
    709a:	61 50       	subi	r22, 0x01	; 1
    709c:	70 40       	sbci	r23, 0x00	; 0
    709e:	01 10       	cpse	r0, r1
    70a0:	d8 f7       	brcc	.-10     	; 0x7098 <strnlen_P+0x2>
    70a2:	80 95       	com	r24
    70a4:	90 95       	com	r25
    70a6:	8e 0f       	add	r24, r30
    70a8:	9f 1f       	adc	r25, r31
    70aa:	08 95       	ret

000070ac <memcpy>:
    70ac:	fb 01       	movw	r30, r22
    70ae:	dc 01       	movw	r26, r24
    70b0:	02 c0       	rjmp	.+4      	; 0x70b6 <memcpy+0xa>
    70b2:	01 90       	ld	r0, Z+
    70b4:	0d 92       	st	X+, r0
    70b6:	41 50       	subi	r20, 0x01	; 1
    70b8:	50 40       	sbci	r21, 0x00	; 0
    70ba:	d8 f7       	brcc	.-10     	; 0x70b2 <memcpy+0x6>
    70bc:	08 95       	ret

000070be <strnlen>:
    70be:	fc 01       	movw	r30, r24
    70c0:	61 50       	subi	r22, 0x01	; 1
    70c2:	70 40       	sbci	r23, 0x00	; 0
    70c4:	01 90       	ld	r0, Z+
    70c6:	01 10       	cpse	r0, r1
    70c8:	d8 f7       	brcc	.-10     	; 0x70c0 <strnlen+0x2>
    70ca:	80 95       	com	r24
    70cc:	90 95       	com	r25
    70ce:	8e 0f       	add	r24, r30
    70d0:	9f 1f       	adc	r25, r31
    70d2:	08 95       	ret

000070d4 <fputc>:
    70d4:	0f 93       	push	r16
    70d6:	1f 93       	push	r17
    70d8:	cf 93       	push	r28
    70da:	df 93       	push	r29
    70dc:	fb 01       	movw	r30, r22
    70de:	23 81       	ldd	r18, Z+3	; 0x03
    70e0:	21 fd       	sbrc	r18, 1
    70e2:	03 c0       	rjmp	.+6      	; 0x70ea <fputc+0x16>
    70e4:	8f ef       	ldi	r24, 0xFF	; 255
    70e6:	9f ef       	ldi	r25, 0xFF	; 255
    70e8:	2c c0       	rjmp	.+88     	; 0x7142 <fputc+0x6e>
    70ea:	22 ff       	sbrs	r18, 2
    70ec:	16 c0       	rjmp	.+44     	; 0x711a <fputc+0x46>
    70ee:	46 81       	ldd	r20, Z+6	; 0x06
    70f0:	57 81       	ldd	r21, Z+7	; 0x07
    70f2:	24 81       	ldd	r18, Z+4	; 0x04
    70f4:	35 81       	ldd	r19, Z+5	; 0x05
    70f6:	42 17       	cp	r20, r18
    70f8:	53 07       	cpc	r21, r19
    70fa:	44 f4       	brge	.+16     	; 0x710c <fputc+0x38>
    70fc:	a0 81       	ld	r26, Z
    70fe:	b1 81       	ldd	r27, Z+1	; 0x01
    7100:	9d 01       	movw	r18, r26
    7102:	2f 5f       	subi	r18, 0xFF	; 255
    7104:	3f 4f       	sbci	r19, 0xFF	; 255
    7106:	31 83       	std	Z+1, r19	; 0x01
    7108:	20 83       	st	Z, r18
    710a:	8c 93       	st	X, r24
    710c:	26 81       	ldd	r18, Z+6	; 0x06
    710e:	37 81       	ldd	r19, Z+7	; 0x07
    7110:	2f 5f       	subi	r18, 0xFF	; 255
    7112:	3f 4f       	sbci	r19, 0xFF	; 255
    7114:	37 83       	std	Z+7, r19	; 0x07
    7116:	26 83       	std	Z+6, r18	; 0x06
    7118:	14 c0       	rjmp	.+40     	; 0x7142 <fputc+0x6e>
    711a:	8b 01       	movw	r16, r22
    711c:	ec 01       	movw	r28, r24
    711e:	fb 01       	movw	r30, r22
    7120:	00 84       	ldd	r0, Z+8	; 0x08
    7122:	f1 85       	ldd	r31, Z+9	; 0x09
    7124:	e0 2d       	mov	r30, r0
    7126:	19 95       	eicall
    7128:	89 2b       	or	r24, r25
    712a:	e1 f6       	brne	.-72     	; 0x70e4 <fputc+0x10>
    712c:	d8 01       	movw	r26, r16
    712e:	16 96       	adiw	r26, 0x06	; 6
    7130:	8d 91       	ld	r24, X+
    7132:	9c 91       	ld	r25, X
    7134:	17 97       	sbiw	r26, 0x07	; 7
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	17 96       	adiw	r26, 0x07	; 7
    713a:	9c 93       	st	X, r25
    713c:	8e 93       	st	-X, r24
    713e:	16 97       	sbiw	r26, 0x06	; 6
    7140:	ce 01       	movw	r24, r28
    7142:	df 91       	pop	r29
    7144:	cf 91       	pop	r28
    7146:	1f 91       	pop	r17
    7148:	0f 91       	pop	r16
    714a:	08 95       	ret

0000714c <vsprintf>:
    714c:	0f 93       	push	r16
    714e:	1f 93       	push	r17
    7150:	cf 93       	push	r28
    7152:	df 93       	push	r29
    7154:	cd b7       	in	r28, 0x3d	; 61
    7156:	de b7       	in	r29, 0x3e	; 62
    7158:	2e 97       	sbiw	r28, 0x0e	; 14
    715a:	0f b6       	in	r0, 0x3f	; 63
    715c:	f8 94       	cli
    715e:	de bf       	out	0x3e, r29	; 62
    7160:	0f be       	out	0x3f, r0	; 63
    7162:	cd bf       	out	0x3d, r28	; 61
    7164:	8c 01       	movw	r16, r24
    7166:	86 e0       	ldi	r24, 0x06	; 6
    7168:	8c 83       	std	Y+4, r24	; 0x04
    716a:	1a 83       	std	Y+2, r17	; 0x02
    716c:	09 83       	std	Y+1, r16	; 0x01
    716e:	8f ef       	ldi	r24, 0xFF	; 255
    7170:	9f e7       	ldi	r25, 0x7F	; 127
    7172:	9e 83       	std	Y+6, r25	; 0x06
    7174:	8d 83       	std	Y+5, r24	; 0x05
    7176:	ce 01       	movw	r24, r28
    7178:	01 96       	adiw	r24, 0x01	; 1
    717a:	f6 da       	rcall	.-2580   	; 0x6768 <vfprintf>
    717c:	ef 81       	ldd	r30, Y+7	; 0x07
    717e:	f8 85       	ldd	r31, Y+8	; 0x08
    7180:	e0 0f       	add	r30, r16
    7182:	f1 1f       	adc	r31, r17
    7184:	10 82       	st	Z, r1
    7186:	2e 96       	adiw	r28, 0x0e	; 14
    7188:	0f b6       	in	r0, 0x3f	; 63
    718a:	f8 94       	cli
    718c:	de bf       	out	0x3e, r29	; 62
    718e:	0f be       	out	0x3f, r0	; 63
    7190:	cd bf       	out	0x3d, r28	; 61
    7192:	df 91       	pop	r29
    7194:	cf 91       	pop	r28
    7196:	1f 91       	pop	r17
    7198:	0f 91       	pop	r16
    719a:	08 95       	ret

0000719c <__ultoa_invert>:
    719c:	fa 01       	movw	r30, r20
    719e:	aa 27       	eor	r26, r26
    71a0:	28 30       	cpi	r18, 0x08	; 8
    71a2:	51 f1       	breq	.+84     	; 0x71f8 <__ultoa_invert+0x5c>
    71a4:	20 31       	cpi	r18, 0x10	; 16
    71a6:	81 f1       	breq	.+96     	; 0x7208 <__ultoa_invert+0x6c>
    71a8:	e8 94       	clt
    71aa:	6f 93       	push	r22
    71ac:	6e 7f       	andi	r22, 0xFE	; 254
    71ae:	6e 5f       	subi	r22, 0xFE	; 254
    71b0:	7f 4f       	sbci	r23, 0xFF	; 255
    71b2:	8f 4f       	sbci	r24, 0xFF	; 255
    71b4:	9f 4f       	sbci	r25, 0xFF	; 255
    71b6:	af 4f       	sbci	r26, 0xFF	; 255
    71b8:	b1 e0       	ldi	r27, 0x01	; 1
    71ba:	3e d0       	rcall	.+124    	; 0x7238 <__ultoa_invert+0x9c>
    71bc:	b4 e0       	ldi	r27, 0x04	; 4
    71be:	3c d0       	rcall	.+120    	; 0x7238 <__ultoa_invert+0x9c>
    71c0:	67 0f       	add	r22, r23
    71c2:	78 1f       	adc	r23, r24
    71c4:	89 1f       	adc	r24, r25
    71c6:	9a 1f       	adc	r25, r26
    71c8:	a1 1d       	adc	r26, r1
    71ca:	68 0f       	add	r22, r24
    71cc:	79 1f       	adc	r23, r25
    71ce:	8a 1f       	adc	r24, r26
    71d0:	91 1d       	adc	r25, r1
    71d2:	a1 1d       	adc	r26, r1
    71d4:	6a 0f       	add	r22, r26
    71d6:	71 1d       	adc	r23, r1
    71d8:	81 1d       	adc	r24, r1
    71da:	91 1d       	adc	r25, r1
    71dc:	a1 1d       	adc	r26, r1
    71de:	20 d0       	rcall	.+64     	; 0x7220 <__ultoa_invert+0x84>
    71e0:	09 f4       	brne	.+2      	; 0x71e4 <__ultoa_invert+0x48>
    71e2:	68 94       	set
    71e4:	3f 91       	pop	r19
    71e6:	2a e0       	ldi	r18, 0x0A	; 10
    71e8:	26 9f       	mul	r18, r22
    71ea:	11 24       	eor	r1, r1
    71ec:	30 19       	sub	r19, r0
    71ee:	30 5d       	subi	r19, 0xD0	; 208
    71f0:	31 93       	st	Z+, r19
    71f2:	de f6       	brtc	.-74     	; 0x71aa <__ultoa_invert+0xe>
    71f4:	cf 01       	movw	r24, r30
    71f6:	08 95       	ret
    71f8:	46 2f       	mov	r20, r22
    71fa:	47 70       	andi	r20, 0x07	; 7
    71fc:	40 5d       	subi	r20, 0xD0	; 208
    71fe:	41 93       	st	Z+, r20
    7200:	b3 e0       	ldi	r27, 0x03	; 3
    7202:	0f d0       	rcall	.+30     	; 0x7222 <__ultoa_invert+0x86>
    7204:	c9 f7       	brne	.-14     	; 0x71f8 <__ultoa_invert+0x5c>
    7206:	f6 cf       	rjmp	.-20     	; 0x71f4 <__ultoa_invert+0x58>
    7208:	46 2f       	mov	r20, r22
    720a:	4f 70       	andi	r20, 0x0F	; 15
    720c:	40 5d       	subi	r20, 0xD0	; 208
    720e:	4a 33       	cpi	r20, 0x3A	; 58
    7210:	18 f0       	brcs	.+6      	; 0x7218 <__ultoa_invert+0x7c>
    7212:	49 5d       	subi	r20, 0xD9	; 217
    7214:	31 fd       	sbrc	r19, 1
    7216:	40 52       	subi	r20, 0x20	; 32
    7218:	41 93       	st	Z+, r20
    721a:	02 d0       	rcall	.+4      	; 0x7220 <__ultoa_invert+0x84>
    721c:	a9 f7       	brne	.-22     	; 0x7208 <__ultoa_invert+0x6c>
    721e:	ea cf       	rjmp	.-44     	; 0x71f4 <__ultoa_invert+0x58>
    7220:	b4 e0       	ldi	r27, 0x04	; 4
    7222:	a6 95       	lsr	r26
    7224:	97 95       	ror	r25
    7226:	87 95       	ror	r24
    7228:	77 95       	ror	r23
    722a:	67 95       	ror	r22
    722c:	ba 95       	dec	r27
    722e:	c9 f7       	brne	.-14     	; 0x7222 <__ultoa_invert+0x86>
    7230:	00 97       	sbiw	r24, 0x00	; 0
    7232:	61 05       	cpc	r22, r1
    7234:	71 05       	cpc	r23, r1
    7236:	08 95       	ret
    7238:	9b 01       	movw	r18, r22
    723a:	ac 01       	movw	r20, r24
    723c:	0a 2e       	mov	r0, r26
    723e:	06 94       	lsr	r0
    7240:	57 95       	ror	r21
    7242:	47 95       	ror	r20
    7244:	37 95       	ror	r19
    7246:	27 95       	ror	r18
    7248:	ba 95       	dec	r27
    724a:	c9 f7       	brne	.-14     	; 0x723e <__ultoa_invert+0xa2>
    724c:	62 0f       	add	r22, r18
    724e:	73 1f       	adc	r23, r19
    7250:	84 1f       	adc	r24, r20
    7252:	95 1f       	adc	r25, r21
    7254:	a0 1d       	adc	r26, r0
    7256:	08 95       	ret

00007258 <_exit>:
    7258:	f8 94       	cli

0000725a <__stop_program>:
    725a:	ff cf       	rjmp	.-2      	; 0x725a <__stop_program>
