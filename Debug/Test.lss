
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000568  00800200  00007292  00007326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  00800768  00800768  0000788e  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  0000788e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000791c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000810  00000000  00000000  0000795c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af8e  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002437  00000000  00000000  000130fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000653a  00000000  00000000  00015531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ae8  00000000  00000000  0001ba6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030ad  00000000  00000000  0001d554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b5bb  00000000  00000000  00020601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f0  00000000  00000000  0002bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__vector_3>
      10:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__vector_4>
      14:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 0d 30 	jmp	0x601a	; 0x601a <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	cb eb       	ldi	r28, 0xBB	; 187
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	e2 e9       	ldi	r30, 0x92	; 146
     25a:	f2 e7       	ldi	r31, 0x72	; 114
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a8 36       	cpi	r26, 0x68	; 104
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2c e1       	ldi	r18, 0x1C	; 28
     26e:	a8 e6       	ldi	r26, 0x68	; 104
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ae 32       	cpi	r26, 0x2E	; 46
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <main>
     280:	0c 94 47 39 	jmp	0x728e	; 0x728e <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <network_set_callback>
     294:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <__data_end+0x1>
     298:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <__data_end>
     29c:	ca e6       	ldi	r28, 0x6A	; 106
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 b1 19 	call	0x3362	; 0x3362 <xQueueCreateMutex>
     2b0:	90 93 f4 07 	sts	0x07F4, r25	; 0x8007f4 <connections+0x8a>
     2b4:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	ea e6       	ldi	r30, 0x6A	; 106
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 f6 07 	sts	0x07F6, r1	; 0x8007f6 <connections+0x8c>
     2ea:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	06 59       	subi	r16, 0x96	; 150
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 88 2b 	call	0x5710	; 0x5710 <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 41 2c 	call	0x5882	; 0x5882 <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	e6 59       	subi	r30, 0x96	; 150
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	a7 d6       	rcall	.+3406   	; 0x10d2 <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	85 59       	subi	r24, 0x95	; 149
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	95 d6       	rcall	.+3370   	; 0x10d2 <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	8b 58       	subi	r24, 0x8B	; 139
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	e6 59       	subi	r30, 0x96	; 150
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     404:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     408:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
     40c:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     41c:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     420:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	ca e6       	ldi	r28, 0x6A	; 106
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	5a d7       	rcall	.+3764   	; 0x12e6 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	57 d7       	rcall	.+3758   	; 0x12e6 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     452:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     456:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     492:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     496:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
     49a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     4be:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     4c2:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 73 07 	lds	r18, 0x0773	; 0x800773 <connections+0x9>
     4d2:	30 91 74 07 	lds	r19, 0x0774	; 0x800774 <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 7d 07 	lds	r18, 0x077D	; 0x80077d <connections+0x13>
     4ea:	30 91 7e 07 	lds	r19, 0x077E	; 0x80077e <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	8b e6       	ldi	r24, 0x6B	; 107
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	8b e6       	ldi	r24, 0x6B	; 107
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	85 e7       	ldi	r24, 0x75	; 117
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     558:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     55c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     56c:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     570:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <connections+0x20>
     5c2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     61c:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     620:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     634:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     638:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	ea e6       	ldi	r30, 0x6A	; 106
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     66a:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     66e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	ea e6       	ldi	r30, 0x6A	; 106
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	85 e7       	ldi	r24, 0x75	; 117
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8b e6       	ldi	r24, 0x6B	; 107
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	ea e6       	ldi	r30, 0x6A	; 106
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	85 e7       	ldi	r24, 0x75	; 117
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	8b e6       	ldi	r24, 0x6B	; 107
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <connections+0x89>
     7b2:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <connections+0x8a>
     7b6:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <connections+0x23>
     7ee:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 8e 07 	sts	0x078E, r25	; 0x80078e <connections+0x24>
     80c:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	0a e6       	ldi	r16, 0x6A	; 106
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	81 57       	subi	r24, 0x71	; 113
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	8f e8       	ldi	r24, 0x8F	; 143
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fa e6       	ldi	r31, 0x6A	; 106
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <__data_end>
     8be:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <vCOM_getData>:
    ui8TWI_write(0x02); // set pointer to measurement mode
    ui8TWI_write(0x00); // continous measurement
    vTWI_stop();
}

void vCOM_getData(int16_t *xCom, int16_t *yCom, int16_t *zCom){
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	7c 01       	movw	r14, r24
     f12:	eb 01       	movw	r28, r22
     f14:	8a 01       	movw	r16, r20
    ui8TWI_start(HMC5883L_WRITE);
     f16:	8c e3       	ldi	r24, 0x3C	; 60
     f18:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <ui8TWI_start>
    ui8TWI_write(0x03); // set pointer to X axis MSB
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <ui8TWI_write>
    vTWI_stop();
     f22:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <vTWI_stop>
    ui8TWI_start(HMC5883L_READ);
     f26:	8d e3       	ldi	r24, 0x3D	; 61
     f28:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <ui8TWI_start>
    *xCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f2c:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <ui8TWI_read_ack>
     f30:	f7 01       	movw	r30, r14
     f32:	10 82       	st	Z, r1
     f34:	81 83       	std	Z+1, r24	; 0x01
    *xCom |= ui8TWI_read_ack();
     f36:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <ui8TWI_read_ack>
     f3a:	f7 01       	movw	r30, r14
     f3c:	20 81       	ld	r18, Z
     f3e:	31 81       	ldd	r19, Z+1	; 0x01
     f40:	28 2b       	or	r18, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
    *zCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f46:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <ui8TWI_read_ack>
     f4a:	f8 01       	movw	r30, r16
     f4c:	10 82       	st	Z, r1
     f4e:	81 83       	std	Z+1, r24	; 0x01
    *zCom |= ui8TWI_read_ack();
     f50:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <ui8TWI_read_ack>
     f54:	f8 01       	movw	r30, r16
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
     f5a:	28 2b       	or	r18, r24
     f5c:	31 83       	std	Z+1, r19	; 0x01
     f5e:	20 83       	st	Z, r18
    *yCom = ((uint8_t)ui8TWI_read_ack())<<8;
     f60:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <ui8TWI_read_ack>
     f64:	18 82       	st	Y, r1
     f66:	89 83       	std	Y+1, r24	; 0x01
    *yCom |= ui8TWI_read_nack();
     f68:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <ui8TWI_read_nack>
     f6c:	28 81       	ld	r18, Y
     f6e:	39 81       	ldd	r19, Y+1	; 0x01
     f70:	28 2b       	or	r18, r24
     f72:	39 83       	std	Y+1, r19	; 0x01
     f74:	28 83       	st	Y, r18
    vTWI_stop();
     f76:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <vTWI_stop>
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <crc_ibutton_update>:
     f88:	86 27       	eor	r24, r22
     f8a:	98 e0       	ldi	r25, 0x08	; 8
     f8c:	2c e8       	ldi	r18, 0x8C	; 140
     f8e:	80 ff       	sbrs	r24, 0
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <crc_ibutton_update+0x10>
     f92:	86 95       	lsr	r24
     f94:	82 27       	eor	r24, r18
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <crc_ibutton_update+0x12>
     f98:	86 95       	lsr	r24
     f9a:	91 50       	subi	r25, 0x01	; 1
     f9c:	c1 f7       	brne	.-16     	; 0xf8e <crc_ibutton_update+0x6>
     f9e:	08 95       	ret

00000fa0 <calculate_crc>:
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	66 23       	and	r22, r22
     faa:	59 f0       	breq	.+22     	; 0xfc2 <calculate_crc+0x22>
     fac:	8c 01       	movw	r16, r24
     fae:	ec 01       	movw	r28, r24
     fb0:	06 0f       	add	r16, r22
     fb2:	11 1d       	adc	r17, r1
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	69 91       	ld	r22, Y+
     fb8:	e7 df       	rcall	.-50     	; 0xf88 <crc_ibutton_update>
     fba:	c0 17       	cp	r28, r16
     fbc:	d1 07       	cpc	r29, r17
     fbe:	d9 f7       	brne	.-10     	; 0xfb6 <calculate_crc+0x16>
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <calculate_crc+0x24>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     fce:	80 b3       	in	r24, 0x10	; 16
     fd0:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     fd2:	ec e7       	ldi	r30, 0x7C	; 124
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 6c       	ori	r24, 0xC0	; 192
     fda:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     fdc:	ea e7       	ldi	r30, 0x7A	; 122
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     fe6:	80 81       	ld	r24, Z
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	80 83       	st	Z, r24
     fec:	08 95       	ret

00000fee <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     fee:	ec e7       	ldi	r30, 0x7C	; 124
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     ff4:	90 81       	ld	r25, Z
     ff6:	90 6c       	ori	r25, 0xC0	; 192
     ff8:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     ffa:	ea e7       	ldi	r30, 0x7A	; 122
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z
    1000:	90 64       	ori	r25, 0x40	; 64
    1002:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
    1004:	90 81       	ld	r25, Z
    1006:	96 fd       	sbrc	r25, 6
    1008:	fd cf       	rjmp	.-6      	; 0x1004 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
    100a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    100e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
    1012:	e8 2f       	mov	r30, r24
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	26 95       	lsr	r18
    1018:	26 95       	lsr	r18
    101a:	30 e4       	ldi	r19, 0x40	; 64
    101c:	93 9f       	mul	r25, r19
    101e:	c0 01       	movw	r24, r0
    1020:	11 24       	eor	r1, r1
    1022:	82 2b       	or	r24, r18
    1024:	fe 2f       	mov	r31, r30
    1026:	ee 27       	eor	r30, r30
    1028:	e0 50       	subi	r30, 0x00	; 0
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	e8 0f       	add	r30, r24
    102e:	f1 1d       	adc	r31, r1
}
    1030:	80 81       	ld	r24, Z
    1032:	08 95       	ret

00001034 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
    1042:	c8 80       	ld	r12, Y
    1044:	d9 80       	ldd	r13, Y+1	; 0x01
    1046:	ea 80       	ldd	r14, Y+2	; 0x02
    1048:	fb 80       	ldd	r15, Y+3	; 0x03
    104a:	2b ed       	ldi	r18, 0xDB	; 219
    104c:	3f e0       	ldi	r19, 0x0F	; 15
    104e:	49 e4       	ldi	r20, 0x49	; 73
    1050:	50 e4       	ldi	r21, 0x40	; 64
    1052:	c7 01       	movw	r24, r14
    1054:	b6 01       	movw	r22, r12
    1056:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    105a:	18 16       	cp	r1, r24
    105c:	6c f4       	brge	.+26     	; 0x1078 <vFunc_Inf2pi+0x44>
    105e:	2b ed       	ldi	r18, 0xDB	; 219
    1060:	3f e0       	ldi	r19, 0x0F	; 15
    1062:	49 ec       	ldi	r20, 0xC9	; 201
    1064:	50 e4       	ldi	r21, 0x40	; 64
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    106e:	68 83       	st	Y, r22
    1070:	79 83       	std	Y+1, r23	; 0x01
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	9b 83       	std	Y+3, r25	; 0x03
    1076:	16 c0       	rjmp	.+44     	; 0x10a4 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
    1078:	2b ed       	ldi	r18, 0xDB	; 219
    107a:	3f e0       	ldi	r19, 0x0F	; 15
    107c:	49 e4       	ldi	r20, 0x49	; 73
    107e:	50 ec       	ldi	r21, 0xC0	; 192
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	0e 94 40 31 	call	0x6280	; 0x6280 <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	64 f4       	brge	.+24     	; 0x10a4 <vFunc_Inf2pi+0x70>
    108c:	2b ed       	ldi	r18, 0xDB	; 219
    108e:	3f e0       	ldi	r19, 0x0F	; 15
    1090:	49 ec       	ldi	r20, 0xC9	; 201
    1092:	50 e4       	ldi	r21, 0x40	; 64
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    109c:	68 83       	st	Y, r22
    109e:	79 83       	std	Y+1, r23	; 0x01
    10a0:	8a 83       	std	Y+2, r24	; 0x02
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    10a4:	88 81       	ld	r24, Y
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	aa 81       	ldd	r26, Y+2	; 0x02
    10aa:	bb 81       	ldd	r27, Y+3	; 0x03
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	9f 77       	andi	r25, 0x7F	; 127
    10b2:	2b ed       	ldi	r18, 0xDB	; 219
    10b4:	3f e0       	ldi	r19, 0x0F	; 15
    10b6:	49 e4       	ldi	r20, 0x49	; 73
    10b8:	50 e4       	ldi	r21, 0x40	; 64
    10ba:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	0c f4       	brge	.+2      	; 0x10c4 <vFunc_Inf2pi+0x90>
    10c2:	bf cf       	rjmp	.-130    	; 0x1042 <vFunc_Inf2pi+0xe>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    10e0:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    10e4:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <pxEnd>
    10e8:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <pxEnd+0x1>
    10ec:	89 2b       	or	r24, r25
    10ee:	41 f5       	brne	.+80     	; 0x1140 <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    10f0:	ef ef       	ldi	r30, 0xFF	; 255
    10f2:	f7 e0       	ldi	r31, 0x07	; 7
    10f4:	a3 e0       	ldi	r26, 0x03	; 3
    10f6:	b8 e0       	ldi	r27, 0x08	; 8
    10f8:	b1 83       	std	Z+1, r27	; 0x01
    10fa:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    10fc:	13 82       	std	Z+3, r1	; 0x03
    10fe:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1100:	ef ef       	ldi	r30, 0xFF	; 255
    1102:	f9 e1       	ldi	r31, 0x19	; 25
    1104:	f0 93 fe 07 	sts	0x07FE, r31	; 0x8007fe <pxEnd+0x1>
    1108:	e0 93 fd 07 	sts	0x07FD, r30	; 0x8007fd <pxEnd>
	pxEnd->xBlockSize = 0;
    110c:	13 82       	std	Z+3, r1	; 0x03
    110e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1110:	11 82       	std	Z+1, r1	; 0x01
    1112:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1114:	8c ef       	ldi	r24, 0xFC	; 252
    1116:	91 e1       	ldi	r25, 0x11	; 17
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
    111e:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1120:	ed 93       	st	X+, r30
    1122:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1124:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <xMinimumEverFreeBytesRemaining+0x1>
    1128:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    112c:	90 93 fc 07 	sts	0x07FC, r25	; 0x8007fc <xFreeBytesRemaining+0x1>
    1130:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e8       	ldi	r25, 0x80	; 128
    1138:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <xBlockAllocatedBit+0x1>
    113c:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    1140:	80 91 f7 07 	lds	r24, 0x07F7	; 0x8007f7 <xBlockAllocatedBit>
    1144:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <xBlockAllocatedBit+0x1>
    1148:	8c 23       	and	r24, r28
    114a:	9d 23       	and	r25, r29
    114c:	89 2b       	or	r24, r25
    114e:	09 f0       	breq	.+2      	; 0x1152 <pvPortMalloc+0x80>
    1150:	b2 c0       	rjmp	.+356    	; 0x12b6 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	09 f4       	brne	.+2      	; 0x1158 <pvPortMalloc+0x86>
    1156:	b2 c0       	rjmp	.+356    	; 0x12bc <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    1158:	ae 01       	movw	r20, r28
    115a:	4c 5f       	subi	r20, 0xFC	; 252
    115c:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    115e:	09 f4       	brne	.+2      	; 0x1162 <pvPortMalloc+0x90>
    1160:	b0 c0       	rjmp	.+352    	; 0x12c2 <pvPortMalloc+0x1f0>
    1162:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <xFreeBytesRemaining>
    1166:	90 91 fc 07 	lds	r25, 0x07FC	; 0x8007fc <xFreeBytesRemaining+0x1>
    116a:	84 17       	cp	r24, r20
    116c:	95 07       	cpc	r25, r21
    116e:	08 f4       	brcc	.+2      	; 0x1172 <pvPortMalloc+0xa0>
    1170:	ab c0       	rjmp	.+342    	; 0x12c8 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    1172:	e0 91 ff 07 	lds	r30, 0x07FF	; 0x8007ff <xStart>
    1176:	f0 91 00 08 	lds	r31, 0x0800	; 0x800800 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    117a:	af ef       	ldi	r26, 0xFF	; 255
    117c:	b7 e0       	ldi	r27, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <pvPortMalloc+0xb2>
    1180:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    1182:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1184:	22 81       	ldd	r18, Z+2	; 0x02
    1186:	33 81       	ldd	r19, Z+3	; 0x03
    1188:	24 17       	cp	r18, r20
    118a:	35 07       	cpc	r19, r21
    118c:	28 f4       	brcc	.+10     	; 0x1198 <pvPortMalloc+0xc6>
    118e:	20 81       	ld	r18, Z
    1190:	31 81       	ldd	r19, Z+1	; 0x01
    1192:	21 15       	cp	r18, r1
    1194:	31 05       	cpc	r19, r1
    1196:	a1 f7       	brne	.-24     	; 0x1180 <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1198:	60 91 fd 07 	lds	r22, 0x07FD	; 0x8007fd <pxEnd>
    119c:	70 91 fe 07 	lds	r23, 0x07FE	; 0x8007fe <pxEnd+0x1>
    11a0:	e6 17       	cp	r30, r22
    11a2:	f7 07       	cpc	r31, r23
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <pvPortMalloc+0xd6>
    11a6:	93 c0       	rjmp	.+294    	; 0x12ce <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    11a8:	cd 91       	ld	r28, X+
    11aa:	dc 91       	ld	r29, X
    11ac:	11 97       	sbiw	r26, 0x01	; 1
    11ae:	7e 01       	movw	r14, r28
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	e8 0e       	add	r14, r24
    11b4:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    11b6:	80 81       	ld	r24, Z
    11b8:	91 81       	ldd	r25, Z+1	; 0x01
    11ba:	8d 93       	st	X+, r24
    11bc:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	84 1b       	sub	r24, r20
    11c4:	95 0b       	sbc	r25, r21
    11c6:	89 30       	cpi	r24, 0x09	; 9
    11c8:	91 05       	cpc	r25, r1
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <pvPortMalloc+0xfc>
    11cc:	52 c0       	rjmp	.+164    	; 0x1272 <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    11ce:	9f 01       	movw	r18, r30
    11d0:	24 0f       	add	r18, r20
    11d2:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    11d4:	d9 01       	movw	r26, r18
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	9c 93       	st	X, r25
    11da:	8e 93       	st	-X, r24
    11dc:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    11de:	53 83       	std	Z+3, r21	; 0x03
    11e0:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    11e2:	af ef       	ldi	r26, 0xFF	; 255
    11e4:	b7 e0       	ldi	r27, 0x07	; 7
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <pvPortMalloc+0x118>
    11e8:	dc 01       	movw	r26, r24
    11ea:	8d 91       	ld	r24, X+
    11ec:	9c 91       	ld	r25, X
    11ee:	11 97       	sbiw	r26, 0x01	; 1
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	c8 f3       	brcs	.-14     	; 0x11e8 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	4d 91       	ld	r20, X+
    11fa:	5c 91       	ld	r21, X
    11fc:	13 97       	sbiw	r26, 0x03	; 3
    11fe:	8d 01       	movw	r16, r26
    1200:	04 0f       	add	r16, r20
    1202:	15 1f       	adc	r17, r21
    1204:	20 17       	cp	r18, r16
    1206:	31 07       	cpc	r19, r17
    1208:	51 f4       	brne	.+20     	; 0x121e <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    120a:	e9 01       	movw	r28, r18
    120c:	2a 81       	ldd	r18, Y+2	; 0x02
    120e:	3b 81       	ldd	r19, Y+3	; 0x03
    1210:	42 0f       	add	r20, r18
    1212:	53 1f       	adc	r21, r19
    1214:	13 96       	adiw	r26, 0x03	; 3
    1216:	5c 93       	st	X, r21
    1218:	4e 93       	st	-X, r20
    121a:	12 97       	sbiw	r26, 0x02	; 2
    121c:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    121e:	e9 01       	movw	r28, r18
    1220:	4a 81       	ldd	r20, Y+2	; 0x02
    1222:	5b 81       	ldd	r21, Y+3	; 0x03
    1224:	89 01       	movw	r16, r18
    1226:	04 0f       	add	r16, r20
    1228:	15 1f       	adc	r17, r21
    122a:	80 17       	cp	r24, r16
    122c:	91 07       	cpc	r25, r17
    122e:	c9 f4       	brne	.+50     	; 0x1262 <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1230:	60 17       	cp	r22, r16
    1232:	71 07       	cpc	r23, r17
    1234:	91 f0       	breq	.+36     	; 0x125a <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1236:	e8 01       	movw	r28, r16
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	48 0f       	add	r20, r24
    123e:	59 1f       	adc	r21, r25
    1240:	e9 01       	movw	r28, r18
    1242:	5b 83       	std	Y+3, r21	; 0x03
    1244:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1246:	8d 91       	ld	r24, X+
    1248:	9c 91       	ld	r25, X
    124a:	11 97       	sbiw	r26, 0x01	; 1
    124c:	ec 01       	movw	r28, r24
    124e:	88 81       	ld	r24, Y
    1250:	99 81       	ldd	r25, Y+1	; 0x01
    1252:	e9 01       	movw	r28, r18
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	88 83       	st	Y, r24
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    125a:	e9 01       	movw	r28, r18
    125c:	79 83       	std	Y+1, r23	; 0x01
    125e:	68 83       	st	Y, r22
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1262:	e9 01       	movw	r28, r18
    1264:	99 83       	std	Y+1, r25	; 0x01
    1266:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1268:	a2 17       	cp	r26, r18
    126a:	b3 07       	cpc	r27, r19
    126c:	11 f0       	breq	.+4      	; 0x1272 <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    126e:	2d 93       	st	X+, r18
    1270:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    1272:	22 81       	ldd	r18, Z+2	; 0x02
    1274:	33 81       	ldd	r19, Z+3	; 0x03
    1276:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <xFreeBytesRemaining>
    127a:	90 91 fc 07 	lds	r25, 0x07FC	; 0x8007fc <xFreeBytesRemaining+0x1>
    127e:	82 1b       	sub	r24, r18
    1280:	93 0b       	sbc	r25, r19
    1282:	90 93 fc 07 	sts	0x07FC, r25	; 0x8007fc <xFreeBytesRemaining+0x1>
    1286:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    128a:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <xMinimumEverFreeBytesRemaining>
    128e:	50 91 fa 07 	lds	r21, 0x07FA	; 0x8007fa <xMinimumEverFreeBytesRemaining+0x1>
    1292:	84 17       	cp	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1298:	90 93 fa 07 	sts	0x07FA, r25	; 0x8007fa <xMinimumEverFreeBytesRemaining+0x1>
    129c:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    12a0:	80 91 f7 07 	lds	r24, 0x07F7	; 0x8007f7 <xBlockAllocatedBit>
    12a4:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <xBlockAllocatedBit+0x1>
    12a8:	28 2b       	or	r18, r24
    12aa:	39 2b       	or	r19, r25
    12ac:	33 83       	std	Z+3, r19	; 0x03
    12ae:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    12b0:	11 82       	std	Z+1, r1	; 0x01
    12b2:	10 82       	st	Z, r1
    12b4:	0e c0       	rjmp	.+28     	; 0x12d2 <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    12b6:	e1 2c       	mov	r14, r1
    12b8:	f1 2c       	mov	r15, r1
    12ba:	0b c0       	rjmp	.+22     	; 0x12d2 <pvPortMalloc+0x200>
    12bc:	e1 2c       	mov	r14, r1
    12be:	f1 2c       	mov	r15, r1
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <pvPortMalloc+0x200>
    12c2:	e1 2c       	mov	r14, r1
    12c4:	f1 2c       	mov	r15, r1
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <pvPortMalloc+0x200>
    12c8:	e1 2c       	mov	r14, r1
    12ca:	f1 2c       	mov	r15, r1
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <pvPortMalloc+0x200>
    12ce:	e1 2c       	mov	r14, r1
    12d0:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12d2:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    12d6:	c7 01       	movw	r24, r14
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <vPortFree+0xa>
    12ee:	68 c0       	rjmp	.+208    	; 0x13c0 <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    12f0:	fc 01       	movw	r30, r24
    12f2:	34 97       	sbiw	r30, 0x04	; 4
    12f4:	22 81       	ldd	r18, Z+2	; 0x02
    12f6:	33 81       	ldd	r19, Z+3	; 0x03
    12f8:	40 91 f7 07 	lds	r20, 0x07F7	; 0x8007f7 <xBlockAllocatedBit>
    12fc:	50 91 f8 07 	lds	r21, 0x07F8	; 0x8007f8 <xBlockAllocatedBit+0x1>
    1300:	b9 01       	movw	r22, r18
    1302:	64 23       	and	r22, r20
    1304:	75 23       	and	r23, r21
    1306:	67 2b       	or	r22, r23
    1308:	09 f4       	brne	.+2      	; 0x130c <vPortFree+0x26>
    130a:	5a c0       	rjmp	.+180    	; 0x13c0 <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	67 2b       	or	r22, r23
    1312:	09 f0       	breq	.+2      	; 0x1316 <vPortFree+0x30>
    1314:	55 c0       	rjmp	.+170    	; 0x13c0 <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1316:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1318:	40 95       	com	r20
    131a:	50 95       	com	r21
    131c:	24 23       	and	r18, r20
    131e:	35 23       	and	r19, r21
    1320:	33 83       	std	Z+3, r19	; 0x03
    1322:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    1324:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    1328:	4a 81       	ldd	r20, Y+2	; 0x02
    132a:	5b 81       	ldd	r21, Y+3	; 0x03
    132c:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <xFreeBytesRemaining>
    1330:	90 91 fc 07 	lds	r25, 0x07FC	; 0x8007fc <xFreeBytesRemaining+0x1>
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	90 93 fc 07 	sts	0x07FC, r25	; 0x8007fc <xFreeBytesRemaining+0x1>
    133c:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1340:	ef ef       	ldi	r30, 0xFF	; 255
    1342:	f7 e0       	ldi	r31, 0x07	; 7
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <vPortFree+0x62>
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	8c 17       	cp	r24, r28
    134e:	9d 07       	cpc	r25, r29
    1350:	d0 f3       	brcs	.-12     	; 0x1346 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1352:	22 81       	ldd	r18, Z+2	; 0x02
    1354:	33 81       	ldd	r19, Z+3	; 0x03
    1356:	bf 01       	movw	r22, r30
    1358:	62 0f       	add	r22, r18
    135a:	73 1f       	adc	r23, r19
    135c:	c6 17       	cp	r28, r22
    135e:	d7 07       	cpc	r29, r23
    1360:	29 f4       	brne	.+10     	; 0x136c <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1362:	24 0f       	add	r18, r20
    1364:	35 1f       	adc	r19, r21
    1366:	33 83       	std	Z+3, r19	; 0x03
    1368:	22 83       	std	Z+2, r18	; 0x02
    136a:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    136c:	2a 81       	ldd	r18, Y+2	; 0x02
    136e:	3b 81       	ldd	r19, Y+3	; 0x03
    1370:	de 01       	movw	r26, r28
    1372:	a2 0f       	add	r26, r18
    1374:	b3 1f       	adc	r27, r19
    1376:	8a 17       	cp	r24, r26
    1378:	9b 07       	cpc	r25, r27
    137a:	c9 f4       	brne	.+50     	; 0x13ae <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    137c:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <pxEnd>
    1380:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <pxEnd+0x1>
    1384:	a8 17       	cp	r26, r24
    1386:	b9 07       	cpc	r27, r25
    1388:	79 f0       	breq	.+30     	; 0x13a8 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	8d 91       	ld	r24, X+
    138e:	9c 91       	ld	r25, X
    1390:	13 97       	sbiw	r26, 0x03	; 3
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	3b 83       	std	Y+3, r19	; 0x03
    1398:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    139a:	a0 81       	ld	r26, Z
    139c:	b1 81       	ldd	r27, Z+1	; 0x01
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	99 83       	std	Y+1, r25	; 0x01
    13a4:	88 83       	st	Y, r24
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    13a8:	b9 83       	std	Y+1, r27	; 0x01
    13aa:	a8 83       	st	Y, r26
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    13b2:	ec 17       	cp	r30, r28
    13b4:	fd 07       	cpc	r31, r29
    13b6:	11 f0       	breq	.+4      	; 0x13bc <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    13b8:	d1 83       	std	Z+1, r29	; 0x01
    13ba:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    13bc:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ec 01       	movw	r28, r24
    13d4:	e4 2e       	mov	r14, r20
    13d6:	28 98       	cbi	0x05, 0	; 5
    13d8:	86 2f       	mov	r24, r22
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    13e0:	ee 20       	and	r14, r14
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <sIMU_readRegisterRegion+0x4a>
    13e4:	0f ef       	ldi	r16, 0xFF	; 255
    13e6:	0e 0d       	add	r16, r14
    13e8:	10 e0       	ldi	r17, 0x00	; 0
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	0c 0f       	add	r16, r28
    13f0:	1d 1f       	adc	r17, r29
    13f2:	f1 2c       	mov	r15, r1
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	09 f4       	brne	.+2      	; 0x1400 <sIMU_readRegisterRegion+0x3a>
    13fe:	f3 94       	inc	r15
    1400:	89 93       	st	Y+, r24
    1402:	0c 17       	cp	r16, r28
    1404:	1d 07       	cpc	r17, r29
    1406:	b1 f7       	brne	.-20     	; 0x13f4 <sIMU_readRegisterRegion+0x2e>
    1408:	fe 10       	cpse	r15, r14
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <sIMU_readRegisterRegion+0x4e>
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <sIMU_readRegisterRegion+0x50>
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <sIMU_readRegisterRegion+0x50>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	28 9a       	sbi	0x05, 0	; 5
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	08 95       	ret

00001426 <sIMU_readRegister>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ec 01       	movw	r28, r24
    142c:	28 98       	cbi	0x05, 0	; 5
    142e:	86 2f       	mov	r24, r22
    1430:	80 68       	ori	r24, 0x80	; 128
    1432:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    143c:	28 9a       	sbi	0x05, 0	; 5
    143e:	8f 3f       	cpi	r24, 0xFF	; 255
    1440:	11 f4       	brne	.+4      	; 0x1446 <sIMU_readRegister+0x20>
    1442:	95 e0       	ldi	r25, 0x05	; 5
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <sIMU_readRegister+0x22>
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 83       	st	Y, r24
    144a:	89 2f       	mov	r24, r25
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <sIMU_Init>:
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	1f 92       	push	r1
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	eb e5       	ldi	r30, 0x5B	; 91
    1460:	fb e1       	ldi	r31, 0x1B	; 27
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 83       	st	Z, r24
    1466:	24 ef       	ldi	r18, 0xF4	; 244
    1468:	31 e0       	ldi	r19, 0x01	; 1
    146a:	32 83       	std	Z+2, r19	; 0x02
    146c:	21 83       	std	Z+1, r18	; 0x01
    146e:	22 e8       	ldi	r18, 0x82	; 130
    1470:	36 e0       	ldi	r19, 0x06	; 6
    1472:	34 83       	std	Z+4, r19	; 0x04
    1474:	23 83       	std	Z+3, r18	; 0x03
    1476:	20 e9       	ldi	r18, 0x90	; 144
    1478:	31 e0       	ldi	r19, 0x01	; 1
    147a:	36 83       	std	Z+6, r19	; 0x06
    147c:	25 83       	std	Z+5, r18	; 0x05
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	10 86       	std	Z+8, r1	; 0x08
    1482:	81 87       	std	Z+9, r24	; 0x09
    1484:	82 87       	std	Z+10, r24	; 0x0a
    1486:	20 e1       	ldi	r18, 0x10	; 16
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	34 87       	std	Z+12, r19	; 0x0c
    148c:	23 87       	std	Z+11, r18	; 0x0b
    148e:	2d e0       	ldi	r18, 0x0D	; 13
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	36 87       	std	Z+14, r19	; 0x0e
    1494:	25 87       	std	Z+13, r18	; 0x0d
    1496:	22 e3       	ldi	r18, 0x32	; 50
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	30 8b       	std	Z+16, r19	; 0x10
    149c:	27 87       	std	Z+15, r18	; 0x0f
    149e:	11 8a       	std	Z+17, r1	; 0x11
    14a0:	12 8a       	std	Z+18, r1	; 0x12
    14a2:	83 8b       	std	Z+19, r24	; 0x13
    14a4:	84 8b       	std	Z+20, r24	; 0x14
    14a6:	88 eb       	ldi	r24, 0xB8	; 184
    14a8:	9b e0       	ldi	r25, 0x0B	; 11
    14aa:	96 8b       	std	Z+22, r25	; 0x16
    14ac:	85 8b       	std	Z+21, r24	; 0x15
    14ae:	8a e0       	ldi	r24, 0x0A	; 10
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	90 8f       	std	Z+24, r25	; 0x18
    14b4:	87 8b       	std	Z+23, r24	; 0x17
    14b6:	11 8e       	std	Z+25, r1	; 0x19
    14b8:	10 92 76 1b 	sts	0x1B76, r1	; 0x801b76 <allOnesCounter+0x1>
    14bc:	10 92 75 1b 	sts	0x1B75, r1	; 0x801b75 <allOnesCounter>
    14c0:	10 92 78 1b 	sts	0x1B78, r1	; 0x801b78 <nonSuccessCounter+0x1>
    14c4:	10 92 77 1b 	sts	0x1B77, r1	; 0x801b77 <nonSuccessCounter>
    14c8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <vSPI_MasterInit>
    14cc:	20 9a       	sbi	0x04, 0	; 4
    14ce:	28 9a       	sbi	0x05, 0	; 5
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	20 e1       	ldi	r18, 0x10	; 16
    14d4:	37 e2       	ldi	r19, 0x27	; 39
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	8f 5f       	subi	r24, 0xFF	; 255
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	31 09       	sbc	r19, r1
    14e0:	d1 f7       	brne	.-12     	; 0x14d6 <sIMU_Init+0x84>
    14e2:	6f e0       	ldi	r22, 0x0F	; 15
    14e4:	ce 01       	movw	r24, r28
    14e6:	02 96       	adiw	r24, 0x02	; 2
    14e8:	9e df       	rcall	.-196    	; 0x1426 <sIMU_readRegister>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	89 36       	cpi	r24, 0x69	; 105
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <sIMU_Init+0x90>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <sIMU_readRegisterInt16>:
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	1f 92       	push	r1
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8c 01       	movw	r16, r24
    150e:	42 e0       	ldi	r20, 0x02	; 2
    1510:	ce 01       	movw	r24, r28
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	58 df       	rcall	.-336    	; 0x13c6 <sIMU_readRegisterRegion>
    1516:	2a 81       	ldd	r18, Y+2	; 0x02
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	32 2f       	mov	r19, r18
    151c:	22 27       	eor	r18, r18
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	29 2b       	or	r18, r25
    1522:	f8 01       	movw	r30, r16
    1524:	31 83       	std	Z+1, r19	; 0x01
    1526:	20 83       	st	Z, r18
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <sIMU_writeRegister>:
    1536:	cf 93       	push	r28
    1538:	c6 2f       	mov	r28, r22
    153a:	28 98       	cbi	0x05, 0	; 5
    153c:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ui8SPI_MasterTransmit>
    1546:	28 9a       	sbi	0x05, 0	; 5
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <sIMU_begin>:
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	1f 92       	push	r1
    1556:	1f 92       	push	r1
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	79 df       	rcall	.-270    	; 0x1452 <sIMU_Init>
    1560:	18 2f       	mov	r17, r24
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	80 91 64 1b 	lds	r24, 0x1B64	; 0x801b64 <settings+0x9>
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	09 f0       	breq	.+2      	; 0x156e <sIMU_begin+0x20>
    156c:	83 c0       	rjmp	.+262    	; 0x1674 <sIMU_begin+0x126>
    156e:	80 91 6a 1b 	lds	r24, 0x1B6A	; 0x801b6a <settings+0xf>
    1572:	90 91 6b 1b 	lds	r25, 0x1B6B	; 0x801b6b <settings+0x10>
    1576:	84 36       	cpi	r24, 0x64	; 100
    1578:	91 05       	cpc	r25, r1
    157a:	41 f0       	breq	.+16     	; 0x158c <sIMU_begin+0x3e>
    157c:	88 3c       	cpi	r24, 0xC8	; 200
    157e:	91 05       	cpc	r25, r1
    1580:	41 f0       	breq	.+16     	; 0x1592 <sIMU_begin+0x44>
    1582:	c2 97       	sbiw	r24, 0x32	; 50
    1584:	41 f4       	brne	.+16     	; 0x1596 <sIMU_begin+0x48>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <sIMU_begin+0x48>
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <sIMU_begin+0x48>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	80 91 66 1b 	lds	r24, 0x1B66	; 0x801b66 <settings+0xb>
    159a:	90 91 67 1b 	lds	r25, 0x1B67	; 0x801b67 <settings+0xc>
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	91 05       	cpc	r25, r1
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <sIMU_begin+0x62>
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	91 05       	cpc	r25, r1
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <sIMU_begin+0x6a>
    15aa:	02 97       	sbiw	r24, 0x02	; 2
    15ac:	49 f4       	brne	.+18     	; 0x15c0 <sIMU_begin+0x72>
    15ae:	0b c0       	rjmp	.+22     	; 0x15c6 <sIMU_begin+0x78>
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 60       	ori	r24, 0x08	; 8
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <sIMU_begin+0x78>
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	8c 60       	ori	r24, 0x0C	; 12
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <sIMU_begin+0x78>
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	84 60       	ori	r24, 0x04	; 4
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	80 91 68 1b 	lds	r24, 0x1B68	; 0x801b68 <settings+0xd>
    15ca:	90 91 69 1b 	lds	r25, 0x1B69	; 0x801b69 <settings+0xe>
    15ce:	80 3a       	cpi	r24, 0xA0	; 160
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	92 07       	cpc	r25, r18
    15d4:	c1 f1       	breq	.+112    	; 0x1646 <sIMU_begin+0xf8>
    15d6:	70 f4       	brcc	.+28     	; 0x15f4 <sIMU_begin+0xa6>
    15d8:	8a 31       	cpi	r24, 0x1A	; 26
    15da:	91 05       	cpc	r25, r1
    15dc:	21 f1       	breq	.+72     	; 0x1626 <sIMU_begin+0xd8>
    15de:	18 f4       	brcc	.+6      	; 0x15e6 <sIMU_begin+0x98>
    15e0:	0d 97       	sbiw	r24, 0x0d	; 13
    15e2:	e9 f0       	breq	.+58     	; 0x161e <sIMU_begin+0xd0>
    15e4:	28 c0       	rjmp	.+80     	; 0x1636 <sIMU_begin+0xe8>
    15e6:	84 33       	cpi	r24, 0x34	; 52
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f1       	breq	.+66     	; 0x162e <sIMU_begin+0xe0>
    15ec:	80 3d       	cpi	r24, 0xD0	; 208
    15ee:	91 05       	cpc	r25, r1
    15f0:	31 f1       	breq	.+76     	; 0x163e <sIMU_begin+0xf0>
    15f2:	21 c0       	rjmp	.+66     	; 0x1636 <sIMU_begin+0xe8>
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	2d e0       	ldi	r18, 0x0D	; 13
    15f8:	92 07       	cpc	r25, r18
    15fa:	89 f1       	breq	.+98     	; 0x165e <sIMU_begin+0x110>
    15fc:	40 f4       	brcc	.+16     	; 0x160e <sIMU_begin+0xc0>
    15fe:	81 34       	cpi	r24, 0x41	; 65
    1600:	23 e0       	ldi	r18, 0x03	; 3
    1602:	92 07       	cpc	r25, r18
    1604:	21 f1       	breq	.+72     	; 0x164e <sIMU_begin+0x100>
    1606:	8c 37       	cpi	r24, 0x7C	; 124
    1608:	96 40       	sbci	r25, 0x06	; 6
    160a:	29 f1       	breq	.+74     	; 0x1656 <sIMU_begin+0x108>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <sIMU_begin+0xe8>
    160e:	84 30       	cpi	r24, 0x04	; 4
    1610:	2a e1       	ldi	r18, 0x1A	; 26
    1612:	92 07       	cpc	r25, r18
    1614:	41 f1       	breq	.+80     	; 0x1666 <sIMU_begin+0x118>
    1616:	82 31       	cpi	r24, 0x12	; 18
    1618:	94 43       	sbci	r25, 0x34	; 52
    161a:	49 f1       	breq	.+82     	; 0x166e <sIMU_begin+0x120>
    161c:	0c c0       	rjmp	.+24     	; 0x1636 <sIMU_begin+0xe8>
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	80 61       	ori	r24, 0x10	; 16
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <sIMU_begin+0x126>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 62       	ori	r24, 0x20	; 32
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	23 c0       	rjmp	.+70     	; 0x1674 <sIMU_begin+0x126>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	80 63       	ori	r24, 0x30	; 48
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <sIMU_begin+0x126>
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	80 64       	ori	r24, 0x40	; 64
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	1b c0       	rjmp	.+54     	; 0x1674 <sIMU_begin+0x126>
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	80 65       	ori	r24, 0x50	; 80
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	17 c0       	rjmp	.+46     	; 0x1674 <sIMU_begin+0x126>
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	80 66       	ori	r24, 0x60	; 96
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <sIMU_begin+0x126>
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	80 67       	ori	r24, 0x70	; 112
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <sIMU_begin+0x126>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 68       	ori	r24, 0x80	; 128
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <sIMU_begin+0x126>
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	80 69       	ori	r24, 0x90	; 144
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <sIMU_begin+0x126>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	80 6a       	ori	r24, 0xA0	; 160
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <sIMU_begin+0x126>
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	80 6b       	ori	r24, 0xB0	; 176
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	69 81       	ldd	r22, Y+1	; 0x01
    1676:	80 e1       	ldi	r24, 0x10	; 16
    1678:	5e df       	rcall	.-324    	; 0x1536 <sIMU_writeRegister>
    167a:	63 e1       	ldi	r22, 0x13	; 19
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	d2 de       	rcall	.-604    	; 0x1426 <sIMU_readRegister>
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	89 83       	std	Y+1, r24	; 0x01
    1688:	90 91 65 1b 	lds	r25, 0x1B65	; 0x801b65 <settings+0xa>
    168c:	91 30       	cpi	r25, 0x01	; 1
    168e:	11 f4       	brne	.+4      	; 0x1694 <sIMU_begin+0x146>
    1690:	80 68       	ori	r24, 0x80	; 128
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	69 81       	ldd	r22, Y+1	; 0x01
    1696:	83 e1       	ldi	r24, 0x13	; 19
    1698:	4e df       	rcall	.-356    	; 0x1536 <sIMU_writeRegister>
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <settings>
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <sIMU_begin+0x158>
    16a4:	5b c0       	rjmp	.+182    	; 0x175c <sIMU_begin+0x20e>
    16a6:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <settings+0x1>
    16aa:	90 91 5d 1b 	lds	r25, 0x1B5D	; 0x801b5d <settings+0x2>
    16ae:	85 3f       	cpi	r24, 0xF5	; 245
    16b0:	91 05       	cpc	r25, r1
    16b2:	c1 f0       	breq	.+48     	; 0x16e4 <sIMU_begin+0x196>
    16b4:	20 f4       	brcc	.+8      	; 0x16be <sIMU_begin+0x170>
    16b6:	8d 37       	cpi	r24, 0x7D	; 125
    16b8:	91 05       	cpc	r25, r1
    16ba:	49 f0       	breq	.+18     	; 0x16ce <sIMU_begin+0x180>
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <sIMU_begin+0x192>
    16be:	84 3f       	cpi	r24, 0xF4	; 244
    16c0:	21 e0       	ldi	r18, 0x01	; 1
    16c2:	92 07       	cpc	r25, r18
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <sIMU_begin+0x186>
    16c6:	88 3e       	cpi	r24, 0xE8	; 232
    16c8:	93 40       	sbci	r25, 0x03	; 3
    16ca:	39 f0       	breq	.+14     	; 0x16da <sIMU_begin+0x18c>
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <sIMU_begin+0x192>
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <sIMU_begin+0x196>
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <sIMU_begin+0x196>
    16da:	88 e0       	ldi	r24, 0x08	; 8
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <sIMU_begin+0x196>
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	80 91 5e 1b 	lds	r24, 0x1B5E	; 0x801b5e <settings+0x3>
    16e8:	90 91 5f 1b 	lds	r25, 0x1B5F	; 0x801b5f <settings+0x4>
    16ec:	80 3d       	cpi	r24, 0xD0	; 208
    16ee:	91 05       	cpc	r25, r1
    16f0:	31 f1       	breq	.+76     	; 0x173e <sIMU_begin+0x1f0>
    16f2:	48 f4       	brcc	.+18     	; 0x1706 <sIMU_begin+0x1b8>
    16f4:	8a 31       	cpi	r24, 0x1A	; 26
    16f6:	91 05       	cpc	r25, r1
    16f8:	b1 f0       	breq	.+44     	; 0x1726 <sIMU_begin+0x1d8>
    16fa:	84 33       	cpi	r24, 0x34	; 52
    16fc:	91 05       	cpc	r25, r1
    16fe:	b9 f0       	breq	.+46     	; 0x172e <sIMU_begin+0x1e0>
    1700:	0d 97       	sbiw	r24, 0x0d	; 13
    1702:	c9 f4       	brne	.+50     	; 0x1736 <sIMU_begin+0x1e8>
    1704:	0c c0       	rjmp	.+24     	; 0x171e <sIMU_begin+0x1d0>
    1706:	81 34       	cpi	r24, 0x41	; 65
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	92 07       	cpc	r25, r18
    170c:	01 f1       	breq	.+64     	; 0x174e <sIMU_begin+0x200>
    170e:	8c 37       	cpi	r24, 0x7C	; 124
    1710:	26 e0       	ldi	r18, 0x06	; 6
    1712:	92 07       	cpc	r25, r18
    1714:	01 f1       	breq	.+64     	; 0x1756 <sIMU_begin+0x208>
    1716:	80 3a       	cpi	r24, 0xA0	; 160
    1718:	91 40       	sbci	r25, 0x01	; 1
    171a:	69 f4       	brne	.+26     	; 0x1736 <sIMU_begin+0x1e8>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <sIMU_begin+0x1f8>
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	80 61       	ori	r24, 0x10	; 16
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	1b c0       	rjmp	.+54     	; 0x175c <sIMU_begin+0x20e>
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	17 c0       	rjmp	.+46     	; 0x175c <sIMU_begin+0x20e>
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	80 63       	ori	r24, 0x30	; 48
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	13 c0       	rjmp	.+38     	; 0x175c <sIMU_begin+0x20e>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	80 64       	ori	r24, 0x40	; 64
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	0f c0       	rjmp	.+30     	; 0x175c <sIMU_begin+0x20e>
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	80 65       	ori	r24, 0x50	; 80
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	0b c0       	rjmp	.+22     	; 0x175c <sIMU_begin+0x20e>
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 66       	ori	r24, 0x60	; 96
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	07 c0       	rjmp	.+14     	; 0x175c <sIMU_begin+0x20e>
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	80 67       	ori	r24, 0x70	; 112
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	03 c0       	rjmp	.+6      	; 0x175c <sIMU_begin+0x20e>
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	69 81       	ldd	r22, Y+1	; 0x01
    175e:	81 e1       	ldi	r24, 0x11	; 17
    1760:	ea de       	rcall	.-556    	; 0x1536 <sIMU_writeRegister>
    1762:	6f e0       	ldi	r22, 0x0F	; 15
    1764:	ce 01       	movw	r24, r28
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	5e de       	rcall	.-836    	; 0x1426 <sIMU_readRegister>
    176a:	81 2f       	mov	r24, r17
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	08 95       	ret

00001778 <i16IMU_readRawGyroZ>:
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	1f 92       	push	r1
    177e:	1f 92       	push	r1
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	66 e2       	ldi	r22, 0x26	; 38
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	b8 de       	rcall	.-656    	; 0x14fc <sIMU_readRegisterInt16>
    178c:	88 23       	and	r24, r24
    178e:	a9 f0       	breq	.+42     	; 0x17ba <i16IMU_readRawGyroZ+0x42>
    1790:	85 30       	cpi	r24, 0x05	; 5
    1792:	51 f4       	brne	.+20     	; 0x17a8 <i16IMU_readRawGyroZ+0x30>
    1794:	80 91 75 1b 	lds	r24, 0x1B75	; 0x801b75 <allOnesCounter>
    1798:	90 91 76 1b 	lds	r25, 0x1B76	; 0x801b76 <allOnesCounter+0x1>
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	90 93 76 1b 	sts	0x1B76, r25	; 0x801b76 <allOnesCounter+0x1>
    17a2:	80 93 75 1b 	sts	0x1B75, r24	; 0x801b75 <allOnesCounter>
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <i16IMU_readRawGyroZ+0x42>
    17a8:	80 91 77 1b 	lds	r24, 0x1B77	; 0x801b77 <nonSuccessCounter>
    17ac:	90 91 78 1b 	lds	r25, 0x1B78	; 0x801b78 <nonSuccessCounter+0x1>
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	90 93 78 1b 	sts	0x1B78, r25	; 0x801b78 <nonSuccessCounter+0x1>
    17b6:	80 93 77 1b 	sts	0x1B77, r24	; 0x801b77 <nonSuccessCounter>
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <fIMU_calcGyro>:
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	cf 93       	push	r28
    17d2:	fc 01       	movw	r30, r24
    17d4:	40 91 5c 1b 	lds	r20, 0x1B5C	; 0x801b5c <settings+0x1>
    17d8:	50 91 5d 1b 	lds	r21, 0x1B5D	; 0x801b5d <settings+0x2>
    17dc:	45 3f       	cpi	r20, 0xF5	; 245
    17de:	51 05       	cpc	r21, r1
    17e0:	b1 f0       	breq	.+44     	; 0x180e <fIMU_calcGyro+0x46>
    17e2:	9a 01       	movw	r18, r20
    17e4:	a5 e2       	ldi	r26, 0x25	; 37
    17e6:	b6 e0       	ldi	r27, 0x06	; 6
    17e8:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <__umulhisi3>
    17ec:	48 1b       	sub	r20, r24
    17ee:	59 0b       	sbc	r21, r25
    17f0:	56 95       	lsr	r21
    17f2:	47 95       	ror	r20
    17f4:	84 0f       	add	r24, r20
    17f6:	95 1f       	adc	r25, r21
    17f8:	00 24       	eor	r0, r0
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	00 1c       	adc	r0, r0
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	00 1c       	adc	r0, r0
    1806:	89 2f       	mov	r24, r25
    1808:	90 2d       	mov	r25, r0
    180a:	c8 2f       	mov	r28, r24
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <fIMU_calcGyro+0x48>
    180e:	c2 e0       	ldi	r28, 0x02	; 2
    1810:	bf 01       	movw	r22, r30
    1812:	ff 0f       	add	r31, r31
    1814:	88 0b       	sbc	r24, r24
    1816:	99 0b       	sbc	r25, r25
    1818:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4c e8       	ldi	r20, 0x8C	; 140
    1822:	50 e4       	ldi	r21, 0x40	; 64
    1824:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    1828:	6b 01       	movw	r12, r22
    182a:	7c 01       	movw	r14, r24
    182c:	6c 2f       	mov	r22, r28
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	c7 01       	movw	r24, r14
    183e:	b6 01       	movw	r22, r12
    1840:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	54 e4       	ldi	r21, 0x44	; 68
    184c:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    1850:	cf 91       	pop	r28
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	08 95       	ret

0000185c <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    185c:	8d df       	rcall	.-230    	; 0x1778 <i16IMU_readRawGyroZ>
    185e:	b4 cf       	rjmp	.-152    	; 0x17c8 <fIMU_calcGyro>
    
    return output;
}
    1860:	08 95       	ret

00001862 <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    1862:	ea e0       	ldi	r30, 0x0A	; 10
    1864:	f1 e0       	ldi	r31, 0x01	; 1
    1866:	80 81       	ld	r24, Z
    1868:	87 60       	ori	r24, 0x07	; 7
    186a:	80 83       	st	Z, r24
    186c:	08 95       	ret

0000186e <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    186e:	82 30       	cpi	r24, 0x02	; 2
    1870:	91 05       	cpc	r25, r1
    1872:	31 f4       	brne	.+12     	; 0x1880 <vLED_singleHigh+0x12>
    1874:	eb e0       	ldi	r30, 0x0B	; 11
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	80 81       	ld	r24, Z
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	80 83       	st	Z, r24
    187e:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	91 05       	cpc	r25, r1
    1884:	31 f4       	brne	.+12     	; 0x1892 <vLED_singleHigh+0x24>
    1886:	eb e0       	ldi	r30, 0x0B	; 11
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	80 81       	ld	r24, Z
    188c:	82 60       	ori	r24, 0x02	; 2
    188e:	80 83       	st	Z, r24
    1890:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    1892:	89 2b       	or	r24, r25
    1894:	29 f4       	brne	.+10     	; 0x18a0 <vLED_singleHigh+0x32>
    1896:	eb e0       	ldi	r30, 0x0B	; 11
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	80 81       	ld	r24, Z
    189c:	81 60       	ori	r24, 0x01	; 1
    189e:	80 83       	st	Z, r24
    18a0:	08 95       	ret

000018a2 <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	91 05       	cpc	r25, r1
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <vLED_singleLow+0x12>
    18a8:	eb e0       	ldi	r30, 0x0B	; 11
    18aa:	f1 e0       	ldi	r31, 0x01	; 1
    18ac:	80 81       	ld	r24, Z
    18ae:	8b 7f       	andi	r24, 0xFB	; 251
    18b0:	80 83       	st	Z, r24
    18b2:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	91 05       	cpc	r25, r1
    18b8:	31 f4       	brne	.+12     	; 0x18c6 <vLED_singleLow+0x24>
    18ba:	eb e0       	ldi	r30, 0x0B	; 11
    18bc:	f1 e0       	ldi	r31, 0x01	; 1
    18be:	80 81       	ld	r24, Z
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	80 83       	st	Z, r24
    18c4:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    18c6:	89 2b       	or	r24, r25
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <vLED_singleLow+0x32>
    18ca:	eb e0       	ldi	r30, 0x0B	; 11
    18cc:	f1 e0       	ldi	r31, 0x01	; 1
    18ce:	80 81       	ld	r24, Z
    18d0:	8e 7f       	andi	r24, 0xFE	; 254
    18d2:	80 83       	st	Z, r24
    18d4:	08 95       	ret

000018d6 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    18d6:	82 30       	cpi	r24, 0x02	; 2
    18d8:	91 05       	cpc	r25, r1
    18da:	39 f4       	brne	.+14     	; 0x18ea <vLED_toggle+0x14>
    18dc:	eb e0       	ldi	r30, 0x0B	; 11
    18de:	f1 e0       	ldi	r31, 0x01	; 1
    18e0:	90 81       	ld	r25, Z
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	89 27       	eor	r24, r25
    18e6:	80 83       	st	Z, r24
    18e8:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	39 f4       	brne	.+14     	; 0x18fe <vLED_toggle+0x28>
    18f0:	eb e0       	ldi	r30, 0x0B	; 11
    18f2:	f1 e0       	ldi	r31, 0x01	; 1
    18f4:	90 81       	ld	r25, Z
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	89 27       	eor	r24, r25
    18fa:	80 83       	st	Z, r24
    18fc:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    18fe:	89 2b       	or	r24, r25
    1900:	31 f4       	brne	.+12     	; 0x190e <vLED_toggle+0x38>
    1902:	eb e0       	ldi	r30, 0x0B	; 11
    1904:	f1 e0       	ldi	r31, 0x01	; 1
    1906:	90 81       	ld	r25, Z
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 27       	eor	r24, r25
    190c:	80 83       	st	Z, r24
    190e:	08 95       	ret

00001910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1910:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1912:	03 96       	adiw	r24, 0x03	; 3
    1914:	92 83       	std	Z+2, r25	; 0x02
    1916:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1918:	2f ef       	ldi	r18, 0xFF	; 255
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	34 83       	std	Z+4, r19	; 0x04
    191e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1920:	96 83       	std	Z+6, r25	; 0x06
    1922:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1924:	90 87       	std	Z+8, r25	; 0x08
    1926:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1928:	10 82       	st	Z, r1
    192a:	08 95       	ret

0000192c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    192c:	fc 01       	movw	r30, r24
    192e:	11 86       	std	Z+9, r1	; 0x09
    1930:	10 86       	std	Z+8, r1	; 0x08
    1932:	08 95       	ret

00001934 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	9c 01       	movw	r18, r24
    193a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    193c:	dc 01       	movw	r26, r24
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	cd 91       	ld	r28, X+
    1942:	dc 91       	ld	r29, X
    1944:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1946:	d3 83       	std	Z+3, r29	; 0x03
    1948:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	95 83       	std	Z+5, r25	; 0x05
    1950:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	dc 01       	movw	r26, r24
    1958:	13 96       	adiw	r26, 0x03	; 3
    195a:	7c 93       	st	X, r23
    195c:	6e 93       	st	-X, r22
    195e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    1960:	7d 83       	std	Y+5, r23	; 0x05
    1962:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1964:	31 87       	std	Z+9, r19	; 0x09
    1966:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1968:	f9 01       	movw	r30, r18
    196a:	80 81       	ld	r24, Z
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	80 83       	st	Z, r24
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    197c:	48 81       	ld	r20, Y
    197e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1980:	4f 3f       	cpi	r20, 0xFF	; 255
    1982:	2f ef       	ldi	r18, 0xFF	; 255
    1984:	52 07       	cpc	r21, r18
    1986:	21 f4       	brne	.+8      	; 0x1990 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1988:	fc 01       	movw	r30, r24
    198a:	a7 81       	ldd	r26, Z+7	; 0x07
    198c:	b0 85       	ldd	r27, Z+8	; 0x08
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1990:	dc 01       	movw	r26, r24
    1992:	13 96       	adiw	r26, 0x03	; 3
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <vListInsert+0x22>
    1996:	df 01       	movw	r26, r30
    1998:	12 96       	adiw	r26, 0x02	; 2
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	13 97       	sbiw	r26, 0x03	; 3
    19a0:	20 81       	ld	r18, Z
    19a2:	31 81       	ldd	r19, Z+1	; 0x01
    19a4:	42 17       	cp	r20, r18
    19a6:	53 07       	cpc	r21, r19
    19a8:	b0 f7       	brcc	.-20     	; 0x1996 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    19aa:	12 96       	adiw	r26, 0x02	; 2
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	13 97       	sbiw	r26, 0x03	; 3
    19b2:	fb 83       	std	Y+3, r31	; 0x03
    19b4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    19b6:	d5 83       	std	Z+5, r29	; 0x05
    19b8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    19ba:	bd 83       	std	Y+5, r27	; 0x05
    19bc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	dc 93       	st	X, r29
    19c2:	ce 93       	st	-X, r28
    19c4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    19c6:	99 87       	std	Y+9, r25	; 0x09
    19c8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 81       	ld	r18, Z
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	20 83       	st	Z, r18
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    19de:	a0 85       	ldd	r26, Z+8	; 0x08
    19e0:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    19e2:	c2 81       	ldd	r28, Z+2	; 0x02
    19e4:	d3 81       	ldd	r29, Z+3	; 0x03
    19e6:	84 81       	ldd	r24, Z+4	; 0x04
    19e8:	95 81       	ldd	r25, Z+5	; 0x05
    19ea:	9d 83       	std	Y+5, r25	; 0x05
    19ec:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    19ee:	c4 81       	ldd	r28, Z+4	; 0x04
    19f0:	d5 81       	ldd	r29, Z+5	; 0x05
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	e8 17       	cp	r30, r24
    1a04:	f9 07       	cpc	r31, r25
    1a06:	31 f4       	brne	.+12     	; 0x1a14 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1a08:	84 81       	ldd	r24, Z+4	; 0x04
    1a0a:	95 81       	ldd	r25, Z+5	; 0x05
    1a0c:	12 96       	adiw	r26, 0x02	; 2
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1a14:	11 86       	std	Z+9, r1	; 0x09
    1a16:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1a18:	8c 91       	ld	r24, X
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <vMainCommunicationTask>:
    #define toc PORTH &= ~(1<<PINH5)
#endif

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <vMainCommunicationTask+0x6>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <vMainCommunicationTask+0x8>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
	// Setup for the communication task
	struct sPolar Setpoint = {0}; // Struct for setpoints from server
    1a30:	fe 01       	movw	r30, r28
    1a32:	31 96       	adiw	r30, 0x01	; 1
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	df 01       	movw	r26, r30
    1a38:	1d 92       	st	X+, r1
    1a3a:	8a 95       	dec	r24
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <vMainCommunicationTask+0x14>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    1a3e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    1a42:	a1 2c       	mov	r10, r1
    1a44:	b1 2c       	mov	r11, r1
    1a46:	c1 2c       	mov	r12, r1
    1a48:	d1 2c       	mov	r13, r1
    1a4a:	e1 2c       	mov	r14, r1
    1a4c:	f1 2c       	mov	r15, r1
    1a4e:	03 e0       	ldi	r16, 0x03	; 3
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	48 ec       	ldi	r20, 0xC8	; 200
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	6b e0       	ldi	r22, 0x0B	; 11
    1a5a:	76 e0       	ldi	r23, 0x06	; 6
    1a5c:	85 e2       	ldi	r24, 0x25	; 37
    1a5e:	95 e0       	ldi	r25, 0x05	; 5
    1a60:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <vMainCommunicationTask+0x4a>
		vLED_singleHigh(ledRED);
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	00 df       	rcall	.-512    	; 0x186e <vLED_singleHigh>
	}
	uint8_t success = 0;
	
	while(!success) {
		success = server_connect();
    1a6e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <server_connect>
    1a72:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    1a74:	88 ee       	ldi	r24, 0xE8	; 232
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <vTaskDelay>
		vLED_toggle(ledGREEN);
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2a df       	rcall	.-428    	; 0x18d6 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	
	while(!success) {
    1a82:	11 23       	and	r17, r17
    1a84:	a1 f3       	breq	.-24     	; 0x1a6e <vMainCommunicationTask+0x4a>
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	
	send_handshake();
    1a86:	0e 94 66 20 	call	0x40cc	; 0x40cc <send_handshake>
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f5 e8       	ldi	r31, 0x85	; 133
    1a8e:	cf 2e       	mov	r12, r31
    1a90:	fb e1       	ldi	r31, 0x1B	; 27
    1a92:	df 2e       	mov	r13, r31
    1a94:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			debug("Message received: \n");
    1a96:	0f 2e       	mov	r0, r31
    1a98:	ff e0       	ldi	r31, 0x0F	; 15
    1a9a:	8f 2e       	mov	r8, r31
    1a9c:	f6 e0       	ldi	r31, 0x06	; 6
    1a9e:	9f 2e       	mov	r9, r31
    1aa0:	f0 2d       	mov	r31, r0
			debug("Orientation: %i", command_in.message.order.orientation);
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	f3 e2       	ldi	r31, 0x23	; 35
    1aa6:	af 2e       	mov	r10, r31
    1aa8:	f6 e0       	ldi	r31, 0x06	; 6
    1aaa:	bf 2e       	mov	r11, r31
    1aac:	f0 2d       	mov	r31, r0
			debug("Distance: %i", command_in.message.order.distance);
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f3 e3       	ldi	r31, 0x33	; 51
    1ab2:	6f 2e       	mov	r6, r31
    1ab4:	f6 e0       	ldi	r31, 0x06	; 6
    1ab6:	7f 2e       	mov	r7, r31
    1ab8:	f0 2d       	mov	r31, r0
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1aba:	22 24       	eor	r2, r2
    1abc:	23 94       	inc	r2
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
    1abe:	68 94       	set
    1ac0:	44 24       	eor	r4, r4
    1ac2:	46 f8       	bld	r4, 6
    1ac4:	55 24       	eor	r5, r5
    1ac6:	53 94       	inc	r5
	}
	
	send_handshake();
	
	while(1){
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	4f ef       	ldi	r20, 0xFF	; 255
    1acc:	5f ef       	ldi	r21, 0xFF	; 255
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 91 81 1b 	lds	r24, 0x1B81	; 0x801b81 <xCommandReadyBSem>
    1ad6:	90 91 82 1b 	lds	r25, 0x1B82	; 0x801b82 <xCommandReadyBSem+0x1>
    1ada:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	99 f7       	brne	.-26     	; 0x1ac8 <vMainCommunicationTask+0xa4>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1ae2:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
			command_in = message_in;
    1aec:	f6 01       	movw	r30, r12
    1aee:	30 80       	ld	r3, Z
    1af0:	01 81       	ldd	r16, Z+1	; 0x01
    1af2:	12 81       	ldd	r17, Z+2	; 0x02
    1af4:	e3 80       	ldd	r14, Z+3	; 0x03
    1af6:	f4 80       	ldd	r15, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1afc:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
			debug("Message received: \n");
    1b00:	9f 92       	push	r9
    1b02:	8f 92       	push	r8
    1b04:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			debug("Orientation: %i", command_in.message.order.orientation);
    1b08:	1f 93       	push	r17
    1b0a:	0f 93       	push	r16
    1b0c:	bf 92       	push	r11
    1b0e:	af 92       	push	r10
    1b10:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			debug("Distance: %i", command_in.message.order.distance);
    1b14:	ff 92       	push	r15
    1b16:	ef 92       	push	r14
    1b18:	7f 92       	push	r7
    1b1a:	6f 92       	push	r6
    1b1c:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
			switch(command_in.type){
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	35 e0       	ldi	r19, 0x05	; 5
    1b2c:	33 16       	cp	r3, r19
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <vMainCommunicationTask+0x10e>
    1b30:	6d c0       	rjmp	.+218    	; 0x1c0c <vMainCommunicationTask+0x1e8>
    1b32:	33 15       	cp	r19, r3
    1b34:	40 f0       	brcs	.+16     	; 0x1b46 <vMainCommunicationTask+0x122>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	38 16       	cp	r3, r24
    1b3a:	d1 f0       	breq	.+52     	; 0x1b70 <vMainCommunicationTask+0x14c>
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	39 16       	cp	r3, r25
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <vMainCommunicationTask+0x120>
    1b42:	4a c0       	rjmp	.+148    	; 0x1bd8 <vMainCommunicationTask+0x1b4>
    1b44:	c1 cf       	rjmp	.-126    	; 0x1ac8 <vMainCommunicationTask+0xa4>
    1b46:	a7 e0       	ldi	r26, 0x07	; 7
    1b48:	3a 16       	cp	r3, r26
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <vMainCommunicationTask+0x12a>
    1b4c:	67 c0       	rjmp	.+206    	; 0x1c1c <vMainCommunicationTask+0x1f8>
    1b4e:	3a 16       	cp	r3, r26
    1b50:	20 f0       	brcs	.+8      	; 0x1b5a <vMainCommunicationTask+0x136>
    1b52:	b8 e0       	ldi	r27, 0x08	; 8
    1b54:	3b 16       	cp	r3, r27
    1b56:	49 f0       	breq	.+18     	; 0x1b6a <vMainCommunicationTask+0x146>
    1b58:	b7 cf       	rjmp	.-146    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1b60:	20 92 10 1a 	sts	0x1A10, r2	; 0x801a10 <gHandshook>
					taskEXIT_CRITICAL();
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63

					break;
    1b68:	af cf       	rjmp	.-162    	; 0x1ac8 <vMainCommunicationTask+0xa4>
					case TYPE_PING:
					send_ping_response();
    1b6a:	0e 94 6f 21 	call	0x42de	; 0x42de <send_ping_response>
					break;
    1b6e:	ac cf       	rjmp	.-168    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
    1b70:	b8 01       	movw	r22, r16
    1b72:	11 0f       	add	r17, r17
    1b74:	88 0b       	sbc	r24, r24
    1b76:	99 0b       	sbc	r25, r25
    1b78:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
					Setpoint.distance = command_in.message.order.distance;
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
    1b7c:	e1 e4       	ldi	r30, 0x41	; 65
    1b7e:	ee 16       	cp	r14, r30
    1b80:	e1 e0       	ldi	r30, 0x01	; 1
    1b82:	fe 06       	cpc	r15, r30
    1b84:	1c f0       	brlt	.+6      	; 0x1b8c <vMainCommunicationTask+0x168>
						Setpoint.distance = 320;
    1b86:	5e 82       	std	Y+6, r5	; 0x06
    1b88:	4d 82       	std	Y+5, r4	; 0x05
    1b8a:	0c c0       	rjmp	.+24     	; 0x1ba4 <vMainCommunicationTask+0x180>
					}
					else if (Setpoint.distance < -320){
    1b8c:	f0 ec       	ldi	r31, 0xC0	; 192
    1b8e:	ef 16       	cp	r14, r31
    1b90:	fe ef       	ldi	r31, 0xFE	; 254
    1b92:	ff 06       	cpc	r15, r31
    1b94:	1c f0       	brlt	.+6      	; 0x1b9c <vMainCommunicationTask+0x178>
					case TYPE_PING:
					send_ping_response();
					break;
				case TYPE_ORDER:
					Setpoint.heading = command_in.message.order.orientation;
					Setpoint.distance = command_in.message.order.distance;
    1b96:	fe 82       	std	Y+6, r15	; 0x06
    1b98:	ed 82       	std	Y+5, r14	; 0x05
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <vMainCommunicationTask+0x180>
					// Ensure max values are not exceeded
					if (Setpoint.distance > 320){
						Setpoint.distance = 320;
					}
					else if (Setpoint.distance < -320){
						Setpoint.distance = -320;
    1b9c:	20 ec       	ldi	r18, 0xC0	; 192
    1b9e:	3e ef       	ldi	r19, 0xFE	; 254
    1ba0:	3e 83       	std	Y+6, r19	; 0x06
    1ba2:	2d 83       	std	Y+5, r18	; 0x05
					}
					Setpoint.heading *= DEG2RAD; // Convert received set point to radians
    1ba4:	25 e3       	ldi	r18, 0x35	; 53
    1ba6:	3a ef       	ldi	r19, 0xFA	; 250
    1ba8:	4e e8       	ldi	r20, 0x8E	; 142
    1baa:	5c e3       	ldi	r21, 0x3C	; 60
    1bac:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    1bb0:	69 83       	std	Y+1, r22	; 0x01
    1bb2:	7a 83       	std	Y+2, r23	; 0x02
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
					vFunc_Inf2pi(&Setpoint.heading);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	3b da       	rcall	.-2954   	; 0x1034 <vFunc_Inf2pi>
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	44 e6       	ldi	r20, 0x64	; 100
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	be 01       	movw	r22, r28
    1bc6:	6f 5f       	subi	r22, 0xFF	; 255
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <poseControllerQ>
    1bce:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <poseControllerQ+0x1>
    1bd2:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
					break;
    1bd6:	78 cf       	rjmp	.-272    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_PAUSE:
					// Stop sending update messages
					taskENTER_CRITICAL();
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	0f 92       	push	r0
					gPaused = TRUE;
    1bde:	20 92 0f 1a 	sts	0x1A0F, r2	; 0x801a0f <gPaused>
					taskEXIT_CRITICAL();
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.distance = 0;
    1be6:	1e 82       	std	Y+6, r1	; 0x06
    1be8:	1d 82       	std	Y+5, r1	; 0x05
					Setpoint.heading = 0;
    1bea:	19 82       	std	Y+1, r1	; 0x01
    1bec:	1a 82       	std	Y+2, r1	; 0x02
    1bee:	1b 82       	std	Y+3, r1	; 0x03
    1bf0:	1c 82       	std	Y+4, r1	; 0x04
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	44 e6       	ldi	r20, 0x64	; 100
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <poseControllerQ>
    1c02:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <poseControllerQ+0x1>
    1c06:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
					break;
    1c0a:	5e cf       	rjmp	.-324    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	0f 92       	push	r0
					gPaused = FALSE;
    1c12:	10 92 0f 1a 	sts	0x1A0F, r1	; 0x801a0f <gPaused>
					taskEXIT_CRITICAL();
    1c16:	0f 90       	pop	r0
    1c18:	0f be       	out	0x3f, r0	; 63
					break;
    1c1a:	56 cf       	rjmp	.-340    	; 0x1ac8 <vMainCommunicationTask+0xa4>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	0f 92       	push	r0
					gHandshook = FALSE;
    1c22:	10 92 10 1a 	sts	0x1A10, r1	; 0x801a10 <gHandshook>
					taskEXIT_CRITICAL();
    1c26:	0f 90       	pop	r0
    1c28:	0f be       	out	0x3f, r0	; 63
					break;
    1c2a:	4e cf       	rjmp	.-356    	; 0x1ac8 <vMainCommunicationTask+0xa4>

00001c2c <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	1f 92       	push	r1
    1c32:	1f 92       	push	r1
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1c38:	0e 94 48 29 	call	0x5290	; 0x5290 <xTaskGetTickCount>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1c40:	64 e1       	ldi	r22, 0x14	; 20
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	ce 01       	movw	r24, r28
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <vTaskDelayUntil>
    1c4c:	f9 cf       	rjmp	.-14     	; 0x1c40 <vMainMovementTask+0x14>

00001c4e <vMainSensorTowerTask>:
		} // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2f 97       	sbiw	r28, 0x0f	; 15
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1c62:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1c64:	f1 2c       	mov	r15, r1
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1c66:	33 24       	eor	r3, r3
    1c68:	33 94       	inc	r3
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1c6c:	68 94       	set
    1c6e:	dd 24       	eor	r13, r13
    1c70:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1c72:	68 94       	set
    1c74:	22 24       	eor	r2, r2
    1c76:	22 f8       	bld	r2, 2
    1c78:	0e c0       	rjmp	.+28     	; 0x1c96 <vMainSensorTowerTask+0x48>
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1c7a:	0f 2e       	mov	r0, r31
    1c7c:	f3 e0       	ldi	r31, 0x03	; 3
    1c7e:	df 2e       	mov	r13, r31
    1c80:	f0 2d       	mov	r31, r0
    1c82:	09 c0       	rjmp	.+18     	; 0x1c96 <vMainSensorTowerTask+0x48>
    1c84:	0f 2e       	mov	r0, r31
    1c86:	f3 e0       	ldi	r31, 0x03	; 3
    1c88:	df 2e       	mov	r13, r31
    1c8a:	f0 2d       	mov	r31, r0
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <vMainSensorTowerTask+0x48>
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	f3 e0       	ldi	r31, 0x03	; 3
    1c92:	df 2e       	mov	r13, r31
    1c94:	f0 2d       	mov	r31, r0
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
        // Loop
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1c96:	80 91 10 1a 	lds	r24, 0x1A10	; 0x801a10 <gHandshook>
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <vMainSensorTowerTask+0x52>
    1c9e:	06 c1       	rjmp	.+524    	; 0x1eac <vMainSensorTowerTask+0x25e>
    1ca0:	80 91 0f 1a 	lds	r24, 0x1A0F	; 0x801a0f <gPaused>
    1ca4:	81 11       	cpse	r24, r1
    1ca6:	02 c1       	rjmp	.+516    	; 0x1eac <vMainSensorTowerTask+0x25e>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1ca8:	0e 94 48 29 	call	0x5290	; 0x5290 <xTaskGetTickCount>
    1cac:	9b 83       	std	Y+3, r25	; 0x03
    1cae:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	46 e9       	ldi	r20, 0x96	; 150
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	be 01       	movw	r22, r28
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbc:	80 91 15 1a 	lds	r24, 0x1A15	; 0x801a15 <scanStatusQ>
    1cc0:	90 91 16 1a 	lds	r25, 0x1A16	; 0x801a16 <scanStatusQ+0x1>
    1cc4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	d9 f4       	brne	.+54     	; 0x1d02 <vMainSensorTowerTask+0xb4>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 23       	and	r24, r24
    1cd0:	19 f0       	breq	.+6      	; 0x1cd8 <vMainSensorTowerTask+0x8a>
    1cd2:	83 30       	cpi	r24, 0x03	; 3
    1cd4:	a8 f4       	brcc	.+42     	; 0x1d00 <vMainSensorTowerTask+0xb2>
    1cd6:	08 c0       	rjmp	.+16     	; 0x1ce8 <vMainSensorTowerTask+0x9a>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1cd8:	13 9d       	mul	r17, r3
    1cda:	10 2d       	mov	r17, r0
    1cdc:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1cde:	ff 24       	eor	r15, r15
    1ce0:	f3 94       	inc	r15
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1ce2:	33 24       	eor	r3, r3
    1ce4:	33 94       	inc	r3
                        idleCounter = 1;
                    break;
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <vMainSensorTowerTask+0xb4>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1ce8:	8d ec       	ldi	r24, 0xCD	; 205
    1cea:	18 9f       	mul	r17, r24
    1cec:	11 2d       	mov	r17, r1
    1cee:	11 24       	eor	r1, r1
    1cf0:	16 95       	lsr	r17
    1cf2:	16 95       	lsr	r17
                        idleCounter = 0;
    1cf4:	f1 2c       	mov	r15, r1
                        servoResolution = 1;
                        idleCounter = 1;
                    break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1cf6:	0f 2e       	mov	r0, r31
    1cf8:	f5 e0       	ldi	r31, 0x05	; 5
    1cfa:	3f 2e       	mov	r3, r31
    1cfc:	f0 2d       	mov	r31, r0
                        servoStep /= servoResolution;
                        idleCounter = 0;
                    break;
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vMainSensorTowerTask+0xb4>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1d00:	f1 2c       	mov	r15, r1
                    default:
                        idleCounter = 0;
                    break;
                }
            }
            vServo_setAngle(servoStep*servoResolution);
    1d02:	13 9d       	mul	r17, r3
    1d04:	80 2d       	mov	r24, r0
    1d06:	11 24       	eor	r1, r1
    1d08:	0e 94 93 21 	call	0x4326	; 0x4326 <vServo_setAngle>
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point
    1d0c:	68 ec       	ldi	r22, 0xC8	; 200
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	69 d9       	rcall	.-3374   	; 0xfee <ui8DistSens_readCM>
    1d1c:	8e 87       	std	Y+14, r24	; 0x0e
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	66 d9       	rcall	.-3380   	; 0xfee <ui8DistSens_readCM>
    1d22:	e8 2e       	mov	r14, r24
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	63 d9       	rcall	.-3386   	; 0xfee <ui8DistSens_readCM>
    1d28:	c8 2e       	mov	r12, r24
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	60 d9       	rcall	.-3392   	; 0xfee <ui8DistSens_readCM>
    1d2e:	8f 87       	std	Y+15, r24	; 0x0f
    1d30:	20 e0       	ldi	r18, 0x00	; 0
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1d32:	48 e2       	ldi	r20, 0x28	; 40
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    1d3e:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    1d42:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1d46:	80 91 0b 1a 	lds	r24, 0x1A0B	; 0x801a0b <gTheta_hat>
                thetahat = gTheta_hat;
    1d4a:	90 91 0c 1a 	lds	r25, 0x1A0C	; 0x801a0c <gTheta_hat+0x1>
    1d4e:	a0 91 0d 1a 	lds	r26, 0x1A0D	; 0x801a0d <gTheta_hat+0x2>
    1d52:	b0 91 0e 1a 	lds	r27, 0x1A0E	; 0x801a0e <gTheta_hat+0x3>
    1d56:	8a 87       	std	Y+10, r24	; 0x0a
    1d58:	9b 87       	std	Y+11, r25	; 0x0b
    1d5a:	ac 87       	std	Y+12, r26	; 0x0c
    1d5c:	bd 87       	std	Y+13, r27	; 0x0d
    1d5e:	a0 90 09 1a 	lds	r10, 0x1A09	; 0x801a09 <gX_hat>
                xhat = gX_hat;
    1d62:	b0 90 0a 1a 	lds	r11, 0x1A0A	; 0x801a0a <gX_hat+0x1>
    1d66:	60 90 07 1a 	lds	r6, 0x1A07	; 0x801a07 <gY_hat>
                yhat = gY_hat;
    1d6a:	70 90 08 1a 	lds	r7, 0x1A08	; 0x801a08 <gY_hat+0x1>
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    1d76:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    1d7a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    1d7e:	9a e0       	ldi	r25, 0x0A	; 10
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1d80:	9f 15       	cp	r25, r15
    1d82:	40 f4       	brcc	.+16     	; 0x1d94 <vMainSensorTowerTask+0x146>
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	81 11       	cpse	r24, r1
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <vMainSensorTowerTask+0x146>
    1d8a:	0e 94 0e 21 	call	0x421c	; 0x421c <send_idle>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1d8e:	ff 24       	eor	r15, r15
                idleCounter = 1;
    1d90:	f3 94       	inc	r15
    1d92:	06 c0       	rjmp	.+12     	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d94:	ff 20       	and	r15, r15
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <vMainSensorTowerTask+0x152>
    1d9e:	f3 94       	inc	r15
                idleCounter++;
    1da0:	43 2c       	mov	r4, r3
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1da2:	51 2c       	mov	r5, r1
    1da4:	14 9d       	mul	r17, r4
    1da6:	40 01       	movw	r8, r0
    1da8:	15 9d       	mul	r17, r5
    1daa:	90 0c       	add	r9, r0
    1dac:	11 24       	eor	r1, r1
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	44 e3       	ldi	r20, 0x34	; 52
    1db4:	53 e4       	ldi	r21, 0x43	; 67
    1db6:	6a 85       	ldd	r22, Y+10	; 0x0a
    1db8:	7b 85       	ldd	r23, Y+11	; 0x0b
    1dba:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dbe:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    1dc2:	2b ed       	ldi	r18, 0xDB	; 219
    1dc4:	3f e0       	ldi	r19, 0x0F	; 15
    1dc6:	49 e4       	ldi	r20, 0x49	; 73
    1dc8:	50 e4       	ldi	r21, 0x40	; 64
    1dca:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    1dce:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    1dd2:	6a 87       	std	Y+10, r22	; 0x0a
    1dd4:	7b 87       	std	Y+11, r23	; 0x0b
    1dd6:	8c 87       	std	Y+12, r24	; 0x0c
    1dd8:	9d 87       	std	Y+13, r25	; 0x0d
    1dda:	c3 01       	movw	r24, r6
    1ddc:	6a e0       	ldi	r22, 0x0A	; 10
    1dde:	70 e0       	ldi	r23, 0x00	; 0
    1de0:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__divmodhi4>
    1de4:	fb 01       	movw	r30, r22
    1de6:	c5 01       	movw	r24, r10
    1de8:	6a e0       	ldi	r22, 0x0A	; 10
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__divmodhi4>
    1df0:	cb 01       	movw	r24, r22
    1df2:	af 84       	ldd	r10, Y+15	; 0x0f
    1df4:	0e 85       	ldd	r16, Y+14	; 0x0e
    1df6:	94 01       	movw	r18, r8
    1df8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dfa:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dfc:	bf 01       	movw	r22, r30
    1dfe:	0e 94 cc 20 	call	0x4198	; 0x4198 <send_update>
    1e02:	af e1       	ldi	r26, 0x1F	; 31
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1e04:	8a 16       	cp	r8, r26
    1e06:	91 04       	cpc	r9, r1
    1e08:	34 f0       	brlt	.+12     	; 0x1e16 <vMainSensorTowerTask+0x1c8>
    1e0a:	bc e3       	ldi	r27, 0x3C	; 60
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1e0c:	8b 16       	cp	r8, r27
    1e0e:	91 04       	cpc	r9, r1
    1e10:	c4 f0       	brlt	.+48     	; 0x1e42 <vMainSensorTowerTask+0x1f4>
    1e12:	af 84       	ldd	r10, Y+15	; 0x0f
    1e14:	ae 86       	std	Y+14, r10	; 0x0e
    1e16:	8e 85       	ldd	r24, Y+14	; 0x0e
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1e18:	81 50       	subi	r24, 0x01	; 1
    1e1a:	83 31       	cpi	r24, 0x13	; 19
    1e1c:	90 f4       	brcc	.+36     	; 0x1e42 <vMainSensorTowerTask+0x1f4>
    1e1e:	1c 82       	std	Y+4, r1	; 0x04
                // Stop controller
                struct sPolar Setpoint = {0, 0};
    1e20:	1d 82       	std	Y+5, r1	; 0x05
    1e22:	1e 82       	std	Y+6, r1	; 0x06
    1e24:	1f 82       	std	Y+7, r1	; 0x07
    1e26:	19 86       	std	Y+9, r1	; 0x09
    1e28:	18 86       	std	Y+8, r1	; 0x08
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1e2c:	44 e6       	ldi	r20, 0x64	; 100
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	be 01       	movw	r22, r28
    1e32:	6c 5f       	subi	r22, 0xFC	; 252
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <poseControllerQ>
    1e3a:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <poseControllerQ+0x1>
    1e3e:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
    1e42:	8b e5       	ldi	r24, 0x5B	; 91
				
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1e44:	88 16       	cp	r8, r24
    1e46:	91 04       	cpc	r9, r1
    1e48:	9c f4       	brge	.+38     	; 0x1e70 <vMainSensorTowerTask+0x222>
    1e4a:	94 e0       	ldi	r25, 0x04	; 4
    1e4c:	d9 12       	cpse	r13, r25
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <vMainSensorTowerTask+0x222>
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <vMainSensorTowerTask+0x20a>
    1e56:	40 c0       	rjmp	.+128    	; 0x1ed8 <vMainSensorTowerTask+0x28a>
    1e58:	1f 5f       	subi	r17, 0xFF	; 255
                servoStep++;
    1e5a:	14 9d       	mul	r17, r4
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e5c:	40 01       	movw	r8, r0
    1e5e:	15 9d       	mul	r17, r5
    1e60:	90 0c       	add	r9, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	aa e5       	ldi	r26, 0x5A	; 90
    1e66:	8a 16       	cp	r8, r26
    1e68:	91 04       	cpc	r9, r1
    1e6a:	0c f0       	brlt	.+2      	; 0x1e6e <vMainSensorTowerTask+0x220>
    1e6c:	06 cf       	rjmp	.-500    	; 0x1c7a <vMainSensorTowerTask+0x2c>
    1e6e:	15 c0       	rjmp	.+42     	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e70:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e72:	19 04       	cpc	r1, r9
    1e74:	34 f5       	brge	.+76     	; 0x1ec2 <vMainSensorTowerTask+0x274>
    1e76:	b3 e0       	ldi	r27, 0x03	; 3
    1e78:	db 12       	cpse	r13, r27
    1e7a:	28 c0       	rjmp	.+80     	; 0x1ecc <vMainSensorTowerTask+0x27e>
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <vMainSensorTowerTask+0x236>
    1e82:	09 cf       	rjmp	.-494    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1e84:	11 50       	subi	r17, 0x01	; 1
                servoStep --;
    1e86:	14 9d       	mul	r17, r4
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e88:	40 01       	movw	r8, r0
    1e8a:	15 9d       	mul	r17, r5
    1e8c:	90 0c       	add	r9, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e92:	84 e0       	ldi	r24, 0x04	; 4
    1e94:	d8 16       	cp	r13, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vMainSensorTowerTask+0x24c>
    1e98:	f5 ce       	rjmp	.-534    	; 0x1c84 <vMainSensorTowerTask+0x36>
    1e9a:	18 14       	cp	r1, r8
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1e9c:	19 04       	cpc	r1, r9
    1e9e:	0c f4       	brge	.+2      	; 0x1ea2 <vMainSensorTowerTask+0x254>
    1ea0:	fa ce       	rjmp	.-524    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	d9 12       	cpse	r13, r25
    1ea6:	f7 ce       	rjmp	.-530    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ea8:	d2 2c       	mov	r13, r2
                rotationDirection = moveCounterClockwise;
    1eaa:	f5 ce       	rjmp	.-534    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1eae:	0e 94 93 21 	call	0x4326	; 0x4326 <vServo_setAngle>
    1eb2:	84 e6       	ldi	r24, 0x64	; 100
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <vTaskDelay>
    1eba:	f1 2c       	mov	r15, r1
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1ebc:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1ebe:	d2 2c       	mov	r13, r2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1ec0:	ea ce       	rjmp	.-556    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ec2:	aa e5       	ldi	r26, 0x5A	; 90
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1ec4:	8a 16       	cp	r8, r26
    1ec6:	91 04       	cpc	r9, r1
    1ec8:	64 f3       	brlt	.-40     	; 0x1ea2 <vMainSensorTowerTask+0x254>
    1eca:	0a c0       	rjmp	.+20     	; 0x1ee0 <vMainSensorTowerTask+0x292>
    1ecc:	ba e5       	ldi	r27, 0x5A	; 90
    1ece:	8b 16       	cp	r8, r27
    1ed0:	91 04       	cpc	r9, r1
    1ed2:	0c f4       	brge	.+2      	; 0x1ed6 <vMainSensorTowerTask+0x288>
    1ed4:	e0 ce       	rjmp	.-576    	; 0x1c96 <vMainSensorTowerTask+0x48>
    1ed6:	dd cf       	rjmp	.-70     	; 0x1e92 <vMainSensorTowerTask+0x244>
    1ed8:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1eda:	19 04       	cpc	r1, r9
    1edc:	bc f3       	brlt	.-18     	; 0x1ecc <vMainSensorTowerTask+0x27e>
    1ede:	f1 cf       	rjmp	.-30     	; 0x1ec2 <vMainSensorTowerTask+0x274>
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1ee2:	d8 16       	cp	r13, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <vMainSensorTowerTask+0x29a>
    1ee6:	d3 ce       	rjmp	.-602    	; 0x1c8e <vMainSensorTowerTask+0x40>
    1ee8:	dc cf       	rjmp	.-72     	; 0x1ea2 <vMainSensorTowerTask+0x254>

00001eea <vMainPoseControllerTask>:
    1eea:	cf 93       	push	r28
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	ab 97       	sbiw	r28, 0x2b	; 43
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    #ifdef DEBUG
        printf("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
    /* Task init */    
    struct sPolar Setpoint = {0}; // Updates from server
    1efe:	fe 01       	movw	r30, r28
    1f00:	31 96       	adiw	r30, 0x01	; 1
    1f02:	86 e0       	ldi	r24, 0x06	; 6
    1f04:	df 01       	movw	r26, r30
    1f06:	1d 92       	st	X+, r1
    1f08:	8a 95       	dec	r24
    1f0a:	e9 f7       	brne	.-6      	; 0x1f06 <vMainPoseControllerTask+0x1c>
    struct sCartesian Error = {0}; // Error values
    struct sPolar oldVal = {0};
    struct sPolar referenceModel = {0};
	float radiusEpsilon = 15; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1f0c:	1f 82       	std	Y+7, r1	; 0x07
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1f0e:	19 86       	std	Y+9, r1	; 0x09
    1f10:	18 86       	std	Y+8, r1	; 0x08
	int16_t rightWheelTicks = 0;
    1f12:	1b 86       	std	Y+11, r1	; 0x0b
    1f14:	1a 86       	std	Y+10, r1	; 0x0a
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1f16:	1c 86       	std	Y+12, r1	; 0x0c
	uint8_t gRightWheelDirection = 0;
    1f18:	1d 86       	std	Y+13, r1	; 0x0d
	
	uint8_t idleSendt = FALSE;
    1f1a:	1a 8e       	std	Y+26, r1	; 0x1a
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1f1c:	b1 e0       	ldi	r27, 0x01	; 1
    1f1e:	bb a7       	std	Y+43, r27	; 0x2b
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1f20:	1f a2       	std	Y+39, r1	; 0x27
    1f22:	18 a6       	std	Y+40, r1	; 0x28
    1f24:	19 a6       	std	Y+41, r1	; 0x29
    1f26:	1a a6       	std	Y+42, r1	; 0x2a
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1f28:	1b a2       	std	Y+35, r1	; 0x23
    1f2a:	1c a2       	std	Y+36, r1	; 0x24
    1f2c:	1d a2       	std	Y+37, r1	; 0x25
    1f2e:	1e a2       	std	Y+38, r1	; 0x26
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
	float yTargt = 0;
    1f30:	1f 8e       	std	Y+31, r1	; 0x1f
    1f32:	18 a2       	std	Y+32, r1	; 0x20
    1f34:	19 a2       	std	Y+33, r1	; 0x21
    1f36:	1a a2       	std	Y+34, r1	; 0x22
	int16_t yhat = 0;
	
	/* Goal variables*/
	float distance = 0;
	float thetaDiff = 0;
	float xTargt = 0;
    1f38:	1b 8e       	std	Y+27, r1	; 0x1b
    1f3a:	1c 8e       	std	Y+28, r1	; 0x1c
    1f3c:	1d 8e       	std	Y+29, r1	; 0x1d
    1f3e:	1e 8e       	std	Y+30, r1	; 0x1e
	
	
      
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1f40:	80 91 10 1a 	lds	r24, 0x1A10	; 0x801a10 <gHandshook>
    1f44:	88 23       	and	r24, r24
    1f46:	e1 f3       	breq	.-8      	; 0x1f40 <vMainPoseControllerTask+0x56>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f48:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1f4a:	40 91 11 1a 	lds	r20, 0x1A11	; 0x801a11 <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1f4e:	10 92 11 1a 	sts	0x1A11, r1	; 0x801a11 <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1f52:	10 91 12 1a 	lds	r17, 0x1A12	; 0x801a12 <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1f56:	10 92 12 1a 	sts	0x1A12, r1	; 0x801a12 <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1f5a:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1f5c:	be 01       	movw	r22, r28
    1f5e:	68 5f       	subi	r22, 0xF8	; 248
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f64:	10 d7       	rcall	.+3616   	; 0x2d86 <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1f66:	41 2f       	mov	r20, r17
    1f68:	be 01       	movw	r22, r28
    1f6a:	66 5f       	subi	r22, 0xF6	; 246
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	21 d7       	rcall	.+3650   	; 0x2db4 <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	80 91 7d 1b 	lds	r24, 0x1B7D	; 0x801b7d <xTickMutex>
    1f80:	90 91 7e 1b 	lds	r25, 0x1B7E	; 0x801b7e <xTickMutex+0x1>
    1f84:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	90 93 04 1a 	sts	0x1A04, r25	; 0x801a04 <gLeftWheelTicks+0x1>
    1f90:	80 93 03 1a 	sts	0x1A03, r24	; 0x801a03 <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f98:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <gRightWheelTicks+0x1>
    1f9c:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	80 91 7d 1b 	lds	r24, 0x1B7D	; 0x801b7d <xTickMutex>
    1fa8:	90 91 7e 1b 	lds	r25, 0x1B7E	; 0x801b7e <xTickMutex+0x1>
    1fac:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	4f ef       	ldi	r20, 0xFF	; 255
    1fb4:	5f ef       	ldi	r21, 0xFF	; 255
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <xControllerBSem>
    1fbe:	90 91 7c 1b 	lds	r25, 0x1B7C	; 0x801b7c <xControllerBSem+0x1>
    1fc2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <vMainPoseControllerTask+0xe2>
    1fca:	ba cf       	rjmp	.-140    	; 0x1f40 <vMainPoseControllerTask+0x56>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	4f ef       	ldi	r20, 0xFF	; 255
    1fd0:	5f ef       	ldi	r21, 0xFF	; 255
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    1fda:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    1fde:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1fe2:	40 90 0b 1a 	lds	r4, 0x1A0B	; 0x801a0b <gTheta_hat>
    1fe6:	50 90 0c 1a 	lds	r5, 0x1A0C	; 0x801a0c <gTheta_hat+0x1>
    1fea:	60 90 0d 1a 	lds	r6, 0x1A0D	; 0x801a0d <gTheta_hat+0x2>
    1fee:	70 90 0e 1a 	lds	r7, 0x1A0E	; 0x801a0e <gTheta_hat+0x3>
					xhat = gX_hat;
    1ff2:	00 91 09 1a 	lds	r16, 0x1A09	; 0x801a09 <gX_hat>
    1ff6:	10 91 0a 1a 	lds	r17, 0x1A0A	; 0x801a0a <gX_hat+0x1>
					yhat = gY_hat;
    1ffa:	20 90 07 1a 	lds	r2, 0x1A07	; 0x801a07 <gY_hat>
    1ffe:	30 90 08 1a 	lds	r3, 0x1A08	; 0x801a08 <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    200a:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    200e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	be 01       	movw	r22, r28
    201a:	6f 5f       	subi	r22, 0xFF	; 255
    201c:	7f 4f       	sbci	r23, 0xFF	; 255
    201e:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <poseControllerQ>
    2022:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <poseControllerQ+0x1>
    2026:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	09 f0       	breq	.+2      	; 0x2030 <vMainPoseControllerTask+0x146>
    202e:	73 c0       	rjmp	.+230    	; 0x2116 <vMainPoseControllerTask+0x22c>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	44 e1       	ldi	r20, 0x14	; 20
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	be 01       	movw	r22, r28
    2038:	6f 5f       	subi	r22, 0xFF	; 255
    203a:	7f 4f       	sbci	r23, 0xFF	; 255
    203c:	80 91 17 1a 	lds	r24, 0x1A17	; 0x801a17 <poseControllerQ>
    2040:	90 91 18 1a 	lds	r25, 0x1A18	; 0x801a18 <poseControllerQ+0x1>
    2044:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
					Setpoint.distance = Setpoint.distance*10; //Distance is received in cm, convert to mm for continuity
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	bc 01       	movw	r22, r24
    204e:	66 0f       	add	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	68 0f       	add	r22, r24
    2060:	79 1f       	adc	r23, r25
    2062:	7e 83       	std	Y+6, r23	; 0x06
    2064:	6d 83       	std	Y+5, r22	; 0x05
					
					
					
					xTargt = xhat + Setpoint.distance*cos(Setpoint.heading + thetahat);
    2066:	07 2e       	mov	r0, r23
    2068:	00 0c       	add	r0, r0
    206a:	88 0b       	sbc	r24, r24
    206c:	99 0b       	sbc	r25, r25
    206e:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    2072:	6a 8b       	std	Y+18, r22	; 0x12
    2074:	7b 8b       	std	Y+19, r23	; 0x13
    2076:	8c 8b       	std	Y+20, r24	; 0x14
    2078:	9d 8b       	std	Y+21, r25	; 0x15
    207a:	29 81       	ldd	r18, Y+1	; 0x01
    207c:	3a 81       	ldd	r19, Y+2	; 0x02
    207e:	4b 81       	ldd	r20, Y+3	; 0x03
    2080:	5c 81       	ldd	r21, Y+4	; 0x04
    2082:	c3 01       	movw	r24, r6
    2084:	b2 01       	movw	r22, r4
    2086:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    208a:	6b 01       	movw	r12, r22
    208c:	7c 01       	movw	r14, r24
    208e:	0e 94 44 31 	call	0x6288	; 0x6288 <cos>
    2092:	6e 8b       	std	Y+22, r22	; 0x16
    2094:	7f 8b       	std	Y+23, r23	; 0x17
    2096:	88 8f       	std	Y+24, r24	; 0x18
    2098:	99 8f       	std	Y+25, r25	; 0x19
    209a:	b8 01       	movw	r22, r16
    209c:	01 2e       	mov	r0, r17
    209e:	00 0c       	add	r0, r0
    20a0:	88 0b       	sbc	r24, r24
    20a2:	99 0b       	sbc	r25, r25
    20a4:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    20a8:	4b 01       	movw	r8, r22
    20aa:	5c 01       	movw	r10, r24
    20ac:	2e 89       	ldd	r18, Y+22	; 0x16
    20ae:	3f 89       	ldd	r19, Y+23	; 0x17
    20b0:	48 8d       	ldd	r20, Y+24	; 0x18
    20b2:	59 8d       	ldd	r21, Y+25	; 0x19
    20b4:	6a 89       	ldd	r22, Y+18	; 0x12
    20b6:	7b 89       	ldd	r23, Y+19	; 0x13
    20b8:	8c 89       	ldd	r24, Y+20	; 0x14
    20ba:	9d 89       	ldd	r25, Y+21	; 0x15
    20bc:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	c5 01       	movw	r24, r10
    20c6:	b4 01       	movw	r22, r8
    20c8:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    20cc:	6b 8f       	std	Y+27, r22	; 0x1b
    20ce:	7c 8f       	std	Y+28, r23	; 0x1c
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	9e 8f       	std	Y+30, r25	; 0x1e
					yTargt = yhat + Setpoint.distance*sin(Setpoint.heading + thetahat);
    20d4:	c7 01       	movw	r24, r14
    20d6:	b6 01       	movw	r22, r12
    20d8:	0e 94 5e 33 	call	0x66bc	; 0x66bc <sin>
    20dc:	4b 01       	movw	r8, r22
    20de:	5c 01       	movw	r10, r24
    20e0:	b1 01       	movw	r22, r2
    20e2:	03 2c       	mov	r0, r3
    20e4:	00 0c       	add	r0, r0
    20e6:	88 0b       	sbc	r24, r24
    20e8:	99 0b       	sbc	r25, r25
    20ea:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    20ee:	6b 01       	movw	r12, r22
    20f0:	7c 01       	movw	r14, r24
    20f2:	a5 01       	movw	r20, r10
    20f4:	94 01       	movw	r18, r8
    20f6:	6a 89       	ldd	r22, Y+18	; 0x12
    20f8:	7b 89       	ldd	r23, Y+19	; 0x13
    20fa:	8c 89       	ldd	r24, Y+20	; 0x14
    20fc:	9d 89       	ldd	r25, Y+21	; 0x15
    20fe:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	c7 01       	movw	r24, r14
    2108:	b6 01       	movw	r22, r12
    210a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    210e:	6f 8f       	std	Y+31, r22	; 0x1f
    2110:	78 a3       	std	Y+32, r23	; 0x20
    2112:	89 a3       	std	Y+33, r24	; 0x21
    2114:	9a a3       	std	Y+34, r25	; 0x22
					
					
				
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    2116:	b8 01       	movw	r22, r16
    2118:	11 0f       	add	r17, r17
    211a:	88 0b       	sbc	r24, r24
    211c:	99 0b       	sbc	r25, r25
    211e:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    2122:	9b 01       	movw	r18, r22
    2124:	ac 01       	movw	r20, r24
    2126:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2128:	7c 8d       	ldd	r23, Y+28	; 0x1c
    212a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2132:	6a 8b       	std	Y+18, r22	; 0x12
    2134:	7b 8b       	std	Y+19, r23	; 0x13
    2136:	8c 8b       	std	Y+20, r24	; 0x14
    2138:	9d 8b       	std	Y+21, r25	; 0x15
    213a:	b1 01       	movw	r22, r2
    213c:	33 0c       	add	r3, r3
    213e:	88 0b       	sbc	r24, r24
    2140:	99 0b       	sbc	r25, r25
    2142:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    2146:	9b 01       	movw	r18, r22
    2148:	ac 01       	movw	r20, r24
    214a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    214c:	78 a1       	ldd	r23, Y+32	; 0x20
    214e:	89 a1       	ldd	r24, Y+33	; 0x21
    2150:	9a a1       	ldd	r25, Y+34	; 0x22
    2152:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2156:	6b 01       	movw	r12, r22
    2158:	7c 01       	movw	r14, r24
    215a:	2a 89       	ldd	r18, Y+18	; 0x12
    215c:	3b 89       	ldd	r19, Y+19	; 0x13
    215e:	4c 89       	ldd	r20, Y+20	; 0x14
    2160:	5d 89       	ldd	r21, Y+21	; 0x15
    2162:	ca 01       	movw	r24, r20
    2164:	b9 01       	movw	r22, r18
    2166:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    216a:	4b 01       	movw	r8, r22
    216c:	5c 01       	movw	r10, r24
    216e:	a7 01       	movw	r20, r14
    2170:	96 01       	movw	r18, r12
    2172:	c7 01       	movw	r24, r14
    2174:	b6 01       	movw	r22, r12
    2176:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    217a:	6e 8b       	std	Y+22, r22	; 0x16
    217c:	7f 8b       	std	Y+23, r23	; 0x17
    217e:	88 8f       	std	Y+24, r24	; 0x18
    2180:	99 8f       	std	Y+25, r25	; 0x19
    2182:	2e 89       	ldd	r18, Y+22	; 0x16
    2184:	3f 89       	ldd	r19, Y+23	; 0x17
    2186:	48 8d       	ldd	r20, Y+24	; 0x18
    2188:	59 8d       	ldd	r21, Y+25	; 0x19
    218a:	c5 01       	movw	r24, r10
    218c:	b4 01       	movw	r22, r8
    218e:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2192:	0e 94 68 33 	call	0x66d0	; 0x66d0 <sqrt>
    2196:	4b 01       	movw	r8, r22
    2198:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	4a ef       	ldi	r20, 0xFA	; 250
    21a0:	53 e4       	ldi	r21, 0x43	; 67
    21a2:	0e 94 40 31 	call	0x6280	; 0x6280 <__cmpsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	c4 f4       	brge	.+48     	; 0x21da <vMainPoseControllerTask+0x2f0>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	48 e8       	ldi	r20, 0x88	; 136
    21b0:	52 e4       	ldi	r21, 0x42	; 66
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	4a ef       	ldi	r20, 0xFA	; 250
    21c0:	53 e4       	ldi	r21, 0x43	; 67
    21c2:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	52 e4       	ldi	r21, 0x42	; 66
    21ce:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    21d2:	0e 94 b4 31 	call	0x6368	; 0x6368 <__fixunssfsi>
    21d6:	06 2f       	mov	r16, r22
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <vMainPoseControllerTask+0x2f2>
				}else{
					currentDriveActuation = maxDriveActuation;
    21da:	04 e6       	ldi	r16, 0x64	; 100
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e7       	ldi	r20, 0x70	; 112
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	c5 01       	movw	r24, r10
    21e6:	b4 01       	movw	r22, r8
    21e8:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <vMainPoseControllerTask+0x308>
    21f0:	4e c1       	rjmp	.+668    	; 0x248e <__stack+0x28f>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    21f2:	2a 89       	ldd	r18, Y+18	; 0x12
    21f4:	3b 89       	ldd	r19, Y+19	; 0x13
    21f6:	4c 89       	ldd	r20, Y+20	; 0x14
    21f8:	5d 89       	ldd	r21, Y+21	; 0x15
    21fa:	c7 01       	movw	r24, r14
    21fc:	b6 01       	movw	r22, r12
    21fe:	0e 94 ed 30 	call	0x61da	; 0x61da <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    2202:	a3 01       	movw	r20, r6
    2204:	92 01       	movw	r18, r4
    2206:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    220a:	6e 87       	std	Y+14, r22	; 0x0e
    220c:	7f 87       	std	Y+15, r23	; 0x0f
    220e:	88 8b       	std	Y+16, r24	; 0x10
    2210:	99 8b       	std	Y+17, r25	; 0x11
					vFunc_Inf2pi(&thetaDiff);
    2212:	ce 01       	movw	r24, r28
    2214:	0e 96       	adiw	r24, 0x0e	; 14
    2216:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    221a:	4e 84       	ldd	r4, Y+14	; 0x0e
    221c:	5f 84       	ldd	r5, Y+15	; 0x0f
    221e:	68 88       	ldd	r6, Y+16	; 0x10
    2220:	79 88       	ldd	r7, Y+17	; 0x11
    2222:	53 01       	movw	r10, r6
    2224:	42 01       	movw	r8, r4
    2226:	e8 94       	clt
    2228:	b7 f8       	bld	r11, 7
    222a:	29 e1       	ldi	r18, 0x19	; 25
    222c:	34 e0       	ldi	r19, 0x04	; 4
    222e:	46 e0       	ldi	r20, 0x06	; 6
    2230:	5f e3       	ldi	r21, 0x3F	; 63
    2232:	c5 01       	movw	r24, r10
    2234:	b4 01       	movw	r22, r8
    2236:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f4       	brge	.+2      	; 0x2240 <__stack+0x41>
    223e:	ac c0       	rjmp	.+344    	; 0x2398 <__stack+0x199>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    2240:	22 e7       	ldi	r18, 0x72	; 114
    2242:	3a e8       	ldi	r19, 0x8A	; 138
    2244:	4e e8       	ldi	r20, 0x8E	; 142
    2246:	5c e3       	ldi	r21, 0x3C	; 60
    2248:	c5 01       	movw	r24, r10
    224a:	b4 01       	movw	r22, r8
    224c:	0e 94 40 31 	call	0x6280	; 0x6280 <__cmpsf2>
    2250:	88 23       	and	r24, r24
    2252:	24 f0       	brlt	.+8      	; 0x225c <__stack+0x5d>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	81 11       	cpse	r24, r1
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <__stack+0x61>
    225a:	9e c0       	rjmp	.+316    	; 0x2398 <__stack+0x199>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    225c:	a1 e0       	ldi	r26, 0x01	; 1
    225e:	ab a7       	std	Y+43, r26	; 0x2b
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	c3 01       	movw	r24, r6
    2268:	b2 01       	movw	r22, r4
    226a:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    226e:	88 23       	and	r24, r24
    2270:	bc f1       	brlt	.+110    	; 0x22e0 <__stack+0xe1>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    2272:	10 e0       	ldi	r17, 0x00	; 0
    2274:	b8 01       	movw	r22, r16
    2276:	01 2e       	mov	r0, r17
    2278:	00 0c       	add	r0, r0
    227a:	88 0b       	sbc	r24, r24
    227c:	99 0b       	sbc	r25, r25
    227e:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    2282:	6b 01       	movw	r12, r22
    2284:	7c 01       	movw	r14, r24
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	46 e1       	ldi	r20, 0x16	; 22
    228c:	54 e4       	ldi	r21, 0x44	; 68
    228e:	c5 01       	movw	r24, r10
    2290:	b4 01       	movw	r22, r8
    2292:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	c7 01       	movw	r24, r14
    229c:	b6 01       	movw	r22, r12
    229e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    22a2:	6b 01       	movw	r12, r22
    22a4:	7c 01       	movw	r14, r24
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	6b a1       	ldd	r22, Y+35	; 0x23
    22b0:	7c a1       	ldd	r23, Y+36	; 0x24
    22b2:	8d a1       	ldd	r24, Y+37	; 0x25
    22b4:	9e a1       	ldd	r25, Y+38	; 0x26
    22b6:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    22ba:	9b 01       	movw	r18, r22
    22bc:	ac 01       	movw	r20, r24
    22be:	c7 01       	movw	r24, r14
    22c0:	b6 01       	movw	r22, r12
    22c2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    22c6:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    22ca:	06 17       	cp	r16, r22
    22cc:	17 07       	cpc	r17, r23
    22ce:	0c f4       	brge	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	41 c0       	rjmp	.+130    	; 0x2354 <__stack+0x155>
    22d2:	7b 01       	movw	r14, r22
    22d4:	77 23       	and	r23, r23
    22d6:	0c f0       	brlt	.+2      	; 0x22da <__stack+0xdb>
    22d8:	40 c0       	rjmp	.+128    	; 0x235a <__stack+0x15b>
    22da:	e1 2c       	mov	r14, r1
    22dc:	f1 2c       	mov	r15, r1
    22de:	3d c0       	rjmp	.+122    	; 0x235a <__stack+0x15b>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    22e0:	e0 2e       	mov	r14, r16
    22e2:	f1 2c       	mov	r15, r1
    22e4:	b7 01       	movw	r22, r14
    22e6:	0f 2c       	mov	r0, r15
    22e8:	00 0c       	add	r0, r0
    22ea:	88 0b       	sbc	r24, r24
    22ec:	99 0b       	sbc	r25, r25
    22ee:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    22f2:	6a 8b       	std	Y+18, r22	; 0x12
    22f4:	7b 8b       	std	Y+19, r23	; 0x13
    22f6:	8c 8b       	std	Y+20, r24	; 0x14
    22f8:	9d 8b       	std	Y+21, r25	; 0x15
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	46 e1       	ldi	r20, 0x16	; 22
    2300:	54 e4       	ldi	r21, 0x44	; 68
    2302:	c5 01       	movw	r24, r10
    2304:	b4 01       	movw	r22, r8
    2306:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	6a 89       	ldd	r22, Y+18	; 0x12
    2310:	7b 89       	ldd	r23, Y+19	; 0x13
    2312:	8c 89       	ldd	r24, Y+20	; 0x14
    2314:	9d 89       	ldd	r25, Y+21	; 0x15
    2316:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    231a:	4b 01       	movw	r8, r22
    231c:	5c 01       	movw	r10, r24
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	c5 01       	movw	r24, r10
    2338:	b4 01       	movw	r22, r8
    233a:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    233e:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    2342:	e6 16       	cp	r14, r22
    2344:	f7 06       	cpc	r15, r23
    2346:	44 f0       	brlt	.+16     	; 0x2358 <__stack+0x159>
    2348:	8b 01       	movw	r16, r22
    234a:	77 23       	and	r23, r23
    234c:	34 f4       	brge	.+12     	; 0x235a <__stack+0x15b>
    234e:	00 e0       	ldi	r16, 0x00	; 0
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	03 c0       	rjmp	.+6      	; 0x235a <__stack+0x15b>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    2354:	78 01       	movw	r14, r16
    2356:	01 c0       	rjmp	.+2      	; 0x235a <__stack+0x15b>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    2358:	87 01       	movw	r16, r14
							
							
							
						}
						
						leftIntError += thetaDiff;
    235a:	a3 01       	movw	r20, r6
    235c:	92 01       	movw	r18, r4
    235e:	6b a1       	ldd	r22, Y+35	; 0x23
    2360:	7c a1       	ldd	r23, Y+36	; 0x24
    2362:	8d a1       	ldd	r24, Y+37	; 0x25
    2364:	9e a1       	ldd	r25, Y+38	; 0x26
    2366:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    236a:	6b a3       	std	Y+35, r22	; 0x23
    236c:	7c a3       	std	Y+36, r23	; 0x24
    236e:	8d a3       	std	Y+37, r24	; 0x25
    2370:	9e a3       	std	Y+38, r25	; 0x26
						rightIntError -= thetaDiff;
    2372:	a3 01       	movw	r20, r6
    2374:	92 01       	movw	r18, r4
    2376:	6f a1       	ldd	r22, Y+39	; 0x27
    2378:	78 a5       	ldd	r23, Y+40	; 0x28
    237a:	89 a5       	ldd	r24, Y+41	; 0x29
    237c:	9a a5       	ldd	r25, Y+42	; 0x2a
    237e:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2382:	6f a3       	std	Y+39, r22	; 0x27
    2384:	78 a7       	std	Y+40, r23	; 0x28
    2386:	89 a7       	std	Y+41, r24	; 0x29
    2388:	9a a7       	std	Y+42, r25	; 0x2a
						
						
						gRightWheelDirection = motorRightForward;
    238a:	b6 e0       	ldi	r27, 0x06	; 6
    238c:	bd 87       	std	Y+13, r27	; 0x0d
						gLeftWheelDirection = motorLeftForward;
    238e:	84 e0       	ldi	r24, 0x04	; 4
    2390:	8c 87       	std	Y+12, r24	; 0x0c
						lastMovement = moveForward;
    2392:	a1 e0       	ldi	r26, 0x01	; 1
    2394:	af 83       	std	Y+7, r26	; 0x07
    2396:	70 c0       	rjmp	.+224    	; 0x2478 <__stack+0x279>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	c3 01       	movw	r24, r6
    23a0:	b2 01       	movw	r22, r4
    23a2:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    23a6:	88 23       	and	r24, r24
    23a8:	a4 f1       	brlt	.+104    	; 0x2412 <__stack+0x213>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    23aa:	2e ea       	ldi	r18, 0xAE	; 174
    23ac:	37 e4       	ldi	r19, 0x47	; 71
    23ae:	41 e6       	ldi	r20, 0x61	; 97
    23b0:	5e e3       	ldi	r21, 0x3E	; 62
    23b2:	c5 01       	movw	r24, r10
    23b4:	b4 01       	movw	r22, r8
    23b6:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    23ba:	2a e9       	ldi	r18, 0x9A	; 154
    23bc:	39 e9       	ldi	r19, 0x99	; 153
    23be:	49 e9       	ldi	r20, 0x99	; 153
    23c0:	5e e3       	ldi	r21, 0x3E	; 62
    23c2:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    23c6:	4b 01       	movw	r8, r22
    23c8:	5c 01       	movw	r10, r24
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	46 e9       	ldi	r20, 0x96	; 150
    23d0:	52 ec       	ldi	r21, 0xC2	; 194
    23d2:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    23d6:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    23da:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftBackward;
    23dc:	b5 e0       	ldi	r27, 0x05	; 5
    23de:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	46 e9       	ldi	r20, 0x96	; 150
    23e6:	52 e4       	ldi	r21, 0x42	; 66
    23e8:	c5 01       	movw	r24, r10
    23ea:	b4 01       	movw	r22, r8
    23ec:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    23f0:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    23f4:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightForward;
    23f6:	86 e0       	ldi	r24, 0x06	; 6
    23f8:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveCounterClockwise;
    23fa:	a4 e0       	ldi	r26, 0x04	; 4
    23fc:	af 83       	std	Y+7, r26	; 0x07
    23fe:	1b a6       	std	Y+43, r1	; 0x2b
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2400:	1f a2       	std	Y+39, r1	; 0x27
    2402:	18 a6       	std	Y+40, r1	; 0x28
    2404:	19 a6       	std	Y+41, r1	; 0x29
    2406:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2408:	1b a2       	std	Y+35, r1	; 0x23
    240a:	1c a2       	std	Y+36, r1	; 0x24
    240c:	1d a2       	std	Y+37, r1	; 0x25
    240e:	1e a2       	std	Y+38, r1	; 0x26
    2410:	33 c0       	rjmp	.+102    	; 0x2478 <__stack+0x279>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2412:	2e ea       	ldi	r18, 0xAE	; 174
    2414:	37 e4       	ldi	r19, 0x47	; 71
    2416:	41 e6       	ldi	r20, 0x61	; 97
    2418:	5e e3       	ldi	r21, 0x3E	; 62
    241a:	c5 01       	movw	r24, r10
    241c:	b4 01       	movw	r22, r8
    241e:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2422:	2a e9       	ldi	r18, 0x9A	; 154
    2424:	39 e9       	ldi	r19, 0x99	; 153
    2426:	49 e9       	ldi	r20, 0x99	; 153
    2428:	5e e3       	ldi	r21, 0x3E	; 62
    242a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    242e:	4b 01       	movw	r8, r22
    2430:	5c 01       	movw	r10, r24
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	46 e9       	ldi	r20, 0x96	; 150
    2438:	52 e4       	ldi	r21, 0x42	; 66
    243a:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    243e:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    2442:	7b 01       	movw	r14, r22
							gLeftWheelDirection = motorLeftForward;
    2444:	b4 e0       	ldi	r27, 0x04	; 4
    2446:	bc 87       	std	Y+12, r27	; 0x0c
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	46 e9       	ldi	r20, 0x96	; 150
    244e:	52 ec       	ldi	r21, 0xC2	; 194
    2450:	c5 01       	movw	r24, r10
    2452:	b4 01       	movw	r22, r8
    2454:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2458:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    245c:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightBackward;
    245e:	85 e0       	ldi	r24, 0x05	; 5
    2460:	8d 87       	std	Y+13, r24	; 0x0d
							lastMovement = moveClockwise;
    2462:	a3 e0       	ldi	r26, 0x03	; 3
    2464:	af 83       	std	Y+7, r26	; 0x07
    2466:	1b a6       	std	Y+43, r1	; 0x2b
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2468:	1f a2       	std	Y+39, r1	; 0x27
    246a:	18 a6       	std	Y+40, r1	; 0x28
    246c:	19 a6       	std	Y+41, r1	; 0x29
    246e:	1a a6       	std	Y+42, r1	; 0x2a
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2470:	1b a2       	std	Y+35, r1	; 0x23
    2472:	1c a2       	std	Y+36, r1	; 0x24
    2474:	1d a2       	std	Y+37, r1	; 0x25
    2476:	1e a2       	std	Y+38, r1	; 0x26
					
					
					
					
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    2478:	9e 01       	movw	r18, r28
    247a:	23 5f       	subi	r18, 0xF3	; 243
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	ae 01       	movw	r20, r28
    2480:	44 5f       	subi	r20, 0xF4	; 244
    2482:	5f 4f       	sbci	r21, 0xFF	; 255
    2484:	b8 01       	movw	r22, r16
    2486:	c7 01       	movw	r24, r14
    2488:	57 d4       	rcall	.+2222   	; 0x2d38 <vMotorMovementSwitch>
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    248a:	1a 8e       	std	Y+26, r1	; 0x1a
    248c:	0a c0       	rjmp	.+20     	; 0x24a2 <__stack+0x2a3>
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    248e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2490:	b1 11       	cpse	r27, r1
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__stack+0x29d>
						send_idle();
    2494:	0e 94 0e 21 	call	0x421c	; 0x421c <send_idle>
						idleSendt = TRUE;
					}
					
					
					vMotorBrakeLeft();
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	8a 8f       	std	Y+26, r24	; 0x1a
					vMotorBrakeRight();
    249c:	39 d4       	rcall	.+2162   	; 0x2d10 <vMotorBrakeLeft>
    249e:	3d d4       	rcall	.+2170   	; 0x2d1a <vMotorBrakeRight>
					lastMovement = moveStop;
    24a0:	1f 82       	std	Y+7, r1	; 0x07
				}
				
				
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	69 5f       	subi	r22, 0xF9	; 249
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	80 91 15 1a 	lds	r24, 0x1A15	; 0x801a15 <scanStatusQ>
    24b2:	90 91 16 1a 	lds	r25, 0x1A16	; 0x801a16 <scanStatusQ+0x1>
    24b6:	0e 94 33 1b 	call	0x3666	; 0x3666 <xQueueGenericSend>
    24ba:	42 cd       	rjmp	.-1404   	; 0x1f40 <vMainPoseControllerTask+0x56>

000024bc <vMainPoseEstimatorTask>:
	  
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	e1 97       	sbiw	r28, 0x31	; 49
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    24d0:	19 82       	std	Y+1, r1	; 0x01
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	1b 82       	std	Y+3, r1	; 0x03
    24d6:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    24d8:	0e 94 48 29 	call	0x5290	; 0x5290 <xTaskGetTickCount>
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    24e0:	1d a6       	std	Y+45, r1	; 0x2d
    24e2:	1e a6       	std	Y+46, r1	; 0x2e
    24e4:	1f a6       	std	Y+47, r1	; 0x2f
    24e6:	18 aa       	std	Y+48, r1	; 0x30
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    float compassOffset = 0.0;
    24e8:	19 a2       	std	Y+33, r1	; 0x21
    24ea:	1a a2       	std	Y+34, r1	; 0x22
    24ec:	1b a2       	std	Y+35, r1	; 0x23
    24ee:	1c a2       	std	Y+36, r1	; 0x24
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    24f0:	1d 8e       	std	Y+29, r1	; 0x1d
    24f2:	1e 8e       	std	Y+30, r1	; 0x1e
    24f4:	1f 8e       	std	Y+31, r1	; 0x1f
    24f6:	18 a2       	std	Y+32, r1	; 0x20
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    24f8:	1d 8a       	std	Y+21, r1	; 0x15
    24fa:	1e 8a       	std	Y+22, r1	; 0x16
    24fc:	1f 8a       	std	Y+23, r1	; 0x17
    24fe:	18 8e       	std	Y+24, r1	; 0x18
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    2500:	19 8a       	std	Y+17, r1	; 0x11
    2502:	1a 8a       	std	Y+18, r1	; 0x12
    2504:	1b 8a       	std	Y+19, r1	; 0x13
    2506:	1c 8a       	std	Y+20, r1	; 0x14
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    2508:	61 2c       	mov	r6, r1
    250a:	71 2c       	mov	r7, r1
	
}

/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    250c:	1a 8e       	std	Y+26, r1	; 0x1a
    250e:	19 8e       	std	Y+25, r1	; 0x19
    2510:	41 2c       	mov	r4, r1
    2512:	31 2c       	mov	r3, r1
    2514:	21 2c       	mov	r2, r1
    2516:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    2518:	68 e2       	ldi	r22, 0x28	; 40
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	ce 01       	movw	r24, r28
    251e:	05 96       	adiw	r24, 0x05	; 5
    2520:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    2524:	80 91 10 1a 	lds	r24, 0x1A10	; 0x801a10 <gHandshook>
    2528:	88 23       	and	r24, r24
    252a:	09 f4       	brne	.+2      	; 0x252e <vMainPoseEstimatorTask+0x72>
    252c:	f0 c1       	rjmp	.+992    	; 0x290e <vMainPoseEstimatorTask+0x452>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	4f e0       	ldi	r20, 0x0F	; 15
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	80 91 7d 1b 	lds	r24, 0x1B7D	; 0x801b7d <xTickMutex>
    253c:	90 91 7e 1b 	lds	r25, 0x1B7E	; 0x801b7e <xTickMutex+0x1>
    2540:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    2544:	80 91 03 1a 	lds	r24, 0x1A03	; 0x801a03 <gLeftWheelTicks>
    2548:	90 91 04 1a 	lds	r25, 0x1A04	; 0x801a04 <gLeftWheelTicks+0x1>
    254c:	9e a3       	std	Y+38, r25	; 0x26
    254e:	8d a3       	std	Y+37, r24	; 0x25
                rightWheelTicks = gRightWheelTicks;
    2550:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <gRightWheelTicks>
    2554:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <gRightWheelTicks+0x1>
    2558:	98 a7       	std	Y+40, r25	; 0x28
    255a:	8f a3       	std	Y+39, r24	; 0x27
            xSemaphoreGive(xTickMutex);
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	80 91 7d 1b 	lds	r24, 0x1B7D	; 0x801b7d <xTickMutex>
    2564:	90 91 7e 1b 	lds	r25, 0x1B7E	; 0x801b7e <xTickMutex+0x1>
    2568:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    256c:	6d a1       	ldd	r22, Y+37	; 0x25
    256e:	7e a1       	ldd	r23, Y+38	; 0x26
    2570:	89 8d       	ldd	r24, Y+25	; 0x19
    2572:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2574:	68 1b       	sub	r22, r24
    2576:	79 0b       	sbc	r23, r25
    2578:	07 2e       	mov	r0, r23
    257a:	00 0c       	add	r0, r0
    257c:	88 0b       	sbc	r24, r24
    257e:	99 0b       	sbc	r25, r25
    2580:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    2584:	28 ef       	ldi	r18, 0xF8	; 248
    2586:	33 e5       	ldi	r19, 0x53	; 83
    2588:	43 e2       	ldi	r20, 0x23	; 35
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2590:	4b 01       	movw	r8, r22
    2592:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    2594:	6f a1       	ldd	r22, Y+39	; 0x27
    2596:	78 a5       	ldd	r23, Y+40	; 0x28
    2598:	66 19       	sub	r22, r6
    259a:	77 09       	sbc	r23, r7
    259c:	07 2e       	mov	r0, r23
    259e:	00 0c       	add	r0, r0
    25a0:	88 0b       	sbc	r24, r24
    25a2:	99 0b       	sbc	r25, r25
    25a4:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    25a8:	28 ef       	ldi	r18, 0xF8	; 248
    25aa:	33 e5       	ldi	r19, 0x53	; 83
    25ac:	43 e2       	ldi	r20, 0x23	; 35
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    25b4:	6b 01       	movw	r12, r22
    25b6:	7c 01       	movw	r14, r24
            
			
			
					   
					   
            float dRobot = (dLeft + dRight) / 2;           
    25b8:	9b 01       	movw	r18, r22
    25ba:	ac 01       	movw	r20, r24
    25bc:	c5 01       	movw	r24, r10
    25be:	b4 01       	movw	r22, r8
    25c0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    25d0:	69 8f       	std	Y+25, r22	; 0x19
    25d2:	7a 8f       	std	Y+26, r23	; 0x1a
    25d4:	8b 8f       	std	Y+27, r24	; 0x1b
    25d6:	9c 8f       	std	Y+28, r25	; 0x1c
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    25d8:	a5 01       	movw	r20, r10
    25da:	94 01       	movw	r18, r8
    25dc:	c7 01       	movw	r24, r14
    25de:	b6 01       	movw	r22, r12
    25e0:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	43 e1       	ldi	r20, 0x13	; 19
    25ea:	53 e4       	ldi	r21, 0x43	; 67
    25ec:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    25f0:	4b 01       	movw	r8, r22
    25f2:	5c 01       	movw	r10, r24
			
			
            
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    25f4:	33 d9       	rcall	.-3482   	; 0x185c <fIMU_readFloatGyroZ>
    25f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    25f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    25fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    25fc:	58 a1       	ldd	r21, Y+32	; 0x20
    25fe:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2602:	6b 01       	movw	r12, r22
    2604:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    2606:	9f 77       	andi	r25, 0x7F	; 127
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e2       	ldi	r20, 0x20	; 32
    260e:	51 e4       	ldi	r21, 0x41	; 65
    2610:	0e 94 40 31 	call	0x6280	; 0x6280 <__cmpsf2>
    2614:	88 23       	and	r24, r24
    2616:	6c f0       	brlt	.+26     	; 0x2632 <vMainPoseEstimatorTask+0x176>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	99 ab       	std	Y+49, r25	; 0x31
                gyroWeight = 0.85; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders
    261c:	1a e9       	ldi	r17, 0x9A	; 154
    261e:	09 e9       	ldi	r16, 0x99	; 153
    2620:	0f 2e       	mov	r0, r31
    2622:	f9 e5       	ldi	r31, 0x59	; 89
    2624:	7f 2e       	mov	r7, r31
    2626:	f0 2d       	mov	r31, r0
    2628:	0f 2e       	mov	r0, r31
    262a:	ff e3       	ldi	r31, 0x3F	; 63
    262c:	6f 2e       	mov	r6, r31
    262e:	f0 2d       	mov	r31, r0
    2630:	05 c0       	rjmp	.+10     	; 0x263c <vMainPoseEstimatorTask+0x180>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    2632:	19 aa       	std	Y+49, r1	; 0x31
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    2634:	14 2d       	mov	r17, r4
    2636:	03 2d       	mov	r16, r3
    2638:	72 2c       	mov	r7, r2
    263a:	65 2c       	mov	r6, r5
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
            
			
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    263c:	21 2f       	mov	r18, r17
    263e:	30 2f       	mov	r19, r16
    2640:	47 2d       	mov	r20, r7
    2642:	56 2d       	mov	r21, r6
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	70 e0       	ldi	r23, 0x00	; 0
    2648:	80 e8       	ldi	r24, 0x80	; 128
    264a:	9f e3       	ldi	r25, 0x3F	; 63
    264c:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2650:	a5 01       	movw	r20, r10
    2652:	94 01       	movw	r18, r8
    2654:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2658:	4b 01       	movw	r8, r22
    265a:	5c 01       	movw	r10, r24
    265c:	24 ed       	ldi	r18, 0xD4	; 212
    265e:	32 e0       	ldi	r19, 0x02	; 2
    2660:	47 e3       	ldi	r20, 0x37	; 55
    2662:	5a e3       	ldi	r21, 0x3A	; 58
    2664:	c7 01       	movw	r24, r14
    2666:	b6 01       	movw	r22, r12
    2668:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    266c:	21 2f       	mov	r18, r17
    266e:	30 2f       	mov	r19, r16
    2670:	47 2d       	mov	r20, r7
    2672:	56 2d       	mov	r21, r6
    2674:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2678:	a5 01       	movw	r20, r10
    267a:	94 01       	movw	r18, r8
    267c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2680:	69 a7       	std	Y+41, r22	; 0x29
    2682:	7a a7       	std	Y+42, r23	; 0x2a
    2684:	8b a7       	std	Y+43, r24	; 0x2b
    2686:	9c a7       	std	Y+44, r25	; 0x2c
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    2688:	c9 80       	ldd	r12, Y+1	; 0x01
    268a:	da 80       	ldd	r13, Y+2	; 0x02
    268c:	eb 80       	ldd	r14, Y+3	; 0x03
    268e:	fc 80       	ldd	r15, Y+4	; 0x04
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    269c:	a7 01       	movw	r20, r14
    269e:	96 01       	movw	r18, r12
    26a0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    26a4:	4b 01       	movw	r8, r22
    26a6:	5c 01       	movw	r10, r24
    26a8:	0e 94 44 31 	call	0x6288	; 0x6288 <cos>
    26ac:	9b 01       	movw	r18, r22
    26ae:	ac 01       	movw	r20, r24
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	69 89       	ldd	r22, Y+17	; 0x11
    26c2:	7a 89       	ldd	r23, Y+18	; 0x12
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    26cc:	69 8b       	std	Y+17, r22	; 0x11
    26ce:	7a 8b       	std	Y+18, r23	; 0x12
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    26d4:	c5 01       	movw	r24, r10
    26d6:	b4 01       	movw	r22, r8
    26d8:	0e 94 5e 33 	call	0x66bc	; 0x66bc <sin>
    26dc:	9b 01       	movw	r18, r22
    26de:	ac 01       	movw	r20, r24
    26e0:	69 8d       	ldd	r22, Y+25	; 0x19
    26e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e8:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    26ec:	9b 01       	movw	r18, r22
    26ee:	ac 01       	movw	r20, r24
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    26fc:	6d 8b       	std	Y+21, r22	; 0x15
    26fe:	7e 8b       	std	Y+22, r23	; 0x16
    2700:	8f 8b       	std	Y+23, r24	; 0x17
    2702:	98 8f       	std	Y+24, r25	; 0x18

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    2704:	a7 01       	movw	r20, r14
    2706:	96 01       	movw	r18, r12
    2708:	69 a5       	ldd	r22, Y+41	; 0x29
    270a:	7a a5       	ldd	r23, Y+42	; 0x2a
    270c:	8b a5       	ldd	r24, Y+43	; 0x2b
    270e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2710:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2714:	69 83       	std	Y+1, r22	; 0x01
    2716:	7a 83       	std	Y+2, r23	; 0x02
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    271c:	2f ee       	ldi	r18, 0xEF	; 239
    271e:	3c ed       	ldi	r19, 0xDC	; 220
    2720:	4b e2       	ldi	r20, 0x2B	; 43
    2722:	5b e3       	ldi	r21, 0x3B	; 59
    2724:	6d a5       	ldd	r22, Y+45	; 0x2d
    2726:	7e a5       	ldd	r23, Y+46	; 0x2e
    2728:	8f a5       	ldd	r24, Y+47	; 0x2f
    272a:	98 a9       	ldd	r25, Y+48	; 0x30
    272c:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2730:	4b 01       	movw	r8, r22
    2732:	5c 01       	movw	r10, r24
            
            /* UPDATE */
            // Get compass data: ( Request and recheck after 6 ms?)
            int16_t xCom, yCom, zCom;
            vCOM_getData(&xCom, &yCom, &zCom);
    2734:	ae 01       	movw	r20, r28
    2736:	45 5f       	subi	r20, 0xF5	; 245
    2738:	5f 4f       	sbci	r21, 0xFF	; 255
    273a:	be 01       	movw	r22, r28
    273c:	63 5f       	subi	r22, 0xF3	; 243
    273e:	7f 4f       	sbci	r23, 0xFF	; 255
    2740:	ce 01       	movw	r24, r28
    2742:	0f 96       	adiw	r24, 0x0f	; 15
    2744:	0e 94 82 07 	call	0xf04	; 0xf04 <vCOM_getData>
            // Add calibrated bias
            xCom += xComOff;
    2748:	6f 85       	ldd	r22, Y+15	; 0x0f
    274a:	78 89       	ldd	r23, Y+16	; 0x10
    274c:	65 5f       	subi	r22, 0xF5	; 245
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	78 8b       	std	Y+16, r23	; 0x10
    2752:	6f 87       	std	Y+15, r22	; 0x0f
            yCom += yComOff;
    2754:	0d 85       	ldd	r16, Y+13	; 0x0d
    2756:	1e 85       	ldd	r17, Y+14	; 0x0e
    2758:	0e 54       	subi	r16, 0x4E	; 78
    275a:	11 09       	sbc	r17, r1
    275c:	1e 87       	std	Y+14, r17	; 0x0e
    275e:	0d 87       	std	Y+13, r16	; 0x0d
            // calculate heading
            float compassHeading;
            compassHeading = atan2(yCom, xCom) - compassOffset ; // returns -pi, pi
    2760:	07 2e       	mov	r0, r23
    2762:	00 0c       	add	r0, r0
    2764:	88 0b       	sbc	r24, r24
    2766:	99 0b       	sbc	r25, r25
    2768:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    276c:	6b 01       	movw	r12, r22
    276e:	7c 01       	movw	r14, r24
    2770:	b8 01       	movw	r22, r16
    2772:	11 0f       	add	r17, r17
    2774:	88 0b       	sbc	r24, r24
    2776:	99 0b       	sbc	r25, r25
    2778:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    277c:	a7 01       	movw	r20, r14
    277e:	96 01       	movw	r18, r12
    2780:	0e 94 ed 30 	call	0x61da	; 0x61da <atan2>
            // Update predicted state:    
            float error = (compassHeading - predictedTheta);
    2784:	29 a1       	ldd	r18, Y+33	; 0x21
    2786:	3a a1       	ldd	r19, Y+34	; 0x22
    2788:	4b a1       	ldd	r20, Y+35	; 0x23
    278a:	5c a1       	ldd	r21, Y+36	; 0x24
    278c:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    2790:	29 81       	ldd	r18, Y+1	; 0x01
    2792:	3a 81       	ldd	r19, Y+2	; 0x02
    2794:	4b 81       	ldd	r20, Y+3	; 0x03
    2796:	5c 81       	ldd	r21, Y+4	; 0x04
    2798:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    279c:	6f 83       	std	Y+7, r22	; 0x07
    279e:	78 87       	std	Y+8, r23	; 0x08
    27a0:	89 87       	std	Y+9, r24	; 0x09
    27a2:	9a 87       	std	Y+10, r25	; 0x0a
            vFunc_Inf2pi(&error);
    27a4:	ce 01       	movw	r24, r28
    27a6:	07 96       	adiw	r24, 0x07	; 7
    27a8:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
            
            
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if (fabs(error) > (0.8727*period_in_S)){ // 0.8727 rad/s is top speed while turning
    27ac:	8f 81       	ldd	r24, Y+7	; 0x07
    27ae:	98 85       	ldd	r25, Y+8	; 0x08
    27b0:	a9 85       	ldd	r26, Y+9	; 0x09
    27b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	9f 77       	andi	r25, 0x7F	; 127
    27ba:	20 eb       	ldi	r18, 0xB0	; 176
    27bc:	3b ef       	ldi	r19, 0xFB	; 251
    27be:	4e e0       	ldi	r20, 0x0E	; 14
    27c0:	5d e3       	ldi	r21, 0x3D	; 61
    27c2:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <__gesf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	44 f4       	brge	.+16     	; 0x27da <vMainPoseEstimatorTask+0x31e>
                // If we have a reading over this, we can safely ignore the compass
                // Ignore compass while driving in a straight line
                kalmanGain = 0;
                vLED_singleLow(ledYELLOW);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	69 d8       	rcall	.-3886   	; 0x18a2 <vLED_singleLow>
            //kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
            ///* Commented back in due to fixed encoder
            if (fabs(error) > (0.8727*period_in_S)){ // 0.8727 rad/s is top speed while turning
                // If we have a reading over this, we can safely ignore the compass
                // Ignore compass while driving in a straight line
                kalmanGain = 0;
    27d0:	14 2d       	mov	r17, r4
    27d2:	03 2d       	mov	r16, r3
    27d4:	f2 2c       	mov	r15, r2
    27d6:	e5 2c       	mov	r14, r5
    27d8:	2c c0       	rjmp	.+88     	; 0x2832 <vMainPoseEstimatorTask+0x376>
                vLED_singleLow(ledYELLOW);
            }
            else if ((robot_is_turning == FALSE) && (dRobot == 0)){
    27da:	89 a9       	ldd	r24, Y+49	; 0x31
    27dc:	81 11       	cpse	r24, r1
    27de:	22 c0       	rjmp	.+68     	; 0x2824 <vMainPoseEstimatorTask+0x368>
    27e0:	24 2d       	mov	r18, r4
    27e2:	33 2d       	mov	r19, r3
    27e4:	42 2d       	mov	r20, r2
    27e6:	55 2d       	mov	r21, r5
    27e8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f0:	0e 94 40 31 	call	0x6280	; 0x6280 <__cmpsf2>
    27f4:	81 11       	cpse	r24, r1
    27f6:	16 c0       	rjmp	.+44     	; 0x2824 <vMainPoseEstimatorTask+0x368>
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
    27f8:	21 e2       	ldi	r18, 0x21	; 33
    27fa:	30 eb       	ldi	r19, 0xB0	; 176
    27fc:	42 eb       	ldi	r20, 0xB2	; 178
    27fe:	5e e3       	ldi	r21, 0x3E	; 62
    2800:	c5 01       	movw	r24, r10
    2802:	b4 01       	movw	r22, r8
    2804:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	c5 01       	movw	r24, r10
    280e:	b4 01       	movw	r22, r8
    2810:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    2814:	16 2f       	mov	r17, r22
    2816:	07 2f       	mov	r16, r23
    2818:	f8 2e       	mov	r15, r24
    281a:	e9 2e       	mov	r14, r25
                vLED_singleHigh(ledYELLOW);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	26 d8       	rcall	.-4020   	; 0x186e <vLED_singleHigh>
    2822:	07 c0       	rjmp	.+14     	; 0x2832 <vMainPoseEstimatorTask+0x376>
            }
            else{
                kalmanGain = 0;
                vLED_singleLow(ledYELLOW);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	3c d8       	rcall	.-3976   	; 0x18a2 <vLED_singleLow>
    282a:	14 2d       	mov	r17, r4
                // Updated (a posteriori) state estimate
                kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
                vLED_singleHigh(ledYELLOW);
            }
            else{
                kalmanGain = 0;
    282c:	03 2d       	mov	r16, r3
    282e:	f2 2c       	mov	r15, r2
    2830:	e5 2c       	mov	r14, r5
    2832:	2f 81       	ldd	r18, Y+7	; 0x07
                vLED_singleLow(ledYELLOW);
            }            
            //*/
           
            predictedTheta  += kalmanGain*(error);
    2834:	38 85       	ldd	r19, Y+8	; 0x08
    2836:	49 85       	ldd	r20, Y+9	; 0x09
    2838:	5a 85       	ldd	r21, Y+10	; 0x0a
    283a:	61 2f       	mov	r22, r17
    283c:	70 2f       	mov	r23, r16
    283e:	8f 2d       	mov	r24, r15
    2840:	9e 2d       	mov	r25, r14
    2842:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	69 81       	ldd	r22, Y+1	; 0x01
    284c:	7a 81       	ldd	r23, Y+2	; 0x02
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	9c 81       	ldd	r25, Y+4	; 0x04
    2852:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    2856:	69 83       	std	Y+1, r22	; 0x01
    2858:	7a 83       	std	Y+2, r23	; 0x02
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	9c 83       	std	Y+4, r25	; 0x04
    285e:	ce 01       	movw	r24, r28
			vFunc_Inf2pi(&predictedTheta);            
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	0e 94 1a 08 	call	0x1034	; 0x1034 <vFunc_Inf2pi>
    2866:	21 2f       	mov	r18, r17
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    2868:	30 2f       	mov	r19, r16
    286a:	4f 2d       	mov	r20, r15
    286c:	5e 2d       	mov	r21, r14
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	80 e8       	ldi	r24, 0x80	; 128
    2874:	9f e3       	ldi	r25, 0x3F	; 63
    2876:	0e 94 79 30 	call	0x60f2	; 0x60f2 <__subsf3>
    287a:	a5 01       	movw	r20, r10
    287c:	94 01       	movw	r18, r8
    287e:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <__mulsf3>
    2882:	6d a7       	std	Y+45, r22	; 0x2d
    2884:	7e a7       	std	Y+46, r23	; 0x2e
    2886:	8f a7       	std	Y+47, r24	; 0x2f
    2888:	98 ab       	std	Y+48, r25	; 0x30
    288a:	20 e0       	ldi	r18, 0x00	; 0

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    288c:	4f e0       	ldi	r20, 0x0F	; 15
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    2898:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    289c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
                gTheta_hat = predictedTheta;
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	ab 81       	ldd	r26, Y+3	; 0x03
    28a6:	bc 81       	ldd	r27, Y+4	; 0x04
    28a8:	80 93 0b 1a 	sts	0x1A0B, r24	; 0x801a0b <gTheta_hat>
    28ac:	90 93 0c 1a 	sts	0x1A0C, r25	; 0x801a0c <gTheta_hat+0x1>
    28b0:	a0 93 0d 1a 	sts	0x1A0D, r26	; 0x801a0d <gTheta_hat+0x2>
    28b4:	b0 93 0e 1a 	sts	0x1A0E, r27	; 0x801a0e <gTheta_hat+0x3>
    28b8:	69 89       	ldd	r22, Y+17	; 0x11
                gX_hat = predictedX;
    28ba:	7a 89       	ldd	r23, Y+18	; 0x12
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    28c4:	70 93 0a 1a 	sts	0x1A0A, r23	; 0x801a0a <gX_hat+0x1>
    28c8:	60 93 09 1a 	sts	0x1A09, r22	; 0x801a09 <gX_hat>
    28cc:	6d 89       	ldd	r22, Y+21	; 0x15
                gY_hat = predictedY;
    28ce:	7e 89       	ldd	r23, Y+22	; 0x16
    28d0:	8f 89       	ldd	r24, Y+23	; 0x17
    28d2:	98 8d       	ldd	r25, Y+24	; 0x18
    28d4:	0e 94 af 31 	call	0x635e	; 0x635e <__fixsfsi>
    28d8:	70 93 08 1a 	sts	0x1A08, r23	; 0x801a08 <gY_hat+0x1>
    28dc:	60 93 07 1a 	sts	0x1A07, r22	; 0x801a07 <gY_hat>
    28e0:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    28e2:	70 e0       	ldi	r23, 0x00	; 0
    28e4:	80 91 83 1b 	lds	r24, 0x1B83	; 0x801b83 <xPoseMutex>
    28e8:	90 91 84 1b 	lds	r25, 0x1B84	; 0x801b84 <xPoseMutex+0x1>
    28ec:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    28f0:	60 e0       	ldi	r22, 0x00	; 0
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <xControllerBSem>
    28f8:	90 91 7c 1b 	lds	r25, 0x1B7C	; 0x801b7c <xControllerBSem+0x1>
    28fc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
    2900:	6f a0       	ldd	r6, Y+39	; 0x27
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    2902:	78 a4       	ldd	r7, Y+40	; 0x28
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	9a 8f       	std	Y+26, r25	; 0x1a
    290a:	89 8f       	std	Y+25, r24	; 0x19
    290c:	05 ce       	rjmp	.-1014   	; 0x2518 <vMainPoseEstimatorTask+0x5c>
    290e:	05 e6       	ldi	r16, 0x65	; 101
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	c4 2c       	mov	r12, r4
    2914:	d3 2c       	mov	r13, r3
    2916:	e2 2c       	mov	r14, r2
    2918:	f5 2c       	mov	r15, r5
    291a:	0e 94 2e 0c 	call	0x185c	; 0x185c <fIMU_readFloatGyroZ>
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    291e:	9b 01       	movw	r18, r22
    2920:	ac 01       	movw	r20, r24
    2922:	6c 2d       	mov	r22, r12
    2924:	7d 2d       	mov	r23, r13
    2926:	8e 2d       	mov	r24, r14
    2928:	9f 2d       	mov	r25, r15
    292a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <__addsf3>
    292e:	c6 2e       	mov	r12, r22
    2930:	d7 2e       	mov	r13, r23
    2932:	e8 2e       	mov	r14, r24
    2934:	f9 2e       	mov	r15, r25
    2936:	01 50       	subi	r16, 0x01	; 1
    2938:	11 09       	sbc	r17, r1
    293a:	79 f7       	brne	.-34     	; 0x291a <vMainPoseEstimatorTask+0x45e>
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    293c:	ae 01       	movw	r20, r28
                gyro+= fIMU_readFloatGyroZ();
            }
            
            int16_t xCom, yCom, zCom;
            vCOM_getData(&xCom, &yCom, &zCom);
    293e:	49 5f       	subi	r20, 0xF9	; 249
    2940:	5f 4f       	sbci	r21, 0xFF	; 255
    2942:	be 01       	movw	r22, r28
    2944:	65 5f       	subi	r22, 0xF5	; 245
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	ce 01       	movw	r24, r28
    294a:	0d 96       	adiw	r24, 0x0d	; 13
    294c:	0e 94 82 07 	call	0xf04	; 0xf04 <vCOM_getData>
    2950:	6d 85       	ldd	r22, Y+13	; 0x0d
            xCom += xComOff;
    2952:	7e 85       	ldd	r23, Y+14	; 0x0e
    2954:	65 5f       	subi	r22, 0xF5	; 245
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	0b 85       	ldd	r16, Y+11	; 0x0b
            yCom += yComOff;
    295a:	1c 85       	ldd	r17, Y+12	; 0x0c
    295c:	0e 54       	subi	r16, 0x4E	; 78
    295e:	11 09       	sbc	r17, r1
    2960:	84 2d       	mov	r24, r4
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    2962:	93 2d       	mov	r25, r3
    2964:	a2 2d       	mov	r26, r2
    2966:	b5 2d       	mov	r27, r5
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	ab 83       	std	Y+3, r26	; 0x03
    296e:	bc 83       	std	Y+4, r27	; 0x04
    2970:	07 2e       	mov	r0, r23
            
            compassOffset = atan2(yCom, xCom);    
    2972:	00 0c       	add	r0, r0
    2974:	88 0b       	sbc	r24, r24
    2976:	99 0b       	sbc	r25, r25
    2978:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    297c:	4b 01       	movw	r8, r22
    297e:	5c 01       	movw	r10, r24
    2980:	b8 01       	movw	r22, r16
    2982:	11 0f       	add	r17, r17
    2984:	88 0b       	sbc	r24, r24
    2986:	99 0b       	sbc	r25, r25
    2988:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__floatsisf>
    298c:	a5 01       	movw	r20, r10
    298e:	94 01       	movw	r18, r8
    2990:	0e 94 ed 30 	call	0x61da	; 0x61da <atan2>
    2994:	69 a3       	std	Y+33, r22	; 0x21
    2996:	7a a3       	std	Y+34, r23	; 0x22
    2998:	8b a3       	std	Y+35, r24	; 0x23
    299a:	9c a3       	std	Y+36, r25	; 0x24
    299c:	20 e0       	ldi	r18, 0x00	; 0
            gyroOffset = gyro / (float)i;               
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a ec       	ldi	r20, 0xCA	; 202
    29a2:	52 e4       	ldi	r21, 0x42	; 66
    29a4:	6c 2d       	mov	r22, r12
    29a6:	7d 2d       	mov	r23, r13
    29a8:	8e 2d       	mov	r24, r14
    29aa:	9f 2d       	mov	r25, r15
    29ac:	0e 94 47 31 	call	0x628e	; 0x628e <__divsf3>
    29b0:	6d 8f       	std	Y+29, r22	; 0x1d
    29b2:	7e 8f       	std	Y+30, r23	; 0x1e
    29b4:	8f 8f       	std	Y+31, r24	; 0x1f
    29b6:	98 a3       	std	Y+32, r25	; 0x20
    29b8:	4d 8a       	std	Y+21, r4	; 0x15
            yCom += yComOff;
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    29ba:	3e 8a       	std	Y+22, r3	; 0x16
    29bc:	2f 8a       	std	Y+23, r2	; 0x17
    29be:	58 8e       	std	Y+24, r5	; 0x18
    29c0:	49 8a       	std	Y+17, r4	; 0x11
            xCom += xComOff;
            yCom += yComOff;
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    29c2:	3a 8a       	std	Y+18, r3	; 0x12
    29c4:	2b 8a       	std	Y+19, r2	; 0x13
    29c6:	5c 8a       	std	Y+20, r5	; 0x14
    29c8:	a7 cd       	rjmp	.-1202   	; 0x2518 <vMainPoseEstimatorTask+0x5c>

000029ca <vApplicationStackOverflowHook>:
    29ca:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vLED_toggle>
    29d4:	fb cf       	rjmp	.-10     	; 0x29cc <vApplicationStackOverflowHook+0x2>

000029d6 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    29d6:	0e 94 31 0c 	call	0x1862	; 0x1862 <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    29e2:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <vUSART_init>
    network_init();
    29e6:	54 d2       	rcall	.+1192   	; 0x2e90 <network_init>
    arq_init();
    29e8:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    29ec:	8f e3       	ldi	r24, 0x3F	; 63
    29ee:	90 e2       	ldi	r25, 0x20	; 32
    29f0:	0e 94 46 22 	call	0x448c	; 0x448c <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	0e 94 be 21 	call	0x437c	; 0x437c <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    29fa:	0e 94 e7 07 	call	0xfce	; 0xfce <vDistSens_init>
    /* Initialize motor controller */
    vMotor_init();
    29fe:	05 d1       	rcall	.+522    	; 0x2c0a <vMotor_init>
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
    sIMU_begin(); 
    2a00:	0e 94 a7 0a 	call	0x154e	; 0x154e <sIMU_begin>
    #endif
    
    //vCOM_init();
    
    /* Initialize RTOS utilities  */
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	59 d4       	rcall	.+2226   	; 0x32be <xQueueGenericCreate>
    2a0c:	90 93 1a 1a 	sts	0x1A1A, r25	; 0x801a1a <movementQ+0x1>
    2a10:	80 93 19 1a 	sts	0x1A19, r24	; 0x801a19 <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPolar)); // For setpoints to controller
    2a14:	40 e0       	ldi	r20, 0x00	; 0
    2a16:	66 e0       	ldi	r22, 0x06	; 6
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	51 d4       	rcall	.+2210   	; 0x32be <xQueueGenericCreate>
    2a1c:	90 93 18 1a 	sts	0x1A18, r25	; 0x801a18 <poseControllerQ+0x1>
    2a20:	80 93 17 1a 	sts	0x1A17, r24	; 0x801a17 <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	49 d4       	rcall	.+2194   	; 0x32be <xQueueGenericCreate>
    2a2c:	90 93 16 1a 	sts	0x1A16, r25	; 0x801a16 <scanStatusQ+0x1>
    2a30:	80 93 15 1a 	sts	0x1A15, r24	; 0x801a15 <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    2a34:	40 e0       	ldi	r20, 0x00	; 0
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	41 d4       	rcall	.+2178   	; 0x32be <xQueueGenericCreate>
    2a3c:	90 93 14 1a 	sts	0x1A14, r25	; 0x801a14 <actuationQ+0x1>
    2a40:	80 93 13 1a 	sts	0x1A13, r24	; 0x801a13 <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	8d d4       	rcall	.+2330   	; 0x3362 <xQueueCreateMutex>
    2a48:	90 93 84 1b 	sts	0x1B84, r25	; 0x801b84 <xPoseMutex+0x1>
    2a4c:	80 93 83 1b 	sts	0x1B83, r24	; 0x801b83 <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	87 d4       	rcall	.+2318   	; 0x3362 <xQueueCreateMutex>
    2a54:	90 93 80 1b 	sts	0x1B80, r25	; 0x801b80 <xUartMutex+0x1>
    2a58:	80 93 7f 1b 	sts	0x1B7F, r24	; 0x801b7f <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	81 d4       	rcall	.+2306   	; 0x3362 <xQueueCreateMutex>
    2a60:	90 93 7e 1b 	sts	0x1B7E, r25	; 0x801b7e <xTickMutex+0x1>
    2a64:	80 93 7d 1b 	sts	0x1B7D, r24	; 0x801b7d <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    2a68:	43 e0       	ldi	r20, 0x03	; 3
    2a6a:	60 e0       	ldi	r22, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	27 d4       	rcall	.+2126   	; 0x32be <xQueueGenericCreate>
    2a70:	90 93 7c 1b 	sts	0x1B7C, r25	; 0x801b7c <xControllerBSem+0x1>
    2a74:	80 93 7b 1b 	sts	0x1B7B, r24	; 0x801b7b <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    2a78:	43 e0       	ldi	r20, 0x03	; 3
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	1f d4       	rcall	.+2110   	; 0x32be <xQueueGenericCreate>
    2a80:	90 93 82 1b 	sts	0x1B82, r25	; 0x801b82 <xCommandReadyBSem+0x1>
    2a84:	80 93 81 1b 	sts	0x1B81, r24	; 0x801b81 <xCommandReadyBSem>
    2a88:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    2a8a:	b1 2c       	mov	r11, r1
    2a8c:	c1 2c       	mov	r12, r1
    2a8e:	d1 2c       	mov	r13, r1
    2a90:	e1 2c       	mov	r14, r1
    2a92:	f1 2c       	mov	r15, r1
    2a94:	04 e0       	ldi	r16, 0x04	; 4
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4c e2       	ldi	r20, 0x2C	; 44
    2a9c:	51 e0       	ldi	r21, 0x01	; 1
    2a9e:	60 e4       	ldi	r22, 0x40	; 64
    2aa0:	76 e0       	ldi	r23, 0x06	; 6
    2aa2:	86 e1       	ldi	r24, 0x16	; 22
    2aa4:	9e e0       	ldi	r25, 0x0E	; 14
    2aa6:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    2aaa:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4c e2       	ldi	r20, 0x2C	; 44
    2ab2:	51 e0       	ldi	r21, 0x01	; 1
    2ab4:	69 e4       	ldi	r22, 0x49	; 73
    2ab6:	76 e0       	ldi	r23, 0x06	; 6
    2ab8:	82 e1       	ldi	r24, 0x12	; 18
    2aba:	9d e0       	ldi	r25, 0x0D	; 13
    2abc:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    2ac0:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4c e2       	ldi	r20, 0x2C	; 44
    2ac8:	51 e0       	ldi	r21, 0x01	; 1
    2aca:	6e e4       	ldi	r22, 0x4E	; 78
    2acc:	76 e0       	ldi	r23, 0x06	; 6
    2ace:	85 e7       	ldi	r24, 0x75	; 117
    2ad0:	9f e0       	ldi	r25, 0x0F	; 15
    2ad2:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    2ad6:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	4c e2       	ldi	r20, 0x2C	; 44
    2ade:	51 e0       	ldi	r21, 0x01	; 1
    2ae0:	66 e5       	ldi	r22, 0x56	; 86
    2ae2:	76 e0       	ldi	r23, 0x06	; 6
    2ae4:	8e e5       	ldi	r24, 0x5E	; 94
    2ae6:	92 e1       	ldi	r25, 0x12	; 18
    2ae8:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    2aec:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4c e2       	ldi	r20, 0x2C	; 44
    2af4:	51 e0       	ldi	r21, 0x01	; 1
    2af6:	6e e5       	ldi	r22, 0x5E	; 94
    2af8:	76 e0       	ldi	r23, 0x06	; 6
    2afa:	87 e2       	ldi	r24, 0x27	; 39
    2afc:	9e e0       	ldi	r25, 0x0E	; 14
    2afe:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
    2b02:	78 94       	sei
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif
    
    

    sei();
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    vLED_singleLow(ledRED);
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
    2b0c:	0e 94 23 27 	call	0x4e46	; 0x4e46 <vTaskStartScheduler>
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    /*  Start scheduler */
    vTaskStartScheduler();
    2b10:	c4 e6       	ldi	r28, 0x64	; 100

    /*  MCU is out of RAM if the program comes here */
    while(1){
        cli();
        debug("RAM fail\n");
    2b12:	d6 e0       	ldi	r29, 0x06	; 6
    2b14:	f8 94       	cli
    /*  Start scheduler */
    vTaskStartScheduler();

    /*  MCU is out of RAM if the program comes here */
    while(1){
        cli();
    2b16:	df 93       	push	r29
        debug("RAM fail\n");
    2b18:	cf 93       	push	r28
    2b1a:	0e 94 32 21 	call	0x4264	; 0x4264 <debug>
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	f8 cf       	rjmp	.-16     	; 0x2b14 <main+0x13e>

00002b24 <__vector_4>:
    2b24:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    2b26:	0f 92       	push	r0
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	0f 92       	push	r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    2b30:	80 91 11 1a 	lds	r24, 0x1A11	; 0x801a11 <gISR_leftWheelTicks>
    2b34:	8f 5f       	subi	r24, 0xFF	; 255
    2b36:	80 93 11 1a 	sts	0x1A11, r24	; 0x801a11 <gISR_leftWheelTicks>
}
    2b3a:	8f 91       	pop	r24
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	0f 90       	pop	r0
    2b42:	1f 90       	pop	r1
    2b44:	18 95       	reti

00002b46 <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    2b46:	1f 92       	push	r1
    2b48:	0f 92       	push	r0
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	0f 92       	push	r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    2b52:	80 91 12 1a 	lds	r24, 0x1A12	; 0x801a12 <gISR_rightWheelTicks>
    2b56:	8f 5f       	subi	r24, 0xFF	; 255
    2b58:	80 93 12 1a 	sts	0x1A12, r24	; 0x801a12 <gISR_rightWheelTicks>
}
    2b5c:	8f 91       	pop	r24
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	0f 90       	pop	r0
    2b64:	1f 90       	pop	r1
    2b66:	18 95       	reti

00002b68 <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    2b68:	1f 92       	push	r1
    2b6a:	0f 92       	push	r0
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	0f 92       	push	r0
    2b70:	11 24       	eor	r1, r1
    2b72:	0b b6       	in	r0, 0x3b	; 59
    2b74:	0f 92       	push	r0
    2b76:	2f 93       	push	r18
    2b78:	3f 93       	push	r19
    2b7a:	4f 93       	push	r20
    2b7c:	5f 93       	push	r21
    2b7e:	6f 93       	push	r22
    2b80:	7f 93       	push	r23
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
    2b8a:	ef 93       	push	r30
    2b8c:	ff 93       	push	r31
    if (nRFconnected){
    2b8e:	64 99       	sbic	0x0c, 4	; 12
    2b90:	09 c0       	rjmp	.+18     	; 0x2ba4 <__vector_5+0x3c>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    2b92:	82 e0       	ldi	r24, 0x02	; 2
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
        vLED_singleHigh(ledYELLOW);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 37 0c 	call	0x186e	; 0x186e <vLED_singleHigh>
    2ba2:	18 c0       	rjmp	.+48     	; 0x2bd4 <__vector_5+0x6c>
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    2ba4:	10 92 10 1a 	sts	0x1A10, r1	; 0x801a10 <gHandshook>
        gPaused = FALSE;
    2ba8:	10 92 0f 1a 	sts	0x1A0F, r1	; 0x801a0f <gPaused>
        vLED_singleLow(ledGREEN);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        vLED_singleLow(ledYELLOW);
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        vLED_singleLow(ledRED);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	80 91 81 1b 	lds	r24, 0x1B81	; 0x801b81 <xCommandReadyBSem>
    2bcc:	90 91 82 1b 	lds	r25, 0x1B82	; 0x801b82 <xCommandReadyBSem+0x1>
    2bd0:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <xControllerBSem>
    2bdc:	90 91 7c 1b 	lds	r25, 0x1B7C	; 0x801b7c <xControllerBSem+0x1>
    2be0:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <xQueueGiveFromISR>
}
    2be4:	ff 91       	pop	r31
    2be6:	ef 91       	pop	r30
    2be8:	bf 91       	pop	r27
    2bea:	af 91       	pop	r26
    2bec:	9f 91       	pop	r25
    2bee:	8f 91       	pop	r24
    2bf0:	7f 91       	pop	r23
    2bf2:	6f 91       	pop	r22
    2bf4:	5f 91       	pop	r21
    2bf6:	4f 91       	pop	r20
    2bf8:	3f 91       	pop	r19
    2bfa:	2f 91       	pop	r18
    2bfc:	0f 90       	pop	r0
    2bfe:	0b be       	out	0x3b, r0	; 59
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    2c0a:	27 9a       	sbi	0x04, 7	; 4
    2c0c:	84 b1       	in	r24, 0x04	; 4
    2c0e:	80 63       	ori	r24, 0x30	; 48
    2c10:	84 b9       	out	0x04, r24	; 4
    2c12:	26 9a       	sbi	0x04, 6	; 4
    2c14:	e1 e0       	ldi	r30, 0x01	; 1
    2c16:	f1 e0       	ldi	r31, 0x01	; 1
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 66       	ori	r24, 0x60	; 96
    2c1c:	80 83       	st	Z, r24
    2c1e:	2f 98       	cbi	0x05, 7	; 5
    2c20:	2e 98       	cbi	0x05, 6	; 5
    2c22:	e2 e0       	ldi	r30, 0x02	; 2
    2c24:	f1 e0       	ldi	r31, 0x01	; 1
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 79       	andi	r24, 0x9F	; 159
    2c2a:	80 83       	st	Z, r24
    2c2c:	85 b1       	in	r24, 0x05	; 5
    2c2e:	8f 7c       	andi	r24, 0xCF	; 207
    2c30:	85 b9       	out	0x05, r24	; 5
    2c32:	8a b1       	in	r24, 0x0a	; 10
    2c34:	8a b9       	out	0x0a, r24	; 10
    2c36:	8b b1       	in	r24, 0x0b	; 11
    2c38:	8c 60       	ori	r24, 0x0C	; 12
    2c3a:	8b b9       	out	0x0b, r24	; 11
    2c3c:	6c 98       	cbi	0x0d, 4	; 13
    2c3e:	8d b3       	in	r24, 0x1d	; 29
    2c40:	8d bb       	out	0x1d, r24	; 29
    2c42:	e9 e6       	ldi	r30, 0x69	; 105
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	80 6f       	ori	r24, 0xF0	; 240
    2c4a:	80 83       	st	Z, r24
    2c4c:	ea e6       	ldi	r30, 0x6A	; 106
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 81       	ld	r24, Z
    2c52:	81 60       	ori	r24, 0x01	; 1
    2c54:	80 83       	st	Z, r24
    2c56:	8c e1       	ldi	r24, 0x1C	; 28
    2c58:	8c bb       	out	0x1c, r24	; 28
    2c5a:	8d b3       	in	r24, 0x1d	; 29
    2c5c:	8c 61       	ori	r24, 0x1C	; 28
    2c5e:	8d bb       	out	0x1d, r24	; 29
    2c60:	84 b5       	in	r24, 0x24	; 36
    2c62:	80 68       	ori	r24, 0x80	; 128
    2c64:	84 bd       	out	0x24, r24	; 36
    2c66:	e0 e8       	ldi	r30, 0x80	; 128
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 62       	ori	r24, 0x20	; 32
    2c6e:	80 83       	st	Z, r24
    2c70:	85 b5       	in	r24, 0x25	; 37
    2c72:	85 bd       	out	0x25, r24	; 37
    2c74:	84 b5       	in	r24, 0x24	; 36
    2c76:	83 60       	ori	r24, 0x03	; 3
    2c78:	84 bd       	out	0x24, r24	; 36
    2c7a:	a1 e8       	ldi	r26, 0x81	; 129
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	8c 91       	ld	r24, X
    2c80:	88 60       	ori	r24, 0x08	; 8
    2c82:	8c 93       	st	X, r24
    2c84:	80 81       	ld	r24, Z
    2c86:	81 60       	ori	r24, 0x01	; 1
    2c88:	80 83       	st	Z, r24
    2c8a:	85 b5       	in	r24, 0x25	; 37
    2c8c:	82 60       	ori	r24, 0x02	; 2
    2c8e:	85 bd       	out	0x25, r24	; 37
    2c90:	8c 91       	ld	r24, X
    2c92:	82 60       	ori	r24, 0x02	; 2
    2c94:	8c 93       	st	X, r24
    2c96:	80 81       	ld	r24, Z
    2c98:	80 83       	st	Z, r24
    2c9a:	e0 eb       	ldi	r30, 0xB0	; 176
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 83       	st	Z, r24
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 83       	st	Z, r24
    2ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	80 83       	st	Z, r24
    2cae:	08 95       	ret

00002cb0 <vMotorMoveLeftForward>:
    2cb0:	87 bd       	out	0x27, r24	; 39
    2cb2:	2c 9a       	sbi	0x05, 4	; 5
    2cb4:	2d 98       	cbi	0x05, 5	; 5
    2cb6:	84 e0       	ldi	r24, 0x04	; 4
    2cb8:	fb 01       	movw	r30, r22
    2cba:	80 83       	st	Z, r24
    2cbc:	08 95       	ret

00002cbe <vMotorMoveRightForward>:
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2cc4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2cc8:	e2 e0       	ldi	r30, 0x02	; 2
    2cca:	f1 e0       	ldi	r31, 0x01	; 1
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 64       	ori	r24, 0x40	; 64
    2cd0:	80 83       	st	Z, r24
    2cd2:	80 81       	ld	r24, Z
    2cd4:	8f 7d       	andi	r24, 0xDF	; 223
    2cd6:	80 83       	st	Z, r24
    2cd8:	86 e0       	ldi	r24, 0x06	; 6
    2cda:	fb 01       	movw	r30, r22
    2cdc:	80 83       	st	Z, r24
    2cde:	08 95       	ret

00002ce0 <vMotorMoveLeftBackward>:
    2ce0:	87 bd       	out	0x27, r24	; 39
    2ce2:	2c 98       	cbi	0x05, 4	; 5
    2ce4:	2d 9a       	sbi	0x05, 5	; 5
    2ce6:	85 e0       	ldi	r24, 0x05	; 5
    2ce8:	fb 01       	movw	r30, r22
    2cea:	80 83       	st	Z, r24
    2cec:	08 95       	ret

00002cee <vMotorMoveRightBackward>:
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2cf4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2cf8:	e2 e0       	ldi	r30, 0x02	; 2
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8f 7b       	andi	r24, 0xBF	; 191
    2d00:	80 83       	st	Z, r24
    2d02:	80 81       	ld	r24, Z
    2d04:	80 62       	ori	r24, 0x20	; 32
    2d06:	80 83       	st	Z, r24
    2d08:	85 e0       	ldi	r24, 0x05	; 5
    2d0a:	fb 01       	movw	r30, r22
    2d0c:	80 83       	st	Z, r24
    2d0e:	08 95       	ret

00002d10 <vMotorBrakeLeft>:
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	87 bd       	out	0x27, r24	; 39
    2d14:	2c 98       	cbi	0x05, 4	; 5
    2d16:	2d 98       	cbi	0x05, 5	; 5
    2d18:	08 95       	ret

00002d1a <vMotorBrakeRight>:
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2d22:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2d26:	e2 e0       	ldi	r30, 0x02	; 2
    2d28:	f1 e0       	ldi	r31, 0x01	; 1
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8f 7b       	andi	r24, 0xBF	; 191
    2d2e:	80 83       	st	Z, r24
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 7d       	andi	r24, 0xDF	; 223
    2d34:	80 83       	st	Z, r24
    2d36:	08 95       	ret

00002d38 <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	eb 01       	movw	r28, r22
    2d42:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2d44:	18 16       	cp	r1, r24
    2d46:	19 06       	cpc	r1, r25
    2d48:	1c f4       	brge	.+6      	; 0x2d50 <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2d4a:	ba 01       	movw	r22, r20
    2d4c:	b1 df       	rcall	.-158    	; 0x2cb0 <vMotorMoveLeftForward>
    2d4e:	07 c0       	rjmp	.+14     	; 0x2d5e <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2d50:	99 23       	and	r25, r25
    2d52:	24 f4       	brge	.+8      	; 0x2d5c <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2d54:	ba 01       	movw	r22, r20
    2d56:	81 95       	neg	r24
    2d58:	c3 df       	rcall	.-122    	; 0x2ce0 <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <vMotorMovementSwitch+0x26>
    2d5c:	d9 df       	rcall	.-78     	; 0x2d10 <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2d5e:	1c 16       	cp	r1, r28
    2d60:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2d62:	24 f4       	brge	.+8      	; 0x2d6c <vMotorMovementSwitch+0x34>
    2d64:	b8 01       	movw	r22, r16
    2d66:	8c 2f       	mov	r24, r28
    2d68:	aa df       	rcall	.-172    	; 0x2cbe <vMotorMoveRightForward>
    2d6a:	08 c0       	rjmp	.+16     	; 0x2d7c <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2d6c:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <vMotorMovementSwitch+0x42>
    2d70:	b8 01       	movw	r22, r16
    2d72:	8c 2f       	mov	r24, r28
    2d74:	81 95       	neg	r24
    2d76:	bb df       	rcall	.-138    	; 0x2cee <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <vMotorMovementSwitch+0x44>
    2d7a:	cf df       	rcall	.-98     	; 0x2d1a <vMotorBrakeRight>
	
	
	
	

}
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret

00002d86 <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2d86:	84 30       	cpi	r24, 0x04	; 4
    2d88:	19 f0       	breq	.+6      	; 0x2d90 <vMotorEncoderLeftTickFromISR+0xa>
    2d8a:	85 30       	cpi	r24, 0x05	; 5
    2d8c:	51 f0       	breq	.+20     	; 0x2da2 <vMotorEncoderLeftTickFromISR+0x1c>
    2d8e:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2d90:	46 95       	lsr	r20
    2d92:	fb 01       	movw	r30, r22
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	84 0f       	add	r24, r20
    2d9a:	91 1d       	adc	r25, r1
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
            break;
    2da0:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2da2:	46 95       	lsr	r20
    2da4:	fb 01       	movw	r30, r22
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	84 1b       	sub	r24, r20
    2dac:	91 09       	sbc	r25, r1
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	08 95       	ret

00002db4 <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2db4:	85 30       	cpi	r24, 0x05	; 5
    2db6:	59 f0       	breq	.+22     	; 0x2dce <vMotorEncoderRightTickFromISR+0x1a>
    2db8:	86 30       	cpi	r24, 0x06	; 6
    2dba:	89 f4       	brne	.+34     	; 0x2dde <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2dbc:	46 95       	lsr	r20
    2dbe:	fb 01       	movw	r30, r22
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	84 0f       	add	r24, r20
    2dc6:	91 1d       	adc	r25, r1
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
            break;
    2dcc:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2dce:	46 95       	lsr	r20
    2dd0:	fb 01       	movw	r30, r22
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	84 1b       	sub	r24, r20
    2dd8:	91 09       	sbc	r25, r1
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	80 83       	st	Z, r24
    2dde:	08 95       	ret

00002de0 <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	7c 01       	movw	r14, r24
    2dee:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2df0:	cb 01       	movw	r24, r22
    2df2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2df6:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2df8:	98 01       	movw	r18, r16
    2dfa:	21 50       	subi	r18, 0x01	; 1
    2dfc:	31 09       	sbc	r19, r1
    2dfe:	a7 01       	movw	r20, r14
    2e00:	b8 01       	movw	r22, r16
    2e02:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2e06:	88 23       	and	r24, r24
    2e08:	49 f0       	breq	.+18     	; 0x2e1c <network_receive+0x3c>
	   ++cobs;
    2e0a:	80 91 1c 1a 	lds	r24, 0x1A1C	; 0x801a1c <cobs.2024>
    2e0e:	8f 5f       	subi	r24, 0xFF	; 255
    2e10:	80 93 1c 1a 	sts	0x1A1C, r24	; 0x801a1c <cobs.2024>
	   vPortFree(decoded_data);
    2e14:	ce 01       	movw	r24, r28
    2e16:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e1a:	33 c0       	rjmp	.+102    	; 0x2e82 <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2e1c:	86 2f       	mov	r24, r22
    2e1e:	97 2f       	mov	r25, r23
    2e20:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2e22:	fe 01       	movw	r30, r28
    2e24:	e8 0f       	add	r30, r24
    2e26:	f9 1f       	adc	r31, r25
    2e28:	31 97       	sbiw	r30, 0x01	; 1
    2e2a:	f0 80       	ld	r15, Z
    2e2c:	6f ef       	ldi	r22, 0xFF	; 255
    2e2e:	68 0f       	add	r22, r24
    2e30:	ce 01       	movw	r24, r28
    2e32:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <calculate_crc>
    2e36:	f8 16       	cp	r15, r24
    2e38:	49 f0       	breq	.+18     	; 0x2e4c <network_receive+0x6c>
	   ++crc;
    2e3a:	80 91 1b 1a 	lds	r24, 0x1A1B	; 0x801a1b <crc.2025>
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 1b 1a 	sts	0x1A1B, r24	; 0x801a1b <crc.2025>
	   vPortFree(decoded_data);
    2e44:	ce 01       	movw	r24, r28
    2e46:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e4a:	1b c0       	rjmp	.+54     	; 0x2e82 <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2e4c:	88 81       	ld	r24, Y
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	21 f0       	breq	.+8      	; 0x2e5a <network_receive+0x7a>
	   vPortFree(decoded_data);
    2e52:	ce 01       	movw	r24, r28
    2e54:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
	   return;
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2e5a:	a8 01       	movw	r20, r16
    2e5c:	44 50       	subi	r20, 0x04	; 4
    2e5e:	51 09       	sbc	r21, r1
    2e60:	be 01       	movw	r22, r28
    2e62:	6d 5f       	subi	r22, 0xFD	; 253
    2e64:	7f 4f       	sbci	r23, 0xFF	; 255
    2e66:	ea 81       	ldd	r30, Y+2	; 0x02
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	ed 55       	subi	r30, 0x5D	; 93
    2e70:	f4 4e       	sbci	r31, 0xE4	; 228
    2e72:	01 90       	ld	r0, Z+
    2e74:	f0 81       	ld	r31, Z
    2e76:	e0 2d       	mov	r30, r0
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	19 95       	eicall
   vPortFree(decoded_data);
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
}
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	ff 90       	pop	r15
    2e8c:	ef 90       	pop	r14
    2e8e:	08 95       	ret

00002e90 <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2e90:	80 ef       	ldi	r24, 0xF0	; 240
    2e92:	96 e1       	ldi	r25, 0x16	; 22
    2e94:	0c 94 08 30 	jmp	0x6010	; 0x6010 <vUSART_set_receive_callback>
    2e98:	08 95       	ret

00002e9a <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2e9a:	82 30       	cpi	r24, 0x02	; 2
    2e9c:	40 f4       	brcc	.+16     	; 0x2eae <network_set_callback+0x14>
    2e9e:	e8 2f       	mov	r30, r24
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	ee 0f       	add	r30, r30
    2ea4:	ff 1f       	adc	r31, r31
    2ea6:	ed 55       	subi	r30, 0x5D	; 93
    2ea8:	f4 4e       	sbci	r31, 0xE4	; 228
    2eaa:	71 83       	std	Z+1, r23	; 0x01
    2eac:	60 83       	st	Z, r22
    2eae:	08 95       	ret

00002eb0 <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	88 2e       	mov	r8, r24
    2eca:	96 2e       	mov	r9, r22
    2ecc:	5a 01       	movw	r10, r20
    2ece:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2ed0:	69 01       	movw	r12, r18
    2ed2:	84 e0       	ldi	r24, 0x04	; 4
    2ed4:	c8 0e       	add	r12, r24
    2ed6:	d1 1c       	adc	r13, r1
    2ed8:	c6 01       	movw	r24, r12
    2eda:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2ede:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	06 96       	adiw	r24, 0x06	; 6
    2ee4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    2ee8:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2eea:	20 97       	sbiw	r28, 0x00	; 0
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <network_send+0x42>
    2eee:	89 2b       	or	r24, r25
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <network_send+0x52>
    vPortFree(packet);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    vPortFree(encoded_data);
    2ef8:	c7 01       	movw	r24, r14
    2efa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    return 0;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	3c c0       	rjmp	.+120    	; 0x2f7a <network_send+0xca>
  }
  packet[0] = remote_address;
    2f02:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2f04:	83 e0       	ldi	r24, 0x03	; 3
    2f06:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2f08:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2f0a:	a8 01       	movw	r20, r16
    2f0c:	b5 01       	movw	r22, r10
    2f0e:	ce 01       	movw	r24, r28
    2f10:	03 96       	adiw	r24, 0x03	; 3
    2f12:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2f16:	58 01       	movw	r10, r16
    2f18:	e3 e0       	ldi	r30, 0x03	; 3
    2f1a:	ae 0e       	add	r10, r30
    2f1c:	b1 1c       	adc	r11, r1
    2f1e:	ac 0e       	add	r10, r28
    2f20:	bd 1e       	adc	r11, r29
    2f22:	63 e0       	ldi	r22, 0x03	; 3
    2f24:	60 0f       	add	r22, r16
    2f26:	ce 01       	movw	r24, r28
    2f28:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <calculate_crc>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2f30:	b8 01       	movw	r22, r16
    2f32:	6b 5f       	subi	r22, 0xFB	; 251
    2f34:	7f 4f       	sbci	r23, 0xFF	; 255
    2f36:	96 01       	movw	r18, r12
    2f38:	ae 01       	movw	r20, r28
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2f40:	88 23       	and	r24, r24
    2f42:	41 f0       	breq	.+16     	; 0x2f54 <network_send+0xa4>
    vPortFree(packet);
    2f44:	ce 01       	movw	r24, r28
    2f46:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    vPortFree(encoded_data);
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    return 0;
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	13 c0       	rjmp	.+38     	; 0x2f7a <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2f54:	86 2f       	mov	r24, r22
    2f56:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2f58:	f7 01       	movw	r30, r14
    2f5a:	e8 0f       	add	r30, r24
    2f5c:	f9 1f       	adc	r31, r25
    2f5e:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2f60:	bc 01       	movw	r22, r24
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	c7 01       	movw	r24, r14
    2f68:	0e 94 e4 2f 	call	0x5fc8	; 0x5fc8 <vUSART_send>
  vPortFree(packet);
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
  vPortFree(encoded_data);
    2f72:	c7 01       	movw	r24, r14
    2f74:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
  return 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
}
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	ff 90       	pop	r15
    2f84:	ef 90       	pop	r14
    2f86:	df 90       	pop	r13
    2f88:	cf 90       	pop	r12
    2f8a:	bf 90       	pop	r11
    2f8c:	af 90       	pop	r10
    2f8e:	9f 90       	pop	r9
    2f90:	8f 90       	pop	r8
    2f92:	08 95       	ret

00002f94 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2f94:	31 e1       	ldi	r19, 0x11	; 17
    2f96:	fc 01       	movw	r30, r24
    2f98:	30 83       	st	Z, r19
    2f9a:	31 97       	sbiw	r30, 0x01	; 1
    2f9c:	22 e2       	ldi	r18, 0x22	; 34
    2f9e:	20 83       	st	Z, r18
    2fa0:	31 97       	sbiw	r30, 0x01	; 1
    2fa2:	a3 e3       	ldi	r26, 0x33	; 51
    2fa4:	a0 83       	st	Z, r26
    2fa6:	31 97       	sbiw	r30, 0x01	; 1
    2fa8:	60 83       	st	Z, r22
    2faa:	31 97       	sbiw	r30, 0x01	; 1
    2fac:	70 83       	st	Z, r23
    2fae:	31 97       	sbiw	r30, 0x01	; 1
    2fb0:	10 82       	st	Z, r1
    2fb2:	31 97       	sbiw	r30, 0x01	; 1
    2fb4:	10 82       	st	Z, r1
    2fb6:	31 97       	sbiw	r30, 0x01	; 1
    2fb8:	60 e8       	ldi	r22, 0x80	; 128
    2fba:	60 83       	st	Z, r22
    2fbc:	31 97       	sbiw	r30, 0x01	; 1
    2fbe:	10 82       	st	Z, r1
    2fc0:	31 97       	sbiw	r30, 0x01	; 1
    2fc2:	10 82       	st	Z, r1
    2fc4:	31 97       	sbiw	r30, 0x01	; 1
    2fc6:	10 82       	st	Z, r1
    2fc8:	31 97       	sbiw	r30, 0x01	; 1
    2fca:	62 e0       	ldi	r22, 0x02	; 2
    2fcc:	60 83       	st	Z, r22
    2fce:	31 97       	sbiw	r30, 0x01	; 1
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	60 83       	st	Z, r22
    2fd4:	31 97       	sbiw	r30, 0x01	; 1
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	60 83       	st	Z, r22
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	65 e0       	ldi	r22, 0x05	; 5
    2fde:	60 83       	st	Z, r22
    2fe0:	31 97       	sbiw	r30, 0x01	; 1
    2fe2:	66 e0       	ldi	r22, 0x06	; 6
    2fe4:	60 83       	st	Z, r22
    2fe6:	31 97       	sbiw	r30, 0x01	; 1
    2fe8:	67 e0       	ldi	r22, 0x07	; 7
    2fea:	60 83       	st	Z, r22
    2fec:	31 97       	sbiw	r30, 0x01	; 1
    2fee:	68 e0       	ldi	r22, 0x08	; 8
    2ff0:	60 83       	st	Z, r22
    2ff2:	31 97       	sbiw	r30, 0x01	; 1
    2ff4:	69 e0       	ldi	r22, 0x09	; 9
    2ff6:	60 83       	st	Z, r22
    2ff8:	31 97       	sbiw	r30, 0x01	; 1
    2ffa:	60 e1       	ldi	r22, 0x10	; 16
    2ffc:	60 83       	st	Z, r22
    2ffe:	31 97       	sbiw	r30, 0x01	; 1
    3000:	30 83       	st	Z, r19
    3002:	31 97       	sbiw	r30, 0x01	; 1
    3004:	32 e1       	ldi	r19, 0x12	; 18
    3006:	30 83       	st	Z, r19
    3008:	31 97       	sbiw	r30, 0x01	; 1
    300a:	33 e1       	ldi	r19, 0x13	; 19
    300c:	30 83       	st	Z, r19
    300e:	31 97       	sbiw	r30, 0x01	; 1
    3010:	34 e1       	ldi	r19, 0x14	; 20
    3012:	30 83       	st	Z, r19
    3014:	31 97       	sbiw	r30, 0x01	; 1
    3016:	35 e1       	ldi	r19, 0x15	; 21
    3018:	30 83       	st	Z, r19
    301a:	31 97       	sbiw	r30, 0x01	; 1
    301c:	36 e1       	ldi	r19, 0x16	; 22
    301e:	30 83       	st	Z, r19
    3020:	31 97       	sbiw	r30, 0x01	; 1
    3022:	37 e1       	ldi	r19, 0x17	; 23
    3024:	30 83       	st	Z, r19
    3026:	31 97       	sbiw	r30, 0x01	; 1
    3028:	38 e1       	ldi	r19, 0x18	; 24
    302a:	30 83       	st	Z, r19
    302c:	31 97       	sbiw	r30, 0x01	; 1
    302e:	39 e1       	ldi	r19, 0x19	; 25
    3030:	30 83       	st	Z, r19
    3032:	31 97       	sbiw	r30, 0x01	; 1
    3034:	30 e2       	ldi	r19, 0x20	; 32
    3036:	30 83       	st	Z, r19
    3038:	31 97       	sbiw	r30, 0x01	; 1
    303a:	31 e2       	ldi	r19, 0x21	; 33
    303c:	30 83       	st	Z, r19
    303e:	31 97       	sbiw	r30, 0x01	; 1
    3040:	20 83       	st	Z, r18
    3042:	31 97       	sbiw	r30, 0x01	; 1
    3044:	23 e2       	ldi	r18, 0x23	; 35
    3046:	20 83       	st	Z, r18
    3048:	31 97       	sbiw	r30, 0x01	; 1
    304a:	40 83       	st	Z, r20
    304c:	31 97       	sbiw	r30, 0x01	; 1
    304e:	50 83       	st	Z, r21
    3050:	31 97       	sbiw	r30, 0x01	; 1
    3052:	26 e2       	ldi	r18, 0x26	; 38
    3054:	20 83       	st	Z, r18
    3056:	31 97       	sbiw	r30, 0x01	; 1
    3058:	27 e2       	ldi	r18, 0x27	; 39
    305a:	20 83       	st	Z, r18
    305c:	31 97       	sbiw	r30, 0x01	; 1
    305e:	28 e2       	ldi	r18, 0x28	; 40
    3060:	20 83       	st	Z, r18
    3062:	31 97       	sbiw	r30, 0x01	; 1
    3064:	29 e2       	ldi	r18, 0x29	; 41
    3066:	20 83       	st	Z, r18
    3068:	31 97       	sbiw	r30, 0x01	; 1
    306a:	20 e3       	ldi	r18, 0x30	; 48
    306c:	20 83       	st	Z, r18
    306e:	31 97       	sbiw	r30, 0x01	; 1
    3070:	21 e3       	ldi	r18, 0x31	; 49
    3072:	20 83       	st	Z, r18
    3074:	89 97       	sbiw	r24, 0x29	; 41
    3076:	08 95       	ret

00003078 <xPortStartScheduler>:
    3078:	88 ee       	ldi	r24, 0xE8	; 232
    307a:	93 e0       	ldi	r25, 0x03	; 3
    307c:	90 93 b8 1b 	sts	0x1BB8, r25	; 0x801bb8 <portTickRateHz+0x1>
    3080:	80 93 b7 1b 	sts	0x1BB7, r24	; 0x801bb7 <portTickRateHz>
    3084:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <ticksRemainingInSec+0x1>
    3088:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <ticksRemainingInSec>
    308c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    3090:	89 ef       	ldi	r24, 0xF9	; 249
    3092:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    3096:	8b e0       	ldi	r24, 0x0B	; 11
    3098:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    309c:	e1 e7       	ldi	r30, 0x71	; 113
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	82 60       	ori	r24, 0x02	; 2
    30a4:	80 83       	st	Z, r24
    30a6:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    30aa:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    30ae:	cd 91       	ld	r28, X+
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	dd 91       	ld	r29, X+
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	df 90       	pop	r13
    30dc:	cf 90       	pop	r12
    30de:	bf 90       	pop	r11
    30e0:	af 90       	pop	r10
    30e2:	9f 90       	pop	r9
    30e4:	8f 90       	pop	r8
    30e6:	7f 90       	pop	r7
    30e8:	6f 90       	pop	r6
    30ea:	5f 90       	pop	r5
    30ec:	4f 90       	pop	r4
    30ee:	3f 90       	pop	r3
    30f0:	2f 90       	pop	r2
    30f2:	1f 90       	pop	r1
    30f4:	0f 90       	pop	r0
    30f6:	0c be       	out	0x3c, r0	; 60
    30f8:	0f 90       	pop	r0
    30fa:	0b be       	out	0x3b, r0	; 59
    30fc:	0f 90       	pop	r0
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	0f 90       	pop	r0
    3102:	08 95       	ret
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	08 95       	ret

00003108 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    3108:	0f 92       	push	r0
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	0f 92       	push	r0
    3110:	0b b6       	in	r0, 0x3b	; 59
    3112:	0f 92       	push	r0
    3114:	0c b6       	in	r0, 0x3c	; 60
    3116:	0f 92       	push	r0
    3118:	1f 92       	push	r1
    311a:	11 24       	eor	r1, r1
    311c:	2f 92       	push	r2
    311e:	3f 92       	push	r3
    3120:	4f 92       	push	r4
    3122:	5f 92       	push	r5
    3124:	6f 92       	push	r6
    3126:	7f 92       	push	r7
    3128:	8f 92       	push	r8
    312a:	9f 92       	push	r9
    312c:	af 92       	push	r10
    312e:	bf 92       	push	r11
    3130:	cf 92       	push	r12
    3132:	df 92       	push	r13
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	2f 93       	push	r18
    313e:	3f 93       	push	r19
    3140:	4f 93       	push	r20
    3142:	5f 93       	push	r21
    3144:	6f 93       	push	r22
    3146:	7f 93       	push	r23
    3148:	8f 93       	push	r24
    314a:	9f 93       	push	r25
    314c:	af 93       	push	r26
    314e:	bf 93       	push	r27
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
    3154:	ef 93       	push	r30
    3156:	ff 93       	push	r31
    3158:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    315c:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    3160:	0d b6       	in	r0, 0x3d	; 61
    3162:	0d 92       	st	X+, r0
    3164:	0e b6       	in	r0, 0x3e	; 62
    3166:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    3168:	0e 94 13 2a 	call	0x5426	; 0x5426 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    316c:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    3170:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    3174:	cd 91       	ld	r28, X+
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	dd 91       	ld	r29, X+
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	bf 91       	pop	r27
    3186:	af 91       	pop	r26
    3188:	9f 91       	pop	r25
    318a:	8f 91       	pop	r24
    318c:	7f 91       	pop	r23
    318e:	6f 91       	pop	r22
    3190:	5f 91       	pop	r21
    3192:	4f 91       	pop	r20
    3194:	3f 91       	pop	r19
    3196:	2f 91       	pop	r18
    3198:	1f 91       	pop	r17
    319a:	0f 91       	pop	r16
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	bf 90       	pop	r11
    31a6:	af 90       	pop	r10
    31a8:	9f 90       	pop	r9
    31aa:	8f 90       	pop	r8
    31ac:	7f 90       	pop	r7
    31ae:	6f 90       	pop	r6
    31b0:	5f 90       	pop	r5
    31b2:	4f 90       	pop	r4
    31b4:	3f 90       	pop	r3
    31b6:	2f 90       	pop	r2
    31b8:	1f 90       	pop	r1
    31ba:	0f 90       	pop	r0
    31bc:	0c be       	out	0x3c, r0	; 60
    31be:	0f 90       	pop	r0
    31c0:	0b be       	out	0x3b, r0	; 59
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    31c8:	08 95       	ret

000031ca <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    31ca:	0f 92       	push	r0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	0f 92       	push	r0
    31d2:	0b b6       	in	r0, 0x3b	; 59
    31d4:	0f 92       	push	r0
    31d6:	0c b6       	in	r0, 0x3c	; 60
    31d8:	0f 92       	push	r0
    31da:	1f 92       	push	r1
    31dc:	11 24       	eor	r1, r1
    31de:	2f 92       	push	r2
    31e0:	3f 92       	push	r3
    31e2:	4f 92       	push	r4
    31e4:	5f 92       	push	r5
    31e6:	6f 92       	push	r6
    31e8:	7f 92       	push	r7
    31ea:	8f 92       	push	r8
    31ec:	9f 92       	push	r9
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	2f 93       	push	r18
    3200:	3f 93       	push	r19
    3202:	4f 93       	push	r20
    3204:	5f 93       	push	r21
    3206:	6f 93       	push	r22
    3208:	7f 93       	push	r23
    320a:	8f 93       	push	r24
    320c:	9f 93       	push	r25
    320e:	af 93       	push	r26
    3210:	bf 93       	push	r27
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	ef 93       	push	r30
    3218:	ff 93       	push	r31
    321a:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    321e:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    3222:	0d b6       	in	r0, 0x3d	; 61
    3224:	0d 92       	st	X+, r0
    3226:	0e b6       	in	r0, 0x3e	; 62
    3228:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    322a:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    322c:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <ticksRemainingInSec>
    3230:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <ticksRemainingInSec+0x1>
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <ticksRemainingInSec+0x1>
    323a:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <ticksRemainingInSec>
    323e:	89 2b       	or	r24, r25
    3240:	41 f4       	brne	.+16     	; 0x3252 <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    3242:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <portTickRateHz>
    3246:	90 91 b8 1b 	lds	r25, 0x1BB8	; 0x801bb8 <portTickRateHz+0x1>
    324a:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <ticksRemainingInSec+0x1>
    324e:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    3252:	0e 94 52 29 	call	0x52a4	; 0x52a4 <xTaskIncrementTick>
    3256:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    3258:	0e 94 13 2a 	call	0x5426	; 0x5426 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    325c:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    3260:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    3264:	cd 91       	ld	r28, X+
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	dd 91       	ld	r29, X+
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	ff 91       	pop	r31
    326e:	ef 91       	pop	r30
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	bf 91       	pop	r27
    3276:	af 91       	pop	r26
    3278:	9f 91       	pop	r25
    327a:	8f 91       	pop	r24
    327c:	7f 91       	pop	r23
    327e:	6f 91       	pop	r22
    3280:	5f 91       	pop	r21
    3282:	4f 91       	pop	r20
    3284:	3f 91       	pop	r19
    3286:	2f 91       	pop	r18
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	df 90       	pop	r13
    3292:	cf 90       	pop	r12
    3294:	bf 90       	pop	r11
    3296:	af 90       	pop	r10
    3298:	9f 90       	pop	r9
    329a:	8f 90       	pop	r8
    329c:	7f 90       	pop	r7
    329e:	6f 90       	pop	r6
    32a0:	5f 90       	pop	r5
    32a2:	4f 90       	pop	r4
    32a4:	3f 90       	pop	r3
    32a6:	2f 90       	pop	r2
    32a8:	1f 90       	pop	r1
    32aa:	0f 90       	pop	r0
    32ac:	0c be       	out	0x3c, r0	; 60
    32ae:	0f 90       	pop	r0
    32b0:	0b be       	out	0x3b, r0	; 59
    32b2:	0f 90       	pop	r0
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    32b8:	08 95       	ret

000032ba <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    32ba:	87 df       	rcall	.-242    	; 0x31ca <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    32bc:	18 95       	reti

000032be <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	08 2f       	mov	r16, r24
    32c8:	16 2f       	mov	r17, r22
    32ca:	66 23       	and	r22, r22
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <xQueueGenericCreate+0x12>
    32ce:	3b c0       	rjmp	.+118    	; 0x3346 <xQueueGenericCreate+0x88>
    32d0:	86 9f       	mul	r24, r22
    32d2:	c0 01       	movw	r24, r0
    32d4:	11 24       	eor	r1, r1
    32d6:	80 96       	adiw	r24, 0x20	; 32
    32d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    32dc:	ec 01       	movw	r28, r24
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	21 f4       	brne	.+8      	; 0x32ea <xQueueGenericCreate+0x2c>
    32e2:	39 c0       	rjmp	.+114    	; 0x3356 <xQueueGenericCreate+0x98>
    32e4:	d9 83       	std	Y+1, r29	; 0x01
    32e6:	c8 83       	st	Y, r28
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <xQueueGenericCreate+0x32>
    32ea:	4f 96       	adiw	r24, 0x1f	; 31
    32ec:	99 83       	std	Y+1, r25	; 0x01
    32ee:	88 83       	st	Y, r24
    32f0:	0b 8f       	std	Y+27, r16	; 0x1b
    32f2:	1c 8f       	std	Y+28, r17	; 0x1c
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	0f 92       	push	r0
    32fa:	48 81       	ld	r20, Y
    32fc:	59 81       	ldd	r21, Y+1	; 0x01
    32fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3304:	62 9f       	mul	r22, r18
    3306:	c0 01       	movw	r24, r0
    3308:	63 9f       	mul	r22, r19
    330a:	90 0d       	add	r25, r0
    330c:	11 24       	eor	r1, r1
    330e:	ba 01       	movw	r22, r20
    3310:	68 0f       	add	r22, r24
    3312:	79 1f       	adc	r23, r25
    3314:	7b 83       	std	Y+3, r23	; 0x03
    3316:	6a 83       	std	Y+2, r22	; 0x02
    3318:	1a 8e       	std	Y+26, r1	; 0x1a
    331a:	5d 83       	std	Y+5, r21	; 0x05
    331c:	4c 83       	std	Y+4, r20	; 0x04
    331e:	82 1b       	sub	r24, r18
    3320:	93 0b       	sbc	r25, r19
    3322:	84 0f       	add	r24, r20
    3324:	95 1f       	adc	r25, r21
    3326:	9f 83       	std	Y+7, r25	; 0x07
    3328:	8e 83       	std	Y+6, r24	; 0x06
    332a:	8f ef       	ldi	r24, 0xFF	; 255
    332c:	8d 8f       	std	Y+29, r24	; 0x1d
    332e:	8e 8f       	std	Y+30, r24	; 0x1e
    3330:	ce 01       	movw	r24, r28
    3332:	08 96       	adiw	r24, 0x08	; 8
    3334:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    3338:	ce 01       	movw	r24, r28
    333a:	41 96       	adiw	r24, 0x11	; 17
    333c:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    3340:	0f 90       	pop	r0
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	08 c0       	rjmp	.+16     	; 0x3356 <xQueueGenericCreate+0x98>
    3346:	8f e1       	ldi	r24, 0x1F	; 31
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    334e:	ec 01       	movw	r28, r24
    3350:	89 2b       	or	r24, r25
    3352:	09 f0       	breq	.+2      	; 0x3356 <xQueueGenericCreate+0x98>
    3354:	c7 cf       	rjmp	.-114    	; 0x32e4 <xQueueGenericCreate+0x26>
    3356:	ce 01       	movw	r24, r28
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	08 95       	ret

00003362 <xQueueCreateMutex>:
    3362:	9f 92       	push	r9
    3364:	af 92       	push	r10
    3366:	bf 92       	push	r11
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	0f 93       	push	r16
    3372:	1f 93       	push	r17
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	00 d0       	rcall	.+0      	; 0x337a <xQueueCreateMutex+0x18>
    337a:	1f 92       	push	r1
    337c:	1f 92       	push	r1
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	8f e1       	ldi	r24, 0x1F	; 31
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    338a:	8c 01       	movw	r16, r24
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	09 f4       	brne	.+2      	; 0x3392 <xQueueCreateMutex+0x30>
    3390:	58 c1       	rjmp	.+688    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3392:	fc 01       	movw	r30, r24
    3394:	13 82       	std	Z+3, r1	; 0x03
    3396:	12 82       	std	Z+2, r1	; 0x02
    3398:	11 82       	std	Z+1, r1	; 0x01
    339a:	10 82       	st	Z, r1
    339c:	15 82       	std	Z+5, r1	; 0x05
    339e:	14 82       	std	Z+4, r1	; 0x04
    33a0:	17 82       	std	Z+7, r1	; 0x07
    33a2:	16 82       	std	Z+6, r1	; 0x06
    33a4:	12 8e       	std	Z+26, r1	; 0x1a
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	83 8f       	std	Z+27, r24	; 0x1b
    33aa:	14 8e       	std	Z+28, r1	; 0x1c
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	85 8f       	std	Z+29, r24	; 0x1d
    33b0:	86 8f       	std	Z+30, r24	; 0x1e
    33b2:	78 01       	movw	r14, r16
    33b4:	f8 e0       	ldi	r31, 0x08	; 8
    33b6:	ef 0e       	add	r14, r31
    33b8:	f1 1c       	adc	r15, r1
    33ba:	c7 01       	movw	r24, r14
    33bc:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    33c0:	68 01       	movw	r12, r16
    33c2:	81 e1       	ldi	r24, 0x11	; 17
    33c4:	c8 0e       	add	r12, r24
    33c6:	d1 1c       	adc	r13, r1
    33c8:	c6 01       	movw	r24, r12
    33ca:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    33ce:	1d 82       	std	Y+5, r1	; 0x05
    33d0:	1c 82       	std	Y+4, r1	; 0x04
    33d2:	a1 2c       	mov	r10, r1
    33d4:	99 24       	eor	r9, r9
    33d6:	93 94       	inc	r9
    33d8:	bb 24       	eor	r11, r11
    33da:	ba 94       	dec	r11
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	0f 92       	push	r0
    33e2:	f8 01       	movw	r30, r16
    33e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    33e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    33e8:	98 17       	cp	r25, r24
    33ea:	f0 f4       	brcc	.+60     	; 0x3428 <xQueueCreateMutex+0xc6>
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	89 2b       	or	r24, r25
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <xQueueCreateMutex+0x94>
    33f4:	1d c1       	rjmp	.+570    	; 0x3630 <xQueueCreateMutex+0x2ce>
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	93 81       	ldd	r25, Z+3	; 0x03
    33fa:	0e 94 ef 2b 	call	0x57de	; 0x57de <xTaskPriorityDisinherit>
    33fe:	f8 01       	movw	r30, r16
    3400:	13 82       	std	Z+3, r1	; 0x03
    3402:	12 82       	std	Z+2, r1	; 0x02
    3404:	92 8d       	ldd	r25, Z+26	; 0x1a
    3406:	9f 5f       	subi	r25, 0xFF	; 255
    3408:	92 8f       	std	Z+26, r25	; 0x1a
    340a:	91 89       	ldd	r25, Z+17	; 0x11
    340c:	99 23       	and	r25, r25
    340e:	39 f0       	breq	.+14     	; 0x341e <xQueueCreateMutex+0xbc>
    3410:	c6 01       	movw	r24, r12
    3412:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	21 f4       	brne	.+8      	; 0x3422 <xQueueCreateMutex+0xc0>
    341a:	76 de       	rcall	.-788    	; 0x3108 <vPortYield>
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <xQueueCreateMutex+0xc0>
    341e:	81 11       	cpse	r24, r1
    3420:	73 de       	rcall	.-794    	; 0x3108 <vPortYield>
    3422:	0f 90       	pop	r0
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	0d c1       	rjmp	.+538    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	89 2b       	or	r24, r25
    342e:	19 f4       	brne	.+6      	; 0x3436 <xQueueCreateMutex+0xd4>
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	06 c1       	rjmp	.+524    	; 0x3642 <xQueueCreateMutex+0x2e0>
    3436:	a1 10       	cpse	r10, r1
    3438:	05 c0       	rjmp	.+10     	; 0x3444 <xQueueCreateMutex+0xe2>
    343a:	ce 01       	movw	r24, r28
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	0e 94 3e 2b 	call	0x567c	; 0x567c <vTaskSetTimeOutState>
    3442:	a9 2c       	mov	r10, r9
    3444:	0f 90       	pop	r0
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	0f 92       	push	r0
    3452:	f8 01       	movw	r30, r16
    3454:	85 8d       	ldd	r24, Z+29	; 0x1d
    3456:	8f 3f       	cpi	r24, 0xFF	; 255
    3458:	09 f4       	brne	.+2      	; 0x345c <xQueueCreateMutex+0xfa>
    345a:	15 8e       	std	Z+29, r1	; 0x1d
    345c:	f8 01       	movw	r30, r16
    345e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3460:	8f 3f       	cpi	r24, 0xFF	; 255
    3462:	09 f4       	brne	.+2      	; 0x3466 <xQueueCreateMutex+0x104>
    3464:	16 8e       	std	Z+30, r1	; 0x1e
    3466:	0f 90       	pop	r0
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	be 01       	movw	r22, r28
    346c:	6c 5f       	subi	r22, 0xFC	; 252
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	ce 01       	movw	r24, r28
    3472:	01 96       	adiw	r24, 0x01	; 1
    3474:	0e 94 49 2b 	call	0x5692	; 0x5692 <xTaskCheckForTimeOut>
    3478:	81 11       	cpse	r24, r1
    347a:	96 c0       	rjmp	.+300    	; 0x35a8 <xQueueCreateMutex+0x246>
    347c:	0f b6       	in	r0, 0x3f	; 63
    347e:	f8 94       	cli
    3480:	0f 92       	push	r0
    3482:	f8 01       	movw	r30, r16
    3484:	92 8d       	ldd	r25, Z+26	; 0x1a
    3486:	83 8d       	ldd	r24, Z+27	; 0x1b
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	98 13       	cpse	r25, r24
    348e:	4a c0       	rjmp	.+148    	; 0x3524 <xQueueCreateMutex+0x1c2>
    3490:	6c 81       	ldd	r22, Y+4	; 0x04
    3492:	7d 81       	ldd	r23, Y+5	; 0x05
    3494:	c7 01       	movw	r24, r14
    3496:	0e 94 9b 2a 	call	0x5536	; 0x5536 <vTaskPlaceOnEventList>
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	0f 92       	push	r0
    34a0:	f8 01       	movw	r30, r16
    34a2:	86 8d       	ldd	r24, Z+30	; 0x1e
    34a4:	18 16       	cp	r1, r24
    34a6:	ac f4       	brge	.+42     	; 0x34d2 <xQueueCreateMutex+0x170>
    34a8:	81 89       	ldd	r24, Z+17	; 0x11
    34aa:	81 11       	cpse	r24, r1
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <xQueueCreateMutex+0x156>
    34ae:	11 c0       	rjmp	.+34     	; 0x34d2 <xQueueCreateMutex+0x170>
    34b0:	f8 01       	movw	r30, r16
    34b2:	81 89       	ldd	r24, Z+17	; 0x11
    34b4:	88 23       	and	r24, r24
    34b6:	69 f0       	breq	.+26     	; 0x34d2 <xQueueCreateMutex+0x170>
    34b8:	c6 01       	movw	r24, r12
    34ba:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    34be:	81 11       	cpse	r24, r1
    34c0:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    34c4:	f8 01       	movw	r30, r16
    34c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    34c8:	81 50       	subi	r24, 0x01	; 1
    34ca:	86 8f       	std	Z+30, r24	; 0x1e
    34cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    34ce:	18 16       	cp	r1, r24
    34d0:	7c f3       	brlt	.-34     	; 0x34b0 <xQueueCreateMutex+0x14e>
    34d2:	f8 01       	movw	r30, r16
    34d4:	b6 8e       	std	Z+30, r11	; 0x1e
    34d6:	0f 90       	pop	r0
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	0f 92       	push	r0
    34e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    34e2:	18 16       	cp	r1, r24
    34e4:	ac f4       	brge	.+42     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34e6:	80 85       	ldd	r24, Z+8	; 0x08
    34e8:	81 11       	cpse	r24, r1
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <xQueueCreateMutex+0x194>
    34ec:	11 c0       	rjmp	.+34     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34ee:	f8 01       	movw	r30, r16
    34f0:	80 85       	ldd	r24, Z+8	; 0x08
    34f2:	88 23       	and	r24, r24
    34f4:	69 f0       	breq	.+26     	; 0x3510 <xQueueCreateMutex+0x1ae>
    34f6:	c7 01       	movw	r24, r14
    34f8:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    34fc:	81 11       	cpse	r24, r1
    34fe:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3502:	f8 01       	movw	r30, r16
    3504:	85 8d       	ldd	r24, Z+29	; 0x1d
    3506:	81 50       	subi	r24, 0x01	; 1
    3508:	85 8f       	std	Z+29, r24	; 0x1d
    350a:	85 8d       	ldd	r24, Z+29	; 0x1d
    350c:	18 16       	cp	r1, r24
    350e:	7c f3       	brlt	.-34     	; 0x34ee <xQueueCreateMutex+0x18c>
    3510:	f8 01       	movw	r30, r16
    3512:	b5 8e       	std	Z+29, r11	; 0x1d
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    351c:	81 11       	cpse	r24, r1
    351e:	5e cf       	rjmp	.-324    	; 0x33dc <xQueueCreateMutex+0x7a>
    3520:	f3 dd       	rcall	.-1050   	; 0x3108 <vPortYield>
    3522:	5c cf       	rjmp	.-328    	; 0x33dc <xQueueCreateMutex+0x7a>
    3524:	0f b6       	in	r0, 0x3f	; 63
    3526:	f8 94       	cli
    3528:	0f 92       	push	r0
    352a:	f8 01       	movw	r30, r16
    352c:	86 8d       	ldd	r24, Z+30	; 0x1e
    352e:	18 16       	cp	r1, r24
    3530:	ac f4       	brge	.+42     	; 0x355c <xQueueCreateMutex+0x1fa>
    3532:	81 89       	ldd	r24, Z+17	; 0x11
    3534:	81 11       	cpse	r24, r1
    3536:	05 c0       	rjmp	.+10     	; 0x3542 <xQueueCreateMutex+0x1e0>
    3538:	11 c0       	rjmp	.+34     	; 0x355c <xQueueCreateMutex+0x1fa>
    353a:	f8 01       	movw	r30, r16
    353c:	81 89       	ldd	r24, Z+17	; 0x11
    353e:	88 23       	and	r24, r24
    3540:	69 f0       	breq	.+26     	; 0x355c <xQueueCreateMutex+0x1fa>
    3542:	c6 01       	movw	r24, r12
    3544:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3548:	81 11       	cpse	r24, r1
    354a:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    354e:	f8 01       	movw	r30, r16
    3550:	86 8d       	ldd	r24, Z+30	; 0x1e
    3552:	81 50       	subi	r24, 0x01	; 1
    3554:	86 8f       	std	Z+30, r24	; 0x1e
    3556:	86 8d       	ldd	r24, Z+30	; 0x1e
    3558:	18 16       	cp	r1, r24
    355a:	7c f3       	brlt	.-34     	; 0x353a <xQueueCreateMutex+0x1d8>
    355c:	f8 01       	movw	r30, r16
    355e:	b6 8e       	std	Z+30, r11	; 0x1e
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	0f 92       	push	r0
    356a:	85 8d       	ldd	r24, Z+29	; 0x1d
    356c:	18 16       	cp	r1, r24
    356e:	ac f4       	brge	.+42     	; 0x359a <xQueueCreateMutex+0x238>
    3570:	80 85       	ldd	r24, Z+8	; 0x08
    3572:	81 11       	cpse	r24, r1
    3574:	05 c0       	rjmp	.+10     	; 0x3580 <xQueueCreateMutex+0x21e>
    3576:	11 c0       	rjmp	.+34     	; 0x359a <xQueueCreateMutex+0x238>
    3578:	f8 01       	movw	r30, r16
    357a:	80 85       	ldd	r24, Z+8	; 0x08
    357c:	88 23       	and	r24, r24
    357e:	69 f0       	breq	.+26     	; 0x359a <xQueueCreateMutex+0x238>
    3580:	c7 01       	movw	r24, r14
    3582:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3586:	81 11       	cpse	r24, r1
    3588:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    358c:	f8 01       	movw	r30, r16
    358e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3590:	81 50       	subi	r24, 0x01	; 1
    3592:	85 8f       	std	Z+29, r24	; 0x1d
    3594:	85 8d       	ldd	r24, Z+29	; 0x1d
    3596:	18 16       	cp	r1, r24
    3598:	7c f3       	brlt	.-34     	; 0x3578 <xQueueCreateMutex+0x216>
    359a:	f8 01       	movw	r30, r16
    359c:	b5 8e       	std	Z+29, r11	; 0x1d
    359e:	0f 90       	pop	r0
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    35a6:	1a cf       	rjmp	.-460    	; 0x33dc <xQueueCreateMutex+0x7a>
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	0f 92       	push	r0
    35ae:	f8 01       	movw	r30, r16
    35b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    35b2:	18 16       	cp	r1, r24
    35b4:	ac f4       	brge	.+42     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35b6:	81 89       	ldd	r24, Z+17	; 0x11
    35b8:	81 11       	cpse	r24, r1
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <xQueueCreateMutex+0x264>
    35bc:	11 c0       	rjmp	.+34     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35be:	f8 01       	movw	r30, r16
    35c0:	81 89       	ldd	r24, Z+17	; 0x11
    35c2:	88 23       	and	r24, r24
    35c4:	69 f0       	breq	.+26     	; 0x35e0 <xQueueCreateMutex+0x27e>
    35c6:	c6 01       	movw	r24, r12
    35c8:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    35cc:	81 11       	cpse	r24, r1
    35ce:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    35d2:	f8 01       	movw	r30, r16
    35d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    35d6:	81 50       	subi	r24, 0x01	; 1
    35d8:	86 8f       	std	Z+30, r24	; 0x1e
    35da:	86 8d       	ldd	r24, Z+30	; 0x1e
    35dc:	18 16       	cp	r1, r24
    35de:	7c f3       	brlt	.-34     	; 0x35be <xQueueCreateMutex+0x25c>
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	f8 01       	movw	r30, r16
    35e4:	86 8f       	std	Z+30, r24	; 0x1e
    35e6:	0f 90       	pop	r0
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	0f 92       	push	r0
    35f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    35f2:	18 16       	cp	r1, r24
    35f4:	ac f4       	brge	.+42     	; 0x3620 <xQueueCreateMutex+0x2be>
    35f6:	80 85       	ldd	r24, Z+8	; 0x08
    35f8:	81 11       	cpse	r24, r1
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <xQueueCreateMutex+0x2a4>
    35fc:	11 c0       	rjmp	.+34     	; 0x3620 <xQueueCreateMutex+0x2be>
    35fe:	f8 01       	movw	r30, r16
    3600:	80 85       	ldd	r24, Z+8	; 0x08
    3602:	88 23       	and	r24, r24
    3604:	69 f0       	breq	.+26     	; 0x3620 <xQueueCreateMutex+0x2be>
    3606:	c7 01       	movw	r24, r14
    3608:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    360c:	81 11       	cpse	r24, r1
    360e:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3612:	f8 01       	movw	r30, r16
    3614:	85 8d       	ldd	r24, Z+29	; 0x1d
    3616:	81 50       	subi	r24, 0x01	; 1
    3618:	85 8f       	std	Z+29, r24	; 0x1d
    361a:	85 8d       	ldd	r24, Z+29	; 0x1d
    361c:	18 16       	cp	r1, r24
    361e:	7c f3       	brlt	.-34     	; 0x35fe <xQueueCreateMutex+0x29c>
    3620:	8f ef       	ldi	r24, 0xFF	; 255
    3622:	f8 01       	movw	r30, r16
    3624:	85 8f       	std	Z+29, r24	; 0x1d
    3626:	0f 90       	pop	r0
    3628:	0f be       	out	0x3f, r0	; 63
    362a:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    362e:	09 c0       	rjmp	.+18     	; 0x3642 <xQueueCreateMutex+0x2e0>
    3630:	f8 01       	movw	r30, r16
    3632:	82 8d       	ldd	r24, Z+26	; 0x1a
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	82 8f       	std	Z+26, r24	; 0x1a
    3638:	81 89       	ldd	r24, Z+17	; 0x11
    363a:	88 23       	and	r24, r24
    363c:	09 f4       	brne	.+2      	; 0x3640 <xQueueCreateMutex+0x2de>
    363e:	f1 ce       	rjmp	.-542    	; 0x3422 <xQueueCreateMutex+0xc0>
    3640:	e7 ce       	rjmp	.-562    	; 0x3410 <xQueueCreateMutex+0xae>
    3642:	c8 01       	movw	r24, r16
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	af 90       	pop	r10
    3662:	9f 90       	pop	r9
    3664:	08 95       	ret

00003666 <xQueueGenericSend>:
    3666:	6f 92       	push	r6
    3668:	7f 92       	push	r7
    366a:	8f 92       	push	r8
    366c:	9f 92       	push	r9
    366e:	af 92       	push	r10
    3670:	bf 92       	push	r11
    3672:	cf 92       	push	r12
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	00 d0       	rcall	.+0      	; 0x3684 <xQueueGenericSend+0x1e>
    3684:	1f 92       	push	r1
    3686:	1f 92       	push	r1
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	8c 01       	movw	r16, r24
    368e:	5b 01       	movw	r10, r22
    3690:	5d 83       	std	Y+5, r21	; 0x05
    3692:	4c 83       	std	Y+4, r20	; 0x04
    3694:	72 2e       	mov	r7, r18
    3696:	81 2c       	mov	r8, r1
    3698:	66 24       	eor	r6, r6
    369a:	63 94       	inc	r6
    369c:	99 24       	eor	r9, r9
    369e:	9a 94       	dec	r9
    36a0:	7c 01       	movw	r14, r24
    36a2:	88 e0       	ldi	r24, 0x08	; 8
    36a4:	e8 0e       	add	r14, r24
    36a6:	f1 1c       	adc	r15, r1
    36a8:	68 01       	movw	r12, r16
    36aa:	e1 e1       	ldi	r30, 0x11	; 17
    36ac:	ce 0e       	add	r12, r30
    36ae:	d1 1c       	adc	r13, r1
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	0f 92       	push	r0
    36b6:	f8 01       	movw	r30, r16
    36b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    36ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    36bc:	98 17       	cp	r25, r24
    36be:	20 f0       	brcs	.+8      	; 0x36c8 <xQueueGenericSend+0x62>
    36c0:	f2 e0       	ldi	r31, 0x02	; 2
    36c2:	7f 12       	cpse	r7, r31
    36c4:	6e c0       	rjmp	.+220    	; 0x37a2 <xQueueGenericSend+0x13c>
    36c6:	7d c1       	rjmp	.+762    	; 0x39c2 <xQueueGenericSend+0x35c>
    36c8:	f8 01       	movw	r30, r16
    36ca:	44 8d       	ldd	r20, Z+28	; 0x1c
    36cc:	41 11       	cpse	r20, r1
    36ce:	15 c0       	rjmp	.+42     	; 0x36fa <xQueueGenericSend+0x94>
    36d0:	f8 01       	movw	r30, r16
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	89 2b       	or	r24, r25
    36d8:	09 f0       	breq	.+2      	; 0x36dc <xQueueGenericSend+0x76>
    36da:	79 c1       	rjmp	.+754    	; 0x39ce <xQueueGenericSend+0x368>
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	93 81       	ldd	r25, Z+3	; 0x03
    36e0:	0e 94 ef 2b 	call	0x57de	; 0x57de <xTaskPriorityDisinherit>
    36e4:	f8 01       	movw	r30, r16
    36e6:	13 82       	std	Z+3, r1	; 0x03
    36e8:	12 82       	std	Z+2, r1	; 0x02
    36ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    36ec:	9f 5f       	subi	r25, 0xFF	; 255
    36ee:	92 8f       	std	Z+26, r25	; 0x1a
    36f0:	91 89       	ldd	r25, Z+17	; 0x11
    36f2:	99 23       	and	r25, r25
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <xQueueGenericSend+0x92>
    36f6:	4f c0       	rjmp	.+158    	; 0x3796 <xQueueGenericSend+0x130>
    36f8:	46 c0       	rjmp	.+140    	; 0x3786 <xQueueGenericSend+0x120>
    36fa:	71 10       	cpse	r7, r1
    36fc:	1a c0       	rjmp	.+52     	; 0x3732 <xQueueGenericSend+0xcc>
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	b5 01       	movw	r22, r10
    3702:	f8 01       	movw	r30, r16
    3704:	84 81       	ldd	r24, Z+4	; 0x04
    3706:	95 81       	ldd	r25, Z+5	; 0x05
    3708:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    370c:	f8 01       	movw	r30, r16
    370e:	24 8d       	ldd	r18, Z+28	; 0x1c
    3710:	84 81       	ldd	r24, Z+4	; 0x04
    3712:	95 81       	ldd	r25, Z+5	; 0x05
    3714:	82 0f       	add	r24, r18
    3716:	91 1d       	adc	r25, r1
    3718:	95 83       	std	Z+5, r25	; 0x05
    371a:	84 83       	std	Z+4, r24	; 0x04
    371c:	22 81       	ldd	r18, Z+2	; 0x02
    371e:	33 81       	ldd	r19, Z+3	; 0x03
    3720:	82 17       	cp	r24, r18
    3722:	93 07       	cpc	r25, r19
    3724:	08 f4       	brcc	.+2      	; 0x3728 <xQueueGenericSend+0xc2>
    3726:	53 c1       	rjmp	.+678    	; 0x39ce <xQueueGenericSend+0x368>
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	95 83       	std	Z+5, r25	; 0x05
    372e:	84 83       	std	Z+4, r24	; 0x04
    3730:	4e c1       	rjmp	.+668    	; 0x39ce <xQueueGenericSend+0x368>
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	b5 01       	movw	r22, r10
    3736:	f8 01       	movw	r30, r16
    3738:	86 81       	ldd	r24, Z+6	; 0x06
    373a:	97 81       	ldd	r25, Z+7	; 0x07
    373c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    3740:	f8 01       	movw	r30, r16
    3742:	84 8d       	ldd	r24, Z+28	; 0x1c
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	91 95       	neg	r25
    3748:	81 95       	neg	r24
    374a:	91 09       	sbc	r25, r1
    374c:	26 81       	ldd	r18, Z+6	; 0x06
    374e:	37 81       	ldd	r19, Z+7	; 0x07
    3750:	28 0f       	add	r18, r24
    3752:	39 1f       	adc	r19, r25
    3754:	37 83       	std	Z+7, r19	; 0x07
    3756:	26 83       	std	Z+6, r18	; 0x06
    3758:	40 81       	ld	r20, Z
    375a:	51 81       	ldd	r21, Z+1	; 0x01
    375c:	24 17       	cp	r18, r20
    375e:	35 07       	cpc	r19, r21
    3760:	30 f4       	brcc	.+12     	; 0x376e <xQueueGenericSend+0x108>
    3762:	22 81       	ldd	r18, Z+2	; 0x02
    3764:	33 81       	ldd	r19, Z+3	; 0x03
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	97 83       	std	Z+7, r25	; 0x07
    376c:	86 83       	std	Z+6, r24	; 0x06
    376e:	f2 e0       	ldi	r31, 0x02	; 2
    3770:	7f 12       	cpse	r7, r31
    3772:	2d c1       	rjmp	.+602    	; 0x39ce <xQueueGenericSend+0x368>
    3774:	f8 01       	movw	r30, r16
    3776:	82 8d       	ldd	r24, Z+26	; 0x1a
    3778:	88 23       	and	r24, r24
    377a:	09 f4       	brne	.+2      	; 0x377e <xQueueGenericSend+0x118>
    377c:	28 c1       	rjmp	.+592    	; 0x39ce <xQueueGenericSend+0x368>
    377e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3780:	81 50       	subi	r24, 0x01	; 1
    3782:	82 8f       	std	Z+26, r24	; 0x1a
    3784:	24 c1       	rjmp	.+584    	; 0x39ce <xQueueGenericSend+0x368>
    3786:	c8 01       	movw	r24, r16
    3788:	41 96       	adiw	r24, 0x11	; 17
    378a:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    378e:	81 30       	cpi	r24, 0x01	; 1
    3790:	21 f4       	brne	.+8      	; 0x379a <xQueueGenericSend+0x134>
    3792:	ba dc       	rcall	.-1676   	; 0x3108 <vPortYield>
    3794:	02 c0       	rjmp	.+4      	; 0x379a <xQueueGenericSend+0x134>
    3796:	81 11       	cpse	r24, r1
    3798:	b7 dc       	rcall	.-1682   	; 0x3108 <vPortYield>
    379a:	0f 90       	pop	r0
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	1e c1       	rjmp	.+572    	; 0x39de <xQueueGenericSend+0x378>
    37a2:	8c 81       	ldd	r24, Y+4	; 0x04
    37a4:	9d 81       	ldd	r25, Y+5	; 0x05
    37a6:	89 2b       	or	r24, r25
    37a8:	21 f4       	brne	.+8      	; 0x37b2 <xQueueGenericSend+0x14c>
    37aa:	0f 90       	pop	r0
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	16 c1       	rjmp	.+556    	; 0x39de <xQueueGenericSend+0x378>
    37b2:	81 10       	cpse	r8, r1
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <xQueueGenericSend+0x15a>
    37b6:	ce 01       	movw	r24, r28
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	0e 94 3e 2b 	call	0x567c	; 0x567c <vTaskSetTimeOutState>
    37be:	86 2c       	mov	r8, r6
    37c0:	0f 90       	pop	r0
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	0f 92       	push	r0
    37ce:	f8 01       	movw	r30, r16
    37d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    37d2:	8f 3f       	cpi	r24, 0xFF	; 255
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <xQueueGenericSend+0x172>
    37d6:	15 8e       	std	Z+29, r1	; 0x1d
    37d8:	f8 01       	movw	r30, r16
    37da:	86 8d       	ldd	r24, Z+30	; 0x1e
    37dc:	8f 3f       	cpi	r24, 0xFF	; 255
    37de:	09 f4       	brne	.+2      	; 0x37e2 <xQueueGenericSend+0x17c>
    37e0:	16 8e       	std	Z+30, r1	; 0x1e
    37e2:	0f 90       	pop	r0
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	be 01       	movw	r22, r28
    37e8:	6c 5f       	subi	r22, 0xFC	; 252
    37ea:	7f 4f       	sbci	r23, 0xFF	; 255
    37ec:	ce 01       	movw	r24, r28
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	0e 94 49 2b 	call	0x5692	; 0x5692 <xTaskCheckForTimeOut>
    37f4:	81 11       	cpse	r24, r1
    37f6:	96 c0       	rjmp	.+300    	; 0x3924 <xQueueGenericSend+0x2be>
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	0f 92       	push	r0
    37fe:	f8 01       	movw	r30, r16
    3800:	92 8d       	ldd	r25, Z+26	; 0x1a
    3802:	83 8d       	ldd	r24, Z+27	; 0x1b
    3804:	0f 90       	pop	r0
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	98 13       	cpse	r25, r24
    380a:	4a c0       	rjmp	.+148    	; 0x38a0 <xQueueGenericSend+0x23a>
    380c:	6c 81       	ldd	r22, Y+4	; 0x04
    380e:	7d 81       	ldd	r23, Y+5	; 0x05
    3810:	c7 01       	movw	r24, r14
    3812:	0e 94 9b 2a 	call	0x5536	; 0x5536 <vTaskPlaceOnEventList>
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	0f 92       	push	r0
    381c:	f8 01       	movw	r30, r16
    381e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3820:	18 16       	cp	r1, r24
    3822:	ac f4       	brge	.+42     	; 0x384e <xQueueGenericSend+0x1e8>
    3824:	81 89       	ldd	r24, Z+17	; 0x11
    3826:	81 11       	cpse	r24, r1
    3828:	05 c0       	rjmp	.+10     	; 0x3834 <xQueueGenericSend+0x1ce>
    382a:	11 c0       	rjmp	.+34     	; 0x384e <xQueueGenericSend+0x1e8>
    382c:	f8 01       	movw	r30, r16
    382e:	81 89       	ldd	r24, Z+17	; 0x11
    3830:	88 23       	and	r24, r24
    3832:	69 f0       	breq	.+26     	; 0x384e <xQueueGenericSend+0x1e8>
    3834:	c6 01       	movw	r24, r12
    3836:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    383a:	81 11       	cpse	r24, r1
    383c:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3840:	f8 01       	movw	r30, r16
    3842:	86 8d       	ldd	r24, Z+30	; 0x1e
    3844:	81 50       	subi	r24, 0x01	; 1
    3846:	86 8f       	std	Z+30, r24	; 0x1e
    3848:	86 8d       	ldd	r24, Z+30	; 0x1e
    384a:	18 16       	cp	r1, r24
    384c:	7c f3       	brlt	.-34     	; 0x382c <xQueueGenericSend+0x1c6>
    384e:	f8 01       	movw	r30, r16
    3850:	96 8e       	std	Z+30, r9	; 0x1e
    3852:	0f 90       	pop	r0
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	0f 92       	push	r0
    385c:	85 8d       	ldd	r24, Z+29	; 0x1d
    385e:	18 16       	cp	r1, r24
    3860:	ac f4       	brge	.+42     	; 0x388c <xQueueGenericSend+0x226>
    3862:	80 85       	ldd	r24, Z+8	; 0x08
    3864:	81 11       	cpse	r24, r1
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <xQueueGenericSend+0x20c>
    3868:	11 c0       	rjmp	.+34     	; 0x388c <xQueueGenericSend+0x226>
    386a:	f8 01       	movw	r30, r16
    386c:	80 85       	ldd	r24, Z+8	; 0x08
    386e:	88 23       	and	r24, r24
    3870:	69 f0       	breq	.+26     	; 0x388c <xQueueGenericSend+0x226>
    3872:	c7 01       	movw	r24, r14
    3874:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3878:	81 11       	cpse	r24, r1
    387a:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    387e:	f8 01       	movw	r30, r16
    3880:	85 8d       	ldd	r24, Z+29	; 0x1d
    3882:	81 50       	subi	r24, 0x01	; 1
    3884:	85 8f       	std	Z+29, r24	; 0x1d
    3886:	85 8d       	ldd	r24, Z+29	; 0x1d
    3888:	18 16       	cp	r1, r24
    388a:	7c f3       	brlt	.-34     	; 0x386a <xQueueGenericSend+0x204>
    388c:	f8 01       	movw	r30, r16
    388e:	95 8e       	std	Z+29, r9	; 0x1d
    3890:	0f 90       	pop	r0
    3892:	0f be       	out	0x3f, r0	; 63
    3894:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3898:	81 11       	cpse	r24, r1
    389a:	0a cf       	rjmp	.-492    	; 0x36b0 <xQueueGenericSend+0x4a>
    389c:	35 dc       	rcall	.-1942   	; 0x3108 <vPortYield>
    389e:	08 cf       	rjmp	.-496    	; 0x36b0 <xQueueGenericSend+0x4a>
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	0f 92       	push	r0
    38a6:	f8 01       	movw	r30, r16
    38a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    38aa:	18 16       	cp	r1, r24
    38ac:	ac f4       	brge	.+42     	; 0x38d8 <xQueueGenericSend+0x272>
    38ae:	81 89       	ldd	r24, Z+17	; 0x11
    38b0:	81 11       	cpse	r24, r1
    38b2:	05 c0       	rjmp	.+10     	; 0x38be <xQueueGenericSend+0x258>
    38b4:	11 c0       	rjmp	.+34     	; 0x38d8 <xQueueGenericSend+0x272>
    38b6:	f8 01       	movw	r30, r16
    38b8:	81 89       	ldd	r24, Z+17	; 0x11
    38ba:	88 23       	and	r24, r24
    38bc:	69 f0       	breq	.+26     	; 0x38d8 <xQueueGenericSend+0x272>
    38be:	c6 01       	movw	r24, r12
    38c0:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    38c4:	81 11       	cpse	r24, r1
    38c6:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    38ca:	f8 01       	movw	r30, r16
    38cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    38ce:	81 50       	subi	r24, 0x01	; 1
    38d0:	86 8f       	std	Z+30, r24	; 0x1e
    38d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    38d4:	18 16       	cp	r1, r24
    38d6:	7c f3       	brlt	.-34     	; 0x38b6 <xQueueGenericSend+0x250>
    38d8:	f8 01       	movw	r30, r16
    38da:	96 8e       	std	Z+30, r9	; 0x1e
    38dc:	0f 90       	pop	r0
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	0f 92       	push	r0
    38e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    38e8:	18 16       	cp	r1, r24
    38ea:	ac f4       	brge	.+42     	; 0x3916 <xQueueGenericSend+0x2b0>
    38ec:	80 85       	ldd	r24, Z+8	; 0x08
    38ee:	81 11       	cpse	r24, r1
    38f0:	05 c0       	rjmp	.+10     	; 0x38fc <xQueueGenericSend+0x296>
    38f2:	11 c0       	rjmp	.+34     	; 0x3916 <xQueueGenericSend+0x2b0>
    38f4:	f8 01       	movw	r30, r16
    38f6:	80 85       	ldd	r24, Z+8	; 0x08
    38f8:	88 23       	and	r24, r24
    38fa:	69 f0       	breq	.+26     	; 0x3916 <xQueueGenericSend+0x2b0>
    38fc:	c7 01       	movw	r24, r14
    38fe:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3902:	81 11       	cpse	r24, r1
    3904:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3908:	f8 01       	movw	r30, r16
    390a:	85 8d       	ldd	r24, Z+29	; 0x1d
    390c:	81 50       	subi	r24, 0x01	; 1
    390e:	85 8f       	std	Z+29, r24	; 0x1d
    3910:	85 8d       	ldd	r24, Z+29	; 0x1d
    3912:	18 16       	cp	r1, r24
    3914:	7c f3       	brlt	.-34     	; 0x38f4 <xQueueGenericSend+0x28e>
    3916:	f8 01       	movw	r30, r16
    3918:	95 8e       	std	Z+29, r9	; 0x1d
    391a:	0f 90       	pop	r0
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3922:	c6 ce       	rjmp	.-628    	; 0x36b0 <xQueueGenericSend+0x4a>
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	f8 94       	cli
    3928:	0f 92       	push	r0
    392a:	f8 01       	movw	r30, r16
    392c:	86 8d       	ldd	r24, Z+30	; 0x1e
    392e:	18 16       	cp	r1, r24
    3930:	d4 f4       	brge	.+52     	; 0x3966 <xQueueGenericSend+0x300>
    3932:	81 89       	ldd	r24, Z+17	; 0x11
    3934:	81 11       	cpse	r24, r1
    3936:	06 c0       	rjmp	.+12     	; 0x3944 <xQueueGenericSend+0x2de>
    3938:	16 c0       	rjmp	.+44     	; 0x3966 <xQueueGenericSend+0x300>
    393a:	f8 01       	movw	r30, r16
    393c:	81 89       	ldd	r24, Z+17	; 0x11
    393e:	81 11       	cpse	r24, r1
    3940:	05 c0       	rjmp	.+10     	; 0x394c <xQueueGenericSend+0x2e6>
    3942:	11 c0       	rjmp	.+34     	; 0x3966 <xQueueGenericSend+0x300>
    3944:	78 01       	movw	r14, r16
    3946:	f1 e1       	ldi	r31, 0x11	; 17
    3948:	ef 0e       	add	r14, r31
    394a:	f1 1c       	adc	r15, r1
    394c:	c7 01       	movw	r24, r14
    394e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3952:	81 11       	cpse	r24, r1
    3954:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3958:	f8 01       	movw	r30, r16
    395a:	86 8d       	ldd	r24, Z+30	; 0x1e
    395c:	81 50       	subi	r24, 0x01	; 1
    395e:	86 8f       	std	Z+30, r24	; 0x1e
    3960:	86 8d       	ldd	r24, Z+30	; 0x1e
    3962:	18 16       	cp	r1, r24
    3964:	54 f3       	brlt	.-44     	; 0x393a <xQueueGenericSend+0x2d4>
    3966:	8f ef       	ldi	r24, 0xFF	; 255
    3968:	f8 01       	movw	r30, r16
    396a:	86 8f       	std	Z+30, r24	; 0x1e
    396c:	0f 90       	pop	r0
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	0f 92       	push	r0
    3976:	85 8d       	ldd	r24, Z+29	; 0x1d
    3978:	18 16       	cp	r1, r24
    397a:	d4 f4       	brge	.+52     	; 0x39b0 <xQueueGenericSend+0x34a>
    397c:	80 85       	ldd	r24, Z+8	; 0x08
    397e:	81 11       	cpse	r24, r1
    3980:	06 c0       	rjmp	.+12     	; 0x398e <xQueueGenericSend+0x328>
    3982:	16 c0       	rjmp	.+44     	; 0x39b0 <xQueueGenericSend+0x34a>
    3984:	f8 01       	movw	r30, r16
    3986:	80 85       	ldd	r24, Z+8	; 0x08
    3988:	81 11       	cpse	r24, r1
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <xQueueGenericSend+0x330>
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <xQueueGenericSend+0x34a>
    398e:	78 01       	movw	r14, r16
    3990:	f8 e0       	ldi	r31, 0x08	; 8
    3992:	ef 0e       	add	r14, r31
    3994:	f1 1c       	adc	r15, r1
    3996:	c7 01       	movw	r24, r14
    3998:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    399c:	81 11       	cpse	r24, r1
    399e:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    39a2:	f8 01       	movw	r30, r16
    39a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    39a6:	81 50       	subi	r24, 0x01	; 1
    39a8:	85 8f       	std	Z+29, r24	; 0x1d
    39aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    39ac:	18 16       	cp	r1, r24
    39ae:	54 f3       	brlt	.-44     	; 0x3984 <xQueueGenericSend+0x31e>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	f8 01       	movw	r30, r16
    39b4:	85 8f       	std	Z+29, r24	; 0x1d
    39b6:	0f 90       	pop	r0
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	0e c0       	rjmp	.+28     	; 0x39de <xQueueGenericSend+0x378>
    39c2:	f8 01       	movw	r30, r16
    39c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    39c6:	44 23       	and	r20, r20
    39c8:	09 f4       	brne	.+2      	; 0x39cc <xQueueGenericSend+0x366>
    39ca:	82 ce       	rjmp	.-764    	; 0x36d0 <xQueueGenericSend+0x6a>
    39cc:	b2 ce       	rjmp	.-668    	; 0x3732 <xQueueGenericSend+0xcc>
    39ce:	f8 01       	movw	r30, r16
    39d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	82 8f       	std	Z+26, r24	; 0x1a
    39d6:	81 89       	ldd	r24, Z+17	; 0x11
    39d8:	81 11       	cpse	r24, r1
    39da:	d5 ce       	rjmp	.-598    	; 0x3786 <xQueueGenericSend+0x120>
    39dc:	de ce       	rjmp	.-580    	; 0x379a <xQueueGenericSend+0x134>
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	8f 90       	pop	r8
    3a00:	7f 90       	pop	r7
    3a02:	6f 90       	pop	r6
    3a04:	08 95       	ret

00003a06 <xQueueGive>:
    3a06:	9f 92       	push	r9
    3a08:	af 92       	push	r10
    3a0a:	bf 92       	push	r11
    3a0c:	cf 92       	push	r12
    3a0e:	df 92       	push	r13
    3a10:	ef 92       	push	r14
    3a12:	ff 92       	push	r15
    3a14:	0f 93       	push	r16
    3a16:	1f 93       	push	r17
    3a18:	cf 93       	push	r28
    3a1a:	df 93       	push	r29
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <xQueueGive+0x18>
    3a1e:	1f 92       	push	r1
    3a20:	1f 92       	push	r1
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	8c 01       	movw	r16, r24
    3a28:	7d 83       	std	Y+5, r23	; 0x05
    3a2a:	6c 83       	std	Y+4, r22	; 0x04
    3a2c:	a1 2c       	mov	r10, r1
    3a2e:	99 24       	eor	r9, r9
    3a30:	93 94       	inc	r9
    3a32:	bb 24       	eor	r11, r11
    3a34:	ba 94       	dec	r11
    3a36:	7c 01       	movw	r14, r24
    3a38:	88 e0       	ldi	r24, 0x08	; 8
    3a3a:	e8 0e       	add	r14, r24
    3a3c:	f1 1c       	adc	r15, r1
    3a3e:	68 01       	movw	r12, r16
    3a40:	e1 e1       	ldi	r30, 0x11	; 17
    3a42:	ce 0e       	add	r12, r30
    3a44:	d1 1c       	adc	r13, r1
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	0f 92       	push	r0
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a50:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a52:	98 17       	cp	r25, r24
    3a54:	00 f5       	brcc	.+64     	; 0x3a96 <xQueueGive+0x90>
    3a56:	80 81       	ld	r24, Z
    3a58:	91 81       	ldd	r25, Z+1	; 0x01
    3a5a:	89 2b       	or	r24, r25
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <xQueueGive+0x5a>
    3a5e:	2b c1       	rjmp	.+598    	; 0x3cb6 <xQueueGive+0x2b0>
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	0e 94 ef 2b 	call	0x57de	; 0x57de <xTaskPriorityDisinherit>
    3a68:	f8 01       	movw	r30, r16
    3a6a:	13 82       	std	Z+3, r1	; 0x03
    3a6c:	12 82       	std	Z+2, r1	; 0x02
    3a6e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a70:	9f 5f       	subi	r25, 0xFF	; 255
    3a72:	92 8f       	std	Z+26, r25	; 0x1a
    3a74:	91 89       	ldd	r25, Z+17	; 0x11
    3a76:	99 23       	and	r25, r25
    3a78:	41 f0       	breq	.+16     	; 0x3a8a <xQueueGive+0x84>
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	41 96       	adiw	r24, 0x11	; 17
    3a7e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3a82:	81 30       	cpi	r24, 0x01	; 1
    3a84:	21 f4       	brne	.+8      	; 0x3a8e <xQueueGive+0x88>
    3a86:	40 db       	rcall	.-2432   	; 0x3108 <vPortYield>
    3a88:	02 c0       	rjmp	.+4      	; 0x3a8e <xQueueGive+0x88>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	3d db       	rcall	.-2438   	; 0x3108 <vPortYield>
    3a8e:	0f 90       	pop	r0
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	18 c1       	rjmp	.+560    	; 0x3cc6 <xQueueGive+0x2c0>
    3a96:	8c 81       	ldd	r24, Y+4	; 0x04
    3a98:	9d 81       	ldd	r25, Y+5	; 0x05
    3a9a:	89 2b       	or	r24, r25
    3a9c:	21 f4       	brne	.+8      	; 0x3aa6 <xQueueGive+0xa0>
    3a9e:	0f 90       	pop	r0
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	10 c1       	rjmp	.+544    	; 0x3cc6 <xQueueGive+0x2c0>
    3aa6:	a1 10       	cpse	r10, r1
    3aa8:	05 c0       	rjmp	.+10     	; 0x3ab4 <xQueueGive+0xae>
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	0e 94 3e 2b 	call	0x567c	; 0x567c <vTaskSetTimeOutState>
    3ab2:	a9 2c       	mov	r10, r9
    3ab4:	0f 90       	pop	r0
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	0f 92       	push	r0
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <xQueueGive+0xc6>
    3aca:	15 8e       	std	Z+29, r1	; 0x1d
    3acc:	f8 01       	movw	r30, r16
    3ace:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <xQueueGive+0xd0>
    3ad4:	16 8e       	std	Z+30, r1	; 0x1e
    3ad6:	0f 90       	pop	r0
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	be 01       	movw	r22, r28
    3adc:	6c 5f       	subi	r22, 0xFC	; 252
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	01 96       	adiw	r24, 0x01	; 1
    3ae4:	0e 94 49 2b 	call	0x5692	; 0x5692 <xTaskCheckForTimeOut>
    3ae8:	81 11       	cpse	r24, r1
    3aea:	96 c0       	rjmp	.+300    	; 0x3c18 <xQueueGive+0x212>
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	0f 92       	push	r0
    3af2:	f8 01       	movw	r30, r16
    3af4:	92 8d       	ldd	r25, Z+26	; 0x1a
    3af6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3af8:	0f 90       	pop	r0
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	98 13       	cpse	r25, r24
    3afe:	4a c0       	rjmp	.+148    	; 0x3b94 <xQueueGive+0x18e>
    3b00:	6c 81       	ldd	r22, Y+4	; 0x04
    3b02:	7d 81       	ldd	r23, Y+5	; 0x05
    3b04:	c7 01       	movw	r24, r14
    3b06:	0e 94 9b 2a 	call	0x5536	; 0x5536 <vTaskPlaceOnEventList>
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	0f 92       	push	r0
    3b10:	f8 01       	movw	r30, r16
    3b12:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b14:	18 16       	cp	r1, r24
    3b16:	ac f4       	brge	.+42     	; 0x3b42 <xQueueGive+0x13c>
    3b18:	81 89       	ldd	r24, Z+17	; 0x11
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <xQueueGive+0x122>
    3b1e:	11 c0       	rjmp	.+34     	; 0x3b42 <xQueueGive+0x13c>
    3b20:	f8 01       	movw	r30, r16
    3b22:	81 89       	ldd	r24, Z+17	; 0x11
    3b24:	88 23       	and	r24, r24
    3b26:	69 f0       	breq	.+26     	; 0x3b42 <xQueueGive+0x13c>
    3b28:	c6 01       	movw	r24, r12
    3b2a:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3b2e:	81 11       	cpse	r24, r1
    3b30:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3b34:	f8 01       	movw	r30, r16
    3b36:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b38:	81 50       	subi	r24, 0x01	; 1
    3b3a:	86 8f       	std	Z+30, r24	; 0x1e
    3b3c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b3e:	18 16       	cp	r1, r24
    3b40:	7c f3       	brlt	.-34     	; 0x3b20 <xQueueGive+0x11a>
    3b42:	f8 01       	movw	r30, r16
    3b44:	b6 8e       	std	Z+30, r11	; 0x1e
    3b46:	0f 90       	pop	r0
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	0f 92       	push	r0
    3b50:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b52:	18 16       	cp	r1, r24
    3b54:	ac f4       	brge	.+42     	; 0x3b80 <xQueueGive+0x17a>
    3b56:	80 85       	ldd	r24, Z+8	; 0x08
    3b58:	81 11       	cpse	r24, r1
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <xQueueGive+0x160>
    3b5c:	11 c0       	rjmp	.+34     	; 0x3b80 <xQueueGive+0x17a>
    3b5e:	f8 01       	movw	r30, r16
    3b60:	80 85       	ldd	r24, Z+8	; 0x08
    3b62:	88 23       	and	r24, r24
    3b64:	69 f0       	breq	.+26     	; 0x3b80 <xQueueGive+0x17a>
    3b66:	c7 01       	movw	r24, r14
    3b68:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3b72:	f8 01       	movw	r30, r16
    3b74:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b76:	81 50       	subi	r24, 0x01	; 1
    3b78:	85 8f       	std	Z+29, r24	; 0x1d
    3b7a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b7c:	18 16       	cp	r1, r24
    3b7e:	7c f3       	brlt	.-34     	; 0x3b5e <xQueueGive+0x158>
    3b80:	f8 01       	movw	r30, r16
    3b82:	b5 8e       	std	Z+29, r11	; 0x1d
    3b84:	0f 90       	pop	r0
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3b8c:	81 11       	cpse	r24, r1
    3b8e:	5b cf       	rjmp	.-330    	; 0x3a46 <xQueueGive+0x40>
    3b90:	bb da       	rcall	.-2698   	; 0x3108 <vPortYield>
    3b92:	59 cf       	rjmp	.-334    	; 0x3a46 <xQueueGive+0x40>
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	0f 92       	push	r0
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b9e:	18 16       	cp	r1, r24
    3ba0:	ac f4       	brge	.+42     	; 0x3bcc <xQueueGive+0x1c6>
    3ba2:	81 89       	ldd	r24, Z+17	; 0x11
    3ba4:	81 11       	cpse	r24, r1
    3ba6:	05 c0       	rjmp	.+10     	; 0x3bb2 <xQueueGive+0x1ac>
    3ba8:	11 c0       	rjmp	.+34     	; 0x3bcc <xQueueGive+0x1c6>
    3baa:	f8 01       	movw	r30, r16
    3bac:	81 89       	ldd	r24, Z+17	; 0x11
    3bae:	88 23       	and	r24, r24
    3bb0:	69 f0       	breq	.+26     	; 0x3bcc <xQueueGive+0x1c6>
    3bb2:	c6 01       	movw	r24, r12
    3bb4:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3bb8:	81 11       	cpse	r24, r1
    3bba:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3bbe:	f8 01       	movw	r30, r16
    3bc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bc2:	81 50       	subi	r24, 0x01	; 1
    3bc4:	86 8f       	std	Z+30, r24	; 0x1e
    3bc6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bc8:	18 16       	cp	r1, r24
    3bca:	7c f3       	brlt	.-34     	; 0x3baa <xQueueGive+0x1a4>
    3bcc:	f8 01       	movw	r30, r16
    3bce:	b6 8e       	std	Z+30, r11	; 0x1e
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	f8 94       	cli
    3bd8:	0f 92       	push	r0
    3bda:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bdc:	18 16       	cp	r1, r24
    3bde:	ac f4       	brge	.+42     	; 0x3c0a <xQueueGive+0x204>
    3be0:	80 85       	ldd	r24, Z+8	; 0x08
    3be2:	81 11       	cpse	r24, r1
    3be4:	05 c0       	rjmp	.+10     	; 0x3bf0 <xQueueGive+0x1ea>
    3be6:	11 c0       	rjmp	.+34     	; 0x3c0a <xQueueGive+0x204>
    3be8:	f8 01       	movw	r30, r16
    3bea:	80 85       	ldd	r24, Z+8	; 0x08
    3bec:	88 23       	and	r24, r24
    3bee:	69 f0       	breq	.+26     	; 0x3c0a <xQueueGive+0x204>
    3bf0:	c7 01       	movw	r24, r14
    3bf2:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c00:	81 50       	subi	r24, 0x01	; 1
    3c02:	85 8f       	std	Z+29, r24	; 0x1d
    3c04:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c06:	18 16       	cp	r1, r24
    3c08:	7c f3       	brlt	.-34     	; 0x3be8 <xQueueGive+0x1e2>
    3c0a:	f8 01       	movw	r30, r16
    3c0c:	b5 8e       	std	Z+29, r11	; 0x1d
    3c0e:	0f 90       	pop	r0
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3c16:	17 cf       	rjmp	.-466    	; 0x3a46 <xQueueGive+0x40>
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	0f 92       	push	r0
    3c1e:	f8 01       	movw	r30, r16
    3c20:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c22:	18 16       	cp	r1, r24
    3c24:	d4 f4       	brge	.+52     	; 0x3c5a <xQueueGive+0x254>
    3c26:	81 89       	ldd	r24, Z+17	; 0x11
    3c28:	81 11       	cpse	r24, r1
    3c2a:	06 c0       	rjmp	.+12     	; 0x3c38 <xQueueGive+0x232>
    3c2c:	16 c0       	rjmp	.+44     	; 0x3c5a <xQueueGive+0x254>
    3c2e:	f8 01       	movw	r30, r16
    3c30:	81 89       	ldd	r24, Z+17	; 0x11
    3c32:	81 11       	cpse	r24, r1
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <xQueueGive+0x23a>
    3c36:	11 c0       	rjmp	.+34     	; 0x3c5a <xQueueGive+0x254>
    3c38:	78 01       	movw	r14, r16
    3c3a:	f1 e1       	ldi	r31, 0x11	; 17
    3c3c:	ef 0e       	add	r14, r31
    3c3e:	f1 1c       	adc	r15, r1
    3c40:	c7 01       	movw	r24, r14
    3c42:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3c46:	81 11       	cpse	r24, r1
    3c48:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c50:	81 50       	subi	r24, 0x01	; 1
    3c52:	86 8f       	std	Z+30, r24	; 0x1e
    3c54:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c56:	18 16       	cp	r1, r24
    3c58:	54 f3       	brlt	.-44     	; 0x3c2e <xQueueGive+0x228>
    3c5a:	8f ef       	ldi	r24, 0xFF	; 255
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	86 8f       	std	Z+30, r24	; 0x1e
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	0f 92       	push	r0
    3c6a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c6c:	18 16       	cp	r1, r24
    3c6e:	d4 f4       	brge	.+52     	; 0x3ca4 <xQueueGive+0x29e>
    3c70:	80 85       	ldd	r24, Z+8	; 0x08
    3c72:	81 11       	cpse	r24, r1
    3c74:	06 c0       	rjmp	.+12     	; 0x3c82 <xQueueGive+0x27c>
    3c76:	16 c0       	rjmp	.+44     	; 0x3ca4 <xQueueGive+0x29e>
    3c78:	f8 01       	movw	r30, r16
    3c7a:	80 85       	ldd	r24, Z+8	; 0x08
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	05 c0       	rjmp	.+10     	; 0x3c8a <xQueueGive+0x284>
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <xQueueGive+0x29e>
    3c82:	78 01       	movw	r14, r16
    3c84:	f8 e0       	ldi	r31, 0x08	; 8
    3c86:	ef 0e       	add	r14, r31
    3c88:	f1 1c       	adc	r15, r1
    3c8a:	c7 01       	movw	r24, r14
    3c8c:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3c90:	81 11       	cpse	r24, r1
    3c92:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
    3c96:	f8 01       	movw	r30, r16
    3c98:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c9a:	81 50       	subi	r24, 0x01	; 1
    3c9c:	85 8f       	std	Z+29, r24	; 0x1d
    3c9e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ca0:	18 16       	cp	r1, r24
    3ca2:	54 f3       	brlt	.-44     	; 0x3c78 <xQueueGive+0x272>
    3ca4:	8f ef       	ldi	r24, 0xFF	; 255
    3ca6:	f8 01       	movw	r30, r16
    3ca8:	85 8f       	std	Z+29, r24	; 0x1d
    3caa:	0f 90       	pop	r0
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <xQueueGive+0x2c0>
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cba:	8f 5f       	subi	r24, 0xFF	; 255
    3cbc:	82 8f       	std	Z+26, r24	; 0x1a
    3cbe:	81 89       	ldd	r24, Z+17	; 0x11
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	db ce       	rjmp	.-586    	; 0x3a7a <xQueueGive+0x74>
    3cc4:	e4 ce       	rjmp	.-568    	; 0x3a8e <xQueueGive+0x88>
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	df 91       	pop	r29
    3cd2:	cf 91       	pop	r28
    3cd4:	1f 91       	pop	r17
    3cd6:	0f 91       	pop	r16
    3cd8:	ff 90       	pop	r15
    3cda:	ef 90       	pop	r14
    3cdc:	df 90       	pop	r13
    3cde:	cf 90       	pop	r12
    3ce0:	bf 90       	pop	r11
    3ce2:	af 90       	pop	r10
    3ce4:	9f 90       	pop	r9
    3ce6:	08 95       	ret

00003ce8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3cee:	92 8d       	ldd	r25, Z+26	; 0x1a
    3cf0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3cf2:	98 17       	cp	r25, r24
    3cf4:	d0 f4       	brcc	.+52     	; 0x3d2a <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cf8:	8f 5f       	subi	r24, 0xFF	; 255
    3cfa:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3cfc:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    3d00:	79 f4       	brne	.+30     	; 0x3d20 <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d02:	81 89       	ldd	r24, Z+17	; 0x11
    3d04:	88 23       	and	r24, r24
    3d06:	99 f0       	breq	.+38     	; 0x3d2e <xQueueGiveFromISR+0x46>
    3d08:	eb 01       	movw	r28, r22
    3d0a:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d0c:	41 96       	adiw	r24, 0x11	; 17
    3d0e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3d12:	88 23       	and	r24, r24
    3d14:	71 f0       	breq	.+28     	; 0x3d32 <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3d16:	20 97       	sbiw	r28, 0x00	; 0
    3d18:	71 f0       	breq	.+28     	; 0x3d36 <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	88 83       	st	Y, r24
    3d1e:	0c c0       	rjmp	.+24     	; 0x3d38 <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3d20:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d22:	8f 5f       	subi	r24, 0xFF	; 255
    3d24:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	07 c0       	rjmp	.+14     	; 0x3d38 <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	05 c0       	rjmp	.+10     	; 0x3d38 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <xQueueGiveFromISR+0x50>
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <xQueueGiveFromISR+0x50>
    3d36:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

00003d3e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3d3e:	6f 92       	push	r6
    3d40:	7f 92       	push	r7
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <xQueueGenericReceive+0x1e>
    3d5c:	1f 92       	push	r1
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	8c 01       	movw	r16, r24
    3d66:	5b 01       	movw	r10, r22
    3d68:	5d 83       	std	Y+5, r21	; 0x05
    3d6a:	4c 83       	std	Y+4, r20	; 0x04
    3d6c:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3d6e:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3d70:	77 24       	eor	r7, r7
    3d72:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d74:	99 24       	eor	r9, r9
    3d76:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d78:	6c 01       	movw	r12, r24
    3d7a:	88 e0       	ldi	r24, 0x08	; 8
    3d7c:	c8 0e       	add	r12, r24
    3d7e:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d80:	78 01       	movw	r14, r16
    3d82:	e1 e1       	ldi	r30, 0x11	; 17
    3d84:	ee 0e       	add	r14, r30
    3d86:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3d8e:	f8 01       	movw	r30, r16
    3d90:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d92:	88 23       	and	r24, r24
    3d94:	09 f4       	brne	.+2      	; 0x3d98 <xQueueGenericReceive+0x5a>
    3d96:	45 c0       	rjmp	.+138    	; 0x3e22 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3d98:	e6 80       	ldd	r14, Z+6	; 0x06
    3d9a:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3d9c:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d9e:	44 23       	and	r20, r20
    3da0:	a9 f0       	breq	.+42     	; 0x3dcc <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	c7 01       	movw	r24, r14
    3da6:	84 0f       	add	r24, r20
    3da8:	95 1f       	adc	r25, r21
    3daa:	97 83       	std	Z+7, r25	; 0x07
    3dac:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3dae:	22 81       	ldd	r18, Z+2	; 0x02
    3db0:	33 81       	ldd	r19, Z+3	; 0x03
    3db2:	82 17       	cp	r24, r18
    3db4:	93 07       	cpc	r25, r19
    3db6:	20 f0       	brcs	.+8      	; 0x3dc0 <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	97 83       	std	Z+7, r25	; 0x07
    3dbe:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	66 81       	ldd	r22, Z+6	; 0x06
    3dc4:	77 81       	ldd	r23, Z+7	; 0x07
    3dc6:	c5 01       	movw	r24, r10
    3dc8:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3dcc:	61 10       	cpse	r6, r1
    3dce:	19 c0       	rjmp	.+50     	; 0x3e02 <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3dd0:	f8 01       	movw	r30, r16
    3dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dd4:	81 50       	subi	r24, 0x01	; 1
    3dd6:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	89 2b       	or	r24, r25
    3dde:	29 f4       	brne	.+10     	; 0x3dea <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3de0:	0e 94 2f 2c 	call	0x585e	; 0x585e <pvTaskIncrementMutexHeldCount>
    3de4:	f8 01       	movw	r30, r16
    3de6:	93 83       	std	Z+3, r25	; 0x03
    3de8:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dea:	f8 01       	movw	r30, r16
    3dec:	80 85       	ldd	r24, Z+8	; 0x08
    3dee:	88 23       	and	r24, r24
    3df0:	a1 f0       	breq	.+40     	; 0x3e1a <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3df2:	c8 01       	movw	r24, r16
    3df4:	08 96       	adiw	r24, 0x08	; 8
    3df6:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3dfa:	81 30       	cpi	r24, 0x01	; 1
    3dfc:	71 f4       	brne	.+28     	; 0x3e1a <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3dfe:	84 d9       	rcall	.-3320   	; 0x3108 <vPortYield>
    3e00:	0c c0       	rjmp	.+24     	; 0x3e1a <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3e02:	f8 01       	movw	r30, r16
    3e04:	f7 82       	std	Z+7, r15	; 0x07
    3e06:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3e08:	81 89       	ldd	r24, Z+17	; 0x11
    3e0a:	88 23       	and	r24, r24
    3e0c:	31 f0       	breq	.+12     	; 0x3e1a <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3e0e:	c8 01       	movw	r24, r16
    3e10:	41 96       	adiw	r24, 0x11	; 17
    3e12:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3e16:	81 11       	cpse	r24, r1
    3e18:	77 d9       	rcall	.-3346   	; 0x3108 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	1a c1       	rjmp	.+564    	; 0x4056 <xQueueGenericReceive+0x318>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3e22:	8c 81       	ldd	r24, Y+4	; 0x04
    3e24:	9d 81       	ldd	r25, Y+5	; 0x05
    3e26:	89 2b       	or	r24, r25
    3e28:	21 f4       	brne	.+8      	; 0x3e32 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3e2a:	0f 90       	pop	r0
    3e2c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	12 c1       	rjmp	.+548    	; 0x4056 <xQueueGenericReceive+0x318>
				}
				else if( xEntryTimeSet == pdFALSE )
    3e32:	81 10       	cpse	r8, r1
    3e34:	05 c0       	rjmp	.+10     	; 0x3e40 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3e36:	ce 01       	movw	r24, r28
    3e38:	01 96       	adiw	r24, 0x01	; 1
    3e3a:	0e 94 3e 2b 	call	0x567c	; 0x567c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3e3e:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3e40:	0f 90       	pop	r0
    3e42:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3e44:	0e 94 07 28 	call	0x500e	; 0x500e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	0f 92       	push	r0
    3e4e:	f8 01       	movw	r30, r16
    3e50:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e52:	8f 3f       	cpi	r24, 0xFF	; 255
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <xQueueGenericReceive+0x11a>
    3e56:	15 8e       	std	Z+29, r1	; 0x1d
    3e58:	f8 01       	movw	r30, r16
    3e5a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <xQueueGenericReceive+0x124>
    3e60:	16 8e       	std	Z+30, r1	; 0x1e
    3e62:	0f 90       	pop	r0
    3e64:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e66:	be 01       	movw	r22, r28
    3e68:	6c 5f       	subi	r22, 0xFC	; 252
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	ce 01       	movw	r24, r28
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	0e 94 49 2b 	call	0x5692	; 0x5692 <xTaskCheckForTimeOut>
    3e74:	81 11       	cpse	r24, r1
    3e76:	a2 c0       	rjmp	.+324    	; 0x3fbc <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3e7e:	f8 01       	movw	r30, r16
    3e80:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3e82:	0f 90       	pop	r0
    3e84:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e86:	81 11       	cpse	r24, r1
    3e88:	57 c0       	rjmp	.+174    	; 0x3f38 <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3e8a:	80 81       	ld	r24, Z
    3e8c:	91 81       	ldd	r25, Z+1	; 0x01
    3e8e:	89 2b       	or	r24, r25
    3e90:	49 f4       	brne	.+18     	; 0x3ea4 <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	0e 94 8d 2b 	call	0x571a	; 0x571a <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3ea0:	0f 90       	pop	r0
    3ea2:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3ea4:	6c 81       	ldd	r22, Y+4	; 0x04
    3ea6:	7d 81       	ldd	r23, Y+5	; 0x05
    3ea8:	c7 01       	movw	r24, r14
    3eaa:	0e 94 9b 2a 	call	0x5536	; 0x5536 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3eb4:	f8 01       	movw	r30, r16
    3eb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3eb8:	18 16       	cp	r1, r24
    3eba:	ac f4       	brge	.+42     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ebc:	81 89       	ldd	r24, Z+17	; 0x11
    3ebe:	81 11       	cpse	r24, r1
    3ec0:	05 c0       	rjmp	.+10     	; 0x3ecc <xQueueGenericReceive+0x18e>
    3ec2:	11 c0       	rjmp	.+34     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	81 89       	ldd	r24, Z+17	; 0x11
    3ec8:	88 23       	and	r24, r24
    3eca:	69 f0       	breq	.+26     	; 0x3ee6 <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ecc:	c7 01       	movw	r24, r14
    3ece:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3ed2:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3ed4:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ed8:	f8 01       	movw	r30, r16
    3eda:	86 8d       	ldd	r24, Z+30	; 0x1e
    3edc:	81 50       	subi	r24, 0x01	; 1
    3ede:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ee0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ee2:	18 16       	cp	r1, r24
    3ee4:	7c f3       	brlt	.-34     	; 0x3ec4 <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3ee6:	f8 01       	movw	r30, r16
    3ee8:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3eea:	0f 90       	pop	r0
    3eec:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3ef4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ef6:	18 16       	cp	r1, r24
    3ef8:	ac f4       	brge	.+42     	; 0x3f24 <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3efa:	80 85       	ldd	r24, Z+8	; 0x08
    3efc:	81 11       	cpse	r24, r1
    3efe:	05 c0       	rjmp	.+10     	; 0x3f0a <xQueueGenericReceive+0x1cc>
    3f00:	11 c0       	rjmp	.+34     	; 0x3f24 <xQueueGenericReceive+0x1e6>
    3f02:	f8 01       	movw	r30, r16
    3f04:	80 85       	ldd	r24, Z+8	; 0x08
    3f06:	88 23       	and	r24, r24
    3f08:	69 f0       	breq	.+26     	; 0x3f24 <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f0a:	c6 01       	movw	r24, r12
    3f0c:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3f10:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3f12:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3f16:	f8 01       	movw	r30, r16
    3f18:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f1a:	81 50       	subi	r24, 0x01	; 1
    3f1c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3f1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f20:	18 16       	cp	r1, r24
    3f22:	7c f3       	brlt	.-34     	; 0x3f02 <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3f24:	f8 01       	movw	r30, r16
    3f26:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3f28:	0f 90       	pop	r0
    3f2a:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3f2c:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3f30:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3f32:	2a cf       	rjmp	.-428    	; 0x3d88 <xQueueGenericReceive+0x4a>
    3f34:	e9 d8       	rcall	.-3630   	; 0x3108 <vPortYield>
    3f36:	28 cf       	rjmp	.-432    	; 0x3d88 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	f8 94       	cli
    3f3c:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3f3e:	f8 01       	movw	r30, r16
    3f40:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f42:	18 16       	cp	r1, r24
    3f44:	ac f4       	brge	.+42     	; 0x3f70 <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3f46:	81 89       	ldd	r24, Z+17	; 0x11
    3f48:	81 11       	cpse	r24, r1
    3f4a:	05 c0       	rjmp	.+10     	; 0x3f56 <xQueueGenericReceive+0x218>
    3f4c:	11 c0       	rjmp	.+34     	; 0x3f70 <xQueueGenericReceive+0x232>
    3f4e:	f8 01       	movw	r30, r16
    3f50:	81 89       	ldd	r24, Z+17	; 0x11
    3f52:	88 23       	and	r24, r24
    3f54:	69 f0       	breq	.+26     	; 0x3f70 <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3f56:	c7 01       	movw	r24, r14
    3f58:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3f5c:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3f5e:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3f62:	f8 01       	movw	r30, r16
    3f64:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f66:	81 50       	subi	r24, 0x01	; 1
    3f68:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3f6a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f6c:	18 16       	cp	r1, r24
    3f6e:	7c f3       	brlt	.-34     	; 0x3f4e <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3f70:	f8 01       	movw	r30, r16
    3f72:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3f74:	0f 90       	pop	r0
    3f76:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3f7e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f80:	18 16       	cp	r1, r24
    3f82:	ac f4       	brge	.+42     	; 0x3fae <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f84:	80 85       	ldd	r24, Z+8	; 0x08
    3f86:	81 11       	cpse	r24, r1
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <xQueueGenericReceive+0x256>
    3f8a:	11 c0       	rjmp	.+34     	; 0x3fae <xQueueGenericReceive+0x270>
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	80 85       	ldd	r24, Z+8	; 0x08
    3f90:	88 23       	and	r24, r24
    3f92:	69 f0       	breq	.+26     	; 0x3fae <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f94:	c6 01       	movw	r24, r12
    3f96:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3f9a:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3f9c:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3fa0:	f8 01       	movw	r30, r16
    3fa2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3fa4:	81 50       	subi	r24, 0x01	; 1
    3fa6:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3fa8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3faa:	18 16       	cp	r1, r24
    3fac:	7c f3       	brlt	.-34     	; 0x3f8c <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3fae:	f8 01       	movw	r30, r16
    3fb0:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3fb2:	0f 90       	pop	r0
    3fb4:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3fb6:	0e 94 0d 28 	call	0x501a	; 0x501a <xTaskResumeAll>
    3fba:	e6 ce       	rjmp	.-564    	; 0x3d88 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3fc2:	f8 01       	movw	r30, r16
    3fc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fc6:	18 16       	cp	r1, r24
    3fc8:	d4 f4       	brge	.+52     	; 0x3ffe <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fca:	81 89       	ldd	r24, Z+17	; 0x11
    3fcc:	81 11       	cpse	r24, r1
    3fce:	06 c0       	rjmp	.+12     	; 0x3fdc <xQueueGenericReceive+0x29e>
    3fd0:	16 c0       	rjmp	.+44     	; 0x3ffe <xQueueGenericReceive+0x2c0>
    3fd2:	f8 01       	movw	r30, r16
    3fd4:	81 89       	ldd	r24, Z+17	; 0x11
    3fd6:	81 11       	cpse	r24, r1
    3fd8:	05 c0       	rjmp	.+10     	; 0x3fe4 <xQueueGenericReceive+0x2a6>
    3fda:	11 c0       	rjmp	.+34     	; 0x3ffe <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3fdc:	78 01       	movw	r14, r16
    3fde:	f1 e1       	ldi	r31, 0x11	; 17
    3fe0:	ef 0e       	add	r14, r31
    3fe2:	f1 1c       	adc	r15, r1
    3fe4:	c7 01       	movw	r24, r14
    3fe6:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    3fea:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3fec:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ff4:	81 50       	subi	r24, 0x01	; 1
    3ff6:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ff8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ffa:	18 16       	cp	r1, r24
    3ffc:	54 f3       	brlt	.-44     	; 0x3fd2 <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3ffe:	8f ef       	ldi	r24, 0xFF	; 255
    4000:	f8 01       	movw	r30, r16
    4002:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    4004:	0f 90       	pop	r0
    4006:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4008:	0f b6       	in	r0, 0x3f	; 63
    400a:	f8 94       	cli
    400c:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    400e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4010:	18 16       	cp	r1, r24
    4012:	d4 f4       	brge	.+52     	; 0x4048 <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4014:	80 85       	ldd	r24, Z+8	; 0x08
    4016:	81 11       	cpse	r24, r1
    4018:	06 c0       	rjmp	.+12     	; 0x4026 <xQueueGenericReceive+0x2e8>
    401a:	16 c0       	rjmp	.+44     	; 0x4048 <xQueueGenericReceive+0x30a>
    401c:	f8 01       	movw	r30, r16
    401e:	80 85       	ldd	r24, Z+8	; 0x08
    4020:	81 11       	cpse	r24, r1
    4022:	05 c0       	rjmp	.+10     	; 0x402e <xQueueGenericReceive+0x2f0>
    4024:	11 c0       	rjmp	.+34     	; 0x4048 <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4026:	78 01       	movw	r14, r16
    4028:	f8 e0       	ldi	r31, 0x08	; 8
    402a:	ef 0e       	add	r14, r31
    402c:	f1 1c       	adc	r15, r1
    402e:	c7 01       	movw	r24, r14
    4030:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <xTaskRemoveFromEventList>
    4034:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    4036:	0e 94 84 2b 	call	0x5708	; 0x5708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    403a:	f8 01       	movw	r30, r16
    403c:	85 8d       	ldd	r24, Z+29	; 0x1d
    403e:	81 50       	subi	r24, 0x01	; 1
    4040:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4042:	85 8d       	ldd	r24, Z+29	; 0x1d
    4044:	18 16       	cp	r1, r24
    4046:	54 f3       	brlt	.-44     	; 0x401c <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	f8 01       	movw	r30, r16
	}
	taskEXIT_CRITICAL();
    404c:	85 8f       	std	Z+29, r24	; 0x1d
    404e:	0f 90       	pop	r0
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	e3 d7       	rcall	.+4038   	; 0x501a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4054:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	0f 91       	pop	r16
    4068:	ff 90       	pop	r15
    406a:	ef 90       	pop	r14
    406c:	df 90       	pop	r13
    406e:	cf 90       	pop	r12
    4070:	bf 90       	pop	r11
    4072:	af 90       	pop	r10
    4074:	9f 90       	pop	r9
    4076:	8f 90       	pop	r8
    4078:	7f 90       	pop	r7
    407a:	6f 90       	pop	r6
    407c:	08 95       	ret

0000407e <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    407e:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	11 f4       	brne	.+4      	; 0x4088 <server_receiver+0xa>
      gHandshook = 0;
    4084:	10 92 10 1a 	sts	0x1A10, r1	; 0x801a10 <gHandshook>
  }
  memcpy(&message_in, data, len);
    4088:	bc 01       	movw	r22, r24
    408a:	85 e8       	ldi	r24, 0x85	; 133
    408c:	9b e1       	ldi	r25, 0x1B	; 27
    408e:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	80 91 81 1b 	lds	r24, 0x1B81	; 0x801b81 <xCommandReadyBSem>
    409a:	90 91 82 1b 	lds	r25, 0x1B82	; 0x801b82 <xCommandReadyBSem+0x1>
    409e:	b3 cc       	rjmp	.-1690   	; 0x3a06 <xQueueGive>
    40a0:	08 95       	ret

000040a2 <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    40a2:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <connected>
    40a6:	81 11       	cpse	r24, r1
    40a8:	04 c0       	rjmp	.+8      	; 0x40b2 <server_communication_init+0x10>
  server_connection = arq_new_connection();
    40aa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    40ae:	80 93 bb 1b 	sts	0x1BBB, r24	; 0x801bbb <server_connection>
    40b2:	08 95       	ret

000040b4 <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    40b4:	28 ee       	ldi	r18, 0xE8	; 232
    40b6:	33 e0       	ldi	r19, 0x03	; 3
    40b8:	4f e3       	ldi	r20, 0x3F	; 63
    40ba:	50 e2       	ldi	r21, 0x20	; 32
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    40c2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    40c6:	80 93 1d 1a 	sts	0x1A1D, r24	; 0x801a1d <connected>
  return connected;
}
    40ca:	08 95       	ret

000040cc <send_handshake>:

uint8_t send_handshake(void) {
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	ec 97       	sbiw	r28, 0x3c	; 60
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    40e0:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <connected>
    40e4:	88 23       	and	r24, r24
    40e6:	09 f4       	brne	.+2      	; 0x40ea <send_handshake+0x1e>
    40e8:	4e c0       	rjmp	.+156    	; 0x4186 <send_handshake+0xba>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    40ea:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    40ec:	87 e0       	ldi	r24, 0x07	; 7
    40ee:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    40f0:	88 e0       	ldi	r24, 0x08	; 8
    40f2:	ee e6       	ldi	r30, 0x6E	; 110
    40f4:	f6 e0       	ldi	r31, 0x06	; 6
    40f6:	de 01       	movw	r26, r28
    40f8:	13 96       	adiw	r26, 0x03	; 3
    40fa:	01 90       	ld	r0, Z+
    40fc:	0d 92       	st	X+, r0
    40fe:	8a 95       	dec	r24
    4100:	e1 f7       	brne	.-8      	; 0x40fa <send_handshake+0x2e>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    4102:	24 eb       	ldi	r18, 0xB4	; 180
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	3b 87       	std	Y+11, r19	; 0x0b
    4108:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    410a:	85 ef       	ldi	r24, 0xF5	; 245
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	9d 87       	std	Y+13, r25	; 0x0d
    4110:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    4112:	88 e3       	ldi	r24, 0x38	; 56
    4114:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    4116:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    4118:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    411a:	85 e1       	ldi	r24, 0x15	; 21
    411c:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    411e:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    4120:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    4122:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    4124:	1e 8a       	std	Y+22, r1	; 0x16
    4126:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    4128:	8a e5       	ldi	r24, 0x5A	; 90
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	98 8f       	std	Y+24, r25	; 0x18
    412e:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    4130:	3a 8f       	std	Y+26, r19	; 0x1a
    4132:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    4134:	8e e0       	ldi	r24, 0x0E	; 14
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	9c 8f       	std	Y+28, r25	; 0x1c
    413a:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9e 8f       	std	Y+30, r25	; 0x1e
    4142:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    4144:	8e e1       	ldi	r24, 0x1E	; 30
    4146:	fe 01       	movw	r30, r28
    4148:	31 96       	adiw	r30, 0x01	; 1
    414a:	de 01       	movw	r26, r28
    414c:	5f 96       	adiw	r26, 0x1f	; 31
    414e:	01 90       	ld	r0, Z+
    4150:	0d 92       	st	X+, r0
    4152:	8a 95       	dec	r24
    4154:	e1 f7       	brne	.-8      	; 0x414e <send_handshake+0x82>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    4156:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    415a:	88 23       	and	r24, r24
    415c:	59 f0       	breq	.+22     	; 0x4174 <send_handshake+0xa8>
    415e:	4e e1       	ldi	r20, 0x1E	; 30
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	be 01       	movw	r22, r28
    4164:	61 5e       	subi	r22, 0xE1	; 225
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    416c:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	09 c0       	rjmp	.+18     	; 0x4186 <send_handshake+0xba>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    4174:	4e e1       	ldi	r20, 0x1E	; 30
    4176:	50 e0       	ldi	r21, 0x00	; 0
    4178:	be 01       	movw	r22, r28
    417a:	61 5e       	subi	r22, 0xE1	; 225
    417c:	7f 4f       	sbci	r23, 0xFF	; 255
    417e:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    4182:	91 d1       	rcall	.+802    	; 0x44a6 <simple_p_send>
  return 1;
    4184:	81 e0       	ldi	r24, 0x01	; 1
}
    4186:	ec 96       	adiw	r28, 0x3c	; 60
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	df 91       	pop	r29
    4194:	cf 91       	pop	r28
    4196:	08 95       	ret

00004198 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    4198:	af 92       	push	r10
    419a:	cf 92       	push	r12
    419c:	ef 92       	push	r14
    419e:	0f 93       	push	r16
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	2d 97       	sbiw	r28, 0x0d	; 13
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return;
    41b4:	e0 91 1d 1a 	lds	r30, 0x1A1D	; 0x801a1d <connected>
    41b8:	ee 23       	and	r30, r30
    41ba:	19 f1       	breq	.+70     	; 0x4202 <send_update+0x6a>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    41bc:	e1 e0       	ldi	r30, 0x01	; 1
    41be:	e9 83       	std	Y+1, r30	; 0x01
    41c0:	9b 83       	std	Y+3, r25	; 0x03
    41c2:	8a 83       	std	Y+2, r24	; 0x02
    41c4:	7d 83       	std	Y+5, r23	; 0x05
    41c6:	6c 83       	std	Y+4, r22	; 0x04
    41c8:	5f 83       	std	Y+7, r21	; 0x07
    41ca:	4e 83       	std	Y+6, r20	; 0x06
    41cc:	39 87       	std	Y+9, r19	; 0x09
    41ce:	28 87       	std	Y+8, r18	; 0x08
    41d0:	0a 87       	std	Y+10, r16	; 0x0a
    41d2:	eb 86       	std	Y+11, r14	; 0x0b
    41d4:	cc 86       	std	Y+12, r12	; 0x0c
    41d6:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    41d8:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    41dc:	88 23       	and	r24, r24
    41de:	51 f0       	breq	.+20     	; 0x41f4 <send_update+0x5c>
    41e0:	4d e0       	ldi	r20, 0x0D	; 13
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	be 01       	movw	r22, r28
    41e6:	6f 5f       	subi	r22, 0xFF	; 255
    41e8:	7f 4f       	sbci	r23, 0xFF	; 255
    41ea:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    41ee:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    41f2:	07 c0       	rjmp	.+14     	; 0x4202 <send_update+0x6a>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    41f4:	4d e0       	ldi	r20, 0x0D	; 13
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	be 01       	movw	r22, r28
    41fa:	6f 5f       	subi	r22, 0xFF	; 255
    41fc:	7f 4f       	sbci	r23, 0xFF	; 255
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	52 d1       	rcall	.+676    	; 0x44a6 <simple_p_send>
}
    4202:	2d 96       	adiw	r28, 0x0d	; 13
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	0f 91       	pop	r16
    4214:	ef 90       	pop	r14
    4216:	cf 90       	pop	r12
    4218:	af 90       	pop	r10
    421a:	08 95       	ret

0000421c <send_idle>:

void send_idle(void) {
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	1f 92       	push	r1
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    4226:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <connected>
    422a:	88 23       	and	r24, r24
    422c:	b9 f0       	breq	.+46     	; 0x425c <send_idle+0x40>
  uint8_t status = TYPE_IDLE;
    422e:	83 e0       	ldi	r24, 0x03	; 3
    4230:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    4232:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    4236:	88 23       	and	r24, r24
    4238:	51 f0       	breq	.+20     	; 0x424e <send_idle+0x32>
    423a:	41 e0       	ldi	r20, 0x01	; 1
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	be 01       	movw	r22, r28
    4240:	6f 5f       	subi	r22, 0xFF	; 255
    4242:	7f 4f       	sbci	r23, 0xFF	; 255
    4244:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    4248:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    424c:	07 c0       	rjmp	.+14     	; 0x425c <send_idle+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    424e:	41 e0       	ldi	r20, 0x01	; 1
    4250:	50 e0       	ldi	r21, 0x00	; 0
    4252:	be 01       	movw	r22, r28
    4254:	6f 5f       	subi	r22, 0xFF	; 255
    4256:	7f 4f       	sbci	r23, 0xFF	; 255
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	25 d1       	rcall	.+586    	; 0x44a6 <simple_p_send>
}
    425c:	0f 90       	pop	r0
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <debug>:
void debug(const char *fmt, ...) {
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	c4 56       	subi	r28, 0x64	; 100
    426e:	d1 09       	sbc	r29, r1
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	de bf       	out	0x3e, r29	; 62
    4276:	0f be       	out	0x3f, r0	; 63
    4278:	cd bf       	out	0x3d, r28	; 61
    427a:	ae 01       	movw	r20, r28
    427c:	46 59       	subi	r20, 0x96	; 150
    427e:	5f 4f       	sbci	r21, 0xFF	; 255
    4280:	fa 01       	movw	r30, r20
    4282:	61 91       	ld	r22, Z+
    4284:	71 91       	ld	r23, Z+
    4286:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    4288:	8a e0       	ldi	r24, 0x0A	; 10
    428a:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    428c:	ce 01       	movw	r24, r28
    428e:	02 96       	adiw	r24, 0x02	; 2
    4290:	0e 94 c1 38 	call	0x7182	; 0x7182 <vsprintf>
	va_end(ap);
	if (ret > 0) {
    4294:	88 23       	and	r24, r24
    4296:	c9 f0       	breq	.+50     	; 0x42ca <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    4298:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    429c:	22 23       	and	r18, r18
    429e:	61 f0       	breq	.+24     	; 0x42b8 <debug+0x54>
    42a0:	99 27       	eor	r25, r25
    42a2:	ac 01       	movw	r20, r24
    42a4:	4f 5f       	subi	r20, 0xFF	; 255
    42a6:	5f 4f       	sbci	r21, 0xFF	; 255
    42a8:	be 01       	movw	r22, r28
    42aa:	6f 5f       	subi	r22, 0xFF	; 255
    42ac:	7f 4f       	sbci	r23, 0xFF	; 255
    42ae:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    42b2:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    42b6:	09 c0       	rjmp	.+18     	; 0x42ca <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    42b8:	99 27       	eor	r25, r25
    42ba:	ac 01       	movw	r20, r24
    42bc:	4f 5f       	subi	r20, 0xFF	; 255
    42be:	5f 4f       	sbci	r21, 0xFF	; 255
    42c0:	be 01       	movw	r22, r28
    42c2:	6f 5f       	subi	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	ee d0       	rcall	.+476    	; 0x44a6 <simple_p_send>
	}
}
    42ca:	cc 59       	subi	r28, 0x9C	; 156
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

000042de <send_ping_response>:

void send_ping_response(void) {
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	1f 92       	push	r1
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    42e8:	80 91 1d 1a 	lds	r24, 0x1A1D	; 0x801a1d <connected>
    42ec:	88 23       	and	r24, r24
    42ee:	b9 f0       	breq	.+46     	; 0x431e <send_ping_response+0x40>
  uint8_t status = TYPE_PING_RESPONSE;
    42f0:	89 e0       	ldi	r24, 0x09	; 9
    42f2:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    42f4:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    42f8:	88 23       	and	r24, r24
    42fa:	51 f0       	breq	.+20     	; 0x4310 <send_ping_response+0x32>
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	be 01       	movw	r22, r28
    4302:	6f 5f       	subi	r22, 0xFF	; 255
    4304:	7f 4f       	sbci	r23, 0xFF	; 255
    4306:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <server_connection>
    430a:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    430e:	07 c0       	rjmp	.+14     	; 0x431e <send_ping_response+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    4310:	41 e0       	ldi	r20, 0x01	; 1
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	be 01       	movw	r22, r28
    4316:	6f 5f       	subi	r22, 0xFF	; 255
    4318:	7f 4f       	sbci	r23, 0xFF	; 255
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	c4 d0       	rcall	.+392    	; 0x44a6 <simple_p_send>
}
    431e:	0f 90       	pop	r0
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	08 95       	ret

00004326 <vServo_setAngle>:
}

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    4326:	8a 35       	cpi	r24, 0x5A	; 90
    4328:	38 f0       	brcs	.+14     	; 0x4338 <vServo_setAngle+0x12>
        ServoAngleDeg = 90;
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    432a:	8e ea       	ldi	r24, 0xAE	; 174
    432c:	9b e0       	ldi	r25, 0x0B	; 11
    432e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4332:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4336:	08 95       	ret
    }
    else if(ServoAngleDeg <= 0){
    4338:	81 11       	cpse	r24, r1
    433a:	07 c0       	rjmp	.+14     	; 0x434a <vServo_setAngle+0x24>
        ServoAngleDeg = 0;
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    433c:	81 e4       	ldi	r24, 0x41	; 65
    433e:	95 e0       	ldi	r25, 0x05	; 5
    4340:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4344:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4348:	08 95       	ret
    }
	else if ((ServoAngleDeg<90) && (ServoAngleDeg>0))
    434a:	9f ef       	ldi	r25, 0xFF	; 255
    434c:	98 0f       	add	r25, r24
    434e:	99 35       	cpi	r25, 0x59	; 89
    4350:	68 f4       	brcc	.+26     	; 0x436c <vServo_setAngle+0x46>
	{
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    4352:	e8 2f       	mov	r30, r24
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	ee 0f       	add	r30, r30
    4358:	ff 1f       	adc	r31, r31
    435a:	ec 56       	subi	r30, 0x6C	; 108
    435c:	f9 4f       	sbci	r31, 0xF9	; 249
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4366:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    436a:	08 95       	ret
	}
	else{
		debug("vServo_setAngle input error..");
    436c:	86 e7       	ldi	r24, 0x76	; 118
    436e:	96 e0       	ldi	r25, 0x06	; 6
    4370:	9f 93       	push	r25
    4372:	8f 93       	push	r24
    4374:	77 df       	rcall	.-274    	; 0x4264 <debug>
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	08 95       	ret

0000437c <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    437c:	a0 ea       	ldi	r26, 0xA0	; 160
    437e:	b0 e0       	ldi	r27, 0x00	; 0
    4380:	9c 91       	ld	r25, X
    4382:	90 62       	ori	r25, 0x20	; 32
    4384:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    4386:	e1 ea       	ldi	r30, 0xA1	; 161
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	90 81       	ld	r25, Z
    438c:	98 61       	ori	r25, 0x18	; 24
    438e:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    4390:	9c 91       	ld	r25, X
    4392:	92 60       	ori	r25, 0x02	; 2
    4394:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    4396:	90 81       	ld	r25, Z
    4398:	92 60       	ori	r25, 0x02	; 2
    439a:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    439c:	2f e3       	ldi	r18, 0x3F	; 63
    439e:	3c e9       	ldi	r19, 0x9C	; 156
    43a0:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    43a4:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    43a8:	e1 e0       	ldi	r30, 0x01	; 1
    43aa:	f1 e0       	ldi	r31, 0x01	; 1
    43ac:	90 81       	ld	r25, Z
    43ae:	90 61       	ori	r25, 0x10	; 16
    43b0:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    43b2:	b9 cf       	rjmp	.-142    	; 0x4326 <vServo_setAngle>
    43b4:	08 95       	ret

000043b6 <simple_p_reassembly>:
    43b6:	ef 92       	push	r14
    43b8:	ff 92       	push	r15
    43ba:	0f 93       	push	r16
    43bc:	1f 93       	push	r17
    43be:	cf 93       	push	r28
    43c0:	df 93       	push	r29
    43c2:	90 91 1f 1a 	lds	r25, 0x1A1F	; 0x801a1f <messages+0x1>
    43c6:	9f 3f       	cpi	r25, 0xFF	; 255
    43c8:	11 f0       	breq	.+4      	; 0x43ce <simple_p_reassembly+0x18>
    43ca:	98 13       	cpse	r25, r24
    43cc:	58 c0       	rjmp	.+176    	; 0x447e <simple_p_reassembly+0xc8>
    43ce:	fb 01       	movw	r30, r22
    43d0:	80 81       	ld	r24, Z
    43d2:	81 11       	cpse	r24, r1
    43d4:	05 c0       	rjmp	.+10     	; 0x43e0 <simple_p_reassembly+0x2a>
    43d6:	10 92 21 1a 	sts	0x1A21, r1	; 0x801a21 <messages+0x3>
    43da:	10 92 20 1a 	sts	0x1A20, r1	; 0x801a20 <messages+0x2>
    43de:	0c c0       	rjmp	.+24     	; 0x43f8 <simple_p_reassembly+0x42>
    43e0:	90 91 22 1a 	lds	r25, 0x1A22	; 0x801a22 <messages+0x4>
    43e4:	89 17       	cp	r24, r25
    43e6:	41 f0       	breq	.+16     	; 0x43f8 <simple_p_reassembly+0x42>
    43e8:	ee e1       	ldi	r30, 0x1E	; 30
    43ea:	fa e1       	ldi	r31, 0x1A	; 26
    43ec:	14 82       	std	Z+4, r1	; 0x04
    43ee:	13 82       	std	Z+3, r1	; 0x03
    43f0:	12 82       	std	Z+2, r1	; 0x02
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	81 83       	std	Z+1, r24	; 0x01
    43f6:	43 c0       	rjmp	.+134    	; 0x447e <simple_p_reassembly+0xc8>
    43f8:	80 91 20 1a 	lds	r24, 0x1A20	; 0x801a20 <messages+0x2>
    43fc:	90 91 21 1a 	lds	r25, 0x1A21	; 0x801a21 <messages+0x3>
    4400:	02 97       	sbiw	r24, 0x02	; 2
    4402:	84 0f       	add	r24, r20
    4404:	95 1f       	adc	r25, r21
    4406:	85 36       	cpi	r24, 0x65	; 101
    4408:	91 05       	cpc	r25, r1
    440a:	40 f0       	brcs	.+16     	; 0x441c <simple_p_reassembly+0x66>
    440c:	ee e1       	ldi	r30, 0x1E	; 30
    440e:	fa e1       	ldi	r31, 0x1A	; 26
    4410:	13 82       	std	Z+3, r1	; 0x03
    4412:	12 82       	std	Z+2, r1	; 0x02
    4414:	14 82       	std	Z+4, r1	; 0x04
    4416:	8f ef       	ldi	r24, 0xFF	; 255
    4418:	81 83       	std	Z+1, r24	; 0x01
    441a:	31 c0       	rjmp	.+98     	; 0x447e <simple_p_reassembly+0xc8>
    441c:	8a 01       	movw	r16, r20
    441e:	eb 01       	movw	r28, r22
    4420:	0f 2e       	mov	r0, r31
    4422:	fe e1       	ldi	r31, 0x1E	; 30
    4424:	ef 2e       	mov	r14, r31
    4426:	fa e1       	ldi	r31, 0x1A	; 26
    4428:	ff 2e       	mov	r15, r31
    442a:	f0 2d       	mov	r31, r0
    442c:	f7 01       	movw	r30, r14
    442e:	84 81       	ldd	r24, Z+4	; 0x04
    4430:	8f 5f       	subi	r24, 0xFF	; 255
    4432:	84 83       	std	Z+4, r24	; 0x04
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	42 50       	subi	r20, 0x02	; 2
    443a:	51 09       	sbc	r21, r1
    443c:	6e 5f       	subi	r22, 0xFE	; 254
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	8d 5d       	subi	r24, 0xDD	; 221
    4442:	95 4e       	sbci	r25, 0xE5	; 229
    4444:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    4448:	f7 01       	movw	r30, r14
    444a:	42 81       	ldd	r20, Z+2	; 0x02
    444c:	53 81       	ldd	r21, Z+3	; 0x03
    444e:	42 50       	subi	r20, 0x02	; 2
    4450:	51 09       	sbc	r21, r1
    4452:	ba 01       	movw	r22, r20
    4454:	60 0f       	add	r22, r16
    4456:	71 1f       	adc	r23, r17
    4458:	73 83       	std	Z+3, r23	; 0x03
    445a:	62 83       	std	Z+2, r22	; 0x02
    445c:	98 81       	ld	r25, Y
    445e:	89 81       	ldd	r24, Y+1	; 0x01
    4460:	98 13       	cpse	r25, r24
    4462:	0d c0       	rjmp	.+26     	; 0x447e <simple_p_reassembly+0xc8>
    4464:	e0 91 bc 1b 	lds	r30, 0x1BBC	; 0x801bbc <callback_data_received>
    4468:	f0 91 bd 1b 	lds	r31, 0x1BBD	; 0x801bbd <callback_data_received+0x1>
    446c:	83 e2       	ldi	r24, 0x23	; 35
    446e:	9a e1       	ldi	r25, 0x1A	; 26
    4470:	19 95       	eicall
    4472:	f7 01       	movw	r30, r14
    4474:	14 82       	std	Z+4, r1	; 0x04
    4476:	13 82       	std	Z+3, r1	; 0x03
    4478:	12 82       	std	Z+2, r1	; 0x02
    447a:	8f ef       	ldi	r24, 0xFF	; 255
    447c:	81 83       	std	Z+1, r24	; 0x01
    447e:	df 91       	pop	r29
    4480:	cf 91       	pop	r28
    4482:	1f 91       	pop	r17
    4484:	0f 91       	pop	r16
    4486:	ff 90       	pop	r15
    4488:	ef 90       	pop	r14
    448a:	08 95       	ret

0000448c <simple_p_init>:
    448c:	90 93 bd 1b 	sts	0x1BBD, r25	; 0x801bbd <callback_data_received+0x1>
    4490:	80 93 bc 1b 	sts	0x1BBC, r24	; 0x801bbc <callback_data_received>
    4494:	6b ed       	ldi	r22, 0xDB	; 219
    4496:	71 e2       	ldi	r23, 0x21	; 33
    4498:	80 e0       	ldi	r24, 0x00	; 0
    449a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <network_set_callback>
    449e:	8f ef       	ldi	r24, 0xFF	; 255
    44a0:	80 93 1f 1a 	sts	0x1A1F, r24	; 0x801a1f <messages+0x1>
    44a4:	08 95       	ret

000044a6 <simple_p_send>:
    44a6:	5f 92       	push	r5
    44a8:	6f 92       	push	r6
    44aa:	7f 92       	push	r7
    44ac:	8f 92       	push	r8
    44ae:	9f 92       	push	r9
    44b0:	af 92       	push	r10
    44b2:	bf 92       	push	r11
    44b4:	cf 92       	push	r12
    44b6:	df 92       	push	r13
    44b8:	ef 92       	push	r14
    44ba:	ff 92       	push	r15
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	df 93       	push	r29
    44c4:	58 2e       	mov	r5, r24
    44c6:	5b 01       	movw	r10, r22
    44c8:	8a 01       	movw	r16, r20
    44ca:	8c e2       	ldi	r24, 0x2C	; 44
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    44d2:	7c 01       	movw	r14, r24
    44d4:	98 01       	movw	r18, r16
    44d6:	36 95       	lsr	r19
    44d8:	27 95       	ror	r18
    44da:	ad e0       	ldi	r26, 0x0D	; 13
    44dc:	b3 ec       	ldi	r27, 0xC3	; 195
    44de:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <__umulhisi3>
    44e2:	92 95       	swap	r25
    44e4:	82 95       	swap	r24
    44e6:	8f 70       	andi	r24, 0x0F	; 15
    44e8:	89 27       	eor	r24, r25
    44ea:	9f 70       	andi	r25, 0x0F	; 15
    44ec:	89 27       	eor	r24, r25
    44ee:	4a e2       	ldi	r20, 0x2A	; 42
    44f0:	48 9f       	mul	r20, r24
    44f2:	90 01       	movw	r18, r0
    44f4:	49 9f       	mul	r20, r25
    44f6:	30 0d       	add	r19, r0
    44f8:	11 24       	eor	r1, r1
    44fa:	41 e0       	ldi	r20, 0x01	; 1
    44fc:	02 17       	cp	r16, r18
    44fe:	13 07       	cpc	r17, r19
    4500:	09 f4       	brne	.+2      	; 0x4504 <simple_p_send+0x5e>
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	98 01       	movw	r18, r16
    4506:	36 95       	lsr	r19
    4508:	27 95       	ror	r18
    450a:	ad e0       	ldi	r26, 0x0D	; 13
    450c:	b3 ec       	ldi	r27, 0xC3	; 195
    450e:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <__umulhisi3>
    4512:	92 95       	swap	r25
    4514:	82 95       	swap	r24
    4516:	8f 70       	andi	r24, 0x0F	; 15
    4518:	89 27       	eor	r24, r25
    451a:	9f 70       	andi	r25, 0x0F	; 15
    451c:	89 27       	eor	r24, r25
    451e:	84 0f       	add	r24, r20
    4520:	01 15       	cp	r16, r1
    4522:	11 05       	cpc	r17, r1
    4524:	59 f1       	breq	.+86     	; 0x457c <simple_p_send+0xd6>
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	c1 2c       	mov	r12, r1
    452a:	d1 2c       	mov	r13, r1
    452c:	66 24       	eor	r6, r6
    452e:	6a 94       	dec	r6
    4530:	68 0e       	add	r6, r24
    4532:	47 01       	movw	r8, r14
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	88 0e       	add	r8, r24
    4538:	91 1c       	adc	r9, r1
    453a:	e8 01       	movw	r28, r16
    453c:	0b 32       	cpi	r16, 0x2B	; 43
    453e:	11 05       	cpc	r17, r1
    4540:	10 f0       	brcs	.+4      	; 0x4546 <simple_p_send+0xa0>
    4542:	ca e2       	ldi	r28, 0x2A	; 42
    4544:	d0 e0       	ldi	r29, 0x00	; 0
    4546:	77 24       	eor	r7, r7
    4548:	73 94       	inc	r7
    454a:	79 0e       	add	r7, r25
    454c:	f7 01       	movw	r30, r14
    454e:	90 83       	st	Z, r25
    4550:	61 82       	std	Z+1, r6	; 0x01
    4552:	b5 01       	movw	r22, r10
    4554:	6c 0d       	add	r22, r12
    4556:	7d 1d       	adc	r23, r13
    4558:	ae 01       	movw	r20, r28
    455a:	c4 01       	movw	r24, r8
    455c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
    4560:	9e 01       	movw	r18, r28
    4562:	2e 5f       	subi	r18, 0xFE	; 254
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
    4566:	a7 01       	movw	r20, r14
    4568:	60 e0       	ldi	r22, 0x00	; 0
    456a:	85 2d       	mov	r24, r5
    456c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <network_send>
    4570:	cc 0e       	add	r12, r28
    4572:	dd 1e       	adc	r13, r29
    4574:	0c 1b       	sub	r16, r28
    4576:	1d 0b       	sbc	r17, r29
    4578:	97 2d       	mov	r25, r7
    457a:	f9 f6       	brne	.-66     	; 0x453a <simple_p_send+0x94>
    457c:	c7 01       	movw	r24, r14
    457e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	df 91       	pop	r29
    4586:	cf 91       	pop	r28
    4588:	1f 91       	pop	r17
    458a:	0f 91       	pop	r16
    458c:	ff 90       	pop	r15
    458e:	ef 90       	pop	r14
    4590:	df 90       	pop	r13
    4592:	cf 90       	pop	r12
    4594:	bf 90       	pop	r11
    4596:	af 90       	pop	r10
    4598:	9f 90       	pop	r9
    459a:	8f 90       	pop	r8
    459c:	7f 90       	pop	r7
    459e:	6f 90       	pop	r6
    45a0:	5f 90       	pop	r5
    45a2:	08 95       	ret

000045a4 <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    45a4:	84 b1       	in	r24, 0x04	; 4
    45a6:	87 60       	ori	r24, 0x07	; 7
    45a8:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    45aa:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    45ac:	8c b5       	in	r24, 0x2c	; 44
    45ae:	81 60       	ori	r24, 0x01	; 1
    45b0:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    45b2:	8c b5       	in	r24, 0x2c	; 44
    45b4:	8c 65       	ori	r24, 0x5C	; 92
    45b6:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    45b8:	8c b5       	in	r24, 0x2c	; 44
    45ba:	8f 7d       	andi	r24, 0xDF	; 223
    45bc:	8c bd       	out	0x2c, r24	; 44
    45be:	08 95       	ret

000045c0 <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    45c0:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    45c2:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    45c4:	0d b4       	in	r0, 0x2d	; 45
    45c6:	07 fe       	sbrs	r0, 7
    45c8:	fd cf       	rjmp	.-6      	; 0x45c4 <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    45ca:	8e b5       	in	r24, 0x2e	; 46
}
    45cc:	08 95       	ret

000045ce <xTaskGenericCreate>:
    45ce:	4f 92       	push	r4
    45d0:	5f 92       	push	r5
    45d2:	6f 92       	push	r6
    45d4:	7f 92       	push	r7
    45d6:	8f 92       	push	r8
    45d8:	9f 92       	push	r9
    45da:	af 92       	push	r10
    45dc:	bf 92       	push	r11
    45de:	cf 92       	push	r12
    45e0:	df 92       	push	r13
    45e2:	ef 92       	push	r14
    45e4:	ff 92       	push	r15
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	3c 01       	movw	r6, r24
    45f0:	5b 01       	movw	r10, r22
    45f2:	4a 01       	movw	r8, r20
    45f4:	29 01       	movw	r4, r18
    45f6:	c1 14       	cp	r12, r1
    45f8:	d1 04       	cpc	r13, r1
    45fa:	39 f4       	brne	.+14     	; 0x460a <xTaskGenericCreate+0x3c>
    45fc:	ca 01       	movw	r24, r20
    45fe:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4602:	6c 01       	movw	r12, r24
    4604:	89 2b       	or	r24, r25
    4606:	09 f4       	brne	.+2      	; 0x460a <xTaskGenericCreate+0x3c>
    4608:	e4 c0       	rjmp	.+456    	; 0x47d2 <xTaskGenericCreate+0x204>
    460a:	88 e2       	ldi	r24, 0x28	; 40
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4612:	ec 01       	movw	r28, r24
    4614:	89 2b       	or	r24, r25
    4616:	71 f0       	breq	.+28     	; 0x4634 <xTaskGenericCreate+0x66>
    4618:	d8 8e       	std	Y+24, r13	; 0x18
    461a:	cf 8a       	std	Y+23, r12	; 0x17
    461c:	81 e0       	ldi	r24, 0x01	; 1
    461e:	88 1a       	sub	r8, r24
    4620:	91 08       	sbc	r9, r1
    4622:	c8 0c       	add	r12, r8
    4624:	d9 1c       	adc	r13, r9
    4626:	d5 01       	movw	r26, r10
    4628:	8c 91       	ld	r24, X
    462a:	89 8f       	std	Y+25, r24	; 0x19
    462c:	8c 91       	ld	r24, X
    462e:	81 11       	cpse	r24, r1
    4630:	05 c0       	rjmp	.+10     	; 0x463c <xTaskGenericCreate+0x6e>
    4632:	18 c0       	rjmp	.+48     	; 0x4664 <xTaskGenericCreate+0x96>
    4634:	c6 01       	movw	r24, r12
    4636:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    463a:	cb c0       	rjmp	.+406    	; 0x47d2 <xTaskGenericCreate+0x204>
    463c:	ae 01       	movw	r20, r28
    463e:	46 5e       	subi	r20, 0xE6	; 230
    4640:	5f 4f       	sbci	r21, 0xFF	; 255
    4642:	f5 01       	movw	r30, r10
    4644:	31 96       	adiw	r30, 0x01	; 1
    4646:	b8 e0       	ldi	r27, 0x08	; 8
    4648:	ab 0e       	add	r10, r27
    464a:	b1 1c       	adc	r11, r1
    464c:	cf 01       	movw	r24, r30
    464e:	21 91       	ld	r18, Z+
    4650:	da 01       	movw	r26, r20
    4652:	2d 93       	st	X+, r18
    4654:	ad 01       	movw	r20, r26
    4656:	dc 01       	movw	r26, r24
    4658:	8c 91       	ld	r24, X
    465a:	88 23       	and	r24, r24
    465c:	19 f0       	breq	.+6      	; 0x4664 <xTaskGenericCreate+0x96>
    465e:	ae 16       	cp	r10, r30
    4660:	bf 06       	cpc	r11, r31
    4662:	a1 f7       	brne	.-24     	; 0x464c <xTaskGenericCreate+0x7e>
    4664:	18 a2       	std	Y+32, r1	; 0x20
    4666:	10 2f       	mov	r17, r16
    4668:	06 30       	cpi	r16, 0x06	; 6
    466a:	08 f0       	brcs	.+2      	; 0x466e <xTaskGenericCreate+0xa0>
    466c:	15 e0       	ldi	r17, 0x05	; 5
    466e:	1e 8b       	std	Y+22, r17	; 0x16
    4670:	19 a3       	std	Y+33, r17	; 0x21
    4672:	1a a2       	std	Y+34, r1	; 0x22
    4674:	5e 01       	movw	r10, r28
    4676:	b2 e0       	ldi	r27, 0x02	; 2
    4678:	ab 0e       	add	r10, r27
    467a:	b1 1c       	adc	r11, r1
    467c:	c5 01       	movw	r24, r10
    467e:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4682:	ce 01       	movw	r24, r28
    4684:	0c 96       	adiw	r24, 0x0c	; 12
    4686:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    468a:	d9 87       	std	Y+9, r29	; 0x09
    468c:	c8 87       	std	Y+8, r28	; 0x08
    468e:	86 e0       	ldi	r24, 0x06	; 6
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	81 1b       	sub	r24, r17
    4694:	91 09       	sbc	r25, r1
    4696:	9d 87       	std	Y+13, r25	; 0x0d
    4698:	8c 87       	std	Y+12, r24	; 0x0c
    469a:	db 8b       	std	Y+19, r29	; 0x13
    469c:	ca 8b       	std	Y+18, r28	; 0x12
    469e:	1b a2       	std	Y+35, r1	; 0x23
    46a0:	1c a2       	std	Y+36, r1	; 0x24
    46a2:	1d a2       	std	Y+37, r1	; 0x25
    46a4:	1e a2       	std	Y+38, r1	; 0x26
    46a6:	1f a2       	std	Y+39, r1	; 0x27
    46a8:	a2 01       	movw	r20, r4
    46aa:	b3 01       	movw	r22, r6
    46ac:	c6 01       	movw	r24, r12
    46ae:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <pxPortInitialiseStack>
    46b2:	99 83       	std	Y+1, r25	; 0x01
    46b4:	88 83       	st	Y, r24
    46b6:	e1 14       	cp	r14, r1
    46b8:	f1 04       	cpc	r15, r1
    46ba:	19 f0       	breq	.+6      	; 0x46c2 <xTaskGenericCreate+0xf4>
    46bc:	f7 01       	movw	r30, r14
    46be:	d1 83       	std	Z+1, r29	; 0x01
    46c0:	c0 83       	st	Z, r28
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	0f 92       	push	r0
    46c8:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    46cc:	8f 5f       	subi	r24, 0xFF	; 255
    46ce:	80 93 92 1a 	sts	0x1A92, r24	; 0x801a92 <uxCurrentNumberOfTasks>
    46d2:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    46d6:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    46da:	89 2b       	or	r24, r25
    46dc:	d9 f5       	brne	.+118    	; 0x4754 <xTaskGenericCreate+0x186>
    46de:	d0 93 f2 1a 	sts	0x1AF2, r29	; 0x801af2 <pxCurrentTCB+0x1>
    46e2:	c0 93 f1 1a 	sts	0x1AF1, r28	; 0x801af1 <pxCurrentTCB>
    46e6:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    46ea:	81 30       	cpi	r24, 0x01	; 1
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <xTaskGenericCreate+0x122>
    46ee:	41 c0       	rjmp	.+130    	; 0x4772 <xTaskGenericCreate+0x1a4>
    46f0:	0f 2e       	mov	r0, r31
    46f2:	fb eb       	ldi	r31, 0xBB	; 187
    46f4:	ef 2e       	mov	r14, r31
    46f6:	fa e1       	ldi	r31, 0x1A	; 26
    46f8:	ff 2e       	mov	r15, r31
    46fa:	f0 2d       	mov	r31, r0
    46fc:	0f 2e       	mov	r0, r31
    46fe:	f1 ef       	ldi	r31, 0xF1	; 241
    4700:	cf 2e       	mov	r12, r31
    4702:	fa e1       	ldi	r31, 0x1A	; 26
    4704:	df 2e       	mov	r13, r31
    4706:	f0 2d       	mov	r31, r0
    4708:	c7 01       	movw	r24, r14
    470a:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    470e:	f9 e0       	ldi	r31, 0x09	; 9
    4710:	ef 0e       	add	r14, r31
    4712:	f1 1c       	adc	r15, r1
    4714:	ec 14       	cp	r14, r12
    4716:	fd 04       	cpc	r15, r13
    4718:	b9 f7       	brne	.-18     	; 0x4708 <xTaskGenericCreate+0x13a>
    471a:	82 eb       	ldi	r24, 0xB2	; 178
    471c:	9a e1       	ldi	r25, 0x1A	; 26
    471e:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4722:	89 ea       	ldi	r24, 0xA9	; 169
    4724:	9a e1       	ldi	r25, 0x1A	; 26
    4726:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    472a:	8c e9       	ldi	r24, 0x9C	; 156
    472c:	9a e1       	ldi	r25, 0x1A	; 26
    472e:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4732:	83 e9       	ldi	r24, 0x93	; 147
    4734:	9a e1       	ldi	r25, 0x1A	; 26
    4736:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    473a:	82 eb       	ldi	r24, 0xB2	; 178
    473c:	9a e1       	ldi	r25, 0x1A	; 26
    473e:	90 93 a8 1a 	sts	0x1AA8, r25	; 0x801aa8 <pxDelayedTaskList+0x1>
    4742:	80 93 a7 1a 	sts	0x1AA7, r24	; 0x801aa7 <pxDelayedTaskList>
    4746:	89 ea       	ldi	r24, 0xA9	; 169
    4748:	9a e1       	ldi	r25, 0x1A	; 26
    474a:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    474e:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    4752:	0f c0       	rjmp	.+30     	; 0x4772 <xTaskGenericCreate+0x1a4>
    4754:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <xSchedulerRunning>
    4758:	81 11       	cpse	r24, r1
    475a:	0b c0       	rjmp	.+22     	; 0x4772 <xTaskGenericCreate+0x1a4>
    475c:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4760:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4764:	86 89       	ldd	r24, Z+22	; 0x16
    4766:	08 17       	cp	r16, r24
    4768:	20 f0       	brcs	.+8      	; 0x4772 <xTaskGenericCreate+0x1a4>
    476a:	d0 93 f2 1a 	sts	0x1AF2, r29	; 0x801af2 <pxCurrentTCB+0x1>
    476e:	c0 93 f1 1a 	sts	0x1AF1, r28	; 0x801af1 <pxCurrentTCB>
    4772:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <uxTaskNumber>
    4776:	8f 5f       	subi	r24, 0xFF	; 255
    4778:	80 93 8a 1a 	sts	0x1A8A, r24	; 0x801a8a <uxTaskNumber>
    477c:	8e 89       	ldd	r24, Y+22	; 0x16
    477e:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4782:	98 17       	cp	r25, r24
    4784:	10 f4       	brcc	.+4      	; 0x478a <xTaskGenericCreate+0x1bc>
    4786:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	9c 01       	movw	r18, r24
    478e:	22 0f       	add	r18, r18
    4790:	33 1f       	adc	r19, r19
    4792:	22 0f       	add	r18, r18
    4794:	33 1f       	adc	r19, r19
    4796:	22 0f       	add	r18, r18
    4798:	33 1f       	adc	r19, r19
    479a:	82 0f       	add	r24, r18
    479c:	93 1f       	adc	r25, r19
    479e:	b5 01       	movw	r22, r10
    47a0:	85 54       	subi	r24, 0x45	; 69
    47a2:	95 4e       	sbci	r25, 0xE5	; 229
    47a4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    47a8:	0f 90       	pop	r0
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <xSchedulerRunning>
    47b0:	88 23       	and	r24, r24
    47b2:	59 f0       	breq	.+22     	; 0x47ca <xTaskGenericCreate+0x1fc>
    47b4:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    47b8:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    47bc:	86 89       	ldd	r24, Z+22	; 0x16
    47be:	80 17       	cp	r24, r16
    47c0:	30 f4       	brcc	.+12     	; 0x47ce <xTaskGenericCreate+0x200>
    47c2:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	05 c0       	rjmp	.+10     	; 0x47d4 <xTaskGenericCreate+0x206>
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	03 c0       	rjmp	.+6      	; 0x47d4 <xTaskGenericCreate+0x206>
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	01 c0       	rjmp	.+2      	; 0x47d4 <xTaskGenericCreate+0x206>
    47d2:	8f ef       	ldi	r24, 0xFF	; 255
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
    47e4:	bf 90       	pop	r11
    47e6:	af 90       	pop	r10
    47e8:	9f 90       	pop	r9
    47ea:	8f 90       	pop	r8
    47ec:	7f 90       	pop	r7
    47ee:	6f 90       	pop	r6
    47f0:	5f 90       	pop	r5
    47f2:	4f 90       	pop	r4
    47f4:	08 95       	ret

000047f6 <vTaskDelayUntil>:
    47f6:	9f 92       	push	r9
    47f8:	af 92       	push	r10
    47fa:	bf 92       	push	r11
    47fc:	cf 92       	push	r12
    47fe:	df 92       	push	r13
    4800:	ef 92       	push	r14
    4802:	ff 92       	push	r15
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	fc 01       	movw	r30, r24
    480e:	90 91 87 1a 	lds	r25, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    4812:	9f 5f       	subi	r25, 0xFF	; 255
    4814:	90 93 87 1a 	sts	0x1A87, r25	; 0x801a87 <uxSchedulerSuspended>
    4818:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    481c:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4820:	20 81       	ld	r18, Z
    4822:	31 81       	ldd	r19, Z+1	; 0x01
    4824:	e9 01       	movw	r28, r18
    4826:	c6 0f       	add	r28, r22
    4828:	d7 1f       	adc	r29, r23
    482a:	82 17       	cp	r24, r18
    482c:	93 07       	cpc	r25, r19
    482e:	58 f4       	brcc	.+22     	; 0x4846 <vTaskDelayUntil+0x50>
    4830:	c2 17       	cp	r28, r18
    4832:	d3 07       	cpc	r29, r19
    4834:	08 f0       	brcs	.+2      	; 0x4838 <vTaskDelayUntil+0x42>
    4836:	6e c1       	rjmp	.+732    	; 0x4b14 <vTaskDelayUntil+0x31e>
    4838:	d1 83       	std	Z+1, r29	; 0x01
    483a:	c0 83       	st	Z, r28
    483c:	8c 17       	cp	r24, r28
    483e:	9d 07       	cpc	r25, r29
    4840:	08 f0       	brcs	.+2      	; 0x4844 <vTaskDelayUntil+0x4e>
    4842:	42 c0       	rjmp	.+132    	; 0x48c8 <vTaskDelayUntil+0xd2>
    4844:	09 c0       	rjmp	.+18     	; 0x4858 <vTaskDelayUntil+0x62>
    4846:	c2 17       	cp	r28, r18
    4848:	d3 07       	cpc	r29, r19
    484a:	08 f4       	brcc	.+2      	; 0x484e <vTaskDelayUntil+0x58>
    484c:	60 c1       	rjmp	.+704    	; 0x4b0e <vTaskDelayUntil+0x318>
    484e:	8c 17       	cp	r24, r28
    4850:	9d 07       	cpc	r25, r29
    4852:	08 f4       	brcc	.+2      	; 0x4856 <vTaskDelayUntil+0x60>
    4854:	5c c1       	rjmp	.+696    	; 0x4b0e <vTaskDelayUntil+0x318>
    4856:	5e c1       	rjmp	.+700    	; 0x4b14 <vTaskDelayUntil+0x31e>
    4858:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    485c:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4860:	02 96       	adiw	r24, 0x02	; 2
    4862:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4866:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    486a:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    486e:	d3 83       	std	Z+3, r29	; 0x03
    4870:	c2 83       	std	Z+2, r28	; 0x02
    4872:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    4876:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    487a:	c8 17       	cp	r28, r24
    487c:	d9 07       	cpc	r29, r25
    487e:	68 f4       	brcc	.+26     	; 0x489a <vTaskDelayUntil+0xa4>
    4880:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4884:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4888:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    488c:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    4890:	6e 5f       	subi	r22, 0xFE	; 254
    4892:	7f 4f       	sbci	r23, 0xFF	; 255
    4894:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4898:	17 c0       	rjmp	.+46     	; 0x48c8 <vTaskDelayUntil+0xd2>
    489a:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    489e:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    48a2:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    48a6:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    48aa:	6e 5f       	subi	r22, 0xFE	; 254
    48ac:	7f 4f       	sbci	r23, 0xFF	; 255
    48ae:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    48b2:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    48b6:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    48ba:	c8 17       	cp	r28, r24
    48bc:	d9 07       	cpc	r29, r25
    48be:	20 f4       	brcc	.+8      	; 0x48c8 <vTaskDelayUntil+0xd2>
    48c0:	d0 93 89 1a 	sts	0x1A89, r29	; 0x801a89 <xNextTaskUnblockTime+0x1>
    48c4:	c0 93 88 1a 	sts	0x1A88, r28	; 0x801a88 <xNextTaskUnblockTime>
    48c8:	0f b6       	in	r0, 0x3f	; 63
    48ca:	f8 94       	cli
    48cc:	0f 92       	push	r0
    48ce:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    48d2:	81 50       	subi	r24, 0x01	; 1
    48d4:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <uxSchedulerSuspended>
    48d8:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    48dc:	81 11       	cpse	r24, r1
    48de:	0d c1       	rjmp	.+538    	; 0x4afa <vTaskDelayUntil+0x304>
    48e0:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    48e4:	81 11       	cpse	r24, r1
    48e6:	33 c0       	rjmp	.+102    	; 0x494e <vTaskDelayUntil+0x158>
    48e8:	0b c1       	rjmp	.+534    	; 0x4b00 <vTaskDelayUntil+0x30a>
    48ea:	d7 01       	movw	r26, r14
    48ec:	15 96       	adiw	r26, 0x05	; 5
    48ee:	ed 91       	ld	r30, X+
    48f0:	fc 91       	ld	r31, X
    48f2:	16 97       	sbiw	r26, 0x06	; 6
    48f4:	c6 81       	ldd	r28, Z+6	; 0x06
    48f6:	d7 81       	ldd	r29, Z+7	; 0x07
    48f8:	ce 01       	movw	r24, r28
    48fa:	0c 96       	adiw	r24, 0x0c	; 12
    48fc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4900:	8e 01       	movw	r16, r28
    4902:	0e 5f       	subi	r16, 0xFE	; 254
    4904:	1f 4f       	sbci	r17, 0xFF	; 255
    4906:	c8 01       	movw	r24, r16
    4908:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    490c:	8e 89       	ldd	r24, Y+22	; 0x16
    490e:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4912:	98 17       	cp	r25, r24
    4914:	10 f4       	brcc	.+4      	; 0x491a <vTaskDelayUntil+0x124>
    4916:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	9c 01       	movw	r18, r24
    491e:	22 0f       	add	r18, r18
    4920:	33 1f       	adc	r19, r19
    4922:	22 0f       	add	r18, r18
    4924:	33 1f       	adc	r19, r19
    4926:	22 0f       	add	r18, r18
    4928:	33 1f       	adc	r19, r19
    492a:	82 0f       	add	r24, r18
    492c:	93 1f       	adc	r25, r19
    492e:	b8 01       	movw	r22, r16
    4930:	85 54       	subi	r24, 0x45	; 69
    4932:	95 4e       	sbci	r25, 0xE5	; 229
    4934:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4938:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    493c:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4940:	9e 89       	ldd	r25, Y+22	; 0x16
    4942:	86 89       	ldd	r24, Z+22	; 0x16
    4944:	98 17       	cp	r25, r24
    4946:	58 f0       	brcs	.+22     	; 0x495e <vTaskDelayUntil+0x168>
    4948:	d0 92 8c 1a 	sts	0x1A8C, r13	; 0x801a8c <xYieldPending>
    494c:	08 c0       	rjmp	.+16     	; 0x495e <vTaskDelayUntil+0x168>
    494e:	0f 2e       	mov	r0, r31
    4950:	fc e9       	ldi	r31, 0x9C	; 156
    4952:	ef 2e       	mov	r14, r31
    4954:	fa e1       	ldi	r31, 0x1A	; 26
    4956:	ff 2e       	mov	r15, r31
    4958:	f0 2d       	mov	r31, r0
    495a:	dd 24       	eor	r13, r13
    495c:	d3 94       	inc	r13
    495e:	f7 01       	movw	r30, r14
    4960:	80 81       	ld	r24, Z
    4962:	81 11       	cpse	r24, r1
    4964:	c2 cf       	rjmp	.-124    	; 0x48ea <vTaskDelayUntil+0xf4>
    4966:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    496a:	88 23       	and	r24, r24
    496c:	09 f4       	brne	.+2      	; 0x4970 <vTaskDelayUntil+0x17a>
    496e:	bd c0       	rjmp	.+378    	; 0x4aea <vTaskDelayUntil+0x2f4>
    4970:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4974:	88 23       	and	r24, r24
    4976:	09 f4       	brne	.+2      	; 0x497a <vTaskDelayUntil+0x184>
    4978:	b8 c0       	rjmp	.+368    	; 0x4aea <vTaskDelayUntil+0x2f4>
    497a:	91 2c       	mov	r9, r1
    497c:	bb 24       	eor	r11, r11
    497e:	b3 94       	inc	r11
    4980:	cc 24       	eor	r12, r12
    4982:	ca 94       	dec	r12
    4984:	dc 2c       	mov	r13, r12
    4986:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    498a:	81 11       	cpse	r24, r1
    498c:	98 c0       	rjmp	.+304    	; 0x4abe <vTaskDelayUntil+0x2c8>
    498e:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    4992:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <xTickCount+0x1>
    499c:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <xTickCount>
    49a0:	e0 90 90 1a 	lds	r14, 0x1A90	; 0x801a90 <xTickCount>
    49a4:	f0 90 91 1a 	lds	r15, 0x1A91	; 0x801a91 <xTickCount+0x1>
    49a8:	e1 14       	cp	r14, r1
    49aa:	f1 04       	cpc	r15, r1
    49ac:	89 f5       	brne	.+98     	; 0x4a10 <vTaskDelayUntil+0x21a>
    49ae:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    49b2:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    49b6:	20 91 a5 1a 	lds	r18, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    49ba:	30 91 a6 1a 	lds	r19, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    49be:	30 93 a8 1a 	sts	0x1AA8, r19	; 0x801aa8 <pxDelayedTaskList+0x1>
    49c2:	20 93 a7 1a 	sts	0x1AA7, r18	; 0x801aa7 <pxDelayedTaskList>
    49c6:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    49ca:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    49ce:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    49d2:	8f 5f       	subi	r24, 0xFF	; 255
    49d4:	80 93 8b 1a 	sts	0x1A8B, r24	; 0x801a8b <xNumOfOverflows>
    49d8:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    49dc:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    49e0:	80 81       	ld	r24, Z
    49e2:	81 11       	cpse	r24, r1
    49e4:	05 c0       	rjmp	.+10     	; 0x49f0 <vTaskDelayUntil+0x1fa>
    49e6:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    49ea:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    49ee:	10 c0       	rjmp	.+32     	; 0x4a10 <vTaskDelayUntil+0x21a>
    49f0:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    49f4:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    49f8:	05 80       	ldd	r0, Z+5	; 0x05
    49fa:	f6 81       	ldd	r31, Z+6	; 0x06
    49fc:	e0 2d       	mov	r30, r0
    49fe:	06 80       	ldd	r0, Z+6	; 0x06
    4a00:	f7 81       	ldd	r31, Z+7	; 0x07
    4a02:	e0 2d       	mov	r30, r0
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03
    4a08:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4a0c:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    4a10:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    4a14:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4a18:	e8 16       	cp	r14, r24
    4a1a:	f9 06       	cpc	r15, r25
    4a1c:	08 f4       	brcc	.+2      	; 0x4a20 <vTaskDelayUntil+0x22a>
    4a1e:	7d c0       	rjmp	.+250    	; 0x4b1a <vTaskDelayUntil+0x324>
    4a20:	a9 2c       	mov	r10, r9
    4a22:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4a26:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4a2a:	80 81       	ld	r24, Z
    4a2c:	81 11       	cpse	r24, r1
    4a2e:	05 c0       	rjmp	.+10     	; 0x4a3a <vTaskDelayUntil+0x244>
    4a30:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4a34:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    4a38:	48 c0       	rjmp	.+144    	; 0x4aca <vTaskDelayUntil+0x2d4>
    4a3a:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4a3e:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4a42:	05 80       	ldd	r0, Z+5	; 0x05
    4a44:	f6 81       	ldd	r31, Z+6	; 0x06
    4a46:	e0 2d       	mov	r30, r0
    4a48:	c6 81       	ldd	r28, Z+6	; 0x06
    4a4a:	d7 81       	ldd	r29, Z+7	; 0x07
    4a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a50:	e8 16       	cp	r14, r24
    4a52:	f9 06       	cpc	r15, r25
    4a54:	28 f4       	brcc	.+10     	; 0x4a60 <vTaskDelayUntil+0x26a>
    4a56:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4a5a:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    4a5e:	35 c0       	rjmp	.+106    	; 0x4aca <vTaskDelayUntil+0x2d4>
    4a60:	8e 01       	movw	r16, r28
    4a62:	0e 5f       	subi	r16, 0xFE	; 254
    4a64:	1f 4f       	sbci	r17, 0xFF	; 255
    4a66:	c8 01       	movw	r24, r16
    4a68:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    4a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    4a70:	89 2b       	or	r24, r25
    4a72:	21 f0       	breq	.+8      	; 0x4a7c <vTaskDelayUntil+0x286>
    4a74:	ce 01       	movw	r24, r28
    4a76:	0c 96       	adiw	r24, 0x0c	; 12
    4a78:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4a7c:	8e 89       	ldd	r24, Y+22	; 0x16
    4a7e:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4a82:	98 17       	cp	r25, r24
    4a84:	10 f4       	brcc	.+4      	; 0x4a8a <vTaskDelayUntil+0x294>
    4a86:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	9c 01       	movw	r18, r24
    4a8e:	22 0f       	add	r18, r18
    4a90:	33 1f       	adc	r19, r19
    4a92:	22 0f       	add	r18, r18
    4a94:	33 1f       	adc	r19, r19
    4a96:	22 0f       	add	r18, r18
    4a98:	33 1f       	adc	r19, r19
    4a9a:	82 0f       	add	r24, r18
    4a9c:	93 1f       	adc	r25, r19
    4a9e:	b8 01       	movw	r22, r16
    4aa0:	85 54       	subi	r24, 0x45	; 69
    4aa2:	95 4e       	sbci	r25, 0xE5	; 229
    4aa4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4aa8:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4aac:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4ab0:	9e 89       	ldd	r25, Y+22	; 0x16
    4ab2:	86 89       	ldd	r24, Z+22	; 0x16
    4ab4:	98 17       	cp	r25, r24
    4ab6:	08 f4       	brcc	.+2      	; 0x4aba <vTaskDelayUntil+0x2c4>
    4ab8:	b4 cf       	rjmp	.-152    	; 0x4a22 <vTaskDelayUntil+0x22c>
    4aba:	ab 2c       	mov	r10, r11
    4abc:	b2 cf       	rjmp	.-156    	; 0x4a22 <vTaskDelayUntil+0x22c>
    4abe:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4ac2:	8f 5f       	subi	r24, 0xFF	; 255
    4ac4:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    4ac8:	28 c0       	rjmp	.+80     	; 0x4b1a <vTaskDelayUntil+0x324>
    4aca:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4ace:	81 11       	cpse	r24, r1
    4ad0:	01 c0       	rjmp	.+2      	; 0x4ad4 <vTaskDelayUntil+0x2de>
    4ad2:	a1 10       	cpse	r10, r1
    4ad4:	b0 92 8c 1a 	sts	0x1A8C, r11	; 0x801a8c <xYieldPending>
    4ad8:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4adc:	81 50       	subi	r24, 0x01	; 1
    4ade:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    4ae2:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4ae6:	81 11       	cpse	r24, r1
    4ae8:	4e cf       	rjmp	.-356    	; 0x4986 <vTaskDelayUntil+0x190>
    4aea:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4aee:	81 30       	cpi	r24, 0x01	; 1
    4af0:	31 f4       	brne	.+12     	; 0x4afe <vTaskDelayUntil+0x308>
    4af2:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	03 c0       	rjmp	.+6      	; 0x4b00 <vTaskDelayUntil+0x30a>
    4afa:	80 e0       	ldi	r24, 0x00	; 0
    4afc:	01 c0       	rjmp	.+2      	; 0x4b00 <vTaskDelayUntil+0x30a>
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	0f 90       	pop	r0
    4b02:	0f be       	out	0x3f, r0	; 63
    4b04:	81 11       	cpse	r24, r1
    4b06:	0e c0       	rjmp	.+28     	; 0x4b24 <vTaskDelayUntil+0x32e>
    4b08:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4b0c:	0b c0       	rjmp	.+22     	; 0x4b24 <vTaskDelayUntil+0x32e>
    4b0e:	d1 83       	std	Z+1, r29	; 0x01
    4b10:	c0 83       	st	Z, r28
    4b12:	a2 ce       	rjmp	.-700    	; 0x4858 <vTaskDelayUntil+0x62>
    4b14:	d1 83       	std	Z+1, r29	; 0x01
    4b16:	c0 83       	st	Z, r28
    4b18:	d7 ce       	rjmp	.-594    	; 0x48c8 <vTaskDelayUntil+0xd2>
    4b1a:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4b1e:	81 11       	cpse	r24, r1
    4b20:	d9 cf       	rjmp	.-78     	; 0x4ad4 <vTaskDelayUntil+0x2de>
    4b22:	da cf       	rjmp	.-76     	; 0x4ad8 <vTaskDelayUntil+0x2e2>
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	1f 91       	pop	r17
    4b2a:	0f 91       	pop	r16
    4b2c:	ff 90       	pop	r15
    4b2e:	ef 90       	pop	r14
    4b30:	df 90       	pop	r13
    4b32:	cf 90       	pop	r12
    4b34:	bf 90       	pop	r11
    4b36:	af 90       	pop	r10
    4b38:	9f 90       	pop	r9
    4b3a:	08 95       	ret

00004b3c <vTaskDelay>:
    4b3c:	9f 92       	push	r9
    4b3e:	af 92       	push	r10
    4b40:	bf 92       	push	r11
    4b42:	cf 92       	push	r12
    4b44:	df 92       	push	r13
    4b46:	ef 92       	push	r14
    4b48:	ff 92       	push	r15
    4b4a:	0f 93       	push	r16
    4b4c:	1f 93       	push	r17
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	00 97       	sbiw	r24, 0x00	; 0
    4b54:	09 f4       	brne	.+2      	; 0x4b58 <vTaskDelay+0x1c>
    4b56:	63 c1       	rjmp	.+710    	; 0x4e1e <vTaskDelay+0x2e2>
    4b58:	20 91 87 1a 	lds	r18, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    4b5c:	2f 5f       	subi	r18, 0xFF	; 255
    4b5e:	20 93 87 1a 	sts	0x1A87, r18	; 0x801a87 <uxSchedulerSuspended>
    4b62:	c0 91 90 1a 	lds	r28, 0x1A90	; 0x801a90 <xTickCount>
    4b66:	d0 91 91 1a 	lds	r29, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4b6a:	c8 0f       	add	r28, r24
    4b6c:	d9 1f       	adc	r29, r25
    4b6e:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4b72:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4b76:	02 96       	adiw	r24, 0x02	; 2
    4b78:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4b7c:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4b80:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4b84:	d3 83       	std	Z+3, r29	; 0x03
    4b86:	c2 83       	std	Z+2, r28	; 0x02
    4b88:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    4b8c:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4b90:	c8 17       	cp	r28, r24
    4b92:	d9 07       	cpc	r29, r25
    4b94:	68 f4       	brcc	.+26     	; 0x4bb0 <vTaskDelay+0x74>
    4b96:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4b9a:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4b9e:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    4ba2:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    4ba6:	6e 5f       	subi	r22, 0xFE	; 254
    4ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    4baa:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4bae:	17 c0       	rjmp	.+46     	; 0x4bde <vTaskDelay+0xa2>
    4bb0:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4bb4:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4bb8:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4bbc:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4bc0:	6e 5f       	subi	r22, 0xFE	; 254
    4bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4bc4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    4bc8:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    4bcc:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4bd0:	c8 17       	cp	r28, r24
    4bd2:	d9 07       	cpc	r29, r25
    4bd4:	20 f4       	brcc	.+8      	; 0x4bde <vTaskDelay+0xa2>
    4bd6:	d0 93 89 1a 	sts	0x1A89, r29	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4bda:	c0 93 88 1a 	sts	0x1A88, r28	; 0x801a88 <xNextTaskUnblockTime>
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	0f 92       	push	r0
    4be4:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    4be8:	81 50       	subi	r24, 0x01	; 1
    4bea:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <uxSchedulerSuspended>
    4bee:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	0d c1       	rjmp	.+538    	; 0x4e10 <vTaskDelay+0x2d4>
    4bf6:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    4bfa:	81 11       	cpse	r24, r1
    4bfc:	33 c0       	rjmp	.+102    	; 0x4c64 <vTaskDelay+0x128>
    4bfe:	0b c1       	rjmp	.+534    	; 0x4e16 <vTaskDelay+0x2da>
    4c00:	d7 01       	movw	r26, r14
    4c02:	15 96       	adiw	r26, 0x05	; 5
    4c04:	ed 91       	ld	r30, X+
    4c06:	fc 91       	ld	r31, X
    4c08:	16 97       	sbiw	r26, 0x06	; 6
    4c0a:	c6 81       	ldd	r28, Z+6	; 0x06
    4c0c:	d7 81       	ldd	r29, Z+7	; 0x07
    4c0e:	ce 01       	movw	r24, r28
    4c10:	0c 96       	adiw	r24, 0x0c	; 12
    4c12:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4c16:	8e 01       	movw	r16, r28
    4c18:	0e 5f       	subi	r16, 0xFE	; 254
    4c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4c22:	8e 89       	ldd	r24, Y+22	; 0x16
    4c24:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4c28:	98 17       	cp	r25, r24
    4c2a:	10 f4       	brcc	.+4      	; 0x4c30 <vTaskDelay+0xf4>
    4c2c:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	9c 01       	movw	r18, r24
    4c34:	22 0f       	add	r18, r18
    4c36:	33 1f       	adc	r19, r19
    4c38:	22 0f       	add	r18, r18
    4c3a:	33 1f       	adc	r19, r19
    4c3c:	22 0f       	add	r18, r18
    4c3e:	33 1f       	adc	r19, r19
    4c40:	82 0f       	add	r24, r18
    4c42:	93 1f       	adc	r25, r19
    4c44:	b8 01       	movw	r22, r16
    4c46:	85 54       	subi	r24, 0x45	; 69
    4c48:	95 4e       	sbci	r25, 0xE5	; 229
    4c4a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4c4e:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4c52:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4c56:	9e 89       	ldd	r25, Y+22	; 0x16
    4c58:	86 89       	ldd	r24, Z+22	; 0x16
    4c5a:	98 17       	cp	r25, r24
    4c5c:	58 f0       	brcs	.+22     	; 0x4c74 <vTaskDelay+0x138>
    4c5e:	d0 92 8c 1a 	sts	0x1A8C, r13	; 0x801a8c <xYieldPending>
    4c62:	08 c0       	rjmp	.+16     	; 0x4c74 <vTaskDelay+0x138>
    4c64:	0f 2e       	mov	r0, r31
    4c66:	fc e9       	ldi	r31, 0x9C	; 156
    4c68:	ef 2e       	mov	r14, r31
    4c6a:	fa e1       	ldi	r31, 0x1A	; 26
    4c6c:	ff 2e       	mov	r15, r31
    4c6e:	f0 2d       	mov	r31, r0
    4c70:	dd 24       	eor	r13, r13
    4c72:	d3 94       	inc	r13
    4c74:	f7 01       	movw	r30, r14
    4c76:	80 81       	ld	r24, Z
    4c78:	81 11       	cpse	r24, r1
    4c7a:	c2 cf       	rjmp	.-124    	; 0x4c00 <vTaskDelay+0xc4>
    4c7c:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4c80:	88 23       	and	r24, r24
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <vTaskDelay+0x14a>
    4c84:	bd c0       	rjmp	.+378    	; 0x4e00 <vTaskDelay+0x2c4>
    4c86:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4c8a:	88 23       	and	r24, r24
    4c8c:	09 f4       	brne	.+2      	; 0x4c90 <vTaskDelay+0x154>
    4c8e:	b8 c0       	rjmp	.+368    	; 0x4e00 <vTaskDelay+0x2c4>
    4c90:	91 2c       	mov	r9, r1
    4c92:	bb 24       	eor	r11, r11
    4c94:	b3 94       	inc	r11
    4c96:	cc 24       	eor	r12, r12
    4c98:	ca 94       	dec	r12
    4c9a:	dc 2c       	mov	r13, r12
    4c9c:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    4ca0:	81 11       	cpse	r24, r1
    4ca2:	98 c0       	rjmp	.+304    	; 0x4dd4 <vTaskDelay+0x298>
    4ca4:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    4ca8:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4cac:	01 96       	adiw	r24, 0x01	; 1
    4cae:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <xTickCount+0x1>
    4cb2:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <xTickCount>
    4cb6:	e0 90 90 1a 	lds	r14, 0x1A90	; 0x801a90 <xTickCount>
    4cba:	f0 90 91 1a 	lds	r15, 0x1A91	; 0x801a91 <xTickCount+0x1>
    4cbe:	e1 14       	cp	r14, r1
    4cc0:	f1 04       	cpc	r15, r1
    4cc2:	89 f5       	brne	.+98     	; 0x4d26 <vTaskDelay+0x1ea>
    4cc4:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4cc8:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4ccc:	20 91 a5 1a 	lds	r18, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    4cd0:	30 91 a6 1a 	lds	r19, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    4cd4:	30 93 a8 1a 	sts	0x1AA8, r19	; 0x801aa8 <pxDelayedTaskList+0x1>
    4cd8:	20 93 a7 1a 	sts	0x1AA7, r18	; 0x801aa7 <pxDelayedTaskList>
    4cdc:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    4ce0:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    4ce4:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    4ce8:	8f 5f       	subi	r24, 0xFF	; 255
    4cea:	80 93 8b 1a 	sts	0x1A8B, r24	; 0x801a8b <xNumOfOverflows>
    4cee:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4cf2:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4cf6:	80 81       	ld	r24, Z
    4cf8:	81 11       	cpse	r24, r1
    4cfa:	05 c0       	rjmp	.+10     	; 0x4d06 <vTaskDelay+0x1ca>
    4cfc:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4d00:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    4d04:	10 c0       	rjmp	.+32     	; 0x4d26 <vTaskDelay+0x1ea>
    4d06:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4d0a:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4d0e:	05 80       	ldd	r0, Z+5	; 0x05
    4d10:	f6 81       	ldd	r31, Z+6	; 0x06
    4d12:	e0 2d       	mov	r30, r0
    4d14:	06 80       	ldd	r0, Z+6	; 0x06
    4d16:	f7 81       	ldd	r31, Z+7	; 0x07
    4d18:	e0 2d       	mov	r30, r0
    4d1a:	82 81       	ldd	r24, Z+2	; 0x02
    4d1c:	93 81       	ldd	r25, Z+3	; 0x03
    4d1e:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4d22:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    4d26:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    4d2a:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4d2e:	e8 16       	cp	r14, r24
    4d30:	f9 06       	cpc	r15, r25
    4d32:	08 f4       	brcc	.+2      	; 0x4d36 <vTaskDelay+0x1fa>
    4d34:	77 c0       	rjmp	.+238    	; 0x4e24 <vTaskDelay+0x2e8>
    4d36:	a9 2c       	mov	r10, r9
    4d38:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4d3c:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4d40:	80 81       	ld	r24, Z
    4d42:	81 11       	cpse	r24, r1
    4d44:	05 c0       	rjmp	.+10     	; 0x4d50 <vTaskDelay+0x214>
    4d46:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4d4a:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    4d4e:	48 c0       	rjmp	.+144    	; 0x4de0 <vTaskDelay+0x2a4>
    4d50:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    4d54:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    4d58:	05 80       	ldd	r0, Z+5	; 0x05
    4d5a:	f6 81       	ldd	r31, Z+6	; 0x06
    4d5c:	e0 2d       	mov	r30, r0
    4d5e:	c6 81       	ldd	r28, Z+6	; 0x06
    4d60:	d7 81       	ldd	r29, Z+7	; 0x07
    4d62:	8a 81       	ldd	r24, Y+2	; 0x02
    4d64:	9b 81       	ldd	r25, Y+3	; 0x03
    4d66:	e8 16       	cp	r14, r24
    4d68:	f9 06       	cpc	r15, r25
    4d6a:	28 f4       	brcc	.+10     	; 0x4d76 <vTaskDelay+0x23a>
    4d6c:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4d70:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    4d74:	35 c0       	rjmp	.+106    	; 0x4de0 <vTaskDelay+0x2a4>
    4d76:	8e 01       	movw	r16, r28
    4d78:	0e 5f       	subi	r16, 0xFE	; 254
    4d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7c:	c8 01       	movw	r24, r16
    4d7e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4d82:	8c 89       	ldd	r24, Y+20	; 0x14
    4d84:	9d 89       	ldd	r25, Y+21	; 0x15
    4d86:	89 2b       	or	r24, r25
    4d88:	21 f0       	breq	.+8      	; 0x4d92 <vTaskDelay+0x256>
    4d8a:	ce 01       	movw	r24, r28
    4d8c:	0c 96       	adiw	r24, 0x0c	; 12
    4d8e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    4d92:	8e 89       	ldd	r24, Y+22	; 0x16
    4d94:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4d98:	98 17       	cp	r25, r24
    4d9a:	10 f4       	brcc	.+4      	; 0x4da0 <vTaskDelay+0x264>
    4d9c:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	9c 01       	movw	r18, r24
    4da4:	22 0f       	add	r18, r18
    4da6:	33 1f       	adc	r19, r19
    4da8:	22 0f       	add	r18, r18
    4daa:	33 1f       	adc	r19, r19
    4dac:	22 0f       	add	r18, r18
    4dae:	33 1f       	adc	r19, r19
    4db0:	82 0f       	add	r24, r18
    4db2:	93 1f       	adc	r25, r19
    4db4:	b8 01       	movw	r22, r16
    4db6:	85 54       	subi	r24, 0x45	; 69
    4db8:	95 4e       	sbci	r25, 0xE5	; 229
    4dba:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4dbe:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4dc2:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4dc6:	9e 89       	ldd	r25, Y+22	; 0x16
    4dc8:	86 89       	ldd	r24, Z+22	; 0x16
    4dca:	98 17       	cp	r25, r24
    4dcc:	08 f4       	brcc	.+2      	; 0x4dd0 <vTaskDelay+0x294>
    4dce:	b4 cf       	rjmp	.-152    	; 0x4d38 <vTaskDelay+0x1fc>
    4dd0:	ab 2c       	mov	r10, r11
    4dd2:	b2 cf       	rjmp	.-156    	; 0x4d38 <vTaskDelay+0x1fc>
    4dd4:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4dd8:	8f 5f       	subi	r24, 0xFF	; 255
    4dda:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    4dde:	22 c0       	rjmp	.+68     	; 0x4e24 <vTaskDelay+0x2e8>
    4de0:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4de4:	81 11       	cpse	r24, r1
    4de6:	01 c0       	rjmp	.+2      	; 0x4dea <vTaskDelay+0x2ae>
    4de8:	a1 10       	cpse	r10, r1
    4dea:	b0 92 8c 1a 	sts	0x1A8C, r11	; 0x801a8c <xYieldPending>
    4dee:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4df2:	81 50       	subi	r24, 0x01	; 1
    4df4:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    4df8:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    4dfc:	81 11       	cpse	r24, r1
    4dfe:	4e cf       	rjmp	.-356    	; 0x4c9c <vTaskDelay+0x160>
    4e00:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4e04:	81 30       	cpi	r24, 0x01	; 1
    4e06:	31 f4       	brne	.+12     	; 0x4e14 <vTaskDelay+0x2d8>
    4e08:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	03 c0       	rjmp	.+6      	; 0x4e16 <vTaskDelay+0x2da>
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	01 c0       	rjmp	.+2      	; 0x4e16 <vTaskDelay+0x2da>
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	0f 90       	pop	r0
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	81 11       	cpse	r24, r1
    4e1c:	08 c0       	rjmp	.+16     	; 0x4e2e <vTaskDelay+0x2f2>
    4e1e:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    4e22:	05 c0       	rjmp	.+10     	; 0x4e2e <vTaskDelay+0x2f2>
    4e24:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    4e28:	81 11       	cpse	r24, r1
    4e2a:	df cf       	rjmp	.-66     	; 0x4dea <vTaskDelay+0x2ae>
    4e2c:	e0 cf       	rjmp	.-64     	; 0x4dee <vTaskDelay+0x2b2>
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	1f 91       	pop	r17
    4e34:	0f 91       	pop	r16
    4e36:	ff 90       	pop	r15
    4e38:	ef 90       	pop	r14
    4e3a:	df 90       	pop	r13
    4e3c:	cf 90       	pop	r12
    4e3e:	bf 90       	pop	r11
    4e40:	af 90       	pop	r10
    4e42:	9f 90       	pop	r9
    4e44:	08 95       	ret

00004e46 <vTaskStartScheduler>:
    4e46:	cf 92       	push	r12
    4e48:	df 92       	push	r13
    4e4a:	ef 92       	push	r14
    4e4c:	ff 92       	push	r15
    4e4e:	0f 93       	push	r16
    4e50:	1f 93       	push	r17
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	85 e5       	ldi	r24, 0x55	; 85
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4e5e:	8c 01       	movw	r16, r24
    4e60:	89 2b       	or	r24, r25
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <vTaskStartScheduler+0x20>
    4e64:	cb c0       	rjmp	.+406    	; 0x4ffc <vTaskStartScheduler+0x1b6>
    4e66:	88 e2       	ldi	r24, 0x28	; 40
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
    4e6e:	ec 01       	movw	r28, r24
    4e70:	89 2b       	or	r24, r25
    4e72:	69 f0       	breq	.+26     	; 0x4e8e <vTaskStartScheduler+0x48>
    4e74:	18 8f       	std	Y+24, r17	; 0x18
    4e76:	0f 8b       	std	Y+23, r16	; 0x17
    4e78:	0c 5a       	subi	r16, 0xAC	; 172
    4e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7c:	89 e4       	ldi	r24, 0x49	; 73
    4e7e:	89 8f       	std	Y+25, r24	; 0x19
    4e80:	eb e4       	ldi	r30, 0x4B	; 75
    4e82:	f7 e0       	ldi	r31, 0x07	; 7
    4e84:	de 01       	movw	r26, r28
    4e86:	5a 96       	adiw	r26, 0x1a	; 26
    4e88:	22 e5       	ldi	r18, 0x52	; 82
    4e8a:	37 e0       	ldi	r19, 0x07	; 7
    4e8c:	04 c0       	rjmp	.+8      	; 0x4e96 <vTaskStartScheduler+0x50>
    4e8e:	c8 01       	movw	r24, r16
    4e90:	0e 94 73 09 	call	0x12e6	; 0x12e6 <vPortFree>
    4e94:	b3 c0       	rjmp	.+358    	; 0x4ffc <vTaskStartScheduler+0x1b6>
    4e96:	91 91       	ld	r25, Z+
    4e98:	9d 93       	st	X+, r25
    4e9a:	99 23       	and	r25, r25
    4e9c:	19 f0       	breq	.+6      	; 0x4ea4 <vTaskStartScheduler+0x5e>
    4e9e:	2e 17       	cp	r18, r30
    4ea0:	3f 07       	cpc	r19, r31
    4ea2:	c9 f7       	brne	.-14     	; 0x4e96 <vTaskStartScheduler+0x50>
    4ea4:	18 a2       	std	Y+32, r1	; 0x20
    4ea6:	1e 8a       	std	Y+22, r1	; 0x16
    4ea8:	19 a2       	std	Y+33, r1	; 0x21
    4eaa:	1a a2       	std	Y+34, r1	; 0x22
    4eac:	7e 01       	movw	r14, r28
    4eae:	82 e0       	ldi	r24, 0x02	; 2
    4eb0:	e8 0e       	add	r14, r24
    4eb2:	f1 1c       	adc	r15, r1
    4eb4:	c7 01       	movw	r24, r14
    4eb6:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4eba:	ce 01       	movw	r24, r28
    4ebc:	0c 96       	adiw	r24, 0x0c	; 12
    4ebe:	0e 94 96 0c 	call	0x192c	; 0x192c <vListInitialiseItem>
    4ec2:	d9 87       	std	Y+9, r29	; 0x09
    4ec4:	c8 87       	std	Y+8, r28	; 0x08
    4ec6:	86 e0       	ldi	r24, 0x06	; 6
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	9d 87       	std	Y+13, r25	; 0x0d
    4ecc:	8c 87       	std	Y+12, r24	; 0x0c
    4ece:	db 8b       	std	Y+19, r29	; 0x13
    4ed0:	ca 8b       	std	Y+18, r28	; 0x12
    4ed2:	1b a2       	std	Y+35, r1	; 0x23
    4ed4:	1c a2       	std	Y+36, r1	; 0x24
    4ed6:	1d a2       	std	Y+37, r1	; 0x25
    4ed8:	1e a2       	std	Y+38, r1	; 0x26
    4eda:	1f a2       	std	Y+39, r1	; 0x27
    4edc:	40 e0       	ldi	r20, 0x00	; 0
    4ede:	50 e0       	ldi	r21, 0x00	; 0
    4ee0:	69 e1       	ldi	r22, 0x19	; 25
    4ee2:	71 e0       	ldi	r23, 0x01	; 1
    4ee4:	c8 01       	movw	r24, r16
    4ee6:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <pxPortInitialiseStack>
    4eea:	99 83       	std	Y+1, r25	; 0x01
    4eec:	88 83       	st	Y, r24
    4eee:	0f b6       	in	r0, 0x3f	; 63
    4ef0:	f8 94       	cli
    4ef2:	0f 92       	push	r0
    4ef4:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    4ef8:	8f 5f       	subi	r24, 0xFF	; 255
    4efa:	80 93 92 1a 	sts	0x1A92, r24	; 0x801a92 <uxCurrentNumberOfTasks>
    4efe:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4f02:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4f06:	89 2b       	or	r24, r25
    4f08:	a9 f5       	brne	.+106    	; 0x4f74 <vTaskStartScheduler+0x12e>
    4f0a:	d0 93 f2 1a 	sts	0x1AF2, r29	; 0x801af2 <pxCurrentTCB+0x1>
    4f0e:	c0 93 f1 1a 	sts	0x1AF1, r28	; 0x801af1 <pxCurrentTCB>
    4f12:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    4f16:	81 30       	cpi	r24, 0x01	; 1
    4f18:	e1 f5       	brne	.+120    	; 0x4f92 <vTaskStartScheduler+0x14c>
    4f1a:	0b eb       	ldi	r16, 0xBB	; 187
    4f1c:	1a e1       	ldi	r17, 0x1A	; 26
    4f1e:	0f 2e       	mov	r0, r31
    4f20:	f1 ef       	ldi	r31, 0xF1	; 241
    4f22:	cf 2e       	mov	r12, r31
    4f24:	fa e1       	ldi	r31, 0x1A	; 26
    4f26:	df 2e       	mov	r13, r31
    4f28:	f0 2d       	mov	r31, r0
    4f2a:	c8 01       	movw	r24, r16
    4f2c:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f30:	07 5f       	subi	r16, 0xF7	; 247
    4f32:	1f 4f       	sbci	r17, 0xFF	; 255
    4f34:	0c 15       	cp	r16, r12
    4f36:	1d 05       	cpc	r17, r13
    4f38:	c1 f7       	brne	.-16     	; 0x4f2a <vTaskStartScheduler+0xe4>
    4f3a:	82 eb       	ldi	r24, 0xB2	; 178
    4f3c:	9a e1       	ldi	r25, 0x1A	; 26
    4f3e:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f42:	89 ea       	ldi	r24, 0xA9	; 169
    4f44:	9a e1       	ldi	r25, 0x1A	; 26
    4f46:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f4a:	8c e9       	ldi	r24, 0x9C	; 156
    4f4c:	9a e1       	ldi	r25, 0x1A	; 26
    4f4e:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f52:	83 e9       	ldi	r24, 0x93	; 147
    4f54:	9a e1       	ldi	r25, 0x1A	; 26
    4f56:	0e 94 88 0c 	call	0x1910	; 0x1910 <vListInitialise>
    4f5a:	82 eb       	ldi	r24, 0xB2	; 178
    4f5c:	9a e1       	ldi	r25, 0x1A	; 26
    4f5e:	90 93 a8 1a 	sts	0x1AA8, r25	; 0x801aa8 <pxDelayedTaskList+0x1>
    4f62:	80 93 a7 1a 	sts	0x1AA7, r24	; 0x801aa7 <pxDelayedTaskList>
    4f66:	89 ea       	ldi	r24, 0xA9	; 169
    4f68:	9a e1       	ldi	r25, 0x1A	; 26
    4f6a:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    4f6e:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    4f72:	0f c0       	rjmp	.+30     	; 0x4f92 <vTaskStartScheduler+0x14c>
    4f74:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <xSchedulerRunning>
    4f78:	81 11       	cpse	r24, r1
    4f7a:	0b c0       	rjmp	.+22     	; 0x4f92 <vTaskStartScheduler+0x14c>
    4f7c:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4f80:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4f84:	86 89       	ldd	r24, Z+22	; 0x16
    4f86:	81 11       	cpse	r24, r1
    4f88:	04 c0       	rjmp	.+8      	; 0x4f92 <vTaskStartScheduler+0x14c>
    4f8a:	d0 93 f2 1a 	sts	0x1AF2, r29	; 0x801af2 <pxCurrentTCB+0x1>
    4f8e:	c0 93 f1 1a 	sts	0x1AF1, r28	; 0x801af1 <pxCurrentTCB>
    4f92:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <uxTaskNumber>
    4f96:	8f 5f       	subi	r24, 0xFF	; 255
    4f98:	80 93 8a 1a 	sts	0x1A8A, r24	; 0x801a8a <uxTaskNumber>
    4f9c:	8e 89       	ldd	r24, Y+22	; 0x16
    4f9e:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    4fa2:	98 17       	cp	r25, r24
    4fa4:	10 f4       	brcc	.+4      	; 0x4faa <vTaskStartScheduler+0x164>
    4fa6:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	9c 01       	movw	r18, r24
    4fae:	22 0f       	add	r18, r18
    4fb0:	33 1f       	adc	r19, r19
    4fb2:	22 0f       	add	r18, r18
    4fb4:	33 1f       	adc	r19, r19
    4fb6:	22 0f       	add	r18, r18
    4fb8:	33 1f       	adc	r19, r19
    4fba:	82 0f       	add	r24, r18
    4fbc:	93 1f       	adc	r25, r19
    4fbe:	b7 01       	movw	r22, r14
    4fc0:	85 54       	subi	r24, 0x45	; 69
    4fc2:	95 4e       	sbci	r25, 0xE5	; 229
    4fc4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    4fc8:	0f 90       	pop	r0
    4fca:	0f be       	out	0x3f, r0	; 63
    4fcc:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <xSchedulerRunning>
    4fd0:	88 23       	and	r24, r24
    4fd2:	21 f0       	breq	.+8      	; 0x4fdc <vTaskStartScheduler+0x196>
    4fd4:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    4fd8:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    4fdc:	f8 94       	cli
    4fde:	8f ef       	ldi	r24, 0xFF	; 255
    4fe0:	9f ef       	ldi	r25, 0xFF	; 255
    4fe2:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    4fe6:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	80 93 8e 1a 	sts	0x1A8E, r24	; 0x801a8e <xSchedulerRunning>
    4ff0:	10 92 91 1a 	sts	0x1A91, r1	; 0x801a91 <xTickCount+0x1>
    4ff4:	10 92 90 1a 	sts	0x1A90, r1	; 0x801a90 <xTickCount>
    4ff8:	0e 94 3c 18 	call	0x3078	; 0x3078 <xPortStartScheduler>
    4ffc:	df 91       	pop	r29
    4ffe:	cf 91       	pop	r28
    5000:	1f 91       	pop	r17
    5002:	0f 91       	pop	r16
    5004:	ff 90       	pop	r15
    5006:	ef 90       	pop	r14
    5008:	df 90       	pop	r13
    500a:	cf 90       	pop	r12
    500c:	08 95       	ret

0000500e <vTaskSuspendAll>:
    500e:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    5012:	8f 5f       	subi	r24, 0xFF	; 255
    5014:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <uxSchedulerSuspended>
    5018:	08 95       	ret

0000501a <xTaskResumeAll>:
    501a:	9f 92       	push	r9
    501c:	af 92       	push	r10
    501e:	bf 92       	push	r11
    5020:	cf 92       	push	r12
    5022:	df 92       	push	r13
    5024:	ef 92       	push	r14
    5026:	ff 92       	push	r15
    5028:	0f 93       	push	r16
    502a:	1f 93       	push	r17
    502c:	cf 93       	push	r28
    502e:	df 93       	push	r29
    5030:	0f b6       	in	r0, 0x3f	; 63
    5032:	f8 94       	cli
    5034:	0f 92       	push	r0
    5036:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    503a:	81 50       	subi	r24, 0x01	; 1
    503c:	80 93 87 1a 	sts	0x1A87, r24	; 0x801a87 <uxSchedulerSuspended>
    5040:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    5044:	81 11       	cpse	r24, r1
    5046:	0d c1       	rjmp	.+538    	; 0x5262 <xTaskResumeAll+0x248>
    5048:	80 91 92 1a 	lds	r24, 0x1A92	; 0x801a92 <uxCurrentNumberOfTasks>
    504c:	81 11       	cpse	r24, r1
    504e:	33 c0       	rjmp	.+102    	; 0x50b6 <xTaskResumeAll+0x9c>
    5050:	0b c1       	rjmp	.+534    	; 0x5268 <xTaskResumeAll+0x24e>
    5052:	d7 01       	movw	r26, r14
    5054:	15 96       	adiw	r26, 0x05	; 5
    5056:	ed 91       	ld	r30, X+
    5058:	fc 91       	ld	r31, X
    505a:	16 97       	sbiw	r26, 0x06	; 6
    505c:	c6 81       	ldd	r28, Z+6	; 0x06
    505e:	d7 81       	ldd	r29, Z+7	; 0x07
    5060:	ce 01       	movw	r24, r28
    5062:	0c 96       	adiw	r24, 0x0c	; 12
    5064:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5068:	8e 01       	movw	r16, r28
    506a:	0e 5f       	subi	r16, 0xFE	; 254
    506c:	1f 4f       	sbci	r17, 0xFF	; 255
    506e:	c8 01       	movw	r24, r16
    5070:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5074:	8e 89       	ldd	r24, Y+22	; 0x16
    5076:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    507a:	98 17       	cp	r25, r24
    507c:	10 f4       	brcc	.+4      	; 0x5082 <xTaskResumeAll+0x68>
    507e:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	9c 01       	movw	r18, r24
    5086:	22 0f       	add	r18, r18
    5088:	33 1f       	adc	r19, r19
    508a:	22 0f       	add	r18, r18
    508c:	33 1f       	adc	r19, r19
    508e:	22 0f       	add	r18, r18
    5090:	33 1f       	adc	r19, r19
    5092:	82 0f       	add	r24, r18
    5094:	93 1f       	adc	r25, r19
    5096:	b8 01       	movw	r22, r16
    5098:	85 54       	subi	r24, 0x45	; 69
    509a:	95 4e       	sbci	r25, 0xE5	; 229
    509c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    50a0:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    50a4:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    50a8:	9e 89       	ldd	r25, Y+22	; 0x16
    50aa:	86 89       	ldd	r24, Z+22	; 0x16
    50ac:	98 17       	cp	r25, r24
    50ae:	58 f0       	brcs	.+22     	; 0x50c6 <xTaskResumeAll+0xac>
    50b0:	d0 92 8c 1a 	sts	0x1A8C, r13	; 0x801a8c <xYieldPending>
    50b4:	08 c0       	rjmp	.+16     	; 0x50c6 <xTaskResumeAll+0xac>
    50b6:	0f 2e       	mov	r0, r31
    50b8:	fc e9       	ldi	r31, 0x9C	; 156
    50ba:	ef 2e       	mov	r14, r31
    50bc:	fa e1       	ldi	r31, 0x1A	; 26
    50be:	ff 2e       	mov	r15, r31
    50c0:	f0 2d       	mov	r31, r0
    50c2:	dd 24       	eor	r13, r13
    50c4:	d3 94       	inc	r13
    50c6:	f7 01       	movw	r30, r14
    50c8:	80 81       	ld	r24, Z
    50ca:	81 11       	cpse	r24, r1
    50cc:	c2 cf       	rjmp	.-124    	; 0x5052 <xTaskResumeAll+0x38>
    50ce:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    50d2:	88 23       	and	r24, r24
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <xTaskResumeAll+0xbe>
    50d6:	bd c0       	rjmp	.+378    	; 0x5252 <xTaskResumeAll+0x238>
    50d8:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    50dc:	88 23       	and	r24, r24
    50de:	09 f4       	brne	.+2      	; 0x50e2 <xTaskResumeAll+0xc8>
    50e0:	b8 c0       	rjmp	.+368    	; 0x5252 <xTaskResumeAll+0x238>
    50e2:	91 2c       	mov	r9, r1
    50e4:	bb 24       	eor	r11, r11
    50e6:	b3 94       	inc	r11
    50e8:	cc 24       	eor	r12, r12
    50ea:	ca 94       	dec	r12
    50ec:	dc 2c       	mov	r13, r12
    50ee:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    50f2:	81 11       	cpse	r24, r1
    50f4:	98 c0       	rjmp	.+304    	; 0x5226 <xTaskResumeAll+0x20c>
    50f6:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    50fa:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    50fe:	01 96       	adiw	r24, 0x01	; 1
    5100:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <xTickCount+0x1>
    5104:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <xTickCount>
    5108:	e0 90 90 1a 	lds	r14, 0x1A90	; 0x801a90 <xTickCount>
    510c:	f0 90 91 1a 	lds	r15, 0x1A91	; 0x801a91 <xTickCount+0x1>
    5110:	e1 14       	cp	r14, r1
    5112:	f1 04       	cpc	r15, r1
    5114:	89 f5       	brne	.+98     	; 0x5178 <xTaskResumeAll+0x15e>
    5116:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    511a:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    511e:	20 91 a5 1a 	lds	r18, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    5122:	30 91 a6 1a 	lds	r19, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    5126:	30 93 a8 1a 	sts	0x1AA8, r19	; 0x801aa8 <pxDelayedTaskList+0x1>
    512a:	20 93 a7 1a 	sts	0x1AA7, r18	; 0x801aa7 <pxDelayedTaskList>
    512e:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    5132:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    5136:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    513a:	8f 5f       	subi	r24, 0xFF	; 255
    513c:	80 93 8b 1a 	sts	0x1A8B, r24	; 0x801a8b <xNumOfOverflows>
    5140:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    5144:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    5148:	80 81       	ld	r24, Z
    514a:	81 11       	cpse	r24, r1
    514c:	05 c0       	rjmp	.+10     	; 0x5158 <xTaskResumeAll+0x13e>
    514e:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5152:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    5156:	10 c0       	rjmp	.+32     	; 0x5178 <xTaskResumeAll+0x15e>
    5158:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    515c:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    5160:	05 80       	ldd	r0, Z+5	; 0x05
    5162:	f6 81       	ldd	r31, Z+6	; 0x06
    5164:	e0 2d       	mov	r30, r0
    5166:	06 80       	ldd	r0, Z+6	; 0x06
    5168:	f7 81       	ldd	r31, Z+7	; 0x07
    516a:	e0 2d       	mov	r30, r0
    516c:	82 81       	ldd	r24, Z+2	; 0x02
    516e:	93 81       	ldd	r25, Z+3	; 0x03
    5170:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5174:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    5178:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    517c:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5180:	e8 16       	cp	r14, r24
    5182:	f9 06       	cpc	r15, r25
    5184:	08 f4       	brcc	.+2      	; 0x5188 <xTaskResumeAll+0x16e>
    5186:	73 c0       	rjmp	.+230    	; 0x526e <xTaskResumeAll+0x254>
    5188:	a9 2c       	mov	r10, r9
    518a:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    518e:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    5192:	80 81       	ld	r24, Z
    5194:	81 11       	cpse	r24, r1
    5196:	05 c0       	rjmp	.+10     	; 0x51a2 <xTaskResumeAll+0x188>
    5198:	d0 92 89 1a 	sts	0x1A89, r13	; 0x801a89 <xNextTaskUnblockTime+0x1>
    519c:	c0 92 88 1a 	sts	0x1A88, r12	; 0x801a88 <xNextTaskUnblockTime>
    51a0:	48 c0       	rjmp	.+144    	; 0x5232 <xTaskResumeAll+0x218>
    51a2:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    51a6:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    51aa:	05 80       	ldd	r0, Z+5	; 0x05
    51ac:	f6 81       	ldd	r31, Z+6	; 0x06
    51ae:	e0 2d       	mov	r30, r0
    51b0:	c6 81       	ldd	r28, Z+6	; 0x06
    51b2:	d7 81       	ldd	r29, Z+7	; 0x07
    51b4:	8a 81       	ldd	r24, Y+2	; 0x02
    51b6:	9b 81       	ldd	r25, Y+3	; 0x03
    51b8:	e8 16       	cp	r14, r24
    51ba:	f9 06       	cpc	r15, r25
    51bc:	28 f4       	brcc	.+10     	; 0x51c8 <xTaskResumeAll+0x1ae>
    51be:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    51c2:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    51c6:	35 c0       	rjmp	.+106    	; 0x5232 <xTaskResumeAll+0x218>
    51c8:	8e 01       	movw	r16, r28
    51ca:	0e 5f       	subi	r16, 0xFE	; 254
    51cc:	1f 4f       	sbci	r17, 0xFF	; 255
    51ce:	c8 01       	movw	r24, r16
    51d0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    51d4:	8c 89       	ldd	r24, Y+20	; 0x14
    51d6:	9d 89       	ldd	r25, Y+21	; 0x15
    51d8:	89 2b       	or	r24, r25
    51da:	21 f0       	breq	.+8      	; 0x51e4 <xTaskResumeAll+0x1ca>
    51dc:	ce 01       	movw	r24, r28
    51de:	0c 96       	adiw	r24, 0x0c	; 12
    51e0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    51e4:	8e 89       	ldd	r24, Y+22	; 0x16
    51e6:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    51ea:	98 17       	cp	r25, r24
    51ec:	10 f4       	brcc	.+4      	; 0x51f2 <xTaskResumeAll+0x1d8>
    51ee:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	9c 01       	movw	r18, r24
    51f6:	22 0f       	add	r18, r18
    51f8:	33 1f       	adc	r19, r19
    51fa:	22 0f       	add	r18, r18
    51fc:	33 1f       	adc	r19, r19
    51fe:	22 0f       	add	r18, r18
    5200:	33 1f       	adc	r19, r19
    5202:	82 0f       	add	r24, r18
    5204:	93 1f       	adc	r25, r19
    5206:	b8 01       	movw	r22, r16
    5208:	85 54       	subi	r24, 0x45	; 69
    520a:	95 4e       	sbci	r25, 0xE5	; 229
    520c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5210:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5214:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5218:	9e 89       	ldd	r25, Y+22	; 0x16
    521a:	86 89       	ldd	r24, Z+22	; 0x16
    521c:	98 17       	cp	r25, r24
    521e:	08 f4       	brcc	.+2      	; 0x5222 <xTaskResumeAll+0x208>
    5220:	b4 cf       	rjmp	.-152    	; 0x518a <xTaskResumeAll+0x170>
    5222:	ab 2c       	mov	r10, r11
    5224:	b2 cf       	rjmp	.-156    	; 0x518a <xTaskResumeAll+0x170>
    5226:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    522a:	8f 5f       	subi	r24, 0xFF	; 255
    522c:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    5230:	1e c0       	rjmp	.+60     	; 0x526e <xTaskResumeAll+0x254>
    5232:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    5236:	81 11       	cpse	r24, r1
    5238:	01 c0       	rjmp	.+2      	; 0x523c <xTaskResumeAll+0x222>
    523a:	a1 10       	cpse	r10, r1
    523c:	b0 92 8c 1a 	sts	0x1A8C, r11	; 0x801a8c <xYieldPending>
    5240:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    5244:	81 50       	subi	r24, 0x01	; 1
    5246:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    524a:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    524e:	81 11       	cpse	r24, r1
    5250:	4e cf       	rjmp	.-356    	; 0x50ee <xTaskResumeAll+0xd4>
    5252:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    5256:	81 30       	cpi	r24, 0x01	; 1
    5258:	31 f4       	brne	.+12     	; 0x5266 <xTaskResumeAll+0x24c>
    525a:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    525e:	81 e0       	ldi	r24, 0x01	; 1
    5260:	03 c0       	rjmp	.+6      	; 0x5268 <xTaskResumeAll+0x24e>
    5262:	80 e0       	ldi	r24, 0x00	; 0
    5264:	01 c0       	rjmp	.+2      	; 0x5268 <xTaskResumeAll+0x24e>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	0f 90       	pop	r0
    526a:	0f be       	out	0x3f, r0	; 63
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <xTaskResumeAll+0x25e>
    526e:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    5272:	81 11       	cpse	r24, r1
    5274:	e3 cf       	rjmp	.-58     	; 0x523c <xTaskResumeAll+0x222>
    5276:	e4 cf       	rjmp	.-56     	; 0x5240 <xTaskResumeAll+0x226>
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	1f 91       	pop	r17
    527e:	0f 91       	pop	r16
    5280:	ff 90       	pop	r15
    5282:	ef 90       	pop	r14
    5284:	df 90       	pop	r13
    5286:	cf 90       	pop	r12
    5288:	bf 90       	pop	r11
    528a:	af 90       	pop	r10
    528c:	9f 90       	pop	r9
    528e:	08 95       	ret

00005290 <xTaskGetTickCount>:
    5290:	0f b6       	in	r0, 0x3f	; 63
    5292:	f8 94       	cli
    5294:	0f 92       	push	r0
    5296:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    529a:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    529e:	0f 90       	pop	r0
    52a0:	0f be       	out	0x3f, r0	; 63
    52a2:	08 95       	ret

000052a4 <xTaskIncrementTick>:
    52a4:	cf 92       	push	r12
    52a6:	df 92       	push	r13
    52a8:	ef 92       	push	r14
    52aa:	ff 92       	push	r15
    52ac:	0f 93       	push	r16
    52ae:	1f 93       	push	r17
    52b0:	cf 93       	push	r28
    52b2:	df 93       	push	r29
    52b4:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    52b8:	81 11       	cpse	r24, r1
    52ba:	9f c0       	rjmp	.+318    	; 0x53fa <xTaskIncrementTick+0x156>
    52bc:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    52c0:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    52c4:	01 96       	adiw	r24, 0x01	; 1
    52c6:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <xTickCount+0x1>
    52ca:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <xTickCount>
    52ce:	e0 90 90 1a 	lds	r14, 0x1A90	; 0x801a90 <xTickCount>
    52d2:	f0 90 91 1a 	lds	r15, 0x1A91	; 0x801a91 <xTickCount+0x1>
    52d6:	e1 14       	cp	r14, r1
    52d8:	f1 04       	cpc	r15, r1
    52da:	99 f5       	brne	.+102    	; 0x5342 <xTaskIncrementTick+0x9e>
    52dc:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    52e0:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    52e4:	20 91 a5 1a 	lds	r18, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    52e8:	30 91 a6 1a 	lds	r19, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    52ec:	30 93 a8 1a 	sts	0x1AA8, r19	; 0x801aa8 <pxDelayedTaskList+0x1>
    52f0:	20 93 a7 1a 	sts	0x1AA7, r18	; 0x801aa7 <pxDelayedTaskList>
    52f4:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    52f8:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <pxOverflowDelayedTaskList>
    52fc:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    5300:	8f 5f       	subi	r24, 0xFF	; 255
    5302:	80 93 8b 1a 	sts	0x1A8B, r24	; 0x801a8b <xNumOfOverflows>
    5306:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    530a:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    530e:	80 81       	ld	r24, Z
    5310:	81 11       	cpse	r24, r1
    5312:	07 c0       	rjmp	.+14     	; 0x5322 <xTaskIncrementTick+0x7e>
    5314:	8f ef       	ldi	r24, 0xFF	; 255
    5316:	9f ef       	ldi	r25, 0xFF	; 255
    5318:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    531c:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    5320:	10 c0       	rjmp	.+32     	; 0x5342 <xTaskIncrementTick+0x9e>
    5322:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    5326:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    532a:	05 80       	ldd	r0, Z+5	; 0x05
    532c:	f6 81       	ldd	r31, Z+6	; 0x06
    532e:	e0 2d       	mov	r30, r0
    5330:	06 80       	ldd	r0, Z+6	; 0x06
    5332:	f7 81       	ldd	r31, Z+7	; 0x07
    5334:	e0 2d       	mov	r30, r0
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    533e:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    5342:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    5346:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    534a:	e8 16       	cp	r14, r24
    534c:	f9 06       	cpc	r15, r25
    534e:	10 f4       	brcc	.+4      	; 0x5354 <xTaskIncrementTick+0xb0>
    5350:	d1 2c       	mov	r13, r1
    5352:	59 c0       	rjmp	.+178    	; 0x5406 <xTaskIncrementTick+0x162>
    5354:	d1 2c       	mov	r13, r1
    5356:	cc 24       	eor	r12, r12
    5358:	c3 94       	inc	r12
    535a:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    535e:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    5362:	80 81       	ld	r24, Z
    5364:	81 11       	cpse	r24, r1
    5366:	07 c0       	rjmp	.+14     	; 0x5376 <xTaskIncrementTick+0xd2>
    5368:	8f ef       	ldi	r24, 0xFF	; 255
    536a:	9f ef       	ldi	r25, 0xFF	; 255
    536c:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5370:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    5374:	48 c0       	rjmp	.+144    	; 0x5406 <xTaskIncrementTick+0x162>
    5376:	e0 91 a7 1a 	lds	r30, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    537a:	f0 91 a8 1a 	lds	r31, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    537e:	05 80       	ldd	r0, Z+5	; 0x05
    5380:	f6 81       	ldd	r31, Z+6	; 0x06
    5382:	e0 2d       	mov	r30, r0
    5384:	c6 81       	ldd	r28, Z+6	; 0x06
    5386:	d7 81       	ldd	r29, Z+7	; 0x07
    5388:	8a 81       	ldd	r24, Y+2	; 0x02
    538a:	9b 81       	ldd	r25, Y+3	; 0x03
    538c:	e8 16       	cp	r14, r24
    538e:	f9 06       	cpc	r15, r25
    5390:	28 f4       	brcc	.+10     	; 0x539c <xTaskIncrementTick+0xf8>
    5392:	90 93 89 1a 	sts	0x1A89, r25	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5396:	80 93 88 1a 	sts	0x1A88, r24	; 0x801a88 <xNextTaskUnblockTime>
    539a:	35 c0       	rjmp	.+106    	; 0x5406 <xTaskIncrementTick+0x162>
    539c:	8e 01       	movw	r16, r28
    539e:	0e 5f       	subi	r16, 0xFE	; 254
    53a0:	1f 4f       	sbci	r17, 0xFF	; 255
    53a2:	c8 01       	movw	r24, r16
    53a4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    53a8:	8c 89       	ldd	r24, Y+20	; 0x14
    53aa:	9d 89       	ldd	r25, Y+21	; 0x15
    53ac:	89 2b       	or	r24, r25
    53ae:	21 f0       	breq	.+8      	; 0x53b8 <xTaskIncrementTick+0x114>
    53b0:	ce 01       	movw	r24, r28
    53b2:	0c 96       	adiw	r24, 0x0c	; 12
    53b4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    53b8:	8e 89       	ldd	r24, Y+22	; 0x16
    53ba:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    53be:	98 17       	cp	r25, r24
    53c0:	10 f4       	brcc	.+4      	; 0x53c6 <xTaskIncrementTick+0x122>
    53c2:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	9c 01       	movw	r18, r24
    53ca:	22 0f       	add	r18, r18
    53cc:	33 1f       	adc	r19, r19
    53ce:	22 0f       	add	r18, r18
    53d0:	33 1f       	adc	r19, r19
    53d2:	22 0f       	add	r18, r18
    53d4:	33 1f       	adc	r19, r19
    53d6:	82 0f       	add	r24, r18
    53d8:	93 1f       	adc	r25, r19
    53da:	b8 01       	movw	r22, r16
    53dc:	85 54       	subi	r24, 0x45	; 69
    53de:	95 4e       	sbci	r25, 0xE5	; 229
    53e0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    53e4:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    53e8:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    53ec:	9e 89       	ldd	r25, Y+22	; 0x16
    53ee:	86 89       	ldd	r24, Z+22	; 0x16
    53f0:	98 17       	cp	r25, r24
    53f2:	08 f4       	brcc	.+2      	; 0x53f6 <xTaskIncrementTick+0x152>
    53f4:	b2 cf       	rjmp	.-156    	; 0x535a <xTaskIncrementTick+0xb6>
    53f6:	dc 2c       	mov	r13, r12
    53f8:	b0 cf       	rjmp	.-160    	; 0x535a <xTaskIncrementTick+0xb6>
    53fa:	80 91 8d 1a 	lds	r24, 0x1A8D	; 0x801a8d <uxPendedTicks>
    53fe:	8f 5f       	subi	r24, 0xFF	; 255
    5400:	80 93 8d 1a 	sts	0x1A8D, r24	; 0x801a8d <uxPendedTicks>
    5404:	d1 2c       	mov	r13, r1
    5406:	80 91 8c 1a 	lds	r24, 0x1A8C	; 0x801a8c <xYieldPending>
    540a:	88 23       	and	r24, r24
    540c:	11 f0       	breq	.+4      	; 0x5412 <xTaskIncrementTick+0x16e>
    540e:	dd 24       	eor	r13, r13
    5410:	d3 94       	inc	r13
    5412:	8d 2d       	mov	r24, r13
    5414:	df 91       	pop	r29
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	ff 90       	pop	r15
    541e:	ef 90       	pop	r14
    5420:	df 90       	pop	r13
    5422:	cf 90       	pop	r12
    5424:	08 95       	ret

00005426 <vTaskSwitchContext>:
    5426:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    542a:	88 23       	and	r24, r24
    542c:	21 f0       	breq	.+8      	; 0x5436 <vTaskSwitchContext+0x10>
    542e:	81 e0       	ldi	r24, 0x01	; 1
    5430:	80 93 8c 1a 	sts	0x1A8C, r24	; 0x801a8c <xYieldPending>
    5434:	08 95       	ret
    5436:	10 92 8c 1a 	sts	0x1A8C, r1	; 0x801a8c <xYieldPending>
    543a:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    543e:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5442:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5446:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    544a:	2d 91       	ld	r18, X+
    544c:	3c 91       	ld	r19, X
    544e:	87 89       	ldd	r24, Z+23	; 0x17
    5450:	90 8d       	ldd	r25, Z+24	; 0x18
    5452:	82 17       	cp	r24, r18
    5454:	93 07       	cpc	r25, r19
    5456:	60 f0       	brcs	.+24     	; 0x5470 <vTaskSwitchContext+0x4a>
    5458:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    545c:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5460:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5464:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5468:	67 5e       	subi	r22, 0xE7	; 231
    546a:	7f 4f       	sbci	r23, 0xFF	; 255
    546c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <vApplicationStackOverflowHook>
    5470:	80 91 8f 1a 	lds	r24, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	fc 01       	movw	r30, r24
    5478:	ee 0f       	add	r30, r30
    547a:	ff 1f       	adc	r31, r31
    547c:	ee 0f       	add	r30, r30
    547e:	ff 1f       	adc	r31, r31
    5480:	ee 0f       	add	r30, r30
    5482:	ff 1f       	adc	r31, r31
    5484:	8e 0f       	add	r24, r30
    5486:	9f 1f       	adc	r25, r31
    5488:	fc 01       	movw	r30, r24
    548a:	e5 54       	subi	r30, 0x45	; 69
    548c:	f5 4e       	sbci	r31, 0xE5	; 229
    548e:	80 81       	ld	r24, Z
    5490:	81 11       	cpse	r24, r1
    5492:	17 c0       	rjmp	.+46     	; 0x54c2 <vTaskSwitchContext+0x9c>
    5494:	80 91 8f 1a 	lds	r24, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5498:	81 50       	subi	r24, 0x01	; 1
    549a:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    549e:	80 91 8f 1a 	lds	r24, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    54a2:	90 e0       	ldi	r25, 0x00	; 0
    54a4:	fc 01       	movw	r30, r24
    54a6:	ee 0f       	add	r30, r30
    54a8:	ff 1f       	adc	r31, r31
    54aa:	ee 0f       	add	r30, r30
    54ac:	ff 1f       	adc	r31, r31
    54ae:	ee 0f       	add	r30, r30
    54b0:	ff 1f       	adc	r31, r31
    54b2:	8e 0f       	add	r24, r30
    54b4:	9f 1f       	adc	r25, r31
    54b6:	fc 01       	movw	r30, r24
    54b8:	e5 54       	subi	r30, 0x45	; 69
    54ba:	f5 4e       	sbci	r31, 0xE5	; 229
    54bc:	80 81       	ld	r24, Z
    54be:	88 23       	and	r24, r24
    54c0:	49 f3       	breq	.-46     	; 0x5494 <vTaskSwitchContext+0x6e>
    54c2:	80 91 8f 1a 	lds	r24, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	9c 01       	movw	r18, r24
    54ca:	22 0f       	add	r18, r18
    54cc:	33 1f       	adc	r19, r19
    54ce:	22 0f       	add	r18, r18
    54d0:	33 1f       	adc	r19, r19
    54d2:	22 0f       	add	r18, r18
    54d4:	33 1f       	adc	r19, r19
    54d6:	28 0f       	add	r18, r24
    54d8:	39 1f       	adc	r19, r25
    54da:	d9 01       	movw	r26, r18
    54dc:	a5 54       	subi	r26, 0x45	; 69
    54de:	b5 4e       	sbci	r27, 0xE5	; 229
    54e0:	11 96       	adiw	r26, 0x01	; 1
    54e2:	ed 91       	ld	r30, X+
    54e4:	fc 91       	ld	r31, X
    54e6:	12 97       	sbiw	r26, 0x02	; 2
    54e8:	02 80       	ldd	r0, Z+2	; 0x02
    54ea:	f3 81       	ldd	r31, Z+3	; 0x03
    54ec:	e0 2d       	mov	r30, r0
    54ee:	12 96       	adiw	r26, 0x02	; 2
    54f0:	fc 93       	st	X, r31
    54f2:	ee 93       	st	-X, r30
    54f4:	11 97       	sbiw	r26, 0x01	; 1
    54f6:	22 54       	subi	r18, 0x42	; 66
    54f8:	35 4e       	sbci	r19, 0xE5	; 229
    54fa:	e2 17       	cp	r30, r18
    54fc:	f3 07       	cpc	r31, r19
    54fe:	29 f4       	brne	.+10     	; 0x550a <vTaskSwitchContext+0xe4>
    5500:	22 81       	ldd	r18, Z+2	; 0x02
    5502:	33 81       	ldd	r19, Z+3	; 0x03
    5504:	fd 01       	movw	r30, r26
    5506:	32 83       	std	Z+2, r19	; 0x02
    5508:	21 83       	std	Z+1, r18	; 0x01
    550a:	fc 01       	movw	r30, r24
    550c:	ee 0f       	add	r30, r30
    550e:	ff 1f       	adc	r31, r31
    5510:	ee 0f       	add	r30, r30
    5512:	ff 1f       	adc	r31, r31
    5514:	ee 0f       	add	r30, r30
    5516:	ff 1f       	adc	r31, r31
    5518:	8e 0f       	add	r24, r30
    551a:	9f 1f       	adc	r25, r31
    551c:	fc 01       	movw	r30, r24
    551e:	e5 54       	subi	r30, 0x45	; 69
    5520:	f5 4e       	sbci	r31, 0xE5	; 229
    5522:	01 80       	ldd	r0, Z+1	; 0x01
    5524:	f2 81       	ldd	r31, Z+2	; 0x02
    5526:	e0 2d       	mov	r30, r0
    5528:	86 81       	ldd	r24, Z+6	; 0x06
    552a:	97 81       	ldd	r25, Z+7	; 0x07
    552c:	90 93 f2 1a 	sts	0x1AF2, r25	; 0x801af2 <pxCurrentTCB+0x1>
    5530:	80 93 f1 1a 	sts	0x1AF1, r24	; 0x801af1 <pxCurrentTCB>
    5534:	08 95       	ret

00005536 <vTaskPlaceOnEventList>:
    5536:	cf 93       	push	r28
    5538:	df 93       	push	r29
    553a:	eb 01       	movw	r28, r22
    553c:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5540:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5544:	64 5f       	subi	r22, 0xF4	; 244
    5546:	7f 4f       	sbci	r23, 0xFF	; 255
    5548:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    554c:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5550:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5554:	02 96       	adiw	r24, 0x02	; 2
    5556:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    555a:	cf 3f       	cpi	r28, 0xFF	; 255
    555c:	8f ef       	ldi	r24, 0xFF	; 255
    555e:	d8 07       	cpc	r29, r24
    5560:	59 f4       	brne	.+22     	; 0x5578 <vTaskPlaceOnEventList+0x42>
    5562:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5566:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    556a:	6e 5f       	subi	r22, 0xFE	; 254
    556c:	7f 4f       	sbci	r23, 0xFF	; 255
    556e:	83 e9       	ldi	r24, 0x93	; 147
    5570:	9a e1       	ldi	r25, 0x1A	; 26
    5572:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5576:	37 c0       	rjmp	.+110    	; 0x55e6 <vTaskPlaceOnEventList+0xb0>
    5578:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    557c:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    5580:	c8 0f       	add	r28, r24
    5582:	d9 1f       	adc	r29, r25
    5584:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5588:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    558c:	d3 83       	std	Z+3, r29	; 0x03
    558e:	c2 83       	std	Z+2, r28	; 0x02
    5590:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    5594:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    5598:	c8 17       	cp	r28, r24
    559a:	d9 07       	cpc	r29, r25
    559c:	68 f4       	brcc	.+26     	; 0x55b8 <vTaskPlaceOnEventList+0x82>
    559e:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    55a2:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    55a6:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    55aa:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    55ae:	6e 5f       	subi	r22, 0xFE	; 254
    55b0:	7f 4f       	sbci	r23, 0xFF	; 255
    55b2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    55b6:	17 c0       	rjmp	.+46     	; 0x55e6 <vTaskPlaceOnEventList+0xb0>
    55b8:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    55bc:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    55c0:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    55c4:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    55c8:	6e 5f       	subi	r22, 0xFE	; 254
    55ca:	7f 4f       	sbci	r23, 0xFF	; 255
    55cc:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    55d0:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    55d4:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    55d8:	c8 17       	cp	r28, r24
    55da:	d9 07       	cpc	r29, r25
    55dc:	20 f4       	brcc	.+8      	; 0x55e6 <vTaskPlaceOnEventList+0xb0>
    55de:	d0 93 89 1a 	sts	0x1A89, r29	; 0x801a89 <xNextTaskUnblockTime+0x1>
    55e2:	c0 93 88 1a 	sts	0x1A88, r28	; 0x801a88 <xNextTaskUnblockTime>
    55e6:	df 91       	pop	r29
    55e8:	cf 91       	pop	r28
    55ea:	08 95       	ret

000055ec <xTaskRemoveFromEventList>:
    55ec:	0f 93       	push	r16
    55ee:	1f 93       	push	r17
    55f0:	cf 93       	push	r28
    55f2:	df 93       	push	r29
    55f4:	dc 01       	movw	r26, r24
    55f6:	15 96       	adiw	r26, 0x05	; 5
    55f8:	ed 91       	ld	r30, X+
    55fa:	fc 91       	ld	r31, X
    55fc:	16 97       	sbiw	r26, 0x06	; 6
    55fe:	c6 81       	ldd	r28, Z+6	; 0x06
    5600:	d7 81       	ldd	r29, Z+7	; 0x07
    5602:	8e 01       	movw	r16, r28
    5604:	04 5f       	subi	r16, 0xF4	; 244
    5606:	1f 4f       	sbci	r17, 0xFF	; 255
    5608:	c8 01       	movw	r24, r16
    560a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    560e:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    5612:	81 11       	cpse	r24, r1
    5614:	1c c0       	rjmp	.+56     	; 0x564e <xTaskRemoveFromEventList+0x62>
    5616:	0a 50       	subi	r16, 0x0A	; 10
    5618:	11 09       	sbc	r17, r1
    561a:	c8 01       	movw	r24, r16
    561c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5620:	8e 89       	ldd	r24, Y+22	; 0x16
    5622:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5626:	98 17       	cp	r25, r24
    5628:	10 f4       	brcc	.+4      	; 0x562e <xTaskRemoveFromEventList+0x42>
    562a:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	9c 01       	movw	r18, r24
    5632:	22 0f       	add	r18, r18
    5634:	33 1f       	adc	r19, r19
    5636:	22 0f       	add	r18, r18
    5638:	33 1f       	adc	r19, r19
    563a:	22 0f       	add	r18, r18
    563c:	33 1f       	adc	r19, r19
    563e:	82 0f       	add	r24, r18
    5640:	93 1f       	adc	r25, r19
    5642:	b8 01       	movw	r22, r16
    5644:	85 54       	subi	r24, 0x45	; 69
    5646:	95 4e       	sbci	r25, 0xE5	; 229
    5648:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    564c:	05 c0       	rjmp	.+10     	; 0x5658 <xTaskRemoveFromEventList+0x6c>
    564e:	b8 01       	movw	r22, r16
    5650:	8c e9       	ldi	r24, 0x9C	; 156
    5652:	9a e1       	ldi	r25, 0x1A	; 26
    5654:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5658:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    565c:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5660:	9e 89       	ldd	r25, Y+22	; 0x16
    5662:	86 89       	ldd	r24, Z+22	; 0x16
    5664:	89 17       	cp	r24, r25
    5666:	20 f4       	brcc	.+8      	; 0x5670 <xTaskRemoveFromEventList+0x84>
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	80 93 8c 1a 	sts	0x1A8C, r24	; 0x801a8c <xYieldPending>
    566e:	01 c0       	rjmp	.+2      	; 0x5672 <xTaskRemoveFromEventList+0x86>
    5670:	80 e0       	ldi	r24, 0x00	; 0
    5672:	df 91       	pop	r29
    5674:	cf 91       	pop	r28
    5676:	1f 91       	pop	r17
    5678:	0f 91       	pop	r16
    567a:	08 95       	ret

0000567c <vTaskSetTimeOutState>:
    567c:	20 91 8b 1a 	lds	r18, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    5680:	fc 01       	movw	r30, r24
    5682:	20 83       	st	Z, r18
    5684:	20 91 90 1a 	lds	r18, 0x1A90	; 0x801a90 <xTickCount>
    5688:	30 91 91 1a 	lds	r19, 0x1A91	; 0x801a91 <xTickCount+0x1>
    568c:	32 83       	std	Z+2, r19	; 0x02
    568e:	21 83       	std	Z+1, r18	; 0x01
    5690:	08 95       	ret

00005692 <xTaskCheckForTimeOut>:
    5692:	fc 01       	movw	r30, r24
    5694:	0f b6       	in	r0, 0x3f	; 63
    5696:	f8 94       	cli
    5698:	0f 92       	push	r0
    569a:	20 91 90 1a 	lds	r18, 0x1A90	; 0x801a90 <xTickCount>
    569e:	30 91 91 1a 	lds	r19, 0x1A91	; 0x801a91 <xTickCount+0x1>
    56a2:	db 01       	movw	r26, r22
    56a4:	8d 91       	ld	r24, X+
    56a6:	9c 91       	ld	r25, X
    56a8:	8f 3f       	cpi	r24, 0xFF	; 255
    56aa:	bf ef       	ldi	r27, 0xFF	; 255
    56ac:	9b 07       	cpc	r25, r27
    56ae:	21 f1       	breq	.+72     	; 0x56f8 <xTaskCheckForTimeOut+0x66>
    56b0:	40 91 8b 1a 	lds	r20, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    56b4:	50 81       	ld	r21, Z
    56b6:	54 17       	cp	r21, r20
    56b8:	29 f0       	breq	.+10     	; 0x56c4 <xTaskCheckForTimeOut+0x32>
    56ba:	41 81       	ldd	r20, Z+1	; 0x01
    56bc:	52 81       	ldd	r21, Z+2	; 0x02
    56be:	24 17       	cp	r18, r20
    56c0:	35 07       	cpc	r19, r21
    56c2:	e0 f4       	brcc	.+56     	; 0x56fc <xTaskCheckForTimeOut+0x6a>
    56c4:	41 81       	ldd	r20, Z+1	; 0x01
    56c6:	52 81       	ldd	r21, Z+2	; 0x02
    56c8:	d9 01       	movw	r26, r18
    56ca:	a4 1b       	sub	r26, r20
    56cc:	b5 0b       	sbc	r27, r21
    56ce:	a8 17       	cp	r26, r24
    56d0:	b9 07       	cpc	r27, r25
    56d2:	b0 f4       	brcc	.+44     	; 0x5700 <xTaskCheckForTimeOut+0x6e>
    56d4:	42 1b       	sub	r20, r18
    56d6:	53 0b       	sbc	r21, r19
    56d8:	84 0f       	add	r24, r20
    56da:	95 1f       	adc	r25, r21
    56dc:	db 01       	movw	r26, r22
    56de:	8d 93       	st	X+, r24
    56e0:	9c 93       	st	X, r25
    56e2:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <xNumOfOverflows>
    56e6:	80 83       	st	Z, r24
    56e8:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    56ec:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    56f0:	92 83       	std	Z+2, r25	; 0x02
    56f2:	81 83       	std	Z+1, r24	; 0x01
    56f4:	80 e0       	ldi	r24, 0x00	; 0
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <xTaskCheckForTimeOut+0x70>
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	03 c0       	rjmp	.+6      	; 0x5702 <xTaskCheckForTimeOut+0x70>
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	01 c0       	rjmp	.+2      	; 0x5702 <xTaskCheckForTimeOut+0x70>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	0f 90       	pop	r0
    5704:	0f be       	out	0x3f, r0	; 63
    5706:	08 95       	ret

00005708 <vTaskMissedYield>:
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	80 93 8c 1a 	sts	0x1A8C, r24	; 0x801a8c <xYieldPending>
    570e:	08 95       	ret

00005710 <xTaskGetCurrentTaskHandle>:
    5710:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5714:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5718:	08 95       	ret

0000571a <vTaskPriorityInherit>:
    571a:	0f 93       	push	r16
    571c:	1f 93       	push	r17
    571e:	cf 93       	push	r28
    5720:	df 93       	push	r29
    5722:	fc 01       	movw	r30, r24
    5724:	89 2b       	or	r24, r25
    5726:	09 f4       	brne	.+2      	; 0x572a <vTaskPriorityInherit+0x10>
    5728:	55 c0       	rjmp	.+170    	; 0x57d4 <vTaskPriorityInherit+0xba>
    572a:	26 89       	ldd	r18, Z+22	; 0x16
    572c:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5730:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5734:	56 96       	adiw	r26, 0x16	; 22
    5736:	8c 91       	ld	r24, X
    5738:	28 17       	cp	r18, r24
    573a:	08 f0       	brcs	.+2      	; 0x573e <vTaskPriorityInherit+0x24>
    573c:	4b c0       	rjmp	.+150    	; 0x57d4 <vTaskPriorityInherit+0xba>
    573e:	84 85       	ldd	r24, Z+12	; 0x0c
    5740:	95 85       	ldd	r25, Z+13	; 0x0d
    5742:	99 23       	and	r25, r25
    5744:	64 f0       	brlt	.+24     	; 0x575e <vTaskPriorityInherit+0x44>
    5746:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    574a:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    574e:	56 96       	adiw	r26, 0x16	; 22
    5750:	3c 91       	ld	r19, X
    5752:	86 e0       	ldi	r24, 0x06	; 6
    5754:	90 e0       	ldi	r25, 0x00	; 0
    5756:	83 1b       	sub	r24, r19
    5758:	91 09       	sbc	r25, r1
    575a:	95 87       	std	Z+13, r25	; 0x0d
    575c:	84 87       	std	Z+12, r24	; 0x0c
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	c9 01       	movw	r24, r18
    5762:	88 0f       	add	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	88 0f       	add	r24, r24
    5768:	99 1f       	adc	r25, r25
    576a:	88 0f       	add	r24, r24
    576c:	99 1f       	adc	r25, r25
    576e:	28 0f       	add	r18, r24
    5770:	39 1f       	adc	r19, r25
    5772:	25 54       	subi	r18, 0x45	; 69
    5774:	35 4e       	sbci	r19, 0xE5	; 229
    5776:	82 85       	ldd	r24, Z+10	; 0x0a
    5778:	93 85       	ldd	r25, Z+11	; 0x0b
    577a:	82 17       	cp	r24, r18
    577c:	93 07       	cpc	r25, r19
    577e:	19 f5       	brne	.+70     	; 0x57c6 <vTaskPriorityInherit+0xac>
    5780:	8f 01       	movw	r16, r30
    5782:	ef 01       	movw	r28, r30
    5784:	22 96       	adiw	r28, 0x02	; 2
    5786:	ce 01       	movw	r24, r28
    5788:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    578c:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5790:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5794:	86 89       	ldd	r24, Z+22	; 0x16
    5796:	f8 01       	movw	r30, r16
    5798:	86 8b       	std	Z+22, r24	; 0x16
    579a:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    579e:	98 17       	cp	r25, r24
    57a0:	10 f4       	brcc	.+4      	; 0x57a6 <vTaskPriorityInherit+0x8c>
    57a2:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	9c 01       	movw	r18, r24
    57aa:	22 0f       	add	r18, r18
    57ac:	33 1f       	adc	r19, r19
    57ae:	22 0f       	add	r18, r18
    57b0:	33 1f       	adc	r19, r19
    57b2:	22 0f       	add	r18, r18
    57b4:	33 1f       	adc	r19, r19
    57b6:	82 0f       	add	r24, r18
    57b8:	93 1f       	adc	r25, r19
    57ba:	be 01       	movw	r22, r28
    57bc:	85 54       	subi	r24, 0x45	; 69
    57be:	95 4e       	sbci	r25, 0xE5	; 229
    57c0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    57c4:	07 c0       	rjmp	.+14     	; 0x57d4 <vTaskPriorityInherit+0xba>
    57c6:	a0 91 f1 1a 	lds	r26, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    57ca:	b0 91 f2 1a 	lds	r27, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    57ce:	56 96       	adiw	r26, 0x16	; 22
    57d0:	8c 91       	ld	r24, X
    57d2:	86 8b       	std	Z+22, r24	; 0x16
    57d4:	df 91       	pop	r29
    57d6:	cf 91       	pop	r28
    57d8:	1f 91       	pop	r17
    57da:	0f 91       	pop	r16
    57dc:	08 95       	ret

000057de <xTaskPriorityDisinherit>:
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	cf 93       	push	r28
    57e4:	df 93       	push	r29
    57e6:	fc 01       	movw	r30, r24
    57e8:	89 2b       	or	r24, r25
    57ea:	79 f1       	breq	.+94     	; 0x584a <xTaskPriorityDisinherit+0x6c>
    57ec:	82 a1       	ldd	r24, Z+34	; 0x22
    57ee:	81 50       	subi	r24, 0x01	; 1
    57f0:	82 a3       	std	Z+34, r24	; 0x22
    57f2:	26 89       	ldd	r18, Z+22	; 0x16
    57f4:	91 a1       	ldd	r25, Z+33	; 0x21
    57f6:	29 17       	cp	r18, r25
    57f8:	51 f1       	breq	.+84     	; 0x584e <xTaskPriorityDisinherit+0x70>
    57fa:	81 11       	cpse	r24, r1
    57fc:	2a c0       	rjmp	.+84     	; 0x5852 <xTaskPriorityDisinherit+0x74>
    57fe:	ef 01       	movw	r28, r30
    5800:	8f 01       	movw	r16, r30
    5802:	0e 5f       	subi	r16, 0xFE	; 254
    5804:	1f 4f       	sbci	r17, 0xFF	; 255
    5806:	c8 01       	movw	r24, r16
    5808:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    580c:	89 a1       	ldd	r24, Y+33	; 0x21
    580e:	8e 8b       	std	Y+22, r24	; 0x16
    5810:	26 e0       	ldi	r18, 0x06	; 6
    5812:	30 e0       	ldi	r19, 0x00	; 0
    5814:	28 1b       	sub	r18, r24
    5816:	31 09       	sbc	r19, r1
    5818:	3d 87       	std	Y+13, r19	; 0x0d
    581a:	2c 87       	std	Y+12, r18	; 0x0c
    581c:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5820:	98 17       	cp	r25, r24
    5822:	10 f4       	brcc	.+4      	; 0x5828 <xTaskPriorityDisinherit+0x4a>
    5824:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	9c 01       	movw	r18, r24
    582c:	22 0f       	add	r18, r18
    582e:	33 1f       	adc	r19, r19
    5830:	22 0f       	add	r18, r18
    5832:	33 1f       	adc	r19, r19
    5834:	22 0f       	add	r18, r18
    5836:	33 1f       	adc	r19, r19
    5838:	82 0f       	add	r24, r18
    583a:	93 1f       	adc	r25, r19
    583c:	b8 01       	movw	r22, r16
    583e:	85 54       	subi	r24, 0x45	; 69
    5840:	95 4e       	sbci	r25, 0xE5	; 229
    5842:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	05 c0       	rjmp	.+10     	; 0x5854 <xTaskPriorityDisinherit+0x76>
    584a:	80 e0       	ldi	r24, 0x00	; 0
    584c:	03 c0       	rjmp	.+6      	; 0x5854 <xTaskPriorityDisinherit+0x76>
    584e:	80 e0       	ldi	r24, 0x00	; 0
    5850:	01 c0       	rjmp	.+2      	; 0x5854 <xTaskPriorityDisinherit+0x76>
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	1f 91       	pop	r17
    585a:	0f 91       	pop	r16
    585c:	08 95       	ret

0000585e <pvTaskIncrementMutexHeldCount>:
    585e:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5862:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5866:	89 2b       	or	r24, r25
    5868:	39 f0       	breq	.+14     	; 0x5878 <pvTaskIncrementMutexHeldCount+0x1a>
    586a:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    586e:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5872:	82 a1       	ldd	r24, Z+34	; 0x22
    5874:	8f 5f       	subi	r24, 0xFF	; 255
    5876:	82 a3       	std	Z+34, r24	; 0x22
    5878:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    587c:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5880:	08 95       	ret

00005882 <ulTaskNotifyTake>:
    5882:	0f 93       	push	r16
    5884:	1f 93       	push	r17
    5886:	cf 93       	push	r28
    5888:	df 93       	push	r29
    588a:	18 2f       	mov	r17, r24
    588c:	eb 01       	movw	r28, r22
    588e:	0f b6       	in	r0, 0x3f	; 63
    5890:	f8 94       	cli
    5892:	0f 92       	push	r0
    5894:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5898:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    589c:	83 a1       	ldd	r24, Z+35	; 0x23
    589e:	94 a1       	ldd	r25, Z+36	; 0x24
    58a0:	a5 a1       	ldd	r26, Z+37	; 0x25
    58a2:	b6 a1       	ldd	r27, Z+38	; 0x26
    58a4:	89 2b       	or	r24, r25
    58a6:	8a 2b       	or	r24, r26
    58a8:	8b 2b       	or	r24, r27
    58aa:	09 f0       	breq	.+2      	; 0x58ae <ulTaskNotifyTake+0x2c>
    58ac:	58 c0       	rjmp	.+176    	; 0x595e <ulTaskNotifyTake+0xdc>
    58ae:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    58b2:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	87 a3       	std	Z+39, r24	; 0x27
    58ba:	20 97       	sbiw	r28, 0x00	; 0
    58bc:	09 f4       	brne	.+2      	; 0x58c0 <ulTaskNotifyTake+0x3e>
    58be:	4f c0       	rjmp	.+158    	; 0x595e <ulTaskNotifyTake+0xdc>
    58c0:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    58c4:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    58c8:	02 96       	adiw	r24, 0x02	; 2
    58ca:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    58ce:	cf 3f       	cpi	r28, 0xFF	; 255
    58d0:	8f ef       	ldi	r24, 0xFF	; 255
    58d2:	d8 07       	cpc	r29, r24
    58d4:	59 f4       	brne	.+22     	; 0x58ec <ulTaskNotifyTake+0x6a>
    58d6:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    58da:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    58de:	6e 5f       	subi	r22, 0xFE	; 254
    58e0:	7f 4f       	sbci	r23, 0xFF	; 255
    58e2:	83 e9       	ldi	r24, 0x93	; 147
    58e4:	9a e1       	ldi	r25, 0x1A	; 26
    58e6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    58ea:	37 c0       	rjmp	.+110    	; 0x595a <ulTaskNotifyTake+0xd8>
    58ec:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    58f0:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    58f4:	c8 0f       	add	r28, r24
    58f6:	d9 1f       	adc	r29, r25
    58f8:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    58fc:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5900:	d3 83       	std	Z+3, r29	; 0x03
    5902:	c2 83       	std	Z+2, r28	; 0x02
    5904:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    5908:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    590c:	c8 17       	cp	r28, r24
    590e:	d9 07       	cpc	r29, r25
    5910:	68 f4       	brcc	.+26     	; 0x592c <ulTaskNotifyTake+0xaa>
    5912:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5916:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    591a:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    591e:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    5922:	6e 5f       	subi	r22, 0xFE	; 254
    5924:	7f 4f       	sbci	r23, 0xFF	; 255
    5926:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    592a:	17 c0       	rjmp	.+46     	; 0x595a <ulTaskNotifyTake+0xd8>
    592c:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5930:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5934:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    5938:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    593c:	6e 5f       	subi	r22, 0xFE	; 254
    593e:	7f 4f       	sbci	r23, 0xFF	; 255
    5940:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5944:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    5948:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    594c:	c8 17       	cp	r28, r24
    594e:	d9 07       	cpc	r29, r25
    5950:	20 f4       	brcc	.+8      	; 0x595a <ulTaskNotifyTake+0xd8>
    5952:	d0 93 89 1a 	sts	0x1A89, r29	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5956:	c0 93 88 1a 	sts	0x1A88, r28	; 0x801a88 <xNextTaskUnblockTime>
    595a:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    595e:	0f 90       	pop	r0
    5960:	0f be       	out	0x3f, r0	; 63
    5962:	0f b6       	in	r0, 0x3f	; 63
    5964:	f8 94       	cli
    5966:	0f 92       	push	r0
    5968:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    596c:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5970:	63 a1       	ldd	r22, Z+35	; 0x23
    5972:	74 a1       	ldd	r23, Z+36	; 0x24
    5974:	85 a1       	ldd	r24, Z+37	; 0x25
    5976:	96 a1       	ldd	r25, Z+38	; 0x26
    5978:	61 15       	cp	r22, r1
    597a:	71 05       	cpc	r23, r1
    597c:	81 05       	cpc	r24, r1
    597e:	91 05       	cpc	r25, r1
    5980:	d9 f0       	breq	.+54     	; 0x59b8 <ulTaskNotifyTake+0x136>
    5982:	11 23       	and	r17, r17
    5984:	49 f0       	breq	.+18     	; 0x5998 <ulTaskNotifyTake+0x116>
    5986:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    598a:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    598e:	13 a2       	std	Z+35, r1	; 0x23
    5990:	14 a2       	std	Z+36, r1	; 0x24
    5992:	15 a2       	std	Z+37, r1	; 0x25
    5994:	16 a2       	std	Z+38, r1	; 0x26
    5996:	10 c0       	rjmp	.+32     	; 0x59b8 <ulTaskNotifyTake+0x136>
    5998:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    599c:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    59a0:	03 a1       	ldd	r16, Z+35	; 0x23
    59a2:	14 a1       	ldd	r17, Z+36	; 0x24
    59a4:	25 a1       	ldd	r18, Z+37	; 0x25
    59a6:	36 a1       	ldd	r19, Z+38	; 0x26
    59a8:	01 50       	subi	r16, 0x01	; 1
    59aa:	11 09       	sbc	r17, r1
    59ac:	21 09       	sbc	r18, r1
    59ae:	31 09       	sbc	r19, r1
    59b0:	03 a3       	std	Z+35, r16	; 0x23
    59b2:	14 a3       	std	Z+36, r17	; 0x24
    59b4:	25 a3       	std	Z+37, r18	; 0x25
    59b6:	36 a3       	std	Z+38, r19	; 0x26
    59b8:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    59bc:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    59c0:	17 a2       	std	Z+39, r1	; 0x27
    59c2:	0f 90       	pop	r0
    59c4:	0f be       	out	0x3f, r0	; 63
    59c6:	df 91       	pop	r29
    59c8:	cf 91       	pop	r28
    59ca:	1f 91       	pop	r17
    59cc:	0f 91       	pop	r16
    59ce:	08 95       	ret

000059d0 <xTaskNotifyWait>:
    59d0:	4f 92       	push	r4
    59d2:	5f 92       	push	r5
    59d4:	6f 92       	push	r6
    59d6:	7f 92       	push	r7
    59d8:	8f 92       	push	r8
    59da:	9f 92       	push	r9
    59dc:	af 92       	push	r10
    59de:	bf 92       	push	r11
    59e0:	ef 92       	push	r14
    59e2:	ff 92       	push	r15
    59e4:	0f 93       	push	r16
    59e6:	1f 93       	push	r17
    59e8:	49 01       	movw	r8, r18
    59ea:	5a 01       	movw	r10, r20
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	0f 92       	push	r0
    59f2:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    59f6:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    59fa:	27 a1       	ldd	r18, Z+39	; 0x27
    59fc:	22 30       	cpi	r18, 0x02	; 2
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <xTaskNotifyWait+0x32>
    5a00:	6f c0       	rjmp	.+222    	; 0x5ae0 <xTaskNotifyWait+0x110>
    5a02:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a06:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a0a:	43 a0       	ldd	r4, Z+35	; 0x23
    5a0c:	54 a0       	ldd	r5, Z+36	; 0x24
    5a0e:	65 a0       	ldd	r6, Z+37	; 0x25
    5a10:	76 a0       	ldd	r7, Z+38	; 0x26
    5a12:	dc 01       	movw	r26, r24
    5a14:	cb 01       	movw	r24, r22
    5a16:	80 95       	com	r24
    5a18:	90 95       	com	r25
    5a1a:	a0 95       	com	r26
    5a1c:	b0 95       	com	r27
    5a1e:	84 21       	and	r24, r4
    5a20:	95 21       	and	r25, r5
    5a22:	a6 21       	and	r26, r6
    5a24:	b7 21       	and	r27, r7
    5a26:	83 a3       	std	Z+35, r24	; 0x23
    5a28:	94 a3       	std	Z+36, r25	; 0x24
    5a2a:	a5 a3       	std	Z+37, r26	; 0x25
    5a2c:	b6 a3       	std	Z+38, r27	; 0x26
    5a2e:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a32:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	87 a3       	std	Z+39, r24	; 0x27
    5a3a:	e1 14       	cp	r14, r1
    5a3c:	f1 04       	cpc	r15, r1
    5a3e:	09 f4       	brne	.+2      	; 0x5a42 <xTaskNotifyWait+0x72>
    5a40:	4f c0       	rjmp	.+158    	; 0x5ae0 <xTaskNotifyWait+0x110>
    5a42:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a46:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a4a:	02 96       	adiw	r24, 0x02	; 2
    5a4c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5a50:	8f ef       	ldi	r24, 0xFF	; 255
    5a52:	e8 16       	cp	r14, r24
    5a54:	f8 06       	cpc	r15, r24
    5a56:	59 f4       	brne	.+22     	; 0x5a6e <xTaskNotifyWait+0x9e>
    5a58:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a5c:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a60:	6e 5f       	subi	r22, 0xFE	; 254
    5a62:	7f 4f       	sbci	r23, 0xFF	; 255
    5a64:	83 e9       	ldi	r24, 0x93	; 147
    5a66:	9a e1       	ldi	r25, 0x1A	; 26
    5a68:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5a6c:	37 c0       	rjmp	.+110    	; 0x5adc <xTaskNotifyWait+0x10c>
    5a6e:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    5a72:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    5a76:	e8 0e       	add	r14, r24
    5a78:	f9 1e       	adc	r15, r25
    5a7a:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a7e:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a82:	f3 82       	std	Z+3, r15	; 0x03
    5a84:	e2 82       	std	Z+2, r14	; 0x02
    5a86:	80 91 90 1a 	lds	r24, 0x1A90	; 0x801a90 <xTickCount>
    5a8a:	90 91 91 1a 	lds	r25, 0x1A91	; 0x801a91 <xTickCount+0x1>
    5a8e:	e8 16       	cp	r14, r24
    5a90:	f9 06       	cpc	r15, r25
    5a92:	68 f4       	brcc	.+26     	; 0x5aae <xTaskNotifyWait+0xde>
    5a94:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5a98:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5a9c:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <pxOverflowDelayedTaskList>
    5aa0:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <pxOverflowDelayedTaskList+0x1>
    5aa4:	6e 5f       	subi	r22, 0xFE	; 254
    5aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa8:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5aac:	17 c0       	rjmp	.+46     	; 0x5adc <xTaskNotifyWait+0x10c>
    5aae:	60 91 f1 1a 	lds	r22, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5ab2:	70 91 f2 1a 	lds	r23, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5ab6:	80 91 a7 1a 	lds	r24, 0x1AA7	; 0x801aa7 <pxDelayedTaskList>
    5aba:	90 91 a8 1a 	lds	r25, 0x1AA8	; 0x801aa8 <pxDelayedTaskList+0x1>
    5abe:	6e 5f       	subi	r22, 0xFE	; 254
    5ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <vListInsert>
    5ac6:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <xNextTaskUnblockTime>
    5aca:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5ace:	e8 16       	cp	r14, r24
    5ad0:	f9 06       	cpc	r15, r25
    5ad2:	20 f4       	brcc	.+8      	; 0x5adc <xTaskNotifyWait+0x10c>
    5ad4:	f0 92 89 1a 	sts	0x1A89, r15	; 0x801a89 <xNextTaskUnblockTime+0x1>
    5ad8:	e0 92 88 1a 	sts	0x1A88, r14	; 0x801a88 <xNextTaskUnblockTime>
    5adc:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5ae0:	0f 90       	pop	r0
    5ae2:	0f be       	out	0x3f, r0	; 63
    5ae4:	0f b6       	in	r0, 0x3f	; 63
    5ae6:	f8 94       	cli
    5ae8:	0f 92       	push	r0
    5aea:	01 15       	cp	r16, r1
    5aec:	11 05       	cpc	r17, r1
    5aee:	69 f0       	breq	.+26     	; 0x5b0a <xTaskNotifyWait+0x13a>
    5af0:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5af4:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5af8:	83 a1       	ldd	r24, Z+35	; 0x23
    5afa:	94 a1       	ldd	r25, Z+36	; 0x24
    5afc:	a5 a1       	ldd	r26, Z+37	; 0x25
    5afe:	b6 a1       	ldd	r27, Z+38	; 0x26
    5b00:	f8 01       	movw	r30, r16
    5b02:	80 83       	st	Z, r24
    5b04:	91 83       	std	Z+1, r25	; 0x01
    5b06:	a2 83       	std	Z+2, r26	; 0x02
    5b08:	b3 83       	std	Z+3, r27	; 0x03
    5b0a:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5b0e:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5b12:	87 a1       	ldd	r24, Z+39	; 0x27
    5b14:	81 30       	cpi	r24, 0x01	; 1
    5b16:	b1 f0       	breq	.+44     	; 0x5b44 <xTaskNotifyWait+0x174>
    5b18:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5b1c:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5b20:	83 a1       	ldd	r24, Z+35	; 0x23
    5b22:	94 a1       	ldd	r25, Z+36	; 0x24
    5b24:	a5 a1       	ldd	r26, Z+37	; 0x25
    5b26:	b6 a1       	ldd	r27, Z+38	; 0x26
    5b28:	80 94       	com	r8
    5b2a:	90 94       	com	r9
    5b2c:	a0 94       	com	r10
    5b2e:	b0 94       	com	r11
    5b30:	88 22       	and	r8, r24
    5b32:	99 22       	and	r9, r25
    5b34:	aa 22       	and	r10, r26
    5b36:	bb 22       	and	r11, r27
    5b38:	83 a2       	std	Z+35, r8	; 0x23
    5b3a:	94 a2       	std	Z+36, r9	; 0x24
    5b3c:	a5 a2       	std	Z+37, r10	; 0x25
    5b3e:	b6 a2       	std	Z+38, r11	; 0x26
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	01 c0       	rjmp	.+2      	; 0x5b46 <xTaskNotifyWait+0x176>
    5b44:	80 e0       	ldi	r24, 0x00	; 0
    5b46:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5b4a:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5b4e:	17 a2       	std	Z+39, r1	; 0x27
    5b50:	0f 90       	pop	r0
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	1f 91       	pop	r17
    5b56:	0f 91       	pop	r16
    5b58:	ff 90       	pop	r15
    5b5a:	ef 90       	pop	r14
    5b5c:	bf 90       	pop	r11
    5b5e:	af 90       	pop	r10
    5b60:	9f 90       	pop	r9
    5b62:	8f 90       	pop	r8
    5b64:	7f 90       	pop	r7
    5b66:	6f 90       	pop	r6
    5b68:	5f 90       	pop	r5
    5b6a:	4f 90       	pop	r4
    5b6c:	08 95       	ret

00005b6e <xTaskGenericNotify>:
    5b6e:	0f 93       	push	r16
    5b70:	1f 93       	push	r17
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
    5b76:	fc 01       	movw	r30, r24
    5b78:	0f b6       	in	r0, 0x3f	; 63
    5b7a:	f8 94       	cli
    5b7c:	0f 92       	push	r0
    5b7e:	01 15       	cp	r16, r1
    5b80:	11 05       	cpc	r17, r1
    5b82:	49 f0       	breq	.+18     	; 0x5b96 <xTaskGenericNotify+0x28>
    5b84:	83 a1       	ldd	r24, Z+35	; 0x23
    5b86:	94 a1       	ldd	r25, Z+36	; 0x24
    5b88:	a5 a1       	ldd	r26, Z+37	; 0x25
    5b8a:	b6 a1       	ldd	r27, Z+38	; 0x26
    5b8c:	e8 01       	movw	r28, r16
    5b8e:	88 83       	st	Y, r24
    5b90:	99 83       	std	Y+1, r25	; 0x01
    5b92:	aa 83       	std	Y+2, r26	; 0x02
    5b94:	bb 83       	std	Y+3, r27	; 0x03
    5b96:	87 a1       	ldd	r24, Z+39	; 0x27
    5b98:	92 e0       	ldi	r25, 0x02	; 2
    5b9a:	97 a3       	std	Z+39, r25	; 0x27
    5b9c:	22 30       	cpi	r18, 0x02	; 2
    5b9e:	b1 f0       	breq	.+44     	; 0x5bcc <xTaskGenericNotify+0x5e>
    5ba0:	18 f4       	brcc	.+6      	; 0x5ba8 <xTaskGenericNotify+0x3a>
    5ba2:	21 30       	cpi	r18, 0x01	; 1
    5ba4:	31 f0       	breq	.+12     	; 0x5bb2 <xTaskGenericNotify+0x44>
    5ba6:	2a c0       	rjmp	.+84     	; 0x5bfc <xTaskGenericNotify+0x8e>
    5ba8:	23 30       	cpi	r18, 0x03	; 3
    5baa:	e9 f0       	breq	.+58     	; 0x5be6 <xTaskGenericNotify+0x78>
    5bac:	24 30       	cpi	r18, 0x04	; 4
    5bae:	01 f1       	breq	.+64     	; 0x5bf0 <xTaskGenericNotify+0x82>
    5bb0:	25 c0       	rjmp	.+74     	; 0x5bfc <xTaskGenericNotify+0x8e>
    5bb2:	03 a1       	ldd	r16, Z+35	; 0x23
    5bb4:	14 a1       	ldd	r17, Z+36	; 0x24
    5bb6:	25 a1       	ldd	r18, Z+37	; 0x25
    5bb8:	36 a1       	ldd	r19, Z+38	; 0x26
    5bba:	40 2b       	or	r20, r16
    5bbc:	51 2b       	or	r21, r17
    5bbe:	62 2b       	or	r22, r18
    5bc0:	73 2b       	or	r23, r19
    5bc2:	43 a3       	std	Z+35, r20	; 0x23
    5bc4:	54 a3       	std	Z+36, r21	; 0x24
    5bc6:	65 a3       	std	Z+37, r22	; 0x25
    5bc8:	76 a3       	std	Z+38, r23	; 0x26
    5bca:	18 c0       	rjmp	.+48     	; 0x5bfc <xTaskGenericNotify+0x8e>
    5bcc:	43 a1       	ldd	r20, Z+35	; 0x23
    5bce:	54 a1       	ldd	r21, Z+36	; 0x24
    5bd0:	65 a1       	ldd	r22, Z+37	; 0x25
    5bd2:	76 a1       	ldd	r23, Z+38	; 0x26
    5bd4:	4f 5f       	subi	r20, 0xFF	; 255
    5bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd8:	6f 4f       	sbci	r22, 0xFF	; 255
    5bda:	7f 4f       	sbci	r23, 0xFF	; 255
    5bdc:	43 a3       	std	Z+35, r20	; 0x23
    5bde:	54 a3       	std	Z+36, r21	; 0x24
    5be0:	65 a3       	std	Z+37, r22	; 0x25
    5be2:	76 a3       	std	Z+38, r23	; 0x26
    5be4:	0b c0       	rjmp	.+22     	; 0x5bfc <xTaskGenericNotify+0x8e>
    5be6:	43 a3       	std	Z+35, r20	; 0x23
    5be8:	54 a3       	std	Z+36, r21	; 0x24
    5bea:	65 a3       	std	Z+37, r22	; 0x25
    5bec:	76 a3       	std	Z+38, r23	; 0x26
    5bee:	06 c0       	rjmp	.+12     	; 0x5bfc <xTaskGenericNotify+0x8e>
    5bf0:	82 30       	cpi	r24, 0x02	; 2
    5bf2:	79 f1       	breq	.+94     	; 0x5c52 <xTaskGenericNotify+0xe4>
    5bf4:	43 a3       	std	Z+35, r20	; 0x23
    5bf6:	54 a3       	std	Z+36, r21	; 0x24
    5bf8:	65 a3       	std	Z+37, r22	; 0x25
    5bfa:	76 a3       	std	Z+38, r23	; 0x26
    5bfc:	81 30       	cpi	r24, 0x01	; 1
    5bfe:	59 f5       	brne	.+86     	; 0x5c56 <xTaskGenericNotify+0xe8>
    5c00:	ef 01       	movw	r28, r30
    5c02:	8f 01       	movw	r16, r30
    5c04:	0e 5f       	subi	r16, 0xFE	; 254
    5c06:	1f 4f       	sbci	r17, 0xFF	; 255
    5c08:	c8 01       	movw	r24, r16
    5c0a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5c0e:	8e 89       	ldd	r24, Y+22	; 0x16
    5c10:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5c14:	98 17       	cp	r25, r24
    5c16:	10 f4       	brcc	.+4      	; 0x5c1c <xTaskGenericNotify+0xae>
    5c18:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	9c 01       	movw	r18, r24
    5c20:	22 0f       	add	r18, r18
    5c22:	33 1f       	adc	r19, r19
    5c24:	22 0f       	add	r18, r18
    5c26:	33 1f       	adc	r19, r19
    5c28:	22 0f       	add	r18, r18
    5c2a:	33 1f       	adc	r19, r19
    5c2c:	82 0f       	add	r24, r18
    5c2e:	93 1f       	adc	r25, r19
    5c30:	b8 01       	movw	r22, r16
    5c32:	85 54       	subi	r24, 0x45	; 69
    5c34:	95 4e       	sbci	r25, 0xE5	; 229
    5c36:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5c3a:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5c3e:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5c42:	9e 89       	ldd	r25, Y+22	; 0x16
    5c44:	86 89       	ldd	r24, Z+22	; 0x16
    5c46:	89 17       	cp	r24, r25
    5c48:	40 f4       	brcc	.+16     	; 0x5c5a <xTaskGenericNotify+0xec>
    5c4a:	0e 94 84 18 	call	0x3108	; 0x3108 <vPortYield>
    5c4e:	81 e0       	ldi	r24, 0x01	; 1
    5c50:	05 c0       	rjmp	.+10     	; 0x5c5c <xTaskGenericNotify+0xee>
    5c52:	80 e0       	ldi	r24, 0x00	; 0
    5c54:	03 c0       	rjmp	.+6      	; 0x5c5c <xTaskGenericNotify+0xee>
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	01 c0       	rjmp	.+2      	; 0x5c5c <xTaskGenericNotify+0xee>
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	0f 90       	pop	r0
    5c5e:	0f be       	out	0x3f, r0	; 63
    5c60:	df 91       	pop	r29
    5c62:	cf 91       	pop	r28
    5c64:	1f 91       	pop	r17
    5c66:	0f 91       	pop	r16
    5c68:	08 95       	ret

00005c6a <xTaskGenericNotifyFromISR>:
    5c6a:	ef 92       	push	r14
    5c6c:	ff 92       	push	r15
    5c6e:	0f 93       	push	r16
    5c70:	1f 93       	push	r17
    5c72:	cf 93       	push	r28
    5c74:	df 93       	push	r29
    5c76:	fc 01       	movw	r30, r24
    5c78:	01 15       	cp	r16, r1
    5c7a:	11 05       	cpc	r17, r1
    5c7c:	49 f0       	breq	.+18     	; 0x5c90 <xTaskGenericNotifyFromISR+0x26>
    5c7e:	83 a1       	ldd	r24, Z+35	; 0x23
    5c80:	94 a1       	ldd	r25, Z+36	; 0x24
    5c82:	a5 a1       	ldd	r26, Z+37	; 0x25
    5c84:	b6 a1       	ldd	r27, Z+38	; 0x26
    5c86:	e8 01       	movw	r28, r16
    5c88:	88 83       	st	Y, r24
    5c8a:	99 83       	std	Y+1, r25	; 0x01
    5c8c:	aa 83       	std	Y+2, r26	; 0x02
    5c8e:	bb 83       	std	Y+3, r27	; 0x03
    5c90:	87 a1       	ldd	r24, Z+39	; 0x27
    5c92:	92 e0       	ldi	r25, 0x02	; 2
    5c94:	97 a3       	std	Z+39, r25	; 0x27
    5c96:	22 30       	cpi	r18, 0x02	; 2
    5c98:	b1 f0       	breq	.+44     	; 0x5cc6 <xTaskGenericNotifyFromISR+0x5c>
    5c9a:	18 f4       	brcc	.+6      	; 0x5ca2 <xTaskGenericNotifyFromISR+0x38>
    5c9c:	21 30       	cpi	r18, 0x01	; 1
    5c9e:	31 f0       	breq	.+12     	; 0x5cac <xTaskGenericNotifyFromISR+0x42>
    5ca0:	2a c0       	rjmp	.+84     	; 0x5cf6 <xTaskGenericNotifyFromISR+0x8c>
    5ca2:	23 30       	cpi	r18, 0x03	; 3
    5ca4:	e9 f0       	breq	.+58     	; 0x5ce0 <xTaskGenericNotifyFromISR+0x76>
    5ca6:	24 30       	cpi	r18, 0x04	; 4
    5ca8:	01 f1       	breq	.+64     	; 0x5cea <xTaskGenericNotifyFromISR+0x80>
    5caa:	25 c0       	rjmp	.+74     	; 0x5cf6 <xTaskGenericNotifyFromISR+0x8c>
    5cac:	03 a1       	ldd	r16, Z+35	; 0x23
    5cae:	14 a1       	ldd	r17, Z+36	; 0x24
    5cb0:	25 a1       	ldd	r18, Z+37	; 0x25
    5cb2:	36 a1       	ldd	r19, Z+38	; 0x26
    5cb4:	40 2b       	or	r20, r16
    5cb6:	51 2b       	or	r21, r17
    5cb8:	62 2b       	or	r22, r18
    5cba:	73 2b       	or	r23, r19
    5cbc:	43 a3       	std	Z+35, r20	; 0x23
    5cbe:	54 a3       	std	Z+36, r21	; 0x24
    5cc0:	65 a3       	std	Z+37, r22	; 0x25
    5cc2:	76 a3       	std	Z+38, r23	; 0x26
    5cc4:	18 c0       	rjmp	.+48     	; 0x5cf6 <xTaskGenericNotifyFromISR+0x8c>
    5cc6:	43 a1       	ldd	r20, Z+35	; 0x23
    5cc8:	54 a1       	ldd	r21, Z+36	; 0x24
    5cca:	65 a1       	ldd	r22, Z+37	; 0x25
    5ccc:	76 a1       	ldd	r23, Z+38	; 0x26
    5cce:	4f 5f       	subi	r20, 0xFF	; 255
    5cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd2:	6f 4f       	sbci	r22, 0xFF	; 255
    5cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd6:	43 a3       	std	Z+35, r20	; 0x23
    5cd8:	54 a3       	std	Z+36, r21	; 0x24
    5cda:	65 a3       	std	Z+37, r22	; 0x25
    5cdc:	76 a3       	std	Z+38, r23	; 0x26
    5cde:	0b c0       	rjmp	.+22     	; 0x5cf6 <xTaskGenericNotifyFromISR+0x8c>
    5ce0:	43 a3       	std	Z+35, r20	; 0x23
    5ce2:	54 a3       	std	Z+36, r21	; 0x24
    5ce4:	65 a3       	std	Z+37, r22	; 0x25
    5ce6:	76 a3       	std	Z+38, r23	; 0x26
    5ce8:	06 c0       	rjmp	.+12     	; 0x5cf6 <xTaskGenericNotifyFromISR+0x8c>
    5cea:	82 30       	cpi	r24, 0x02	; 2
    5cec:	f1 f1       	breq	.+124    	; 0x5d6a <xTaskGenericNotifyFromISR+0x100>
    5cee:	43 a3       	std	Z+35, r20	; 0x23
    5cf0:	54 a3       	std	Z+36, r21	; 0x24
    5cf2:	65 a3       	std	Z+37, r22	; 0x25
    5cf4:	76 a3       	std	Z+38, r23	; 0x26
    5cf6:	81 30       	cpi	r24, 0x01	; 1
    5cf8:	d1 f5       	brne	.+116    	; 0x5d6e <xTaskGenericNotifyFromISR+0x104>
    5cfa:	ef 01       	movw	r28, r30
    5cfc:	80 91 87 1a 	lds	r24, 0x1A87	; 0x801a87 <uxSchedulerSuspended>
    5d00:	81 11       	cpse	r24, r1
    5d02:	1d c0       	rjmp	.+58     	; 0x5d3e <xTaskGenericNotifyFromISR+0xd4>
    5d04:	8f 01       	movw	r16, r30
    5d06:	0e 5f       	subi	r16, 0xFE	; 254
    5d08:	1f 4f       	sbci	r17, 0xFF	; 255
    5d0a:	c8 01       	movw	r24, r16
    5d0c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <uxListRemove>
    5d10:	8e 89       	ldd	r24, Y+22	; 0x16
    5d12:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <uxTopReadyPriority>
    5d16:	98 17       	cp	r25, r24
    5d18:	10 f4       	brcc	.+4      	; 0x5d1e <xTaskGenericNotifyFromISR+0xb4>
    5d1a:	80 93 8f 1a 	sts	0x1A8F, r24	; 0x801a8f <uxTopReadyPriority>
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	9c 01       	movw	r18, r24
    5d22:	22 0f       	add	r18, r18
    5d24:	33 1f       	adc	r19, r19
    5d26:	22 0f       	add	r18, r18
    5d28:	33 1f       	adc	r19, r19
    5d2a:	22 0f       	add	r18, r18
    5d2c:	33 1f       	adc	r19, r19
    5d2e:	82 0f       	add	r24, r18
    5d30:	93 1f       	adc	r25, r19
    5d32:	b8 01       	movw	r22, r16
    5d34:	85 54       	subi	r24, 0x45	; 69
    5d36:	95 4e       	sbci	r25, 0xE5	; 229
    5d38:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5d3c:	07 c0       	rjmp	.+14     	; 0x5d4c <xTaskGenericNotifyFromISR+0xe2>
    5d3e:	bf 01       	movw	r22, r30
    5d40:	64 5f       	subi	r22, 0xF4	; 244
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8c e9       	ldi	r24, 0x9C	; 156
    5d46:	9a e1       	ldi	r25, 0x1A	; 26
    5d48:	0e 94 9a 0c 	call	0x1934	; 0x1934 <vListInsertEnd>
    5d4c:	e0 91 f1 1a 	lds	r30, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5d50:	f0 91 f2 1a 	lds	r31, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>
    5d54:	9e 89       	ldd	r25, Y+22	; 0x16
    5d56:	86 89       	ldd	r24, Z+22	; 0x16
    5d58:	89 17       	cp	r24, r25
    5d5a:	58 f4       	brcc	.+22     	; 0x5d72 <xTaskGenericNotifyFromISR+0x108>
    5d5c:	e1 14       	cp	r14, r1
    5d5e:	f1 04       	cpc	r15, r1
    5d60:	51 f0       	breq	.+20     	; 0x5d76 <xTaskGenericNotifyFromISR+0x10c>
    5d62:	81 e0       	ldi	r24, 0x01	; 1
    5d64:	f7 01       	movw	r30, r14
    5d66:	80 83       	st	Z, r24
    5d68:	07 c0       	rjmp	.+14     	; 0x5d78 <xTaskGenericNotifyFromISR+0x10e>
    5d6a:	80 e0       	ldi	r24, 0x00	; 0
    5d6c:	05 c0       	rjmp	.+10     	; 0x5d78 <xTaskGenericNotifyFromISR+0x10e>
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	03 c0       	rjmp	.+6      	; 0x5d78 <xTaskGenericNotifyFromISR+0x10e>
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	01 c0       	rjmp	.+2      	; 0x5d78 <xTaskGenericNotifyFromISR+0x10e>
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	df 91       	pop	r29
    5d7a:	cf 91       	pop	r28
    5d7c:	1f 91       	pop	r17
    5d7e:	0f 91       	pop	r16
    5d80:	ff 90       	pop	r15
    5d82:	ef 90       	pop	r14
    5d84:	08 95       	ret

00005d86 <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5d86:	00 97       	sbiw	r24, 0x00	; 0
    5d88:	21 f4       	brne	.+8      	; 0x5d92 <xTaskNotifyStateClear+0xc>
    5d8a:	80 91 f1 1a 	lds	r24, 0x1AF1	; 0x801af1 <pxCurrentTCB>
    5d8e:	90 91 f2 1a 	lds	r25, 0x1AF2	; 0x801af2 <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5d92:	0f b6       	in	r0, 0x3f	; 63
    5d94:	f8 94       	cli
    5d96:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5d98:	fc 01       	movw	r30, r24
    5d9a:	27 a1       	ldd	r18, Z+39	; 0x27
    5d9c:	22 30       	cpi	r18, 0x02	; 2
    5d9e:	19 f4       	brne	.+6      	; 0x5da6 <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5da0:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5da2:	81 e0       	ldi	r24, 0x01	; 1
    5da4:	01 c0       	rjmp	.+2      	; 0x5da8 <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5da6:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5da8:	0f 90       	pop	r0
    5daa:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5dac:	08 95       	ret

00005dae <ui8TWI_start>:
    data[(length-1)] = ui8TWI_read_nack();

    vTWI_stop();

    return 0;
}
    5dae:	ec eb       	ldi	r30, 0xBC	; 188
    5db0:	f0 e0       	ldi	r31, 0x00	; 0
    5db2:	10 82       	st	Z, r1
    5db4:	94 ea       	ldi	r25, 0xA4	; 164
    5db6:	90 83       	st	Z, r25
    5db8:	90 81       	ld	r25, Z
    5dba:	99 23       	and	r25, r25
    5dbc:	ec f7       	brge	.-6      	; 0x5db8 <ui8TWI_start+0xa>
    5dbe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5dc2:	98 7f       	andi	r25, 0xF8	; 248
    5dc4:	98 30       	cpi	r25, 0x08	; 8
    5dc6:	a1 f4       	brne	.+40     	; 0x5df0 <ui8TWI_start+0x42>
    5dc8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5dcc:	84 e8       	ldi	r24, 0x84	; 132
    5dce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5dd2:	ec eb       	ldi	r30, 0xBC	; 188
    5dd4:	f0 e0       	ldi	r31, 0x00	; 0
    5dd6:	80 81       	ld	r24, Z
    5dd8:	88 23       	and	r24, r24
    5dda:	ec f7       	brge	.-6      	; 0x5dd6 <ui8TWI_start+0x28>
    5ddc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5de0:	98 7f       	andi	r25, 0xF8	; 248
    5de2:	98 31       	cpi	r25, 0x18	; 24
    5de4:	39 f0       	breq	.+14     	; 0x5df4 <ui8TWI_start+0x46>
    5de6:	81 e0       	ldi	r24, 0x01	; 1
    5de8:	90 34       	cpi	r25, 0x40	; 64
    5dea:	29 f4       	brne	.+10     	; 0x5df6 <ui8TWI_start+0x48>
    5dec:	80 e0       	ldi	r24, 0x00	; 0
    5dee:	08 95       	ret
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	08 95       	ret
    5df4:	80 e0       	ldi	r24, 0x00	; 0
    5df6:	08 95       	ret

00005df8 <ui8TWI_write>:
    5df8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5dfc:	84 e8       	ldi	r24, 0x84	; 132
    5dfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e02:	ec eb       	ldi	r30, 0xBC	; 188
    5e04:	f0 e0       	ldi	r31, 0x00	; 0
    5e06:	80 81       	ld	r24, Z
    5e08:	88 23       	and	r24, r24
    5e0a:	ec f7       	brge	.-6      	; 0x5e06 <ui8TWI_write+0xe>
    5e0c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5e10:	98 7f       	andi	r25, 0xF8	; 248
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	98 32       	cpi	r25, 0x28	; 40
    5e16:	09 f4       	brne	.+2      	; 0x5e1a <ui8TWI_write+0x22>
    5e18:	80 e0       	ldi	r24, 0x00	; 0
    5e1a:	08 95       	ret

00005e1c <ui8TWI_read_ack>:
    5e1c:	84 ec       	ldi	r24, 0xC4	; 196
    5e1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e22:	ec eb       	ldi	r30, 0xBC	; 188
    5e24:	f0 e0       	ldi	r31, 0x00	; 0
    5e26:	80 81       	ld	r24, Z
    5e28:	88 23       	and	r24, r24
    5e2a:	ec f7       	brge	.-6      	; 0x5e26 <ui8TWI_read_ack+0xa>
    5e2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5e30:	08 95       	ret

00005e32 <ui8TWI_read_nack>:
    5e32:	84 e8       	ldi	r24, 0x84	; 132
    5e34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e38:	ec eb       	ldi	r30, 0xBC	; 188
    5e3a:	f0 e0       	ldi	r31, 0x00	; 0
    5e3c:	80 81       	ld	r24, Z
    5e3e:	88 23       	and	r24, r24
    5e40:	ec f7       	brge	.-6      	; 0x5e3c <ui8TWI_read_nack+0xa>
    5e42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5e46:	08 95       	ret

00005e48 <vTWI_stop>:

void vTWI_stop(void){
    // transmit STOP condition
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    5e48:	84 e9       	ldi	r24, 0x94	; 148
    5e4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5e4e:	08 95       	ret

00005e50 <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5e50:	cf 93       	push	r28
    5e52:	df 93       	push	r29
    5e54:	00 d0       	rcall	.+0      	; 0x5e56 <vFrameReaderTask+0x6>
    5e56:	1f 92       	push	r1
    5e58:	cd b7       	in	r28, 0x3d	; 61
    5e5a:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5e5c:	59 dc       	rcall	.-1870   	; 0x5710 <xTaskGetCurrentTaskHandle>
    5e5e:	90 93 5a 1b 	sts	0x1B5A, r25	; 0x801b5a <frame_receiver+0x1>
    5e62:	80 93 59 1b 	sts	0x1B59, r24	; 0x801b59 <frame_receiver>
	uint32_t notification_value = 0;
    5e66:	19 82       	std	Y+1, r1	; 0x01
    5e68:	1a 82       	std	Y+2, r1	; 0x02
    5e6a:	1b 82       	std	Y+3, r1	; 0x03
    5e6c:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5e6e:	ee 24       	eor	r14, r14
    5e70:	ea 94       	dec	r14
    5e72:	fe 2c       	mov	r15, r14
    5e74:	8e 01       	movw	r16, r28
    5e76:	0f 5f       	subi	r16, 0xFF	; 255
    5e78:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7a:	2f ef       	ldi	r18, 0xFF	; 255
    5e7c:	3f ef       	ldi	r19, 0xFF	; 255
    5e7e:	a9 01       	movw	r20, r18
    5e80:	6f ef       	ldi	r22, 0xFF	; 255
    5e82:	7f ef       	ldi	r23, 0xFF	; 255
    5e84:	cb 01       	movw	r24, r22
    5e86:	a4 dd       	rcall	.-1208   	; 0x59d0 <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5e88:	e0 91 be 1b 	lds	r30, 0x1BBE	; 0x801bbe <receive_callback>
    5e8c:	f0 91 bf 1b 	lds	r31, 0x1BBF	; 0x801bbf <receive_callback+0x1>
    5e90:	30 97       	sbiw	r30, 0x00	; 0
    5e92:	69 f3       	breq	.-38     	; 0x5e6e <vFrameReaderTask+0x1e>
    5e94:	69 81       	ldd	r22, Y+1	; 0x01
    5e96:	7a 81       	ldd	r23, Y+2	; 0x02
    5e98:	80 ec       	ldi	r24, 0xC0	; 192
    5e9a:	9b e1       	ldi	r25, 0x1B	; 27
    5e9c:	19 95       	eicall
    5e9e:	e7 cf       	rjmp	.-50     	; 0x5e6e <vFrameReaderTask+0x1e>

00005ea0 <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5ea0:	cf 93       	push	r28
    5ea2:	df 93       	push	r29
    5ea4:	cd b7       	in	r28, 0x3d	; 61
    5ea6:	de b7       	in	r29, 0x3e	; 62
    5ea8:	c4 56       	subi	r28, 0x64	; 100
    5eaa:	d1 09       	sbc	r29, r1
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	f8 94       	cli
    5eb0:	de bf       	out	0x3e, r29	; 62
    5eb2:	0f be       	out	0x3f, r0	; 63
    5eb4:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5eb6:	00 ed       	ldi	r16, 0xD0	; 208
    5eb8:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5eba:	0f 2e       	mov	r0, r31
    5ebc:	f6 ed       	ldi	r31, 0xD6	; 214
    5ebe:	ef 2e       	mov	r14, r31
    5ec0:	f1 2c       	mov	r15, r1
    5ec2:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5ec4:	20 e0       	ldi	r18, 0x00	; 0
    5ec6:	4f ef       	ldi	r20, 0xFF	; 255
    5ec8:	5f ef       	ldi	r21, 0xFF	; 255
    5eca:	60 e0       	ldi	r22, 0x00	; 0
    5ecc:	70 e0       	ldi	r23, 0x00	; 0
    5ece:	80 91 7f 1b 	lds	r24, 0x1B7F	; 0x801b7f <xUartMutex>
    5ed2:	90 91 80 1b 	lds	r25, 0x1B80	; 0x801b80 <xUartMutex+0x1>
    5ed6:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5eda:	24 e6       	ldi	r18, 0x64	; 100
    5edc:	30 e0       	ldi	r19, 0x00	; 0
    5ede:	40 e0       	ldi	r20, 0x00	; 0
    5ee0:	be 01       	movw	r22, r28
    5ee2:	6f 5f       	subi	r22, 0xFF	; 255
    5ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee6:	84 e2       	ldi	r24, 0x24	; 36
    5ee8:	9c e1       	ldi	r25, 0x1C	; 28
    5eea:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5eee:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5ef0:	60 e0       	ldi	r22, 0x00	; 0
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	80 91 7f 1b 	lds	r24, 0x1B7F	; 0x801b7f <xUartMutex>
    5ef8:	90 91 80 1b 	lds	r25, 0x1B80	; 0x801b80 <xUartMutex+0x1>
    5efc:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
		if(num>0) {
    5f00:	c1 14       	cp	r12, r1
    5f02:	d1 04       	cpc	r13, r1
    5f04:	79 f0       	breq	.+30     	; 0x5f24 <vUartSendTask+0x84>
    5f06:	fe 01       	movw	r30, r28
    5f08:	31 96       	adiw	r30, 0x01	; 1
    5f0a:	9f 01       	movw	r18, r30
    5f0c:	2c 0d       	add	r18, r12
    5f0e:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5f10:	d8 01       	movw	r26, r16
    5f12:	8c 91       	ld	r24, X
    5f14:	85 ff       	sbrs	r24, 5
    5f16:	fc cf       	rjmp	.-8      	; 0x5f10 <vUartSendTask+0x70>
				UDR2 = data[i];
    5f18:	81 91       	ld	r24, Z+
    5f1a:	d7 01       	movw	r26, r14
    5f1c:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5f1e:	2e 17       	cp	r18, r30
    5f20:	3f 07       	cpc	r19, r31
    5f22:	b1 f7       	brne	.-20     	; 0x5f10 <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5f24:	8a e0       	ldi	r24, 0x0A	; 10
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <vTaskDelay>
	}
    5f2c:	cb cf       	rjmp	.-106    	; 0x5ec4 <vUartSendTask+0x24>

00005f2e <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5f2e:	af 92       	push	r10
    5f30:	bf 92       	push	r11
    5f32:	cf 92       	push	r12
    5f34:	df 92       	push	r13
    5f36:	ef 92       	push	r14
    5f38:	ff 92       	push	r15
    5f3a:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5f3c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5f40:	89 e1       	ldi	r24, 0x19	; 25
    5f42:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5f46:	80 ee       	ldi	r24, 0xE0	; 224
    5f48:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5f4c:	88 e9       	ldi	r24, 0x98	; 152
    5f4e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5f52:	e2 ed       	ldi	r30, 0xD2	; 210
    5f54:	f0 e0       	ldi	r31, 0x00	; 0
    5f56:	86 e0       	ldi	r24, 0x06	; 6
    5f58:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5f5a:	80 81       	ld	r24, Z
    5f5c:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5f5e:	84 e6       	ldi	r24, 0x64	; 100
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	0e 94 69 08 	call	0x10d2	; 0x10d2 <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5f66:	44 e6       	ldi	r20, 0x64	; 100
    5f68:	50 e0       	ldi	r21, 0x00	; 0
    5f6a:	bc 01       	movw	r22, r24
    5f6c:	84 e2       	ldi	r24, 0x24	; 36
    5f6e:	9c e1       	ldi	r25, 0x1C	; 28
    5f70:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5f74:	a1 2c       	mov	r10, r1
    5f76:	b1 2c       	mov	r11, r1
    5f78:	c1 2c       	mov	r12, r1
    5f7a:	d1 2c       	mov	r13, r1
    5f7c:	e1 2c       	mov	r14, r1
    5f7e:	f1 2c       	mov	r15, r1
    5f80:	04 e0       	ldi	r16, 0x04	; 4
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	4c e2       	ldi	r20, 0x2C	; 44
    5f88:	51 e0       	ldi	r21, 0x01	; 1
    5f8a:	6f e4       	ldi	r22, 0x4F	; 79
    5f8c:	77 e0       	ldi	r23, 0x07	; 7
    5f8e:	88 e2       	ldi	r24, 0x28	; 40
    5f90:	9f e2       	ldi	r25, 0x2F	; 47
    5f92:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	4c e2       	ldi	r20, 0x2C	; 44
    5f9c:	51 e0       	ldi	r21, 0x01	; 1
    5f9e:	6b e5       	ldi	r22, 0x5B	; 91
    5fa0:	77 e0       	ldi	r23, 0x07	; 7
    5fa2:	80 e5       	ldi	r24, 0x50	; 80
    5fa4:	9f e2       	ldi	r25, 0x2F	; 47
    5fa6:	0e 94 e7 22 	call	0x45ce	; 0x45ce <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5faa:	81 e0       	ldi	r24, 0x01	; 1
    5fac:	0e 94 b1 19 	call	0x3362	; 0x3362 <xQueueCreateMutex>
    5fb0:	90 93 80 1b 	sts	0x1B80, r25	; 0x801b80 <xUartMutex+0x1>
    5fb4:	80 93 7f 1b 	sts	0x1B7F, r24	; 0x801b7f <xUartMutex>
}
    5fb8:	0f 91       	pop	r16
    5fba:	ff 90       	pop	r15
    5fbc:	ef 90       	pop	r14
    5fbe:	df 90       	pop	r13
    5fc0:	cf 90       	pop	r12
    5fc2:	bf 90       	pop	r11
    5fc4:	af 90       	pop	r10
    5fc6:	08 95       	ret

00005fc8 <vUSART_send>:

void vUSART_send(uint8_t *data, uint16_t len) {
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	ec 01       	movw	r28, r24
    5fd2:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5fd4:	20 e0       	ldi	r18, 0x00	; 0
    5fd6:	4f ef       	ldi	r20, 0xFF	; 255
    5fd8:	5f ef       	ldi	r21, 0xFF	; 255
    5fda:	60 e0       	ldi	r22, 0x00	; 0
    5fdc:	70 e0       	ldi	r23, 0x00	; 0
    5fde:	80 91 7f 1b 	lds	r24, 0x1B7F	; 0x801b7f <xUartMutex>
    5fe2:	90 91 80 1b 	lds	r25, 0x1B80	; 0x801b80 <xUartMutex+0x1>
    5fe6:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5fea:	a8 01       	movw	r20, r16
    5fec:	be 01       	movw	r22, r28
    5fee:	84 e2       	ldi	r24, 0x24	; 36
    5ff0:	9c e1       	ldi	r25, 0x1C	; 28
    5ff2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	80 91 7f 1b 	lds	r24, 0x1B7F	; 0x801b7f <xUartMutex>
    5ffe:	90 91 80 1b 	lds	r25, 0x1B80	; 0x801b80 <xUartMutex+0x1>
    6002:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <xQueueGive>
}
    6006:	df 91       	pop	r29
    6008:	cf 91       	pop	r28
    600a:	1f 91       	pop	r17
    600c:	0f 91       	pop	r16
    600e:	08 95       	ret

00006010 <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    6010:	90 93 bf 1b 	sts	0x1BBF, r25	; 0x801bbf <receive_callback+0x1>
    6014:	80 93 be 1b 	sts	0x1BBE, r24	; 0x801bbe <receive_callback>
    6018:	08 95       	ret

0000601a <__vector_51>:
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}


ISR(USART2_RX_vect){
    601a:	1f 92       	push	r1
    601c:	0f 92       	push	r0
    601e:	0f b6       	in	r0, 0x3f	; 63
    6020:	0f 92       	push	r0
    6022:	11 24       	eor	r1, r1
    6024:	0b b6       	in	r0, 0x3b	; 59
    6026:	0f 92       	push	r0
    6028:	cf 92       	push	r12
    602a:	df 92       	push	r13
    602c:	ef 92       	push	r14
    602e:	ff 92       	push	r15
    6030:	0f 93       	push	r16
    6032:	1f 93       	push	r17
    6034:	2f 93       	push	r18
    6036:	3f 93       	push	r19
    6038:	4f 93       	push	r20
    603a:	5f 93       	push	r21
    603c:	6f 93       	push	r22
    603e:	7f 93       	push	r23
    6040:	8f 93       	push	r24
    6042:	9f 93       	push	r25
    6044:	af 93       	push	r26
    6046:	bf 93       	push	r27
    6048:	cf 93       	push	r28
    604a:	df 93       	push	r29
    604c:	ef 93       	push	r30
    604e:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    6050:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <input_index.2398>
    6054:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <input_index.2398+0x1>
    6058:	ec 01       	movw	r28, r24
    605a:	21 96       	adiw	r28, 0x01	; 1
    605c:	d0 93 58 1b 	sts	0x1B58, r29	; 0x801b58 <input_index.2398+0x1>
    6060:	c0 93 57 1b 	sts	0x1B57, r28	; 0x801b57 <input_index.2398>
    6064:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    6068:	fc 01       	movw	r30, r24
    606a:	ed 50       	subi	r30, 0x0D	; 13
    606c:	f5 4e       	sbci	r31, 0xE5	; 229
    606e:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    6070:	21 11       	cpse	r18, r1
    6072:	1d c0       	rjmp	.+58     	; 0x60ae <__vector_51+0x94>
		if(frame_receiver != NULL) {
    6074:	c0 90 59 1b 	lds	r12, 0x1B59	; 0x801b59 <frame_receiver>
    6078:	d0 90 5a 1b 	lds	r13, 0x1B5A	; 0x801b5a <frame_receiver+0x1>
    607c:	c1 14       	cp	r12, r1
    607e:	d1 04       	cpc	r13, r1
    6080:	89 f0       	breq	.+34     	; 0x60a4 <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    6082:	ae 01       	movw	r20, r28
    6084:	63 ef       	ldi	r22, 0xF3	; 243
    6086:	7a e1       	ldi	r23, 0x1A	; 26
    6088:	80 ec       	ldi	r24, 0xC0	; 192
    608a:	9b e1       	ldi	r25, 0x1B	; 27
    608c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    6090:	ae 01       	movw	r20, r28
    6092:	60 e0       	ldi	r22, 0x00	; 0
    6094:	70 e0       	ldi	r23, 0x00	; 0
    6096:	e1 2c       	mov	r14, r1
    6098:	f1 2c       	mov	r15, r1
    609a:	00 e0       	ldi	r16, 0x00	; 0
    609c:	10 e0       	ldi	r17, 0x00	; 0
    609e:	24 e0       	ldi	r18, 0x04	; 4
    60a0:	c6 01       	movw	r24, r12
    60a2:	e3 dd       	rcall	.-1082   	; 0x5c6a <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    60a4:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <input_index.2398+0x1>
    60a8:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <input_index.2398>
    60ac:	07 c0       	rjmp	.+14     	; 0x60bc <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    60ae:	c5 36       	cpi	r28, 0x65	; 101
    60b0:	d1 05       	cpc	r29, r1
    60b2:	20 f0       	brcs	.+8      	; 0x60bc <__vector_51+0xa2>
    60b4:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <input_index.2398+0x1>
    60b8:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <input_index.2398>
    60bc:	ff 91       	pop	r31
    60be:	ef 91       	pop	r30
    60c0:	df 91       	pop	r29
    60c2:	cf 91       	pop	r28
    60c4:	bf 91       	pop	r27
    60c6:	af 91       	pop	r26
    60c8:	9f 91       	pop	r25
    60ca:	8f 91       	pop	r24
    60cc:	7f 91       	pop	r23
    60ce:	6f 91       	pop	r22
    60d0:	5f 91       	pop	r21
    60d2:	4f 91       	pop	r20
    60d4:	3f 91       	pop	r19
    60d6:	2f 91       	pop	r18
    60d8:	1f 91       	pop	r17
    60da:	0f 91       	pop	r16
    60dc:	ff 90       	pop	r15
    60de:	ef 90       	pop	r14
    60e0:	df 90       	pop	r13
    60e2:	cf 90       	pop	r12
    60e4:	0f 90       	pop	r0
    60e6:	0b be       	out	0x3b, r0	; 59
    60e8:	0f 90       	pop	r0
    60ea:	0f be       	out	0x3f, r0	; 63
    60ec:	0f 90       	pop	r0
    60ee:	1f 90       	pop	r1
    60f0:	18 95       	reti

000060f2 <__subsf3>:
    60f2:	50 58       	subi	r21, 0x80	; 128

000060f4 <__addsf3>:
    60f4:	bb 27       	eor	r27, r27
    60f6:	aa 27       	eor	r26, r26
    60f8:	0e d0       	rcall	.+28     	; 0x6116 <__addsf3x>
    60fa:	27 c2       	rjmp	.+1102   	; 0x654a <__fp_round>
    60fc:	f0 d1       	rcall	.+992    	; 0x64de <__fp_pscA>
    60fe:	30 f0       	brcs	.+12     	; 0x610c <__addsf3+0x18>
    6100:	f5 d1       	rcall	.+1002   	; 0x64ec <__fp_pscB>
    6102:	20 f0       	brcs	.+8      	; 0x610c <__addsf3+0x18>
    6104:	31 f4       	brne	.+12     	; 0x6112 <__addsf3+0x1e>
    6106:	9f 3f       	cpi	r25, 0xFF	; 255
    6108:	11 f4       	brne	.+4      	; 0x610e <__addsf3+0x1a>
    610a:	1e f4       	brtc	.+6      	; 0x6112 <__addsf3+0x1e>
    610c:	c0 c1       	rjmp	.+896    	; 0x648e <__fp_nan>
    610e:	0e f4       	brtc	.+2      	; 0x6112 <__addsf3+0x1e>
    6110:	e0 95       	com	r30
    6112:	e7 fb       	bst	r30, 7
    6114:	b6 c1       	rjmp	.+876    	; 0x6482 <__fp_inf>

00006116 <__addsf3x>:
    6116:	e9 2f       	mov	r30, r25
    6118:	3a d2       	rcall	.+1140   	; 0x658e <__fp_split3>
    611a:	80 f3       	brcs	.-32     	; 0x60fc <__addsf3+0x8>
    611c:	ba 17       	cp	r27, r26
    611e:	62 07       	cpc	r22, r18
    6120:	73 07       	cpc	r23, r19
    6122:	84 07       	cpc	r24, r20
    6124:	95 07       	cpc	r25, r21
    6126:	18 f0       	brcs	.+6      	; 0x612e <__addsf3x+0x18>
    6128:	71 f4       	brne	.+28     	; 0x6146 <__addsf3x+0x30>
    612a:	9e f5       	brtc	.+102    	; 0x6192 <__addsf3x+0x7c>
    612c:	52 c2       	rjmp	.+1188   	; 0x65d2 <__fp_zero>
    612e:	0e f4       	brtc	.+2      	; 0x6132 <__addsf3x+0x1c>
    6130:	e0 95       	com	r30
    6132:	0b 2e       	mov	r0, r27
    6134:	ba 2f       	mov	r27, r26
    6136:	a0 2d       	mov	r26, r0
    6138:	0b 01       	movw	r0, r22
    613a:	b9 01       	movw	r22, r18
    613c:	90 01       	movw	r18, r0
    613e:	0c 01       	movw	r0, r24
    6140:	ca 01       	movw	r24, r20
    6142:	a0 01       	movw	r20, r0
    6144:	11 24       	eor	r1, r1
    6146:	ff 27       	eor	r31, r31
    6148:	59 1b       	sub	r21, r25
    614a:	99 f0       	breq	.+38     	; 0x6172 <__addsf3x+0x5c>
    614c:	59 3f       	cpi	r21, 0xF9	; 249
    614e:	50 f4       	brcc	.+20     	; 0x6164 <__addsf3x+0x4e>
    6150:	50 3e       	cpi	r21, 0xE0	; 224
    6152:	68 f1       	brcs	.+90     	; 0x61ae <__addsf3x+0x98>
    6154:	1a 16       	cp	r1, r26
    6156:	f0 40       	sbci	r31, 0x00	; 0
    6158:	a2 2f       	mov	r26, r18
    615a:	23 2f       	mov	r18, r19
    615c:	34 2f       	mov	r19, r20
    615e:	44 27       	eor	r20, r20
    6160:	58 5f       	subi	r21, 0xF8	; 248
    6162:	f3 cf       	rjmp	.-26     	; 0x614a <__addsf3x+0x34>
    6164:	46 95       	lsr	r20
    6166:	37 95       	ror	r19
    6168:	27 95       	ror	r18
    616a:	a7 95       	ror	r26
    616c:	f0 40       	sbci	r31, 0x00	; 0
    616e:	53 95       	inc	r21
    6170:	c9 f7       	brne	.-14     	; 0x6164 <__addsf3x+0x4e>
    6172:	7e f4       	brtc	.+30     	; 0x6192 <__addsf3x+0x7c>
    6174:	1f 16       	cp	r1, r31
    6176:	ba 0b       	sbc	r27, r26
    6178:	62 0b       	sbc	r22, r18
    617a:	73 0b       	sbc	r23, r19
    617c:	84 0b       	sbc	r24, r20
    617e:	ba f0       	brmi	.+46     	; 0x61ae <__addsf3x+0x98>
    6180:	91 50       	subi	r25, 0x01	; 1
    6182:	a1 f0       	breq	.+40     	; 0x61ac <__addsf3x+0x96>
    6184:	ff 0f       	add	r31, r31
    6186:	bb 1f       	adc	r27, r27
    6188:	66 1f       	adc	r22, r22
    618a:	77 1f       	adc	r23, r23
    618c:	88 1f       	adc	r24, r24
    618e:	c2 f7       	brpl	.-16     	; 0x6180 <__addsf3x+0x6a>
    6190:	0e c0       	rjmp	.+28     	; 0x61ae <__addsf3x+0x98>
    6192:	ba 0f       	add	r27, r26
    6194:	62 1f       	adc	r22, r18
    6196:	73 1f       	adc	r23, r19
    6198:	84 1f       	adc	r24, r20
    619a:	48 f4       	brcc	.+18     	; 0x61ae <__addsf3x+0x98>
    619c:	87 95       	ror	r24
    619e:	77 95       	ror	r23
    61a0:	67 95       	ror	r22
    61a2:	b7 95       	ror	r27
    61a4:	f7 95       	ror	r31
    61a6:	9e 3f       	cpi	r25, 0xFE	; 254
    61a8:	08 f0       	brcs	.+2      	; 0x61ac <__addsf3x+0x96>
    61aa:	b3 cf       	rjmp	.-154    	; 0x6112 <__addsf3+0x1e>
    61ac:	93 95       	inc	r25
    61ae:	88 0f       	add	r24, r24
    61b0:	08 f0       	brcs	.+2      	; 0x61b4 <__addsf3x+0x9e>
    61b2:	99 27       	eor	r25, r25
    61b4:	ee 0f       	add	r30, r30
    61b6:	97 95       	ror	r25
    61b8:	87 95       	ror	r24
    61ba:	08 95       	ret
    61bc:	90 d1       	rcall	.+800    	; 0x64de <__fp_pscA>
    61be:	58 f0       	brcs	.+22     	; 0x61d6 <__addsf3x+0xc0>
    61c0:	80 e8       	ldi	r24, 0x80	; 128
    61c2:	91 e0       	ldi	r25, 0x01	; 1
    61c4:	09 f4       	brne	.+2      	; 0x61c8 <__addsf3x+0xb2>
    61c6:	9e ef       	ldi	r25, 0xFE	; 254
    61c8:	91 d1       	rcall	.+802    	; 0x64ec <__fp_pscB>
    61ca:	28 f0       	brcs	.+10     	; 0x61d6 <__addsf3x+0xc0>
    61cc:	40 e8       	ldi	r20, 0x80	; 128
    61ce:	51 e0       	ldi	r21, 0x01	; 1
    61d0:	59 f4       	brne	.+22     	; 0x61e8 <atan2+0xe>
    61d2:	5e ef       	ldi	r21, 0xFE	; 254
    61d4:	09 c0       	rjmp	.+18     	; 0x61e8 <atan2+0xe>
    61d6:	5b c1       	rjmp	.+694    	; 0x648e <__fp_nan>
    61d8:	fc c1       	rjmp	.+1016   	; 0x65d2 <__fp_zero>

000061da <atan2>:
    61da:	e9 2f       	mov	r30, r25
    61dc:	e0 78       	andi	r30, 0x80	; 128
    61de:	d7 d1       	rcall	.+942    	; 0x658e <__fp_split3>
    61e0:	68 f3       	brcs	.-38     	; 0x61bc <__addsf3x+0xa6>
    61e2:	09 2e       	mov	r0, r25
    61e4:	05 2a       	or	r0, r21
    61e6:	c1 f3       	breq	.-16     	; 0x61d8 <__addsf3x+0xc2>
    61e8:	26 17       	cp	r18, r22
    61ea:	37 07       	cpc	r19, r23
    61ec:	48 07       	cpc	r20, r24
    61ee:	59 07       	cpc	r21, r25
    61f0:	38 f0       	brcs	.+14     	; 0x6200 <atan2+0x26>
    61f2:	0e 2e       	mov	r0, r30
    61f4:	07 f8       	bld	r0, 7
    61f6:	e0 25       	eor	r30, r0
    61f8:	69 f0       	breq	.+26     	; 0x6214 <atan2+0x3a>
    61fa:	e0 25       	eor	r30, r0
    61fc:	e0 64       	ori	r30, 0x40	; 64
    61fe:	0a c0       	rjmp	.+20     	; 0x6214 <atan2+0x3a>
    6200:	ef 63       	ori	r30, 0x3F	; 63
    6202:	07 f8       	bld	r0, 7
    6204:	00 94       	com	r0
    6206:	07 fa       	bst	r0, 7
    6208:	db 01       	movw	r26, r22
    620a:	b9 01       	movw	r22, r18
    620c:	9d 01       	movw	r18, r26
    620e:	dc 01       	movw	r26, r24
    6210:	ca 01       	movw	r24, r20
    6212:	ad 01       	movw	r20, r26
    6214:	ef 93       	push	r30
    6216:	4a d0       	rcall	.+148    	; 0x62ac <__divsf3_pse>
    6218:	98 d1       	rcall	.+816    	; 0x654a <__fp_round>
    621a:	0a d0       	rcall	.+20     	; 0x6230 <atan>
    621c:	5f 91       	pop	r21
    621e:	55 23       	and	r21, r21
    6220:	31 f0       	breq	.+12     	; 0x622e <atan2+0x54>
    6222:	2b ed       	ldi	r18, 0xDB	; 219
    6224:	3f e0       	ldi	r19, 0x0F	; 15
    6226:	49 e4       	ldi	r20, 0x49	; 73
    6228:	50 fd       	sbrc	r21, 0
    622a:	49 ec       	ldi	r20, 0xC9	; 201
    622c:	63 cf       	rjmp	.-314    	; 0x60f4 <__addsf3>
    622e:	08 95       	ret

00006230 <atan>:
    6230:	df 93       	push	r29
    6232:	dd 27       	eor	r29, r29
    6234:	b9 2f       	mov	r27, r25
    6236:	bf 77       	andi	r27, 0x7F	; 127
    6238:	40 e8       	ldi	r20, 0x80	; 128
    623a:	5f e3       	ldi	r21, 0x3F	; 63
    623c:	16 16       	cp	r1, r22
    623e:	17 06       	cpc	r1, r23
    6240:	48 07       	cpc	r20, r24
    6242:	5b 07       	cpc	r21, r27
    6244:	10 f4       	brcc	.+4      	; 0x624a <atan+0x1a>
    6246:	d9 2f       	mov	r29, r25
    6248:	cf d1       	rcall	.+926    	; 0x65e8 <inverse>
    624a:	9f 93       	push	r25
    624c:	8f 93       	push	r24
    624e:	7f 93       	push	r23
    6250:	6f 93       	push	r22
    6252:	7c d2       	rcall	.+1272   	; 0x674c <square>
    6254:	e4 ee       	ldi	r30, 0xE4	; 228
    6256:	f0 e0       	ldi	r31, 0x00	; 0
    6258:	1d d1       	rcall	.+570    	; 0x6494 <__fp_powser>
    625a:	77 d1       	rcall	.+750    	; 0x654a <__fp_round>
    625c:	2f 91       	pop	r18
    625e:	3f 91       	pop	r19
    6260:	4f 91       	pop	r20
    6262:	5f 91       	pop	r21
    6264:	d4 d1       	rcall	.+936    	; 0x660e <__mulsf3x>
    6266:	dd 23       	and	r29, r29
    6268:	49 f0       	breq	.+18     	; 0x627c <atan+0x4c>
    626a:	90 58       	subi	r25, 0x80	; 128
    626c:	a2 ea       	ldi	r26, 0xA2	; 162
    626e:	2a ed       	ldi	r18, 0xDA	; 218
    6270:	3f e0       	ldi	r19, 0x0F	; 15
    6272:	49 ec       	ldi	r20, 0xC9	; 201
    6274:	5f e3       	ldi	r21, 0x3F	; 63
    6276:	d0 78       	andi	r29, 0x80	; 128
    6278:	5d 27       	eor	r21, r29
    627a:	4d df       	rcall	.-358    	; 0x6116 <__addsf3x>
    627c:	df 91       	pop	r29
    627e:	65 c1       	rjmp	.+714    	; 0x654a <__fp_round>

00006280 <__cmpsf2>:
    6280:	dc d0       	rcall	.+440    	; 0x643a <__fp_cmp>
    6282:	08 f4       	brcc	.+2      	; 0x6286 <__cmpsf2+0x6>
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	08 95       	ret

00006288 <cos>:
    6288:	39 d1       	rcall	.+626    	; 0x64fc <__fp_rempio2>
    628a:	e3 95       	inc	r30
    628c:	6f c1       	rjmp	.+734    	; 0x656c <__fp_sinus>

0000628e <__divsf3>:
    628e:	0c d0       	rcall	.+24     	; 0x62a8 <__divsf3x>
    6290:	5c c1       	rjmp	.+696    	; 0x654a <__fp_round>
    6292:	2c d1       	rcall	.+600    	; 0x64ec <__fp_pscB>
    6294:	40 f0       	brcs	.+16     	; 0x62a6 <__divsf3+0x18>
    6296:	23 d1       	rcall	.+582    	; 0x64de <__fp_pscA>
    6298:	30 f0       	brcs	.+12     	; 0x62a6 <__divsf3+0x18>
    629a:	21 f4       	brne	.+8      	; 0x62a4 <__divsf3+0x16>
    629c:	5f 3f       	cpi	r21, 0xFF	; 255
    629e:	19 f0       	breq	.+6      	; 0x62a6 <__divsf3+0x18>
    62a0:	f0 c0       	rjmp	.+480    	; 0x6482 <__fp_inf>
    62a2:	51 11       	cpse	r21, r1
    62a4:	97 c1       	rjmp	.+814    	; 0x65d4 <__fp_szero>
    62a6:	f3 c0       	rjmp	.+486    	; 0x648e <__fp_nan>

000062a8 <__divsf3x>:
    62a8:	72 d1       	rcall	.+740    	; 0x658e <__fp_split3>
    62aa:	98 f3       	brcs	.-26     	; 0x6292 <__divsf3+0x4>

000062ac <__divsf3_pse>:
    62ac:	99 23       	and	r25, r25
    62ae:	c9 f3       	breq	.-14     	; 0x62a2 <__divsf3+0x14>
    62b0:	55 23       	and	r21, r21
    62b2:	b1 f3       	breq	.-20     	; 0x62a0 <__divsf3+0x12>
    62b4:	95 1b       	sub	r25, r21
    62b6:	55 0b       	sbc	r21, r21
    62b8:	bb 27       	eor	r27, r27
    62ba:	aa 27       	eor	r26, r26
    62bc:	62 17       	cp	r22, r18
    62be:	73 07       	cpc	r23, r19
    62c0:	84 07       	cpc	r24, r20
    62c2:	38 f0       	brcs	.+14     	; 0x62d2 <__divsf3_pse+0x26>
    62c4:	9f 5f       	subi	r25, 0xFF	; 255
    62c6:	5f 4f       	sbci	r21, 0xFF	; 255
    62c8:	22 0f       	add	r18, r18
    62ca:	33 1f       	adc	r19, r19
    62cc:	44 1f       	adc	r20, r20
    62ce:	aa 1f       	adc	r26, r26
    62d0:	a9 f3       	breq	.-22     	; 0x62bc <__divsf3_pse+0x10>
    62d2:	33 d0       	rcall	.+102    	; 0x633a <__divsf3_pse+0x8e>
    62d4:	0e 2e       	mov	r0, r30
    62d6:	3a f0       	brmi	.+14     	; 0x62e6 <__divsf3_pse+0x3a>
    62d8:	e0 e8       	ldi	r30, 0x80	; 128
    62da:	30 d0       	rcall	.+96     	; 0x633c <__divsf3_pse+0x90>
    62dc:	91 50       	subi	r25, 0x01	; 1
    62de:	50 40       	sbci	r21, 0x00	; 0
    62e0:	e6 95       	lsr	r30
    62e2:	00 1c       	adc	r0, r0
    62e4:	ca f7       	brpl	.-14     	; 0x62d8 <__divsf3_pse+0x2c>
    62e6:	29 d0       	rcall	.+82     	; 0x633a <__divsf3_pse+0x8e>
    62e8:	fe 2f       	mov	r31, r30
    62ea:	27 d0       	rcall	.+78     	; 0x633a <__divsf3_pse+0x8e>
    62ec:	66 0f       	add	r22, r22
    62ee:	77 1f       	adc	r23, r23
    62f0:	88 1f       	adc	r24, r24
    62f2:	bb 1f       	adc	r27, r27
    62f4:	26 17       	cp	r18, r22
    62f6:	37 07       	cpc	r19, r23
    62f8:	48 07       	cpc	r20, r24
    62fa:	ab 07       	cpc	r26, r27
    62fc:	b0 e8       	ldi	r27, 0x80	; 128
    62fe:	09 f0       	breq	.+2      	; 0x6302 <__divsf3_pse+0x56>
    6300:	bb 0b       	sbc	r27, r27
    6302:	80 2d       	mov	r24, r0
    6304:	bf 01       	movw	r22, r30
    6306:	ff 27       	eor	r31, r31
    6308:	93 58       	subi	r25, 0x83	; 131
    630a:	5f 4f       	sbci	r21, 0xFF	; 255
    630c:	2a f0       	brmi	.+10     	; 0x6318 <__divsf3_pse+0x6c>
    630e:	9e 3f       	cpi	r25, 0xFE	; 254
    6310:	51 05       	cpc	r21, r1
    6312:	68 f0       	brcs	.+26     	; 0x632e <__divsf3_pse+0x82>
    6314:	b6 c0       	rjmp	.+364    	; 0x6482 <__fp_inf>
    6316:	5e c1       	rjmp	.+700    	; 0x65d4 <__fp_szero>
    6318:	5f 3f       	cpi	r21, 0xFF	; 255
    631a:	ec f3       	brlt	.-6      	; 0x6316 <__divsf3_pse+0x6a>
    631c:	98 3e       	cpi	r25, 0xE8	; 232
    631e:	dc f3       	brlt	.-10     	; 0x6316 <__divsf3_pse+0x6a>
    6320:	86 95       	lsr	r24
    6322:	77 95       	ror	r23
    6324:	67 95       	ror	r22
    6326:	b7 95       	ror	r27
    6328:	f7 95       	ror	r31
    632a:	9f 5f       	subi	r25, 0xFF	; 255
    632c:	c9 f7       	brne	.-14     	; 0x6320 <__divsf3_pse+0x74>
    632e:	88 0f       	add	r24, r24
    6330:	91 1d       	adc	r25, r1
    6332:	96 95       	lsr	r25
    6334:	87 95       	ror	r24
    6336:	97 f9       	bld	r25, 7
    6338:	08 95       	ret
    633a:	e1 e0       	ldi	r30, 0x01	; 1
    633c:	66 0f       	add	r22, r22
    633e:	77 1f       	adc	r23, r23
    6340:	88 1f       	adc	r24, r24
    6342:	bb 1f       	adc	r27, r27
    6344:	62 17       	cp	r22, r18
    6346:	73 07       	cpc	r23, r19
    6348:	84 07       	cpc	r24, r20
    634a:	ba 07       	cpc	r27, r26
    634c:	20 f0       	brcs	.+8      	; 0x6356 <__divsf3_pse+0xaa>
    634e:	62 1b       	sub	r22, r18
    6350:	73 0b       	sbc	r23, r19
    6352:	84 0b       	sbc	r24, r20
    6354:	ba 0b       	sbc	r27, r26
    6356:	ee 1f       	adc	r30, r30
    6358:	88 f7       	brcc	.-30     	; 0x633c <__divsf3_pse+0x90>
    635a:	e0 95       	com	r30
    635c:	08 95       	ret

0000635e <__fixsfsi>:
    635e:	04 d0       	rcall	.+8      	; 0x6368 <__fixunssfsi>
    6360:	68 94       	set
    6362:	b1 11       	cpse	r27, r1
    6364:	37 c1       	rjmp	.+622    	; 0x65d4 <__fp_szero>
    6366:	08 95       	ret

00006368 <__fixunssfsi>:
    6368:	1a d1       	rcall	.+564    	; 0x659e <__fp_splitA>
    636a:	88 f0       	brcs	.+34     	; 0x638e <__fixunssfsi+0x26>
    636c:	9f 57       	subi	r25, 0x7F	; 127
    636e:	90 f0       	brcs	.+36     	; 0x6394 <__fixunssfsi+0x2c>
    6370:	b9 2f       	mov	r27, r25
    6372:	99 27       	eor	r25, r25
    6374:	b7 51       	subi	r27, 0x17	; 23
    6376:	a0 f0       	brcs	.+40     	; 0x63a0 <__fixunssfsi+0x38>
    6378:	d1 f0       	breq	.+52     	; 0x63ae <__fixunssfsi+0x46>
    637a:	66 0f       	add	r22, r22
    637c:	77 1f       	adc	r23, r23
    637e:	88 1f       	adc	r24, r24
    6380:	99 1f       	adc	r25, r25
    6382:	1a f0       	brmi	.+6      	; 0x638a <__fixunssfsi+0x22>
    6384:	ba 95       	dec	r27
    6386:	c9 f7       	brne	.-14     	; 0x637a <__fixunssfsi+0x12>
    6388:	12 c0       	rjmp	.+36     	; 0x63ae <__fixunssfsi+0x46>
    638a:	b1 30       	cpi	r27, 0x01	; 1
    638c:	81 f0       	breq	.+32     	; 0x63ae <__fixunssfsi+0x46>
    638e:	21 d1       	rcall	.+578    	; 0x65d2 <__fp_zero>
    6390:	b1 e0       	ldi	r27, 0x01	; 1
    6392:	08 95       	ret
    6394:	1e c1       	rjmp	.+572    	; 0x65d2 <__fp_zero>
    6396:	67 2f       	mov	r22, r23
    6398:	78 2f       	mov	r23, r24
    639a:	88 27       	eor	r24, r24
    639c:	b8 5f       	subi	r27, 0xF8	; 248
    639e:	39 f0       	breq	.+14     	; 0x63ae <__fixunssfsi+0x46>
    63a0:	b9 3f       	cpi	r27, 0xF9	; 249
    63a2:	cc f3       	brlt	.-14     	; 0x6396 <__fixunssfsi+0x2e>
    63a4:	86 95       	lsr	r24
    63a6:	77 95       	ror	r23
    63a8:	67 95       	ror	r22
    63aa:	b3 95       	inc	r27
    63ac:	d9 f7       	brne	.-10     	; 0x63a4 <__fixunssfsi+0x3c>
    63ae:	3e f4       	brtc	.+14     	; 0x63be <__fixunssfsi+0x56>
    63b0:	90 95       	com	r25
    63b2:	80 95       	com	r24
    63b4:	70 95       	com	r23
    63b6:	61 95       	neg	r22
    63b8:	7f 4f       	sbci	r23, 0xFF	; 255
    63ba:	8f 4f       	sbci	r24, 0xFF	; 255
    63bc:	9f 4f       	sbci	r25, 0xFF	; 255
    63be:	08 95       	ret

000063c0 <__floatunsisf>:
    63c0:	e8 94       	clt
    63c2:	09 c0       	rjmp	.+18     	; 0x63d6 <__floatsisf+0x12>

000063c4 <__floatsisf>:
    63c4:	97 fb       	bst	r25, 7
    63c6:	3e f4       	brtc	.+14     	; 0x63d6 <__floatsisf+0x12>
    63c8:	90 95       	com	r25
    63ca:	80 95       	com	r24
    63cc:	70 95       	com	r23
    63ce:	61 95       	neg	r22
    63d0:	7f 4f       	sbci	r23, 0xFF	; 255
    63d2:	8f 4f       	sbci	r24, 0xFF	; 255
    63d4:	9f 4f       	sbci	r25, 0xFF	; 255
    63d6:	99 23       	and	r25, r25
    63d8:	a9 f0       	breq	.+42     	; 0x6404 <__floatsisf+0x40>
    63da:	f9 2f       	mov	r31, r25
    63dc:	96 e9       	ldi	r25, 0x96	; 150
    63de:	bb 27       	eor	r27, r27
    63e0:	93 95       	inc	r25
    63e2:	f6 95       	lsr	r31
    63e4:	87 95       	ror	r24
    63e6:	77 95       	ror	r23
    63e8:	67 95       	ror	r22
    63ea:	b7 95       	ror	r27
    63ec:	f1 11       	cpse	r31, r1
    63ee:	f8 cf       	rjmp	.-16     	; 0x63e0 <__floatsisf+0x1c>
    63f0:	fa f4       	brpl	.+62     	; 0x6430 <__floatsisf+0x6c>
    63f2:	bb 0f       	add	r27, r27
    63f4:	11 f4       	brne	.+4      	; 0x63fa <__floatsisf+0x36>
    63f6:	60 ff       	sbrs	r22, 0
    63f8:	1b c0       	rjmp	.+54     	; 0x6430 <__floatsisf+0x6c>
    63fa:	6f 5f       	subi	r22, 0xFF	; 255
    63fc:	7f 4f       	sbci	r23, 0xFF	; 255
    63fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6400:	9f 4f       	sbci	r25, 0xFF	; 255
    6402:	16 c0       	rjmp	.+44     	; 0x6430 <__floatsisf+0x6c>
    6404:	88 23       	and	r24, r24
    6406:	11 f0       	breq	.+4      	; 0x640c <__floatsisf+0x48>
    6408:	96 e9       	ldi	r25, 0x96	; 150
    640a:	11 c0       	rjmp	.+34     	; 0x642e <__floatsisf+0x6a>
    640c:	77 23       	and	r23, r23
    640e:	21 f0       	breq	.+8      	; 0x6418 <__floatsisf+0x54>
    6410:	9e e8       	ldi	r25, 0x8E	; 142
    6412:	87 2f       	mov	r24, r23
    6414:	76 2f       	mov	r23, r22
    6416:	05 c0       	rjmp	.+10     	; 0x6422 <__floatsisf+0x5e>
    6418:	66 23       	and	r22, r22
    641a:	71 f0       	breq	.+28     	; 0x6438 <__floatsisf+0x74>
    641c:	96 e8       	ldi	r25, 0x86	; 134
    641e:	86 2f       	mov	r24, r22
    6420:	70 e0       	ldi	r23, 0x00	; 0
    6422:	60 e0       	ldi	r22, 0x00	; 0
    6424:	2a f0       	brmi	.+10     	; 0x6430 <__floatsisf+0x6c>
    6426:	9a 95       	dec	r25
    6428:	66 0f       	add	r22, r22
    642a:	77 1f       	adc	r23, r23
    642c:	88 1f       	adc	r24, r24
    642e:	da f7       	brpl	.-10     	; 0x6426 <__floatsisf+0x62>
    6430:	88 0f       	add	r24, r24
    6432:	96 95       	lsr	r25
    6434:	87 95       	ror	r24
    6436:	97 f9       	bld	r25, 7
    6438:	08 95       	ret

0000643a <__fp_cmp>:
    643a:	99 0f       	add	r25, r25
    643c:	00 08       	sbc	r0, r0
    643e:	55 0f       	add	r21, r21
    6440:	aa 0b       	sbc	r26, r26
    6442:	e0 e8       	ldi	r30, 0x80	; 128
    6444:	fe ef       	ldi	r31, 0xFE	; 254
    6446:	16 16       	cp	r1, r22
    6448:	17 06       	cpc	r1, r23
    644a:	e8 07       	cpc	r30, r24
    644c:	f9 07       	cpc	r31, r25
    644e:	c0 f0       	brcs	.+48     	; 0x6480 <__fp_cmp+0x46>
    6450:	12 16       	cp	r1, r18
    6452:	13 06       	cpc	r1, r19
    6454:	e4 07       	cpc	r30, r20
    6456:	f5 07       	cpc	r31, r21
    6458:	98 f0       	brcs	.+38     	; 0x6480 <__fp_cmp+0x46>
    645a:	62 1b       	sub	r22, r18
    645c:	73 0b       	sbc	r23, r19
    645e:	84 0b       	sbc	r24, r20
    6460:	95 0b       	sbc	r25, r21
    6462:	39 f4       	brne	.+14     	; 0x6472 <__fp_cmp+0x38>
    6464:	0a 26       	eor	r0, r26
    6466:	61 f0       	breq	.+24     	; 0x6480 <__fp_cmp+0x46>
    6468:	23 2b       	or	r18, r19
    646a:	24 2b       	or	r18, r20
    646c:	25 2b       	or	r18, r21
    646e:	21 f4       	brne	.+8      	; 0x6478 <__fp_cmp+0x3e>
    6470:	08 95       	ret
    6472:	0a 26       	eor	r0, r26
    6474:	09 f4       	brne	.+2      	; 0x6478 <__fp_cmp+0x3e>
    6476:	a1 40       	sbci	r26, 0x01	; 1
    6478:	a6 95       	lsr	r26
    647a:	8f ef       	ldi	r24, 0xFF	; 255
    647c:	81 1d       	adc	r24, r1
    647e:	81 1d       	adc	r24, r1
    6480:	08 95       	ret

00006482 <__fp_inf>:
    6482:	97 f9       	bld	r25, 7
    6484:	9f 67       	ori	r25, 0x7F	; 127
    6486:	80 e8       	ldi	r24, 0x80	; 128
    6488:	70 e0       	ldi	r23, 0x00	; 0
    648a:	60 e0       	ldi	r22, 0x00	; 0
    648c:	08 95       	ret

0000648e <__fp_nan>:
    648e:	9f ef       	ldi	r25, 0xFF	; 255
    6490:	80 ec       	ldi	r24, 0xC0	; 192
    6492:	08 95       	ret

00006494 <__fp_powser>:
    6494:	df 93       	push	r29
    6496:	cf 93       	push	r28
    6498:	1f 93       	push	r17
    649a:	0f 93       	push	r16
    649c:	ff 92       	push	r15
    649e:	ef 92       	push	r14
    64a0:	df 92       	push	r13
    64a2:	7b 01       	movw	r14, r22
    64a4:	8c 01       	movw	r16, r24
    64a6:	68 94       	set
    64a8:	05 c0       	rjmp	.+10     	; 0x64b4 <__fp_powser+0x20>
    64aa:	da 2e       	mov	r13, r26
    64ac:	ef 01       	movw	r28, r30
    64ae:	af d0       	rcall	.+350    	; 0x660e <__mulsf3x>
    64b0:	fe 01       	movw	r30, r28
    64b2:	e8 94       	clt
    64b4:	a5 91       	lpm	r26, Z+
    64b6:	25 91       	lpm	r18, Z+
    64b8:	35 91       	lpm	r19, Z+
    64ba:	45 91       	lpm	r20, Z+
    64bc:	55 91       	lpm	r21, Z+
    64be:	ae f3       	brts	.-22     	; 0x64aa <__fp_powser+0x16>
    64c0:	ef 01       	movw	r28, r30
    64c2:	29 de       	rcall	.-942    	; 0x6116 <__addsf3x>
    64c4:	fe 01       	movw	r30, r28
    64c6:	97 01       	movw	r18, r14
    64c8:	a8 01       	movw	r20, r16
    64ca:	da 94       	dec	r13
    64cc:	79 f7       	brne	.-34     	; 0x64ac <__fp_powser+0x18>
    64ce:	df 90       	pop	r13
    64d0:	ef 90       	pop	r14
    64d2:	ff 90       	pop	r15
    64d4:	0f 91       	pop	r16
    64d6:	1f 91       	pop	r17
    64d8:	cf 91       	pop	r28
    64da:	df 91       	pop	r29
    64dc:	08 95       	ret

000064de <__fp_pscA>:
    64de:	00 24       	eor	r0, r0
    64e0:	0a 94       	dec	r0
    64e2:	16 16       	cp	r1, r22
    64e4:	17 06       	cpc	r1, r23
    64e6:	18 06       	cpc	r1, r24
    64e8:	09 06       	cpc	r0, r25
    64ea:	08 95       	ret

000064ec <__fp_pscB>:
    64ec:	00 24       	eor	r0, r0
    64ee:	0a 94       	dec	r0
    64f0:	12 16       	cp	r1, r18
    64f2:	13 06       	cpc	r1, r19
    64f4:	14 06       	cpc	r1, r20
    64f6:	05 06       	cpc	r0, r21
    64f8:	08 95       	ret
    64fa:	c9 cf       	rjmp	.-110    	; 0x648e <__fp_nan>

000064fc <__fp_rempio2>:
    64fc:	50 d0       	rcall	.+160    	; 0x659e <__fp_splitA>
    64fe:	e8 f3       	brcs	.-6      	; 0x64fa <__fp_pscB+0xe>
    6500:	e8 94       	clt
    6502:	e0 e0       	ldi	r30, 0x00	; 0
    6504:	bb 27       	eor	r27, r27
    6506:	9f 57       	subi	r25, 0x7F	; 127
    6508:	f0 f0       	brcs	.+60     	; 0x6546 <__fp_rempio2+0x4a>
    650a:	2a ed       	ldi	r18, 0xDA	; 218
    650c:	3f e0       	ldi	r19, 0x0F	; 15
    650e:	49 ec       	ldi	r20, 0xC9	; 201
    6510:	06 c0       	rjmp	.+12     	; 0x651e <__fp_rempio2+0x22>
    6512:	ee 0f       	add	r30, r30
    6514:	bb 0f       	add	r27, r27
    6516:	66 1f       	adc	r22, r22
    6518:	77 1f       	adc	r23, r23
    651a:	88 1f       	adc	r24, r24
    651c:	28 f0       	brcs	.+10     	; 0x6528 <__fp_rempio2+0x2c>
    651e:	b2 3a       	cpi	r27, 0xA2	; 162
    6520:	62 07       	cpc	r22, r18
    6522:	73 07       	cpc	r23, r19
    6524:	84 07       	cpc	r24, r20
    6526:	28 f0       	brcs	.+10     	; 0x6532 <__fp_rempio2+0x36>
    6528:	b2 5a       	subi	r27, 0xA2	; 162
    652a:	62 0b       	sbc	r22, r18
    652c:	73 0b       	sbc	r23, r19
    652e:	84 0b       	sbc	r24, r20
    6530:	e3 95       	inc	r30
    6532:	9a 95       	dec	r25
    6534:	72 f7       	brpl	.-36     	; 0x6512 <__fp_rempio2+0x16>
    6536:	80 38       	cpi	r24, 0x80	; 128
    6538:	30 f4       	brcc	.+12     	; 0x6546 <__fp_rempio2+0x4a>
    653a:	9a 95       	dec	r25
    653c:	bb 0f       	add	r27, r27
    653e:	66 1f       	adc	r22, r22
    6540:	77 1f       	adc	r23, r23
    6542:	88 1f       	adc	r24, r24
    6544:	d2 f7       	brpl	.-12     	; 0x653a <__fp_rempio2+0x3e>
    6546:	90 48       	sbci	r25, 0x80	; 128
    6548:	06 c1       	rjmp	.+524    	; 0x6756 <__fp_mpack_finite>

0000654a <__fp_round>:
    654a:	09 2e       	mov	r0, r25
    654c:	03 94       	inc	r0
    654e:	00 0c       	add	r0, r0
    6550:	11 f4       	brne	.+4      	; 0x6556 <__fp_round+0xc>
    6552:	88 23       	and	r24, r24
    6554:	52 f0       	brmi	.+20     	; 0x656a <__fp_round+0x20>
    6556:	bb 0f       	add	r27, r27
    6558:	40 f4       	brcc	.+16     	; 0x656a <__fp_round+0x20>
    655a:	bf 2b       	or	r27, r31
    655c:	11 f4       	brne	.+4      	; 0x6562 <__fp_round+0x18>
    655e:	60 ff       	sbrs	r22, 0
    6560:	04 c0       	rjmp	.+8      	; 0x656a <__fp_round+0x20>
    6562:	6f 5f       	subi	r22, 0xFF	; 255
    6564:	7f 4f       	sbci	r23, 0xFF	; 255
    6566:	8f 4f       	sbci	r24, 0xFF	; 255
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	08 95       	ret

0000656c <__fp_sinus>:
    656c:	ef 93       	push	r30
    656e:	e0 ff       	sbrs	r30, 0
    6570:	06 c0       	rjmp	.+12     	; 0x657e <__fp_sinus+0x12>
    6572:	a2 ea       	ldi	r26, 0xA2	; 162
    6574:	2a ed       	ldi	r18, 0xDA	; 218
    6576:	3f e0       	ldi	r19, 0x0F	; 15
    6578:	49 ec       	ldi	r20, 0xC9	; 201
    657a:	5f eb       	ldi	r21, 0xBF	; 191
    657c:	cc dd       	rcall	.-1128   	; 0x6116 <__addsf3x>
    657e:	e5 df       	rcall	.-54     	; 0x654a <__fp_round>
    6580:	0f 90       	pop	r0
    6582:	03 94       	inc	r0
    6584:	01 fc       	sbrc	r0, 1
    6586:	90 58       	subi	r25, 0x80	; 128
    6588:	e1 e1       	ldi	r30, 0x11	; 17
    658a:	f1 e0       	ldi	r31, 0x01	; 1
    658c:	f7 c0       	rjmp	.+494    	; 0x677c <__fp_powsodd>

0000658e <__fp_split3>:
    658e:	57 fd       	sbrc	r21, 7
    6590:	90 58       	subi	r25, 0x80	; 128
    6592:	44 0f       	add	r20, r20
    6594:	55 1f       	adc	r21, r21
    6596:	59 f0       	breq	.+22     	; 0x65ae <__fp_splitA+0x10>
    6598:	5f 3f       	cpi	r21, 0xFF	; 255
    659a:	71 f0       	breq	.+28     	; 0x65b8 <__fp_splitA+0x1a>
    659c:	47 95       	ror	r20

0000659e <__fp_splitA>:
    659e:	88 0f       	add	r24, r24
    65a0:	97 fb       	bst	r25, 7
    65a2:	99 1f       	adc	r25, r25
    65a4:	61 f0       	breq	.+24     	; 0x65be <__fp_splitA+0x20>
    65a6:	9f 3f       	cpi	r25, 0xFF	; 255
    65a8:	79 f0       	breq	.+30     	; 0x65c8 <__fp_splitA+0x2a>
    65aa:	87 95       	ror	r24
    65ac:	08 95       	ret
    65ae:	12 16       	cp	r1, r18
    65b0:	13 06       	cpc	r1, r19
    65b2:	14 06       	cpc	r1, r20
    65b4:	55 1f       	adc	r21, r21
    65b6:	f2 cf       	rjmp	.-28     	; 0x659c <__fp_split3+0xe>
    65b8:	46 95       	lsr	r20
    65ba:	f1 df       	rcall	.-30     	; 0x659e <__fp_splitA>
    65bc:	08 c0       	rjmp	.+16     	; 0x65ce <__fp_splitA+0x30>
    65be:	16 16       	cp	r1, r22
    65c0:	17 06       	cpc	r1, r23
    65c2:	18 06       	cpc	r1, r24
    65c4:	99 1f       	adc	r25, r25
    65c6:	f1 cf       	rjmp	.-30     	; 0x65aa <__fp_splitA+0xc>
    65c8:	86 95       	lsr	r24
    65ca:	71 05       	cpc	r23, r1
    65cc:	61 05       	cpc	r22, r1
    65ce:	08 94       	sec
    65d0:	08 95       	ret

000065d2 <__fp_zero>:
    65d2:	e8 94       	clt

000065d4 <__fp_szero>:
    65d4:	bb 27       	eor	r27, r27
    65d6:	66 27       	eor	r22, r22
    65d8:	77 27       	eor	r23, r23
    65da:	cb 01       	movw	r24, r22
    65dc:	97 f9       	bld	r25, 7
    65de:	08 95       	ret

000065e0 <__gesf2>:
    65e0:	2c df       	rcall	.-424    	; 0x643a <__fp_cmp>
    65e2:	08 f4       	brcc	.+2      	; 0x65e6 <__gesf2+0x6>
    65e4:	8f ef       	ldi	r24, 0xFF	; 255
    65e6:	08 95       	ret

000065e8 <inverse>:
    65e8:	9b 01       	movw	r18, r22
    65ea:	ac 01       	movw	r20, r24
    65ec:	60 e0       	ldi	r22, 0x00	; 0
    65ee:	70 e0       	ldi	r23, 0x00	; 0
    65f0:	80 e8       	ldi	r24, 0x80	; 128
    65f2:	9f e3       	ldi	r25, 0x3F	; 63
    65f4:	4c ce       	rjmp	.-872    	; 0x628e <__divsf3>

000065f6 <__mulsf3>:
    65f6:	0b d0       	rcall	.+22     	; 0x660e <__mulsf3x>
    65f8:	a8 cf       	rjmp	.-176    	; 0x654a <__fp_round>
    65fa:	71 df       	rcall	.-286    	; 0x64de <__fp_pscA>
    65fc:	28 f0       	brcs	.+10     	; 0x6608 <__mulsf3+0x12>
    65fe:	76 df       	rcall	.-276    	; 0x64ec <__fp_pscB>
    6600:	18 f0       	brcs	.+6      	; 0x6608 <__mulsf3+0x12>
    6602:	95 23       	and	r25, r21
    6604:	09 f0       	breq	.+2      	; 0x6608 <__mulsf3+0x12>
    6606:	3d cf       	rjmp	.-390    	; 0x6482 <__fp_inf>
    6608:	42 cf       	rjmp	.-380    	; 0x648e <__fp_nan>
    660a:	11 24       	eor	r1, r1
    660c:	e3 cf       	rjmp	.-58     	; 0x65d4 <__fp_szero>

0000660e <__mulsf3x>:
    660e:	bf df       	rcall	.-130    	; 0x658e <__fp_split3>
    6610:	a0 f3       	brcs	.-24     	; 0x65fa <__mulsf3+0x4>

00006612 <__mulsf3_pse>:
    6612:	95 9f       	mul	r25, r21
    6614:	d1 f3       	breq	.-12     	; 0x660a <__mulsf3+0x14>
    6616:	95 0f       	add	r25, r21
    6618:	50 e0       	ldi	r21, 0x00	; 0
    661a:	55 1f       	adc	r21, r21
    661c:	62 9f       	mul	r22, r18
    661e:	f0 01       	movw	r30, r0
    6620:	72 9f       	mul	r23, r18
    6622:	bb 27       	eor	r27, r27
    6624:	f0 0d       	add	r31, r0
    6626:	b1 1d       	adc	r27, r1
    6628:	63 9f       	mul	r22, r19
    662a:	aa 27       	eor	r26, r26
    662c:	f0 0d       	add	r31, r0
    662e:	b1 1d       	adc	r27, r1
    6630:	aa 1f       	adc	r26, r26
    6632:	64 9f       	mul	r22, r20
    6634:	66 27       	eor	r22, r22
    6636:	b0 0d       	add	r27, r0
    6638:	a1 1d       	adc	r26, r1
    663a:	66 1f       	adc	r22, r22
    663c:	82 9f       	mul	r24, r18
    663e:	22 27       	eor	r18, r18
    6640:	b0 0d       	add	r27, r0
    6642:	a1 1d       	adc	r26, r1
    6644:	62 1f       	adc	r22, r18
    6646:	73 9f       	mul	r23, r19
    6648:	b0 0d       	add	r27, r0
    664a:	a1 1d       	adc	r26, r1
    664c:	62 1f       	adc	r22, r18
    664e:	83 9f       	mul	r24, r19
    6650:	a0 0d       	add	r26, r0
    6652:	61 1d       	adc	r22, r1
    6654:	22 1f       	adc	r18, r18
    6656:	74 9f       	mul	r23, r20
    6658:	33 27       	eor	r19, r19
    665a:	a0 0d       	add	r26, r0
    665c:	61 1d       	adc	r22, r1
    665e:	23 1f       	adc	r18, r19
    6660:	84 9f       	mul	r24, r20
    6662:	60 0d       	add	r22, r0
    6664:	21 1d       	adc	r18, r1
    6666:	82 2f       	mov	r24, r18
    6668:	76 2f       	mov	r23, r22
    666a:	6a 2f       	mov	r22, r26
    666c:	11 24       	eor	r1, r1
    666e:	9f 57       	subi	r25, 0x7F	; 127
    6670:	50 40       	sbci	r21, 0x00	; 0
    6672:	8a f0       	brmi	.+34     	; 0x6696 <__mulsf3_pse+0x84>
    6674:	e1 f0       	breq	.+56     	; 0x66ae <__mulsf3_pse+0x9c>
    6676:	88 23       	and	r24, r24
    6678:	4a f0       	brmi	.+18     	; 0x668c <__mulsf3_pse+0x7a>
    667a:	ee 0f       	add	r30, r30
    667c:	ff 1f       	adc	r31, r31
    667e:	bb 1f       	adc	r27, r27
    6680:	66 1f       	adc	r22, r22
    6682:	77 1f       	adc	r23, r23
    6684:	88 1f       	adc	r24, r24
    6686:	91 50       	subi	r25, 0x01	; 1
    6688:	50 40       	sbci	r21, 0x00	; 0
    668a:	a9 f7       	brne	.-22     	; 0x6676 <__mulsf3_pse+0x64>
    668c:	9e 3f       	cpi	r25, 0xFE	; 254
    668e:	51 05       	cpc	r21, r1
    6690:	70 f0       	brcs	.+28     	; 0x66ae <__mulsf3_pse+0x9c>
    6692:	f7 ce       	rjmp	.-530    	; 0x6482 <__fp_inf>
    6694:	9f cf       	rjmp	.-194    	; 0x65d4 <__fp_szero>
    6696:	5f 3f       	cpi	r21, 0xFF	; 255
    6698:	ec f3       	brlt	.-6      	; 0x6694 <__mulsf3_pse+0x82>
    669a:	98 3e       	cpi	r25, 0xE8	; 232
    669c:	dc f3       	brlt	.-10     	; 0x6694 <__mulsf3_pse+0x82>
    669e:	86 95       	lsr	r24
    66a0:	77 95       	ror	r23
    66a2:	67 95       	ror	r22
    66a4:	b7 95       	ror	r27
    66a6:	f7 95       	ror	r31
    66a8:	e7 95       	ror	r30
    66aa:	9f 5f       	subi	r25, 0xFF	; 255
    66ac:	c1 f7       	brne	.-16     	; 0x669e <__mulsf3_pse+0x8c>
    66ae:	fe 2b       	or	r31, r30
    66b0:	88 0f       	add	r24, r24
    66b2:	91 1d       	adc	r25, r1
    66b4:	96 95       	lsr	r25
    66b6:	87 95       	ror	r24
    66b8:	97 f9       	bld	r25, 7
    66ba:	08 95       	ret

000066bc <sin>:
    66bc:	9f 93       	push	r25
    66be:	1e df       	rcall	.-452    	; 0x64fc <__fp_rempio2>
    66c0:	0f 90       	pop	r0
    66c2:	07 fc       	sbrc	r0, 7
    66c4:	ee 5f       	subi	r30, 0xFE	; 254
    66c6:	52 cf       	rjmp	.-348    	; 0x656c <__fp_sinus>
    66c8:	11 f4       	brne	.+4      	; 0x66ce <sin+0x12>
    66ca:	0e f4       	brtc	.+2      	; 0x66ce <sin+0x12>
    66cc:	e0 ce       	rjmp	.-576    	; 0x648e <__fp_nan>
    66ce:	41 c0       	rjmp	.+130    	; 0x6752 <__fp_mpack>

000066d0 <sqrt>:
    66d0:	66 df       	rcall	.-308    	; 0x659e <__fp_splitA>
    66d2:	d0 f3       	brcs	.-12     	; 0x66c8 <sin+0xc>
    66d4:	99 23       	and	r25, r25
    66d6:	d9 f3       	breq	.-10     	; 0x66ce <sin+0x12>
    66d8:	ce f3       	brts	.-14     	; 0x66cc <sin+0x10>
    66da:	9f 57       	subi	r25, 0x7F	; 127
    66dc:	55 0b       	sbc	r21, r21
    66de:	87 ff       	sbrs	r24, 7
    66e0:	46 d0       	rcall	.+140    	; 0x676e <__fp_norm2>
    66e2:	00 24       	eor	r0, r0
    66e4:	a0 e6       	ldi	r26, 0x60	; 96
    66e6:	40 ea       	ldi	r20, 0xA0	; 160
    66e8:	90 01       	movw	r18, r0
    66ea:	80 58       	subi	r24, 0x80	; 128
    66ec:	56 95       	lsr	r21
    66ee:	97 95       	ror	r25
    66f0:	28 f4       	brcc	.+10     	; 0x66fc <sqrt+0x2c>
    66f2:	80 5c       	subi	r24, 0xC0	; 192
    66f4:	66 0f       	add	r22, r22
    66f6:	77 1f       	adc	r23, r23
    66f8:	88 1f       	adc	r24, r24
    66fa:	20 f0       	brcs	.+8      	; 0x6704 <sqrt+0x34>
    66fc:	26 17       	cp	r18, r22
    66fe:	37 07       	cpc	r19, r23
    6700:	48 07       	cpc	r20, r24
    6702:	30 f4       	brcc	.+12     	; 0x6710 <sqrt+0x40>
    6704:	62 1b       	sub	r22, r18
    6706:	73 0b       	sbc	r23, r19
    6708:	84 0b       	sbc	r24, r20
    670a:	20 29       	or	r18, r0
    670c:	31 29       	or	r19, r1
    670e:	4a 2b       	or	r20, r26
    6710:	a6 95       	lsr	r26
    6712:	17 94       	ror	r1
    6714:	07 94       	ror	r0
    6716:	20 25       	eor	r18, r0
    6718:	31 25       	eor	r19, r1
    671a:	4a 27       	eor	r20, r26
    671c:	58 f7       	brcc	.-42     	; 0x66f4 <sqrt+0x24>
    671e:	66 0f       	add	r22, r22
    6720:	77 1f       	adc	r23, r23
    6722:	88 1f       	adc	r24, r24
    6724:	20 f0       	brcs	.+8      	; 0x672e <sqrt+0x5e>
    6726:	26 17       	cp	r18, r22
    6728:	37 07       	cpc	r19, r23
    672a:	48 07       	cpc	r20, r24
    672c:	30 f4       	brcc	.+12     	; 0x673a <sqrt+0x6a>
    672e:	62 0b       	sbc	r22, r18
    6730:	73 0b       	sbc	r23, r19
    6732:	84 0b       	sbc	r24, r20
    6734:	20 0d       	add	r18, r0
    6736:	31 1d       	adc	r19, r1
    6738:	41 1d       	adc	r20, r1
    673a:	a0 95       	com	r26
    673c:	81 f7       	brne	.-32     	; 0x671e <sqrt+0x4e>
    673e:	b9 01       	movw	r22, r18
    6740:	84 2f       	mov	r24, r20
    6742:	91 58       	subi	r25, 0x81	; 129
    6744:	88 0f       	add	r24, r24
    6746:	96 95       	lsr	r25
    6748:	87 95       	ror	r24
    674a:	08 95       	ret

0000674c <square>:
    674c:	9b 01       	movw	r18, r22
    674e:	ac 01       	movw	r20, r24
    6750:	52 cf       	rjmp	.-348    	; 0x65f6 <__mulsf3>

00006752 <__fp_mpack>:
    6752:	9f 3f       	cpi	r25, 0xFF	; 255
    6754:	31 f0       	breq	.+12     	; 0x6762 <__fp_mpack_finite+0xc>

00006756 <__fp_mpack_finite>:
    6756:	91 50       	subi	r25, 0x01	; 1
    6758:	20 f4       	brcc	.+8      	; 0x6762 <__fp_mpack_finite+0xc>
    675a:	87 95       	ror	r24
    675c:	77 95       	ror	r23
    675e:	67 95       	ror	r22
    6760:	b7 95       	ror	r27
    6762:	88 0f       	add	r24, r24
    6764:	91 1d       	adc	r25, r1
    6766:	96 95       	lsr	r25
    6768:	87 95       	ror	r24
    676a:	97 f9       	bld	r25, 7
    676c:	08 95       	ret

0000676e <__fp_norm2>:
    676e:	91 50       	subi	r25, 0x01	; 1
    6770:	50 40       	sbci	r21, 0x00	; 0
    6772:	66 0f       	add	r22, r22
    6774:	77 1f       	adc	r23, r23
    6776:	88 1f       	adc	r24, r24
    6778:	d2 f7       	brpl	.-12     	; 0x676e <__fp_norm2>
    677a:	08 95       	ret

0000677c <__fp_powsodd>:
    677c:	9f 93       	push	r25
    677e:	8f 93       	push	r24
    6780:	7f 93       	push	r23
    6782:	6f 93       	push	r22
    6784:	ff 93       	push	r31
    6786:	ef 93       	push	r30
    6788:	9b 01       	movw	r18, r22
    678a:	ac 01       	movw	r20, r24
    678c:	34 df       	rcall	.-408    	; 0x65f6 <__mulsf3>
    678e:	ef 91       	pop	r30
    6790:	ff 91       	pop	r31
    6792:	80 de       	rcall	.-768    	; 0x6494 <__fp_powser>
    6794:	2f 91       	pop	r18
    6796:	3f 91       	pop	r19
    6798:	4f 91       	pop	r20
    679a:	5f 91       	pop	r21
    679c:	2c cf       	rjmp	.-424    	; 0x65f6 <__mulsf3>

0000679e <vfprintf>:
    679e:	2f 92       	push	r2
    67a0:	3f 92       	push	r3
    67a2:	4f 92       	push	r4
    67a4:	5f 92       	push	r5
    67a6:	6f 92       	push	r6
    67a8:	7f 92       	push	r7
    67aa:	8f 92       	push	r8
    67ac:	9f 92       	push	r9
    67ae:	af 92       	push	r10
    67b0:	bf 92       	push	r11
    67b2:	cf 92       	push	r12
    67b4:	df 92       	push	r13
    67b6:	ef 92       	push	r14
    67b8:	ff 92       	push	r15
    67ba:	0f 93       	push	r16
    67bc:	1f 93       	push	r17
    67be:	cf 93       	push	r28
    67c0:	df 93       	push	r29
    67c2:	cd b7       	in	r28, 0x3d	; 61
    67c4:	de b7       	in	r29, 0x3e	; 62
    67c6:	60 97       	sbiw	r28, 0x10	; 16
    67c8:	0f b6       	in	r0, 0x3f	; 63
    67ca:	f8 94       	cli
    67cc:	de bf       	out	0x3e, r29	; 62
    67ce:	0f be       	out	0x3f, r0	; 63
    67d0:	cd bf       	out	0x3d, r28	; 61
    67d2:	7c 01       	movw	r14, r24
    67d4:	1b 01       	movw	r2, r22
    67d6:	6a 01       	movw	r12, r20
    67d8:	fc 01       	movw	r30, r24
    67da:	17 82       	std	Z+7, r1	; 0x07
    67dc:	16 82       	std	Z+6, r1	; 0x06
    67de:	83 81       	ldd	r24, Z+3	; 0x03
    67e0:	81 ff       	sbrs	r24, 1
    67e2:	2a c3       	rjmp	.+1620   	; 0x6e38 <vfprintf+0x69a>
    67e4:	9e 01       	movw	r18, r28
    67e6:	2f 5f       	subi	r18, 0xFF	; 255
    67e8:	3f 4f       	sbci	r19, 0xFF	; 255
    67ea:	39 01       	movw	r6, r18
    67ec:	f7 01       	movw	r30, r14
    67ee:	93 81       	ldd	r25, Z+3	; 0x03
    67f0:	f1 01       	movw	r30, r2
    67f2:	93 fd       	sbrc	r25, 3
    67f4:	85 91       	lpm	r24, Z+
    67f6:	93 ff       	sbrs	r25, 3
    67f8:	81 91       	ld	r24, Z+
    67fa:	1f 01       	movw	r2, r30
    67fc:	88 23       	and	r24, r24
    67fe:	09 f4       	brne	.+2      	; 0x6802 <vfprintf+0x64>
    6800:	17 c3       	rjmp	.+1582   	; 0x6e30 <vfprintf+0x692>
    6802:	85 32       	cpi	r24, 0x25	; 37
    6804:	39 f4       	brne	.+14     	; 0x6814 <vfprintf+0x76>
    6806:	93 fd       	sbrc	r25, 3
    6808:	85 91       	lpm	r24, Z+
    680a:	93 ff       	sbrs	r25, 3
    680c:	81 91       	ld	r24, Z+
    680e:	1f 01       	movw	r2, r30
    6810:	85 32       	cpi	r24, 0x25	; 37
    6812:	31 f4       	brne	.+12     	; 0x6820 <vfprintf+0x82>
    6814:	b7 01       	movw	r22, r14
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	78 d4       	rcall	.+2288   	; 0x710a <fputc>
    681a:	56 01       	movw	r10, r12
    681c:	65 01       	movw	r12, r10
    681e:	e6 cf       	rjmp	.-52     	; 0x67ec <vfprintf+0x4e>
    6820:	10 e0       	ldi	r17, 0x00	; 0
    6822:	51 2c       	mov	r5, r1
    6824:	91 2c       	mov	r9, r1
    6826:	ff e1       	ldi	r31, 0x1F	; 31
    6828:	f9 15       	cp	r31, r9
    682a:	d8 f0       	brcs	.+54     	; 0x6862 <vfprintf+0xc4>
    682c:	8b 32       	cpi	r24, 0x2B	; 43
    682e:	79 f0       	breq	.+30     	; 0x684e <vfprintf+0xb0>
    6830:	38 f4       	brcc	.+14     	; 0x6840 <vfprintf+0xa2>
    6832:	80 32       	cpi	r24, 0x20	; 32
    6834:	79 f0       	breq	.+30     	; 0x6854 <vfprintf+0xb6>
    6836:	83 32       	cpi	r24, 0x23	; 35
    6838:	a1 f4       	brne	.+40     	; 0x6862 <vfprintf+0xc4>
    683a:	f9 2d       	mov	r31, r9
    683c:	f0 61       	ori	r31, 0x10	; 16
    683e:	2e c0       	rjmp	.+92     	; 0x689c <vfprintf+0xfe>
    6840:	8d 32       	cpi	r24, 0x2D	; 45
    6842:	61 f0       	breq	.+24     	; 0x685c <vfprintf+0xbe>
    6844:	80 33       	cpi	r24, 0x30	; 48
    6846:	69 f4       	brne	.+26     	; 0x6862 <vfprintf+0xc4>
    6848:	29 2d       	mov	r18, r9
    684a:	21 60       	ori	r18, 0x01	; 1
    684c:	2d c0       	rjmp	.+90     	; 0x68a8 <vfprintf+0x10a>
    684e:	39 2d       	mov	r19, r9
    6850:	32 60       	ori	r19, 0x02	; 2
    6852:	93 2e       	mov	r9, r19
    6854:	89 2d       	mov	r24, r9
    6856:	84 60       	ori	r24, 0x04	; 4
    6858:	98 2e       	mov	r9, r24
    685a:	2a c0       	rjmp	.+84     	; 0x68b0 <vfprintf+0x112>
    685c:	e9 2d       	mov	r30, r9
    685e:	e8 60       	ori	r30, 0x08	; 8
    6860:	15 c0       	rjmp	.+42     	; 0x688c <vfprintf+0xee>
    6862:	97 fc       	sbrc	r9, 7
    6864:	2d c0       	rjmp	.+90     	; 0x68c0 <vfprintf+0x122>
    6866:	20 ed       	ldi	r18, 0xD0	; 208
    6868:	28 0f       	add	r18, r24
    686a:	2a 30       	cpi	r18, 0x0A	; 10
    686c:	88 f4       	brcc	.+34     	; 0x6890 <vfprintf+0xf2>
    686e:	96 fe       	sbrs	r9, 6
    6870:	06 c0       	rjmp	.+12     	; 0x687e <vfprintf+0xe0>
    6872:	3a e0       	ldi	r19, 0x0A	; 10
    6874:	13 9f       	mul	r17, r19
    6876:	20 0d       	add	r18, r0
    6878:	11 24       	eor	r1, r1
    687a:	12 2f       	mov	r17, r18
    687c:	19 c0       	rjmp	.+50     	; 0x68b0 <vfprintf+0x112>
    687e:	8a e0       	ldi	r24, 0x0A	; 10
    6880:	58 9e       	mul	r5, r24
    6882:	20 0d       	add	r18, r0
    6884:	11 24       	eor	r1, r1
    6886:	52 2e       	mov	r5, r18
    6888:	e9 2d       	mov	r30, r9
    688a:	e0 62       	ori	r30, 0x20	; 32
    688c:	9e 2e       	mov	r9, r30
    688e:	10 c0       	rjmp	.+32     	; 0x68b0 <vfprintf+0x112>
    6890:	8e 32       	cpi	r24, 0x2E	; 46
    6892:	31 f4       	brne	.+12     	; 0x68a0 <vfprintf+0x102>
    6894:	96 fc       	sbrc	r9, 6
    6896:	cc c2       	rjmp	.+1432   	; 0x6e30 <vfprintf+0x692>
    6898:	f9 2d       	mov	r31, r9
    689a:	f0 64       	ori	r31, 0x40	; 64
    689c:	9f 2e       	mov	r9, r31
    689e:	08 c0       	rjmp	.+16     	; 0x68b0 <vfprintf+0x112>
    68a0:	8c 36       	cpi	r24, 0x6C	; 108
    68a2:	21 f4       	brne	.+8      	; 0x68ac <vfprintf+0x10e>
    68a4:	29 2d       	mov	r18, r9
    68a6:	20 68       	ori	r18, 0x80	; 128
    68a8:	92 2e       	mov	r9, r18
    68aa:	02 c0       	rjmp	.+4      	; 0x68b0 <vfprintf+0x112>
    68ac:	88 36       	cpi	r24, 0x68	; 104
    68ae:	41 f4       	brne	.+16     	; 0x68c0 <vfprintf+0x122>
    68b0:	f1 01       	movw	r30, r2
    68b2:	93 fd       	sbrc	r25, 3
    68b4:	85 91       	lpm	r24, Z+
    68b6:	93 ff       	sbrs	r25, 3
    68b8:	81 91       	ld	r24, Z+
    68ba:	1f 01       	movw	r2, r30
    68bc:	81 11       	cpse	r24, r1
    68be:	b3 cf       	rjmp	.-154    	; 0x6826 <vfprintf+0x88>
    68c0:	9b eb       	ldi	r25, 0xBB	; 187
    68c2:	98 0f       	add	r25, r24
    68c4:	93 30       	cpi	r25, 0x03	; 3
    68c6:	20 f4       	brcc	.+8      	; 0x68d0 <vfprintf+0x132>
    68c8:	99 2d       	mov	r25, r9
    68ca:	90 61       	ori	r25, 0x10	; 16
    68cc:	80 5e       	subi	r24, 0xE0	; 224
    68ce:	07 c0       	rjmp	.+14     	; 0x68de <vfprintf+0x140>
    68d0:	9b e9       	ldi	r25, 0x9B	; 155
    68d2:	98 0f       	add	r25, r24
    68d4:	93 30       	cpi	r25, 0x03	; 3
    68d6:	08 f0       	brcs	.+2      	; 0x68da <vfprintf+0x13c>
    68d8:	59 c1       	rjmp	.+690    	; 0x6b8c <vfprintf+0x3ee>
    68da:	99 2d       	mov	r25, r9
    68dc:	9f 7e       	andi	r25, 0xEF	; 239
    68de:	96 ff       	sbrs	r25, 6
    68e0:	16 e0       	ldi	r17, 0x06	; 6
    68e2:	9f 73       	andi	r25, 0x3F	; 63
    68e4:	99 2e       	mov	r9, r25
    68e6:	85 36       	cpi	r24, 0x65	; 101
    68e8:	19 f4       	brne	.+6      	; 0x68f0 <vfprintf+0x152>
    68ea:	90 64       	ori	r25, 0x40	; 64
    68ec:	99 2e       	mov	r9, r25
    68ee:	08 c0       	rjmp	.+16     	; 0x6900 <vfprintf+0x162>
    68f0:	86 36       	cpi	r24, 0x66	; 102
    68f2:	21 f4       	brne	.+8      	; 0x68fc <vfprintf+0x15e>
    68f4:	39 2f       	mov	r19, r25
    68f6:	30 68       	ori	r19, 0x80	; 128
    68f8:	93 2e       	mov	r9, r19
    68fa:	02 c0       	rjmp	.+4      	; 0x6900 <vfprintf+0x162>
    68fc:	11 11       	cpse	r17, r1
    68fe:	11 50       	subi	r17, 0x01	; 1
    6900:	97 fe       	sbrs	r9, 7
    6902:	07 c0       	rjmp	.+14     	; 0x6912 <vfprintf+0x174>
    6904:	1c 33       	cpi	r17, 0x3C	; 60
    6906:	50 f4       	brcc	.+20     	; 0x691c <vfprintf+0x17e>
    6908:	44 24       	eor	r4, r4
    690a:	43 94       	inc	r4
    690c:	41 0e       	add	r4, r17
    690e:	27 e0       	ldi	r18, 0x07	; 7
    6910:	0b c0       	rjmp	.+22     	; 0x6928 <vfprintf+0x18a>
    6912:	18 30       	cpi	r17, 0x08	; 8
    6914:	38 f0       	brcs	.+14     	; 0x6924 <vfprintf+0x186>
    6916:	27 e0       	ldi	r18, 0x07	; 7
    6918:	17 e0       	ldi	r17, 0x07	; 7
    691a:	05 c0       	rjmp	.+10     	; 0x6926 <vfprintf+0x188>
    691c:	27 e0       	ldi	r18, 0x07	; 7
    691e:	9c e3       	ldi	r25, 0x3C	; 60
    6920:	49 2e       	mov	r4, r25
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <vfprintf+0x18a>
    6924:	21 2f       	mov	r18, r17
    6926:	41 2c       	mov	r4, r1
    6928:	56 01       	movw	r10, r12
    692a:	84 e0       	ldi	r24, 0x04	; 4
    692c:	a8 0e       	add	r10, r24
    692e:	b1 1c       	adc	r11, r1
    6930:	f6 01       	movw	r30, r12
    6932:	60 81       	ld	r22, Z
    6934:	71 81       	ldd	r23, Z+1	; 0x01
    6936:	82 81       	ldd	r24, Z+2	; 0x02
    6938:	93 81       	ldd	r25, Z+3	; 0x03
    693a:	04 2d       	mov	r16, r4
    693c:	a3 01       	movw	r20, r6
    693e:	ee d2       	rcall	.+1500   	; 0x6f1c <__ftoa_engine>
    6940:	6c 01       	movw	r12, r24
    6942:	f9 81       	ldd	r31, Y+1	; 0x01
    6944:	fc 87       	std	Y+12, r31	; 0x0c
    6946:	f0 ff       	sbrs	r31, 0
    6948:	02 c0       	rjmp	.+4      	; 0x694e <vfprintf+0x1b0>
    694a:	f3 ff       	sbrs	r31, 3
    694c:	06 c0       	rjmp	.+12     	; 0x695a <vfprintf+0x1bc>
    694e:	91 fc       	sbrc	r9, 1
    6950:	06 c0       	rjmp	.+12     	; 0x695e <vfprintf+0x1c0>
    6952:	92 fe       	sbrs	r9, 2
    6954:	06 c0       	rjmp	.+12     	; 0x6962 <vfprintf+0x1c4>
    6956:	00 e2       	ldi	r16, 0x20	; 32
    6958:	05 c0       	rjmp	.+10     	; 0x6964 <vfprintf+0x1c6>
    695a:	0d e2       	ldi	r16, 0x2D	; 45
    695c:	03 c0       	rjmp	.+6      	; 0x6964 <vfprintf+0x1c6>
    695e:	0b e2       	ldi	r16, 0x2B	; 43
    6960:	01 c0       	rjmp	.+2      	; 0x6964 <vfprintf+0x1c6>
    6962:	00 e0       	ldi	r16, 0x00	; 0
    6964:	8c 85       	ldd	r24, Y+12	; 0x0c
    6966:	8c 70       	andi	r24, 0x0C	; 12
    6968:	19 f0       	breq	.+6      	; 0x6970 <vfprintf+0x1d2>
    696a:	01 11       	cpse	r16, r1
    696c:	43 c2       	rjmp	.+1158   	; 0x6df4 <vfprintf+0x656>
    696e:	80 c2       	rjmp	.+1280   	; 0x6e70 <vfprintf+0x6d2>
    6970:	97 fe       	sbrs	r9, 7
    6972:	10 c0       	rjmp	.+32     	; 0x6994 <vfprintf+0x1f6>
    6974:	4c 0c       	add	r4, r12
    6976:	fc 85       	ldd	r31, Y+12	; 0x0c
    6978:	f4 ff       	sbrs	r31, 4
    697a:	04 c0       	rjmp	.+8      	; 0x6984 <vfprintf+0x1e6>
    697c:	8a 81       	ldd	r24, Y+2	; 0x02
    697e:	81 33       	cpi	r24, 0x31	; 49
    6980:	09 f4       	brne	.+2      	; 0x6984 <vfprintf+0x1e6>
    6982:	4a 94       	dec	r4
    6984:	14 14       	cp	r1, r4
    6986:	74 f5       	brge	.+92     	; 0x69e4 <vfprintf+0x246>
    6988:	28 e0       	ldi	r18, 0x08	; 8
    698a:	24 15       	cp	r18, r4
    698c:	78 f5       	brcc	.+94     	; 0x69ec <vfprintf+0x24e>
    698e:	88 e0       	ldi	r24, 0x08	; 8
    6990:	48 2e       	mov	r4, r24
    6992:	2c c0       	rjmp	.+88     	; 0x69ec <vfprintf+0x24e>
    6994:	96 fc       	sbrc	r9, 6
    6996:	2a c0       	rjmp	.+84     	; 0x69ec <vfprintf+0x24e>
    6998:	81 2f       	mov	r24, r17
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	8c 15       	cp	r24, r12
    699e:	9d 05       	cpc	r25, r13
    69a0:	9c f0       	brlt	.+38     	; 0x69c8 <vfprintf+0x22a>
    69a2:	3c ef       	ldi	r19, 0xFC	; 252
    69a4:	c3 16       	cp	r12, r19
    69a6:	3f ef       	ldi	r19, 0xFF	; 255
    69a8:	d3 06       	cpc	r13, r19
    69aa:	74 f0       	brlt	.+28     	; 0x69c8 <vfprintf+0x22a>
    69ac:	89 2d       	mov	r24, r9
    69ae:	80 68       	ori	r24, 0x80	; 128
    69b0:	98 2e       	mov	r9, r24
    69b2:	0a c0       	rjmp	.+20     	; 0x69c8 <vfprintf+0x22a>
    69b4:	e2 e0       	ldi	r30, 0x02	; 2
    69b6:	f0 e0       	ldi	r31, 0x00	; 0
    69b8:	ec 0f       	add	r30, r28
    69ba:	fd 1f       	adc	r31, r29
    69bc:	e1 0f       	add	r30, r17
    69be:	f1 1d       	adc	r31, r1
    69c0:	80 81       	ld	r24, Z
    69c2:	80 33       	cpi	r24, 0x30	; 48
    69c4:	19 f4       	brne	.+6      	; 0x69cc <vfprintf+0x22e>
    69c6:	11 50       	subi	r17, 0x01	; 1
    69c8:	11 11       	cpse	r17, r1
    69ca:	f4 cf       	rjmp	.-24     	; 0x69b4 <vfprintf+0x216>
    69cc:	97 fe       	sbrs	r9, 7
    69ce:	0e c0       	rjmp	.+28     	; 0x69ec <vfprintf+0x24e>
    69d0:	44 24       	eor	r4, r4
    69d2:	43 94       	inc	r4
    69d4:	41 0e       	add	r4, r17
    69d6:	81 2f       	mov	r24, r17
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	c8 16       	cp	r12, r24
    69dc:	d9 06       	cpc	r13, r25
    69de:	2c f4       	brge	.+10     	; 0x69ea <vfprintf+0x24c>
    69e0:	1c 19       	sub	r17, r12
    69e2:	04 c0       	rjmp	.+8      	; 0x69ec <vfprintf+0x24e>
    69e4:	44 24       	eor	r4, r4
    69e6:	43 94       	inc	r4
    69e8:	01 c0       	rjmp	.+2      	; 0x69ec <vfprintf+0x24e>
    69ea:	10 e0       	ldi	r17, 0x00	; 0
    69ec:	97 fe       	sbrs	r9, 7
    69ee:	06 c0       	rjmp	.+12     	; 0x69fc <vfprintf+0x25e>
    69f0:	1c 14       	cp	r1, r12
    69f2:	1d 04       	cpc	r1, r13
    69f4:	34 f4       	brge	.+12     	; 0x6a02 <vfprintf+0x264>
    69f6:	c6 01       	movw	r24, r12
    69f8:	01 96       	adiw	r24, 0x01	; 1
    69fa:	05 c0       	rjmp	.+10     	; 0x6a06 <vfprintf+0x268>
    69fc:	85 e0       	ldi	r24, 0x05	; 5
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	02 c0       	rjmp	.+4      	; 0x6a06 <vfprintf+0x268>
    6a02:	81 e0       	ldi	r24, 0x01	; 1
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	01 11       	cpse	r16, r1
    6a08:	01 96       	adiw	r24, 0x01	; 1
    6a0a:	11 23       	and	r17, r17
    6a0c:	31 f0       	breq	.+12     	; 0x6a1a <vfprintf+0x27c>
    6a0e:	21 2f       	mov	r18, r17
    6a10:	30 e0       	ldi	r19, 0x00	; 0
    6a12:	2f 5f       	subi	r18, 0xFF	; 255
    6a14:	3f 4f       	sbci	r19, 0xFF	; 255
    6a16:	82 0f       	add	r24, r18
    6a18:	93 1f       	adc	r25, r19
    6a1a:	25 2d       	mov	r18, r5
    6a1c:	30 e0       	ldi	r19, 0x00	; 0
    6a1e:	82 17       	cp	r24, r18
    6a20:	93 07       	cpc	r25, r19
    6a22:	14 f4       	brge	.+4      	; 0x6a28 <vfprintf+0x28a>
    6a24:	58 1a       	sub	r5, r24
    6a26:	01 c0       	rjmp	.+2      	; 0x6a2a <vfprintf+0x28c>
    6a28:	51 2c       	mov	r5, r1
    6a2a:	89 2d       	mov	r24, r9
    6a2c:	89 70       	andi	r24, 0x09	; 9
    6a2e:	41 f4       	brne	.+16     	; 0x6a40 <vfprintf+0x2a2>
    6a30:	55 20       	and	r5, r5
    6a32:	31 f0       	breq	.+12     	; 0x6a40 <vfprintf+0x2a2>
    6a34:	b7 01       	movw	r22, r14
    6a36:	80 e2       	ldi	r24, 0x20	; 32
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	67 d3       	rcall	.+1742   	; 0x710a <fputc>
    6a3c:	5a 94       	dec	r5
    6a3e:	f8 cf       	rjmp	.-16     	; 0x6a30 <vfprintf+0x292>
    6a40:	00 23       	and	r16, r16
    6a42:	21 f0       	breq	.+8      	; 0x6a4c <vfprintf+0x2ae>
    6a44:	b7 01       	movw	r22, r14
    6a46:	80 2f       	mov	r24, r16
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	5f d3       	rcall	.+1726   	; 0x710a <fputc>
    6a4c:	93 fc       	sbrc	r9, 3
    6a4e:	08 c0       	rjmp	.+16     	; 0x6a60 <vfprintf+0x2c2>
    6a50:	55 20       	and	r5, r5
    6a52:	31 f0       	breq	.+12     	; 0x6a60 <vfprintf+0x2c2>
    6a54:	b7 01       	movw	r22, r14
    6a56:	80 e3       	ldi	r24, 0x30	; 48
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	57 d3       	rcall	.+1710   	; 0x710a <fputc>
    6a5c:	5a 94       	dec	r5
    6a5e:	f8 cf       	rjmp	.-16     	; 0x6a50 <vfprintf+0x2b2>
    6a60:	97 fe       	sbrs	r9, 7
    6a62:	4a c0       	rjmp	.+148    	; 0x6af8 <vfprintf+0x35a>
    6a64:	46 01       	movw	r8, r12
    6a66:	d7 fe       	sbrs	r13, 7
    6a68:	02 c0       	rjmp	.+4      	; 0x6a6e <vfprintf+0x2d0>
    6a6a:	81 2c       	mov	r8, r1
    6a6c:	91 2c       	mov	r9, r1
    6a6e:	c6 01       	movw	r24, r12
    6a70:	88 19       	sub	r24, r8
    6a72:	99 09       	sbc	r25, r9
    6a74:	f3 01       	movw	r30, r6
    6a76:	e8 0f       	add	r30, r24
    6a78:	f9 1f       	adc	r31, r25
    6a7a:	fe 87       	std	Y+14, r31	; 0x0e
    6a7c:	ed 87       	std	Y+13, r30	; 0x0d
    6a7e:	96 01       	movw	r18, r12
    6a80:	24 19       	sub	r18, r4
    6a82:	31 09       	sbc	r19, r1
    6a84:	38 8b       	std	Y+16, r19	; 0x10
    6a86:	2f 87       	std	Y+15, r18	; 0x0f
    6a88:	01 2f       	mov	r16, r17
    6a8a:	10 e0       	ldi	r17, 0x00	; 0
    6a8c:	11 95       	neg	r17
    6a8e:	01 95       	neg	r16
    6a90:	11 09       	sbc	r17, r1
    6a92:	3f ef       	ldi	r19, 0xFF	; 255
    6a94:	83 16       	cp	r8, r19
    6a96:	93 06       	cpc	r9, r19
    6a98:	21 f4       	brne	.+8      	; 0x6aa2 <vfprintf+0x304>
    6a9a:	b7 01       	movw	r22, r14
    6a9c:	8e e2       	ldi	r24, 0x2E	; 46
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	34 d3       	rcall	.+1640   	; 0x710a <fputc>
    6aa2:	c8 14       	cp	r12, r8
    6aa4:	d9 04       	cpc	r13, r9
    6aa6:	4c f0       	brlt	.+18     	; 0x6aba <vfprintf+0x31c>
    6aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6aaa:	98 89       	ldd	r25, Y+16	; 0x10
    6aac:	88 15       	cp	r24, r8
    6aae:	99 05       	cpc	r25, r9
    6ab0:	24 f4       	brge	.+8      	; 0x6aba <vfprintf+0x31c>
    6ab2:	ed 85       	ldd	r30, Y+13	; 0x0d
    6ab4:	fe 85       	ldd	r31, Y+14	; 0x0e
    6ab6:	81 81       	ldd	r24, Z+1	; 0x01
    6ab8:	01 c0       	rjmp	.+2      	; 0x6abc <vfprintf+0x31e>
    6aba:	80 e3       	ldi	r24, 0x30	; 48
    6abc:	f1 e0       	ldi	r31, 0x01	; 1
    6abe:	8f 1a       	sub	r8, r31
    6ac0:	91 08       	sbc	r9, r1
    6ac2:	2d 85       	ldd	r18, Y+13	; 0x0d
    6ac4:	3e 85       	ldd	r19, Y+14	; 0x0e
    6ac6:	2f 5f       	subi	r18, 0xFF	; 255
    6ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aca:	3e 87       	std	Y+14, r19	; 0x0e
    6acc:	2d 87       	std	Y+13, r18	; 0x0d
    6ace:	80 16       	cp	r8, r16
    6ad0:	91 06       	cpc	r9, r17
    6ad2:	24 f0       	brlt	.+8      	; 0x6adc <vfprintf+0x33e>
    6ad4:	b7 01       	movw	r22, r14
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	18 d3       	rcall	.+1584   	; 0x710a <fputc>
    6ada:	db cf       	rjmp	.-74     	; 0x6a92 <vfprintf+0x2f4>
    6adc:	c8 14       	cp	r12, r8
    6ade:	d9 04       	cpc	r13, r9
    6ae0:	41 f4       	brne	.+16     	; 0x6af2 <vfprintf+0x354>
    6ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae4:	96 33       	cpi	r25, 0x36	; 54
    6ae6:	20 f4       	brcc	.+8      	; 0x6af0 <vfprintf+0x352>
    6ae8:	95 33       	cpi	r25, 0x35	; 53
    6aea:	19 f4       	brne	.+6      	; 0x6af2 <vfprintf+0x354>
    6aec:	3c 85       	ldd	r19, Y+12	; 0x0c
    6aee:	34 ff       	sbrs	r19, 4
    6af0:	81 e3       	ldi	r24, 0x31	; 49
    6af2:	b7 01       	movw	r22, r14
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	48 c0       	rjmp	.+144    	; 0x6b88 <vfprintf+0x3ea>
    6af8:	8a 81       	ldd	r24, Y+2	; 0x02
    6afa:	81 33       	cpi	r24, 0x31	; 49
    6afc:	19 f0       	breq	.+6      	; 0x6b04 <vfprintf+0x366>
    6afe:	9c 85       	ldd	r25, Y+12	; 0x0c
    6b00:	9f 7e       	andi	r25, 0xEF	; 239
    6b02:	9c 87       	std	Y+12, r25	; 0x0c
    6b04:	b7 01       	movw	r22, r14
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	00 d3       	rcall	.+1536   	; 0x710a <fputc>
    6b0a:	11 11       	cpse	r17, r1
    6b0c:	05 c0       	rjmp	.+10     	; 0x6b18 <vfprintf+0x37a>
    6b0e:	94 fc       	sbrc	r9, 4
    6b10:	16 c0       	rjmp	.+44     	; 0x6b3e <vfprintf+0x3a0>
    6b12:	85 e6       	ldi	r24, 0x65	; 101
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	15 c0       	rjmp	.+42     	; 0x6b42 <vfprintf+0x3a4>
    6b18:	b7 01       	movw	r22, r14
    6b1a:	8e e2       	ldi	r24, 0x2E	; 46
    6b1c:	90 e0       	ldi	r25, 0x00	; 0
    6b1e:	f5 d2       	rcall	.+1514   	; 0x710a <fputc>
    6b20:	1e 5f       	subi	r17, 0xFE	; 254
    6b22:	82 e0       	ldi	r24, 0x02	; 2
    6b24:	01 e0       	ldi	r16, 0x01	; 1
    6b26:	08 0f       	add	r16, r24
    6b28:	f3 01       	movw	r30, r6
    6b2a:	e8 0f       	add	r30, r24
    6b2c:	f1 1d       	adc	r31, r1
    6b2e:	80 81       	ld	r24, Z
    6b30:	b7 01       	movw	r22, r14
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	ea d2       	rcall	.+1492   	; 0x710a <fputc>
    6b36:	80 2f       	mov	r24, r16
    6b38:	01 13       	cpse	r16, r17
    6b3a:	f4 cf       	rjmp	.-24     	; 0x6b24 <vfprintf+0x386>
    6b3c:	e8 cf       	rjmp	.-48     	; 0x6b0e <vfprintf+0x370>
    6b3e:	85 e4       	ldi	r24, 0x45	; 69
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	b7 01       	movw	r22, r14
    6b44:	e2 d2       	rcall	.+1476   	; 0x710a <fputc>
    6b46:	d7 fc       	sbrc	r13, 7
    6b48:	06 c0       	rjmp	.+12     	; 0x6b56 <vfprintf+0x3b8>
    6b4a:	c1 14       	cp	r12, r1
    6b4c:	d1 04       	cpc	r13, r1
    6b4e:	41 f4       	brne	.+16     	; 0x6b60 <vfprintf+0x3c2>
    6b50:	ec 85       	ldd	r30, Y+12	; 0x0c
    6b52:	e4 ff       	sbrs	r30, 4
    6b54:	05 c0       	rjmp	.+10     	; 0x6b60 <vfprintf+0x3c2>
    6b56:	d1 94       	neg	r13
    6b58:	c1 94       	neg	r12
    6b5a:	d1 08       	sbc	r13, r1
    6b5c:	8d e2       	ldi	r24, 0x2D	; 45
    6b5e:	01 c0       	rjmp	.+2      	; 0x6b62 <vfprintf+0x3c4>
    6b60:	8b e2       	ldi	r24, 0x2B	; 43
    6b62:	b7 01       	movw	r22, r14
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	d1 d2       	rcall	.+1442   	; 0x710a <fputc>
    6b68:	80 e3       	ldi	r24, 0x30	; 48
    6b6a:	2a e0       	ldi	r18, 0x0A	; 10
    6b6c:	c2 16       	cp	r12, r18
    6b6e:	d1 04       	cpc	r13, r1
    6b70:	2c f0       	brlt	.+10     	; 0x6b7c <vfprintf+0x3de>
    6b72:	8f 5f       	subi	r24, 0xFF	; 255
    6b74:	fa e0       	ldi	r31, 0x0A	; 10
    6b76:	cf 1a       	sub	r12, r31
    6b78:	d1 08       	sbc	r13, r1
    6b7a:	f7 cf       	rjmp	.-18     	; 0x6b6a <vfprintf+0x3cc>
    6b7c:	b7 01       	movw	r22, r14
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	c4 d2       	rcall	.+1416   	; 0x710a <fputc>
    6b82:	b7 01       	movw	r22, r14
    6b84:	c6 01       	movw	r24, r12
    6b86:	c0 96       	adiw	r24, 0x30	; 48
    6b88:	c0 d2       	rcall	.+1408   	; 0x710a <fputc>
    6b8a:	49 c1       	rjmp	.+658    	; 0x6e1e <vfprintf+0x680>
    6b8c:	83 36       	cpi	r24, 0x63	; 99
    6b8e:	31 f0       	breq	.+12     	; 0x6b9c <vfprintf+0x3fe>
    6b90:	83 37       	cpi	r24, 0x73	; 115
    6b92:	79 f0       	breq	.+30     	; 0x6bb2 <vfprintf+0x414>
    6b94:	83 35       	cpi	r24, 0x53	; 83
    6b96:	09 f0       	breq	.+2      	; 0x6b9a <vfprintf+0x3fc>
    6b98:	52 c0       	rjmp	.+164    	; 0x6c3e <vfprintf+0x4a0>
    6b9a:	1f c0       	rjmp	.+62     	; 0x6bda <vfprintf+0x43c>
    6b9c:	56 01       	movw	r10, r12
    6b9e:	32 e0       	ldi	r19, 0x02	; 2
    6ba0:	a3 0e       	add	r10, r19
    6ba2:	b1 1c       	adc	r11, r1
    6ba4:	f6 01       	movw	r30, r12
    6ba6:	80 81       	ld	r24, Z
    6ba8:	89 83       	std	Y+1, r24	; 0x01
    6baa:	01 e0       	ldi	r16, 0x01	; 1
    6bac:	10 e0       	ldi	r17, 0x00	; 0
    6bae:	63 01       	movw	r12, r6
    6bb0:	11 c0       	rjmp	.+34     	; 0x6bd4 <vfprintf+0x436>
    6bb2:	56 01       	movw	r10, r12
    6bb4:	f2 e0       	ldi	r31, 0x02	; 2
    6bb6:	af 0e       	add	r10, r31
    6bb8:	b1 1c       	adc	r11, r1
    6bba:	f6 01       	movw	r30, r12
    6bbc:	c0 80       	ld	r12, Z
    6bbe:	d1 80       	ldd	r13, Z+1	; 0x01
    6bc0:	96 fe       	sbrs	r9, 6
    6bc2:	03 c0       	rjmp	.+6      	; 0x6bca <vfprintf+0x42c>
    6bc4:	61 2f       	mov	r22, r17
    6bc6:	70 e0       	ldi	r23, 0x00	; 0
    6bc8:	02 c0       	rjmp	.+4      	; 0x6bce <vfprintf+0x430>
    6bca:	6f ef       	ldi	r22, 0xFF	; 255
    6bcc:	7f ef       	ldi	r23, 0xFF	; 255
    6bce:	c6 01       	movw	r24, r12
    6bd0:	91 d2       	rcall	.+1314   	; 0x70f4 <strnlen>
    6bd2:	8c 01       	movw	r16, r24
    6bd4:	f9 2d       	mov	r31, r9
    6bd6:	ff 77       	andi	r31, 0x7F	; 127
    6bd8:	13 c0       	rjmp	.+38     	; 0x6c00 <vfprintf+0x462>
    6bda:	56 01       	movw	r10, r12
    6bdc:	22 e0       	ldi	r18, 0x02	; 2
    6bde:	a2 0e       	add	r10, r18
    6be0:	b1 1c       	adc	r11, r1
    6be2:	f6 01       	movw	r30, r12
    6be4:	c0 80       	ld	r12, Z
    6be6:	d1 80       	ldd	r13, Z+1	; 0x01
    6be8:	96 fe       	sbrs	r9, 6
    6bea:	03 c0       	rjmp	.+6      	; 0x6bf2 <vfprintf+0x454>
    6bec:	61 2f       	mov	r22, r17
    6bee:	70 e0       	ldi	r23, 0x00	; 0
    6bf0:	02 c0       	rjmp	.+4      	; 0x6bf6 <vfprintf+0x458>
    6bf2:	6f ef       	ldi	r22, 0xFF	; 255
    6bf4:	7f ef       	ldi	r23, 0xFF	; 255
    6bf6:	c6 01       	movw	r24, r12
    6bf8:	69 d2       	rcall	.+1234   	; 0x70cc <strnlen_P>
    6bfa:	8c 01       	movw	r16, r24
    6bfc:	f9 2d       	mov	r31, r9
    6bfe:	f0 68       	ori	r31, 0x80	; 128
    6c00:	9f 2e       	mov	r9, r31
    6c02:	f3 fd       	sbrc	r31, 3
    6c04:	18 c0       	rjmp	.+48     	; 0x6c36 <vfprintf+0x498>
    6c06:	85 2d       	mov	r24, r5
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	08 17       	cp	r16, r24
    6c0c:	19 07       	cpc	r17, r25
    6c0e:	98 f4       	brcc	.+38     	; 0x6c36 <vfprintf+0x498>
    6c10:	b7 01       	movw	r22, r14
    6c12:	80 e2       	ldi	r24, 0x20	; 32
    6c14:	90 e0       	ldi	r25, 0x00	; 0
    6c16:	79 d2       	rcall	.+1266   	; 0x710a <fputc>
    6c18:	5a 94       	dec	r5
    6c1a:	f5 cf       	rjmp	.-22     	; 0x6c06 <vfprintf+0x468>
    6c1c:	f6 01       	movw	r30, r12
    6c1e:	97 fc       	sbrc	r9, 7
    6c20:	85 91       	lpm	r24, Z+
    6c22:	97 fe       	sbrs	r9, 7
    6c24:	81 91       	ld	r24, Z+
    6c26:	6f 01       	movw	r12, r30
    6c28:	b7 01       	movw	r22, r14
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	6e d2       	rcall	.+1244   	; 0x710a <fputc>
    6c2e:	51 10       	cpse	r5, r1
    6c30:	5a 94       	dec	r5
    6c32:	01 50       	subi	r16, 0x01	; 1
    6c34:	11 09       	sbc	r17, r1
    6c36:	01 15       	cp	r16, r1
    6c38:	11 05       	cpc	r17, r1
    6c3a:	81 f7       	brne	.-32     	; 0x6c1c <vfprintf+0x47e>
    6c3c:	f0 c0       	rjmp	.+480    	; 0x6e1e <vfprintf+0x680>
    6c3e:	84 36       	cpi	r24, 0x64	; 100
    6c40:	11 f0       	breq	.+4      	; 0x6c46 <vfprintf+0x4a8>
    6c42:	89 36       	cpi	r24, 0x69	; 105
    6c44:	59 f5       	brne	.+86     	; 0x6c9c <vfprintf+0x4fe>
    6c46:	56 01       	movw	r10, r12
    6c48:	97 fe       	sbrs	r9, 7
    6c4a:	09 c0       	rjmp	.+18     	; 0x6c5e <vfprintf+0x4c0>
    6c4c:	24 e0       	ldi	r18, 0x04	; 4
    6c4e:	a2 0e       	add	r10, r18
    6c50:	b1 1c       	adc	r11, r1
    6c52:	f6 01       	movw	r30, r12
    6c54:	60 81       	ld	r22, Z
    6c56:	71 81       	ldd	r23, Z+1	; 0x01
    6c58:	82 81       	ldd	r24, Z+2	; 0x02
    6c5a:	93 81       	ldd	r25, Z+3	; 0x03
    6c5c:	0a c0       	rjmp	.+20     	; 0x6c72 <vfprintf+0x4d4>
    6c5e:	f2 e0       	ldi	r31, 0x02	; 2
    6c60:	af 0e       	add	r10, r31
    6c62:	b1 1c       	adc	r11, r1
    6c64:	f6 01       	movw	r30, r12
    6c66:	60 81       	ld	r22, Z
    6c68:	71 81       	ldd	r23, Z+1	; 0x01
    6c6a:	07 2e       	mov	r0, r23
    6c6c:	00 0c       	add	r0, r0
    6c6e:	88 0b       	sbc	r24, r24
    6c70:	99 0b       	sbc	r25, r25
    6c72:	f9 2d       	mov	r31, r9
    6c74:	ff 76       	andi	r31, 0x6F	; 111
    6c76:	9f 2e       	mov	r9, r31
    6c78:	97 ff       	sbrs	r25, 7
    6c7a:	09 c0       	rjmp	.+18     	; 0x6c8e <vfprintf+0x4f0>
    6c7c:	90 95       	com	r25
    6c7e:	80 95       	com	r24
    6c80:	70 95       	com	r23
    6c82:	61 95       	neg	r22
    6c84:	7f 4f       	sbci	r23, 0xFF	; 255
    6c86:	8f 4f       	sbci	r24, 0xFF	; 255
    6c88:	9f 4f       	sbci	r25, 0xFF	; 255
    6c8a:	f0 68       	ori	r31, 0x80	; 128
    6c8c:	9f 2e       	mov	r9, r31
    6c8e:	2a e0       	ldi	r18, 0x0A	; 10
    6c90:	30 e0       	ldi	r19, 0x00	; 0
    6c92:	a3 01       	movw	r20, r6
    6c94:	9e d2       	rcall	.+1340   	; 0x71d2 <__ultoa_invert>
    6c96:	c8 2e       	mov	r12, r24
    6c98:	c6 18       	sub	r12, r6
    6c9a:	3e c0       	rjmp	.+124    	; 0x6d18 <vfprintf+0x57a>
    6c9c:	09 2d       	mov	r16, r9
    6c9e:	85 37       	cpi	r24, 0x75	; 117
    6ca0:	21 f4       	brne	.+8      	; 0x6caa <vfprintf+0x50c>
    6ca2:	0f 7e       	andi	r16, 0xEF	; 239
    6ca4:	2a e0       	ldi	r18, 0x0A	; 10
    6ca6:	30 e0       	ldi	r19, 0x00	; 0
    6ca8:	1d c0       	rjmp	.+58     	; 0x6ce4 <vfprintf+0x546>
    6caa:	09 7f       	andi	r16, 0xF9	; 249
    6cac:	8f 36       	cpi	r24, 0x6F	; 111
    6cae:	91 f0       	breq	.+36     	; 0x6cd4 <vfprintf+0x536>
    6cb0:	18 f4       	brcc	.+6      	; 0x6cb8 <vfprintf+0x51a>
    6cb2:	88 35       	cpi	r24, 0x58	; 88
    6cb4:	59 f0       	breq	.+22     	; 0x6ccc <vfprintf+0x52e>
    6cb6:	bc c0       	rjmp	.+376    	; 0x6e30 <vfprintf+0x692>
    6cb8:	80 37       	cpi	r24, 0x70	; 112
    6cba:	19 f0       	breq	.+6      	; 0x6cc2 <vfprintf+0x524>
    6cbc:	88 37       	cpi	r24, 0x78	; 120
    6cbe:	11 f0       	breq	.+4      	; 0x6cc4 <vfprintf+0x526>
    6cc0:	b7 c0       	rjmp	.+366    	; 0x6e30 <vfprintf+0x692>
    6cc2:	00 61       	ori	r16, 0x10	; 16
    6cc4:	04 ff       	sbrs	r16, 4
    6cc6:	09 c0       	rjmp	.+18     	; 0x6cda <vfprintf+0x53c>
    6cc8:	04 60       	ori	r16, 0x04	; 4
    6cca:	07 c0       	rjmp	.+14     	; 0x6cda <vfprintf+0x53c>
    6ccc:	94 fe       	sbrs	r9, 4
    6cce:	08 c0       	rjmp	.+16     	; 0x6ce0 <vfprintf+0x542>
    6cd0:	06 60       	ori	r16, 0x06	; 6
    6cd2:	06 c0       	rjmp	.+12     	; 0x6ce0 <vfprintf+0x542>
    6cd4:	28 e0       	ldi	r18, 0x08	; 8
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	05 c0       	rjmp	.+10     	; 0x6ce4 <vfprintf+0x546>
    6cda:	20 e1       	ldi	r18, 0x10	; 16
    6cdc:	30 e0       	ldi	r19, 0x00	; 0
    6cde:	02 c0       	rjmp	.+4      	; 0x6ce4 <vfprintf+0x546>
    6ce0:	20 e1       	ldi	r18, 0x10	; 16
    6ce2:	32 e0       	ldi	r19, 0x02	; 2
    6ce4:	56 01       	movw	r10, r12
    6ce6:	07 ff       	sbrs	r16, 7
    6ce8:	09 c0       	rjmp	.+18     	; 0x6cfc <vfprintf+0x55e>
    6cea:	84 e0       	ldi	r24, 0x04	; 4
    6cec:	a8 0e       	add	r10, r24
    6cee:	b1 1c       	adc	r11, r1
    6cf0:	f6 01       	movw	r30, r12
    6cf2:	60 81       	ld	r22, Z
    6cf4:	71 81       	ldd	r23, Z+1	; 0x01
    6cf6:	82 81       	ldd	r24, Z+2	; 0x02
    6cf8:	93 81       	ldd	r25, Z+3	; 0x03
    6cfa:	08 c0       	rjmp	.+16     	; 0x6d0c <vfprintf+0x56e>
    6cfc:	f2 e0       	ldi	r31, 0x02	; 2
    6cfe:	af 0e       	add	r10, r31
    6d00:	b1 1c       	adc	r11, r1
    6d02:	f6 01       	movw	r30, r12
    6d04:	60 81       	ld	r22, Z
    6d06:	71 81       	ldd	r23, Z+1	; 0x01
    6d08:	80 e0       	ldi	r24, 0x00	; 0
    6d0a:	90 e0       	ldi	r25, 0x00	; 0
    6d0c:	a3 01       	movw	r20, r6
    6d0e:	61 d2       	rcall	.+1218   	; 0x71d2 <__ultoa_invert>
    6d10:	c8 2e       	mov	r12, r24
    6d12:	c6 18       	sub	r12, r6
    6d14:	0f 77       	andi	r16, 0x7F	; 127
    6d16:	90 2e       	mov	r9, r16
    6d18:	96 fe       	sbrs	r9, 6
    6d1a:	0b c0       	rjmp	.+22     	; 0x6d32 <vfprintf+0x594>
    6d1c:	09 2d       	mov	r16, r9
    6d1e:	0e 7f       	andi	r16, 0xFE	; 254
    6d20:	c1 16       	cp	r12, r17
    6d22:	50 f4       	brcc	.+20     	; 0x6d38 <vfprintf+0x59a>
    6d24:	94 fe       	sbrs	r9, 4
    6d26:	0a c0       	rjmp	.+20     	; 0x6d3c <vfprintf+0x59e>
    6d28:	92 fc       	sbrc	r9, 2
    6d2a:	08 c0       	rjmp	.+16     	; 0x6d3c <vfprintf+0x59e>
    6d2c:	09 2d       	mov	r16, r9
    6d2e:	0e 7e       	andi	r16, 0xEE	; 238
    6d30:	05 c0       	rjmp	.+10     	; 0x6d3c <vfprintf+0x59e>
    6d32:	dc 2c       	mov	r13, r12
    6d34:	09 2d       	mov	r16, r9
    6d36:	03 c0       	rjmp	.+6      	; 0x6d3e <vfprintf+0x5a0>
    6d38:	dc 2c       	mov	r13, r12
    6d3a:	01 c0       	rjmp	.+2      	; 0x6d3e <vfprintf+0x5a0>
    6d3c:	d1 2e       	mov	r13, r17
    6d3e:	04 ff       	sbrs	r16, 4
    6d40:	0d c0       	rjmp	.+26     	; 0x6d5c <vfprintf+0x5be>
    6d42:	fe 01       	movw	r30, r28
    6d44:	ec 0d       	add	r30, r12
    6d46:	f1 1d       	adc	r31, r1
    6d48:	80 81       	ld	r24, Z
    6d4a:	80 33       	cpi	r24, 0x30	; 48
    6d4c:	11 f4       	brne	.+4      	; 0x6d52 <vfprintf+0x5b4>
    6d4e:	09 7e       	andi	r16, 0xE9	; 233
    6d50:	09 c0       	rjmp	.+18     	; 0x6d64 <vfprintf+0x5c6>
    6d52:	02 ff       	sbrs	r16, 2
    6d54:	06 c0       	rjmp	.+12     	; 0x6d62 <vfprintf+0x5c4>
    6d56:	d3 94       	inc	r13
    6d58:	d3 94       	inc	r13
    6d5a:	04 c0       	rjmp	.+8      	; 0x6d64 <vfprintf+0x5c6>
    6d5c:	80 2f       	mov	r24, r16
    6d5e:	86 78       	andi	r24, 0x86	; 134
    6d60:	09 f0       	breq	.+2      	; 0x6d64 <vfprintf+0x5c6>
    6d62:	d3 94       	inc	r13
    6d64:	03 fd       	sbrc	r16, 3
    6d66:	10 c0       	rjmp	.+32     	; 0x6d88 <vfprintf+0x5ea>
    6d68:	00 ff       	sbrs	r16, 0
    6d6a:	06 c0       	rjmp	.+12     	; 0x6d78 <vfprintf+0x5da>
    6d6c:	1c 2d       	mov	r17, r12
    6d6e:	d5 14       	cp	r13, r5
    6d70:	78 f4       	brcc	.+30     	; 0x6d90 <vfprintf+0x5f2>
    6d72:	15 0d       	add	r17, r5
    6d74:	1d 19       	sub	r17, r13
    6d76:	0c c0       	rjmp	.+24     	; 0x6d90 <vfprintf+0x5f2>
    6d78:	d5 14       	cp	r13, r5
    6d7a:	50 f4       	brcc	.+20     	; 0x6d90 <vfprintf+0x5f2>
    6d7c:	b7 01       	movw	r22, r14
    6d7e:	80 e2       	ldi	r24, 0x20	; 32
    6d80:	90 e0       	ldi	r25, 0x00	; 0
    6d82:	c3 d1       	rcall	.+902    	; 0x710a <fputc>
    6d84:	d3 94       	inc	r13
    6d86:	f8 cf       	rjmp	.-16     	; 0x6d78 <vfprintf+0x5da>
    6d88:	d5 14       	cp	r13, r5
    6d8a:	10 f4       	brcc	.+4      	; 0x6d90 <vfprintf+0x5f2>
    6d8c:	5d 18       	sub	r5, r13
    6d8e:	01 c0       	rjmp	.+2      	; 0x6d92 <vfprintf+0x5f4>
    6d90:	51 2c       	mov	r5, r1
    6d92:	04 ff       	sbrs	r16, 4
    6d94:	0f c0       	rjmp	.+30     	; 0x6db4 <vfprintf+0x616>
    6d96:	b7 01       	movw	r22, r14
    6d98:	80 e3       	ldi	r24, 0x30	; 48
    6d9a:	90 e0       	ldi	r25, 0x00	; 0
    6d9c:	b6 d1       	rcall	.+876    	; 0x710a <fputc>
    6d9e:	02 ff       	sbrs	r16, 2
    6da0:	16 c0       	rjmp	.+44     	; 0x6dce <vfprintf+0x630>
    6da2:	01 fd       	sbrc	r16, 1
    6da4:	03 c0       	rjmp	.+6      	; 0x6dac <vfprintf+0x60e>
    6da6:	88 e7       	ldi	r24, 0x78	; 120
    6da8:	90 e0       	ldi	r25, 0x00	; 0
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <vfprintf+0x612>
    6dac:	88 e5       	ldi	r24, 0x58	; 88
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	b7 01       	movw	r22, r14
    6db2:	0c c0       	rjmp	.+24     	; 0x6dcc <vfprintf+0x62e>
    6db4:	80 2f       	mov	r24, r16
    6db6:	86 78       	andi	r24, 0x86	; 134
    6db8:	51 f0       	breq	.+20     	; 0x6dce <vfprintf+0x630>
    6dba:	01 ff       	sbrs	r16, 1
    6dbc:	02 c0       	rjmp	.+4      	; 0x6dc2 <vfprintf+0x624>
    6dbe:	8b e2       	ldi	r24, 0x2B	; 43
    6dc0:	01 c0       	rjmp	.+2      	; 0x6dc4 <vfprintf+0x626>
    6dc2:	80 e2       	ldi	r24, 0x20	; 32
    6dc4:	07 fd       	sbrc	r16, 7
    6dc6:	8d e2       	ldi	r24, 0x2D	; 45
    6dc8:	b7 01       	movw	r22, r14
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	9e d1       	rcall	.+828    	; 0x710a <fputc>
    6dce:	c1 16       	cp	r12, r17
    6dd0:	30 f4       	brcc	.+12     	; 0x6dde <vfprintf+0x640>
    6dd2:	b7 01       	movw	r22, r14
    6dd4:	80 e3       	ldi	r24, 0x30	; 48
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	98 d1       	rcall	.+816    	; 0x710a <fputc>
    6dda:	11 50       	subi	r17, 0x01	; 1
    6ddc:	f8 cf       	rjmp	.-16     	; 0x6dce <vfprintf+0x630>
    6dde:	ca 94       	dec	r12
    6de0:	f3 01       	movw	r30, r6
    6de2:	ec 0d       	add	r30, r12
    6de4:	f1 1d       	adc	r31, r1
    6de6:	80 81       	ld	r24, Z
    6de8:	b7 01       	movw	r22, r14
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	8e d1       	rcall	.+796    	; 0x710a <fputc>
    6dee:	c1 10       	cpse	r12, r1
    6df0:	f6 cf       	rjmp	.-20     	; 0x6dde <vfprintf+0x640>
    6df2:	15 c0       	rjmp	.+42     	; 0x6e1e <vfprintf+0x680>
    6df4:	f4 e0       	ldi	r31, 0x04	; 4
    6df6:	f5 15       	cp	r31, r5
    6df8:	50 f5       	brcc	.+84     	; 0x6e4e <vfprintf+0x6b0>
    6dfa:	84 e0       	ldi	r24, 0x04	; 4
    6dfc:	58 1a       	sub	r5, r24
    6dfe:	93 fe       	sbrs	r9, 3
    6e00:	1e c0       	rjmp	.+60     	; 0x6e3e <vfprintf+0x6a0>
    6e02:	01 11       	cpse	r16, r1
    6e04:	25 c0       	rjmp	.+74     	; 0x6e50 <vfprintf+0x6b2>
    6e06:	2c 85       	ldd	r18, Y+12	; 0x0c
    6e08:	23 ff       	sbrs	r18, 3
    6e0a:	27 c0       	rjmp	.+78     	; 0x6e5a <vfprintf+0x6bc>
    6e0c:	00 e3       	ldi	r16, 0x30	; 48
    6e0e:	11 e0       	ldi	r17, 0x01	; 1
    6e10:	39 2d       	mov	r19, r9
    6e12:	30 71       	andi	r19, 0x10	; 16
    6e14:	93 2e       	mov	r9, r19
    6e16:	f8 01       	movw	r30, r16
    6e18:	84 91       	lpm	r24, Z
    6e1a:	81 11       	cpse	r24, r1
    6e1c:	21 c0       	rjmp	.+66     	; 0x6e60 <vfprintf+0x6c2>
    6e1e:	55 20       	and	r5, r5
    6e20:	09 f4       	brne	.+2      	; 0x6e24 <vfprintf+0x686>
    6e22:	fc cc       	rjmp	.-1544   	; 0x681c <vfprintf+0x7e>
    6e24:	b7 01       	movw	r22, r14
    6e26:	80 e2       	ldi	r24, 0x20	; 32
    6e28:	90 e0       	ldi	r25, 0x00	; 0
    6e2a:	6f d1       	rcall	.+734    	; 0x710a <fputc>
    6e2c:	5a 94       	dec	r5
    6e2e:	f7 cf       	rjmp	.-18     	; 0x6e1e <vfprintf+0x680>
    6e30:	f7 01       	movw	r30, r14
    6e32:	86 81       	ldd	r24, Z+6	; 0x06
    6e34:	97 81       	ldd	r25, Z+7	; 0x07
    6e36:	23 c0       	rjmp	.+70     	; 0x6e7e <vfprintf+0x6e0>
    6e38:	8f ef       	ldi	r24, 0xFF	; 255
    6e3a:	9f ef       	ldi	r25, 0xFF	; 255
    6e3c:	20 c0       	rjmp	.+64     	; 0x6e7e <vfprintf+0x6e0>
    6e3e:	b7 01       	movw	r22, r14
    6e40:	80 e2       	ldi	r24, 0x20	; 32
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	62 d1       	rcall	.+708    	; 0x710a <fputc>
    6e46:	5a 94       	dec	r5
    6e48:	51 10       	cpse	r5, r1
    6e4a:	f9 cf       	rjmp	.-14     	; 0x6e3e <vfprintf+0x6a0>
    6e4c:	da cf       	rjmp	.-76     	; 0x6e02 <vfprintf+0x664>
    6e4e:	51 2c       	mov	r5, r1
    6e50:	b7 01       	movw	r22, r14
    6e52:	80 2f       	mov	r24, r16
    6e54:	90 e0       	ldi	r25, 0x00	; 0
    6e56:	59 d1       	rcall	.+690    	; 0x710a <fputc>
    6e58:	d6 cf       	rjmp	.-84     	; 0x6e06 <vfprintf+0x668>
    6e5a:	04 e3       	ldi	r16, 0x34	; 52
    6e5c:	11 e0       	ldi	r17, 0x01	; 1
    6e5e:	d8 cf       	rjmp	.-80     	; 0x6e10 <vfprintf+0x672>
    6e60:	91 10       	cpse	r9, r1
    6e62:	80 52       	subi	r24, 0x20	; 32
    6e64:	b7 01       	movw	r22, r14
    6e66:	90 e0       	ldi	r25, 0x00	; 0
    6e68:	50 d1       	rcall	.+672    	; 0x710a <fputc>
    6e6a:	0f 5f       	subi	r16, 0xFF	; 255
    6e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e6e:	d3 cf       	rjmp	.-90     	; 0x6e16 <vfprintf+0x678>
    6e70:	23 e0       	ldi	r18, 0x03	; 3
    6e72:	25 15       	cp	r18, r5
    6e74:	10 f4       	brcc	.+4      	; 0x6e7a <vfprintf+0x6dc>
    6e76:	83 e0       	ldi	r24, 0x03	; 3
    6e78:	c1 cf       	rjmp	.-126    	; 0x6dfc <vfprintf+0x65e>
    6e7a:	51 2c       	mov	r5, r1
    6e7c:	c4 cf       	rjmp	.-120    	; 0x6e06 <vfprintf+0x668>
    6e7e:	60 96       	adiw	r28, 0x10	; 16
    6e80:	0f b6       	in	r0, 0x3f	; 63
    6e82:	f8 94       	cli
    6e84:	de bf       	out	0x3e, r29	; 62
    6e86:	0f be       	out	0x3f, r0	; 63
    6e88:	cd bf       	out	0x3d, r28	; 61
    6e8a:	df 91       	pop	r29
    6e8c:	cf 91       	pop	r28
    6e8e:	1f 91       	pop	r17
    6e90:	0f 91       	pop	r16
    6e92:	ff 90       	pop	r15
    6e94:	ef 90       	pop	r14
    6e96:	df 90       	pop	r13
    6e98:	cf 90       	pop	r12
    6e9a:	bf 90       	pop	r11
    6e9c:	af 90       	pop	r10
    6e9e:	9f 90       	pop	r9
    6ea0:	8f 90       	pop	r8
    6ea2:	7f 90       	pop	r7
    6ea4:	6f 90       	pop	r6
    6ea6:	5f 90       	pop	r5
    6ea8:	4f 90       	pop	r4
    6eaa:	3f 90       	pop	r3
    6eac:	2f 90       	pop	r2
    6eae:	08 95       	ret

00006eb0 <__divmodhi4>:
    6eb0:	97 fb       	bst	r25, 7
    6eb2:	07 2e       	mov	r0, r23
    6eb4:	16 f4       	brtc	.+4      	; 0x6eba <__divmodhi4+0xa>
    6eb6:	00 94       	com	r0
    6eb8:	06 d0       	rcall	.+12     	; 0x6ec6 <__divmodhi4_neg1>
    6eba:	77 fd       	sbrc	r23, 7
    6ebc:	08 d0       	rcall	.+16     	; 0x6ece <__divmodhi4_neg2>
    6ebe:	1a d0       	rcall	.+52     	; 0x6ef4 <__udivmodhi4>
    6ec0:	07 fc       	sbrc	r0, 7
    6ec2:	05 d0       	rcall	.+10     	; 0x6ece <__divmodhi4_neg2>
    6ec4:	3e f4       	brtc	.+14     	; 0x6ed4 <__divmodhi4_exit>

00006ec6 <__divmodhi4_neg1>:
    6ec6:	90 95       	com	r25
    6ec8:	81 95       	neg	r24
    6eca:	9f 4f       	sbci	r25, 0xFF	; 255
    6ecc:	08 95       	ret

00006ece <__divmodhi4_neg2>:
    6ece:	70 95       	com	r23
    6ed0:	61 95       	neg	r22
    6ed2:	7f 4f       	sbci	r23, 0xFF	; 255

00006ed4 <__divmodhi4_exit>:
    6ed4:	08 95       	ret

00006ed6 <__umulhisi3>:
    6ed6:	a2 9f       	mul	r26, r18
    6ed8:	b0 01       	movw	r22, r0
    6eda:	b3 9f       	mul	r27, r19
    6edc:	c0 01       	movw	r24, r0
    6ede:	a3 9f       	mul	r26, r19
    6ee0:	70 0d       	add	r23, r0
    6ee2:	81 1d       	adc	r24, r1
    6ee4:	11 24       	eor	r1, r1
    6ee6:	91 1d       	adc	r25, r1
    6ee8:	b2 9f       	mul	r27, r18
    6eea:	70 0d       	add	r23, r0
    6eec:	81 1d       	adc	r24, r1
    6eee:	11 24       	eor	r1, r1
    6ef0:	91 1d       	adc	r25, r1
    6ef2:	08 95       	ret

00006ef4 <__udivmodhi4>:
    6ef4:	aa 1b       	sub	r26, r26
    6ef6:	bb 1b       	sub	r27, r27
    6ef8:	51 e1       	ldi	r21, 0x11	; 17
    6efa:	07 c0       	rjmp	.+14     	; 0x6f0a <__udivmodhi4_ep>

00006efc <__udivmodhi4_loop>:
    6efc:	aa 1f       	adc	r26, r26
    6efe:	bb 1f       	adc	r27, r27
    6f00:	a6 17       	cp	r26, r22
    6f02:	b7 07       	cpc	r27, r23
    6f04:	10 f0       	brcs	.+4      	; 0x6f0a <__udivmodhi4_ep>
    6f06:	a6 1b       	sub	r26, r22
    6f08:	b7 0b       	sbc	r27, r23

00006f0a <__udivmodhi4_ep>:
    6f0a:	88 1f       	adc	r24, r24
    6f0c:	99 1f       	adc	r25, r25
    6f0e:	5a 95       	dec	r21
    6f10:	a9 f7       	brne	.-22     	; 0x6efc <__udivmodhi4_loop>
    6f12:	80 95       	com	r24
    6f14:	90 95       	com	r25
    6f16:	bc 01       	movw	r22, r24
    6f18:	cd 01       	movw	r24, r26
    6f1a:	08 95       	ret

00006f1c <__ftoa_engine>:
    6f1c:	28 30       	cpi	r18, 0x08	; 8
    6f1e:	08 f0       	brcs	.+2      	; 0x6f22 <__ftoa_engine+0x6>
    6f20:	27 e0       	ldi	r18, 0x07	; 7
    6f22:	33 27       	eor	r19, r19
    6f24:	da 01       	movw	r26, r20
    6f26:	99 0f       	add	r25, r25
    6f28:	31 1d       	adc	r19, r1
    6f2a:	87 fd       	sbrc	r24, 7
    6f2c:	91 60       	ori	r25, 0x01	; 1
    6f2e:	00 96       	adiw	r24, 0x00	; 0
    6f30:	61 05       	cpc	r22, r1
    6f32:	71 05       	cpc	r23, r1
    6f34:	39 f4       	brne	.+14     	; 0x6f44 <__ftoa_engine+0x28>
    6f36:	32 60       	ori	r19, 0x02	; 2
    6f38:	2e 5f       	subi	r18, 0xFE	; 254
    6f3a:	3d 93       	st	X+, r19
    6f3c:	30 e3       	ldi	r19, 0x30	; 48
    6f3e:	2a 95       	dec	r18
    6f40:	e1 f7       	brne	.-8      	; 0x6f3a <__ftoa_engine+0x1e>
    6f42:	08 95       	ret
    6f44:	9f 3f       	cpi	r25, 0xFF	; 255
    6f46:	30 f0       	brcs	.+12     	; 0x6f54 <__ftoa_engine+0x38>
    6f48:	80 38       	cpi	r24, 0x80	; 128
    6f4a:	71 05       	cpc	r23, r1
    6f4c:	61 05       	cpc	r22, r1
    6f4e:	09 f0       	breq	.+2      	; 0x6f52 <__ftoa_engine+0x36>
    6f50:	3c 5f       	subi	r19, 0xFC	; 252
    6f52:	3c 5f       	subi	r19, 0xFC	; 252
    6f54:	3d 93       	st	X+, r19
    6f56:	91 30       	cpi	r25, 0x01	; 1
    6f58:	08 f0       	brcs	.+2      	; 0x6f5c <__ftoa_engine+0x40>
    6f5a:	80 68       	ori	r24, 0x80	; 128
    6f5c:	91 1d       	adc	r25, r1
    6f5e:	df 93       	push	r29
    6f60:	cf 93       	push	r28
    6f62:	1f 93       	push	r17
    6f64:	0f 93       	push	r16
    6f66:	ff 92       	push	r15
    6f68:	ef 92       	push	r14
    6f6a:	19 2f       	mov	r17, r25
    6f6c:	98 7f       	andi	r25, 0xF8	; 248
    6f6e:	96 95       	lsr	r25
    6f70:	e9 2f       	mov	r30, r25
    6f72:	96 95       	lsr	r25
    6f74:	96 95       	lsr	r25
    6f76:	e9 0f       	add	r30, r25
    6f78:	ff 27       	eor	r31, r31
    6f7a:	ee 56       	subi	r30, 0x6E	; 110
    6f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f7e:	99 27       	eor	r25, r25
    6f80:	33 27       	eor	r19, r19
    6f82:	ee 24       	eor	r14, r14
    6f84:	ff 24       	eor	r15, r15
    6f86:	a7 01       	movw	r20, r14
    6f88:	e7 01       	movw	r28, r14
    6f8a:	05 90       	lpm	r0, Z+
    6f8c:	08 94       	sec
    6f8e:	07 94       	ror	r0
    6f90:	28 f4       	brcc	.+10     	; 0x6f9c <__ftoa_engine+0x80>
    6f92:	36 0f       	add	r19, r22
    6f94:	e7 1e       	adc	r14, r23
    6f96:	f8 1e       	adc	r15, r24
    6f98:	49 1f       	adc	r20, r25
    6f9a:	51 1d       	adc	r21, r1
    6f9c:	66 0f       	add	r22, r22
    6f9e:	77 1f       	adc	r23, r23
    6fa0:	88 1f       	adc	r24, r24
    6fa2:	99 1f       	adc	r25, r25
    6fa4:	06 94       	lsr	r0
    6fa6:	a1 f7       	brne	.-24     	; 0x6f90 <__ftoa_engine+0x74>
    6fa8:	05 90       	lpm	r0, Z+
    6faa:	07 94       	ror	r0
    6fac:	28 f4       	brcc	.+10     	; 0x6fb8 <__ftoa_engine+0x9c>
    6fae:	e7 0e       	add	r14, r23
    6fb0:	f8 1e       	adc	r15, r24
    6fb2:	49 1f       	adc	r20, r25
    6fb4:	56 1f       	adc	r21, r22
    6fb6:	c1 1d       	adc	r28, r1
    6fb8:	77 0f       	add	r23, r23
    6fba:	88 1f       	adc	r24, r24
    6fbc:	99 1f       	adc	r25, r25
    6fbe:	66 1f       	adc	r22, r22
    6fc0:	06 94       	lsr	r0
    6fc2:	a1 f7       	brne	.-24     	; 0x6fac <__ftoa_engine+0x90>
    6fc4:	05 90       	lpm	r0, Z+
    6fc6:	07 94       	ror	r0
    6fc8:	28 f4       	brcc	.+10     	; 0x6fd4 <__ftoa_engine+0xb8>
    6fca:	f8 0e       	add	r15, r24
    6fcc:	49 1f       	adc	r20, r25
    6fce:	56 1f       	adc	r21, r22
    6fd0:	c7 1f       	adc	r28, r23
    6fd2:	d1 1d       	adc	r29, r1
    6fd4:	88 0f       	add	r24, r24
    6fd6:	99 1f       	adc	r25, r25
    6fd8:	66 1f       	adc	r22, r22
    6fda:	77 1f       	adc	r23, r23
    6fdc:	06 94       	lsr	r0
    6fde:	a1 f7       	brne	.-24     	; 0x6fc8 <__ftoa_engine+0xac>
    6fe0:	05 90       	lpm	r0, Z+
    6fe2:	07 94       	ror	r0
    6fe4:	20 f4       	brcc	.+8      	; 0x6fee <__ftoa_engine+0xd2>
    6fe6:	49 0f       	add	r20, r25
    6fe8:	56 1f       	adc	r21, r22
    6fea:	c7 1f       	adc	r28, r23
    6fec:	d8 1f       	adc	r29, r24
    6fee:	99 0f       	add	r25, r25
    6ff0:	66 1f       	adc	r22, r22
    6ff2:	77 1f       	adc	r23, r23
    6ff4:	88 1f       	adc	r24, r24
    6ff6:	06 94       	lsr	r0
    6ff8:	a9 f7       	brne	.-22     	; 0x6fe4 <__ftoa_engine+0xc8>
    6ffa:	84 91       	lpm	r24, Z
    6ffc:	10 95       	com	r17
    6ffe:	17 70       	andi	r17, 0x07	; 7
    7000:	41 f0       	breq	.+16     	; 0x7012 <__ftoa_engine+0xf6>
    7002:	d6 95       	lsr	r29
    7004:	c7 95       	ror	r28
    7006:	57 95       	ror	r21
    7008:	47 95       	ror	r20
    700a:	f7 94       	ror	r15
    700c:	e7 94       	ror	r14
    700e:	1a 95       	dec	r17
    7010:	c1 f7       	brne	.-16     	; 0x7002 <__ftoa_engine+0xe6>
    7012:	e8 e3       	ldi	r30, 0x38	; 56
    7014:	f1 e0       	ldi	r31, 0x01	; 1
    7016:	68 94       	set
    7018:	15 90       	lpm	r1, Z+
    701a:	15 91       	lpm	r17, Z+
    701c:	35 91       	lpm	r19, Z+
    701e:	65 91       	lpm	r22, Z+
    7020:	95 91       	lpm	r25, Z+
    7022:	05 90       	lpm	r0, Z+
    7024:	7f e2       	ldi	r23, 0x2F	; 47
    7026:	73 95       	inc	r23
    7028:	e1 18       	sub	r14, r1
    702a:	f1 0a       	sbc	r15, r17
    702c:	43 0b       	sbc	r20, r19
    702e:	56 0b       	sbc	r21, r22
    7030:	c9 0b       	sbc	r28, r25
    7032:	d0 09       	sbc	r29, r0
    7034:	c0 f7       	brcc	.-16     	; 0x7026 <__ftoa_engine+0x10a>
    7036:	e1 0c       	add	r14, r1
    7038:	f1 1e       	adc	r15, r17
    703a:	43 1f       	adc	r20, r19
    703c:	56 1f       	adc	r21, r22
    703e:	c9 1f       	adc	r28, r25
    7040:	d0 1d       	adc	r29, r0
    7042:	7e f4       	brtc	.+30     	; 0x7062 <__ftoa_engine+0x146>
    7044:	70 33       	cpi	r23, 0x30	; 48
    7046:	11 f4       	brne	.+4      	; 0x704c <__ftoa_engine+0x130>
    7048:	8a 95       	dec	r24
    704a:	e6 cf       	rjmp	.-52     	; 0x7018 <__ftoa_engine+0xfc>
    704c:	e8 94       	clt
    704e:	01 50       	subi	r16, 0x01	; 1
    7050:	30 f0       	brcs	.+12     	; 0x705e <__ftoa_engine+0x142>
    7052:	08 0f       	add	r16, r24
    7054:	0a f4       	brpl	.+2      	; 0x7058 <__ftoa_engine+0x13c>
    7056:	00 27       	eor	r16, r16
    7058:	02 17       	cp	r16, r18
    705a:	08 f4       	brcc	.+2      	; 0x705e <__ftoa_engine+0x142>
    705c:	20 2f       	mov	r18, r16
    705e:	23 95       	inc	r18
    7060:	02 2f       	mov	r16, r18
    7062:	7a 33       	cpi	r23, 0x3A	; 58
    7064:	28 f0       	brcs	.+10     	; 0x7070 <__ftoa_engine+0x154>
    7066:	79 e3       	ldi	r23, 0x39	; 57
    7068:	7d 93       	st	X+, r23
    706a:	2a 95       	dec	r18
    706c:	e9 f7       	brne	.-6      	; 0x7068 <__ftoa_engine+0x14c>
    706e:	10 c0       	rjmp	.+32     	; 0x7090 <__ftoa_engine+0x174>
    7070:	7d 93       	st	X+, r23
    7072:	2a 95       	dec	r18
    7074:	89 f6       	brne	.-94     	; 0x7018 <__ftoa_engine+0xfc>
    7076:	06 94       	lsr	r0
    7078:	97 95       	ror	r25
    707a:	67 95       	ror	r22
    707c:	37 95       	ror	r19
    707e:	17 95       	ror	r17
    7080:	17 94       	ror	r1
    7082:	e1 18       	sub	r14, r1
    7084:	f1 0a       	sbc	r15, r17
    7086:	43 0b       	sbc	r20, r19
    7088:	56 0b       	sbc	r21, r22
    708a:	c9 0b       	sbc	r28, r25
    708c:	d0 09       	sbc	r29, r0
    708e:	98 f0       	brcs	.+38     	; 0x70b6 <__ftoa_engine+0x19a>
    7090:	23 95       	inc	r18
    7092:	7e 91       	ld	r23, -X
    7094:	73 95       	inc	r23
    7096:	7a 33       	cpi	r23, 0x3A	; 58
    7098:	08 f0       	brcs	.+2      	; 0x709c <__ftoa_engine+0x180>
    709a:	70 e3       	ldi	r23, 0x30	; 48
    709c:	7c 93       	st	X, r23
    709e:	20 13       	cpse	r18, r16
    70a0:	b8 f7       	brcc	.-18     	; 0x7090 <__ftoa_engine+0x174>
    70a2:	7e 91       	ld	r23, -X
    70a4:	70 61       	ori	r23, 0x10	; 16
    70a6:	7d 93       	st	X+, r23
    70a8:	30 f0       	brcs	.+12     	; 0x70b6 <__ftoa_engine+0x19a>
    70aa:	83 95       	inc	r24
    70ac:	71 e3       	ldi	r23, 0x31	; 49
    70ae:	7d 93       	st	X+, r23
    70b0:	70 e3       	ldi	r23, 0x30	; 48
    70b2:	2a 95       	dec	r18
    70b4:	e1 f7       	brne	.-8      	; 0x70ae <__ftoa_engine+0x192>
    70b6:	11 24       	eor	r1, r1
    70b8:	ef 90       	pop	r14
    70ba:	ff 90       	pop	r15
    70bc:	0f 91       	pop	r16
    70be:	1f 91       	pop	r17
    70c0:	cf 91       	pop	r28
    70c2:	df 91       	pop	r29
    70c4:	99 27       	eor	r25, r25
    70c6:	87 fd       	sbrc	r24, 7
    70c8:	90 95       	com	r25
    70ca:	08 95       	ret

000070cc <strnlen_P>:
    70cc:	fc 01       	movw	r30, r24
    70ce:	05 90       	lpm	r0, Z+
    70d0:	61 50       	subi	r22, 0x01	; 1
    70d2:	70 40       	sbci	r23, 0x00	; 0
    70d4:	01 10       	cpse	r0, r1
    70d6:	d8 f7       	brcc	.-10     	; 0x70ce <strnlen_P+0x2>
    70d8:	80 95       	com	r24
    70da:	90 95       	com	r25
    70dc:	8e 0f       	add	r24, r30
    70de:	9f 1f       	adc	r25, r31
    70e0:	08 95       	ret

000070e2 <memcpy>:
    70e2:	fb 01       	movw	r30, r22
    70e4:	dc 01       	movw	r26, r24
    70e6:	02 c0       	rjmp	.+4      	; 0x70ec <memcpy+0xa>
    70e8:	01 90       	ld	r0, Z+
    70ea:	0d 92       	st	X+, r0
    70ec:	41 50       	subi	r20, 0x01	; 1
    70ee:	50 40       	sbci	r21, 0x00	; 0
    70f0:	d8 f7       	brcc	.-10     	; 0x70e8 <memcpy+0x6>
    70f2:	08 95       	ret

000070f4 <strnlen>:
    70f4:	fc 01       	movw	r30, r24
    70f6:	61 50       	subi	r22, 0x01	; 1
    70f8:	70 40       	sbci	r23, 0x00	; 0
    70fa:	01 90       	ld	r0, Z+
    70fc:	01 10       	cpse	r0, r1
    70fe:	d8 f7       	brcc	.-10     	; 0x70f6 <strnlen+0x2>
    7100:	80 95       	com	r24
    7102:	90 95       	com	r25
    7104:	8e 0f       	add	r24, r30
    7106:	9f 1f       	adc	r25, r31
    7108:	08 95       	ret

0000710a <fputc>:
    710a:	0f 93       	push	r16
    710c:	1f 93       	push	r17
    710e:	cf 93       	push	r28
    7110:	df 93       	push	r29
    7112:	fb 01       	movw	r30, r22
    7114:	23 81       	ldd	r18, Z+3	; 0x03
    7116:	21 fd       	sbrc	r18, 1
    7118:	03 c0       	rjmp	.+6      	; 0x7120 <fputc+0x16>
    711a:	8f ef       	ldi	r24, 0xFF	; 255
    711c:	9f ef       	ldi	r25, 0xFF	; 255
    711e:	2c c0       	rjmp	.+88     	; 0x7178 <fputc+0x6e>
    7120:	22 ff       	sbrs	r18, 2
    7122:	16 c0       	rjmp	.+44     	; 0x7150 <fputc+0x46>
    7124:	46 81       	ldd	r20, Z+6	; 0x06
    7126:	57 81       	ldd	r21, Z+7	; 0x07
    7128:	24 81       	ldd	r18, Z+4	; 0x04
    712a:	35 81       	ldd	r19, Z+5	; 0x05
    712c:	42 17       	cp	r20, r18
    712e:	53 07       	cpc	r21, r19
    7130:	44 f4       	brge	.+16     	; 0x7142 <fputc+0x38>
    7132:	a0 81       	ld	r26, Z
    7134:	b1 81       	ldd	r27, Z+1	; 0x01
    7136:	9d 01       	movw	r18, r26
    7138:	2f 5f       	subi	r18, 0xFF	; 255
    713a:	3f 4f       	sbci	r19, 0xFF	; 255
    713c:	31 83       	std	Z+1, r19	; 0x01
    713e:	20 83       	st	Z, r18
    7140:	8c 93       	st	X, r24
    7142:	26 81       	ldd	r18, Z+6	; 0x06
    7144:	37 81       	ldd	r19, Z+7	; 0x07
    7146:	2f 5f       	subi	r18, 0xFF	; 255
    7148:	3f 4f       	sbci	r19, 0xFF	; 255
    714a:	37 83       	std	Z+7, r19	; 0x07
    714c:	26 83       	std	Z+6, r18	; 0x06
    714e:	14 c0       	rjmp	.+40     	; 0x7178 <fputc+0x6e>
    7150:	8b 01       	movw	r16, r22
    7152:	ec 01       	movw	r28, r24
    7154:	fb 01       	movw	r30, r22
    7156:	00 84       	ldd	r0, Z+8	; 0x08
    7158:	f1 85       	ldd	r31, Z+9	; 0x09
    715a:	e0 2d       	mov	r30, r0
    715c:	19 95       	eicall
    715e:	89 2b       	or	r24, r25
    7160:	e1 f6       	brne	.-72     	; 0x711a <fputc+0x10>
    7162:	d8 01       	movw	r26, r16
    7164:	16 96       	adiw	r26, 0x06	; 6
    7166:	8d 91       	ld	r24, X+
    7168:	9c 91       	ld	r25, X
    716a:	17 97       	sbiw	r26, 0x07	; 7
    716c:	01 96       	adiw	r24, 0x01	; 1
    716e:	17 96       	adiw	r26, 0x07	; 7
    7170:	9c 93       	st	X, r25
    7172:	8e 93       	st	-X, r24
    7174:	16 97       	sbiw	r26, 0x06	; 6
    7176:	ce 01       	movw	r24, r28
    7178:	df 91       	pop	r29
    717a:	cf 91       	pop	r28
    717c:	1f 91       	pop	r17
    717e:	0f 91       	pop	r16
    7180:	08 95       	ret

00007182 <vsprintf>:
    7182:	0f 93       	push	r16
    7184:	1f 93       	push	r17
    7186:	cf 93       	push	r28
    7188:	df 93       	push	r29
    718a:	cd b7       	in	r28, 0x3d	; 61
    718c:	de b7       	in	r29, 0x3e	; 62
    718e:	2e 97       	sbiw	r28, 0x0e	; 14
    7190:	0f b6       	in	r0, 0x3f	; 63
    7192:	f8 94       	cli
    7194:	de bf       	out	0x3e, r29	; 62
    7196:	0f be       	out	0x3f, r0	; 63
    7198:	cd bf       	out	0x3d, r28	; 61
    719a:	8c 01       	movw	r16, r24
    719c:	86 e0       	ldi	r24, 0x06	; 6
    719e:	8c 83       	std	Y+4, r24	; 0x04
    71a0:	1a 83       	std	Y+2, r17	; 0x02
    71a2:	09 83       	std	Y+1, r16	; 0x01
    71a4:	8f ef       	ldi	r24, 0xFF	; 255
    71a6:	9f e7       	ldi	r25, 0x7F	; 127
    71a8:	9e 83       	std	Y+6, r25	; 0x06
    71aa:	8d 83       	std	Y+5, r24	; 0x05
    71ac:	ce 01       	movw	r24, r28
    71ae:	01 96       	adiw	r24, 0x01	; 1
    71b0:	f6 da       	rcall	.-2580   	; 0x679e <vfprintf>
    71b2:	ef 81       	ldd	r30, Y+7	; 0x07
    71b4:	f8 85       	ldd	r31, Y+8	; 0x08
    71b6:	e0 0f       	add	r30, r16
    71b8:	f1 1f       	adc	r31, r17
    71ba:	10 82       	st	Z, r1
    71bc:	2e 96       	adiw	r28, 0x0e	; 14
    71be:	0f b6       	in	r0, 0x3f	; 63
    71c0:	f8 94       	cli
    71c2:	de bf       	out	0x3e, r29	; 62
    71c4:	0f be       	out	0x3f, r0	; 63
    71c6:	cd bf       	out	0x3d, r28	; 61
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	1f 91       	pop	r17
    71ce:	0f 91       	pop	r16
    71d0:	08 95       	ret

000071d2 <__ultoa_invert>:
    71d2:	fa 01       	movw	r30, r20
    71d4:	aa 27       	eor	r26, r26
    71d6:	28 30       	cpi	r18, 0x08	; 8
    71d8:	51 f1       	breq	.+84     	; 0x722e <__ultoa_invert+0x5c>
    71da:	20 31       	cpi	r18, 0x10	; 16
    71dc:	81 f1       	breq	.+96     	; 0x723e <__ultoa_invert+0x6c>
    71de:	e8 94       	clt
    71e0:	6f 93       	push	r22
    71e2:	6e 7f       	andi	r22, 0xFE	; 254
    71e4:	6e 5f       	subi	r22, 0xFE	; 254
    71e6:	7f 4f       	sbci	r23, 0xFF	; 255
    71e8:	8f 4f       	sbci	r24, 0xFF	; 255
    71ea:	9f 4f       	sbci	r25, 0xFF	; 255
    71ec:	af 4f       	sbci	r26, 0xFF	; 255
    71ee:	b1 e0       	ldi	r27, 0x01	; 1
    71f0:	3e d0       	rcall	.+124    	; 0x726e <__ultoa_invert+0x9c>
    71f2:	b4 e0       	ldi	r27, 0x04	; 4
    71f4:	3c d0       	rcall	.+120    	; 0x726e <__ultoa_invert+0x9c>
    71f6:	67 0f       	add	r22, r23
    71f8:	78 1f       	adc	r23, r24
    71fa:	89 1f       	adc	r24, r25
    71fc:	9a 1f       	adc	r25, r26
    71fe:	a1 1d       	adc	r26, r1
    7200:	68 0f       	add	r22, r24
    7202:	79 1f       	adc	r23, r25
    7204:	8a 1f       	adc	r24, r26
    7206:	91 1d       	adc	r25, r1
    7208:	a1 1d       	adc	r26, r1
    720a:	6a 0f       	add	r22, r26
    720c:	71 1d       	adc	r23, r1
    720e:	81 1d       	adc	r24, r1
    7210:	91 1d       	adc	r25, r1
    7212:	a1 1d       	adc	r26, r1
    7214:	20 d0       	rcall	.+64     	; 0x7256 <__ultoa_invert+0x84>
    7216:	09 f4       	brne	.+2      	; 0x721a <__ultoa_invert+0x48>
    7218:	68 94       	set
    721a:	3f 91       	pop	r19
    721c:	2a e0       	ldi	r18, 0x0A	; 10
    721e:	26 9f       	mul	r18, r22
    7220:	11 24       	eor	r1, r1
    7222:	30 19       	sub	r19, r0
    7224:	30 5d       	subi	r19, 0xD0	; 208
    7226:	31 93       	st	Z+, r19
    7228:	de f6       	brtc	.-74     	; 0x71e0 <__ultoa_invert+0xe>
    722a:	cf 01       	movw	r24, r30
    722c:	08 95       	ret
    722e:	46 2f       	mov	r20, r22
    7230:	47 70       	andi	r20, 0x07	; 7
    7232:	40 5d       	subi	r20, 0xD0	; 208
    7234:	41 93       	st	Z+, r20
    7236:	b3 e0       	ldi	r27, 0x03	; 3
    7238:	0f d0       	rcall	.+30     	; 0x7258 <__ultoa_invert+0x86>
    723a:	c9 f7       	brne	.-14     	; 0x722e <__ultoa_invert+0x5c>
    723c:	f6 cf       	rjmp	.-20     	; 0x722a <__ultoa_invert+0x58>
    723e:	46 2f       	mov	r20, r22
    7240:	4f 70       	andi	r20, 0x0F	; 15
    7242:	40 5d       	subi	r20, 0xD0	; 208
    7244:	4a 33       	cpi	r20, 0x3A	; 58
    7246:	18 f0       	brcs	.+6      	; 0x724e <__ultoa_invert+0x7c>
    7248:	49 5d       	subi	r20, 0xD9	; 217
    724a:	31 fd       	sbrc	r19, 1
    724c:	40 52       	subi	r20, 0x20	; 32
    724e:	41 93       	st	Z+, r20
    7250:	02 d0       	rcall	.+4      	; 0x7256 <__ultoa_invert+0x84>
    7252:	a9 f7       	brne	.-22     	; 0x723e <__ultoa_invert+0x6c>
    7254:	ea cf       	rjmp	.-44     	; 0x722a <__ultoa_invert+0x58>
    7256:	b4 e0       	ldi	r27, 0x04	; 4
    7258:	a6 95       	lsr	r26
    725a:	97 95       	ror	r25
    725c:	87 95       	ror	r24
    725e:	77 95       	ror	r23
    7260:	67 95       	ror	r22
    7262:	ba 95       	dec	r27
    7264:	c9 f7       	brne	.-14     	; 0x7258 <__ultoa_invert+0x86>
    7266:	00 97       	sbiw	r24, 0x00	; 0
    7268:	61 05       	cpc	r22, r1
    726a:	71 05       	cpc	r23, r1
    726c:	08 95       	ret
    726e:	9b 01       	movw	r18, r22
    7270:	ac 01       	movw	r20, r24
    7272:	0a 2e       	mov	r0, r26
    7274:	06 94       	lsr	r0
    7276:	57 95       	ror	r21
    7278:	47 95       	ror	r20
    727a:	37 95       	ror	r19
    727c:	27 95       	ror	r18
    727e:	ba 95       	dec	r27
    7280:	c9 f7       	brne	.-14     	; 0x7274 <__ultoa_invert+0xa2>
    7282:	62 0f       	add	r22, r18
    7284:	73 1f       	adc	r23, r19
    7286:	84 1f       	adc	r24, r20
    7288:	95 1f       	adc	r25, r21
    728a:	a0 1d       	adc	r26, r0
    728c:	08 95       	ret

0000728e <_exit>:
    728e:	f8 94       	cli

00007290 <__stop_program>:
    7290:	ff cf       	rjmp	.-2      	; 0x7290 <__stop_program>
