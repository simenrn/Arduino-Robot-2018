
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058c  00800200  00006fd8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  0080078c  0080078c  000075f8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000075f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00007694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a743  00000000  00000000  00007e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021e4  00000000  00000000  00012557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005fc7  00000000  00000000  0001473b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000192c  00000000  00000000  0001a704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002eda  00000000  00000000  0001c030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad79  00000000  00000000  0001ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000870  00000000  00000000  00029c83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_3>
      10:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__vector_4>
      14:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b0 2e 	jmp	0x5d60	; 0x5d60 <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	cf ed       	ldi	r28, 0xDF	; 223
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	e8 ed       	ldi	r30, 0xD8	; 216
     25a:	ff e6       	ldi	r31, 0x6F	; 111
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	ac 38       	cpi	r26, 0x8C	; 140
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2c e1       	ldi	r18, 0x1C	; 28
     26e:	ac e8       	ldi	r26, 0x8C	; 140
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a2 35       	cpi	r26, 0x52	; 82
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <main>
     280:	0c 94 ea 37 	jmp	0x6fd4	; 0x6fd4 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <network_set_callback>
     294:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <__data_end+0x1>
     298:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <__data_end>
     29c:	ce e8       	ldi	r28, 0x8E	; 142
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 b7 18 	call	0x316e	; 0x316e <xQueueCreateMutex>
     2b0:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <connections+0x8a>
     2b4:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	ee e8       	ldi	r30, 0x8E	; 142
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <connections+0x8c>
     2ea:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	02 57       	subi	r16, 0x72	; 114
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 2c 2b 	call	0x5658	; 0x5658 <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	e2 57       	subi	r30, 0x72	; 114
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	65 d6       	rcall	.+3274   	; 0x104e <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	81 57       	subi	r24, 0x71	; 113
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	53 d6       	rcall	.+3238   	; 0x104e <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	87 56       	subi	r24, 0x67	; 103
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	e2 57       	subi	r30, 0x72	; 114
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     404:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     408:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
     40c:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     41c:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     420:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	ce e8       	ldi	r28, 0x8E	; 142
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	18 d7       	rcall	.+3632   	; 0x1262 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	15 d7       	rcall	.+3626   	; 0x1262 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     452:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     456:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     492:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     496:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
     49a:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     4be:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     4c2:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 97 07 	lds	r18, 0x0797	; 0x800797 <connections+0x9>
     4d2:	30 91 98 07 	lds	r19, 0x0798	; 0x800798 <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 a1 07 	lds	r18, 0x07A1	; 0x8007a1 <connections+0x13>
     4ea:	30 91 a2 07 	lds	r19, 0x07A2	; 0x8007a2 <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	8f e8       	ldi	r24, 0x8F	; 143
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	8f e8       	ldi	r24, 0x8F	; 143
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	89 e9       	ldi	r24, 0x99	; 153
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     558:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     55c:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     56c:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     570:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <connections+0x20>
     5c2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     61c:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     620:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     634:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     638:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	ee e8       	ldi	r30, 0x8E	; 142
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     66a:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     66e:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	ee e8       	ldi	r30, 0x8E	; 142
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	89 e9       	ldi	r24, 0x99	; 153
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8f e8       	ldi	r24, 0x8F	; 143
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	ee e8       	ldi	r30, 0x8E	; 142
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	89 e9       	ldi	r24, 0x99	; 153
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	8f e8       	ldi	r24, 0x8F	; 143
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <connections+0x89>
     7b2:	90 91 18 08 	lds	r25, 0x0818	; 0x800818 <connections+0x8a>
     7b6:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <connections+0x23>
     7ee:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 b2 07 	sts	0x07B2, r25	; 0x8007b2 <connections+0x24>
     80c:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	0e e8       	ldi	r16, 0x8E	; 142
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	8d 54       	subi	r24, 0x4D	; 77
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	83 eb       	ldi	r24, 0xB3	; 179
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 8e 07 	lds	r25, 0x078E	; 0x80078e <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fe e8       	ldi	r31, 0x8E	; 142
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 8c 07 	lds	r30, 0x078C	; 0x80078c <__data_end>
     8be:	f0 91 8d 07 	lds	r31, 0x078D	; 0x80078d <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 a2 2c 	call	0x5944	; 0x5944 <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 a2 2c 	call	0x5944	; 0x5944 <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 89 24 	call	0x4912	; 0x4912 <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <crc_ibutton_update>:
  return crc;
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
     f04:	86 27       	eor	r24, r22
     f06:	98 e0       	ldi	r25, 0x08	; 8
  for (i = 0; i < 8; i++) {
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
     f08:	2c e8       	ldi	r18, 0x8C	; 140
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <crc_ibutton_update+0x10>
     f0e:	86 95       	lsr	r24
     f10:	82 27       	eor	r24, r18
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <crc_ibutton_update+0x12>
    else crc >>= 1;
     f14:	86 95       	lsr	r24
     f16:	91 50       	subi	r25, 0x01	; 1
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
  for (i = 0; i < 8; i++) {
     f18:	c1 f7       	brne	.-16     	; 0xf0a <crc_ibutton_update+0x6>
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
    else crc >>= 1;
  }
  return crc;
     f1a:	08 95       	ret

00000f1c <calculate_crc>:

#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f24:	66 23       	and	r22, r22
     f26:	59 f0       	breq	.+22     	; 0xf3e <calculate_crc+0x22>
     f28:	8c 01       	movw	r16, r24
     f2a:	ec 01       	movw	r28, r24
     f2c:	06 0f       	add	r16, r22
     f2e:	11 1d       	adc	r17, r1
     f30:	80 e0       	ldi	r24, 0x00	; 0
    crc = crc_ibutton_update(crc, data[i]);
     f32:	69 91       	ld	r22, Y+
     f34:	e7 df       	rcall	.-50     	; 0xf04 <crc_ibutton_update>
char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f36:	0c 17       	cp	r16, r28
     f38:	1d 07       	cpc	r17, r29
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <calculate_crc+0x16>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <calculate_crc+0x24>
#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
  int i;
  for(i=0;i<len;i++) {
    crc = crc_ibutton_update(crc, data[i]);
  }
  return crc;
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     f4a:	80 b3       	in	r24, 0x10	; 16
     f4c:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f4e:	ec e7       	ldi	r30, 0x7C	; 124
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 6c       	ori	r24, 0xC0	; 192
     f56:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     f58:	ea e7       	ldi	r30, 0x7A	; 122
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     f62:	80 81       	ld	r24, Z
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	80 83       	st	Z, r24
     f68:	08 95       	ret

00000f6a <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     f6a:	ec e7       	ldi	r30, 0x7C	; 124
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f70:	90 81       	ld	r25, Z
     f72:	90 6c       	ori	r25, 0xC0	; 192
     f74:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     f76:	ea e7       	ldi	r30, 0x7A	; 122
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	90 64       	ori	r25, 0x40	; 64
     f7e:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
     f80:	90 81       	ld	r25, Z
     f82:	96 fd       	sbrc	r25, 6
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
     f86:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
     f8e:	e8 2f       	mov	r30, r24
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	26 95       	lsr	r18
     f94:	26 95       	lsr	r18
     f96:	30 e4       	ldi	r19, 0x40	; 64
     f98:	93 9f       	mul	r25, r19
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	82 2b       	or	r24, r18
     fa0:	fe 2f       	mov	r31, r30
     fa2:	ee 27       	eor	r30, r30
     fa4:	e0 50       	subi	r30, 0x00	; 0
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e8 0f       	add	r30, r24
     faa:	f1 1d       	adc	r31, r1
}
     fac:	80 81       	ld	r24, Z
     fae:	08 95       	ret

00000fb0 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
     fbe:	c8 80       	ld	r12, Y
     fc0:	d9 80       	ldd	r13, Y+1	; 0x01
     fc2:	ea 80       	ldd	r14, Y+2	; 0x02
     fc4:	fb 80       	ldd	r15, Y+3	; 0x03
     fc6:	2b ed       	ldi	r18, 0xDB	; 219
     fc8:	3f e0       	ldi	r19, 0x0F	; 15
     fca:	49 e4       	ldi	r20, 0x49	; 73
     fcc:	50 e4       	ldi	r21, 0x40	; 64
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	6c f4       	brge	.+26     	; 0xff4 <vFunc_Inf2pi+0x44>
     fda:	2b ed       	ldi	r18, 0xDB	; 219
     fdc:	3f e0       	ldi	r19, 0x0F	; 15
     fde:	49 ec       	ldi	r20, 0xC9	; 201
     fe0:	50 e4       	ldi	r21, 0x40	; 64
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
     fea:	68 83       	st	Y, r22
     fec:	79 83       	std	Y+1, r23	; 0x01
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
     ff4:	2b ed       	ldi	r18, 0xDB	; 219
     ff6:	3f e0       	ldi	r19, 0x0F	; 15
     ff8:	49 e4       	ldi	r20, 0x49	; 73
     ffa:	50 ec       	ldi	r21, 0xC0	; 192
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <__cmpsf2>
    1004:	88 23       	and	r24, r24
    1006:	64 f4       	brge	.+24     	; 0x1020 <vFunc_Inf2pi+0x70>
    1008:	2b ed       	ldi	r18, 0xDB	; 219
    100a:	3f e0       	ldi	r19, 0x0F	; 15
    100c:	49 ec       	ldi	r20, 0xC9	; 201
    100e:	50 e4       	ldi	r21, 0x40	; 64
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    1020:	88 81       	ld	r24, Y
    1022:	99 81       	ldd	r25, Y+1	; 0x01
    1024:	aa 81       	ldd	r26, Y+2	; 0x02
    1026:	bb 81       	ldd	r27, Y+3	; 0x03
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	2b ed       	ldi	r18, 0xDB	; 219
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 e4       	ldi	r20, 0x49	; 73
    1034:	50 e4       	ldi	r21, 0x40	; 64
    1036:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <vFunc_Inf2pi+0x90>
    103e:	bf cf       	rjmp	.-130    	; 0xfbe <vFunc_Inf2pi+0xe>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	08 95       	ret

0000104e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    105c:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1060:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <pxEnd>
    1064:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <pxEnd+0x1>
    1068:	89 2b       	or	r24, r25
    106a:	41 f5       	brne	.+80     	; 0x10bc <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    106c:	e3 e2       	ldi	r30, 0x23	; 35
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	a7 e2       	ldi	r26, 0x27	; 39
    1072:	b8 e0       	ldi	r27, 0x08	; 8
    1074:	b1 83       	std	Z+1, r27	; 0x01
    1076:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    107c:	e3 e2       	ldi	r30, 0x23	; 35
    107e:	fa e1       	ldi	r31, 0x1A	; 26
    1080:	f0 93 22 08 	sts	0x0822, r31	; 0x800822 <pxEnd+0x1>
    1084:	e0 93 21 08 	sts	0x0821, r30	; 0x800821 <pxEnd>
	pxEnd->xBlockSize = 0;
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1090:	8c ef       	ldi	r24, 0xFC	; 252
    1092:	91 e1       	ldi	r25, 0x11	; 17
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    109c:	ed 93       	st	X+, r30
    109e:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a0:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xMinimumEverFreeBytesRemaining+0x1>
    10a4:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a8:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <xFreeBytesRemaining+0x1>
    10ac:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e8       	ldi	r25, 0x80	; 128
    10b4:	90 93 1c 08 	sts	0x081C, r25	; 0x80081c <xBlockAllocatedBit+0x1>
    10b8:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10bc:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xBlockAllocatedBit>
    10c0:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <xBlockAllocatedBit+0x1>
    10c4:	8c 23       	and	r24, r28
    10c6:	9d 23       	and	r25, r29
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f0       	breq	.+2      	; 0x10ce <pvPortMalloc+0x80>
    10cc:	b2 c0       	rjmp	.+356    	; 0x1232 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <pvPortMalloc+0x86>
    10d2:	b2 c0       	rjmp	.+356    	; 0x1238 <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    10d4:	ae 01       	movw	r20, r28
    10d6:	4c 5f       	subi	r20, 0xFC	; 252
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10da:	09 f4       	brne	.+2      	; 0x10de <pvPortMalloc+0x90>
    10dc:	b0 c0       	rjmp	.+352    	; 0x123e <pvPortMalloc+0x1f0>
    10de:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <xFreeBytesRemaining>
    10e2:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <xFreeBytesRemaining+0x1>
    10e6:	84 17       	cp	r24, r20
    10e8:	95 07       	cpc	r25, r21
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <pvPortMalloc+0xa0>
    10ec:	ab c0       	rjmp	.+342    	; 0x1244 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    10ee:	e0 91 23 08 	lds	r30, 0x0823	; 0x800823 <xStart>
    10f2:	f0 91 24 08 	lds	r31, 0x0824	; 0x800824 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    10f6:	a3 e2       	ldi	r26, 0x23	; 35
    10f8:	b8 e0       	ldi	r27, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <pvPortMalloc+0xb2>
    10fc:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    10fe:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1100:	22 81       	ldd	r18, Z+2	; 0x02
    1102:	33 81       	ldd	r19, Z+3	; 0x03
    1104:	24 17       	cp	r18, r20
    1106:	35 07       	cpc	r19, r21
    1108:	28 f4       	brcc	.+10     	; 0x1114 <pvPortMalloc+0xc6>
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	a1 f7       	brne	.-24     	; 0x10fc <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1114:	60 91 21 08 	lds	r22, 0x0821	; 0x800821 <pxEnd>
    1118:	70 91 22 08 	lds	r23, 0x0822	; 0x800822 <pxEnd+0x1>
    111c:	e6 17       	cp	r30, r22
    111e:	f7 07       	cpc	r31, r23
    1120:	09 f4       	brne	.+2      	; 0x1124 <pvPortMalloc+0xd6>
    1122:	93 c0       	rjmp	.+294    	; 0x124a <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1124:	cd 91       	ld	r28, X+
    1126:	dc 91       	ld	r29, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	7e 01       	movw	r14, r28
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	e8 0e       	add	r14, r24
    1130:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8d 93       	st	X+, r24
    1138:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	84 1b       	sub	r24, r20
    1140:	95 0b       	sbc	r25, r21
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	91 05       	cpc	r25, r1
    1146:	08 f4       	brcc	.+2      	; 0x114a <pvPortMalloc+0xfc>
    1148:	52 c0       	rjmp	.+164    	; 0x11ee <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    114a:	9f 01       	movw	r18, r30
    114c:	24 0f       	add	r18, r20
    114e:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1150:	d9 01       	movw	r26, r18
    1152:	13 96       	adiw	r26, 0x03	; 3
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    115a:	53 83       	std	Z+3, r21	; 0x03
    115c:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    115e:	a3 e2       	ldi	r26, 0x23	; 35
    1160:	b8 e0       	ldi	r27, 0x08	; 8
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <pvPortMalloc+0x118>
    1164:	dc 01       	movw	r26, r24
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	c8 f3       	brcs	.-14     	; 0x1164 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	4d 91       	ld	r20, X+
    1176:	5c 91       	ld	r21, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	8d 01       	movw	r16, r26
    117c:	04 0f       	add	r16, r20
    117e:	15 1f       	adc	r17, r21
    1180:	20 17       	cp	r18, r16
    1182:	31 07       	cpc	r19, r17
    1184:	51 f4       	brne	.+20     	; 0x119a <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1186:	e9 01       	movw	r28, r18
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	3b 81       	ldd	r19, Y+3	; 0x03
    118c:	42 0f       	add	r20, r18
    118e:	53 1f       	adc	r21, r19
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	5c 93       	st	X, r21
    1194:	4e 93       	st	-X, r20
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    119a:	e9 01       	movw	r28, r18
    119c:	4a 81       	ldd	r20, Y+2	; 0x02
    119e:	5b 81       	ldd	r21, Y+3	; 0x03
    11a0:	89 01       	movw	r16, r18
    11a2:	04 0f       	add	r16, r20
    11a4:	15 1f       	adc	r17, r21
    11a6:	80 17       	cp	r24, r16
    11a8:	91 07       	cpc	r25, r17
    11aa:	c9 f4       	brne	.+50     	; 0x11de <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11ac:	60 17       	cp	r22, r16
    11ae:	71 07       	cpc	r23, r17
    11b0:	91 f0       	breq	.+36     	; 0x11d6 <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11b2:	e8 01       	movw	r28, r16
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	48 0f       	add	r20, r24
    11ba:	59 1f       	adc	r21, r25
    11bc:	e9 01       	movw	r28, r18
    11be:	5b 83       	std	Y+3, r21	; 0x03
    11c0:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	ec 01       	movw	r28, r24
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	e9 01       	movw	r28, r18
    11d0:	99 83       	std	Y+1, r25	; 0x01
    11d2:	88 83       	st	Y, r24
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11d6:	e9 01       	movw	r28, r18
    11d8:	79 83       	std	Y+1, r23	; 0x01
    11da:	68 83       	st	Y, r22
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11de:	e9 01       	movw	r28, r18
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11e4:	a2 17       	cp	r26, r18
    11e6:	b3 07       	cpc	r27, r19
    11e8:	11 f0       	breq	.+4      	; 0x11ee <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11ea:	2d 93       	st	X+, r18
    11ec:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    11ee:	22 81       	ldd	r18, Z+2	; 0x02
    11f0:	33 81       	ldd	r19, Z+3	; 0x03
    11f2:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <xFreeBytesRemaining>
    11f6:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <xFreeBytesRemaining+0x1>
    11fa:	82 1b       	sub	r24, r18
    11fc:	93 0b       	sbc	r25, r19
    11fe:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <xFreeBytesRemaining+0x1>
    1202:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1206:	40 91 1d 08 	lds	r20, 0x081D	; 0x80081d <xMinimumEverFreeBytesRemaining>
    120a:	50 91 1e 08 	lds	r21, 0x081E	; 0x80081e <xMinimumEverFreeBytesRemaining+0x1>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	20 f4       	brcc	.+8      	; 0x121c <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1214:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xMinimumEverFreeBytesRemaining+0x1>
    1218:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    121c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <xBlockAllocatedBit>
    1220:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <xBlockAllocatedBit+0x1>
    1224:	28 2b       	or	r18, r24
    1226:	39 2b       	or	r19, r25
    1228:	33 83       	std	Z+3, r19	; 0x03
    122a:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	0e c0       	rjmp	.+28     	; 0x124e <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    1232:	e1 2c       	mov	r14, r1
    1234:	f1 2c       	mov	r15, r1
    1236:	0b c0       	rjmp	.+22     	; 0x124e <pvPortMalloc+0x200>
    1238:	e1 2c       	mov	r14, r1
    123a:	f1 2c       	mov	r15, r1
    123c:	08 c0       	rjmp	.+16     	; 0x124e <pvPortMalloc+0x200>
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <pvPortMalloc+0x200>
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <pvPortMalloc+0x200>
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    124e:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1252:	c7 01       	movw	r24, r14
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <vPortFree+0xa>
    126a:	68 c0       	rjmp	.+208    	; 0x133c <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    126c:	fc 01       	movw	r30, r24
    126e:	34 97       	sbiw	r30, 0x04	; 4
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	33 81       	ldd	r19, Z+3	; 0x03
    1274:	40 91 1b 08 	lds	r20, 0x081B	; 0x80081b <xBlockAllocatedBit>
    1278:	50 91 1c 08 	lds	r21, 0x081C	; 0x80081c <xBlockAllocatedBit+0x1>
    127c:	b9 01       	movw	r22, r18
    127e:	64 23       	and	r22, r20
    1280:	75 23       	and	r23, r21
    1282:	67 2b       	or	r22, r23
    1284:	09 f4       	brne	.+2      	; 0x1288 <vPortFree+0x26>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	67 2b       	or	r22, r23
    128e:	09 f0       	breq	.+2      	; 0x1292 <vPortFree+0x30>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1292:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1294:	40 95       	com	r20
    1296:	50 95       	com	r21
    1298:	24 23       	and	r18, r20
    129a:	35 23       	and	r19, r21
    129c:	33 83       	std	Z+3, r19	; 0x03
    129e:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12a0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12a4:	4a 81       	ldd	r20, Y+2	; 0x02
    12a6:	5b 81       	ldd	r21, Y+3	; 0x03
    12a8:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <xFreeBytesRemaining>
    12ac:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <xFreeBytesRemaining+0x1>
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <xFreeBytesRemaining+0x1>
    12b8:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12bc:	e3 e2       	ldi	r30, 0x23	; 35
    12be:	f8 e0       	ldi	r31, 0x08	; 8
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <vPortFree+0x62>
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	8c 17       	cp	r24, r28
    12ca:	9d 07       	cpc	r25, r29
    12cc:	d0 f3       	brcs	.-12     	; 0x12c2 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    12ce:	22 81       	ldd	r18, Z+2	; 0x02
    12d0:	33 81       	ldd	r19, Z+3	; 0x03
    12d2:	bf 01       	movw	r22, r30
    12d4:	62 0f       	add	r22, r18
    12d6:	73 1f       	adc	r23, r19
    12d8:	c6 17       	cp	r28, r22
    12da:	d7 07       	cpc	r29, r23
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    12de:	24 0f       	add	r18, r20
    12e0:	35 1f       	adc	r19, r21
    12e2:	33 83       	std	Z+3, r19	; 0x03
    12e4:	22 83       	std	Z+2, r18	; 0x02
    12e6:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	de 01       	movw	r26, r28
    12ee:	a2 0f       	add	r26, r18
    12f0:	b3 1f       	adc	r27, r19
    12f2:	8a 17       	cp	r24, r26
    12f4:	9b 07       	cpc	r25, r27
    12f6:	c9 f4       	brne	.+50     	; 0x132a <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    12f8:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <pxEnd>
    12fc:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <pxEnd+0x1>
    1300:	a8 17       	cp	r26, r24
    1302:	b9 07       	cpc	r27, r25
    1304:	79 f0       	breq	.+30     	; 0x1324 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	28 0f       	add	r18, r24
    1310:	39 1f       	adc	r19, r25
    1312:	3b 83       	std	Y+3, r19	; 0x03
    1314:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	99 83       	std	Y+1, r25	; 0x01
    1320:	88 83       	st	Y, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1324:	b9 83       	std	Y+1, r27	; 0x01
    1326:	a8 83       	st	Y, r26
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    132e:	ec 17       	cp	r30, r28
    1330:	fd 07       	cpc	r31, r29
    1332:	11 f0       	breq	.+4      	; 0x1338 <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1334:	d1 83       	std	Z+1, r29	; 0x01
    1336:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    1338:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	e4 2e       	mov	r14, r20
    1352:	28 98       	cbi	0x05, 0	; 5
    1354:	86 2f       	mov	r24, r22
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    135c:	ee 20       	and	r14, r14
    135e:	b1 f0       	breq	.+44     	; 0x138c <sIMU_readRegisterRegion+0x4a>
    1360:	0f ef       	ldi	r16, 0xFF	; 255
    1362:	0e 0d       	add	r16, r14
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	0c 0f       	add	r16, r28
    136c:	1d 1f       	adc	r17, r29
    136e:	f1 2c       	mov	r15, r1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <sIMU_readRegisterRegion+0x3a>
    137a:	f3 94       	inc	r15
    137c:	89 93       	st	Y+, r24
    137e:	0c 17       	cp	r16, r28
    1380:	1d 07       	cpc	r17, r29
    1382:	b1 f7       	brne	.-20     	; 0x1370 <sIMU_readRegisterRegion+0x2e>
    1384:	fe 10       	cpse	r15, r14
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <sIMU_readRegisterRegion+0x4e>
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    138c:	85 e0       	ldi	r24, 0x05	; 5
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	28 9a       	sbi	0x05, 0	; 5
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <sIMU_readRegister>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	28 98       	cbi	0x05, 0	; 5
    13aa:	86 2f       	mov	r24, r22
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    13b8:	28 9a       	sbi	0x05, 0	; 5
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <sIMU_readRegister+0x20>
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <sIMU_readRegister+0x22>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	88 83       	st	Y, r24
    13c6:	89 2f       	mov	r24, r25
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <sIMU_Init>:
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	1f 92       	push	r1
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	ef e7       	ldi	r30, 0x7F	; 127
    13dc:	fb e1       	ldi	r31, 0x1B	; 27
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
    13e2:	24 ef       	ldi	r18, 0xF4	; 244
    13e4:	31 e0       	ldi	r19, 0x01	; 1
    13e6:	32 83       	std	Z+2, r19	; 0x02
    13e8:	21 83       	std	Z+1, r18	; 0x01
    13ea:	22 e8       	ldi	r18, 0x82	; 130
    13ec:	36 e0       	ldi	r19, 0x06	; 6
    13ee:	34 83       	std	Z+4, r19	; 0x04
    13f0:	23 83       	std	Z+3, r18	; 0x03
    13f2:	20 e9       	ldi	r18, 0x90	; 144
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	36 83       	std	Z+6, r19	; 0x06
    13f8:	25 83       	std	Z+5, r18	; 0x05
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	10 86       	std	Z+8, r1	; 0x08
    13fe:	81 87       	std	Z+9, r24	; 0x09
    1400:	82 87       	std	Z+10, r24	; 0x0a
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	34 87       	std	Z+12, r19	; 0x0c
    1408:	23 87       	std	Z+11, r18	; 0x0b
    140a:	2d e0       	ldi	r18, 0x0D	; 13
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	36 87       	std	Z+14, r19	; 0x0e
    1410:	25 87       	std	Z+13, r18	; 0x0d
    1412:	22 e3       	ldi	r18, 0x32	; 50
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	30 8b       	std	Z+16, r19	; 0x10
    1418:	27 87       	std	Z+15, r18	; 0x0f
    141a:	11 8a       	std	Z+17, r1	; 0x11
    141c:	12 8a       	std	Z+18, r1	; 0x12
    141e:	83 8b       	std	Z+19, r24	; 0x13
    1420:	84 8b       	std	Z+20, r24	; 0x14
    1422:	88 eb       	ldi	r24, 0xB8	; 184
    1424:	9b e0       	ldi	r25, 0x0B	; 11
    1426:	96 8b       	std	Z+22, r25	; 0x16
    1428:	85 8b       	std	Z+21, r24	; 0x15
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 8f       	std	Z+24, r25	; 0x18
    1430:	87 8b       	std	Z+23, r24	; 0x17
    1432:	11 8e       	std	Z+25, r1	; 0x19
    1434:	10 92 9a 1b 	sts	0x1B9A, r1	; 0x801b9a <allOnesCounter+0x1>
    1438:	10 92 99 1b 	sts	0x1B99, r1	; 0x801b99 <allOnesCounter>
    143c:	10 92 9c 1b 	sts	0x1B9C, r1	; 0x801b9c <nonSuccessCounter+0x1>
    1440:	10 92 9b 1b 	sts	0x1B9B, r1	; 0x801b9b <nonSuccessCounter>
    1444:	0e 94 bd 21 	call	0x437a	; 0x437a <vSPI_MasterInit>
    1448:	20 9a       	sbi	0x04, 0	; 4
    144a:	28 9a       	sbi	0x05, 0	; 5
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	20 e1       	ldi	r18, 0x10	; 16
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	31 09       	sbc	r19, r1
    145c:	d1 f7       	brne	.-12     	; 0x1452 <sIMU_Init+0x84>
    145e:	6f e0       	ldi	r22, 0x0F	; 15
    1460:	ce 01       	movw	r24, r28
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	9e df       	rcall	.-196    	; 0x13a2 <sIMU_readRegister>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	89 36       	cpi	r24, 0x69	; 105
    146a:	c9 f7       	brne	.-14     	; 0x145e <sIMU_Init+0x90>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <sIMU_readRegisterInt16>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	1f 92       	push	r1
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8c 01       	movw	r16, r24
    148a:	42 e0       	ldi	r20, 0x02	; 2
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	58 df       	rcall	.-336    	; 0x1342 <sIMU_readRegisterRegion>
    1492:	2a 81       	ldd	r18, Y+2	; 0x02
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	32 2f       	mov	r19, r18
    1498:	22 27       	eor	r18, r18
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	29 2b       	or	r18, r25
    149e:	f8 01       	movw	r30, r16
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <sIMU_writeRegister>:
    14b2:	cf 93       	push	r28
    14b4:	c6 2f       	mov	r28, r22
    14b6:	28 98       	cbi	0x05, 0	; 5
    14b8:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 cb 21 	call	0x4396	; 0x4396 <ui8SPI_MasterTransmit>
    14c2:	28 9a       	sbi	0x05, 0	; 5
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <sIMU_begin>:
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	1f 92       	push	r1
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	79 df       	rcall	.-270    	; 0x13ce <sIMU_Init>
    14dc:	18 2f       	mov	r17, r24
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	80 91 88 1b 	lds	r24, 0x1B88	; 0x801b88 <settings+0x9>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <sIMU_begin+0x20>
    14e8:	83 c0       	rjmp	.+262    	; 0x15f0 <sIMU_begin+0x126>
    14ea:	80 91 8e 1b 	lds	r24, 0x1B8E	; 0x801b8e <settings+0xf>
    14ee:	90 91 8f 1b 	lds	r25, 0x1B8F	; 0x801b8f <settings+0x10>
    14f2:	84 36       	cpi	r24, 0x64	; 100
    14f4:	91 05       	cpc	r25, r1
    14f6:	41 f0       	breq	.+16     	; 0x1508 <sIMU_begin+0x3e>
    14f8:	88 3c       	cpi	r24, 0xC8	; 200
    14fa:	91 05       	cpc	r25, r1
    14fc:	41 f0       	breq	.+16     	; 0x150e <sIMU_begin+0x44>
    14fe:	c2 97       	sbiw	r24, 0x32	; 50
    1500:	41 f4       	brne	.+16     	; 0x1512 <sIMU_begin+0x48>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <sIMU_begin+0x48>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <sIMU_begin+0x48>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	80 91 8a 1b 	lds	r24, 0x1B8A	; 0x801b8a <settings+0xb>
    1516:	90 91 8b 1b 	lds	r25, 0x1B8B	; 0x801b8b <settings+0xc>
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	31 f0       	breq	.+12     	; 0x152c <sIMU_begin+0x62>
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	91 05       	cpc	r25, r1
    1524:	39 f0       	breq	.+14     	; 0x1534 <sIMU_begin+0x6a>
    1526:	02 97       	sbiw	r24, 0x02	; 2
    1528:	49 f4       	brne	.+18     	; 0x153c <sIMU_begin+0x72>
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <sIMU_begin+0x78>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	88 60       	ori	r24, 0x08	; 8
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <sIMU_begin+0x78>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8c 60       	ori	r24, 0x0C	; 12
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <sIMU_begin+0x78>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	80 91 8c 1b 	lds	r24, 0x1B8C	; 0x801b8c <settings+0xd>
    1546:	90 91 8d 1b 	lds	r25, 0x1B8D	; 0x801b8d <settings+0xe>
    154a:	80 3a       	cpi	r24, 0xA0	; 160
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	92 07       	cpc	r25, r18
    1550:	c1 f1       	breq	.+112    	; 0x15c2 <sIMU_begin+0xf8>
    1552:	70 f4       	brcc	.+28     	; 0x1570 <sIMU_begin+0xa6>
    1554:	8a 31       	cpi	r24, 0x1A	; 26
    1556:	91 05       	cpc	r25, r1
    1558:	21 f1       	breq	.+72     	; 0x15a2 <sIMU_begin+0xd8>
    155a:	18 f4       	brcc	.+6      	; 0x1562 <sIMU_begin+0x98>
    155c:	0d 97       	sbiw	r24, 0x0d	; 13
    155e:	e9 f0       	breq	.+58     	; 0x159a <sIMU_begin+0xd0>
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <sIMU_begin+0xe8>
    1562:	84 33       	cpi	r24, 0x34	; 52
    1564:	91 05       	cpc	r25, r1
    1566:	09 f1       	breq	.+66     	; 0x15aa <sIMU_begin+0xe0>
    1568:	80 3d       	cpi	r24, 0xD0	; 208
    156a:	91 05       	cpc	r25, r1
    156c:	31 f1       	breq	.+76     	; 0x15ba <sIMU_begin+0xf0>
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <sIMU_begin+0xe8>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	2d e0       	ldi	r18, 0x0D	; 13
    1574:	92 07       	cpc	r25, r18
    1576:	89 f1       	breq	.+98     	; 0x15da <sIMU_begin+0x110>
    1578:	40 f4       	brcc	.+16     	; 0x158a <sIMU_begin+0xc0>
    157a:	81 34       	cpi	r24, 0x41	; 65
    157c:	23 e0       	ldi	r18, 0x03	; 3
    157e:	92 07       	cpc	r25, r18
    1580:	21 f1       	breq	.+72     	; 0x15ca <sIMU_begin+0x100>
    1582:	8c 37       	cpi	r24, 0x7C	; 124
    1584:	96 40       	sbci	r25, 0x06	; 6
    1586:	29 f1       	breq	.+74     	; 0x15d2 <sIMU_begin+0x108>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <sIMU_begin+0xe8>
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	2a e1       	ldi	r18, 0x1A	; 26
    158e:	92 07       	cpc	r25, r18
    1590:	41 f1       	breq	.+80     	; 0x15e2 <sIMU_begin+0x118>
    1592:	82 31       	cpi	r24, 0x12	; 18
    1594:	94 43       	sbci	r25, 0x34	; 52
    1596:	49 f1       	breq	.+82     	; 0x15ea <sIMU_begin+0x120>
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <sIMU_begin+0xe8>
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <sIMU_begin+0x126>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <sIMU_begin+0x126>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	80 63       	ori	r24, 0x30	; 48
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <sIMU_begin+0x126>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <sIMU_begin+0x126>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 65       	ori	r24, 0x50	; 80
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <sIMU_begin+0x126>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 66       	ori	r24, 0x60	; 96
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <sIMU_begin+0x126>
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 67       	ori	r24, 0x70	; 112
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <sIMU_begin+0x126>
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <sIMU_begin+0x126>
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	80 69       	ori	r24, 0x90	; 144
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <sIMU_begin+0x126>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 6a       	ori	r24, 0xA0	; 160
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <sIMU_begin+0x126>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 6b       	ori	r24, 0xB0	; 176
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	5e df       	rcall	.-324    	; 0x14b2 <sIMU_writeRegister>
    15f6:	63 e1       	ldi	r22, 0x13	; 19
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	d2 de       	rcall	.-604    	; 0x13a2 <sIMU_readRegister>
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	90 91 89 1b 	lds	r25, 0x1B89	; 0x801b89 <settings+0xa>
    1608:	91 30       	cpi	r25, 0x01	; 1
    160a:	11 f4       	brne	.+4      	; 0x1610 <sIMU_begin+0x146>
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	83 e1       	ldi	r24, 0x13	; 19
    1614:	4e df       	rcall	.-356    	; 0x14b2 <sIMU_writeRegister>
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	80 91 7f 1b 	lds	r24, 0x1B7F	; 0x801b7f <settings>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <sIMU_begin+0x158>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <sIMU_begin+0x20e>
    1622:	80 91 80 1b 	lds	r24, 0x1B80	; 0x801b80 <settings+0x1>
    1626:	90 91 81 1b 	lds	r25, 0x1B81	; 0x801b81 <settings+0x2>
    162a:	85 3f       	cpi	r24, 0xF5	; 245
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f0       	breq	.+48     	; 0x1660 <sIMU_begin+0x196>
    1630:	20 f4       	brcc	.+8      	; 0x163a <sIMU_begin+0x170>
    1632:	8d 37       	cpi	r24, 0x7D	; 125
    1634:	91 05       	cpc	r25, r1
    1636:	49 f0       	breq	.+18     	; 0x164a <sIMU_begin+0x180>
    1638:	11 c0       	rjmp	.+34     	; 0x165c <sIMU_begin+0x192>
    163a:	84 3f       	cpi	r24, 0xF4	; 244
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	92 07       	cpc	r25, r18
    1640:	39 f0       	breq	.+14     	; 0x1650 <sIMU_begin+0x186>
    1642:	88 3e       	cpi	r24, 0xE8	; 232
    1644:	93 40       	sbci	r25, 0x03	; 3
    1646:	39 f0       	breq	.+14     	; 0x1656 <sIMU_begin+0x18c>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <sIMU_begin+0x192>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <sIMU_begin+0x196>
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <sIMU_begin+0x196>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <sIMU_begin+0x196>
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	80 91 82 1b 	lds	r24, 0x1B82	; 0x801b82 <settings+0x3>
    1664:	90 91 83 1b 	lds	r25, 0x1B83	; 0x801b83 <settings+0x4>
    1668:	80 3d       	cpi	r24, 0xD0	; 208
    166a:	91 05       	cpc	r25, r1
    166c:	31 f1       	breq	.+76     	; 0x16ba <sIMU_begin+0x1f0>
    166e:	48 f4       	brcc	.+18     	; 0x1682 <sIMU_begin+0x1b8>
    1670:	8a 31       	cpi	r24, 0x1A	; 26
    1672:	91 05       	cpc	r25, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <sIMU_begin+0x1d8>
    1676:	84 33       	cpi	r24, 0x34	; 52
    1678:	91 05       	cpc	r25, r1
    167a:	b9 f0       	breq	.+46     	; 0x16aa <sIMU_begin+0x1e0>
    167c:	0d 97       	sbiw	r24, 0x0d	; 13
    167e:	c9 f4       	brne	.+50     	; 0x16b2 <sIMU_begin+0x1e8>
    1680:	0c c0       	rjmp	.+24     	; 0x169a <sIMU_begin+0x1d0>
    1682:	81 34       	cpi	r24, 0x41	; 65
    1684:	23 e0       	ldi	r18, 0x03	; 3
    1686:	92 07       	cpc	r25, r18
    1688:	01 f1       	breq	.+64     	; 0x16ca <sIMU_begin+0x200>
    168a:	8c 37       	cpi	r24, 0x7C	; 124
    168c:	26 e0       	ldi	r18, 0x06	; 6
    168e:	92 07       	cpc	r25, r18
    1690:	01 f1       	breq	.+64     	; 0x16d2 <sIMU_begin+0x208>
    1692:	80 3a       	cpi	r24, 0xA0	; 160
    1694:	91 40       	sbci	r25, 0x01	; 1
    1696:	69 f4       	brne	.+26     	; 0x16b2 <sIMU_begin+0x1e8>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <sIMU_begin+0x1f8>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	80 61       	ori	r24, 0x10	; 16
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <sIMU_begin+0x20e>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <sIMU_begin+0x20e>
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	80 63       	ori	r24, 0x30	; 48
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <sIMU_begin+0x20e>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 64       	ori	r24, 0x40	; 64
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <sIMU_begin+0x20e>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 65       	ori	r24, 0x50	; 80
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <sIMU_begin+0x20e>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 66       	ori	r24, 0x60	; 96
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <sIMU_begin+0x20e>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 67       	ori	r24, 0x70	; 112
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <sIMU_begin+0x20e>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	ea de       	rcall	.-556    	; 0x14b2 <sIMU_writeRegister>
    16de:	6f e0       	ldi	r22, 0x0F	; 15
    16e0:	ce 01       	movw	r24, r28
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	5e de       	rcall	.-836    	; 0x13a2 <sIMU_readRegister>
    16e6:	81 2f       	mov	r24, r17
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <i16IMU_readRawGyroZ>:
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	1f 92       	push	r1
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	66 e2       	ldi	r22, 0x26	; 38
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	b8 de       	rcall	.-656    	; 0x1478 <sIMU_readRegisterInt16>
    1708:	88 23       	and	r24, r24
    170a:	a9 f0       	breq	.+42     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    170c:	85 30       	cpi	r24, 0x05	; 5
    170e:	51 f4       	brne	.+20     	; 0x1724 <i16IMU_readRawGyroZ+0x30>
    1710:	80 91 99 1b 	lds	r24, 0x1B99	; 0x801b99 <allOnesCounter>
    1714:	90 91 9a 1b 	lds	r25, 0x1B9A	; 0x801b9a <allOnesCounter+0x1>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	90 93 9a 1b 	sts	0x1B9A, r25	; 0x801b9a <allOnesCounter+0x1>
    171e:	80 93 99 1b 	sts	0x1B99, r24	; 0x801b99 <allOnesCounter>
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    1724:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <nonSuccessCounter>
    1728:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <nonSuccessCounter+0x1>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 9c 1b 	sts	0x1B9C, r25	; 0x801b9c <nonSuccessCounter+0x1>
    1732:	80 93 9b 1b 	sts	0x1B9B, r24	; 0x801b9b <nonSuccessCounter>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <fIMU_calcGyro>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	cf 93       	push	r28
    174e:	fc 01       	movw	r30, r24
    1750:	40 91 80 1b 	lds	r20, 0x1B80	; 0x801b80 <settings+0x1>
    1754:	50 91 81 1b 	lds	r21, 0x1B81	; 0x801b81 <settings+0x2>
    1758:	45 3f       	cpi	r20, 0xF5	; 245
    175a:	51 05       	cpc	r21, r1
    175c:	b1 f0       	breq	.+44     	; 0x178a <fIMU_calcGyro+0x46>
    175e:	9a 01       	movw	r18, r20
    1760:	a5 e2       	ldi	r26, 0x25	; 37
    1762:	b6 e0       	ldi	r27, 0x06	; 6
    1764:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <__umulhisi3>
    1768:	48 1b       	sub	r20, r24
    176a:	59 0b       	sbc	r21, r25
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	00 24       	eor	r0, r0
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	00 1c       	adc	r0, r0
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	00 1c       	adc	r0, r0
    1782:	89 2f       	mov	r24, r25
    1784:	90 2d       	mov	r25, r0
    1786:	c8 2f       	mov	r28, r24
    1788:	01 c0       	rjmp	.+2      	; 0x178c <fIMU_calcGyro+0x48>
    178a:	c2 e0       	ldi	r28, 0x02	; 2
    178c:	bf 01       	movw	r22, r30
    178e:	ff 0f       	add	r31, r31
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4c e8       	ldi	r20, 0x8C	; 140
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	6c 2f       	mov	r22, r28
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a e7       	ldi	r20, 0x7A	; 122
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    17cc:	cf 91       	pop	r28
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    17d8:	8d df       	rcall	.-230    	; 0x16f4 <i16IMU_readRawGyroZ>
    17da:	b4 cf       	rjmp	.-152    	; 0x1744 <fIMU_calcGyro>
    
    return output;
}
    17dc:	08 95       	ret

000017de <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    17de:	ea e0       	ldi	r30, 0x0A	; 10
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	87 60       	ori	r24, 0x07	; 7
    17e6:	80 83       	st	Z, r24
    17e8:	08 95       	ret

000017ea <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vLED_singleHigh+0x12>
    17f0:	eb e0       	ldi	r30, 0x0B	; 11
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	80 83       	st	Z, r24
    17fa:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	31 f4       	brne	.+12     	; 0x180e <vLED_singleHigh+0x24>
    1802:	eb e0       	ldi	r30, 0x0B	; 11
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	80 83       	st	Z, r24
    180c:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    180e:	89 2b       	or	r24, r25
    1810:	29 f4       	brne	.+10     	; 0x181c <vLED_singleHigh+0x32>
    1812:	eb e0       	ldi	r30, 0x0B	; 11
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	08 95       	ret

0000181e <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	31 f4       	brne	.+12     	; 0x1830 <vLED_singleLow+0x12>
    1824:	eb e0       	ldi	r30, 0x0B	; 11
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	80 83       	st	Z, r24
    182e:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	31 f4       	brne	.+12     	; 0x1842 <vLED_singleLow+0x24>
    1836:	eb e0       	ldi	r30, 0x0B	; 11
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	80 83       	st	Z, r24
    1840:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    1842:	89 2b       	or	r24, r25
    1844:	29 f4       	brne	.+10     	; 0x1850 <vLED_singleLow+0x32>
    1846:	eb e0       	ldi	r30, 0x0B	; 11
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	80 83       	st	Z, r24
    1850:	08 95       	ret

00001852 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	91 05       	cpc	r25, r1
    1856:	39 f4       	brne	.+14     	; 0x1866 <vLED_toggle+0x14>
    1858:	eb e0       	ldi	r30, 0x0B	; 11
    185a:	f1 e0       	ldi	r31, 0x01	; 1
    185c:	90 81       	ld	r25, Z
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	89 27       	eor	r24, r25
    1862:	80 83       	st	Z, r24
    1864:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	39 f4       	brne	.+14     	; 0x187a <vLED_toggle+0x28>
    186c:	eb e0       	ldi	r30, 0x0B	; 11
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	90 81       	ld	r25, Z
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 27       	eor	r24, r25
    1876:	80 83       	st	Z, r24
    1878:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    187a:	89 2b       	or	r24, r25
    187c:	31 f4       	brne	.+12     	; 0x188a <vLED_toggle+0x38>
    187e:	eb e0       	ldi	r30, 0x0B	; 11
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	90 81       	ld	r25, Z
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 27       	eor	r24, r25
    1888:	80 83       	st	Z, r24
    188a:	08 95       	ret

0000188c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    188c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	34 83       	std	Z+4, r19	; 0x04
    189a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    189c:	96 83       	std	Z+6, r25	; 0x06
    189e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18a0:	90 87       	std	Z+8, r25	; 0x08
    18a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18a4:	10 82       	st	Z, r1
    18a6:	08 95       	ret

000018a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 86       	std	Z+9, r1	; 0x09
    18ac:	10 86       	std	Z+8, r1	; 0x08
    18ae:	08 95       	ret

000018b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	9c 01       	movw	r18, r24
    18b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18b8:	dc 01       	movw	r26, r24
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	cd 91       	ld	r28, X+
    18be:	dc 91       	ld	r29, X
    18c0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    18c2:	d3 83       	std	Z+3, r29	; 0x03
    18c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	dc 01       	movw	r26, r24
    18d4:	13 96       	adiw	r26, 0x03	; 3
    18d6:	7c 93       	st	X, r23
    18d8:	6e 93       	st	-X, r22
    18da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    18dc:	7d 83       	std	Y+5, r23	; 0x05
    18de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    18e0:	31 87       	std	Z+9, r19	; 0x09
    18e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    18e4:	f9 01       	movw	r30, r18
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 83       	st	Z, r24
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18f8:	48 81       	ld	r20, Y
    18fa:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    18fc:	4f 3f       	cpi	r20, 0xFF	; 255
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	52 07       	cpc	r21, r18
    1902:	21 f4       	brne	.+8      	; 0x190c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1904:	fc 01       	movw	r30, r24
    1906:	a7 81       	ldd	r26, Z+7	; 0x07
    1908:	b0 85       	ldd	r27, Z+8	; 0x08
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    190c:	dc 01       	movw	r26, r24
    190e:	13 96       	adiw	r26, 0x03	; 3
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vListInsert+0x22>
    1912:	df 01       	movw	r26, r30
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	20 81       	ld	r18, Z
    191e:	31 81       	ldd	r19, Z+1	; 0x01
    1920:	42 17       	cp	r20, r18
    1922:	53 07       	cpc	r21, r19
    1924:	b0 f7       	brcc	.-20     	; 0x1912 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1926:	12 96       	adiw	r26, 0x02	; 2
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	fb 83       	std	Y+3, r31	; 0x03
    1930:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1932:	d5 83       	std	Z+5, r29	; 0x05
    1934:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1936:	bd 83       	std	Y+5, r27	; 0x05
    1938:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    193a:	13 96       	adiw	r26, 0x03	; 3
    193c:	dc 93       	st	X, r29
    193e:	ce 93       	st	-X, r28
    1940:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1942:	99 87       	std	Y+9, r25	; 0x09
    1944:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1946:	fc 01       	movw	r30, r24
    1948:	20 81       	ld	r18, Z
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	20 83       	st	Z, r18
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    195a:	a0 85       	ldd	r26, Z+8	; 0x08
    195c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    195e:	c2 81       	ldd	r28, Z+2	; 0x02
    1960:	d3 81       	ldd	r29, Z+3	; 0x03
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	95 81       	ldd	r25, Z+5	; 0x05
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    196a:	c4 81       	ldd	r28, Z+4	; 0x04
    196c:	d5 81       	ldd	r29, Z+5	; 0x05
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	12 97       	sbiw	r26, 0x02	; 2
    197e:	e8 17       	cp	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	31 f4       	brne	.+12     	; 0x1990 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	95 81       	ldd	r25, Z+5	; 0x05
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
    198e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1994:	8c 91       	ld	r24, X
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <vMainCommunicationTask>:
char printToTerminal[0] = " ";
*/

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	28 97       	sbiw	r28, 0x08	; 8
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
	// Setup for the communication task
	struct sPoint Setpoint = {0}; // Struct for setpoints from server
    19b4:	fe 01       	movw	r30, r28
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	df 01       	movw	r26, r30
    19bc:	1d 92       	st	X+, r1
    19be:	8a 95       	dec	r24
    19c0:	e9 f7       	brne	.-6      	; 0x19bc <vMainCommunicationTask+0x1c>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    19c2:	0e 94 57 1f 	call	0x3eae	; 0x3eae <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    19c6:	a1 2c       	mov	r10, r1
    19c8:	b1 2c       	mov	r11, r1
    19ca:	c1 2c       	mov	r12, r1
    19cc:	d1 2c       	mov	r13, r1
    19ce:	e1 2c       	mov	r14, r1
    19d0:	f1 2c       	mov	r15, r1
    19d2:	03 e0       	ldi	r16, 0x03	; 3
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	48 ec       	ldi	r20, 0xC8	; 200
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	6b e0       	ldi	r22, 0x0B	; 11
    19de:	76 e0       	ldi	r23, 0x06	; 6
    19e0:	85 e2       	ldi	r24, 0x25	; 37
    19e2:	95 e0       	ldi	r25, 0x05	; 5
    19e4:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <vMainCommunicationTask+0x52>
		vLED_singleHigh(ledRED);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc de       	rcall	.-520    	; 0x17ea <vLED_singleHigh>
	}
	uint8_t success = 0;
	
	while(!success) {
		success = server_connect();
    19f2:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <server_connect>
    19f6:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    19f8:	88 ee       	ldi	r24, 0xE8	; 232
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	0e 94 89 24 	call	0x4912	; 0x4912 <vTaskDelay>
		vLED_toggle(ledGREEN);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	26 df       	rcall	.-436    	; 0x1852 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	
	while(!success) {
    1a06:	11 23       	and	r17, r17
    1a08:	a1 f3       	breq	.-24     	; 0x19f2 <vMainCommunicationTask+0x52>
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	
	send_handshake();
    1a0a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <send_handshake>
	while(1){	
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	f9 ea       	ldi	r31, 0xA9	; 169
    1a12:	ef 2e       	mov	r14, r31
    1a14:	fb e1       	ldi	r31, 0x1B	; 27
    1a16:	ff 2e       	mov	r15, r31
    1a18:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
				case TYPE_ORDER:
					vLED_singleHigh(ledRED);
					Setpoint.x = command_in.message.order.x*10;
					Setpoint.y = command_in.message.order.y;
					
					debug("Setpoint x: %f\n",Setpoint.x);
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	ff e0       	ldi	r31, 0x0F	; 15
    1a20:	6f 2e       	mov	r6, r31
    1a22:	f6 e0       	ldi	r31, 0x06	; 6
    1a24:	7f 2e       	mov	r7, r31
    1a26:	f0 2d       	mov	r31, r0
					debug("Setpoint y: %f\n",Setpoint.y);
    1a28:	0f 2e       	mov	r0, r31
    1a2a:	ff e1       	ldi	r31, 0x1F	; 31
    1a2c:	8f 2e       	mov	r8, r31
    1a2e:	f6 e0       	ldi	r31, 0x06	; 6
    1a30:	9f 2e       	mov	r9, r31
    1a32:	f0 2d       	mov	r31, r0
	}
	
	send_handshake();
	
	while(1){	
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	4f ef       	ldi	r20, 0xFF	; 255
    1a38:	5f ef       	ldi	r21, 0xFF	; 255
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	80 91 a5 1b 	lds	r24, 0x1BA5	; 0x801ba5 <xCommandReadyBSem>
    1a42:	90 91 a6 1b 	lds	r25, 0x1BA6	; 0x801ba6 <xCommandReadyBSem+0x1>
    1a46:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <vMainCommunicationTask+0xb0>
    1a4e:	a6 c0       	rjmp	.+332    	; 0x1b9c <vMainCommunicationTask+0x1fc>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1a50:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	0f 92       	push	r0
			command_in = message_in;
    1a5a:	f7 01       	movw	r30, r14
    1a5c:	10 81       	ld	r17, Z
    1a5e:	c1 80       	ldd	r12, Z+1	; 0x01
    1a60:	d2 80       	ldd	r13, Z+2	; 0x02
    1a62:	a3 80       	ldd	r10, Z+3	; 0x03
    1a64:	b4 80       	ldd	r11, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1a6a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
			switch(command_in.type){
    1a6e:	15 30       	cpi	r17, 0x05	; 5
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <vMainCommunicationTask+0xd4>
    1a72:	85 c0       	rjmp	.+266    	; 0x1b7e <vMainCommunicationTask+0x1de>
    1a74:	30 f4       	brcc	.+12     	; 0x1a82 <vMainCommunicationTask+0xe2>
    1a76:	12 30       	cpi	r17, 0x02	; 2
    1a78:	b1 f0       	breq	.+44     	; 0x1aa6 <vMainCommunicationTask+0x106>
    1a7a:	14 30       	cpi	r17, 0x04	; 4
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <vMainCommunicationTask+0xe0>
    1a7e:	63 c0       	rjmp	.+198    	; 0x1b46 <vMainCommunicationTask+0x1a6>
    1a80:	8d c0       	rjmp	.+282    	; 0x1b9c <vMainCommunicationTask+0x1fc>
    1a82:	17 30       	cpi	r17, 0x07	; 7
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <vMainCommunicationTask+0xe8>
    1a86:	83 c0       	rjmp	.+262    	; 0x1b8e <vMainCommunicationTask+0x1ee>
    1a88:	18 f0       	brcs	.+6      	; 0x1a90 <vMainCommunicationTask+0xf0>
    1a8a:	18 30       	cpi	r17, 0x08	; 8
    1a8c:	49 f0       	breq	.+18     	; 0x1aa0 <vMainCommunicationTask+0x100>
    1a8e:	86 c0       	rjmp	.+268    	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1a96:	00 93 34 1a 	sts	0x1A34, r16	; 0x801a34 <gHandshook>
					taskEXIT_CRITICAL();
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
					break;
    1a9e:	7e c0       	rjmp	.+252    	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_PING:
					send_ping_response();
    1aa0:	0e 94 75 20 	call	0x40ea	; 0x40ea <send_ping_response>
					break;
    1aa4:	7b c0       	rjmp	.+246    	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_ORDER:
					vLED_singleHigh(ledRED);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9f de       	rcall	.-706    	; 0x17ea <vLED_singleHigh>
					Setpoint.x = command_in.message.order.x*10;
    1aac:	b6 01       	movw	r22, r12
    1aae:	66 0f       	add	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	cc 0c       	add	r12, r12
    1ab4:	dd 1c       	adc	r13, r13
    1ab6:	cc 0c       	add	r12, r12
    1ab8:	dd 1c       	adc	r13, r13
    1aba:	cc 0c       	add	r12, r12
    1abc:	dd 1c       	adc	r13, r13
    1abe:	6c 0d       	add	r22, r12
    1ac0:	7d 1d       	adc	r23, r13
    1ac2:	07 2e       	mov	r0, r23
    1ac4:	00 0c       	add	r0, r0
    1ac6:	88 0b       	sbc	r24, r24
    1ac8:	99 0b       	sbc	r25, r25
    1aca:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    1ace:	16 2f       	mov	r17, r22
    1ad0:	d7 2e       	mov	r13, r23
    1ad2:	c8 2e       	mov	r12, r24
    1ad4:	59 2e       	mov	r5, r25
    1ad6:	86 2f       	mov	r24, r22
    1ad8:	9d 2d       	mov	r25, r13
    1ada:	ac 2d       	mov	r26, r12
    1adc:	b5 2d       	mov	r27, r5
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	ab 83       	std	Y+3, r26	; 0x03
    1ae4:	bc 83       	std	Y+4, r27	; 0x04
					Setpoint.y = command_in.message.order.y;
    1ae6:	b5 01       	movw	r22, r10
    1ae8:	bb 0c       	add	r11, r11
    1aea:	88 0b       	sbc	r24, r24
    1aec:	99 0b       	sbc	r25, r25
    1aee:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    1af2:	6d 83       	std	Y+5, r22	; 0x05
    1af4:	7e 83       	std	Y+6, r23	; 0x06
    1af6:	8f 83       	std	Y+7, r24	; 0x07
    1af8:	98 87       	std	Y+8, r25	; 0x08
					
					debug("Setpoint x: %f\n",Setpoint.x);
    1afa:	5f 92       	push	r5
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	1f 93       	push	r17
    1b02:	7f 92       	push	r7
    1b04:	6f 92       	push	r6
    1b06:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					debug("Setpoint y: %f\n",Setpoint.y);
    1b0a:	88 85       	ldd	r24, Y+8	; 0x08
    1b0c:	8f 93       	push	r24
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	8f 93       	push	r24
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	8f 93       	push	r24
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	8f 93       	push	r24
    1b1a:	9f 92       	push	r9
    1b1c:	8f 92       	push	r8
    1b1e:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					vFunc_Inf2pi(&Setpoint.heading);
					*/
					
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	44 e6       	ldi	r20, 0x64	; 100
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <poseControllerQ>
    1b32:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <poseControllerQ+0x1>
    1b36:	0e 94 39 1a 	call	0x3472	; 0x3472 <xQueueGenericSend>
					break;
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	2b c0       	rjmp	.+86     	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_PAUSE:
					// Stop sending update messages
					taskENTER_CRITICAL();
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	0f 92       	push	r0
					gPaused = TRUE;
    1b4c:	00 93 33 1a 	sts	0x1A33, r16	; 0x801a33 <gPaused>
					taskEXIT_CRITICAL();
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.x = 0;
    1b54:	19 82       	std	Y+1, r1	; 0x01
    1b56:	1a 82       	std	Y+2, r1	; 0x02
    1b58:	1b 82       	std	Y+3, r1	; 0x03
    1b5a:	1c 82       	std	Y+4, r1	; 0x04
					Setpoint.y = 0;
    1b5c:	1d 82       	std	Y+5, r1	; 0x05
    1b5e:	1e 82       	std	Y+6, r1	; 0x06
    1b60:	1f 82       	std	Y+7, r1	; 0x07
    1b62:	18 86       	std	Y+8, r1	; 0x08
					/*
					Setpoint.distance = 0;
					Setpoint.heading = 0;
					*/
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	44 e6       	ldi	r20, 0x64	; 100
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	be 01       	movw	r22, r28
    1b6c:	6f 5f       	subi	r22, 0xFF	; 255
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <poseControllerQ>
    1b74:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <poseControllerQ+0x1>
    1b78:	0e 94 39 1a 	call	0x3472	; 0x3472 <xQueueGenericSend>
					break;
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	0f 92       	push	r0
					gPaused = FALSE;
    1b84:	10 92 33 1a 	sts	0x1A33, r1	; 0x801a33 <gPaused>
					taskEXIT_CRITICAL();
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
					break;
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <vMainCommunicationTask+0x1fc>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	0f 92       	push	r0
					gHandshook = FALSE;
    1b94:	10 92 34 1a 	sts	0x1A34, r1	; 0x801a34 <gHandshook>
					taskEXIT_CRITICAL();
    1b98:	0f 90       	pop	r0
					break;
			}
			// Command is processed
		}
		vLED_singleLow(ledRED); // if (xCommandReady) end
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	3e de       	rcall	.-900    	; 0x181e <vLED_singleLow>
	}// While(1) end
    1ba2:	48 cf       	rjmp	.-368    	; 0x1a34 <vMainCommunicationTask+0x94>

00001ba4 <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	1f 92       	push	r1
    1baa:	1f 92       	push	r1
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1bb0:	0e 94 33 28 	call	0x5066	; 0x5066 <xTaskGetTickCount>
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1bb8:	64 e1       	ldi	r22, 0x14	; 20
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	0e 94 e6 22 	call	0x45cc	; 0x45cc <vTaskDelayUntil>
    1bc4:	f9 cf       	rjmp	.-14     	; 0x1bb8 <vMainMovementTask+0x14>

00001bc6 <vMainSensorTowerTask>:
		vLED_singleLow(ledRED); // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	61 97       	sbiw	r28, 0x11	; 17
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1bda:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1bdc:	f1 2c       	mov	r15, r1
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1bde:	33 24       	eor	r3, r3
    1be0:	33 94       	inc	r3
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1be2:	10 e0       	ldi	r17, 0x00	; 0
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1be4:	68 94       	set
    1be6:	dd 24       	eor	r13, r13
    1be8:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1bea:	68 94       	set
    1bec:	22 24       	eor	r2, r2
    1bee:	22 f8       	bld	r2, 2
    1bf0:	0e c0       	rjmp	.+28     	; 0x1c0e <vMainSensorTowerTask+0x48>
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1bf2:	0f 2e       	mov	r0, r31
    1bf4:	f3 e0       	ldi	r31, 0x03	; 3
    1bf6:	df 2e       	mov	r13, r31
    1bf8:	f0 2d       	mov	r31, r0
    1bfa:	09 c0       	rjmp	.+18     	; 0x1c0e <vMainSensorTowerTask+0x48>
    1bfc:	0f 2e       	mov	r0, r31
    1bfe:	f3 e0       	ldi	r31, 0x03	; 3
    1c00:	df 2e       	mov	r13, r31
    1c02:	f0 2d       	mov	r31, r0
    1c04:	04 c0       	rjmp	.+8      	; 0x1c0e <vMainSensorTowerTask+0x48>
    1c06:	0f 2e       	mov	r0, r31
    1c08:	f3 e0       	ldi	r31, 0x03	; 3
    1c0a:	df 2e       	mov	r13, r31
    1c0c:	f0 2d       	mov	r31, r0
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
        // Loop
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1c0e:	80 91 34 1a 	lds	r24, 0x1A34	; 0x801a34 <gHandshook>
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <vMainSensorTowerTask+0x52>
    1c16:	0a c1       	rjmp	.+532    	; 0x1e2c <vMainSensorTowerTask+0x266>
    1c18:	80 91 33 1a 	lds	r24, 0x1A33	; 0x801a33 <gPaused>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	06 c1       	rjmp	.+524    	; 0x1e2c <vMainSensorTowerTask+0x266>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1c20:	0e 94 33 28 	call	0x5066	; 0x5066 <xTaskGetTickCount>
    1c24:	9b 83       	std	Y+3, r25	; 0x03
    1c26:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	46 e9       	ldi	r20, 0x96	; 150
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	be 01       	movw	r22, r28
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <scanStatusQ>
    1c38:	90 91 3a 1a 	lds	r25, 0x1A3A	; 0x801a3a <scanStatusQ+0x1>
    1c3c:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	d9 f4       	brne	.+54     	; 0x1c7a <vMainSensorTowerTask+0xb4>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	88 23       	and	r24, r24
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <vMainSensorTowerTask+0x8a>
    1c4a:	83 30       	cpi	r24, 0x03	; 3
    1c4c:	a8 f4       	brcc	.+42     	; 0x1c78 <vMainSensorTowerTask+0xb2>
    1c4e:	08 c0       	rjmp	.+16     	; 0x1c60 <vMainSensorTowerTask+0x9a>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1c50:	13 9d       	mul	r17, r3
    1c52:	10 2d       	mov	r17, r0
    1c54:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1c56:	ff 24       	eor	r15, r15
    1c58:	f3 94       	inc	r15
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1c5a:	33 24       	eor	r3, r3
    1c5c:	33 94       	inc	r3
                        idleCounter = 1;
						break;
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <vMainSensorTowerTask+0xb4>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1c60:	8d ec       	ldi	r24, 0xCD	; 205
    1c62:	18 9f       	mul	r17, r24
    1c64:	11 2d       	mov	r17, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	16 95       	lsr	r17
    1c6a:	16 95       	lsr	r17
                        idleCounter = 0;
    1c6c:	f1 2c       	mov	r15, r1
                        servoResolution = 1;
                        idleCounter = 1;
						break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1c6e:	0f 2e       	mov	r0, r31
    1c70:	f5 e0       	ldi	r31, 0x05	; 5
    1c72:	3f 2e       	mov	r3, r31
    1c74:	f0 2d       	mov	r31, r0
                        servoStep /= servoResolution;
                        idleCounter = 0;
						break;
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <vMainSensorTowerTask+0xb4>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1c78:	f1 2c       	mov	r15, r1
                    default:
                        idleCounter = 0;
						break;
                }
            }
            vServo_setAngle(servoStep*servoResolution);
    1c7a:	13 9d       	mul	r17, r3
    1c7c:	80 2d       	mov	r24, r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	0e 94 99 20 	call	0x4132	; 0x4132 <vServo_setAngle>
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point					ENDRET FRA 200 TIL 100 FOR TEST!!!!
    1c84:	68 ec       	ldi	r22, 0xC8	; 200
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	ce 01       	movw	r24, r28
    1c8a:	02 96       	adiw	r24, 0x02	; 2
    1c8c:	0e 94 e6 22 	call	0x45cc	; 0x45cc <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	6b d9       	rcall	.-3370   	; 0xf6a <ui8DistSens_readCM>
    1c94:	88 8b       	std	Y+16, r24	; 0x10
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	68 d9       	rcall	.-3376   	; 0xf6a <ui8DistSens_readCM>
    1c9a:	e8 2e       	mov	r14, r24
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	65 d9       	rcall	.-3382   	; 0xf6a <ui8DistSens_readCM>
    1ca0:	c8 2e       	mov	r12, r24
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	62 d9       	rcall	.-3388   	; 0xf6a <ui8DistSens_readCM>
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
			//debug("forwardSensor: %i", forwardSensor);
			//debug("leftSensor: %i", leftSensor);
			//debug("rearSensor: %i", rearSensor);
			//debug("rightSensor: %i", rightSensor);
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1caa:	48 e2       	ldi	r20, 0x28	; 40
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    1cb6:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    1cba:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
    1cbe:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <gTheta_hat>
                thetahat = gTheta_hat;
    1cc2:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <gTheta_hat+0x1>
    1cc6:	a0 91 31 1a 	lds	r26, 0x1A31	; 0x801a31 <gTheta_hat+0x2>
    1cca:	b0 91 32 1a 	lds	r27, 0x1A32	; 0x801a32 <gTheta_hat+0x3>
    1cce:	8c 87       	std	Y+12, r24	; 0x0c
    1cd0:	9d 87       	std	Y+13, r25	; 0x0d
    1cd2:	ae 87       	std	Y+14, r26	; 0x0e
    1cd4:	bf 87       	std	Y+15, r27	; 0x0f
    1cd6:	a0 90 2d 1a 	lds	r10, 0x1A2D	; 0x801a2d <gX_hat>
                xhat = gX_hat;
    1cda:	b0 90 2e 1a 	lds	r11, 0x1A2E	; 0x801a2e <gX_hat+0x1>
    1cde:	60 90 2b 1a 	lds	r6, 0x1A2B	; 0x801a2b <gY_hat>
                yhat = gY_hat;
    1ce2:	70 90 2c 1a 	lds	r7, 0x1A2C	; 0x801a2c <gY_hat+0x1>
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    1cee:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    1cf2:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
    1cf6:	9a e0       	ldi	r25, 0x0A	; 10
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1cf8:	9f 15       	cp	r25, r15
    1cfa:	40 f4       	brcc	.+16     	; 0x1d0c <vMainSensorTowerTask+0x146>
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	81 11       	cpse	r24, r1
    1d00:	05 c0       	rjmp	.+10     	; 0x1d0c <vMainSensorTowerTask+0x146>
    1d02:	0e 94 14 20 	call	0x4028	; 0x4028 <send_idle>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1d06:	ff 24       	eor	r15, r15
                idleCounter = 1;
    1d08:	f3 94       	inc	r15
    1d0a:	06 c0       	rjmp	.+12     	; 0x1d18 <vMainSensorTowerTask+0x152>
    1d0c:	ff 20       	and	r15, r15
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <vMainSensorTowerTask+0x152>
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	81 11       	cpse	r24, r1
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <vMainSensorTowerTask+0x152>
    1d16:	f3 94       	inc	r15
                idleCounter++;
    1d18:	43 2c       	mov	r4, r3
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1d1a:	51 2c       	mov	r5, r1
    1d1c:	14 9d       	mul	r17, r4
    1d1e:	40 01       	movw	r8, r0
    1d20:	15 9d       	mul	r17, r5
    1d22:	90 0c       	add	r9, r0
    1d24:	11 24       	eor	r1, r1
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	44 e3       	ldi	r20, 0x34	; 52
    1d2c:	53 e4       	ldi	r21, 0x43	; 67
    1d2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d30:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d32:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d36:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    1d3a:	2b ed       	ldi	r18, 0xDB	; 219
    1d3c:	3f e0       	ldi	r19, 0x0F	; 15
    1d3e:	49 e4       	ldi	r20, 0x49	; 73
    1d40:	50 e4       	ldi	r21, 0x40	; 64
    1d42:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    1d46:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    1d4a:	6c 87       	std	Y+12, r22	; 0x0c
    1d4c:	7d 87       	std	Y+13, r23	; 0x0d
    1d4e:	8e 87       	std	Y+14, r24	; 0x0e
    1d50:	9f 87       	std	Y+15, r25	; 0x0f
    1d52:	c3 01       	movw	r24, r6
    1d54:	6a e0       	ldi	r22, 0x0A	; 10
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <__divmodhi4>
    1d5c:	fb 01       	movw	r30, r22
    1d5e:	c5 01       	movw	r24, r10
    1d60:	6a e0       	ldi	r22, 0x0A	; 10
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <__divmodhi4>
    1d68:	cb 01       	movw	r24, r22
    1d6a:	a9 88       	ldd	r10, Y+17	; 0x11
    1d6c:	08 89       	ldd	r16, Y+16	; 0x10
    1d6e:	94 01       	movw	r18, r8
    1d70:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d72:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d74:	bf 01       	movw	r22, r30
    1d76:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <send_update>
    1d7a:	af e1       	ldi	r26, 0x1F	; 31
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1d7c:	8a 16       	cp	r8, r26
    1d7e:	91 04       	cpc	r9, r1
    1d80:	34 f0       	brlt	.+12     	; 0x1d8e <vMainSensorTowerTask+0x1c8>
    1d82:	bc e3       	ldi	r27, 0x3C	; 60
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1d84:	8b 16       	cp	r8, r27
    1d86:	91 04       	cpc	r9, r1
    1d88:	e4 f0       	brlt	.+56     	; 0x1dc2 <vMainSensorTowerTask+0x1fc>
    1d8a:	a9 88       	ldd	r10, Y+17	; 0x11
    1d8c:	a8 8a       	std	Y+16, r10	; 0x10
    1d8e:	88 89       	ldd	r24, Y+16	; 0x10
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1d90:	81 50       	subi	r24, 0x01	; 1
    1d92:	83 31       	cpi	r24, 0x13	; 19
    1d94:	b0 f4       	brcc	.+44     	; 0x1dc2 <vMainSensorTowerTask+0x1fc>
    1d96:	1c 82       	std	Y+4, r1	; 0x04
                // Stop controller
                struct sPoint Setpoint = {0, 0};
    1d98:	1d 82       	std	Y+5, r1	; 0x05
    1d9a:	1e 82       	std	Y+6, r1	; 0x06
    1d9c:	1f 82       	std	Y+7, r1	; 0x07
    1d9e:	18 86       	std	Y+8, r1	; 0x08
    1da0:	19 86       	std	Y+9, r1	; 0x09
    1da2:	1a 86       	std	Y+10, r1	; 0x0a
    1da4:	1b 86       	std	Y+11, r1	; 0x0b
    1da6:	20 e0       	ldi	r18, 0x00	; 0
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1da8:	44 e6       	ldi	r20, 0x64	; 100
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	be 01       	movw	r22, r28
    1dae:	6c 5f       	subi	r22, 0xFC	; 252
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <poseControllerQ>
    1db6:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <poseControllerQ+0x1>
    1dba:	0e 94 39 1a 	call	0x3472	; 0x3472 <xQueueGenericSend>
    1dbe:	0e 94 14 20 	call	0x4028	; 0x4028 <send_idle>
				send_idle();
    1dc2:	8b e5       	ldi	r24, 0x5B	; 91
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1dc4:	88 16       	cp	r8, r24
    1dc6:	91 04       	cpc	r9, r1
    1dc8:	9c f4       	brge	.+38     	; 0x1df0 <vMainSensorTowerTask+0x22a>
    1dca:	94 e0       	ldi	r25, 0x04	; 4
    1dcc:	d9 12       	cpse	r13, r25
    1dce:	10 c0       	rjmp	.+32     	; 0x1df0 <vMainSensorTowerTask+0x22a>
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	83 30       	cpi	r24, 0x03	; 3
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <vMainSensorTowerTask+0x212>
    1dd6:	40 c0       	rjmp	.+128    	; 0x1e58 <vMainSensorTowerTask+0x292>
    1dd8:	1f 5f       	subi	r17, 0xFF	; 255
                servoStep++;
    1dda:	14 9d       	mul	r17, r4
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1ddc:	40 01       	movw	r8, r0
    1dde:	15 9d       	mul	r17, r5
    1de0:	90 0c       	add	r9, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	aa e5       	ldi	r26, 0x5A	; 90
    1de6:	8a 16       	cp	r8, r26
    1de8:	91 04       	cpc	r9, r1
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <vMainSensorTowerTask+0x228>
    1dec:	02 cf       	rjmp	.-508    	; 0x1bf2 <vMainSensorTowerTask+0x2c>
    1dee:	15 c0       	rjmp	.+42     	; 0x1e1a <vMainSensorTowerTask+0x254>
    1df0:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1df2:	19 04       	cpc	r1, r9
    1df4:	34 f5       	brge	.+76     	; 0x1e42 <vMainSensorTowerTask+0x27c>
    1df6:	b3 e0       	ldi	r27, 0x03	; 3
    1df8:	db 12       	cpse	r13, r27
    1dfa:	28 c0       	rjmp	.+80     	; 0x1e4c <vMainSensorTowerTask+0x286>
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	83 30       	cpi	r24, 0x03	; 3
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <vMainSensorTowerTask+0x23e>
    1e02:	05 cf       	rjmp	.-502    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e04:	11 50       	subi	r17, 0x01	; 1
                servoStep --;
    1e06:	14 9d       	mul	r17, r4
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e08:	40 01       	movw	r8, r0
    1e0a:	15 9d       	mul	r17, r5
    1e0c:	90 0c       	add	r9, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <vMainSensorTowerTask+0x254>
    1e12:	84 e0       	ldi	r24, 0x04	; 4
    1e14:	d8 16       	cp	r13, r24
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <vMainSensorTowerTask+0x254>
    1e18:	f1 ce       	rjmp	.-542    	; 0x1bfc <vMainSensorTowerTask+0x36>
    1e1a:	18 14       	cp	r1, r8
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1e1c:	19 04       	cpc	r1, r9
    1e1e:	0c f4       	brge	.+2      	; 0x1e22 <vMainSensorTowerTask+0x25c>
    1e20:	f6 ce       	rjmp	.-532    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e22:	93 e0       	ldi	r25, 0x03	; 3
    1e24:	d9 12       	cpse	r13, r25
    1e26:	f3 ce       	rjmp	.-538    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e28:	d2 2c       	mov	r13, r2
                rotationDirection = moveCounterClockwise;
    1e2a:	f1 ce       	rjmp	.-542    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1e2e:	0e 94 99 20 	call	0x4132	; 0x4132 <vServo_setAngle>
    1e32:	84 e6       	ldi	r24, 0x64	; 100
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 89 24 	call	0x4912	; 0x4912 <vTaskDelay>
    1e3a:	f1 2c       	mov	r15, r1
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1e3c:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1e3e:	d2 2c       	mov	r13, r2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1e40:	e6 ce       	rjmp	.-564    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e42:	aa e5       	ldi	r26, 0x5A	; 90
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e44:	8a 16       	cp	r8, r26
    1e46:	91 04       	cpc	r9, r1
    1e48:	64 f3       	brlt	.-40     	; 0x1e22 <vMainSensorTowerTask+0x25c>
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <vMainSensorTowerTask+0x29a>
    1e4c:	ba e5       	ldi	r27, 0x5A	; 90
    1e4e:	8b 16       	cp	r8, r27
    1e50:	91 04       	cpc	r9, r1
    1e52:	0c f4       	brge	.+2      	; 0x1e56 <vMainSensorTowerTask+0x290>
    1e54:	dc ce       	rjmp	.-584    	; 0x1c0e <vMainSensorTowerTask+0x48>
    1e56:	dd cf       	rjmp	.-70     	; 0x1e12 <vMainSensorTowerTask+0x24c>
    1e58:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e5a:	19 04       	cpc	r1, r9
    1e5c:	bc f3       	brlt	.-18     	; 0x1e4c <vMainSensorTowerTask+0x286>
    1e5e:	f1 cf       	rjmp	.-30     	; 0x1e42 <vMainSensorTowerTask+0x27c>
    1e60:	84 e0       	ldi	r24, 0x04	; 4
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e62:	d8 16       	cp	r13, r24
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <vMainSensorTowerTask+0x2a2>
    1e66:	cf ce       	rjmp	.-610    	; 0x1c06 <vMainSensorTowerTask+0x40>
    1e68:	dc cf       	rjmp	.-72     	; 0x1e22 <vMainSensorTowerTask+0x25c>

00001e6a <vMainPoseControllerTask>:
    1e6a:	cf 93       	push	r28
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	a4 97       	sbiw	r28, 0x24	; 36
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
        debug("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
	
    /* Task init */    
    struct sPoint Setpoint = {0}; // Updates from server
    1e7e:	fe 01       	movw	r30, r28
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	88 e0       	ldi	r24, 0x08	; 8
    1e84:	df 01       	movw	r26, r30
    1e86:	1d 92       	st	X+, r1
    1e88:	8a 95       	dec	r24
    1e8a:	e9 f7       	brne	.-6      	; 0x1e86 <vMainPoseControllerTask+0x1c>
    //struct sCartesian Error = {0}; // Error values
    struct sPoint oldVal = {0};
    struct sPoint referenceModel = {0};
	float radiusEpsilon = 5; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1e8c:	19 86       	std	Y+9, r1	; 0x09
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1e8e:	1b 86       	std	Y+11, r1	; 0x0b
    1e90:	1a 86       	std	Y+10, r1	; 0x0a
	int16_t rightWheelTicks = 0;
    1e92:	1d 86       	std	Y+13, r1	; 0x0d
    1e94:	1c 86       	std	Y+12, r1	; 0x0c
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1e96:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t gRightWheelDirection = 0;
    1e98:	1f 86       	std	Y+15, r1	; 0x0f
	
	uint8_t idleSendt = FALSE;
    1e9a:	00 e0       	ldi	r16, 0x00	; 0
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1e9c:	b1 e0       	ldi	r27, 0x01	; 1
    1e9e:	bc a3       	std	Y+36, r27	; 0x24
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1ea0:	18 a2       	std	Y+32, r1	; 0x20
    1ea2:	19 a2       	std	Y+33, r1	; 0x21
    1ea4:	1a a2       	std	Y+34, r1	; 0x22
    1ea6:	1b a2       	std	Y+35, r1	; 0x23
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1ea8:	1c 8e       	std	Y+28, r1	; 0x1c
    1eaa:	1d 8e       	std	Y+29, r1	; 0x1d
    1eac:	1e 8e       	std	Y+30, r1	; 0x1e
    1eae:	1f 8e       	std	Y+31, r1	; 0x1f
						
						leftIntError = 0;
						rightIntError = 0;
						
					}
					debug("Left speed: %i",LSpeed);
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	ff e2       	ldi	r31, 0x2F	; 47
    1eb4:	2f 2e       	mov	r2, r31
    1eb6:	f6 e0       	ldi	r31, 0x06	; 6
    1eb8:	3f 2e       	mov	r3, r31
    1eba:	f0 2d       	mov	r31, r0
	
	uint8_t idleSendt = FALSE;
	     
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1ebc:	80 91 34 1a 	lds	r24, 0x1A34	; 0x801a34 <gHandshook>
    1ec0:	88 23       	and	r24, r24
    1ec2:	e1 f3       	breq	.-8      	; 0x1ebc <vMainPoseControllerTask+0x52>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ec4:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1ec6:	40 91 35 1a 	lds	r20, 0x1A35	; 0x801a35 <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1eca:	10 92 35 1a 	sts	0x1A35, r1	; 0x801a35 <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1ece:	10 91 36 1a 	lds	r17, 0x1A36	; 0x801a36 <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1ed2:	10 92 36 1a 	sts	0x1A36, r1	; 0x801a36 <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1ed6:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1ed8:	be 01       	movw	r22, r28
    1eda:	66 5f       	subi	r22, 0xF6	; 246
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee0:	58 d6       	rcall	.+3248   	; 0x2b92 <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1ee2:	41 2f       	mov	r20, r17
    1ee4:	be 01       	movw	r22, r28
    1ee6:	64 5f       	subi	r22, 0xF4	; 244
    1ee8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eec:	69 d6       	rcall	.+3282   	; 0x2bc0 <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xTickMutex>
    1efc:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xTickMutex+0x1>
    1f00:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1f04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f08:	90 93 28 1a 	sts	0x1A28, r25	; 0x801a28 <gLeftWheelTicks+0x1>
    1f0c:	80 93 27 1a 	sts	0x1A27, r24	; 0x801a27 <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1f10:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f12:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f14:	90 93 2a 1a 	sts	0x1A2A, r25	; 0x801a2a <gRightWheelTicks+0x1>
    1f18:	80 93 29 1a 	sts	0x1A29, r24	; 0x801a29 <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xTickMutex>
    1f24:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xTickMutex+0x1>
    1f28:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	4f ef       	ldi	r20, 0xFF	; 255
    1f30:	5f ef       	ldi	r21, 0xFF	; 255
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xControllerBSem>
    1f3a:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xControllerBSem+0x1>
    1f3e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <vMainPoseControllerTask+0xde>
    1f46:	ba cf       	rjmp	.-140    	; 0x1ebc <vMainPoseControllerTask+0x52>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	4f ef       	ldi	r20, 0xFF	; 255
    1f4c:	5f ef       	ldi	r21, 0xFF	; 255
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    1f56:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    1f5a:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1f5e:	c0 90 2f 1a 	lds	r12, 0x1A2F	; 0x801a2f <gTheta_hat>
    1f62:	d0 90 30 1a 	lds	r13, 0x1A30	; 0x801a30 <gTheta_hat+0x1>
    1f66:	e0 90 31 1a 	lds	r14, 0x1A31	; 0x801a31 <gTheta_hat+0x2>
    1f6a:	f0 90 32 1a 	lds	r15, 0x1A32	; 0x801a32 <gTheta_hat+0x3>
					xhat = gX_hat;
    1f6e:	60 90 2d 1a 	lds	r6, 0x1A2D	; 0x801a2d <gX_hat>
    1f72:	70 90 2e 1a 	lds	r7, 0x1A2E	; 0x801a2e <gX_hat+0x1>
					yhat = gY_hat;
    1f76:	40 90 2b 1a 	lds	r4, 0x1A2B	; 0x801a2b <gY_hat>
    1f7a:	50 90 2c 1a 	lds	r5, 0x1A2C	; 0x801a2c <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    1f86:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    1f8a:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	be 01       	movw	r22, r28
    1f96:	6f 5f       	subi	r22, 0xFF	; 255
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <poseControllerQ>
    1f9e:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <poseControllerQ+0x1>
    1fa2:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	c9 f4       	brne	.+50     	; 0x1fdc <vMainPoseControllerTask+0x172>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	44 e1       	ldi	r20, 0x14	; 20
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	be 01       	movw	r22, r28
    1fb2:	6f 5f       	subi	r22, 0xFF	; 255
    1fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb6:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <poseControllerQ>
    1fba:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <poseControllerQ+0x1>
    1fbe:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
					xTargt = Setpoint.x;
    1fc2:	89 80       	ldd	r8, Y+1	; 0x01
    1fc4:	9a 80       	ldd	r9, Y+2	; 0x02
    1fc6:	ab 80       	ldd	r10, Y+3	; 0x03
    1fc8:	bc 80       	ldd	r11, Y+4	; 0x04
					yTargt = Setpoint.y;
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	af 81       	ldd	r26, Y+7	; 0x07
    1fd0:	b8 85       	ldd	r27, Y+8	; 0x08
    1fd2:	88 8f       	std	Y+24, r24	; 0x18
    1fd4:	99 8f       	std	Y+25, r25	; 0x19
    1fd6:	aa 8f       	std	Y+26, r26	; 0x1a
    1fd8:	bb 8f       	std	Y+27, r27	; 0x1b
    1fda:	14 c0       	rjmp	.+40     	; 0x2004 <vMainPoseControllerTask+0x19a>
				} else {
					xTargt = xhat;
    1fdc:	b3 01       	movw	r22, r6
    1fde:	07 2c       	mov	r0, r7
    1fe0:	00 0c       	add	r0, r0
    1fe2:	88 0b       	sbc	r24, r24
    1fe4:	99 0b       	sbc	r25, r25
    1fe6:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    1fea:	4b 01       	movw	r8, r22
    1fec:	5c 01       	movw	r10, r24
					yTargt = yhat;
    1fee:	b2 01       	movw	r22, r4
    1ff0:	05 2c       	mov	r0, r5
    1ff2:	00 0c       	add	r0, r0
    1ff4:	88 0b       	sbc	r24, r24
    1ff6:	99 0b       	sbc	r25, r25
    1ff8:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    1ffc:	68 8f       	std	Y+24, r22	; 0x18
    1ffe:	79 8f       	std	Y+25, r23	; 0x19
    2000:	8a 8f       	std	Y+26, r24	; 0x1a
    2002:	9b 8f       	std	Y+27, r25	; 0x1b
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    2004:	b3 01       	movw	r22, r6
    2006:	77 0c       	add	r7, r7
    2008:	88 0b       	sbc	r24, r24
    200a:	99 0b       	sbc	r25, r25
    200c:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    2010:	9b 01       	movw	r18, r22
    2012:	ac 01       	movw	r20, r24
    2014:	c5 01       	movw	r24, r10
    2016:	b4 01       	movw	r22, r8
    2018:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    201c:	6c 8b       	std	Y+20, r22	; 0x14
    201e:	7d 8b       	std	Y+21, r23	; 0x15
    2020:	8e 8b       	std	Y+22, r24	; 0x16
    2022:	9f 8b       	std	Y+23, r25	; 0x17
    2024:	b2 01       	movw	r22, r4
    2026:	55 0c       	add	r5, r5
    2028:	88 0b       	sbc	r24, r24
    202a:	99 0b       	sbc	r25, r25
    202c:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    2030:	9b 01       	movw	r18, r22
    2032:	ac 01       	movw	r20, r24
    2034:	68 8d       	ldd	r22, Y+24	; 0x18
    2036:	79 8d       	ldd	r23, Y+25	; 0x19
    2038:	8a 8d       	ldd	r24, Y+26	; 0x1a
    203a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    203c:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    2040:	2b 01       	movw	r4, r22
    2042:	3c 01       	movw	r6, r24
    2044:	2c 89       	ldd	r18, Y+20	; 0x14
    2046:	3d 89       	ldd	r19, Y+21	; 0x15
    2048:	4e 89       	ldd	r20, Y+22	; 0x16
    204a:	5f 89       	ldd	r21, Y+23	; 0x17
    204c:	ca 01       	movw	r24, r20
    204e:	b9 01       	movw	r22, r18
    2050:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2054:	4b 01       	movw	r8, r22
    2056:	5c 01       	movw	r10, r24
    2058:	a3 01       	movw	r20, r6
    205a:	92 01       	movw	r18, r4
    205c:	c3 01       	movw	r24, r6
    205e:	b2 01       	movw	r22, r4
    2060:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2064:	68 8f       	std	Y+24, r22	; 0x18
    2066:	79 8f       	std	Y+25, r23	; 0x19
    2068:	8a 8f       	std	Y+26, r24	; 0x1a
    206a:	9b 8f       	std	Y+27, r25	; 0x1b
    206c:	28 8d       	ldd	r18, Y+24	; 0x18
    206e:	39 8d       	ldd	r19, Y+25	; 0x19
    2070:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2072:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2074:	c5 01       	movw	r24, r10
    2076:	b4 01       	movw	r22, r8
    2078:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    207c:	0e 94 0b 32 	call	0x6416	; 0x6416 <sqrt>
    2080:	4b 01       	movw	r8, r22
    2082:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	46 e9       	ldi	r20, 0x96	; 150
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <__cmpsf2>
    2090:	88 23       	and	r24, r24
    2092:	c4 f4       	brge	.+48     	; 0x20c4 <vMainPoseControllerTask+0x25a>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4c e4       	ldi	r20, 0x4C	; 76
    209a:	52 e4       	ldi	r21, 0x42	; 66
    209c:	c5 01       	movw	r24, r10
    209e:	b4 01       	movw	r22, r8
    20a0:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	46 e9       	ldi	r20, 0x96	; 150
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 ec       	ldi	r20, 0xC0	; 192
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    20bc:	0e 94 57 30 	call	0x60ae	; 0x60ae <__fixunssfsi>
    20c0:	16 2f       	mov	r17, r22
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <vMainPoseControllerTask+0x25c>
				}else{
					currentDriveActuation = maxDriveActuation;
    20c4:	1b e4       	ldi	r17, 0x4B	; 75
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 ea       	ldi	r20, 0xA0	; 160
    20cc:	50 e4       	ldi	r21, 0x40	; 64
    20ce:	c5 01       	movw	r24, r10
    20d0:	b4 01       	movw	r22, r8
    20d2:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	0c f0       	brlt	.+2      	; 0x20dc <vMainPoseControllerTask+0x272>
    20da:	72 c1       	rjmp	.+740    	; 0x23c0 <__stack+0x1c1>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    20dc:	2c 89       	ldd	r18, Y+20	; 0x14
    20de:	3d 89       	ldd	r19, Y+21	; 0x15
    20e0:	4e 89       	ldd	r20, Y+22	; 0x16
    20e2:	5f 89       	ldd	r21, Y+23	; 0x17
    20e4:	c3 01       	movw	r24, r6
    20e6:	b2 01       	movw	r22, r4
    20e8:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    20ec:	a7 01       	movw	r20, r14
    20ee:	96 01       	movw	r18, r12
    20f0:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    20f4:	68 8b       	std	Y+16, r22	; 0x10
    20f6:	79 8b       	std	Y+17, r23	; 0x11
    20f8:	8a 8b       	std	Y+18, r24	; 0x12
    20fa:	9b 8b       	std	Y+19, r25	; 0x13
					vFunc_Inf2pi(&thetaDiff);
    20fc:	ce 01       	movw	r24, r28
    20fe:	40 96       	adiw	r24, 0x10	; 16
    2100:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    2104:	48 88       	ldd	r4, Y+16	; 0x10
    2106:	59 88       	ldd	r5, Y+17	; 0x11
    2108:	6a 88       	ldd	r6, Y+18	; 0x12
    210a:	7b 88       	ldd	r7, Y+19	; 0x13
    210c:	53 01       	movw	r10, r6
    210e:	42 01       	movw	r8, r4
    2110:	e8 94       	clt
    2112:	b7 f8       	bld	r11, 7
    2114:	29 e1       	ldi	r18, 0x19	; 25
    2116:	34 e0       	ldi	r19, 0x04	; 4
    2118:	46 e0       	ldi	r20, 0x06	; 6
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	c5 01       	movw	r24, r10
    211e:	b4 01       	movw	r22, r8
    2120:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
    2124:	18 16       	cp	r1, r24
    2126:	0c f4       	brge	.+2      	; 0x212a <vMainPoseControllerTask+0x2c0>
    2128:	ab c0       	rjmp	.+342    	; 0x2280 <__stack+0x81>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    212a:	22 e7       	ldi	r18, 0x72	; 114
    212c:	3a e8       	ldi	r19, 0x8A	; 138
    212e:	4e e8       	ldi	r20, 0x8E	; 142
    2130:	5c e3       	ldi	r21, 0x3C	; 60
    2132:	c5 01       	movw	r24, r10
    2134:	b4 01       	movw	r22, r8
    2136:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <__cmpsf2>
    213a:	88 23       	and	r24, r24
    213c:	24 f0       	brlt	.+8      	; 0x2146 <vMainPoseControllerTask+0x2dc>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    213e:	9c a1       	ldd	r25, Y+36	; 0x24
    2140:	91 11       	cpse	r25, r1
    2142:	03 c0       	rjmp	.+6      	; 0x214a <vMainPoseControllerTask+0x2e0>
    2144:	9d c0       	rjmp	.+314    	; 0x2280 <__stack+0x81>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    2146:	a1 e0       	ldi	r26, 0x01	; 1
    2148:	ac a3       	std	Y+36, r26	; 0x24
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	c3 01       	movw	r24, r6
    2152:	b2 01       	movw	r22, r4
    2154:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
    2158:	88 23       	and	r24, r24
    215a:	d4 f1       	brlt	.+116    	; 0x21d0 <vMainPoseControllerTask+0x366>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    215c:	e1 2e       	mov	r14, r17
    215e:	f1 2c       	mov	r15, r1
    2160:	b7 01       	movw	r22, r14
    2162:	0f 2c       	mov	r0, r15
    2164:	00 0c       	add	r0, r0
    2166:	88 0b       	sbc	r24, r24
    2168:	99 0b       	sbc	r25, r25
    216a:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    216e:	6c 8b       	std	Y+20, r22	; 0x14
    2170:	7d 8b       	std	Y+21, r23	; 0x15
    2172:	8e 8b       	std	Y+22, r24	; 0x16
    2174:	9f 8b       	std	Y+23, r25	; 0x17
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	46 e1       	ldi	r20, 0x16	; 22
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	c5 01       	movw	r24, r10
    2180:	b4 01       	movw	r22, r8
    2182:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	6c 89       	ldd	r22, Y+20	; 0x14
    218c:	7d 89       	ldd	r23, Y+21	; 0x15
    218e:	8e 89       	ldd	r24, Y+22	; 0x16
    2190:	9f 89       	ldd	r25, Y+23	; 0x17
    2192:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    2196:	4b 01       	movw	r8, r22
    2198:	5c 01       	movw	r10, r24
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    21a4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    21a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21aa:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    21ae:	9b 01       	movw	r18, r22
    21b0:	ac 01       	movw	r20, r24
    21b2:	c5 01       	movw	r24, r10
    21b4:	b4 01       	movw	r22, r8
    21b6:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    21ba:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    21be:	e6 16       	cp	r14, r22
    21c0:	f7 06       	cpc	r15, r23
    21c2:	e4 f1       	brlt	.+120    	; 0x223c <__stack+0x3d>
    21c4:	8b 01       	movw	r16, r22
    21c6:	77 23       	and	r23, r23
    21c8:	e4 f5       	brge	.+120    	; 0x2242 <__stack+0x43>
    21ca:	00 e0       	ldi	r16, 0x00	; 0
    21cc:	10 e0       	ldi	r17, 0x00	; 0
    21ce:	39 c0       	rjmp	.+114    	; 0x2242 <__stack+0x43>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    21d0:	01 2f       	mov	r16, r17
    21d2:	10 e0       	ldi	r17, 0x00	; 0
    21d4:	b8 01       	movw	r22, r16
    21d6:	01 2e       	mov	r0, r17
    21d8:	00 0c       	add	r0, r0
    21da:	88 0b       	sbc	r24, r24
    21dc:	99 0b       	sbc	r25, r25
    21de:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    21e2:	6b 01       	movw	r12, r22
    21e4:	7c 01       	movw	r14, r24
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	46 e1       	ldi	r20, 0x16	; 22
    21ec:	54 e4       	ldi	r21, 0x44	; 68
    21ee:	c5 01       	movw	r24, r10
    21f0:	b4 01       	movw	r22, r8
    21f2:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    21f6:	9b 01       	movw	r18, r22
    21f8:	ac 01       	movw	r20, r24
    21fa:	c7 01       	movw	r24, r14
    21fc:	b6 01       	movw	r22, r12
    21fe:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    2202:	6b 01       	movw	r12, r22
    2204:	7c 01       	movw	r14, r24
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	68 a1       	ldd	r22, Y+32	; 0x20
    2210:	79 a1       	ldd	r23, Y+33	; 0x21
    2212:	8a a1       	ldd	r24, Y+34	; 0x22
    2214:	9b a1       	ldd	r25, Y+35	; 0x23
    2216:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    221a:	9b 01       	movw	r18, r22
    221c:	ac 01       	movw	r20, r24
    221e:	c7 01       	movw	r24, r14
    2220:	b6 01       	movw	r22, r12
    2222:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    2226:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    222a:	06 17       	cp	r16, r22
    222c:	17 07       	cpc	r17, r23
    222e:	44 f0       	brlt	.+16     	; 0x2240 <__stack+0x41>
    2230:	7b 01       	movw	r14, r22
    2232:	77 23       	and	r23, r23
    2234:	34 f4       	brge	.+12     	; 0x2242 <__stack+0x43>
    2236:	e1 2c       	mov	r14, r1
    2238:	f1 2c       	mov	r15, r1
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <__stack+0x43>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    223c:	87 01       	movw	r16, r14
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <__stack+0x43>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    2240:	78 01       	movw	r14, r16
							LSpeed = currentDriveActuation;
							
							
						}
						
						leftIntError += thetaDiff;
    2242:	a3 01       	movw	r20, r6
    2244:	92 01       	movw	r18, r4
    2246:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2248:	7d 8d       	ldd	r23, Y+29	; 0x1d
    224a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    224e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    2252:	6c 8f       	std	Y+28, r22	; 0x1c
    2254:	7d 8f       	std	Y+29, r23	; 0x1d
    2256:	8e 8f       	std	Y+30, r24	; 0x1e
    2258:	9f 8f       	std	Y+31, r25	; 0x1f
						rightIntError -= thetaDiff;
    225a:	a3 01       	movw	r20, r6
    225c:	92 01       	movw	r18, r4
    225e:	68 a1       	ldd	r22, Y+32	; 0x20
    2260:	79 a1       	ldd	r23, Y+33	; 0x21
    2262:	8a a1       	ldd	r24, Y+34	; 0x22
    2264:	9b a1       	ldd	r25, Y+35	; 0x23
    2266:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    226a:	68 a3       	std	Y+32, r22	; 0x20
    226c:	79 a3       	std	Y+33, r23	; 0x21
    226e:	8a a3       	std	Y+34, r24	; 0x22
    2270:	9b a3       	std	Y+35, r25	; 0x23
						
						
						gRightWheelDirection = motorRightForward;
    2272:	86 e0       	ldi	r24, 0x06	; 6
    2274:	8f 87       	std	Y+15, r24	; 0x0f
						gLeftWheelDirection = motorLeftForward;
    2276:	b4 e0       	ldi	r27, 0x04	; 4
    2278:	be 87       	std	Y+14, r27	; 0x0e
						lastMovement = moveForward;
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	29 87       	std	Y+9, r18	; 0x09
    227e:	70 c0       	rjmp	.+224    	; 0x2360 <__stack+0x161>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	a9 01       	movw	r20, r18
    2286:	c3 01       	movw	r24, r6
    2288:	b2 01       	movw	r22, r4
    228a:	0e 94 93 31 	call	0x6326	; 0x6326 <__gesf2>
    228e:	88 23       	and	r24, r24
    2290:	a4 f1       	brlt	.+104    	; 0x22fa <__stack+0xfb>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2292:	2e ea       	ldi	r18, 0xAE	; 174
    2294:	37 e4       	ldi	r19, 0x47	; 71
    2296:	41 e6       	ldi	r20, 0x61	; 97
    2298:	5e e3       	ldi	r21, 0x3E	; 62
    229a:	c5 01       	movw	r24, r10
    229c:	b4 01       	movw	r22, r8
    229e:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    22a2:	2a e9       	ldi	r18, 0x9A	; 154
    22a4:	39 e9       	ldi	r19, 0x99	; 153
    22a6:	49 e9       	ldi	r20, 0x99	; 153
    22a8:	5e e3       	ldi	r21, 0x3E	; 62
    22aa:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    22ae:	6b 01       	movw	r12, r22
    22b0:	7c 01       	movw	r14, r24
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e2       	ldi	r20, 0x20	; 32
    22b8:	52 ec       	ldi	r21, 0xC2	; 194
    22ba:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    22be:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    22c2:	8b 01       	movw	r16, r22
							gLeftWheelDirection = motorLeftBackward;
    22c4:	85 e0       	ldi	r24, 0x05	; 5
    22c6:	8e 87       	std	Y+14, r24	; 0x0e
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	52 e4       	ldi	r21, 0x42	; 66
    22d0:	c7 01       	movw	r24, r14
    22d2:	b6 01       	movw	r22, r12
    22d4:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    22d8:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    22dc:	7b 01       	movw	r14, r22
							gRightWheelDirection = motorRightForward;
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	8f 87       	std	Y+15, r24	; 0x0f
							lastMovement = moveCounterClockwise;
    22e2:	84 e0       	ldi	r24, 0x04	; 4
    22e4:	89 87       	std	Y+9, r24	; 0x09
    22e6:	1c a2       	std	Y+36, r1	; 0x24
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    22e8:	18 a2       	std	Y+32, r1	; 0x20
    22ea:	19 a2       	std	Y+33, r1	; 0x21
    22ec:	1a a2       	std	Y+34, r1	; 0x22
    22ee:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    22f0:	1c 8e       	std	Y+28, r1	; 0x1c
    22f2:	1d 8e       	std	Y+29, r1	; 0x1d
    22f4:	1e 8e       	std	Y+30, r1	; 0x1e
    22f6:	1f 8e       	std	Y+31, r1	; 0x1f
    22f8:	33 c0       	rjmp	.+102    	; 0x2360 <__stack+0x161>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22fa:	2e ea       	ldi	r18, 0xAE	; 174
    22fc:	37 e4       	ldi	r19, 0x47	; 71
    22fe:	41 e6       	ldi	r20, 0x61	; 97
    2300:	5e e3       	ldi	r21, 0x3E	; 62
    2302:	c5 01       	movw	r24, r10
    2304:	b4 01       	movw	r22, r8
    2306:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    230a:	2a e9       	ldi	r18, 0x9A	; 154
    230c:	39 e9       	ldi	r19, 0x99	; 153
    230e:	49 e9       	ldi	r20, 0x99	; 153
    2310:	5e e3       	ldi	r21, 0x3E	; 62
    2312:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    2316:	6b 01       	movw	r12, r22
    2318:	7c 01       	movw	r14, r24
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	52 e4       	ldi	r21, 0x42	; 66
    2322:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2326:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    232a:	8b 01       	movw	r16, r22
							gLeftWheelDirection = motorLeftForward;
    232c:	94 e0       	ldi	r25, 0x04	; 4
    232e:	9e 87       	std	Y+14, r25	; 0x0e
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	52 ec       	ldi	r21, 0xC2	; 194
    2338:	c7 01       	movw	r24, r14
    233a:	b6 01       	movw	r22, r12
    233c:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2340:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    2344:	7b 01       	movw	r14, r22
							gRightWheelDirection = motorRightBackward;
    2346:	85 e0       	ldi	r24, 0x05	; 5
    2348:	8f 87       	std	Y+15, r24	; 0x0f
							lastMovement = moveClockwise;
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	89 87       	std	Y+9, r24	; 0x09
    234e:	1c a2       	std	Y+36, r1	; 0x24
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2350:	18 a2       	std	Y+32, r1	; 0x20
    2352:	19 a2       	std	Y+33, r1	; 0x21
    2354:	1a a2       	std	Y+34, r1	; 0x22
    2356:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2358:	1c 8e       	std	Y+28, r1	; 0x1c
    235a:	1d 8e       	std	Y+29, r1	; 0x1d
    235c:	1e 8e       	std	Y+30, r1	; 0x1e
    235e:	1f 8e       	std	Y+31, r1	; 0x1f
						rightIntError = 0;
						
					}
					debug("Left speed: %i",LSpeed);
    2360:	1f 93       	push	r17
    2362:	0f 93       	push	r16
    2364:	3f 92       	push	r3
    2366:	2f 92       	push	r2
    2368:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					debug("Right speed: %i", RSpeed);
    236c:	ff 92       	push	r15
    236e:	ef 92       	push	r14
    2370:	ae e3       	ldi	r26, 0x3E	; 62
    2372:	b6 e0       	ldi	r27, 0x06	; 6
    2374:	bf 93       	push	r27
    2376:	af 93       	push	r26
    2378:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					debug("Left wheel direction: %i", gLeftWheelDirection);
    237c:	8e 85       	ldd	r24, Y+14	; 0x0e
    237e:	1f 92       	push	r1
    2380:	8f 93       	push	r24
    2382:	8e e4       	ldi	r24, 0x4E	; 78
    2384:	96 e0       	ldi	r25, 0x06	; 6
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					debug("Right wheel direction: %i", gRightWheelDirection);
    238e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2390:	1f 92       	push	r1
    2392:	8f 93       	push	r24
    2394:	87 e6       	ldi	r24, 0x67	; 103
    2396:	96 e0       	ldi	r25, 0x06	; 6
    2398:	9f 93       	push	r25
    239a:	8f 93       	push	r24
    239c:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    23a0:	9e 01       	movw	r18, r28
    23a2:	21 5f       	subi	r18, 0xF1	; 241
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	ae 01       	movw	r20, r28
    23a8:	42 5f       	subi	r20, 0xF2	; 242
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	b7 01       	movw	r22, r14
    23ae:	c8 01       	movw	r24, r16
    23b0:	c9 d3       	rcall	.+1938   	; 0x2b44 <vMotorMovementSwitch>
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    23bc:	00 e0       	ldi	r16, 0x00	; 0
    23be:	08 c0       	rjmp	.+16     	; 0x23d0 <__stack+0x1d1>
					debug("Right wheel direction: %i", gRightWheelDirection);
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    23c0:	01 11       	cpse	r16, r1
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <__stack+0x1cb>
						send_idle();
    23c4:	0e 94 14 20 	call	0x4028	; 0x4028 <send_idle>
						idleSendt = TRUE;
					}
					
					vMotorBrakeLeft();
    23c8:	01 e0       	ldi	r16, 0x01	; 1
    23ca:	ab d3       	rcall	.+1878   	; 0x2b22 <vMotorBrakeLeft>
					vMotorBrakeRight();
    23cc:	ae d3       	rcall	.+1884   	; 0x2b2a <vMotorBrakeRight>
    23ce:	19 86       	std	Y+9, r1	; 0x09
					lastMovement = moveStop;
    23d0:	20 e0       	ldi	r18, 0x00	; 0
				}
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	be 01       	movw	r22, r28
    23d8:	67 5f       	subi	r22, 0xF7	; 247
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <scanStatusQ>
    23e0:	90 91 3a 1a 	lds	r25, 0x1A3A	; 0x801a3a <scanStatusQ+0x1>
    23e4:	0e 94 39 1a 	call	0x3472	; 0x3472 <xQueueGenericSend>
    23e8:	69 cd       	rjmp	.-1326   	; 0x1ebc <vMainPoseControllerTask+0x52>

000023ea <vMainPoseEstimatorTask>:
    23ea:	cf 93       	push	r28
	} 
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	a2 97       	sbiw	r28, 0x22	; 34
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    23fe:	19 82       	std	Y+1, r1	; 0x01
    2400:	1a 82       	std	Y+2, r1	; 0x02
    2402:	1b 82       	std	Y+3, r1	; 0x03
    2404:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    2406:	0e 94 33 28 	call	0x5066	; 0x5066 <xTaskGetTickCount>
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    240e:	1e 8e       	std	Y+30, r1	; 0x1e
    2410:	1f 8e       	std	Y+31, r1	; 0x1f
    2412:	18 a2       	std	Y+32, r1	; 0x20
    2414:	19 a2       	std	Y+33, r1	; 0x21
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    2416:	1b 8a       	std	Y+19, r1	; 0x13
    2418:	1c 8a       	std	Y+20, r1	; 0x14
    241a:	1d 8a       	std	Y+21, r1	; 0x15
    241c:	1e 8a       	std	Y+22, r1	; 0x16
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    241e:	1f 86       	std	Y+15, r1	; 0x0f
    2420:	18 8a       	std	Y+16, r1	; 0x10
    2422:	19 8a       	std	Y+17, r1	; 0x11
    2424:	1a 8a       	std	Y+18, r1	; 0x12
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    2426:	1b 86       	std	Y+11, r1	; 0x0b
    2428:	1c 86       	std	Y+12, r1	; 0x0c
    242a:	1d 86       	std	Y+13, r1	; 0x0d
    242c:	1e 86       	std	Y+14, r1	; 0x0e


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    242e:	e1 2c       	mov	r14, r1
    2430:	f1 2c       	mov	r15, r1
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    2432:	81 2c       	mov	r8, r1
    2434:	91 2c       	mov	r9, r1
    2436:	41 2c       	mov	r4, r1
    2438:	31 2c       	mov	r3, r1
    243a:	21 2c       	mov	r2, r1
    243c:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    243e:	68 e2       	ldi	r22, 0x28	; 40
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	ce 01       	movw	r24, r28
    2444:	05 96       	adiw	r24, 0x05	; 5
    2446:	0e 94 e6 22 	call	0x45cc	; 0x45cc <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    244a:	80 91 34 1a 	lds	r24, 0x1A34	; 0x801a34 <gHandshook>
    244e:	88 23       	and	r24, r24
    2450:	09 f4       	brne	.+2      	; 0x2454 <vMainPoseEstimatorTask+0x6a>
    2452:	8d c1       	rjmp	.+794    	; 0x276e <vMainPoseEstimatorTask+0x384>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	4f e0       	ldi	r20, 0x0F	; 15
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xTickMutex>
    2462:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xTickMutex+0x1>
    2466:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    246a:	60 90 27 1a 	lds	r6, 0x1A27	; 0x801a27 <gLeftWheelTicks>
    246e:	70 90 28 1a 	lds	r7, 0x1A28	; 0x801a28 <gLeftWheelTicks+0x1>
                rightWheelTicks = gRightWheelTicks;
    2472:	00 91 29 1a 	lds	r16, 0x1A29	; 0x801a29 <gRightWheelTicks>
    2476:	10 91 2a 1a 	lds	r17, 0x1A2A	; 0x801a2a <gRightWheelTicks+0x1>
            xSemaphoreGive(xTickMutex);
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xTickMutex>
    2482:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xTickMutex+0x1>
    2486:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    248a:	b3 01       	movw	r22, r6
    248c:	68 19       	sub	r22, r8
    248e:	79 09       	sbc	r23, r9
    2490:	07 2e       	mov	r0, r23
    2492:	00 0c       	add	r0, r0
    2494:	88 0b       	sbc	r24, r24
    2496:	99 0b       	sbc	r25, r25
    2498:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    249c:	28 ef       	ldi	r18, 0xF8	; 248
    249e:	33 e5       	ldi	r19, 0x53	; 83
    24a0:	43 e2       	ldi	r20, 0x23	; 35
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    24a8:	4b 01       	movw	r8, r22
    24aa:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    24ac:	b8 01       	movw	r22, r16
    24ae:	6e 19       	sub	r22, r14
    24b0:	7f 09       	sbc	r23, r15
    24b2:	07 2e       	mov	r0, r23
    24b4:	00 0c       	add	r0, r0
    24b6:	88 0b       	sbc	r24, r24
    24b8:	99 0b       	sbc	r25, r25
    24ba:	0e 94 85 30 	call	0x610a	; 0x610a <__floatsisf>
    24be:	28 ef       	ldi	r18, 0xF8	; 248
    24c0:	33 e5       	ldi	r19, 0x53	; 83
    24c2:	43 e2       	ldi	r20, 0x23	; 35
    24c4:	5f e3       	ldi	r21, 0x3F	; 63
    24c6:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    24ca:	6b 01       	movw	r12, r22
    24cc:	7c 01       	movw	r14, r24
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
            				   
					   
            float dRobot = (dLeft + dRight) / 2;           
    24ce:	9b 01       	movw	r18, r22
    24d0:	ac 01       	movw	r20, r24
    24d2:	c5 01       	movw	r24, r10
    24d4:	b4 01       	movw	r22, r8
    24d6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    24e6:	6f 8b       	std	Y+23, r22	; 0x17
    24e8:	78 8f       	std	Y+24, r23	; 0x18
    24ea:	89 8f       	std	Y+25, r24	; 0x19
    24ec:	9a 8f       	std	Y+26, r25	; 0x1a
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    24ee:	a5 01       	movw	r20, r10
    24f0:	94 01       	movw	r18, r8
    24f2:	c7 01       	movw	r24, r14
    24f4:	b6 01       	movw	r22, r12
    24f6:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	43 e1       	ldi	r20, 0x13	; 19
    2500:	53 e4       	ldi	r21, 0x43	; 67
    2502:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    2506:	4b 01       	movw	r8, r22
    2508:	5c 01       	movw	r10, r24
            
  
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    250a:	66 d9       	rcall	.-3380   	; 0x17d8 <fIMU_readFloatGyroZ>
    250c:	2b 89       	ldd	r18, Y+19	; 0x13
    250e:	3c 89       	ldd	r19, Y+20	; 0x14
    2510:	4d 89       	ldd	r20, Y+21	; 0x15
    2512:	5e 89       	ldd	r21, Y+22	; 0x16
    2514:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    2518:	6b 01       	movw	r12, r22
    251a:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    251c:	9f 77       	andi	r25, 0x7F	; 127
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <__cmpsf2>
    252a:	88 23       	and	r24, r24
    252c:	4c f0       	brlt	.+18     	; 0x2540 <vMainPoseEstimatorTask+0x156>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	8a a3       	std	Y+34, r24	; 0x22
                gyroWeight = 0.75; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders  UPDATE: ENDRET I GEIRS KODE TIL 0.75
    2532:	1f 82       	std	Y+7, r1	; 0x07
    2534:	1b 8e       	std	Y+27, r1	; 0x1b
    2536:	80 e4       	ldi	r24, 0x40	; 64
    2538:	8c 8f       	std	Y+28, r24	; 0x1c
    253a:	8f e3       	ldi	r24, 0x3F	; 63
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
    253e:	05 c0       	rjmp	.+10     	; 0x254a <vMainPoseEstimatorTask+0x160>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    2540:	1a a2       	std	Y+34, r1	; 0x22
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    2542:	4f 82       	std	Y+7, r4	; 0x07
    2544:	3b 8e       	std	Y+27, r3	; 0x1b
    2546:	2c 8e       	std	Y+28, r2	; 0x1c
    2548:	5d 8e       	std	Y+29, r5	; 0x1d
            
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
           		
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    254a:	2f 81       	ldd	r18, Y+7	; 0x07
    254c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    254e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2550:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	80 e8       	ldi	r24, 0x80	; 128
    2558:	9f e3       	ldi	r25, 0x3F	; 63
    255a:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    255e:	a5 01       	movw	r20, r10
    2560:	94 01       	movw	r18, r8
    2562:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2566:	4b 01       	movw	r8, r22
    2568:	5c 01       	movw	r10, r24
    256a:	24 ed       	ldi	r18, 0xD4	; 212
    256c:	32 e0       	ldi	r19, 0x02	; 2
    256e:	47 e3       	ldi	r20, 0x37	; 55
    2570:	5a e3       	ldi	r21, 0x3A	; 58
    2572:	c7 01       	movw	r24, r14
    2574:	b6 01       	movw	r22, r12
    2576:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    257a:	2f 81       	ldd	r18, Y+7	; 0x07
    257c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    257e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2580:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2582:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    2586:	a5 01       	movw	r20, r10
    2588:	94 01       	movw	r18, r8
    258a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    258e:	4b 01       	movw	r8, r22
    2590:	5c 01       	movw	r10, r24
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    2592:	c9 80       	ldd	r12, Y+1	; 0x01
    2594:	da 80       	ldd	r13, Y+2	; 0x02
    2596:	eb 80       	ldd	r14, Y+3	; 0x03
    2598:	fc 80       	ldd	r15, Y+4	; 0x04
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    25a6:	a7 01       	movw	r20, r14
    25a8:	96 01       	movw	r18, r12
    25aa:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    25ae:	6f 83       	std	Y+7, r22	; 0x07
    25b0:	78 87       	std	Y+8, r23	; 0x08
    25b2:	89 87       	std	Y+9, r24	; 0x09
    25b4:	9a 87       	std	Y+10, r25	; 0x0a
    25b6:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <cos>
    25ba:	9b 01       	movw	r18, r22
    25bc:	ac 01       	movw	r20, r24
    25be:	6f 89       	ldd	r22, Y+23	; 0x17
    25c0:	78 8d       	ldd	r23, Y+24	; 0x18
    25c2:	89 8d       	ldd	r24, Y+25	; 0x19
    25c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25c6:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    25ca:	9b 01       	movw	r18, r22
    25cc:	ac 01       	movw	r20, r24
    25ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    25da:	6b 87       	std	Y+11, r22	; 0x0b
    25dc:	7c 87       	std	Y+12, r23	; 0x0c
    25de:	8d 87       	std	Y+13, r24	; 0x0d
    25e0:	9e 87       	std	Y+14, r25	; 0x0e
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	0e 94 01 32 	call	0x6402	; 0x6402 <sin>
    25ee:	9b 01       	movw	r18, r22
    25f0:	ac 01       	movw	r20, r24
    25f2:	6f 89       	ldd	r22, Y+23	; 0x17
    25f4:	78 8d       	ldd	r23, Y+24	; 0x18
    25f6:	89 8d       	ldd	r24, Y+25	; 0x19
    25f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25fa:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    25fe:	9b 01       	movw	r18, r22
    2600:	ac 01       	movw	r20, r24
    2602:	6f 85       	ldd	r22, Y+15	; 0x0f
    2604:	78 89       	ldd	r23, Y+16	; 0x10
    2606:	89 89       	ldd	r24, Y+17	; 0x11
    2608:	9a 89       	ldd	r25, Y+18	; 0x12
    260a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    260e:	6f 87       	std	Y+15, r22	; 0x0f
    2610:	78 8b       	std	Y+16, r23	; 0x10
    2612:	89 8b       	std	Y+17, r24	; 0x11
    2614:	9a 8b       	std	Y+18, r25	; 0x12

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    2616:	a7 01       	movw	r20, r14
    2618:	96 01       	movw	r18, r12
    261a:	c5 01       	movw	r24, r10
    261c:	b4 01       	movw	r22, r8
    261e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    2622:	69 83       	std	Y+1, r22	; 0x01
    2624:	7a 83       	std	Y+2, r23	; 0x02
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    262a:	2f ee       	ldi	r18, 0xEF	; 239
    262c:	3c ed       	ldi	r19, 0xDC	; 220
    262e:	4b e2       	ldi	r20, 0x2B	; 43
    2630:	5b e3       	ldi	r21, 0x3B	; 59
    2632:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2634:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2636:	88 a1       	ldd	r24, Y+32	; 0x20
    2638:	99 a1       	ldd	r25, Y+33	; 0x21
    263a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    263e:	6b 01       	movw	r12, r22
    2640:	7c 01       	movw	r14, r24
	            // If we have a reading over this, we can safely ignore the compass
	            // Ignore compass while driving in a straight line
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
            }
            else if ((robot_is_turning == FALSE) && (dRobot == 0)){
    2642:	8a a1       	ldd	r24, Y+34	; 0x22
    2644:	81 11       	cpse	r24, r1
    2646:	22 c0       	rjmp	.+68     	; 0x268c <vMainPoseEstimatorTask+0x2a2>
    2648:	24 2d       	mov	r18, r4
    264a:	33 2d       	mov	r19, r3
    264c:	42 2d       	mov	r20, r2
    264e:	55 2d       	mov	r21, r5
    2650:	6f 89       	ldd	r22, Y+23	; 0x17
    2652:	78 8d       	ldd	r23, Y+24	; 0x18
    2654:	89 8d       	ldd	r24, Y+25	; 0x19
    2656:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2658:	0e 94 e3 2f 	call	0x5fc6	; 0x5fc6 <__cmpsf2>
    265c:	81 11       	cpse	r24, r1
    265e:	16 c0       	rjmp	.+44     	; 0x268c <vMainPoseEstimatorTask+0x2a2>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
    2660:	24 2d       	mov	r18, r4
    2662:	33 2d       	mov	r19, r3
    2664:	42 2d       	mov	r20, r2
    2666:	55 2d       	mov	r21, r5
    2668:	c7 01       	movw	r24, r14
    266a:	b6 01       	movw	r22, r12
    266c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    2670:	9b 01       	movw	r18, r22
    2672:	ac 01       	movw	r20, r24
    2674:	c7 01       	movw	r24, r14
    2676:	b6 01       	movw	r22, r12
    2678:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    267c:	b6 2e       	mov	r11, r22
    267e:	a7 2e       	mov	r10, r23
    2680:	98 2e       	mov	r9, r24
    2682:	89 2e       	mov	r8, r25
	            vLED_singleHigh(ledYELLOW);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	b0 d8       	rcall	.-3744   	; 0x17ea <vLED_singleHigh>
    268a:	07 c0       	rjmp	.+14     	; 0x269a <vMainPoseEstimatorTask+0x2b0>
            }
            else{
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	c6 d8       	rcall	.-3700   	; 0x181e <vLED_singleLow>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
	            vLED_singleHigh(ledYELLOW);
            }
            else{
	            kalmanGain = 0;
    2692:	b4 2c       	mov	r11, r4
    2694:	a3 2c       	mov	r10, r3
    2696:	92 2c       	mov	r9, r2
    2698:	85 2c       	mov	r8, r5
	            vLED_singleLow(ledYELLOW);
            }         
            //*/
           
            predictedTheta  += kalmanGain*(error);
    269a:	24 2d       	mov	r18, r4
    269c:	33 2d       	mov	r19, r3
    269e:	42 2d       	mov	r20, r2
    26a0:	55 2d       	mov	r21, r5
    26a2:	6b 2d       	mov	r22, r11
    26a4:	7a 2d       	mov	r23, r10
    26a6:	89 2d       	mov	r24, r9
    26a8:	98 2d       	mov	r25, r8
    26aa:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    26ae:	9b 01       	movw	r18, r22
    26b0:	ac 01       	movw	r20, r24
    26b2:	69 81       	ldd	r22, Y+1	; 0x01
    26b4:	7a 81       	ldd	r23, Y+2	; 0x02
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    26be:	69 83       	std	Y+1, r22	; 0x01
    26c0:	7a 83       	std	Y+2, r23	; 0x02
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	9c 83       	std	Y+4, r25	; 0x04
			vFunc_Inf2pi(&predictedTheta);            
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    26ce:	2b 2d       	mov	r18, r11
    26d0:	3a 2d       	mov	r19, r10
    26d2:	49 2d       	mov	r20, r9
    26d4:	58 2d       	mov	r21, r8
    26d6:	60 e0       	ldi	r22, 0x00	; 0
    26d8:	70 e0       	ldi	r23, 0x00	; 0
    26da:	80 e8       	ldi	r24, 0x80	; 128
    26dc:	9f e3       	ldi	r25, 0x3F	; 63
    26de:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__subsf3>
    26e2:	a7 01       	movw	r20, r14
    26e4:	96 01       	movw	r18, r12
    26e6:	0e 94 9e 31 	call	0x633c	; 0x633c <__mulsf3>
    26ea:	6e 8f       	std	Y+30, r22	; 0x1e
    26ec:	7f 8f       	std	Y+31, r23	; 0x1f
    26ee:	88 a3       	std	Y+32, r24	; 0x20
    26f0:	99 a3       	std	Y+33, r25	; 0x21

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	4f e0       	ldi	r20, 0x0F	; 15
    26f6:	50 e0       	ldi	r21, 0x00	; 0
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    2700:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    2704:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
                gTheta_hat = predictedTheta;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	ab 81       	ldd	r26, Y+3	; 0x03
    270e:	bc 81       	ldd	r27, Y+4	; 0x04
    2710:	80 93 2f 1a 	sts	0x1A2F, r24	; 0x801a2f <gTheta_hat>
    2714:	90 93 30 1a 	sts	0x1A30, r25	; 0x801a30 <gTheta_hat+0x1>
    2718:	a0 93 31 1a 	sts	0x1A31, r26	; 0x801a31 <gTheta_hat+0x2>
    271c:	b0 93 32 1a 	sts	0x1A32, r27	; 0x801a32 <gTheta_hat+0x3>
                gX_hat = predictedX;
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    272c:	70 93 2e 1a 	sts	0x1A2E, r23	; 0x801a2e <gX_hat+0x1>
    2730:	60 93 2d 1a 	sts	0x1A2D, r22	; 0x801a2d <gX_hat>
                gY_hat = predictedY;
    2734:	6f 85       	ldd	r22, Y+15	; 0x0f
    2736:	78 89       	ldd	r23, Y+16	; 0x10
    2738:	89 89       	ldd	r24, Y+17	; 0x11
    273a:	9a 89       	ldd	r25, Y+18	; 0x12
    273c:	0e 94 52 30 	call	0x60a4	; 0x60a4 <__fixsfsi>
    2740:	70 93 2c 1a 	sts	0x1A2C, r23	; 0x801a2c <gY_hat+0x1>
    2744:	60 93 2b 1a 	sts	0x1A2B, r22	; 0x801a2b <gY_hat>
            xSemaphoreGive(xPoseMutex);
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	80 91 a7 1b 	lds	r24, 0x1BA7	; 0x801ba7 <xPoseMutex>
    2750:	90 91 a8 1b 	lds	r25, 0x1BA8	; 0x801ba8 <xPoseMutex+0x1>
    2754:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xControllerBSem>
    2760:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xControllerBSem+0x1>
    2764:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    2768:	78 01       	movw	r14, r16
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    276a:	43 01       	movw	r8, r6
    276c:	68 ce       	rjmp	.-816    	; 0x243e <vMainPoseEstimatorTask+0x54>
    276e:	05 e6       	ldi	r16, 0x65	; 101
    2770:	10 e0       	ldi	r17, 0x00	; 0
    2772:	a4 2c       	mov	r10, r4
    2774:	b3 2c       	mov	r11, r3
    2776:	c2 2c       	mov	r12, r2
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    2778:	d5 2c       	mov	r13, r5
    277a:	2e d8       	rcall	.-4004   	; 0x17d8 <fIMU_readFloatGyroZ>
    277c:	9b 01       	movw	r18, r22
    277e:	ac 01       	movw	r20, r24
    2780:	6a 2d       	mov	r22, r10
    2782:	7b 2d       	mov	r23, r11
    2784:	8c 2d       	mov	r24, r12
    2786:	9d 2d       	mov	r25, r13
    2788:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__addsf3>
    278c:	a6 2e       	mov	r10, r22
    278e:	b7 2e       	mov	r11, r23
    2790:	c8 2e       	mov	r12, r24
    2792:	d9 2e       	mov	r13, r25
    2794:	01 50       	subi	r16, 0x01	; 1
    2796:	11 09       	sbc	r17, r1
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    2798:	81 f7       	brne	.-32     	; 0x277a <vMainPoseEstimatorTask+0x390>
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    279a:	84 2d       	mov	r24, r4
    279c:	93 2d       	mov	r25, r3
    279e:	a2 2d       	mov	r26, r2
    27a0:	b5 2d       	mov	r27, r5
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	ab 83       	std	Y+3, r26	; 0x03
    27a8:	bc 83       	std	Y+4, r27	; 0x04
            gyroOffset = gyro / (float)i;       
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a ec       	ldi	r20, 0xCA	; 202
    27b0:	52 e4       	ldi	r21, 0x42	; 66
    27b2:	6a 2d       	mov	r22, r10
    27b4:	7b 2d       	mov	r23, r11
    27b6:	8c 2d       	mov	r24, r12
    27b8:	9d 2d       	mov	r25, r13
    27ba:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <__divsf3>
    27be:	6b 8b       	std	Y+19, r22	; 0x13
    27c0:	7c 8b       	std	Y+20, r23	; 0x14
    27c2:	8d 8b       	std	Y+21, r24	; 0x15
    27c4:	9e 8b       	std	Y+22, r25	; 0x16
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    27c6:	4f 86       	std	Y+15, r4	; 0x0f
    27c8:	38 8a       	std	Y+16, r3	; 0x10
    27ca:	29 8a       	std	Y+17, r2	; 0x11
    27cc:	5a 8a       	std	Y+18, r5	; 0x12
                gyro+= fIMU_readFloatGyroZ();
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    27ce:	4b 86       	std	Y+11, r4	; 0x0b
    27d0:	3c 86       	std	Y+12, r3	; 0x0c
    27d2:	2d 86       	std	Y+13, r2	; 0x0d
    27d4:	5e 86       	std	Y+14, r5	; 0x0e
    27d6:	33 ce       	rjmp	.-922    	; 0x243e <vMainPoseEstimatorTask+0x54>

000027d8 <vApplicationStackOverflowHook>:
}
#endif
*/
/*  In case of stack overflow, disable all interrupts and handle it  */
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName){
    cli();
    27d8:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	39 d8       	rcall	.-3982   	; 0x1852 <vLED_toggle>
    27e0:	fc cf       	rjmp	.-8      	; 0x27da <vApplicationStackOverflowHook+0x2>

000027e2 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    27e2:	0e 94 ef 0b 	call	0x17de	; 0x17de <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    27ee:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <vUSART_init>
    network_init();
    27f2:	54 d2       	rcall	.+1192   	; 0x2c9c <network_init>
    arq_init();
    27f4:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    27f8:	85 e4       	ldi	r24, 0x45	; 69
    27fa:	9f e1       	ldi	r25, 0x1F	; 31
    27fc:	0e 94 31 21 	call	0x4262	; 0x4262 <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	0e 94 a9 20 	call	0x4152	; 0x4152 <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    2806:	0e 94 a5 07 	call	0xf4a	; 0xf4a <vDistSens_init>
    /* Initialize motor controller */
    vMotor_init();
    280a:	08 d1       	rcall	.+528    	; 0x2a1c <vMotor_init>
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
	vLED_singleHigh(ledGREEN);
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    sIMU_begin(); 
    2814:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sIMU_begin>
   vLED_singleLow(ledGREEN);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	00 d8       	rcall	.-4096   	; 0x181e <vLED_singleLow>
   vLED_singleLow(ledRED);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
	
	/* ************************************* TESTING **************************************/
	
	
	/* Initialize RTOS utilities  */
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	4e d4       	rcall	.+2204   	; 0x30ca <xQueueGenericCreate>
    282e:	90 93 3e 1a 	sts	0x1A3E, r25	; 0x801a3e <movementQ+0x1>
    2832:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPoint)); // For setpoints to controller
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	68 e0       	ldi	r22, 0x08	; 8
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	46 d4       	rcall	.+2188   	; 0x30ca <xQueueGenericCreate>
    283e:	90 93 3c 1a 	sts	0x1A3C, r25	; 0x801a3c <poseControllerQ+0x1>
    2842:	80 93 3b 1a 	sts	0x1A3B, r24	; 0x801a3b <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    2846:	40 e0       	ldi	r20, 0x00	; 0
    2848:	61 e0       	ldi	r22, 0x01	; 1
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	3e d4       	rcall	.+2172   	; 0x30ca <xQueueGenericCreate>
    284e:	90 93 3a 1a 	sts	0x1A3A, r25	; 0x801a3a <scanStatusQ+0x1>
    2852:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	61 e0       	ldi	r22, 0x01	; 1
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	36 d4       	rcall	.+2156   	; 0x30ca <xQueueGenericCreate>
    285e:	90 93 38 1a 	sts	0x1A38, r25	; 0x801a38 <actuationQ+0x1>
    2862:	80 93 37 1a 	sts	0x1A37, r24	; 0x801a37 <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	82 d4       	rcall	.+2308   	; 0x316e <xQueueCreateMutex>
    286a:	90 93 a8 1b 	sts	0x1BA8, r25	; 0x801ba8 <xPoseMutex+0x1>
    286e:	80 93 a7 1b 	sts	0x1BA7, r24	; 0x801ba7 <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	7c d4       	rcall	.+2296   	; 0x316e <xQueueCreateMutex>
    2876:	90 93 a4 1b 	sts	0x1BA4, r25	; 0x801ba4 <xUartMutex+0x1>
    287a:	80 93 a3 1b 	sts	0x1BA3, r24	; 0x801ba3 <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	76 d4       	rcall	.+2284   	; 0x316e <xQueueCreateMutex>
    2882:	90 93 a2 1b 	sts	0x1BA2, r25	; 0x801ba2 <xTickMutex+0x1>
    2886:	80 93 a1 1b 	sts	0x1BA1, r24	; 0x801ba1 <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    288a:	43 e0       	ldi	r20, 0x03	; 3
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	1c d4       	rcall	.+2104   	; 0x30ca <xQueueGenericCreate>
    2892:	90 93 a0 1b 	sts	0x1BA0, r25	; 0x801ba0 <xControllerBSem+0x1>
    2896:	80 93 9f 1b 	sts	0x1B9F, r24	; 0x801b9f <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    289a:	43 e0       	ldi	r20, 0x03	; 3
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	14 d4       	rcall	.+2088   	; 0x30ca <xQueueGenericCreate>
    28a2:	90 93 a6 1b 	sts	0x1BA6, r25	; 0x801ba6 <xCommandReadyBSem+0x1>
    28a6:	80 93 a5 1b 	sts	0x1BA5, r24	; 0x801ba5 <xCommandReadyBSem>
    28aa:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    28ac:	b1 2c       	mov	r11, r1
    28ae:	c1 2c       	mov	r12, r1
    28b0:	d1 2c       	mov	r13, r1
    28b2:	e1 2c       	mov	r14, r1
    28b4:	f1 2c       	mov	r15, r1
    28b6:	04 e0       	ldi	r16, 0x04	; 4
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	4c e2       	ldi	r20, 0x2C	; 44
    28be:	51 e0       	ldi	r21, 0x01	; 1
    28c0:	61 e8       	ldi	r22, 0x81	; 129
    28c2:	76 e0       	ldi	r23, 0x06	; 6
    28c4:	82 ed       	ldi	r24, 0xD2	; 210
    28c6:	9d e0       	ldi	r25, 0x0D	; 13
    28c8:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    28cc:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	4c e2       	ldi	r20, 0x2C	; 44
    28d4:	51 e0       	ldi	r21, 0x01	; 1
    28d6:	6a e8       	ldi	r22, 0x8A	; 138
    28d8:	76 e0       	ldi	r23, 0x06	; 6
    28da:	80 ed       	ldi	r24, 0xD0	; 208
    28dc:	9c e0       	ldi	r25, 0x0C	; 12
    28de:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    28e2:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4c e2       	ldi	r20, 0x2C	; 44
    28ea:	51 e0       	ldi	r21, 0x01	; 1
    28ec:	6f e8       	ldi	r22, 0x8F	; 143
    28ee:	76 e0       	ldi	r23, 0x06	; 6
    28f0:	85 e3       	ldi	r24, 0x35	; 53
    28f2:	9f e0       	ldi	r25, 0x0F	; 15
    28f4:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    28f8:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4c e2       	ldi	r20, 0x2C	; 44
    2900:	51 e0       	ldi	r21, 0x01	; 1
    2902:	67 e9       	ldi	r22, 0x97	; 151
    2904:	76 e0       	ldi	r23, 0x06	; 6
    2906:	85 ef       	ldi	r24, 0xF5	; 245
    2908:	91 e1       	ldi	r25, 0x11	; 17
    290a:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    290e:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4c e2       	ldi	r20, 0x2C	; 44
    2916:	51 e0       	ldi	r21, 0x01	; 1
    2918:	6f e9       	ldi	r22, 0x9F	; 159
    291a:	76 e0       	ldi	r23, 0x06	; 6
    291c:	83 ee       	ldi	r24, 0xE3	; 227
    291e:	9d e0       	ldi	r25, 0x0D	; 13
    2920:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
    2924:	78 94       	sei
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif
    
   

    sei();
    2926:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <vTaskStartScheduler>
    //vLED_singleLow(ledRED);
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    //  Start scheduler 
    vTaskStartScheduler();
    292a:	c5 ea       	ldi	r28, 0xA5	; 165
	

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
        debug("RAM fail\n");
    292c:	d6 e0       	ldi	r29, 0x06	; 6
    292e:	f8 94       	cli
	
	

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
    2930:	df 93       	push	r29
        debug("RAM fail\n");
    2932:	cf 93       	push	r28
    2934:	0e 94 38 20 	call	0x4070	; 0x4070 <debug>
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	f8 cf       	rjmp	.-16     	; 0x292e <main+0x14c>

0000293e <__vector_4>:
    293e:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    2940:	0f 92       	push	r0
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	0f 92       	push	r0
    2946:	11 24       	eor	r1, r1
    2948:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    294a:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <gISR_leftWheelTicks>
    294e:	8f 5f       	subi	r24, 0xFF	; 255
    2950:	80 93 35 1a 	sts	0x1A35, r24	; 0x801a35 <gISR_leftWheelTicks>
}
    2954:	8f 91       	pop	r24
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    296c:	80 91 36 1a 	lds	r24, 0x1A36	; 0x801a36 <gISR_rightWheelTicks>
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	80 93 36 1a 	sts	0x1A36, r24	; 0x801a36 <gISR_rightWheelTicks>
}
    2976:	8f 91       	pop	r24
    2978:	0f 90       	pop	r0
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	0f 90       	pop	r0
    297e:	1f 90       	pop	r1
    2980:	18 95       	reti

00002982 <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    2982:	1f 92       	push	r1
    2984:	0f 92       	push	r0
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	0f 92       	push	r0
    298a:	11 24       	eor	r1, r1
    298c:	0b b6       	in	r0, 0x3b	; 59
    298e:	0f 92       	push	r0
    2990:	2f 93       	push	r18
    2992:	3f 93       	push	r19
    2994:	4f 93       	push	r20
    2996:	5f 93       	push	r21
    2998:	6f 93       	push	r22
    299a:	7f 93       	push	r23
    299c:	8f 93       	push	r24
    299e:	9f 93       	push	r25
    29a0:	af 93       	push	r26
    29a2:	bf 93       	push	r27
    29a4:	ef 93       	push	r30
    29a6:	ff 93       	push	r31
    if (nRFconnected){
    29a8:	64 99       	sbic	0x0c, 4	; 12
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <__vector_5+0x34>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    29b4:	18 c0       	rjmp	.+48     	; 0x29e6 <__vector_5+0x64>
        
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    29b6:	10 92 34 1a 	sts	0x1A34, r1	; 0x801a34 <gHandshook>
        gPaused = FALSE;
    29ba:	10 92 33 1a 	sts	0x1A33, r1	; 0x801a33 <gPaused>
        vLED_singleLow(ledGREEN);
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledYELLOW);
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledRED);
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	80 91 a5 1b 	lds	r24, 0x1BA5	; 0x801ba5 <xCommandReadyBSem>
    29de:	90 91 a6 1b 	lds	r25, 0x1BA6	; 0x801ba6 <xCommandReadyBSem+0x1>
    29e2:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xControllerBSem>
    29ee:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xControllerBSem+0x1>
    29f2:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <xQueueGiveFromISR>
}
    29f6:	ff 91       	pop	r31
    29f8:	ef 91       	pop	r30
    29fa:	bf 91       	pop	r27
    29fc:	af 91       	pop	r26
    29fe:	9f 91       	pop	r25
    2a00:	8f 91       	pop	r24
    2a02:	7f 91       	pop	r23
    2a04:	6f 91       	pop	r22
    2a06:	5f 91       	pop	r21
    2a08:	4f 91       	pop	r20
    2a0a:	3f 91       	pop	r19
    2a0c:	2f 91       	pop	r18
    2a0e:	0f 90       	pop	r0
    2a10:	0b be       	out	0x3b, r0	; 59
    2a12:	0f 90       	pop	r0
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	0f 90       	pop	r0
    2a18:	1f 90       	pop	r1
    2a1a:	18 95       	reti

00002a1c <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    2a1c:	27 9a       	sbi	0x04, 7	; 4
    2a1e:	84 b1       	in	r24, 0x04	; 4
    2a20:	80 63       	ori	r24, 0x30	; 48
    2a22:	84 b9       	out	0x04, r24	; 4
    2a24:	26 9a       	sbi	0x04, 6	; 4
    2a26:	e1 e0       	ldi	r30, 0x01	; 1
    2a28:	f1 e0       	ldi	r31, 0x01	; 1
    2a2a:	80 81       	ld	r24, Z
    2a2c:	80 66       	ori	r24, 0x60	; 96
    2a2e:	80 83       	st	Z, r24
    2a30:	2f 98       	cbi	0x05, 7	; 5
    2a32:	2e 98       	cbi	0x05, 6	; 5
    2a34:	e2 e0       	ldi	r30, 0x02	; 2
    2a36:	f1 e0       	ldi	r31, 0x01	; 1
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 79       	andi	r24, 0x9F	; 159
    2a3c:	80 83       	st	Z, r24
    2a3e:	85 b1       	in	r24, 0x05	; 5
    2a40:	8f 7c       	andi	r24, 0xCF	; 207
    2a42:	85 b9       	out	0x05, r24	; 5
    2a44:	8a b1       	in	r24, 0x0a	; 10
    2a46:	8a b9       	out	0x0a, r24	; 10
    2a48:	8b b1       	in	r24, 0x0b	; 11
    2a4a:	8c 60       	ori	r24, 0x0C	; 12
    2a4c:	8b b9       	out	0x0b, r24	; 11
    2a4e:	6c 98       	cbi	0x0d, 4	; 13
    2a50:	8d b3       	in	r24, 0x1d	; 29
    2a52:	8d bb       	out	0x1d, r24	; 29
    2a54:	e9 e6       	ldi	r30, 0x69	; 105
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	80 6f       	ori	r24, 0xF0	; 240
    2a5c:	80 83       	st	Z, r24
    2a5e:	ea e6       	ldi	r30, 0x6A	; 106
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	81 60       	ori	r24, 0x01	; 1
    2a66:	80 83       	st	Z, r24
    2a68:	8c e1       	ldi	r24, 0x1C	; 28
    2a6a:	8c bb       	out	0x1c, r24	; 28
    2a6c:	8d b3       	in	r24, 0x1d	; 29
    2a6e:	8c 61       	ori	r24, 0x1C	; 28
    2a70:	8d bb       	out	0x1d, r24	; 29
    2a72:	84 b5       	in	r24, 0x24	; 36
    2a74:	80 68       	ori	r24, 0x80	; 128
    2a76:	84 bd       	out	0x24, r24	; 36
    2a78:	e0 e8       	ldi	r30, 0x80	; 128
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 62       	ori	r24, 0x20	; 32
    2a80:	80 83       	st	Z, r24
    2a82:	85 b5       	in	r24, 0x25	; 37
    2a84:	85 bd       	out	0x25, r24	; 37
    2a86:	84 b5       	in	r24, 0x24	; 36
    2a88:	83 60       	ori	r24, 0x03	; 3
    2a8a:	84 bd       	out	0x24, r24	; 36
    2a8c:	a1 e8       	ldi	r26, 0x81	; 129
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	8c 91       	ld	r24, X
    2a92:	88 60       	ori	r24, 0x08	; 8
    2a94:	8c 93       	st	X, r24
    2a96:	80 81       	ld	r24, Z
    2a98:	81 60       	ori	r24, 0x01	; 1
    2a9a:	80 83       	st	Z, r24
    2a9c:	85 b5       	in	r24, 0x25	; 37
    2a9e:	82 60       	ori	r24, 0x02	; 2
    2aa0:	85 bd       	out	0x25, r24	; 37
    2aa2:	8c 91       	ld	r24, X
    2aa4:	82 60       	ori	r24, 0x02	; 2
    2aa6:	8c 93       	st	X, r24
    2aa8:	80 81       	ld	r24, Z
    2aaa:	80 83       	st	Z, r24
    2aac:	e0 eb       	ldi	r30, 0xB0	; 176
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	80 83       	st	Z, r24
    2ab4:	80 81       	ld	r24, Z
    2ab6:	80 83       	st	Z, r24
    2ab8:	e0 ea       	ldi	r30, 0xA0	; 160
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	80 83       	st	Z, r24
    2ac0:	08 95       	ret

00002ac2 <vMotorMoveLeftForward>:
    2ac2:	87 bd       	out	0x27, r24	; 39
    2ac4:	2c 9a       	sbi	0x05, 4	; 5
    2ac6:	2d 98       	cbi	0x05, 5	; 5
    2ac8:	84 e0       	ldi	r24, 0x04	; 4
    2aca:	fb 01       	movw	r30, r22
    2acc:	80 83       	st	Z, r24
    2ace:	08 95       	ret

00002ad0 <vMotorMoveRightForward>:
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2ad6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2ada:	e2 e0       	ldi	r30, 0x02	; 2
    2adc:	f1 e0       	ldi	r31, 0x01	; 1
    2ade:	80 81       	ld	r24, Z
    2ae0:	80 64       	ori	r24, 0x40	; 64
    2ae2:	80 83       	st	Z, r24
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8f 7d       	andi	r24, 0xDF	; 223
    2ae8:	80 83       	st	Z, r24
    2aea:	86 e0       	ldi	r24, 0x06	; 6
    2aec:	fb 01       	movw	r30, r22
    2aee:	80 83       	st	Z, r24
    2af0:	08 95       	ret

00002af2 <vMotorMoveLeftBackward>:
    2af2:	87 bd       	out	0x27, r24	; 39
    2af4:	2c 98       	cbi	0x05, 4	; 5
    2af6:	2d 9a       	sbi	0x05, 5	; 5
    2af8:	85 e0       	ldi	r24, 0x05	; 5
    2afa:	fb 01       	movw	r30, r22
    2afc:	80 83       	st	Z, r24
    2afe:	08 95       	ret

00002b00 <vMotorMoveRightBackward>:
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2b06:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2b0a:	e2 e0       	ldi	r30, 0x02	; 2
    2b0c:	f1 e0       	ldi	r31, 0x01	; 1
    2b0e:	80 81       	ld	r24, Z
    2b10:	8f 7b       	andi	r24, 0xBF	; 191
    2b12:	80 83       	st	Z, r24
    2b14:	80 81       	ld	r24, Z
    2b16:	80 62       	ori	r24, 0x20	; 32
    2b18:	80 83       	st	Z, r24
    2b1a:	85 e0       	ldi	r24, 0x05	; 5
    2b1c:	fb 01       	movw	r30, r22
    2b1e:	80 83       	st	Z, r24
    2b20:	08 95       	ret

00002b22 <vMotorBrakeLeft>:
    2b22:	17 bc       	out	0x27, r1	; 39
    2b24:	2c 98       	cbi	0x05, 4	; 5
    2b26:	2d 98       	cbi	0x05, 5	; 5
    2b28:	08 95       	ret

00002b2a <vMotorBrakeRight>:
    2b2a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2b2e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2b32:	e2 e0       	ldi	r30, 0x02	; 2
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	80 81       	ld	r24, Z
    2b38:	8f 7b       	andi	r24, 0xBF	; 191
    2b3a:	80 83       	st	Z, r24
    2b3c:	80 81       	ld	r24, Z
    2b3e:	8f 7d       	andi	r24, 0xDF	; 223
    2b40:	80 83       	st	Z, r24
    2b42:	08 95       	ret

00002b44 <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	eb 01       	movw	r28, r22
    2b4e:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2b50:	18 16       	cp	r1, r24
    2b52:	19 06       	cpc	r1, r25
    2b54:	1c f4       	brge	.+6      	; 0x2b5c <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2b56:	ba 01       	movw	r22, r20
    2b58:	b4 df       	rcall	.-152    	; 0x2ac2 <vMotorMoveLeftForward>
    2b5a:	07 c0       	rjmp	.+14     	; 0x2b6a <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2b5c:	99 23       	and	r25, r25
    2b5e:	24 f4       	brge	.+8      	; 0x2b68 <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2b60:	ba 01       	movw	r22, r20
    2b62:	81 95       	neg	r24
    2b64:	c6 df       	rcall	.-116    	; 0x2af2 <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <vMotorMovementSwitch+0x26>
    2b68:	dc df       	rcall	.-72     	; 0x2b22 <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2b6a:	1c 16       	cp	r1, r28
    2b6c:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2b6e:	24 f4       	brge	.+8      	; 0x2b78 <vMotorMovementSwitch+0x34>
    2b70:	b8 01       	movw	r22, r16
    2b72:	8c 2f       	mov	r24, r28
    2b74:	ad df       	rcall	.-166    	; 0x2ad0 <vMotorMoveRightForward>
    2b76:	08 c0       	rjmp	.+16     	; 0x2b88 <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2b78:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <vMotorMovementSwitch+0x42>
    2b7c:	b8 01       	movw	r22, r16
    2b7e:	8c 2f       	mov	r24, r28
    2b80:	81 95       	neg	r24
    2b82:	be df       	rcall	.-132    	; 0x2b00 <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <vMotorMovementSwitch+0x44>
    2b86:	d1 df       	rcall	.-94     	; 0x2b2a <vMotorBrakeRight>
	
	
	
	

}
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	08 95       	ret

00002b92 <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2b92:	84 30       	cpi	r24, 0x04	; 4
    2b94:	19 f0       	breq	.+6      	; 0x2b9c <vMotorEncoderLeftTickFromISR+0xa>
    2b96:	85 30       	cpi	r24, 0x05	; 5
    2b98:	51 f0       	breq	.+20     	; 0x2bae <vMotorEncoderLeftTickFromISR+0x1c>
    2b9a:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2b9c:	46 95       	lsr	r20
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	80 81       	ld	r24, Z
    2ba2:	91 81       	ldd	r25, Z+1	; 0x01
    2ba4:	84 0f       	add	r24, r20
    2ba6:	91 1d       	adc	r25, r1
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
            break;
    2bac:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2bae:	46 95       	lsr	r20
    2bb0:	fb 01       	movw	r30, r22
    2bb2:	80 81       	ld	r24, Z
    2bb4:	91 81       	ldd	r25, Z+1	; 0x01
    2bb6:	84 1b       	sub	r24, r20
    2bb8:	91 09       	sbc	r25, r1
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	08 95       	ret

00002bc0 <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2bc0:	85 30       	cpi	r24, 0x05	; 5
    2bc2:	59 f0       	breq	.+22     	; 0x2bda <vMotorEncoderRightTickFromISR+0x1a>
    2bc4:	86 30       	cpi	r24, 0x06	; 6
    2bc6:	89 f4       	brne	.+34     	; 0x2bea <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2bc8:	46 95       	lsr	r20
    2bca:	fb 01       	movw	r30, r22
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	84 0f       	add	r24, r20
    2bd2:	91 1d       	adc	r25, r1
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
            break;
    2bd8:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2bda:	46 95       	lsr	r20
    2bdc:	fb 01       	movw	r30, r22
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	84 1b       	sub	r24, r20
    2be4:	91 09       	sbc	r25, r1
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
    2bea:	08 95       	ret

00002bec <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	7c 01       	movw	r14, r24
    2bfa:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2c02:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2c04:	98 01       	movw	r18, r16
    2c06:	21 50       	subi	r18, 0x01	; 1
    2c08:	31 09       	sbc	r19, r1
    2c0a:	a7 01       	movw	r20, r14
    2c0c:	b8 01       	movw	r22, r16
    2c0e:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2c12:	88 23       	and	r24, r24
    2c14:	49 f0       	breq	.+18     	; 0x2c28 <network_receive+0x3c>
	   ++cobs;
    2c16:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <cobs.2024>
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <cobs.2024>
	   vPortFree(decoded_data);
    2c20:	ce 01       	movw	r24, r28
    2c22:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c26:	33 c0       	rjmp	.+102    	; 0x2c8e <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2c28:	86 2f       	mov	r24, r22
    2c2a:	97 2f       	mov	r25, r23
    2c2c:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e8 0f       	add	r30, r24
    2c32:	f9 1f       	adc	r31, r25
    2c34:	31 97       	sbiw	r30, 0x01	; 1
    2c36:	f0 80       	ld	r15, Z
    2c38:	6f ef       	ldi	r22, 0xFF	; 255
    2c3a:	68 0f       	add	r22, r24
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2c42:	f8 16       	cp	r15, r24
    2c44:	49 f0       	breq	.+18     	; 0x2c58 <network_receive+0x6c>
	   ++crc;
    2c46:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <crc.2025>
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <crc.2025>
	   vPortFree(decoded_data);
    2c50:	ce 01       	movw	r24, r28
    2c52:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c56:	1b c0       	rjmp	.+54     	; 0x2c8e <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2c58:	88 81       	ld	r24, Y
    2c5a:	83 30       	cpi	r24, 0x03	; 3
    2c5c:	21 f0       	breq	.+8      	; 0x2c66 <network_receive+0x7a>
	   vPortFree(decoded_data);
    2c5e:	ce 01       	movw	r24, r28
    2c60:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2c66:	a8 01       	movw	r20, r16
    2c68:	44 50       	subi	r20, 0x04	; 4
    2c6a:	51 09       	sbc	r21, r1
    2c6c:	be 01       	movw	r22, r28
    2c6e:	6d 5f       	subi	r22, 0xFD	; 253
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	ea 81       	ldd	r30, Y+2	; 0x02
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	e9 53       	subi	r30, 0x39	; 57
    2c7c:	f4 4e       	sbci	r31, 0xE4	; 228
    2c7e:	01 90       	ld	r0, Z+
    2c80:	f0 81       	ld	r31, Z
    2c82:	e0 2d       	mov	r30, r0
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	19 95       	eicall
   vPortFree(decoded_data);
    2c88:	ce 01       	movw	r24, r28
    2c8a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	08 95       	ret

00002c9c <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2c9c:	86 ef       	ldi	r24, 0xF6	; 246
    2c9e:	95 e1       	ldi	r25, 0x15	; 21
    2ca0:	0c 94 ab 2e 	jmp	0x5d56	; 0x5d56 <vUSART_set_receive_callback>
    2ca4:	08 95       	ret

00002ca6 <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2ca6:	82 30       	cpi	r24, 0x02	; 2
    2ca8:	40 f4       	brcc	.+16     	; 0x2cba <network_set_callback+0x14>
    2caa:	e8 2f       	mov	r30, r24
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	ee 0f       	add	r30, r30
    2cb0:	ff 1f       	adc	r31, r31
    2cb2:	e9 53       	subi	r30, 0x39	; 57
    2cb4:	f4 4e       	sbci	r31, 0xE4	; 228
    2cb6:	71 83       	std	Z+1, r23	; 0x01
    2cb8:	60 83       	st	Z, r22
    2cba:	08 95       	ret

00002cbc <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2cbc:	8f 92       	push	r8
    2cbe:	9f 92       	push	r9
    2cc0:	af 92       	push	r10
    2cc2:	bf 92       	push	r11
    2cc4:	cf 92       	push	r12
    2cc6:	df 92       	push	r13
    2cc8:	ef 92       	push	r14
    2cca:	ff 92       	push	r15
    2ccc:	0f 93       	push	r16
    2cce:	1f 93       	push	r17
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	88 2e       	mov	r8, r24
    2cd6:	96 2e       	mov	r9, r22
    2cd8:	5a 01       	movw	r10, r20
    2cda:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2cdc:	69 01       	movw	r12, r18
    2cde:	84 e0       	ldi	r24, 0x04	; 4
    2ce0:	c8 0e       	add	r12, r24
    2ce2:	d1 1c       	adc	r13, r1
    2ce4:	c6 01       	movw	r24, r12
    2ce6:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2cea:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2cec:	c8 01       	movw	r24, r16
    2cee:	06 96       	adiw	r24, 0x06	; 6
    2cf0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2cf4:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2cf6:	20 97       	sbiw	r28, 0x00	; 0
    2cf8:	11 f0       	breq	.+4      	; 0x2cfe <network_send+0x42>
    2cfa:	89 2b       	or	r24, r25
    2cfc:	41 f4       	brne	.+16     	; 0x2d0e <network_send+0x52>
    vPortFree(packet);
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2d04:	c7 01       	movw	r24, r14
    2d06:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	3c c0       	rjmp	.+120    	; 0x2d86 <network_send+0xca>
  }
  packet[0] = remote_address;
    2d0e:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2d14:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2d16:	a8 01       	movw	r20, r16
    2d18:	b5 01       	movw	r22, r10
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	03 96       	adiw	r24, 0x03	; 3
    2d1e:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2d22:	58 01       	movw	r10, r16
    2d24:	e3 e0       	ldi	r30, 0x03	; 3
    2d26:	ae 0e       	add	r10, r30
    2d28:	b1 1c       	adc	r11, r1
    2d2a:	ac 0e       	add	r10, r28
    2d2c:	bd 1e       	adc	r11, r29
    2d2e:	63 e0       	ldi	r22, 0x03	; 3
    2d30:	60 0f       	add	r22, r16
    2d32:	ce 01       	movw	r24, r28
    2d34:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2d38:	f5 01       	movw	r30, r10
    2d3a:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2d3c:	b8 01       	movw	r22, r16
    2d3e:	6b 5f       	subi	r22, 0xFB	; 251
    2d40:	7f 4f       	sbci	r23, 0xFF	; 255
    2d42:	96 01       	movw	r18, r12
    2d44:	ae 01       	movw	r20, r28
    2d46:	c7 01       	movw	r24, r14
    2d48:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2d4c:	88 23       	and	r24, r24
    2d4e:	41 f0       	breq	.+16     	; 0x2d60 <network_send+0xa4>
    vPortFree(packet);
    2d50:	ce 01       	movw	r24, r28
    2d52:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2d56:	c7 01       	movw	r24, r14
    2d58:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	13 c0       	rjmp	.+38     	; 0x2d86 <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2d60:	86 2f       	mov	r24, r22
    2d62:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2d64:	f7 01       	movw	r30, r14
    2d66:	e8 0f       	add	r30, r24
    2d68:	f9 1f       	adc	r31, r25
    2d6a:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	6f 5f       	subi	r22, 0xFF	; 255
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	c7 01       	movw	r24, r14
    2d74:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <vUSART_send>
  vPortFree(packet);
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  vPortFree(encoded_data);
    2d7e:	c7 01       	movw	r24, r14
    2d80:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
}
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	df 90       	pop	r13
    2d94:	cf 90       	pop	r12
    2d96:	bf 90       	pop	r11
    2d98:	af 90       	pop	r10
    2d9a:	9f 90       	pop	r9
    2d9c:	8f 90       	pop	r8
    2d9e:	08 95       	ret

00002da0 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2da0:	31 e1       	ldi	r19, 0x11	; 17
    2da2:	fc 01       	movw	r30, r24
    2da4:	30 83       	st	Z, r19
    2da6:	31 97       	sbiw	r30, 0x01	; 1
    2da8:	22 e2       	ldi	r18, 0x22	; 34
    2daa:	20 83       	st	Z, r18
    2dac:	31 97       	sbiw	r30, 0x01	; 1
    2dae:	a3 e3       	ldi	r26, 0x33	; 51
    2db0:	a0 83       	st	Z, r26
    2db2:	31 97       	sbiw	r30, 0x01	; 1
    2db4:	60 83       	st	Z, r22
    2db6:	31 97       	sbiw	r30, 0x01	; 1
    2db8:	70 83       	st	Z, r23
    2dba:	31 97       	sbiw	r30, 0x01	; 1
    2dbc:	10 82       	st	Z, r1
    2dbe:	31 97       	sbiw	r30, 0x01	; 1
    2dc0:	10 82       	st	Z, r1
    2dc2:	31 97       	sbiw	r30, 0x01	; 1
    2dc4:	60 e8       	ldi	r22, 0x80	; 128
    2dc6:	60 83       	st	Z, r22
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	10 82       	st	Z, r1
    2dcc:	31 97       	sbiw	r30, 0x01	; 1
    2dce:	10 82       	st	Z, r1
    2dd0:	31 97       	sbiw	r30, 0x01	; 1
    2dd2:	10 82       	st	Z, r1
    2dd4:	31 97       	sbiw	r30, 0x01	; 1
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	60 83       	st	Z, r22
    2dda:	31 97       	sbiw	r30, 0x01	; 1
    2ddc:	63 e0       	ldi	r22, 0x03	; 3
    2dde:	60 83       	st	Z, r22
    2de0:	31 97       	sbiw	r30, 0x01	; 1
    2de2:	64 e0       	ldi	r22, 0x04	; 4
    2de4:	60 83       	st	Z, r22
    2de6:	31 97       	sbiw	r30, 0x01	; 1
    2de8:	65 e0       	ldi	r22, 0x05	; 5
    2dea:	60 83       	st	Z, r22
    2dec:	31 97       	sbiw	r30, 0x01	; 1
    2dee:	66 e0       	ldi	r22, 0x06	; 6
    2df0:	60 83       	st	Z, r22
    2df2:	31 97       	sbiw	r30, 0x01	; 1
    2df4:	67 e0       	ldi	r22, 0x07	; 7
    2df6:	60 83       	st	Z, r22
    2df8:	31 97       	sbiw	r30, 0x01	; 1
    2dfa:	68 e0       	ldi	r22, 0x08	; 8
    2dfc:	60 83       	st	Z, r22
    2dfe:	31 97       	sbiw	r30, 0x01	; 1
    2e00:	69 e0       	ldi	r22, 0x09	; 9
    2e02:	60 83       	st	Z, r22
    2e04:	31 97       	sbiw	r30, 0x01	; 1
    2e06:	60 e1       	ldi	r22, 0x10	; 16
    2e08:	60 83       	st	Z, r22
    2e0a:	31 97       	sbiw	r30, 0x01	; 1
    2e0c:	30 83       	st	Z, r19
    2e0e:	31 97       	sbiw	r30, 0x01	; 1
    2e10:	32 e1       	ldi	r19, 0x12	; 18
    2e12:	30 83       	st	Z, r19
    2e14:	31 97       	sbiw	r30, 0x01	; 1
    2e16:	33 e1       	ldi	r19, 0x13	; 19
    2e18:	30 83       	st	Z, r19
    2e1a:	31 97       	sbiw	r30, 0x01	; 1
    2e1c:	34 e1       	ldi	r19, 0x14	; 20
    2e1e:	30 83       	st	Z, r19
    2e20:	31 97       	sbiw	r30, 0x01	; 1
    2e22:	35 e1       	ldi	r19, 0x15	; 21
    2e24:	30 83       	st	Z, r19
    2e26:	31 97       	sbiw	r30, 0x01	; 1
    2e28:	36 e1       	ldi	r19, 0x16	; 22
    2e2a:	30 83       	st	Z, r19
    2e2c:	31 97       	sbiw	r30, 0x01	; 1
    2e2e:	37 e1       	ldi	r19, 0x17	; 23
    2e30:	30 83       	st	Z, r19
    2e32:	31 97       	sbiw	r30, 0x01	; 1
    2e34:	38 e1       	ldi	r19, 0x18	; 24
    2e36:	30 83       	st	Z, r19
    2e38:	31 97       	sbiw	r30, 0x01	; 1
    2e3a:	39 e1       	ldi	r19, 0x19	; 25
    2e3c:	30 83       	st	Z, r19
    2e3e:	31 97       	sbiw	r30, 0x01	; 1
    2e40:	30 e2       	ldi	r19, 0x20	; 32
    2e42:	30 83       	st	Z, r19
    2e44:	31 97       	sbiw	r30, 0x01	; 1
    2e46:	31 e2       	ldi	r19, 0x21	; 33
    2e48:	30 83       	st	Z, r19
    2e4a:	31 97       	sbiw	r30, 0x01	; 1
    2e4c:	20 83       	st	Z, r18
    2e4e:	31 97       	sbiw	r30, 0x01	; 1
    2e50:	23 e2       	ldi	r18, 0x23	; 35
    2e52:	20 83       	st	Z, r18
    2e54:	31 97       	sbiw	r30, 0x01	; 1
    2e56:	40 83       	st	Z, r20
    2e58:	31 97       	sbiw	r30, 0x01	; 1
    2e5a:	50 83       	st	Z, r21
    2e5c:	31 97       	sbiw	r30, 0x01	; 1
    2e5e:	26 e2       	ldi	r18, 0x26	; 38
    2e60:	20 83       	st	Z, r18
    2e62:	31 97       	sbiw	r30, 0x01	; 1
    2e64:	27 e2       	ldi	r18, 0x27	; 39
    2e66:	20 83       	st	Z, r18
    2e68:	31 97       	sbiw	r30, 0x01	; 1
    2e6a:	28 e2       	ldi	r18, 0x28	; 40
    2e6c:	20 83       	st	Z, r18
    2e6e:	31 97       	sbiw	r30, 0x01	; 1
    2e70:	29 e2       	ldi	r18, 0x29	; 41
    2e72:	20 83       	st	Z, r18
    2e74:	31 97       	sbiw	r30, 0x01	; 1
    2e76:	20 e3       	ldi	r18, 0x30	; 48
    2e78:	20 83       	st	Z, r18
    2e7a:	31 97       	sbiw	r30, 0x01	; 1
    2e7c:	21 e3       	ldi	r18, 0x31	; 49
    2e7e:	20 83       	st	Z, r18
    2e80:	89 97       	sbiw	r24, 0x29	; 41
    2e82:	08 95       	ret

00002e84 <xPortStartScheduler>:
    2e84:	88 ee       	ldi	r24, 0xE8	; 232
    2e86:	93 e0       	ldi	r25, 0x03	; 3
    2e88:	90 93 dc 1b 	sts	0x1BDC, r25	; 0x801bdc <portTickRateHz+0x1>
    2e8c:	80 93 db 1b 	sts	0x1BDB, r24	; 0x801bdb <portTickRateHz>
    2e90:	90 93 de 1b 	sts	0x1BDE, r25	; 0x801bde <ticksRemainingInSec+0x1>
    2e94:	80 93 dd 1b 	sts	0x1BDD, r24	; 0x801bdd <ticksRemainingInSec>
    2e98:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2e9c:	89 ef       	ldi	r24, 0xF9	; 249
    2e9e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2ea2:	8b e0       	ldi	r24, 0x0B	; 11
    2ea4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2ea8:	e1 e7       	ldi	r30, 0x71	; 113
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	82 60       	ori	r24, 0x02	; 2
    2eb0:	80 83       	st	Z, r24
    2eb2:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    2eb6:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    2eba:	cd 91       	ld	r28, X+
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	dd 91       	ld	r29, X+
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	bf 91       	pop	r27
    2ecc:	af 91       	pop	r26
    2ece:	9f 91       	pop	r25
    2ed0:	8f 91       	pop	r24
    2ed2:	7f 91       	pop	r23
    2ed4:	6f 91       	pop	r22
    2ed6:	5f 91       	pop	r21
    2ed8:	4f 91       	pop	r20
    2eda:	3f 91       	pop	r19
    2edc:	2f 91       	pop	r18
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	df 90       	pop	r13
    2ee8:	cf 90       	pop	r12
    2eea:	bf 90       	pop	r11
    2eec:	af 90       	pop	r10
    2eee:	9f 90       	pop	r9
    2ef0:	8f 90       	pop	r8
    2ef2:	7f 90       	pop	r7
    2ef4:	6f 90       	pop	r6
    2ef6:	5f 90       	pop	r5
    2ef8:	4f 90       	pop	r4
    2efa:	3f 90       	pop	r3
    2efc:	2f 90       	pop	r2
    2efe:	1f 90       	pop	r1
    2f00:	0f 90       	pop	r0
    2f02:	0c be       	out	0x3c, r0	; 60
    2f04:	0f 90       	pop	r0
    2f06:	0b be       	out	0x3b, r0	; 59
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	08 95       	ret
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	08 95       	ret

00002f14 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	0f 92       	push	r0
    2f1c:	0b b6       	in	r0, 0x3b	; 59
    2f1e:	0f 92       	push	r0
    2f20:	0c b6       	in	r0, 0x3c	; 60
    2f22:	0f 92       	push	r0
    2f24:	1f 92       	push	r1
    2f26:	11 24       	eor	r1, r1
    2f28:	2f 92       	push	r2
    2f2a:	3f 92       	push	r3
    2f2c:	4f 92       	push	r4
    2f2e:	5f 92       	push	r5
    2f30:	6f 92       	push	r6
    2f32:	7f 92       	push	r7
    2f34:	8f 92       	push	r8
    2f36:	9f 92       	push	r9
    2f38:	af 92       	push	r10
    2f3a:	bf 92       	push	r11
    2f3c:	cf 92       	push	r12
    2f3e:	df 92       	push	r13
    2f40:	ef 92       	push	r14
    2f42:	ff 92       	push	r15
    2f44:	0f 93       	push	r16
    2f46:	1f 93       	push	r17
    2f48:	2f 93       	push	r18
    2f4a:	3f 93       	push	r19
    2f4c:	4f 93       	push	r20
    2f4e:	5f 93       	push	r21
    2f50:	6f 93       	push	r22
    2f52:	7f 93       	push	r23
    2f54:	8f 93       	push	r24
    2f56:	9f 93       	push	r25
    2f58:	af 93       	push	r26
    2f5a:	bf 93       	push	r27
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
    2f64:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    2f68:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    2f6c:	0d b6       	in	r0, 0x3d	; 61
    2f6e:	0d 92       	st	X+, r0
    2f70:	0e b6       	in	r0, 0x3e	; 62
    2f72:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f74:	0e 94 fe 28 	call	0x51fc	; 0x51fc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f78:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    2f7c:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    2f80:	cd 91       	ld	r28, X+
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	dd 91       	ld	r29, X+
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	ff 91       	pop	r31
    2f8a:	ef 91       	pop	r30
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	bf 91       	pop	r27
    2f92:	af 91       	pop	r26
    2f94:	9f 91       	pop	r25
    2f96:	8f 91       	pop	r24
    2f98:	7f 91       	pop	r23
    2f9a:	6f 91       	pop	r22
    2f9c:	5f 91       	pop	r21
    2f9e:	4f 91       	pop	r20
    2fa0:	3f 91       	pop	r19
    2fa2:	2f 91       	pop	r18
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	7f 90       	pop	r7
    2fba:	6f 90       	pop	r6
    2fbc:	5f 90       	pop	r5
    2fbe:	4f 90       	pop	r4
    2fc0:	3f 90       	pop	r3
    2fc2:	2f 90       	pop	r2
    2fc4:	1f 90       	pop	r1
    2fc6:	0f 90       	pop	r0
    2fc8:	0c be       	out	0x3c, r0	; 60
    2fca:	0f 90       	pop	r0
    2fcc:	0b be       	out	0x3b, r0	; 59
    2fce:	0f 90       	pop	r0
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2fd4:	08 95       	ret

00002fd6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2fd6:	0f 92       	push	r0
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	0f 92       	push	r0
    2fde:	0b b6       	in	r0, 0x3b	; 59
    2fe0:	0f 92       	push	r0
    2fe2:	0c b6       	in	r0, 0x3c	; 60
    2fe4:	0f 92       	push	r0
    2fe6:	1f 92       	push	r1
    2fe8:	11 24       	eor	r1, r1
    2fea:	2f 92       	push	r2
    2fec:	3f 92       	push	r3
    2fee:	4f 92       	push	r4
    2ff0:	5f 92       	push	r5
    2ff2:	6f 92       	push	r6
    2ff4:	7f 92       	push	r7
    2ff6:	8f 92       	push	r8
    2ff8:	9f 92       	push	r9
    2ffa:	af 92       	push	r10
    2ffc:	bf 92       	push	r11
    2ffe:	cf 92       	push	r12
    3000:	df 92       	push	r13
    3002:	ef 92       	push	r14
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	2f 93       	push	r18
    300c:	3f 93       	push	r19
    300e:	4f 93       	push	r20
    3010:	5f 93       	push	r21
    3012:	6f 93       	push	r22
    3014:	7f 93       	push	r23
    3016:	8f 93       	push	r24
    3018:	9f 93       	push	r25
    301a:	af 93       	push	r26
    301c:	bf 93       	push	r27
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	ef 93       	push	r30
    3024:	ff 93       	push	r31
    3026:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    302a:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    302e:	0d b6       	in	r0, 0x3d	; 61
    3030:	0d 92       	st	X+, r0
    3032:	0e b6       	in	r0, 0x3e	; 62
    3034:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    3036:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    3038:	80 91 dd 1b 	lds	r24, 0x1BDD	; 0x801bdd <ticksRemainingInSec>
    303c:	90 91 de 1b 	lds	r25, 0x1BDE	; 0x801bde <ticksRemainingInSec+0x1>
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	90 93 de 1b 	sts	0x1BDE, r25	; 0x801bde <ticksRemainingInSec+0x1>
    3046:	80 93 dd 1b 	sts	0x1BDD, r24	; 0x801bdd <ticksRemainingInSec>
    304a:	89 2b       	or	r24, r25
    304c:	41 f4       	brne	.+16     	; 0x305e <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    304e:	80 91 db 1b 	lds	r24, 0x1BDB	; 0x801bdb <portTickRateHz>
    3052:	90 91 dc 1b 	lds	r25, 0x1BDC	; 0x801bdc <portTickRateHz+0x1>
    3056:	90 93 de 1b 	sts	0x1BDE, r25	; 0x801bde <ticksRemainingInSec+0x1>
    305a:	80 93 dd 1b 	sts	0x1BDD, r24	; 0x801bdd <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    305e:	0e 94 3d 28 	call	0x507a	; 0x507a <xTaskIncrementTick>
    3062:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    3064:	0e 94 fe 28 	call	0x51fc	; 0x51fc <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    3068:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    306c:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    3070:	cd 91       	ld	r28, X+
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	dd 91       	ld	r29, X+
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	ff 91       	pop	r31
    307a:	ef 91       	pop	r30
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	bf 91       	pop	r27
    3082:	af 91       	pop	r26
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	7f 91       	pop	r23
    308a:	6f 91       	pop	r22
    308c:	5f 91       	pop	r21
    308e:	4f 91       	pop	r20
    3090:	3f 91       	pop	r19
    3092:	2f 91       	pop	r18
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	ff 90       	pop	r15
    309a:	ef 90       	pop	r14
    309c:	df 90       	pop	r13
    309e:	cf 90       	pop	r12
    30a0:	bf 90       	pop	r11
    30a2:	af 90       	pop	r10
    30a4:	9f 90       	pop	r9
    30a6:	8f 90       	pop	r8
    30a8:	7f 90       	pop	r7
    30aa:	6f 90       	pop	r6
    30ac:	5f 90       	pop	r5
    30ae:	4f 90       	pop	r4
    30b0:	3f 90       	pop	r3
    30b2:	2f 90       	pop	r2
    30b4:	1f 90       	pop	r1
    30b6:	0f 90       	pop	r0
    30b8:	0c be       	out	0x3c, r0	; 60
    30ba:	0f 90       	pop	r0
    30bc:	0b be       	out	0x3b, r0	; 59
    30be:	0f 90       	pop	r0
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    30c4:	08 95       	ret

000030c6 <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    30c6:	87 df       	rcall	.-242    	; 0x2fd6 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    30c8:	18 95       	reti

000030ca <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	08 2f       	mov	r16, r24
    30d4:	16 2f       	mov	r17, r22
    30d6:	66 23       	and	r22, r22
    30d8:	09 f4       	brne	.+2      	; 0x30dc <xQueueGenericCreate+0x12>
    30da:	3b c0       	rjmp	.+118    	; 0x3152 <xQueueGenericCreate+0x88>
    30dc:	86 9f       	mul	r24, r22
    30de:	c0 01       	movw	r24, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	80 96       	adiw	r24, 0x20	; 32
    30e4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    30e8:	ec 01       	movw	r28, r24
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	21 f4       	brne	.+8      	; 0x30f6 <xQueueGenericCreate+0x2c>
    30ee:	39 c0       	rjmp	.+114    	; 0x3162 <xQueueGenericCreate+0x98>
    30f0:	d9 83       	std	Y+1, r29	; 0x01
    30f2:	c8 83       	st	Y, r28
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <xQueueGenericCreate+0x32>
    30f6:	4f 96       	adiw	r24, 0x1f	; 31
    30f8:	99 83       	std	Y+1, r25	; 0x01
    30fa:	88 83       	st	Y, r24
    30fc:	0b 8f       	std	Y+27, r16	; 0x1b
    30fe:	1c 8f       	std	Y+28, r17	; 0x1c
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	0f 92       	push	r0
    3106:	48 81       	ld	r20, Y
    3108:	59 81       	ldd	r21, Y+1	; 0x01
    310a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3110:	62 9f       	mul	r22, r18
    3112:	c0 01       	movw	r24, r0
    3114:	63 9f       	mul	r22, r19
    3116:	90 0d       	add	r25, r0
    3118:	11 24       	eor	r1, r1
    311a:	ba 01       	movw	r22, r20
    311c:	68 0f       	add	r22, r24
    311e:	79 1f       	adc	r23, r25
    3120:	7b 83       	std	Y+3, r23	; 0x03
    3122:	6a 83       	std	Y+2, r22	; 0x02
    3124:	1a 8e       	std	Y+26, r1	; 0x1a
    3126:	5d 83       	std	Y+5, r21	; 0x05
    3128:	4c 83       	std	Y+4, r20	; 0x04
    312a:	82 1b       	sub	r24, r18
    312c:	93 0b       	sbc	r25, r19
    312e:	84 0f       	add	r24, r20
    3130:	95 1f       	adc	r25, r21
    3132:	9f 83       	std	Y+7, r25	; 0x07
    3134:	8e 83       	std	Y+6, r24	; 0x06
    3136:	8f ef       	ldi	r24, 0xFF	; 255
    3138:	8d 8f       	std	Y+29, r24	; 0x1d
    313a:	8e 8f       	std	Y+30, r24	; 0x1e
    313c:	ce 01       	movw	r24, r28
    313e:	08 96       	adiw	r24, 0x08	; 8
    3140:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3144:	ce 01       	movw	r24, r28
    3146:	41 96       	adiw	r24, 0x11	; 17
    3148:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    314c:	0f 90       	pop	r0
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	08 c0       	rjmp	.+16     	; 0x3162 <xQueueGenericCreate+0x98>
    3152:	8f e1       	ldi	r24, 0x1F	; 31
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    315a:	ec 01       	movw	r28, r24
    315c:	89 2b       	or	r24, r25
    315e:	09 f0       	breq	.+2      	; 0x3162 <xQueueGenericCreate+0x98>
    3160:	c7 cf       	rjmp	.-114    	; 0x30f0 <xQueueGenericCreate+0x26>
    3162:	ce 01       	movw	r24, r28
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	08 95       	ret

0000316e <xQueueCreateMutex>:
    316e:	9f 92       	push	r9
    3170:	af 92       	push	r10
    3172:	bf 92       	push	r11
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	00 d0       	rcall	.+0      	; 0x3186 <xQueueCreateMutex+0x18>
    3186:	1f 92       	push	r1
    3188:	1f 92       	push	r1
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	8f e1       	ldi	r24, 0x1F	; 31
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    3196:	8c 01       	movw	r16, r24
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	09 f4       	brne	.+2      	; 0x319e <xQueueCreateMutex+0x30>
    319c:	58 c1       	rjmp	.+688    	; 0x344e <xQueueCreateMutex+0x2e0>
    319e:	fc 01       	movw	r30, r24
    31a0:	13 82       	std	Z+3, r1	; 0x03
    31a2:	12 82       	std	Z+2, r1	; 0x02
    31a4:	11 82       	std	Z+1, r1	; 0x01
    31a6:	10 82       	st	Z, r1
    31a8:	15 82       	std	Z+5, r1	; 0x05
    31aa:	14 82       	std	Z+4, r1	; 0x04
    31ac:	17 82       	std	Z+7, r1	; 0x07
    31ae:	16 82       	std	Z+6, r1	; 0x06
    31b0:	12 8e       	std	Z+26, r1	; 0x1a
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	83 8f       	std	Z+27, r24	; 0x1b
    31b6:	14 8e       	std	Z+28, r1	; 0x1c
    31b8:	8f ef       	ldi	r24, 0xFF	; 255
    31ba:	85 8f       	std	Z+29, r24	; 0x1d
    31bc:	86 8f       	std	Z+30, r24	; 0x1e
    31be:	78 01       	movw	r14, r16
    31c0:	f8 e0       	ldi	r31, 0x08	; 8
    31c2:	ef 0e       	add	r14, r31
    31c4:	f1 1c       	adc	r15, r1
    31c6:	c7 01       	movw	r24, r14
    31c8:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    31cc:	68 01       	movw	r12, r16
    31ce:	81 e1       	ldi	r24, 0x11	; 17
    31d0:	c8 0e       	add	r12, r24
    31d2:	d1 1c       	adc	r13, r1
    31d4:	c6 01       	movw	r24, r12
    31d6:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    31da:	1d 82       	std	Y+5, r1	; 0x05
    31dc:	1c 82       	std	Y+4, r1	; 0x04
    31de:	a1 2c       	mov	r10, r1
    31e0:	99 24       	eor	r9, r9
    31e2:	93 94       	inc	r9
    31e4:	bb 24       	eor	r11, r11
    31e6:	ba 94       	dec	r11
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	0f 92       	push	r0
    31ee:	f8 01       	movw	r30, r16
    31f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    31f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    31f4:	98 17       	cp	r25, r24
    31f6:	f0 f4       	brcc	.+60     	; 0x3234 <xQueueCreateMutex+0xc6>
    31f8:	80 81       	ld	r24, Z
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	89 2b       	or	r24, r25
    31fe:	09 f0       	breq	.+2      	; 0x3202 <xQueueCreateMutex+0x94>
    3200:	1d c1       	rjmp	.+570    	; 0x343c <xQueueCreateMutex+0x2ce>
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <xTaskPriorityDisinherit>
    320a:	f8 01       	movw	r30, r16
    320c:	13 82       	std	Z+3, r1	; 0x03
    320e:	12 82       	std	Z+2, r1	; 0x02
    3210:	92 8d       	ldd	r25, Z+26	; 0x1a
    3212:	9f 5f       	subi	r25, 0xFF	; 255
    3214:	92 8f       	std	Z+26, r25	; 0x1a
    3216:	91 89       	ldd	r25, Z+17	; 0x11
    3218:	99 23       	and	r25, r25
    321a:	39 f0       	breq	.+14     	; 0x322a <xQueueCreateMutex+0xbc>
    321c:	c6 01       	movw	r24, r12
    321e:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3222:	81 30       	cpi	r24, 0x01	; 1
    3224:	21 f4       	brne	.+8      	; 0x322e <xQueueCreateMutex+0xc0>
    3226:	76 de       	rcall	.-788    	; 0x2f14 <vPortYield>
    3228:	02 c0       	rjmp	.+4      	; 0x322e <xQueueCreateMutex+0xc0>
    322a:	81 11       	cpse	r24, r1
    322c:	73 de       	rcall	.-794    	; 0x2f14 <vPortYield>
    322e:	0f 90       	pop	r0
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	0d c1       	rjmp	.+538    	; 0x344e <xQueueCreateMutex+0x2e0>
    3234:	8c 81       	ldd	r24, Y+4	; 0x04
    3236:	9d 81       	ldd	r25, Y+5	; 0x05
    3238:	89 2b       	or	r24, r25
    323a:	19 f4       	brne	.+6      	; 0x3242 <xQueueCreateMutex+0xd4>
    323c:	0f 90       	pop	r0
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	06 c1       	rjmp	.+524    	; 0x344e <xQueueCreateMutex+0x2e0>
    3242:	a1 10       	cpse	r10, r1
    3244:	05 c0       	rjmp	.+10     	; 0x3250 <xQueueCreateMutex+0xe2>
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	0e 94 29 2a 	call	0x5452	; 0x5452 <vTaskSetTimeOutState>
    324e:	a9 2c       	mov	r10, r9
    3250:	0f 90       	pop	r0
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	0f 92       	push	r0
    325e:	f8 01       	movw	r30, r16
    3260:	85 8d       	ldd	r24, Z+29	; 0x1d
    3262:	8f 3f       	cpi	r24, 0xFF	; 255
    3264:	09 f4       	brne	.+2      	; 0x3268 <xQueueCreateMutex+0xfa>
    3266:	15 8e       	std	Z+29, r1	; 0x1d
    3268:	f8 01       	movw	r30, r16
    326a:	86 8d       	ldd	r24, Z+30	; 0x1e
    326c:	8f 3f       	cpi	r24, 0xFF	; 255
    326e:	09 f4       	brne	.+2      	; 0x3272 <xQueueCreateMutex+0x104>
    3270:	16 8e       	std	Z+30, r1	; 0x1e
    3272:	0f 90       	pop	r0
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	be 01       	movw	r22, r28
    3278:	6c 5f       	subi	r22, 0xFC	; 252
    327a:	7f 4f       	sbci	r23, 0xFF	; 255
    327c:	ce 01       	movw	r24, r28
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	0e 94 34 2a 	call	0x5468	; 0x5468 <xTaskCheckForTimeOut>
    3284:	81 11       	cpse	r24, r1
    3286:	96 c0       	rjmp	.+300    	; 0x33b4 <xQueueCreateMutex+0x246>
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	0f 92       	push	r0
    328e:	f8 01       	movw	r30, r16
    3290:	92 8d       	ldd	r25, Z+26	; 0x1a
    3292:	83 8d       	ldd	r24, Z+27	; 0x1b
    3294:	0f 90       	pop	r0
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	98 13       	cpse	r25, r24
    329a:	4a c0       	rjmp	.+148    	; 0x3330 <xQueueCreateMutex+0x1c2>
    329c:	6c 81       	ldd	r22, Y+4	; 0x04
    329e:	7d 81       	ldd	r23, Y+5	; 0x05
    32a0:	c7 01       	movw	r24, r14
    32a2:	0e 94 86 29 	call	0x530c	; 0x530c <vTaskPlaceOnEventList>
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	0f 92       	push	r0
    32ac:	f8 01       	movw	r30, r16
    32ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    32b0:	18 16       	cp	r1, r24
    32b2:	ac f4       	brge	.+42     	; 0x32de <xQueueCreateMutex+0x170>
    32b4:	81 89       	ldd	r24, Z+17	; 0x11
    32b6:	81 11       	cpse	r24, r1
    32b8:	05 c0       	rjmp	.+10     	; 0x32c4 <xQueueCreateMutex+0x156>
    32ba:	11 c0       	rjmp	.+34     	; 0x32de <xQueueCreateMutex+0x170>
    32bc:	f8 01       	movw	r30, r16
    32be:	81 89       	ldd	r24, Z+17	; 0x11
    32c0:	88 23       	and	r24, r24
    32c2:	69 f0       	breq	.+26     	; 0x32de <xQueueCreateMutex+0x170>
    32c4:	c6 01       	movw	r24, r12
    32c6:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    32ca:	81 11       	cpse	r24, r1
    32cc:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    32d0:	f8 01       	movw	r30, r16
    32d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    32d4:	81 50       	subi	r24, 0x01	; 1
    32d6:	86 8f       	std	Z+30, r24	; 0x1e
    32d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    32da:	18 16       	cp	r1, r24
    32dc:	7c f3       	brlt	.-34     	; 0x32bc <xQueueCreateMutex+0x14e>
    32de:	f8 01       	movw	r30, r16
    32e0:	b6 8e       	std	Z+30, r11	; 0x1e
    32e2:	0f 90       	pop	r0
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	0f 92       	push	r0
    32ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    32ee:	18 16       	cp	r1, r24
    32f0:	ac f4       	brge	.+42     	; 0x331c <xQueueCreateMutex+0x1ae>
    32f2:	80 85       	ldd	r24, Z+8	; 0x08
    32f4:	81 11       	cpse	r24, r1
    32f6:	05 c0       	rjmp	.+10     	; 0x3302 <xQueueCreateMutex+0x194>
    32f8:	11 c0       	rjmp	.+34     	; 0x331c <xQueueCreateMutex+0x1ae>
    32fa:	f8 01       	movw	r30, r16
    32fc:	80 85       	ldd	r24, Z+8	; 0x08
    32fe:	88 23       	and	r24, r24
    3300:	69 f0       	breq	.+26     	; 0x331c <xQueueCreateMutex+0x1ae>
    3302:	c7 01       	movw	r24, r14
    3304:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3308:	81 11       	cpse	r24, r1
    330a:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    330e:	f8 01       	movw	r30, r16
    3310:	85 8d       	ldd	r24, Z+29	; 0x1d
    3312:	81 50       	subi	r24, 0x01	; 1
    3314:	85 8f       	std	Z+29, r24	; 0x1d
    3316:	85 8d       	ldd	r24, Z+29	; 0x1d
    3318:	18 16       	cp	r1, r24
    331a:	7c f3       	brlt	.-34     	; 0x32fa <xQueueCreateMutex+0x18c>
    331c:	f8 01       	movw	r30, r16
    331e:	b5 8e       	std	Z+29, r11	; 0x1d
    3320:	0f 90       	pop	r0
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3328:	81 11       	cpse	r24, r1
    332a:	5e cf       	rjmp	.-324    	; 0x31e8 <xQueueCreateMutex+0x7a>
    332c:	f3 dd       	rcall	.-1050   	; 0x2f14 <vPortYield>
    332e:	5c cf       	rjmp	.-328    	; 0x31e8 <xQueueCreateMutex+0x7a>
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	0f 92       	push	r0
    3336:	f8 01       	movw	r30, r16
    3338:	86 8d       	ldd	r24, Z+30	; 0x1e
    333a:	18 16       	cp	r1, r24
    333c:	ac f4       	brge	.+42     	; 0x3368 <xQueueCreateMutex+0x1fa>
    333e:	81 89       	ldd	r24, Z+17	; 0x11
    3340:	81 11       	cpse	r24, r1
    3342:	05 c0       	rjmp	.+10     	; 0x334e <xQueueCreateMutex+0x1e0>
    3344:	11 c0       	rjmp	.+34     	; 0x3368 <xQueueCreateMutex+0x1fa>
    3346:	f8 01       	movw	r30, r16
    3348:	81 89       	ldd	r24, Z+17	; 0x11
    334a:	88 23       	and	r24, r24
    334c:	69 f0       	breq	.+26     	; 0x3368 <xQueueCreateMutex+0x1fa>
    334e:	c6 01       	movw	r24, r12
    3350:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3354:	81 11       	cpse	r24, r1
    3356:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    335a:	f8 01       	movw	r30, r16
    335c:	86 8d       	ldd	r24, Z+30	; 0x1e
    335e:	81 50       	subi	r24, 0x01	; 1
    3360:	86 8f       	std	Z+30, r24	; 0x1e
    3362:	86 8d       	ldd	r24, Z+30	; 0x1e
    3364:	18 16       	cp	r1, r24
    3366:	7c f3       	brlt	.-34     	; 0x3346 <xQueueCreateMutex+0x1d8>
    3368:	f8 01       	movw	r30, r16
    336a:	b6 8e       	std	Z+30, r11	; 0x1e
    336c:	0f 90       	pop	r0
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	0f 92       	push	r0
    3376:	85 8d       	ldd	r24, Z+29	; 0x1d
    3378:	18 16       	cp	r1, r24
    337a:	ac f4       	brge	.+42     	; 0x33a6 <xQueueCreateMutex+0x238>
    337c:	80 85       	ldd	r24, Z+8	; 0x08
    337e:	81 11       	cpse	r24, r1
    3380:	05 c0       	rjmp	.+10     	; 0x338c <xQueueCreateMutex+0x21e>
    3382:	11 c0       	rjmp	.+34     	; 0x33a6 <xQueueCreateMutex+0x238>
    3384:	f8 01       	movw	r30, r16
    3386:	80 85       	ldd	r24, Z+8	; 0x08
    3388:	88 23       	and	r24, r24
    338a:	69 f0       	breq	.+26     	; 0x33a6 <xQueueCreateMutex+0x238>
    338c:	c7 01       	movw	r24, r14
    338e:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3392:	81 11       	cpse	r24, r1
    3394:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3398:	f8 01       	movw	r30, r16
    339a:	85 8d       	ldd	r24, Z+29	; 0x1d
    339c:	81 50       	subi	r24, 0x01	; 1
    339e:	85 8f       	std	Z+29, r24	; 0x1d
    33a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    33a2:	18 16       	cp	r1, r24
    33a4:	7c f3       	brlt	.-34     	; 0x3384 <xQueueCreateMutex+0x216>
    33a6:	f8 01       	movw	r30, r16
    33a8:	b5 8e       	std	Z+29, r11	; 0x1d
    33aa:	0f 90       	pop	r0
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    33b2:	1a cf       	rjmp	.-460    	; 0x31e8 <xQueueCreateMutex+0x7a>
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	0f 92       	push	r0
    33ba:	f8 01       	movw	r30, r16
    33bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    33be:	18 16       	cp	r1, r24
    33c0:	ac f4       	brge	.+42     	; 0x33ec <xQueueCreateMutex+0x27e>
    33c2:	81 89       	ldd	r24, Z+17	; 0x11
    33c4:	81 11       	cpse	r24, r1
    33c6:	05 c0       	rjmp	.+10     	; 0x33d2 <xQueueCreateMutex+0x264>
    33c8:	11 c0       	rjmp	.+34     	; 0x33ec <xQueueCreateMutex+0x27e>
    33ca:	f8 01       	movw	r30, r16
    33cc:	81 89       	ldd	r24, Z+17	; 0x11
    33ce:	88 23       	and	r24, r24
    33d0:	69 f0       	breq	.+26     	; 0x33ec <xQueueCreateMutex+0x27e>
    33d2:	c6 01       	movw	r24, r12
    33d4:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    33d8:	81 11       	cpse	r24, r1
    33da:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    33de:	f8 01       	movw	r30, r16
    33e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    33e2:	81 50       	subi	r24, 0x01	; 1
    33e4:	86 8f       	std	Z+30, r24	; 0x1e
    33e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    33e8:	18 16       	cp	r1, r24
    33ea:	7c f3       	brlt	.-34     	; 0x33ca <xQueueCreateMutex+0x25c>
    33ec:	8f ef       	ldi	r24, 0xFF	; 255
    33ee:	f8 01       	movw	r30, r16
    33f0:	86 8f       	std	Z+30, r24	; 0x1e
    33f2:	0f 90       	pop	r0
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	0f 92       	push	r0
    33fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    33fe:	18 16       	cp	r1, r24
    3400:	ac f4       	brge	.+42     	; 0x342c <xQueueCreateMutex+0x2be>
    3402:	80 85       	ldd	r24, Z+8	; 0x08
    3404:	81 11       	cpse	r24, r1
    3406:	05 c0       	rjmp	.+10     	; 0x3412 <xQueueCreateMutex+0x2a4>
    3408:	11 c0       	rjmp	.+34     	; 0x342c <xQueueCreateMutex+0x2be>
    340a:	f8 01       	movw	r30, r16
    340c:	80 85       	ldd	r24, Z+8	; 0x08
    340e:	88 23       	and	r24, r24
    3410:	69 f0       	breq	.+26     	; 0x342c <xQueueCreateMutex+0x2be>
    3412:	c7 01       	movw	r24, r14
    3414:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3418:	81 11       	cpse	r24, r1
    341a:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    341e:	f8 01       	movw	r30, r16
    3420:	85 8d       	ldd	r24, Z+29	; 0x1d
    3422:	81 50       	subi	r24, 0x01	; 1
    3424:	85 8f       	std	Z+29, r24	; 0x1d
    3426:	85 8d       	ldd	r24, Z+29	; 0x1d
    3428:	18 16       	cp	r1, r24
    342a:	7c f3       	brlt	.-34     	; 0x340a <xQueueCreateMutex+0x29c>
    342c:	8f ef       	ldi	r24, 0xFF	; 255
    342e:	f8 01       	movw	r30, r16
    3430:	85 8f       	std	Z+29, r24	; 0x1d
    3432:	0f 90       	pop	r0
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    343a:	09 c0       	rjmp	.+18     	; 0x344e <xQueueCreateMutex+0x2e0>
    343c:	f8 01       	movw	r30, r16
    343e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3440:	8f 5f       	subi	r24, 0xFF	; 255
    3442:	82 8f       	std	Z+26, r24	; 0x1a
    3444:	81 89       	ldd	r24, Z+17	; 0x11
    3446:	88 23       	and	r24, r24
    3448:	09 f4       	brne	.+2      	; 0x344c <xQueueCreateMutex+0x2de>
    344a:	f1 ce       	rjmp	.-542    	; 0x322e <xQueueCreateMutex+0xc0>
    344c:	e7 ce       	rjmp	.-562    	; 0x321c <xQueueCreateMutex+0xae>
    344e:	c8 01       	movw	r24, r16
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	0f 90       	pop	r0
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	df 90       	pop	r13
    3468:	cf 90       	pop	r12
    346a:	bf 90       	pop	r11
    346c:	af 90       	pop	r10
    346e:	9f 90       	pop	r9
    3470:	08 95       	ret

00003472 <xQueueGenericSend>:
    3472:	6f 92       	push	r6
    3474:	7f 92       	push	r7
    3476:	8f 92       	push	r8
    3478:	9f 92       	push	r9
    347a:	af 92       	push	r10
    347c:	bf 92       	push	r11
    347e:	cf 92       	push	r12
    3480:	df 92       	push	r13
    3482:	ef 92       	push	r14
    3484:	ff 92       	push	r15
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	00 d0       	rcall	.+0      	; 0x3490 <xQueueGenericSend+0x1e>
    3490:	1f 92       	push	r1
    3492:	1f 92       	push	r1
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	8c 01       	movw	r16, r24
    349a:	5b 01       	movw	r10, r22
    349c:	5d 83       	std	Y+5, r21	; 0x05
    349e:	4c 83       	std	Y+4, r20	; 0x04
    34a0:	72 2e       	mov	r7, r18
    34a2:	81 2c       	mov	r8, r1
    34a4:	66 24       	eor	r6, r6
    34a6:	63 94       	inc	r6
    34a8:	99 24       	eor	r9, r9
    34aa:	9a 94       	dec	r9
    34ac:	7c 01       	movw	r14, r24
    34ae:	88 e0       	ldi	r24, 0x08	; 8
    34b0:	e8 0e       	add	r14, r24
    34b2:	f1 1c       	adc	r15, r1
    34b4:	68 01       	movw	r12, r16
    34b6:	e1 e1       	ldi	r30, 0x11	; 17
    34b8:	ce 0e       	add	r12, r30
    34ba:	d1 1c       	adc	r13, r1
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	0f 92       	push	r0
    34c2:	f8 01       	movw	r30, r16
    34c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    34c6:	83 8d       	ldd	r24, Z+27	; 0x1b
    34c8:	98 17       	cp	r25, r24
    34ca:	20 f0       	brcs	.+8      	; 0x34d4 <xQueueGenericSend+0x62>
    34cc:	f2 e0       	ldi	r31, 0x02	; 2
    34ce:	7f 12       	cpse	r7, r31
    34d0:	6e c0       	rjmp	.+220    	; 0x35ae <xQueueGenericSend+0x13c>
    34d2:	7d c1       	rjmp	.+762    	; 0x37ce <xQueueGenericSend+0x35c>
    34d4:	f8 01       	movw	r30, r16
    34d6:	44 8d       	ldd	r20, Z+28	; 0x1c
    34d8:	41 11       	cpse	r20, r1
    34da:	15 c0       	rjmp	.+42     	; 0x3506 <xQueueGenericSend+0x94>
    34dc:	f8 01       	movw	r30, r16
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	89 2b       	or	r24, r25
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <xQueueGenericSend+0x76>
    34e6:	79 c1       	rjmp	.+754    	; 0x37da <xQueueGenericSend+0x368>
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	93 81       	ldd	r25, Z+3	; 0x03
    34ec:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <xTaskPriorityDisinherit>
    34f0:	f8 01       	movw	r30, r16
    34f2:	13 82       	std	Z+3, r1	; 0x03
    34f4:	12 82       	std	Z+2, r1	; 0x02
    34f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    34f8:	9f 5f       	subi	r25, 0xFF	; 255
    34fa:	92 8f       	std	Z+26, r25	; 0x1a
    34fc:	91 89       	ldd	r25, Z+17	; 0x11
    34fe:	99 23       	and	r25, r25
    3500:	09 f4       	brne	.+2      	; 0x3504 <xQueueGenericSend+0x92>
    3502:	4f c0       	rjmp	.+158    	; 0x35a2 <xQueueGenericSend+0x130>
    3504:	46 c0       	rjmp	.+140    	; 0x3592 <xQueueGenericSend+0x120>
    3506:	71 10       	cpse	r7, r1
    3508:	1a c0       	rjmp	.+52     	; 0x353e <xQueueGenericSend+0xcc>
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	b5 01       	movw	r22, r10
    350e:	f8 01       	movw	r30, r16
    3510:	84 81       	ldd	r24, Z+4	; 0x04
    3512:	95 81       	ldd	r25, Z+5	; 0x05
    3514:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    3518:	f8 01       	movw	r30, r16
    351a:	24 8d       	ldd	r18, Z+28	; 0x1c
    351c:	84 81       	ldd	r24, Z+4	; 0x04
    351e:	95 81       	ldd	r25, Z+5	; 0x05
    3520:	82 0f       	add	r24, r18
    3522:	91 1d       	adc	r25, r1
    3524:	95 83       	std	Z+5, r25	; 0x05
    3526:	84 83       	std	Z+4, r24	; 0x04
    3528:	22 81       	ldd	r18, Z+2	; 0x02
    352a:	33 81       	ldd	r19, Z+3	; 0x03
    352c:	82 17       	cp	r24, r18
    352e:	93 07       	cpc	r25, r19
    3530:	08 f4       	brcc	.+2      	; 0x3534 <xQueueGenericSend+0xc2>
    3532:	53 c1       	rjmp	.+678    	; 0x37da <xQueueGenericSend+0x368>
    3534:	80 81       	ld	r24, Z
    3536:	91 81       	ldd	r25, Z+1	; 0x01
    3538:	95 83       	std	Z+5, r25	; 0x05
    353a:	84 83       	std	Z+4, r24	; 0x04
    353c:	4e c1       	rjmp	.+668    	; 0x37da <xQueueGenericSend+0x368>
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	b5 01       	movw	r22, r10
    3542:	f8 01       	movw	r30, r16
    3544:	86 81       	ldd	r24, Z+6	; 0x06
    3546:	97 81       	ldd	r25, Z+7	; 0x07
    3548:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    354c:	f8 01       	movw	r30, r16
    354e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	91 95       	neg	r25
    3554:	81 95       	neg	r24
    3556:	91 09       	sbc	r25, r1
    3558:	26 81       	ldd	r18, Z+6	; 0x06
    355a:	37 81       	ldd	r19, Z+7	; 0x07
    355c:	28 0f       	add	r18, r24
    355e:	39 1f       	adc	r19, r25
    3560:	37 83       	std	Z+7, r19	; 0x07
    3562:	26 83       	std	Z+6, r18	; 0x06
    3564:	40 81       	ld	r20, Z
    3566:	51 81       	ldd	r21, Z+1	; 0x01
    3568:	24 17       	cp	r18, r20
    356a:	35 07       	cpc	r19, r21
    356c:	30 f4       	brcc	.+12     	; 0x357a <xQueueGenericSend+0x108>
    356e:	22 81       	ldd	r18, Z+2	; 0x02
    3570:	33 81       	ldd	r19, Z+3	; 0x03
    3572:	82 0f       	add	r24, r18
    3574:	93 1f       	adc	r25, r19
    3576:	97 83       	std	Z+7, r25	; 0x07
    3578:	86 83       	std	Z+6, r24	; 0x06
    357a:	f2 e0       	ldi	r31, 0x02	; 2
    357c:	7f 12       	cpse	r7, r31
    357e:	2d c1       	rjmp	.+602    	; 0x37da <xQueueGenericSend+0x368>
    3580:	f8 01       	movw	r30, r16
    3582:	82 8d       	ldd	r24, Z+26	; 0x1a
    3584:	88 23       	and	r24, r24
    3586:	09 f4       	brne	.+2      	; 0x358a <xQueueGenericSend+0x118>
    3588:	28 c1       	rjmp	.+592    	; 0x37da <xQueueGenericSend+0x368>
    358a:	82 8d       	ldd	r24, Z+26	; 0x1a
    358c:	81 50       	subi	r24, 0x01	; 1
    358e:	82 8f       	std	Z+26, r24	; 0x1a
    3590:	24 c1       	rjmp	.+584    	; 0x37da <xQueueGenericSend+0x368>
    3592:	c8 01       	movw	r24, r16
    3594:	41 96       	adiw	r24, 0x11	; 17
    3596:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    359a:	81 30       	cpi	r24, 0x01	; 1
    359c:	21 f4       	brne	.+8      	; 0x35a6 <xQueueGenericSend+0x134>
    359e:	ba dc       	rcall	.-1676   	; 0x2f14 <vPortYield>
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <xQueueGenericSend+0x134>
    35a2:	81 11       	cpse	r24, r1
    35a4:	b7 dc       	rcall	.-1682   	; 0x2f14 <vPortYield>
    35a6:	0f 90       	pop	r0
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	1e c1       	rjmp	.+572    	; 0x37ea <xQueueGenericSend+0x378>
    35ae:	8c 81       	ldd	r24, Y+4	; 0x04
    35b0:	9d 81       	ldd	r25, Y+5	; 0x05
    35b2:	89 2b       	or	r24, r25
    35b4:	21 f4       	brne	.+8      	; 0x35be <xQueueGenericSend+0x14c>
    35b6:	0f 90       	pop	r0
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	16 c1       	rjmp	.+556    	; 0x37ea <xQueueGenericSend+0x378>
    35be:	81 10       	cpse	r8, r1
    35c0:	05 c0       	rjmp	.+10     	; 0x35cc <xQueueGenericSend+0x15a>
    35c2:	ce 01       	movw	r24, r28
    35c4:	01 96       	adiw	r24, 0x01	; 1
    35c6:	0e 94 29 2a 	call	0x5452	; 0x5452 <vTaskSetTimeOutState>
    35ca:	86 2c       	mov	r8, r6
    35cc:	0f 90       	pop	r0
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	0f 92       	push	r0
    35da:	f8 01       	movw	r30, r16
    35dc:	85 8d       	ldd	r24, Z+29	; 0x1d
    35de:	8f 3f       	cpi	r24, 0xFF	; 255
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <xQueueGenericSend+0x172>
    35e2:	15 8e       	std	Z+29, r1	; 0x1d
    35e4:	f8 01       	movw	r30, r16
    35e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    35e8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ea:	09 f4       	brne	.+2      	; 0x35ee <xQueueGenericSend+0x17c>
    35ec:	16 8e       	std	Z+30, r1	; 0x1e
    35ee:	0f 90       	pop	r0
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	be 01       	movw	r22, r28
    35f4:	6c 5f       	subi	r22, 0xFC	; 252
    35f6:	7f 4f       	sbci	r23, 0xFF	; 255
    35f8:	ce 01       	movw	r24, r28
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	0e 94 34 2a 	call	0x5468	; 0x5468 <xTaskCheckForTimeOut>
    3600:	81 11       	cpse	r24, r1
    3602:	96 c0       	rjmp	.+300    	; 0x3730 <xQueueGenericSend+0x2be>
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	0f 92       	push	r0
    360a:	f8 01       	movw	r30, r16
    360c:	92 8d       	ldd	r25, Z+26	; 0x1a
    360e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3610:	0f 90       	pop	r0
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	98 13       	cpse	r25, r24
    3616:	4a c0       	rjmp	.+148    	; 0x36ac <xQueueGenericSend+0x23a>
    3618:	6c 81       	ldd	r22, Y+4	; 0x04
    361a:	7d 81       	ldd	r23, Y+5	; 0x05
    361c:	c7 01       	movw	r24, r14
    361e:	0e 94 86 29 	call	0x530c	; 0x530c <vTaskPlaceOnEventList>
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	f8 94       	cli
    3626:	0f 92       	push	r0
    3628:	f8 01       	movw	r30, r16
    362a:	86 8d       	ldd	r24, Z+30	; 0x1e
    362c:	18 16       	cp	r1, r24
    362e:	ac f4       	brge	.+42     	; 0x365a <xQueueGenericSend+0x1e8>
    3630:	81 89       	ldd	r24, Z+17	; 0x11
    3632:	81 11       	cpse	r24, r1
    3634:	05 c0       	rjmp	.+10     	; 0x3640 <xQueueGenericSend+0x1ce>
    3636:	11 c0       	rjmp	.+34     	; 0x365a <xQueueGenericSend+0x1e8>
    3638:	f8 01       	movw	r30, r16
    363a:	81 89       	ldd	r24, Z+17	; 0x11
    363c:	88 23       	and	r24, r24
    363e:	69 f0       	breq	.+26     	; 0x365a <xQueueGenericSend+0x1e8>
    3640:	c6 01       	movw	r24, r12
    3642:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3646:	81 11       	cpse	r24, r1
    3648:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    364c:	f8 01       	movw	r30, r16
    364e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3650:	81 50       	subi	r24, 0x01	; 1
    3652:	86 8f       	std	Z+30, r24	; 0x1e
    3654:	86 8d       	ldd	r24, Z+30	; 0x1e
    3656:	18 16       	cp	r1, r24
    3658:	7c f3       	brlt	.-34     	; 0x3638 <xQueueGenericSend+0x1c6>
    365a:	f8 01       	movw	r30, r16
    365c:	96 8e       	std	Z+30, r9	; 0x1e
    365e:	0f 90       	pop	r0
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	0f 92       	push	r0
    3668:	85 8d       	ldd	r24, Z+29	; 0x1d
    366a:	18 16       	cp	r1, r24
    366c:	ac f4       	brge	.+42     	; 0x3698 <xQueueGenericSend+0x226>
    366e:	80 85       	ldd	r24, Z+8	; 0x08
    3670:	81 11       	cpse	r24, r1
    3672:	05 c0       	rjmp	.+10     	; 0x367e <xQueueGenericSend+0x20c>
    3674:	11 c0       	rjmp	.+34     	; 0x3698 <xQueueGenericSend+0x226>
    3676:	f8 01       	movw	r30, r16
    3678:	80 85       	ldd	r24, Z+8	; 0x08
    367a:	88 23       	and	r24, r24
    367c:	69 f0       	breq	.+26     	; 0x3698 <xQueueGenericSend+0x226>
    367e:	c7 01       	movw	r24, r14
    3680:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3684:	81 11       	cpse	r24, r1
    3686:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    368a:	f8 01       	movw	r30, r16
    368c:	85 8d       	ldd	r24, Z+29	; 0x1d
    368e:	81 50       	subi	r24, 0x01	; 1
    3690:	85 8f       	std	Z+29, r24	; 0x1d
    3692:	85 8d       	ldd	r24, Z+29	; 0x1d
    3694:	18 16       	cp	r1, r24
    3696:	7c f3       	brlt	.-34     	; 0x3676 <xQueueGenericSend+0x204>
    3698:	f8 01       	movw	r30, r16
    369a:	95 8e       	std	Z+29, r9	; 0x1d
    369c:	0f 90       	pop	r0
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    36a4:	81 11       	cpse	r24, r1
    36a6:	0a cf       	rjmp	.-492    	; 0x34bc <xQueueGenericSend+0x4a>
    36a8:	35 dc       	rcall	.-1942   	; 0x2f14 <vPortYield>
    36aa:	08 cf       	rjmp	.-496    	; 0x34bc <xQueueGenericSend+0x4a>
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	0f 92       	push	r0
    36b2:	f8 01       	movw	r30, r16
    36b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    36b6:	18 16       	cp	r1, r24
    36b8:	ac f4       	brge	.+42     	; 0x36e4 <xQueueGenericSend+0x272>
    36ba:	81 89       	ldd	r24, Z+17	; 0x11
    36bc:	81 11       	cpse	r24, r1
    36be:	05 c0       	rjmp	.+10     	; 0x36ca <xQueueGenericSend+0x258>
    36c0:	11 c0       	rjmp	.+34     	; 0x36e4 <xQueueGenericSend+0x272>
    36c2:	f8 01       	movw	r30, r16
    36c4:	81 89       	ldd	r24, Z+17	; 0x11
    36c6:	88 23       	and	r24, r24
    36c8:	69 f0       	breq	.+26     	; 0x36e4 <xQueueGenericSend+0x272>
    36ca:	c6 01       	movw	r24, r12
    36cc:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    36d0:	81 11       	cpse	r24, r1
    36d2:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    36d6:	f8 01       	movw	r30, r16
    36d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    36da:	81 50       	subi	r24, 0x01	; 1
    36dc:	86 8f       	std	Z+30, r24	; 0x1e
    36de:	86 8d       	ldd	r24, Z+30	; 0x1e
    36e0:	18 16       	cp	r1, r24
    36e2:	7c f3       	brlt	.-34     	; 0x36c2 <xQueueGenericSend+0x250>
    36e4:	f8 01       	movw	r30, r16
    36e6:	96 8e       	std	Z+30, r9	; 0x1e
    36e8:	0f 90       	pop	r0
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	0f 92       	push	r0
    36f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    36f4:	18 16       	cp	r1, r24
    36f6:	ac f4       	brge	.+42     	; 0x3722 <xQueueGenericSend+0x2b0>
    36f8:	80 85       	ldd	r24, Z+8	; 0x08
    36fa:	81 11       	cpse	r24, r1
    36fc:	05 c0       	rjmp	.+10     	; 0x3708 <xQueueGenericSend+0x296>
    36fe:	11 c0       	rjmp	.+34     	; 0x3722 <xQueueGenericSend+0x2b0>
    3700:	f8 01       	movw	r30, r16
    3702:	80 85       	ldd	r24, Z+8	; 0x08
    3704:	88 23       	and	r24, r24
    3706:	69 f0       	breq	.+26     	; 0x3722 <xQueueGenericSend+0x2b0>
    3708:	c7 01       	movw	r24, r14
    370a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    370e:	81 11       	cpse	r24, r1
    3710:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3714:	f8 01       	movw	r30, r16
    3716:	85 8d       	ldd	r24, Z+29	; 0x1d
    3718:	81 50       	subi	r24, 0x01	; 1
    371a:	85 8f       	std	Z+29, r24	; 0x1d
    371c:	85 8d       	ldd	r24, Z+29	; 0x1d
    371e:	18 16       	cp	r1, r24
    3720:	7c f3       	brlt	.-34     	; 0x3700 <xQueueGenericSend+0x28e>
    3722:	f8 01       	movw	r30, r16
    3724:	95 8e       	std	Z+29, r9	; 0x1d
    3726:	0f 90       	pop	r0
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    372e:	c6 ce       	rjmp	.-628    	; 0x34bc <xQueueGenericSend+0x4a>
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	0f 92       	push	r0
    3736:	f8 01       	movw	r30, r16
    3738:	86 8d       	ldd	r24, Z+30	; 0x1e
    373a:	18 16       	cp	r1, r24
    373c:	d4 f4       	brge	.+52     	; 0x3772 <xQueueGenericSend+0x300>
    373e:	81 89       	ldd	r24, Z+17	; 0x11
    3740:	81 11       	cpse	r24, r1
    3742:	06 c0       	rjmp	.+12     	; 0x3750 <xQueueGenericSend+0x2de>
    3744:	16 c0       	rjmp	.+44     	; 0x3772 <xQueueGenericSend+0x300>
    3746:	f8 01       	movw	r30, r16
    3748:	81 89       	ldd	r24, Z+17	; 0x11
    374a:	81 11       	cpse	r24, r1
    374c:	05 c0       	rjmp	.+10     	; 0x3758 <xQueueGenericSend+0x2e6>
    374e:	11 c0       	rjmp	.+34     	; 0x3772 <xQueueGenericSend+0x300>
    3750:	78 01       	movw	r14, r16
    3752:	f1 e1       	ldi	r31, 0x11	; 17
    3754:	ef 0e       	add	r14, r31
    3756:	f1 1c       	adc	r15, r1
    3758:	c7 01       	movw	r24, r14
    375a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    375e:	81 11       	cpse	r24, r1
    3760:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3764:	f8 01       	movw	r30, r16
    3766:	86 8d       	ldd	r24, Z+30	; 0x1e
    3768:	81 50       	subi	r24, 0x01	; 1
    376a:	86 8f       	std	Z+30, r24	; 0x1e
    376c:	86 8d       	ldd	r24, Z+30	; 0x1e
    376e:	18 16       	cp	r1, r24
    3770:	54 f3       	brlt	.-44     	; 0x3746 <xQueueGenericSend+0x2d4>
    3772:	8f ef       	ldi	r24, 0xFF	; 255
    3774:	f8 01       	movw	r30, r16
    3776:	86 8f       	std	Z+30, r24	; 0x1e
    3778:	0f 90       	pop	r0
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	0f 92       	push	r0
    3782:	85 8d       	ldd	r24, Z+29	; 0x1d
    3784:	18 16       	cp	r1, r24
    3786:	d4 f4       	brge	.+52     	; 0x37bc <xQueueGenericSend+0x34a>
    3788:	80 85       	ldd	r24, Z+8	; 0x08
    378a:	81 11       	cpse	r24, r1
    378c:	06 c0       	rjmp	.+12     	; 0x379a <xQueueGenericSend+0x328>
    378e:	16 c0       	rjmp	.+44     	; 0x37bc <xQueueGenericSend+0x34a>
    3790:	f8 01       	movw	r30, r16
    3792:	80 85       	ldd	r24, Z+8	; 0x08
    3794:	81 11       	cpse	r24, r1
    3796:	05 c0       	rjmp	.+10     	; 0x37a2 <xQueueGenericSend+0x330>
    3798:	11 c0       	rjmp	.+34     	; 0x37bc <xQueueGenericSend+0x34a>
    379a:	78 01       	movw	r14, r16
    379c:	f8 e0       	ldi	r31, 0x08	; 8
    379e:	ef 0e       	add	r14, r31
    37a0:	f1 1c       	adc	r15, r1
    37a2:	c7 01       	movw	r24, r14
    37a4:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    37a8:	81 11       	cpse	r24, r1
    37aa:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    37ae:	f8 01       	movw	r30, r16
    37b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    37b2:	81 50       	subi	r24, 0x01	; 1
    37b4:	85 8f       	std	Z+29, r24	; 0x1d
    37b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    37b8:	18 16       	cp	r1, r24
    37ba:	54 f3       	brlt	.-44     	; 0x3790 <xQueueGenericSend+0x31e>
    37bc:	8f ef       	ldi	r24, 0xFF	; 255
    37be:	f8 01       	movw	r30, r16
    37c0:	85 8f       	std	Z+29, r24	; 0x1d
    37c2:	0f 90       	pop	r0
    37c4:	0f be       	out	0x3f, r0	; 63
    37c6:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	0e c0       	rjmp	.+28     	; 0x37ea <xQueueGenericSend+0x378>
    37ce:	f8 01       	movw	r30, r16
    37d0:	44 8d       	ldd	r20, Z+28	; 0x1c
    37d2:	44 23       	and	r20, r20
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <xQueueGenericSend+0x366>
    37d6:	82 ce       	rjmp	.-764    	; 0x34dc <xQueueGenericSend+0x6a>
    37d8:	b2 ce       	rjmp	.-668    	; 0x353e <xQueueGenericSend+0xcc>
    37da:	f8 01       	movw	r30, r16
    37dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    37de:	8f 5f       	subi	r24, 0xFF	; 255
    37e0:	82 8f       	std	Z+26, r24	; 0x1a
    37e2:	81 89       	ldd	r24, Z+17	; 0x11
    37e4:	81 11       	cpse	r24, r1
    37e6:	d5 ce       	rjmp	.-598    	; 0x3592 <xQueueGenericSend+0x120>
    37e8:	de ce       	rjmp	.-580    	; 0x35a6 <xQueueGenericSend+0x134>
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	df 90       	pop	r13
    3802:	cf 90       	pop	r12
    3804:	bf 90       	pop	r11
    3806:	af 90       	pop	r10
    3808:	9f 90       	pop	r9
    380a:	8f 90       	pop	r8
    380c:	7f 90       	pop	r7
    380e:	6f 90       	pop	r6
    3810:	08 95       	ret

00003812 <xQueueGive>:
    3812:	9f 92       	push	r9
    3814:	af 92       	push	r10
    3816:	bf 92       	push	r11
    3818:	cf 92       	push	r12
    381a:	df 92       	push	r13
    381c:	ef 92       	push	r14
    381e:	ff 92       	push	r15
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	00 d0       	rcall	.+0      	; 0x382a <xQueueGive+0x18>
    382a:	1f 92       	push	r1
    382c:	1f 92       	push	r1
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	8c 01       	movw	r16, r24
    3834:	7d 83       	std	Y+5, r23	; 0x05
    3836:	6c 83       	std	Y+4, r22	; 0x04
    3838:	a1 2c       	mov	r10, r1
    383a:	99 24       	eor	r9, r9
    383c:	93 94       	inc	r9
    383e:	bb 24       	eor	r11, r11
    3840:	ba 94       	dec	r11
    3842:	7c 01       	movw	r14, r24
    3844:	88 e0       	ldi	r24, 0x08	; 8
    3846:	e8 0e       	add	r14, r24
    3848:	f1 1c       	adc	r15, r1
    384a:	68 01       	movw	r12, r16
    384c:	e1 e1       	ldi	r30, 0x11	; 17
    384e:	ce 0e       	add	r12, r30
    3850:	d1 1c       	adc	r13, r1
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	0f 92       	push	r0
    3858:	f8 01       	movw	r30, r16
    385a:	92 8d       	ldd	r25, Z+26	; 0x1a
    385c:	83 8d       	ldd	r24, Z+27	; 0x1b
    385e:	98 17       	cp	r25, r24
    3860:	00 f5       	brcc	.+64     	; 0x38a2 <xQueueGive+0x90>
    3862:	80 81       	ld	r24, Z
    3864:	91 81       	ldd	r25, Z+1	; 0x01
    3866:	89 2b       	or	r24, r25
    3868:	09 f0       	breq	.+2      	; 0x386c <xQueueGive+0x5a>
    386a:	2b c1       	rjmp	.+598    	; 0x3ac2 <xQueueGive+0x2b0>
    386c:	82 81       	ldd	r24, Z+2	; 0x02
    386e:	93 81       	ldd	r25, Z+3	; 0x03
    3870:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <xTaskPriorityDisinherit>
    3874:	f8 01       	movw	r30, r16
    3876:	13 82       	std	Z+3, r1	; 0x03
    3878:	12 82       	std	Z+2, r1	; 0x02
    387a:	92 8d       	ldd	r25, Z+26	; 0x1a
    387c:	9f 5f       	subi	r25, 0xFF	; 255
    387e:	92 8f       	std	Z+26, r25	; 0x1a
    3880:	91 89       	ldd	r25, Z+17	; 0x11
    3882:	99 23       	and	r25, r25
    3884:	41 f0       	breq	.+16     	; 0x3896 <xQueueGive+0x84>
    3886:	c8 01       	movw	r24, r16
    3888:	41 96       	adiw	r24, 0x11	; 17
    388a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    388e:	81 30       	cpi	r24, 0x01	; 1
    3890:	21 f4       	brne	.+8      	; 0x389a <xQueueGive+0x88>
    3892:	40 db       	rcall	.-2432   	; 0x2f14 <vPortYield>
    3894:	02 c0       	rjmp	.+4      	; 0x389a <xQueueGive+0x88>
    3896:	81 11       	cpse	r24, r1
    3898:	3d db       	rcall	.-2438   	; 0x2f14 <vPortYield>
    389a:	0f 90       	pop	r0
    389c:	0f be       	out	0x3f, r0	; 63
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	18 c1       	rjmp	.+560    	; 0x3ad2 <xQueueGive+0x2c0>
    38a2:	8c 81       	ldd	r24, Y+4	; 0x04
    38a4:	9d 81       	ldd	r25, Y+5	; 0x05
    38a6:	89 2b       	or	r24, r25
    38a8:	21 f4       	brne	.+8      	; 0x38b2 <xQueueGive+0xa0>
    38aa:	0f 90       	pop	r0
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	10 c1       	rjmp	.+544    	; 0x3ad2 <xQueueGive+0x2c0>
    38b2:	a1 10       	cpse	r10, r1
    38b4:	05 c0       	rjmp	.+10     	; 0x38c0 <xQueueGive+0xae>
    38b6:	ce 01       	movw	r24, r28
    38b8:	01 96       	adiw	r24, 0x01	; 1
    38ba:	0e 94 29 2a 	call	0x5452	; 0x5452 <vTaskSetTimeOutState>
    38be:	a9 2c       	mov	r10, r9
    38c0:	0f 90       	pop	r0
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	0f 92       	push	r0
    38ce:	f8 01       	movw	r30, r16
    38d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    38d2:	8f 3f       	cpi	r24, 0xFF	; 255
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <xQueueGive+0xc6>
    38d6:	15 8e       	std	Z+29, r1	; 0x1d
    38d8:	f8 01       	movw	r30, r16
    38da:	86 8d       	ldd	r24, Z+30	; 0x1e
    38dc:	8f 3f       	cpi	r24, 0xFF	; 255
    38de:	09 f4       	brne	.+2      	; 0x38e2 <xQueueGive+0xd0>
    38e0:	16 8e       	std	Z+30, r1	; 0x1e
    38e2:	0f 90       	pop	r0
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	be 01       	movw	r22, r28
    38e8:	6c 5f       	subi	r22, 0xFC	; 252
    38ea:	7f 4f       	sbci	r23, 0xFF	; 255
    38ec:	ce 01       	movw	r24, r28
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	0e 94 34 2a 	call	0x5468	; 0x5468 <xTaskCheckForTimeOut>
    38f4:	81 11       	cpse	r24, r1
    38f6:	96 c0       	rjmp	.+300    	; 0x3a24 <xQueueGive+0x212>
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	0f 92       	push	r0
    38fe:	f8 01       	movw	r30, r16
    3900:	92 8d       	ldd	r25, Z+26	; 0x1a
    3902:	83 8d       	ldd	r24, Z+27	; 0x1b
    3904:	0f 90       	pop	r0
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	98 13       	cpse	r25, r24
    390a:	4a c0       	rjmp	.+148    	; 0x39a0 <xQueueGive+0x18e>
    390c:	6c 81       	ldd	r22, Y+4	; 0x04
    390e:	7d 81       	ldd	r23, Y+5	; 0x05
    3910:	c7 01       	movw	r24, r14
    3912:	0e 94 86 29 	call	0x530c	; 0x530c <vTaskPlaceOnEventList>
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	0f 92       	push	r0
    391c:	f8 01       	movw	r30, r16
    391e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3920:	18 16       	cp	r1, r24
    3922:	ac f4       	brge	.+42     	; 0x394e <xQueueGive+0x13c>
    3924:	81 89       	ldd	r24, Z+17	; 0x11
    3926:	81 11       	cpse	r24, r1
    3928:	05 c0       	rjmp	.+10     	; 0x3934 <xQueueGive+0x122>
    392a:	11 c0       	rjmp	.+34     	; 0x394e <xQueueGive+0x13c>
    392c:	f8 01       	movw	r30, r16
    392e:	81 89       	ldd	r24, Z+17	; 0x11
    3930:	88 23       	and	r24, r24
    3932:	69 f0       	breq	.+26     	; 0x394e <xQueueGive+0x13c>
    3934:	c6 01       	movw	r24, r12
    3936:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    393a:	81 11       	cpse	r24, r1
    393c:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3940:	f8 01       	movw	r30, r16
    3942:	86 8d       	ldd	r24, Z+30	; 0x1e
    3944:	81 50       	subi	r24, 0x01	; 1
    3946:	86 8f       	std	Z+30, r24	; 0x1e
    3948:	86 8d       	ldd	r24, Z+30	; 0x1e
    394a:	18 16       	cp	r1, r24
    394c:	7c f3       	brlt	.-34     	; 0x392c <xQueueGive+0x11a>
    394e:	f8 01       	movw	r30, r16
    3950:	b6 8e       	std	Z+30, r11	; 0x1e
    3952:	0f 90       	pop	r0
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	0f 92       	push	r0
    395c:	85 8d       	ldd	r24, Z+29	; 0x1d
    395e:	18 16       	cp	r1, r24
    3960:	ac f4       	brge	.+42     	; 0x398c <xQueueGive+0x17a>
    3962:	80 85       	ldd	r24, Z+8	; 0x08
    3964:	81 11       	cpse	r24, r1
    3966:	05 c0       	rjmp	.+10     	; 0x3972 <xQueueGive+0x160>
    3968:	11 c0       	rjmp	.+34     	; 0x398c <xQueueGive+0x17a>
    396a:	f8 01       	movw	r30, r16
    396c:	80 85       	ldd	r24, Z+8	; 0x08
    396e:	88 23       	and	r24, r24
    3970:	69 f0       	breq	.+26     	; 0x398c <xQueueGive+0x17a>
    3972:	c7 01       	movw	r24, r14
    3974:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3978:	81 11       	cpse	r24, r1
    397a:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    397e:	f8 01       	movw	r30, r16
    3980:	85 8d       	ldd	r24, Z+29	; 0x1d
    3982:	81 50       	subi	r24, 0x01	; 1
    3984:	85 8f       	std	Z+29, r24	; 0x1d
    3986:	85 8d       	ldd	r24, Z+29	; 0x1d
    3988:	18 16       	cp	r1, r24
    398a:	7c f3       	brlt	.-34     	; 0x396a <xQueueGive+0x158>
    398c:	f8 01       	movw	r30, r16
    398e:	b5 8e       	std	Z+29, r11	; 0x1d
    3990:	0f 90       	pop	r0
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3998:	81 11       	cpse	r24, r1
    399a:	5b cf       	rjmp	.-330    	; 0x3852 <xQueueGive+0x40>
    399c:	bb da       	rcall	.-2698   	; 0x2f14 <vPortYield>
    399e:	59 cf       	rjmp	.-334    	; 0x3852 <xQueueGive+0x40>
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	0f 92       	push	r0
    39a6:	f8 01       	movw	r30, r16
    39a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    39aa:	18 16       	cp	r1, r24
    39ac:	ac f4       	brge	.+42     	; 0x39d8 <xQueueGive+0x1c6>
    39ae:	81 89       	ldd	r24, Z+17	; 0x11
    39b0:	81 11       	cpse	r24, r1
    39b2:	05 c0       	rjmp	.+10     	; 0x39be <xQueueGive+0x1ac>
    39b4:	11 c0       	rjmp	.+34     	; 0x39d8 <xQueueGive+0x1c6>
    39b6:	f8 01       	movw	r30, r16
    39b8:	81 89       	ldd	r24, Z+17	; 0x11
    39ba:	88 23       	and	r24, r24
    39bc:	69 f0       	breq	.+26     	; 0x39d8 <xQueueGive+0x1c6>
    39be:	c6 01       	movw	r24, r12
    39c0:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    39c4:	81 11       	cpse	r24, r1
    39c6:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    39ca:	f8 01       	movw	r30, r16
    39cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    39ce:	81 50       	subi	r24, 0x01	; 1
    39d0:	86 8f       	std	Z+30, r24	; 0x1e
    39d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    39d4:	18 16       	cp	r1, r24
    39d6:	7c f3       	brlt	.-34     	; 0x39b6 <xQueueGive+0x1a4>
    39d8:	f8 01       	movw	r30, r16
    39da:	b6 8e       	std	Z+30, r11	; 0x1e
    39dc:	0f 90       	pop	r0
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	0f 92       	push	r0
    39e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    39e8:	18 16       	cp	r1, r24
    39ea:	ac f4       	brge	.+42     	; 0x3a16 <xQueueGive+0x204>
    39ec:	80 85       	ldd	r24, Z+8	; 0x08
    39ee:	81 11       	cpse	r24, r1
    39f0:	05 c0       	rjmp	.+10     	; 0x39fc <xQueueGive+0x1ea>
    39f2:	11 c0       	rjmp	.+34     	; 0x3a16 <xQueueGive+0x204>
    39f4:	f8 01       	movw	r30, r16
    39f6:	80 85       	ldd	r24, Z+8	; 0x08
    39f8:	88 23       	and	r24, r24
    39fa:	69 f0       	breq	.+26     	; 0x3a16 <xQueueGive+0x204>
    39fc:	c7 01       	movw	r24, r14
    39fe:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3a02:	81 11       	cpse	r24, r1
    3a04:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3a08:	f8 01       	movw	r30, r16
    3a0a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a0c:	81 50       	subi	r24, 0x01	; 1
    3a0e:	85 8f       	std	Z+29, r24	; 0x1d
    3a10:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a12:	18 16       	cp	r1, r24
    3a14:	7c f3       	brlt	.-34     	; 0x39f4 <xQueueGive+0x1e2>
    3a16:	f8 01       	movw	r30, r16
    3a18:	b5 8e       	std	Z+29, r11	; 0x1d
    3a1a:	0f 90       	pop	r0
    3a1c:	0f be       	out	0x3f, r0	; 63
    3a1e:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3a22:	17 cf       	rjmp	.-466    	; 0x3852 <xQueueGive+0x40>
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	0f 92       	push	r0
    3a2a:	f8 01       	movw	r30, r16
    3a2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a2e:	18 16       	cp	r1, r24
    3a30:	d4 f4       	brge	.+52     	; 0x3a66 <xQueueGive+0x254>
    3a32:	81 89       	ldd	r24, Z+17	; 0x11
    3a34:	81 11       	cpse	r24, r1
    3a36:	06 c0       	rjmp	.+12     	; 0x3a44 <xQueueGive+0x232>
    3a38:	16 c0       	rjmp	.+44     	; 0x3a66 <xQueueGive+0x254>
    3a3a:	f8 01       	movw	r30, r16
    3a3c:	81 89       	ldd	r24, Z+17	; 0x11
    3a3e:	81 11       	cpse	r24, r1
    3a40:	05 c0       	rjmp	.+10     	; 0x3a4c <xQueueGive+0x23a>
    3a42:	11 c0       	rjmp	.+34     	; 0x3a66 <xQueueGive+0x254>
    3a44:	78 01       	movw	r14, r16
    3a46:	f1 e1       	ldi	r31, 0x11	; 17
    3a48:	ef 0e       	add	r14, r31
    3a4a:	f1 1c       	adc	r15, r1
    3a4c:	c7 01       	movw	r24, r14
    3a4e:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3a52:	81 11       	cpse	r24, r1
    3a54:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3a58:	f8 01       	movw	r30, r16
    3a5a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a5c:	81 50       	subi	r24, 0x01	; 1
    3a5e:	86 8f       	std	Z+30, r24	; 0x1e
    3a60:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a62:	18 16       	cp	r1, r24
    3a64:	54 f3       	brlt	.-44     	; 0x3a3a <xQueueGive+0x228>
    3a66:	8f ef       	ldi	r24, 0xFF	; 255
    3a68:	f8 01       	movw	r30, r16
    3a6a:	86 8f       	std	Z+30, r24	; 0x1e
    3a6c:	0f 90       	pop	r0
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	0f 92       	push	r0
    3a76:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a78:	18 16       	cp	r1, r24
    3a7a:	d4 f4       	brge	.+52     	; 0x3ab0 <xQueueGive+0x29e>
    3a7c:	80 85       	ldd	r24, Z+8	; 0x08
    3a7e:	81 11       	cpse	r24, r1
    3a80:	06 c0       	rjmp	.+12     	; 0x3a8e <xQueueGive+0x27c>
    3a82:	16 c0       	rjmp	.+44     	; 0x3ab0 <xQueueGive+0x29e>
    3a84:	f8 01       	movw	r30, r16
    3a86:	80 85       	ldd	r24, Z+8	; 0x08
    3a88:	81 11       	cpse	r24, r1
    3a8a:	05 c0       	rjmp	.+10     	; 0x3a96 <xQueueGive+0x284>
    3a8c:	11 c0       	rjmp	.+34     	; 0x3ab0 <xQueueGive+0x29e>
    3a8e:	78 01       	movw	r14, r16
    3a90:	f8 e0       	ldi	r31, 0x08	; 8
    3a92:	ef 0e       	add	r14, r31
    3a94:	f1 1c       	adc	r15, r1
    3a96:	c7 01       	movw	r24, r14
    3a98:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3a9c:	81 11       	cpse	r24, r1
    3a9e:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3aa6:	81 50       	subi	r24, 0x01	; 1
    3aa8:	85 8f       	std	Z+29, r24	; 0x1d
    3aaa:	85 8d       	ldd	r24, Z+29	; 0x1d
    3aac:	18 16       	cp	r1, r24
    3aae:	54 f3       	brlt	.-44     	; 0x3a84 <xQueueGive+0x272>
    3ab0:	8f ef       	ldi	r24, 0xFF	; 255
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	85 8f       	std	Z+29, r24	; 0x1d
    3ab6:	0f 90       	pop	r0
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	08 c0       	rjmp	.+16     	; 0x3ad2 <xQueueGive+0x2c0>
    3ac2:	f8 01       	movw	r30, r16
    3ac4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ac6:	8f 5f       	subi	r24, 0xFF	; 255
    3ac8:	82 8f       	std	Z+26, r24	; 0x1a
    3aca:	81 89       	ldd	r24, Z+17	; 0x11
    3acc:	81 11       	cpse	r24, r1
    3ace:	db ce       	rjmp	.-586    	; 0x3886 <xQueueGive+0x74>
    3ad0:	e4 ce       	rjmp	.-568    	; 0x389a <xQueueGive+0x88>
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	df 91       	pop	r29
    3ade:	cf 91       	pop	r28
    3ae0:	1f 91       	pop	r17
    3ae2:	0f 91       	pop	r16
    3ae4:	ff 90       	pop	r15
    3ae6:	ef 90       	pop	r14
    3ae8:	df 90       	pop	r13
    3aea:	cf 90       	pop	r12
    3aec:	bf 90       	pop	r11
    3aee:	af 90       	pop	r10
    3af0:	9f 90       	pop	r9
    3af2:	08 95       	ret

00003af4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3afa:	92 8d       	ldd	r25, Z+26	; 0x1a
    3afc:	83 8d       	ldd	r24, Z+27	; 0x1b
    3afe:	98 17       	cp	r25, r24
    3b00:	d0 f4       	brcc	.+52     	; 0x3b36 <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3b02:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b04:	8f 5f       	subi	r24, 0xFF	; 255
    3b06:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3b08:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b0c:	79 f4       	brne	.+30     	; 0x3b2c <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3b0e:	81 89       	ldd	r24, Z+17	; 0x11
    3b10:	88 23       	and	r24, r24
    3b12:	99 f0       	breq	.+38     	; 0x3b3a <xQueueGiveFromISR+0x46>
    3b14:	eb 01       	movw	r28, r22
    3b16:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b18:	41 96       	adiw	r24, 0x11	; 17
    3b1a:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3b1e:	88 23       	and	r24, r24
    3b20:	71 f0       	breq	.+28     	; 0x3b3e <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3b22:	20 97       	sbiw	r28, 0x00	; 0
    3b24:	71 f0       	breq	.+28     	; 0x3b42 <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	88 83       	st	Y, r24
    3b2a:	0c c0       	rjmp	.+24     	; 0x3b44 <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3b2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b2e:	8f 5f       	subi	r24, 0xFF	; 255
    3b30:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	07 c0       	rjmp	.+14     	; 0x3b44 <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	05 c0       	rjmp	.+10     	; 0x3b44 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	03 c0       	rjmp	.+6      	; 0x3b44 <xQueueGiveFromISR+0x50>
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <xQueueGiveFromISR+0x50>
    3b42:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3b4a:	6f 92       	push	r6
    3b4c:	7f 92       	push	r7
    3b4e:	8f 92       	push	r8
    3b50:	9f 92       	push	r9
    3b52:	af 92       	push	r10
    3b54:	bf 92       	push	r11
    3b56:	cf 92       	push	r12
    3b58:	df 92       	push	r13
    3b5a:	ef 92       	push	r14
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	00 d0       	rcall	.+0      	; 0x3b68 <xQueueGenericReceive+0x1e>
    3b68:	1f 92       	push	r1
    3b6a:	1f 92       	push	r1
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	8c 01       	movw	r16, r24
    3b72:	5b 01       	movw	r10, r22
    3b74:	5d 83       	std	Y+5, r21	; 0x05
    3b76:	4c 83       	std	Y+4, r20	; 0x04
    3b78:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3b7a:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3b7c:	77 24       	eor	r7, r7
    3b7e:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3b80:	99 24       	eor	r9, r9
    3b82:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3b84:	6c 01       	movw	r12, r24
    3b86:	88 e0       	ldi	r24, 0x08	; 8
    3b88:	c8 0e       	add	r12, r24
    3b8a:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b8c:	78 01       	movw	r14, r16
    3b8e:	e1 e1       	ldi	r30, 0x11	; 17
    3b90:	ee 0e       	add	r14, r30
    3b92:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3b9a:	f8 01       	movw	r30, r16
    3b9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <xQueueGenericReceive+0x5a>
    3ba2:	45 c0       	rjmp	.+138    	; 0x3c2e <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3ba4:	e6 80       	ldd	r14, Z+6	; 0x06
    3ba6:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3ba8:	44 8d       	ldd	r20, Z+28	; 0x1c
    3baa:	44 23       	and	r20, r20
    3bac:	a9 f0       	breq	.+42     	; 0x3bd8 <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	c7 01       	movw	r24, r14
    3bb2:	84 0f       	add	r24, r20
    3bb4:	95 1f       	adc	r25, r21
    3bb6:	97 83       	std	Z+7, r25	; 0x07
    3bb8:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3bba:	22 81       	ldd	r18, Z+2	; 0x02
    3bbc:	33 81       	ldd	r19, Z+3	; 0x03
    3bbe:	82 17       	cp	r24, r18
    3bc0:	93 07       	cpc	r25, r19
    3bc2:	20 f0       	brcs	.+8      	; 0x3bcc <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	97 83       	std	Z+7, r25	; 0x07
    3bca:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3bcc:	f8 01       	movw	r30, r16
    3bce:	66 81       	ldd	r22, Z+6	; 0x06
    3bd0:	77 81       	ldd	r23, Z+7	; 0x07
    3bd2:	c5 01       	movw	r24, r10
    3bd4:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3bd8:	61 10       	cpse	r6, r1
    3bda:	19 c0       	rjmp	.+50     	; 0x3c0e <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3bdc:	f8 01       	movw	r30, r16
    3bde:	82 8d       	ldd	r24, Z+26	; 0x1a
    3be0:	81 50       	subi	r24, 0x01	; 1
    3be2:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	89 2b       	or	r24, r25
    3bea:	29 f4       	brne	.+10     	; 0x3bf6 <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3bec:	0e 94 1a 2b 	call	0x5634	; 0x5634 <pvTaskIncrementMutexHeldCount>
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	93 83       	std	Z+3, r25	; 0x03
    3bf4:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3bf6:	f8 01       	movw	r30, r16
    3bf8:	80 85       	ldd	r24, Z+8	; 0x08
    3bfa:	88 23       	and	r24, r24
    3bfc:	a1 f0       	breq	.+40     	; 0x3c26 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3bfe:	c8 01       	movw	r24, r16
    3c00:	08 96       	adiw	r24, 0x08	; 8
    3c02:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	71 f4       	brne	.+28     	; 0x3c26 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3c0a:	84 d9       	rcall	.-3320   	; 0x2f14 <vPortYield>
    3c0c:	0c c0       	rjmp	.+24     	; 0x3c26 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3c0e:	f8 01       	movw	r30, r16
    3c10:	f7 82       	std	Z+7, r15	; 0x07
    3c12:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c14:	81 89       	ldd	r24, Z+17	; 0x11
    3c16:	88 23       	and	r24, r24
    3c18:	31 f0       	breq	.+12     	; 0x3c26 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c1a:	c8 01       	movw	r24, r16
    3c1c:	41 96       	adiw	r24, 0x11	; 17
    3c1e:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3c22:	81 11       	cpse	r24, r1
    3c24:	77 d9       	rcall	.-3346   	; 0x2f14 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3c26:	0f 90       	pop	r0
    3c28:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	1a c1       	rjmp	.+564    	; 0x3e62 <xQueueGenericReceive+0x318>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c30:	9d 81       	ldd	r25, Y+5	; 0x05
    3c32:	89 2b       	or	r24, r25
    3c34:	21 f4       	brne	.+8      	; 0x3c3e <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3c36:	0f 90       	pop	r0
    3c38:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	12 c1       	rjmp	.+548    	; 0x3e62 <xQueueGenericReceive+0x318>
				}
				else if( xEntryTimeSet == pdFALSE )
    3c3e:	81 10       	cpse	r8, r1
    3c40:	05 c0       	rjmp	.+10     	; 0x3c4c <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3c42:	ce 01       	movw	r24, r28
    3c44:	01 96       	adiw	r24, 0x01	; 1
    3c46:	0e 94 29 2a 	call	0x5452	; 0x5452 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3c4a:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3c4c:	0f 90       	pop	r0
    3c4e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3c50:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	0f 92       	push	r0
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <xQueueGenericReceive+0x11a>
    3c62:	15 8e       	std	Z+29, r1	; 0x1d
    3c64:	f8 01       	movw	r30, r16
    3c66:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c68:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <xQueueGenericReceive+0x124>
    3c6c:	16 8e       	std	Z+30, r1	; 0x1e
    3c6e:	0f 90       	pop	r0
    3c70:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c72:	be 01       	movw	r22, r28
    3c74:	6c 5f       	subi	r22, 0xFC	; 252
    3c76:	7f 4f       	sbci	r23, 0xFF	; 255
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	0e 94 34 2a 	call	0x5468	; 0x5468 <xTaskCheckForTimeOut>
    3c80:	81 11       	cpse	r24, r1
    3c82:	a2 c0       	rjmp	.+324    	; 0x3dc8 <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3c8e:	0f 90       	pop	r0
    3c90:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3c92:	81 11       	cpse	r24, r1
    3c94:	57 c0       	rjmp	.+174    	; 0x3d44 <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	89 2b       	or	r24, r25
    3c9c:	49 f4       	brne	.+18     	; 0x3cb0 <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3ca4:	82 81       	ldd	r24, Z+2	; 0x02
    3ca6:	93 81       	ldd	r25, Z+3	; 0x03
    3ca8:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3cb0:	6c 81       	ldd	r22, Y+4	; 0x04
    3cb2:	7d 81       	ldd	r23, Y+5	; 0x05
    3cb4:	c7 01       	movw	r24, r14
    3cb6:	0e 94 86 29 	call	0x530c	; 0x530c <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cc4:	18 16       	cp	r1, r24
    3cc6:	ac f4       	brge	.+42     	; 0x3cf2 <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3cc8:	81 89       	ldd	r24, Z+17	; 0x11
    3cca:	81 11       	cpse	r24, r1
    3ccc:	05 c0       	rjmp	.+10     	; 0x3cd8 <xQueueGenericReceive+0x18e>
    3cce:	11 c0       	rjmp	.+34     	; 0x3cf2 <xQueueGenericReceive+0x1a8>
    3cd0:	f8 01       	movw	r30, r16
    3cd2:	81 89       	ldd	r24, Z+17	; 0x11
    3cd4:	88 23       	and	r24, r24
    3cd6:	69 f0       	breq	.+26     	; 0x3cf2 <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cd8:	c7 01       	movw	r24, r14
    3cda:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3cde:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3ce0:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ce8:	81 50       	subi	r24, 0x01	; 1
    3cea:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cec:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cee:	18 16       	cp	r1, r24
    3cf0:	7c f3       	brlt	.-34     	; 0x3cd0 <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3cf6:	0f 90       	pop	r0
    3cf8:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3cfa:	0f b6       	in	r0, 0x3f	; 63
    3cfc:	f8 94       	cli
    3cfe:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d00:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d02:	18 16       	cp	r1, r24
    3d04:	ac f4       	brge	.+42     	; 0x3d30 <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d06:	80 85       	ldd	r24, Z+8	; 0x08
    3d08:	81 11       	cpse	r24, r1
    3d0a:	05 c0       	rjmp	.+10     	; 0x3d16 <xQueueGenericReceive+0x1cc>
    3d0c:	11 c0       	rjmp	.+34     	; 0x3d30 <xQueueGenericReceive+0x1e6>
    3d0e:	f8 01       	movw	r30, r16
    3d10:	80 85       	ldd	r24, Z+8	; 0x08
    3d12:	88 23       	and	r24, r24
    3d14:	69 f0       	breq	.+26     	; 0x3d30 <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d16:	c6 01       	movw	r24, r12
    3d18:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3d1c:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3d1e:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3d22:	f8 01       	movw	r30, r16
    3d24:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d26:	81 50       	subi	r24, 0x01	; 1
    3d28:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d2c:	18 16       	cp	r1, r24
    3d2e:	7c f3       	brlt	.-34     	; 0x3d0e <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d30:	f8 01       	movw	r30, r16
    3d32:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3d38:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3d3c:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3d3e:	2a cf       	rjmp	.-428    	; 0x3b94 <xQueueGenericReceive+0x4a>
    3d40:	e9 d8       	rcall	.-3630   	; 0x2f14 <vPortYield>
    3d42:	28 cf       	rjmp	.-432    	; 0x3b94 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d4e:	18 16       	cp	r1, r24
    3d50:	ac f4       	brge	.+42     	; 0x3d7c <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d52:	81 89       	ldd	r24, Z+17	; 0x11
    3d54:	81 11       	cpse	r24, r1
    3d56:	05 c0       	rjmp	.+10     	; 0x3d62 <xQueueGenericReceive+0x218>
    3d58:	11 c0       	rjmp	.+34     	; 0x3d7c <xQueueGenericReceive+0x232>
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	81 89       	ldd	r24, Z+17	; 0x11
    3d5e:	88 23       	and	r24, r24
    3d60:	69 f0       	breq	.+26     	; 0x3d7c <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d62:	c7 01       	movw	r24, r14
    3d64:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3d68:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3d6a:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d6e:	f8 01       	movw	r30, r16
    3d70:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d72:	81 50       	subi	r24, 0x01	; 1
    3d74:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d76:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d78:	18 16       	cp	r1, r24
    3d7a:	7c f3       	brlt	.-34     	; 0x3d5a <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3d80:	0f 90       	pop	r0
    3d82:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d8c:	18 16       	cp	r1, r24
    3d8e:	ac f4       	brge	.+42     	; 0x3dba <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d90:	80 85       	ldd	r24, Z+8	; 0x08
    3d92:	81 11       	cpse	r24, r1
    3d94:	05 c0       	rjmp	.+10     	; 0x3da0 <xQueueGenericReceive+0x256>
    3d96:	11 c0       	rjmp	.+34     	; 0x3dba <xQueueGenericReceive+0x270>
    3d98:	f8 01       	movw	r30, r16
    3d9a:	80 85       	ldd	r24, Z+8	; 0x08
    3d9c:	88 23       	and	r24, r24
    3d9e:	69 f0       	breq	.+26     	; 0x3dba <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3da0:	c6 01       	movw	r24, r12
    3da2:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3da6:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3da8:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3dac:	f8 01       	movw	r30, r16
    3dae:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db0:	81 50       	subi	r24, 0x01	; 1
    3db2:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3db4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db6:	18 16       	cp	r1, r24
    3db8:	7c f3       	brlt	.-34     	; 0x3d98 <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3dba:	f8 01       	movw	r30, r16
    3dbc:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3dbe:	0f 90       	pop	r0
    3dc0:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3dc2:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <xTaskResumeAll>
    3dc6:	e6 ce       	rjmp	.-564    	; 0x3b94 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3dce:	f8 01       	movw	r30, r16
    3dd0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3dd2:	18 16       	cp	r1, r24
    3dd4:	d4 f4       	brge	.+52     	; 0x3e0a <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3dd6:	81 89       	ldd	r24, Z+17	; 0x11
    3dd8:	81 11       	cpse	r24, r1
    3dda:	06 c0       	rjmp	.+12     	; 0x3de8 <xQueueGenericReceive+0x29e>
    3ddc:	16 c0       	rjmp	.+44     	; 0x3e0a <xQueueGenericReceive+0x2c0>
    3dde:	f8 01       	movw	r30, r16
    3de0:	81 89       	ldd	r24, Z+17	; 0x11
    3de2:	81 11       	cpse	r24, r1
    3de4:	05 c0       	rjmp	.+10     	; 0x3df0 <xQueueGenericReceive+0x2a6>
    3de6:	11 c0       	rjmp	.+34     	; 0x3e0a <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3de8:	78 01       	movw	r14, r16
    3dea:	f1 e1       	ldi	r31, 0x11	; 17
    3dec:	ef 0e       	add	r14, r31
    3dee:	f1 1c       	adc	r15, r1
    3df0:	c7 01       	movw	r24, r14
    3df2:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3df6:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3df8:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e00:	81 50       	subi	r24, 0x01	; 1
    3e02:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3e04:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e06:	18 16       	cp	r1, r24
    3e08:	54 f3       	brlt	.-44     	; 0x3dde <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3e0a:	8f ef       	ldi	r24, 0xFF	; 255
    3e0c:	f8 01       	movw	r30, r16
    3e0e:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3e10:	0f 90       	pop	r0
    3e12:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3e14:	0f b6       	in	r0, 0x3f	; 63
    3e16:	f8 94       	cli
    3e18:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3e1a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e1c:	18 16       	cp	r1, r24
    3e1e:	d4 f4       	brge	.+52     	; 0x3e54 <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3e20:	80 85       	ldd	r24, Z+8	; 0x08
    3e22:	81 11       	cpse	r24, r1
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <xQueueGenericReceive+0x2e8>
    3e26:	16 c0       	rjmp	.+44     	; 0x3e54 <xQueueGenericReceive+0x30a>
    3e28:	f8 01       	movw	r30, r16
    3e2a:	80 85       	ldd	r24, Z+8	; 0x08
    3e2c:	81 11       	cpse	r24, r1
    3e2e:	05 c0       	rjmp	.+10     	; 0x3e3a <xQueueGenericReceive+0x2f0>
    3e30:	11 c0       	rjmp	.+34     	; 0x3e54 <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3e32:	78 01       	movw	r14, r16
    3e34:	f8 e0       	ldi	r31, 0x08	; 8
    3e36:	ef 0e       	add	r14, r31
    3e38:	f1 1c       	adc	r15, r1
    3e3a:	c7 01       	movw	r24, r14
    3e3c:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <xTaskRemoveFromEventList>
    3e40:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3e42:	0e 94 6f 2a 	call	0x54de	; 0x54de <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3e46:	f8 01       	movw	r30, r16
    3e48:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e4a:	81 50       	subi	r24, 0x01	; 1
    3e4c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3e4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e50:	18 16       	cp	r1, r24
    3e52:	54 f3       	brlt	.-44     	; 0x3e28 <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3e54:	8f ef       	ldi	r24, 0xFF	; 255
    3e56:	f8 01       	movw	r30, r16
	}
	taskEXIT_CRITICAL();
    3e58:	85 8f       	std	Z+29, r24	; 0x1d
    3e5a:	0f 90       	pop	r0
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	c8 d7       	rcall	.+3984   	; 0x4df0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3e60:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	ff 90       	pop	r15
    3e76:	ef 90       	pop	r14
    3e78:	df 90       	pop	r13
    3e7a:	cf 90       	pop	r12
    3e7c:	bf 90       	pop	r11
    3e7e:	af 90       	pop	r10
    3e80:	9f 90       	pop	r9
    3e82:	8f 90       	pop	r8
    3e84:	7f 90       	pop	r7
    3e86:	6f 90       	pop	r6
    3e88:	08 95       	ret

00003e8a <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    3e8a:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <server_receiver+0xa>
      gHandshook = 0;
    3e90:	10 92 34 1a 	sts	0x1A34, r1	; 0x801a34 <gHandshook>
  }
  memcpy(&message_in, data, len);
    3e94:	bc 01       	movw	r22, r24
    3e96:	89 ea       	ldi	r24, 0xA9	; 169
    3e98:	9b e1       	ldi	r25, 0x1B	; 27
    3e9a:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	70 e0       	ldi	r23, 0x00	; 0
    3ea2:	80 91 a5 1b 	lds	r24, 0x1BA5	; 0x801ba5 <xCommandReadyBSem>
    3ea6:	90 91 a6 1b 	lds	r25, 0x1BA6	; 0x801ba6 <xCommandReadyBSem+0x1>
    3eaa:	b3 cc       	rjmp	.-1690   	; 0x3812 <xQueueGive>
    3eac:	08 95       	ret

00003eae <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    3eae:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <connected>
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	04 c0       	rjmp	.+8      	; 0x3ebe <server_communication_init+0x10>
  server_connection = arq_new_connection();
    3eb6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    3eba:	80 93 df 1b 	sts	0x1BDF, r24	; 0x801bdf <server_connection>
    3ebe:	08 95       	ret

00003ec0 <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    3ec0:	28 ee       	ldi	r18, 0xE8	; 232
    3ec2:	33 e0       	ldi	r19, 0x03	; 3
    3ec4:	45 e4       	ldi	r20, 0x45	; 69
    3ec6:	5f e1       	ldi	r21, 0x1F	; 31
    3ec8:	60 e0       	ldi	r22, 0x00	; 0
    3eca:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    3ece:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    3ed2:	80 93 41 1a 	sts	0x1A41, r24	; 0x801a41 <connected>
  return connected;
}
    3ed6:	08 95       	ret

00003ed8 <send_handshake>:

uint8_t send_handshake(void) {
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	ec 97       	sbiw	r28, 0x3c	; 60
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    3eec:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <connected>
    3ef0:	88 23       	and	r24, r24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <send_handshake+0x1e>
    3ef4:	4e c0       	rjmp	.+156    	; 0x3f92 <send_handshake+0xba>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    3ef6:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    3ef8:	87 e0       	ldi	r24, 0x07	; 7
    3efa:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    3efc:	88 e0       	ldi	r24, 0x08	; 8
    3efe:	ef ea       	ldi	r30, 0xAF	; 175
    3f00:	f6 e0       	ldi	r31, 0x06	; 6
    3f02:	de 01       	movw	r26, r28
    3f04:	13 96       	adiw	r26, 0x03	; 3
    3f06:	01 90       	ld	r0, Z+
    3f08:	0d 92       	st	X+, r0
    3f0a:	8a 95       	dec	r24
    3f0c:	e1 f7       	brne	.-8      	; 0x3f06 <send_handshake+0x2e>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    3f0e:	24 eb       	ldi	r18, 0xB4	; 180
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	3b 87       	std	Y+11, r19	; 0x0b
    3f14:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    3f16:	85 ef       	ldi	r24, 0xF5	; 245
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	9d 87       	std	Y+13, r25	; 0x0d
    3f1c:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    3f1e:	88 e3       	ldi	r24, 0x38	; 56
    3f20:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    3f22:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    3f24:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    3f26:	85 e1       	ldi	r24, 0x15	; 21
    3f28:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    3f2a:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    3f2c:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    3f2e:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    3f30:	1e 8a       	std	Y+22, r1	; 0x16
    3f32:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    3f34:	8a e5       	ldi	r24, 0x5A	; 90
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	98 8f       	std	Y+24, r25	; 0x18
    3f3a:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    3f3c:	3a 8f       	std	Y+26, r19	; 0x1a
    3f3e:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    3f40:	8e e0       	ldi	r24, 0x0E	; 14
    3f42:	91 e0       	ldi	r25, 0x01	; 1
    3f44:	9c 8f       	std	Y+28, r25	; 0x1c
    3f46:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    3f48:	88 ec       	ldi	r24, 0xC8	; 200
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f4e:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3f50:	8e e1       	ldi	r24, 0x1E	; 30
    3f52:	fe 01       	movw	r30, r28
    3f54:	31 96       	adiw	r30, 0x01	; 1
    3f56:	de 01       	movw	r26, r28
    3f58:	5f 96       	adiw	r26, 0x1f	; 31
    3f5a:	01 90       	ld	r0, Z+
    3f5c:	0d 92       	st	X+, r0
    3f5e:	8a 95       	dec	r24
    3f60:	e1 f7       	brne	.-8      	; 0x3f5a <send_handshake+0x82>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    3f62:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    3f66:	88 23       	and	r24, r24
    3f68:	59 f0       	breq	.+22     	; 0x3f80 <send_handshake+0xa8>
    3f6a:	4e e1       	ldi	r20, 0x1E	; 30
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	be 01       	movw	r22, r28
    3f70:	61 5e       	subi	r22, 0xE1	; 225
    3f72:	7f 4f       	sbci	r23, 0xFF	; 255
    3f74:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    3f78:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	09 c0       	rjmp	.+18     	; 0x3f92 <send_handshake+0xba>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    3f80:	4e e1       	ldi	r20, 0x1E	; 30
    3f82:	50 e0       	ldi	r21, 0x00	; 0
    3f84:	be 01       	movw	r22, r28
    3f86:	61 5e       	subi	r22, 0xE1	; 225
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    3f8e:	76 d1       	rcall	.+748    	; 0x427c <simple_p_send>
  return 1;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
}
    3f92:	ec 96       	adiw	r28, 0x3c	; 60
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	08 95       	ret

00003fa4 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    3fa4:	af 92       	push	r10
    3fa6:	cf 92       	push	r12
    3fa8:	ef 92       	push	r14
    3faa:	0f 93       	push	r16
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	2d 97       	sbiw	r28, 0x0d	; 13
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return;
    3fc0:	e0 91 41 1a 	lds	r30, 0x1A41	; 0x801a41 <connected>
    3fc4:	ee 23       	and	r30, r30
    3fc6:	19 f1       	breq	.+70     	; 0x400e <send_update+0x6a>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3fc8:	e1 e0       	ldi	r30, 0x01	; 1
    3fca:	e9 83       	std	Y+1, r30	; 0x01
    3fcc:	9b 83       	std	Y+3, r25	; 0x03
    3fce:	8a 83       	std	Y+2, r24	; 0x02
    3fd0:	7d 83       	std	Y+5, r23	; 0x05
    3fd2:	6c 83       	std	Y+4, r22	; 0x04
    3fd4:	5f 83       	std	Y+7, r21	; 0x07
    3fd6:	4e 83       	std	Y+6, r20	; 0x06
    3fd8:	39 87       	std	Y+9, r19	; 0x09
    3fda:	28 87       	std	Y+8, r18	; 0x08
    3fdc:	0a 87       	std	Y+10, r16	; 0x0a
    3fde:	eb 86       	std	Y+11, r14	; 0x0b
    3fe0:	cc 86       	std	Y+12, r12	; 0x0c
    3fe2:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    3fe4:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    3fe8:	88 23       	and	r24, r24
    3fea:	51 f0       	breq	.+20     	; 0x4000 <send_update+0x5c>
    3fec:	4d e0       	ldi	r20, 0x0D	; 13
    3fee:	50 e0       	ldi	r21, 0x00	; 0
    3ff0:	be 01       	movw	r22, r28
    3ff2:	6f 5f       	subi	r22, 0xFF	; 255
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    3ffa:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    3ffe:	07 c0       	rjmp	.+14     	; 0x400e <send_update+0x6a>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    4000:	4d e0       	ldi	r20, 0x0D	; 13
    4002:	50 e0       	ldi	r21, 0x00	; 0
    4004:	be 01       	movw	r22, r28
    4006:	6f 5f       	subi	r22, 0xFF	; 255
    4008:	7f 4f       	sbci	r23, 0xFF	; 255
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	37 d1       	rcall	.+622    	; 0x427c <simple_p_send>
}
    400e:	2d 96       	adiw	r28, 0x0d	; 13
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	df 91       	pop	r29
    401c:	cf 91       	pop	r28
    401e:	0f 91       	pop	r16
    4020:	ef 90       	pop	r14
    4022:	cf 90       	pop	r12
    4024:	af 90       	pop	r10
    4026:	08 95       	ret

00004028 <send_idle>:

void send_idle(void) {
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	1f 92       	push	r1
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    4032:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <connected>
    4036:	88 23       	and	r24, r24
    4038:	b9 f0       	breq	.+46     	; 0x4068 <send_idle+0x40>
  uint8_t status = TYPE_IDLE;
    403a:	83 e0       	ldi	r24, 0x03	; 3
    403c:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    403e:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    4042:	88 23       	and	r24, r24
    4044:	51 f0       	breq	.+20     	; 0x405a <send_idle+0x32>
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	50 e0       	ldi	r21, 0x00	; 0
    404a:	be 01       	movw	r22, r28
    404c:	6f 5f       	subi	r22, 0xFF	; 255
    404e:	7f 4f       	sbci	r23, 0xFF	; 255
    4050:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    4054:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    4058:	07 c0       	rjmp	.+14     	; 0x4068 <send_idle+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	be 01       	movw	r22, r28
    4060:	6f 5f       	subi	r22, 0xFF	; 255
    4062:	7f 4f       	sbci	r23, 0xFF	; 255
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	0a d1       	rcall	.+532    	; 0x427c <simple_p_send>
}
    4068:	0f 90       	pop	r0
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	08 95       	ret

00004070 <debug>:
void debug(const char *fmt, ...) {
    4070:	cf 93       	push	r28
    4072:	df 93       	push	r29
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
    4078:	c4 56       	subi	r28, 0x64	; 100
    407a:	d1 09       	sbc	r29, r1
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	f8 94       	cli
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	cd bf       	out	0x3d, r28	; 61
    4086:	ae 01       	movw	r20, r28
    4088:	46 59       	subi	r20, 0x96	; 150
    408a:	5f 4f       	sbci	r21, 0xFF	; 255
    408c:	fa 01       	movw	r30, r20
    408e:	61 91       	ld	r22, Z+
    4090:	71 91       	ld	r23, Z+
    4092:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    4094:	8a e0       	ldi	r24, 0x0A	; 10
    4096:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    4098:	ce 01       	movw	r24, r28
    409a:	02 96       	adiw	r24, 0x02	; 2
    409c:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <vsprintf>
	va_end(ap);
	if (ret > 0) {
    40a0:	88 23       	and	r24, r24
    40a2:	c9 f0       	breq	.+50     	; 0x40d6 <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    40a4:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    40a8:	22 23       	and	r18, r18
    40aa:	61 f0       	breq	.+24     	; 0x40c4 <debug+0x54>
    40ac:	99 27       	eor	r25, r25
    40ae:	ac 01       	movw	r20, r24
    40b0:	4f 5f       	subi	r20, 0xFF	; 255
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	be 01       	movw	r22, r28
    40b6:	6f 5f       	subi	r22, 0xFF	; 255
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    40be:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    40c2:	09 c0       	rjmp	.+18     	; 0x40d6 <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    40c4:	99 27       	eor	r25, r25
    40c6:	ac 01       	movw	r20, r24
    40c8:	4f 5f       	subi	r20, 0xFF	; 255
    40ca:	5f 4f       	sbci	r21, 0xFF	; 255
    40cc:	be 01       	movw	r22, r28
    40ce:	6f 5f       	subi	r22, 0xFF	; 255
    40d0:	7f 4f       	sbci	r23, 0xFF	; 255
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	d3 d0       	rcall	.+422    	; 0x427c <simple_p_send>
	}
}
    40d6:	cc 59       	subi	r28, 0x9C	; 156
    40d8:	df 4f       	sbci	r29, 0xFF	; 255
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	cd bf       	out	0x3d, r28	; 61
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	08 95       	ret

000040ea <send_ping_response>:

void send_ping_response(void) {
    40ea:	cf 93       	push	r28
    40ec:	df 93       	push	r29
    40ee:	1f 92       	push	r1
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    40f4:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <connected>
    40f8:	88 23       	and	r24, r24
    40fa:	b9 f0       	breq	.+46     	; 0x412a <send_ping_response+0x40>
  uint8_t status = TYPE_PING_RESPONSE;
    40fc:	89 e0       	ldi	r24, 0x09	; 9
    40fe:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    4100:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    4104:	88 23       	and	r24, r24
    4106:	51 f0       	breq	.+20     	; 0x411c <send_ping_response+0x32>
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	50 e0       	ldi	r21, 0x00	; 0
    410c:	be 01       	movw	r22, r28
    410e:	6f 5f       	subi	r22, 0xFF	; 255
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	80 91 df 1b 	lds	r24, 0x1BDF	; 0x801bdf <server_connection>
    4116:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    411a:	07 c0       	rjmp	.+14     	; 0x412a <send_ping_response+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    411c:	41 e0       	ldi	r20, 0x01	; 1
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	be 01       	movw	r22, r28
    4122:	6f 5f       	subi	r22, 0xFF	; 255
    4124:	7f 4f       	sbci	r23, 0xFF	; 255
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	a9 d0       	rcall	.+338    	; 0x427c <simple_p_send>
}
    412a:	0f 90       	pop	r0
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	08 95       	ret

00004132 <vServo_setAngle>:
}

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    4132:	8a 35       	cpi	r24, 0x5A	; 90
    4134:	08 f0       	brcs	.+2      	; 0x4138 <vServo_setAngle+0x6>
        ServoAngleDeg = 90;
    4136:	8a e5       	ldi	r24, 0x5A	; 90
    }
    else if(ServoAngleDeg <= 0){
        ServoAngleDeg = 0;
    }
    /* Fetch pulse width from array and set to output */
    servoOCR = DEG_TO_PWM[ServoAngleDeg];
    4138:	e8 2f       	mov	r30, r24
    413a:	f0 e0       	ldi	r31, 0x00	; 0
    413c:	ee 0f       	add	r30, r30
    413e:	ff 1f       	adc	r31, r31
    4140:	e9 54       	subi	r30, 0x49	; 73
    4142:	f9 4f       	sbci	r31, 0xF9	; 249
    4144:	80 81       	ld	r24, Z
    4146:	91 81       	ldd	r25, Z+1	; 0x01
    4148:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    414c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4150:	08 95       	ret

00004152 <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    4152:	a0 ea       	ldi	r26, 0xA0	; 160
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	9c 91       	ld	r25, X
    4158:	90 62       	ori	r25, 0x20	; 32
    415a:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    415c:	e1 ea       	ldi	r30, 0xA1	; 161
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	90 81       	ld	r25, Z
    4162:	98 61       	ori	r25, 0x18	; 24
    4164:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    4166:	9c 91       	ld	r25, X
    4168:	92 60       	ori	r25, 0x02	; 2
    416a:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    416c:	90 81       	ld	r25, Z
    416e:	92 60       	ori	r25, 0x02	; 2
    4170:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    4172:	2f e3       	ldi	r18, 0x3F	; 63
    4174:	3c e9       	ldi	r19, 0x9C	; 156
    4176:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    417a:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    417e:	e1 e0       	ldi	r30, 0x01	; 1
    4180:	f1 e0       	ldi	r31, 0x01	; 1
    4182:	90 81       	ld	r25, Z
    4184:	90 61       	ori	r25, 0x10	; 16
    4186:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    4188:	d4 cf       	rjmp	.-88     	; 0x4132 <vServo_setAngle>
    418a:	08 95       	ret

0000418c <simple_p_reassembly>:
  vPortFree(part);
  return 1;
}


void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length) {
    418c:	ef 92       	push	r14
    418e:	ff 92       	push	r15
    4190:	0f 93       	push	r16
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
  uint8_t i;
  uint8_t id = 0xFF;
  uint8_t free = 0xFF;
  for(i=0;i<MAX_MESSAGES;i++) {
    if(messages[i].address == 0xFF && free == 0xFF) free = i;
    4198:	90 91 43 1a 	lds	r25, 0x1A43	; 0x801a43 <messages+0x1>
    419c:	9f 3f       	cpi	r25, 0xFF	; 255
    419e:	11 f0       	breq	.+4      	; 0x41a4 <simple_p_reassembly+0x18>
    else if(messages[i].address == sender) {
    41a0:	98 13       	cpse	r25, r24
    41a2:	58 c0       	rjmp	.+176    	; 0x4254 <simple_p_reassembly+0xc8>
  if(id == 0xFF && free == 0xFF) return; // Not room for any more messages, and none is stored for this address
  else if(id == 0xFF && free != 0xFF) { // Did not find any part messages from this sender, but there is room to store a new one
    id = free; 
  }
    
  if(data[0] == 0) { // First part of a new message
    41a4:	fb 01       	movw	r30, r22
    41a6:	80 81       	ld	r24, Z
    41a8:	81 11       	cpse	r24, r1
    41aa:	05 c0       	rjmp	.+10     	; 0x41b6 <simple_p_reassembly+0x2a>
    messages[id].num_received_bytes = 0;
    41ac:	10 92 45 1a 	sts	0x1A45, r1	; 0x801a45 <messages+0x3>
    41b0:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <messages+0x2>
    41b4:	0c c0       	rjmp	.+24     	; 0x41ce <simple_p_reassembly+0x42>
  } else if(data[0] != messages[id].next_part) {
    41b6:	90 91 46 1a 	lds	r25, 0x1A46	; 0x801a46 <messages+0x4>
    41ba:	89 17       	cp	r24, r25
    41bc:	41 f0       	breq	.+16     	; 0x41ce <simple_p_reassembly+0x42>
    messages[id].next_part = 0;
    41be:	e2 e4       	ldi	r30, 0x42	; 66
    41c0:	fa e1       	ldi	r31, 0x1A	; 26
    41c2:	14 82       	std	Z+4, r1	; 0x04
    messages[id].num_received_bytes = 0;
    41c4:	13 82       	std	Z+3, r1	; 0x03
    41c6:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    41c8:	8f ef       	ldi	r24, 0xFF	; 255
    41ca:	81 83       	std	Z+1, r24	; 0x01
    return;
    41cc:	43 c0       	rjmp	.+134    	; 0x4254 <simple_p_reassembly+0xc8>
  }

  if(messages[id].num_received_bytes + (length-2) > MAX_MESSAGE_SIZE) { // Message is larger than what can be handled, discard it
    41ce:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <messages+0x2>
    41d2:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <messages+0x3>
    41d6:	9c 01       	movw	r18, r24
    41d8:	22 50       	subi	r18, 0x02	; 2
    41da:	31 09       	sbc	r19, r1
    41dc:	24 0f       	add	r18, r20
    41de:	35 1f       	adc	r19, r21
    41e0:	25 36       	cpi	r18, 0x65	; 101
    41e2:	31 05       	cpc	r19, r1
    41e4:	40 f0       	brcs	.+16     	; 0x41f6 <simple_p_reassembly+0x6a>
    messages[id].num_received_bytes = 0;
    41e6:	e2 e4       	ldi	r30, 0x42	; 66
    41e8:	fa e1       	ldi	r31, 0x1A	; 26
    41ea:	13 82       	std	Z+3, r1	; 0x03
    41ec:	12 82       	std	Z+2, r1	; 0x02
    messages[id].next_part = 0;
    41ee:	14 82       	std	Z+4, r1	; 0x04
    messages[id].address = 0xFF;
    41f0:	8f ef       	ldi	r24, 0xFF	; 255
    41f2:	81 83       	std	Z+1, r24	; 0x01
    return;
    41f4:	2f c0       	rjmp	.+94     	; 0x4254 <simple_p_reassembly+0xc8>
    41f6:	8a 01       	movw	r16, r20
    41f8:	eb 01       	movw	r28, r22
  }
  
  messages[id].next_part++;
    41fa:	0f 2e       	mov	r0, r31
    41fc:	f2 e4       	ldi	r31, 0x42	; 66
    41fe:	ef 2e       	mov	r14, r31
    4200:	fa e1       	ldi	r31, 0x1A	; 26
    4202:	ff 2e       	mov	r15, r31
    4204:	f0 2d       	mov	r31, r0
    4206:	f7 01       	movw	r30, r14
    4208:	24 81       	ldd	r18, Z+4	; 0x04
    420a:	2f 5f       	subi	r18, 0xFF	; 255
    420c:	24 83       	std	Z+4, r18	; 0x04
  memcpy(messages[id].message+messages[id].num_received_bytes, data+2, length-2);
    420e:	42 50       	subi	r20, 0x02	; 2
    4210:	51 09       	sbc	r21, r1
    4212:	6e 5f       	subi	r22, 0xFE	; 254
    4214:	7f 4f       	sbci	r23, 0xFF	; 255
    4216:	89 5b       	subi	r24, 0xB9	; 185
    4218:	95 4e       	sbci	r25, 0xE5	; 229
    421a:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
  messages[id].num_received_bytes += (length-2);
    421e:	f7 01       	movw	r30, r14
    4220:	42 81       	ldd	r20, Z+2	; 0x02
    4222:	53 81       	ldd	r21, Z+3	; 0x03
    4224:	42 50       	subi	r20, 0x02	; 2
    4226:	51 09       	sbc	r21, r1
    4228:	ba 01       	movw	r22, r20
    422a:	60 0f       	add	r22, r16
    422c:	71 1f       	adc	r23, r17
    422e:	73 83       	std	Z+3, r23	; 0x03
    4230:	62 83       	std	Z+2, r22	; 0x02
  
  if(data[0] == data[1]) {
    4232:	98 81       	ld	r25, Y
    4234:	89 81       	ldd	r24, Y+1	; 0x01
    4236:	98 13       	cpse	r25, r24
    4238:	0d c0       	rjmp	.+26     	; 0x4254 <simple_p_reassembly+0xc8>
    callback_data_received(messages[id].message, messages[id].num_received_bytes);
    423a:	e0 91 e0 1b 	lds	r30, 0x1BE0	; 0x801be0 <callback_data_received>
    423e:	f0 91 e1 1b 	lds	r31, 0x1BE1	; 0x801be1 <callback_data_received+0x1>
    4242:	87 e4       	ldi	r24, 0x47	; 71
    4244:	9a e1       	ldi	r25, 0x1A	; 26
    4246:	19 95       	eicall
    messages[id].num_received_bytes = messages[id].next_part = 0;
    4248:	f7 01       	movw	r30, r14
    424a:	14 82       	std	Z+4, r1	; 0x04
    424c:	13 82       	std	Z+3, r1	; 0x03
    424e:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    4250:	8f ef       	ldi	r24, 0xFF	; 255
    4252:	81 83       	std	Z+1, r24	; 0x01
  }
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	1f 91       	pop	r17
    425a:	0f 91       	pop	r16
    425c:	ff 90       	pop	r15
    425e:	ef 90       	pop	r14
    4260:	08 95       	ret

00004262 <simple_p_init>:
void (*callback_data_received)(uint8_t*, uint16_t); 

void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length);

void simple_p_init(void (*cb)(uint8_t*, uint16_t)) {
  callback_data_received = cb;
    4262:	90 93 e1 1b 	sts	0x1BE1, r25	; 0x801be1 <callback_data_received+0x1>
    4266:	80 93 e0 1b 	sts	0x1BE0, r24	; 0x801be0 <callback_data_received>
  uint8_t i;
  network_set_callback(PROTOCOL_SIMPLE, simple_p_reassembly);
    426a:	66 ec       	ldi	r22, 0xC6	; 198
    426c:	70 e2       	ldi	r23, 0x20	; 32
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <network_set_callback>
  for(i=0;i<MAX_MESSAGES;i++) {
    messages[i].address = 0xFF;
    4274:	8f ef       	ldi	r24, 0xFF	; 255
    4276:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <messages+0x1>
    427a:	08 95       	ret

0000427c <simple_p_send>:
  }
}

uint8_t simple_p_send(uint8_t address, uint8_t *data, uint16_t length) {  
    427c:	5f 92       	push	r5
    427e:	6f 92       	push	r6
    4280:	7f 92       	push	r7
    4282:	8f 92       	push	r8
    4284:	9f 92       	push	r9
    4286:	af 92       	push	r10
    4288:	bf 92       	push	r11
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	58 2e       	mov	r5, r24
    429c:	5b 01       	movw	r10, r22
    429e:	8a 01       	movw	r16, r20
  uint16_t tmp;
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
    42a0:	8c e2       	ldi	r24, 0x2C	; 44
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    42a8:	7c 01       	movw	r14, r24
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
    42aa:	98 01       	movw	r18, r16
    42ac:	36 95       	lsr	r19
    42ae:	27 95       	ror	r18
    42b0:	ad e0       	ldi	r26, 0x0D	; 13
    42b2:	b3 ec       	ldi	r27, 0xC3	; 195
    42b4:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <__umulhisi3>
    42b8:	92 95       	swap	r25
    42ba:	82 95       	swap	r24
    42bc:	8f 70       	andi	r24, 0x0F	; 15
    42be:	89 27       	eor	r24, r25
    42c0:	9f 70       	andi	r25, 0x0F	; 15
    42c2:	89 27       	eor	r24, r25
    42c4:	4a e2       	ldi	r20, 0x2A	; 42
    42c6:	48 9f       	mul	r20, r24
    42c8:	90 01       	movw	r18, r0
    42ca:	49 9f       	mul	r20, r25
    42cc:	30 0d       	add	r19, r0
    42ce:	11 24       	eor	r1, r1
    42d0:	41 e0       	ldi	r20, 0x01	; 1
    42d2:	02 17       	cp	r16, r18
    42d4:	13 07       	cpc	r17, r19
    42d6:	09 f4       	brne	.+2      	; 0x42da <simple_p_send+0x5e>
    42d8:	40 e0       	ldi	r20, 0x00	; 0
    42da:	98 01       	movw	r18, r16
    42dc:	36 95       	lsr	r19
    42de:	27 95       	ror	r18
    42e0:	ad e0       	ldi	r26, 0x0D	; 13
    42e2:	b3 ec       	ldi	r27, 0xC3	; 195
    42e4:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <__umulhisi3>
    42e8:	92 95       	swap	r25
    42ea:	82 95       	swap	r24
    42ec:	8f 70       	andi	r24, 0x0F	; 15
    42ee:	89 27       	eor	r24, r25
    42f0:	9f 70       	andi	r25, 0x0F	; 15
    42f2:	89 27       	eor	r24, r25
    42f4:	84 0f       	add	r24, r20
  while(remaining > 0) {
    42f6:	01 15       	cp	r16, r1
    42f8:	11 05       	cpc	r17, r1
    42fa:	59 f1       	breq	.+86     	; 0x4352 <simple_p_send+0xd6>
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	c1 2c       	mov	r12, r1
    4300:	d1 2c       	mov	r13, r1
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    part[1] = number_of_parts-1;
    4302:	66 24       	eor	r6, r6
    4304:	6a 94       	dec	r6
    4306:	68 0e       	add	r6, r24
    memcpy(part+2, data+offset, tmp);
    4308:	47 01       	movw	r8, r14
    430a:	82 e0       	ldi	r24, 0x02	; 2
    430c:	88 0e       	add	r8, r24
    430e:	91 1c       	adc	r9, r1
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    4310:	e8 01       	movw	r28, r16
    4312:	0b 32       	cpi	r16, 0x2B	; 43
    4314:	11 05       	cpc	r17, r1
    4316:	10 f0       	brcs	.+4      	; 0x431c <simple_p_send+0xa0>
    4318:	ca e2       	ldi	r28, 0x2A	; 42
    431a:	d0 e0       	ldi	r29, 0x00	; 0
    part[0] = part_number++;
    431c:	77 24       	eor	r7, r7
    431e:	73 94       	inc	r7
    4320:	79 0e       	add	r7, r25
    4322:	f7 01       	movw	r30, r14
    4324:	90 83       	st	Z, r25
    part[1] = number_of_parts-1;
    4326:	61 82       	std	Z+1, r6	; 0x01
    memcpy(part+2, data+offset, tmp);
    4328:	b5 01       	movw	r22, r10
    432a:	6c 0d       	add	r22, r12
    432c:	7d 1d       	adc	r23, r13
    432e:	ae 01       	movw	r20, r28
    4330:	c4 01       	movw	r24, r8
    4332:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    4336:	9e 01       	movw	r18, r28
    4338:	2e 5f       	subi	r18, 0xFE	; 254
    433a:	3f 4f       	sbci	r19, 0xFF	; 255
    433c:	a7 01       	movw	r20, r14
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	85 2d       	mov	r24, r5
    4342:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <network_send>
    offset += tmp;
    4346:	cc 0e       	add	r12, r28
    4348:	dd 1e       	adc	r13, r29
    remaining -= tmp;
    434a:	0c 1b       	sub	r16, r28
    434c:	1d 0b       	sbc	r17, r29
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    434e:	97 2d       	mov	r25, r7
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    4350:	f9 f6       	brne	.-66     	; 0x4310 <simple_p_send+0x94>
    memcpy(part+2, data+offset, tmp);
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    offset += tmp;
    remaining -= tmp;
  }
  vPortFree(part);
    4352:	c7 01       	movw	r24, r14
    4354:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
}
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	df 90       	pop	r13
    4368:	cf 90       	pop	r12
    436a:	bf 90       	pop	r11
    436c:	af 90       	pop	r10
    436e:	9f 90       	pop	r9
    4370:	8f 90       	pop	r8
    4372:	7f 90       	pop	r7
    4374:	6f 90       	pop	r6
    4376:	5f 90       	pop	r5
    4378:	08 95       	ret

0000437a <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    437a:	84 b1       	in	r24, 0x04	; 4
    437c:	87 60       	ori	r24, 0x07	; 7
    437e:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    4380:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    4382:	8c b5       	in	r24, 0x2c	; 44
    4384:	81 60       	ori	r24, 0x01	; 1
    4386:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    4388:	8c b5       	in	r24, 0x2c	; 44
    438a:	8c 65       	ori	r24, 0x5C	; 92
    438c:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    438e:	8c b5       	in	r24, 0x2c	; 44
    4390:	8f 7d       	andi	r24, 0xDF	; 223
    4392:	8c bd       	out	0x2c, r24	; 44
    4394:	08 95       	ret

00004396 <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    4396:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    4398:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    439a:	0d b4       	in	r0, 0x2d	; 45
    439c:	07 fe       	sbrs	r0, 7
    439e:	fd cf       	rjmp	.-6      	; 0x439a <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    43a0:	8e b5       	in	r24, 0x2e	; 46
}
    43a2:	08 95       	ret

000043a4 <xTaskGenericCreate>:
    43a4:	4f 92       	push	r4
    43a6:	5f 92       	push	r5
    43a8:	6f 92       	push	r6
    43aa:	7f 92       	push	r7
    43ac:	8f 92       	push	r8
    43ae:	9f 92       	push	r9
    43b0:	af 92       	push	r10
    43b2:	bf 92       	push	r11
    43b4:	cf 92       	push	r12
    43b6:	df 92       	push	r13
    43b8:	ef 92       	push	r14
    43ba:	ff 92       	push	r15
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	3c 01       	movw	r6, r24
    43c6:	5b 01       	movw	r10, r22
    43c8:	4a 01       	movw	r8, r20
    43ca:	29 01       	movw	r4, r18
    43cc:	c1 14       	cp	r12, r1
    43ce:	d1 04       	cpc	r13, r1
    43d0:	39 f4       	brne	.+14     	; 0x43e0 <xTaskGenericCreate+0x3c>
    43d2:	ca 01       	movw	r24, r20
    43d4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    43d8:	6c 01       	movw	r12, r24
    43da:	89 2b       	or	r24, r25
    43dc:	09 f4       	brne	.+2      	; 0x43e0 <xTaskGenericCreate+0x3c>
    43de:	e4 c0       	rjmp	.+456    	; 0x45a8 <xTaskGenericCreate+0x204>
    43e0:	88 e2       	ldi	r24, 0x28	; 40
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    43e8:	ec 01       	movw	r28, r24
    43ea:	89 2b       	or	r24, r25
    43ec:	71 f0       	breq	.+28     	; 0x440a <xTaskGenericCreate+0x66>
    43ee:	d8 8e       	std	Y+24, r13	; 0x18
    43f0:	cf 8a       	std	Y+23, r12	; 0x17
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	88 1a       	sub	r8, r24
    43f6:	91 08       	sbc	r9, r1
    43f8:	c8 0c       	add	r12, r8
    43fa:	d9 1c       	adc	r13, r9
    43fc:	d5 01       	movw	r26, r10
    43fe:	8c 91       	ld	r24, X
    4400:	89 8f       	std	Y+25, r24	; 0x19
    4402:	8c 91       	ld	r24, X
    4404:	81 11       	cpse	r24, r1
    4406:	05 c0       	rjmp	.+10     	; 0x4412 <xTaskGenericCreate+0x6e>
    4408:	18 c0       	rjmp	.+48     	; 0x443a <xTaskGenericCreate+0x96>
    440a:	c6 01       	movw	r24, r12
    440c:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4410:	cb c0       	rjmp	.+406    	; 0x45a8 <xTaskGenericCreate+0x204>
    4412:	ae 01       	movw	r20, r28
    4414:	46 5e       	subi	r20, 0xE6	; 230
    4416:	5f 4f       	sbci	r21, 0xFF	; 255
    4418:	f5 01       	movw	r30, r10
    441a:	31 96       	adiw	r30, 0x01	; 1
    441c:	b8 e0       	ldi	r27, 0x08	; 8
    441e:	ab 0e       	add	r10, r27
    4420:	b1 1c       	adc	r11, r1
    4422:	cf 01       	movw	r24, r30
    4424:	21 91       	ld	r18, Z+
    4426:	da 01       	movw	r26, r20
    4428:	2d 93       	st	X+, r18
    442a:	ad 01       	movw	r20, r26
    442c:	dc 01       	movw	r26, r24
    442e:	8c 91       	ld	r24, X
    4430:	88 23       	and	r24, r24
    4432:	19 f0       	breq	.+6      	; 0x443a <xTaskGenericCreate+0x96>
    4434:	ae 16       	cp	r10, r30
    4436:	bf 06       	cpc	r11, r31
    4438:	a1 f7       	brne	.-24     	; 0x4422 <xTaskGenericCreate+0x7e>
    443a:	18 a2       	std	Y+32, r1	; 0x20
    443c:	10 2f       	mov	r17, r16
    443e:	06 30       	cpi	r16, 0x06	; 6
    4440:	08 f0       	brcs	.+2      	; 0x4444 <xTaskGenericCreate+0xa0>
    4442:	15 e0       	ldi	r17, 0x05	; 5
    4444:	1e 8b       	std	Y+22, r17	; 0x16
    4446:	19 a3       	std	Y+33, r17	; 0x21
    4448:	1a a2       	std	Y+34, r1	; 0x22
    444a:	5e 01       	movw	r10, r28
    444c:	b2 e0       	ldi	r27, 0x02	; 2
    444e:	ab 0e       	add	r10, r27
    4450:	b1 1c       	adc	r11, r1
    4452:	c5 01       	movw	r24, r10
    4454:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4458:	ce 01       	movw	r24, r28
    445a:	0c 96       	adiw	r24, 0x0c	; 12
    445c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4460:	d9 87       	std	Y+9, r29	; 0x09
    4462:	c8 87       	std	Y+8, r28	; 0x08
    4464:	86 e0       	ldi	r24, 0x06	; 6
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	81 1b       	sub	r24, r17
    446a:	91 09       	sbc	r25, r1
    446c:	9d 87       	std	Y+13, r25	; 0x0d
    446e:	8c 87       	std	Y+12, r24	; 0x0c
    4470:	db 8b       	std	Y+19, r29	; 0x13
    4472:	ca 8b       	std	Y+18, r28	; 0x12
    4474:	1b a2       	std	Y+35, r1	; 0x23
    4476:	1c a2       	std	Y+36, r1	; 0x24
    4478:	1d a2       	std	Y+37, r1	; 0x25
    447a:	1e a2       	std	Y+38, r1	; 0x26
    447c:	1f a2       	std	Y+39, r1	; 0x27
    447e:	a2 01       	movw	r20, r4
    4480:	b3 01       	movw	r22, r6
    4482:	c6 01       	movw	r24, r12
    4484:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pxPortInitialiseStack>
    4488:	99 83       	std	Y+1, r25	; 0x01
    448a:	88 83       	st	Y, r24
    448c:	e1 14       	cp	r14, r1
    448e:	f1 04       	cpc	r15, r1
    4490:	19 f0       	breq	.+6      	; 0x4498 <xTaskGenericCreate+0xf4>
    4492:	f7 01       	movw	r30, r14
    4494:	d1 83       	std	Z+1, r29	; 0x01
    4496:	c0 83       	st	Z, r28
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	0f 92       	push	r0
    449e:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    44a2:	8f 5f       	subi	r24, 0xFF	; 255
    44a4:	80 93 b6 1a 	sts	0x1AB6, r24	; 0x801ab6 <uxCurrentNumberOfTasks>
    44a8:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    44ac:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    44b0:	89 2b       	or	r24, r25
    44b2:	d9 f5       	brne	.+118    	; 0x452a <xTaskGenericCreate+0x186>
    44b4:	d0 93 16 1b 	sts	0x1B16, r29	; 0x801b16 <pxCurrentTCB+0x1>
    44b8:	c0 93 15 1b 	sts	0x1B15, r28	; 0x801b15 <pxCurrentTCB>
    44bc:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    44c0:	81 30       	cpi	r24, 0x01	; 1
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <xTaskGenericCreate+0x122>
    44c4:	41 c0       	rjmp	.+130    	; 0x4548 <xTaskGenericCreate+0x1a4>
    44c6:	0f 2e       	mov	r0, r31
    44c8:	ff ed       	ldi	r31, 0xDF	; 223
    44ca:	ef 2e       	mov	r14, r31
    44cc:	fa e1       	ldi	r31, 0x1A	; 26
    44ce:	ff 2e       	mov	r15, r31
    44d0:	f0 2d       	mov	r31, r0
    44d2:	0f 2e       	mov	r0, r31
    44d4:	f5 e1       	ldi	r31, 0x15	; 21
    44d6:	cf 2e       	mov	r12, r31
    44d8:	fb e1       	ldi	r31, 0x1B	; 27
    44da:	df 2e       	mov	r13, r31
    44dc:	f0 2d       	mov	r31, r0
    44de:	c7 01       	movw	r24, r14
    44e0:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44e4:	f9 e0       	ldi	r31, 0x09	; 9
    44e6:	ef 0e       	add	r14, r31
    44e8:	f1 1c       	adc	r15, r1
    44ea:	ec 14       	cp	r14, r12
    44ec:	fd 04       	cpc	r15, r13
    44ee:	b9 f7       	brne	.-18     	; 0x44de <xTaskGenericCreate+0x13a>
    44f0:	86 ed       	ldi	r24, 0xD6	; 214
    44f2:	9a e1       	ldi	r25, 0x1A	; 26
    44f4:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44f8:	8d ec       	ldi	r24, 0xCD	; 205
    44fa:	9a e1       	ldi	r25, 0x1A	; 26
    44fc:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4500:	80 ec       	ldi	r24, 0xC0	; 192
    4502:	9a e1       	ldi	r25, 0x1A	; 26
    4504:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4508:	87 eb       	ldi	r24, 0xB7	; 183
    450a:	9a e1       	ldi	r25, 0x1A	; 26
    450c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4510:	86 ed       	ldi	r24, 0xD6	; 214
    4512:	9a e1       	ldi	r25, 0x1A	; 26
    4514:	90 93 cc 1a 	sts	0x1ACC, r25	; 0x801acc <pxDelayedTaskList+0x1>
    4518:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <pxDelayedTaskList>
    451c:	8d ec       	ldi	r24, 0xCD	; 205
    451e:	9a e1       	ldi	r25, 0x1A	; 26
    4520:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4524:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    4528:	0f c0       	rjmp	.+30     	; 0x4548 <xTaskGenericCreate+0x1a4>
    452a:	80 91 b2 1a 	lds	r24, 0x1AB2	; 0x801ab2 <xSchedulerRunning>
    452e:	81 11       	cpse	r24, r1
    4530:	0b c0       	rjmp	.+22     	; 0x4548 <xTaskGenericCreate+0x1a4>
    4532:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4536:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    453a:	86 89       	ldd	r24, Z+22	; 0x16
    453c:	08 17       	cp	r16, r24
    453e:	20 f0       	brcs	.+8      	; 0x4548 <xTaskGenericCreate+0x1a4>
    4540:	d0 93 16 1b 	sts	0x1B16, r29	; 0x801b16 <pxCurrentTCB+0x1>
    4544:	c0 93 15 1b 	sts	0x1B15, r28	; 0x801b15 <pxCurrentTCB>
    4548:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <uxTaskNumber>
    454c:	8f 5f       	subi	r24, 0xFF	; 255
    454e:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <uxTaskNumber>
    4552:	8e 89       	ldd	r24, Y+22	; 0x16
    4554:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4558:	98 17       	cp	r25, r24
    455a:	10 f4       	brcc	.+4      	; 0x4560 <xTaskGenericCreate+0x1bc>
    455c:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	9c 01       	movw	r18, r24
    4564:	22 0f       	add	r18, r18
    4566:	33 1f       	adc	r19, r19
    4568:	22 0f       	add	r18, r18
    456a:	33 1f       	adc	r19, r19
    456c:	22 0f       	add	r18, r18
    456e:	33 1f       	adc	r19, r19
    4570:	82 0f       	add	r24, r18
    4572:	93 1f       	adc	r25, r19
    4574:	b5 01       	movw	r22, r10
    4576:	81 52       	subi	r24, 0x21	; 33
    4578:	95 4e       	sbci	r25, 0xE5	; 229
    457a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    457e:	0f 90       	pop	r0
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	80 91 b2 1a 	lds	r24, 0x1AB2	; 0x801ab2 <xSchedulerRunning>
    4586:	88 23       	and	r24, r24
    4588:	59 f0       	breq	.+22     	; 0x45a0 <xTaskGenericCreate+0x1fc>
    458a:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    458e:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4592:	86 89       	ldd	r24, Z+22	; 0x16
    4594:	80 17       	cp	r24, r16
    4596:	30 f4       	brcc	.+12     	; 0x45a4 <xTaskGenericCreate+0x200>
    4598:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	05 c0       	rjmp	.+10     	; 0x45aa <xTaskGenericCreate+0x206>
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <xTaskGenericCreate+0x206>
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	01 c0       	rjmp	.+2      	; 0x45aa <xTaskGenericCreate+0x206>
    45a8:	8f ef       	ldi	r24, 0xFF	; 255
    45aa:	df 91       	pop	r29
    45ac:	cf 91       	pop	r28
    45ae:	1f 91       	pop	r17
    45b0:	0f 91       	pop	r16
    45b2:	ff 90       	pop	r15
    45b4:	ef 90       	pop	r14
    45b6:	df 90       	pop	r13
    45b8:	cf 90       	pop	r12
    45ba:	bf 90       	pop	r11
    45bc:	af 90       	pop	r10
    45be:	9f 90       	pop	r9
    45c0:	8f 90       	pop	r8
    45c2:	7f 90       	pop	r7
    45c4:	6f 90       	pop	r6
    45c6:	5f 90       	pop	r5
    45c8:	4f 90       	pop	r4
    45ca:	08 95       	ret

000045cc <vTaskDelayUntil>:
    45cc:	9f 92       	push	r9
    45ce:	af 92       	push	r10
    45d0:	bf 92       	push	r11
    45d2:	cf 92       	push	r12
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	fc 01       	movw	r30, r24
    45e4:	90 91 ab 1a 	lds	r25, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    45e8:	9f 5f       	subi	r25, 0xFF	; 255
    45ea:	90 93 ab 1a 	sts	0x1AAB, r25	; 0x801aab <uxSchedulerSuspended>
    45ee:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    45f2:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    45f6:	20 81       	ld	r18, Z
    45f8:	31 81       	ldd	r19, Z+1	; 0x01
    45fa:	e9 01       	movw	r28, r18
    45fc:	c6 0f       	add	r28, r22
    45fe:	d7 1f       	adc	r29, r23
    4600:	82 17       	cp	r24, r18
    4602:	93 07       	cpc	r25, r19
    4604:	58 f4       	brcc	.+22     	; 0x461c <vTaskDelayUntil+0x50>
    4606:	c2 17       	cp	r28, r18
    4608:	d3 07       	cpc	r29, r19
    460a:	08 f0       	brcs	.+2      	; 0x460e <vTaskDelayUntil+0x42>
    460c:	6e c1       	rjmp	.+732    	; 0x48ea <vTaskDelayUntil+0x31e>
    460e:	d1 83       	std	Z+1, r29	; 0x01
    4610:	c0 83       	st	Z, r28
    4612:	8c 17       	cp	r24, r28
    4614:	9d 07       	cpc	r25, r29
    4616:	08 f0       	brcs	.+2      	; 0x461a <vTaskDelayUntil+0x4e>
    4618:	42 c0       	rjmp	.+132    	; 0x469e <vTaskDelayUntil+0xd2>
    461a:	09 c0       	rjmp	.+18     	; 0x462e <vTaskDelayUntil+0x62>
    461c:	c2 17       	cp	r28, r18
    461e:	d3 07       	cpc	r29, r19
    4620:	08 f4       	brcc	.+2      	; 0x4624 <vTaskDelayUntil+0x58>
    4622:	60 c1       	rjmp	.+704    	; 0x48e4 <vTaskDelayUntil+0x318>
    4624:	8c 17       	cp	r24, r28
    4626:	9d 07       	cpc	r25, r29
    4628:	08 f4       	brcc	.+2      	; 0x462c <vTaskDelayUntil+0x60>
    462a:	5c c1       	rjmp	.+696    	; 0x48e4 <vTaskDelayUntil+0x318>
    462c:	5e c1       	rjmp	.+700    	; 0x48ea <vTaskDelayUntil+0x31e>
    462e:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4632:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4636:	02 96       	adiw	r24, 0x02	; 2
    4638:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    463c:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4640:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4644:	d3 83       	std	Z+3, r29	; 0x03
    4646:	c2 83       	std	Z+2, r28	; 0x02
    4648:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    464c:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4650:	c8 17       	cp	r28, r24
    4652:	d9 07       	cpc	r29, r25
    4654:	68 f4       	brcc	.+26     	; 0x4670 <vTaskDelayUntil+0xa4>
    4656:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    465a:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    465e:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    4662:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4666:	6e 5f       	subi	r22, 0xFE	; 254
    4668:	7f 4f       	sbci	r23, 0xFF	; 255
    466a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    466e:	17 c0       	rjmp	.+46     	; 0x469e <vTaskDelayUntil+0xd2>
    4670:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4674:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4678:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    467c:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4680:	6e 5f       	subi	r22, 0xFE	; 254
    4682:	7f 4f       	sbci	r23, 0xFF	; 255
    4684:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4688:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    468c:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    4690:	c8 17       	cp	r28, r24
    4692:	d9 07       	cpc	r29, r25
    4694:	20 f4       	brcc	.+8      	; 0x469e <vTaskDelayUntil+0xd2>
    4696:	d0 93 ad 1a 	sts	0x1AAD, r29	; 0x801aad <xNextTaskUnblockTime+0x1>
    469a:	c0 93 ac 1a 	sts	0x1AAC, r28	; 0x801aac <xNextTaskUnblockTime>
    469e:	0f b6       	in	r0, 0x3f	; 63
    46a0:	f8 94       	cli
    46a2:	0f 92       	push	r0
    46a4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    46a8:	81 50       	subi	r24, 0x01	; 1
    46aa:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxSchedulerSuspended>
    46ae:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    46b2:	81 11       	cpse	r24, r1
    46b4:	0d c1       	rjmp	.+538    	; 0x48d0 <vTaskDelayUntil+0x304>
    46b6:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    46ba:	81 11       	cpse	r24, r1
    46bc:	33 c0       	rjmp	.+102    	; 0x4724 <vTaskDelayUntil+0x158>
    46be:	0b c1       	rjmp	.+534    	; 0x48d6 <vTaskDelayUntil+0x30a>
    46c0:	d7 01       	movw	r26, r14
    46c2:	15 96       	adiw	r26, 0x05	; 5
    46c4:	ed 91       	ld	r30, X+
    46c6:	fc 91       	ld	r31, X
    46c8:	16 97       	sbiw	r26, 0x06	; 6
    46ca:	c6 81       	ldd	r28, Z+6	; 0x06
    46cc:	d7 81       	ldd	r29, Z+7	; 0x07
    46ce:	ce 01       	movw	r24, r28
    46d0:	0c 96       	adiw	r24, 0x0c	; 12
    46d2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    46d6:	8e 01       	movw	r16, r28
    46d8:	0e 5f       	subi	r16, 0xFE	; 254
    46da:	1f 4f       	sbci	r17, 0xFF	; 255
    46dc:	c8 01       	movw	r24, r16
    46de:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    46e2:	8e 89       	ldd	r24, Y+22	; 0x16
    46e4:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    46e8:	98 17       	cp	r25, r24
    46ea:	10 f4       	brcc	.+4      	; 0x46f0 <vTaskDelayUntil+0x124>
    46ec:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	9c 01       	movw	r18, r24
    46f4:	22 0f       	add	r18, r18
    46f6:	33 1f       	adc	r19, r19
    46f8:	22 0f       	add	r18, r18
    46fa:	33 1f       	adc	r19, r19
    46fc:	22 0f       	add	r18, r18
    46fe:	33 1f       	adc	r19, r19
    4700:	82 0f       	add	r24, r18
    4702:	93 1f       	adc	r25, r19
    4704:	b8 01       	movw	r22, r16
    4706:	81 52       	subi	r24, 0x21	; 33
    4708:	95 4e       	sbci	r25, 0xE5	; 229
    470a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    470e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4712:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4716:	9e 89       	ldd	r25, Y+22	; 0x16
    4718:	86 89       	ldd	r24, Z+22	; 0x16
    471a:	98 17       	cp	r25, r24
    471c:	58 f0       	brcs	.+22     	; 0x4734 <vTaskDelayUntil+0x168>
    471e:	d0 92 b0 1a 	sts	0x1AB0, r13	; 0x801ab0 <xYieldPending>
    4722:	08 c0       	rjmp	.+16     	; 0x4734 <vTaskDelayUntil+0x168>
    4724:	0f 2e       	mov	r0, r31
    4726:	f0 ec       	ldi	r31, 0xC0	; 192
    4728:	ef 2e       	mov	r14, r31
    472a:	fa e1       	ldi	r31, 0x1A	; 26
    472c:	ff 2e       	mov	r15, r31
    472e:	f0 2d       	mov	r31, r0
    4730:	dd 24       	eor	r13, r13
    4732:	d3 94       	inc	r13
    4734:	f7 01       	movw	r30, r14
    4736:	80 81       	ld	r24, Z
    4738:	81 11       	cpse	r24, r1
    473a:	c2 cf       	rjmp	.-124    	; 0x46c0 <vTaskDelayUntil+0xf4>
    473c:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4740:	88 23       	and	r24, r24
    4742:	09 f4       	brne	.+2      	; 0x4746 <vTaskDelayUntil+0x17a>
    4744:	bd c0       	rjmp	.+378    	; 0x48c0 <vTaskDelayUntil+0x2f4>
    4746:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    474a:	88 23       	and	r24, r24
    474c:	09 f4       	brne	.+2      	; 0x4750 <vTaskDelayUntil+0x184>
    474e:	b8 c0       	rjmp	.+368    	; 0x48c0 <vTaskDelayUntil+0x2f4>
    4750:	91 2c       	mov	r9, r1
    4752:	bb 24       	eor	r11, r11
    4754:	b3 94       	inc	r11
    4756:	cc 24       	eor	r12, r12
    4758:	ca 94       	dec	r12
    475a:	dc 2c       	mov	r13, r12
    475c:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4760:	81 11       	cpse	r24, r1
    4762:	98 c0       	rjmp	.+304    	; 0x4894 <vTaskDelayUntil+0x2c8>
    4764:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    4768:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    476c:	01 96       	adiw	r24, 0x01	; 1
    476e:	90 93 b5 1a 	sts	0x1AB5, r25	; 0x801ab5 <xTickCount+0x1>
    4772:	80 93 b4 1a 	sts	0x1AB4, r24	; 0x801ab4 <xTickCount>
    4776:	e0 90 b4 1a 	lds	r14, 0x1AB4	; 0x801ab4 <xTickCount>
    477a:	f0 90 b5 1a 	lds	r15, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    477e:	e1 14       	cp	r14, r1
    4780:	f1 04       	cpc	r15, r1
    4782:	89 f5       	brne	.+98     	; 0x47e6 <vTaskDelayUntil+0x21a>
    4784:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4788:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    478c:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    4790:	30 91 ca 1a 	lds	r19, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4794:	30 93 cc 1a 	sts	0x1ACC, r19	; 0x801acc <pxDelayedTaskList+0x1>
    4798:	20 93 cb 1a 	sts	0x1ACB, r18	; 0x801acb <pxDelayedTaskList>
    479c:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    47a0:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    47a4:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    47a8:	8f 5f       	subi	r24, 0xFF	; 255
    47aa:	80 93 af 1a 	sts	0x1AAF, r24	; 0x801aaf <xNumOfOverflows>
    47ae:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    47b2:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    47b6:	80 81       	ld	r24, Z
    47b8:	81 11       	cpse	r24, r1
    47ba:	05 c0       	rjmp	.+10     	; 0x47c6 <vTaskDelayUntil+0x1fa>
    47bc:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    47c0:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    47c4:	10 c0       	rjmp	.+32     	; 0x47e6 <vTaskDelayUntil+0x21a>
    47c6:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    47ca:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    47ce:	05 80       	ldd	r0, Z+5	; 0x05
    47d0:	f6 81       	ldd	r31, Z+6	; 0x06
    47d2:	e0 2d       	mov	r30, r0
    47d4:	06 80       	ldd	r0, Z+6	; 0x06
    47d6:	f7 81       	ldd	r31, Z+7	; 0x07
    47d8:	e0 2d       	mov	r30, r0
    47da:	82 81       	ldd	r24, Z+2	; 0x02
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    47e2:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    47e6:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    47ea:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    47ee:	e8 16       	cp	r14, r24
    47f0:	f9 06       	cpc	r15, r25
    47f2:	08 f4       	brcc	.+2      	; 0x47f6 <vTaskDelayUntil+0x22a>
    47f4:	7d c0       	rjmp	.+250    	; 0x48f0 <vTaskDelayUntil+0x324>
    47f6:	a9 2c       	mov	r10, r9
    47f8:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    47fc:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4800:	80 81       	ld	r24, Z
    4802:	81 11       	cpse	r24, r1
    4804:	05 c0       	rjmp	.+10     	; 0x4810 <vTaskDelayUntil+0x244>
    4806:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    480a:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    480e:	48 c0       	rjmp	.+144    	; 0x48a0 <vTaskDelayUntil+0x2d4>
    4810:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4814:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4818:	05 80       	ldd	r0, Z+5	; 0x05
    481a:	f6 81       	ldd	r31, Z+6	; 0x06
    481c:	e0 2d       	mov	r30, r0
    481e:	c6 81       	ldd	r28, Z+6	; 0x06
    4820:	d7 81       	ldd	r29, Z+7	; 0x07
    4822:	8a 81       	ldd	r24, Y+2	; 0x02
    4824:	9b 81       	ldd	r25, Y+3	; 0x03
    4826:	e8 16       	cp	r14, r24
    4828:	f9 06       	cpc	r15, r25
    482a:	28 f4       	brcc	.+10     	; 0x4836 <vTaskDelayUntil+0x26a>
    482c:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4830:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4834:	35 c0       	rjmp	.+106    	; 0x48a0 <vTaskDelayUntil+0x2d4>
    4836:	8e 01       	movw	r16, r28
    4838:	0e 5f       	subi	r16, 0xFE	; 254
    483a:	1f 4f       	sbci	r17, 0xFF	; 255
    483c:	c8 01       	movw	r24, r16
    483e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4842:	8c 89       	ldd	r24, Y+20	; 0x14
    4844:	9d 89       	ldd	r25, Y+21	; 0x15
    4846:	89 2b       	or	r24, r25
    4848:	21 f0       	breq	.+8      	; 0x4852 <vTaskDelayUntil+0x286>
    484a:	ce 01       	movw	r24, r28
    484c:	0c 96       	adiw	r24, 0x0c	; 12
    484e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4852:	8e 89       	ldd	r24, Y+22	; 0x16
    4854:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4858:	98 17       	cp	r25, r24
    485a:	10 f4       	brcc	.+4      	; 0x4860 <vTaskDelayUntil+0x294>
    485c:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	9c 01       	movw	r18, r24
    4864:	22 0f       	add	r18, r18
    4866:	33 1f       	adc	r19, r19
    4868:	22 0f       	add	r18, r18
    486a:	33 1f       	adc	r19, r19
    486c:	22 0f       	add	r18, r18
    486e:	33 1f       	adc	r19, r19
    4870:	82 0f       	add	r24, r18
    4872:	93 1f       	adc	r25, r19
    4874:	b8 01       	movw	r22, r16
    4876:	81 52       	subi	r24, 0x21	; 33
    4878:	95 4e       	sbci	r25, 0xE5	; 229
    487a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    487e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4882:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4886:	9e 89       	ldd	r25, Y+22	; 0x16
    4888:	86 89       	ldd	r24, Z+22	; 0x16
    488a:	98 17       	cp	r25, r24
    488c:	08 f4       	brcc	.+2      	; 0x4890 <vTaskDelayUntil+0x2c4>
    488e:	b4 cf       	rjmp	.-152    	; 0x47f8 <vTaskDelayUntil+0x22c>
    4890:	ab 2c       	mov	r10, r11
    4892:	b2 cf       	rjmp	.-156    	; 0x47f8 <vTaskDelayUntil+0x22c>
    4894:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4898:	8f 5f       	subi	r24, 0xFF	; 255
    489a:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    489e:	28 c0       	rjmp	.+80     	; 0x48f0 <vTaskDelayUntil+0x324>
    48a0:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    48a4:	81 11       	cpse	r24, r1
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <vTaskDelayUntil+0x2de>
    48a8:	a1 10       	cpse	r10, r1
    48aa:	b0 92 b0 1a 	sts	0x1AB0, r11	; 0x801ab0 <xYieldPending>
    48ae:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    48b2:	81 50       	subi	r24, 0x01	; 1
    48b4:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    48b8:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    48bc:	81 11       	cpse	r24, r1
    48be:	4e cf       	rjmp	.-356    	; 0x475c <vTaskDelayUntil+0x190>
    48c0:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    48c4:	81 30       	cpi	r24, 0x01	; 1
    48c6:	31 f4       	brne	.+12     	; 0x48d4 <vTaskDelayUntil+0x308>
    48c8:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	03 c0       	rjmp	.+6      	; 0x48d6 <vTaskDelayUntil+0x30a>
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	01 c0       	rjmp	.+2      	; 0x48d6 <vTaskDelayUntil+0x30a>
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	0f 90       	pop	r0
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	81 11       	cpse	r24, r1
    48dc:	0e c0       	rjmp	.+28     	; 0x48fa <vTaskDelayUntil+0x32e>
    48de:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    48e2:	0b c0       	rjmp	.+22     	; 0x48fa <vTaskDelayUntil+0x32e>
    48e4:	d1 83       	std	Z+1, r29	; 0x01
    48e6:	c0 83       	st	Z, r28
    48e8:	a2 ce       	rjmp	.-700    	; 0x462e <vTaskDelayUntil+0x62>
    48ea:	d1 83       	std	Z+1, r29	; 0x01
    48ec:	c0 83       	st	Z, r28
    48ee:	d7 ce       	rjmp	.-594    	; 0x469e <vTaskDelayUntil+0xd2>
    48f0:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    48f4:	81 11       	cpse	r24, r1
    48f6:	d9 cf       	rjmp	.-78     	; 0x48aa <vTaskDelayUntil+0x2de>
    48f8:	da cf       	rjmp	.-76     	; 0x48ae <vTaskDelayUntil+0x2e2>
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	1f 91       	pop	r17
    4900:	0f 91       	pop	r16
    4902:	ff 90       	pop	r15
    4904:	ef 90       	pop	r14
    4906:	df 90       	pop	r13
    4908:	cf 90       	pop	r12
    490a:	bf 90       	pop	r11
    490c:	af 90       	pop	r10
    490e:	9f 90       	pop	r9
    4910:	08 95       	ret

00004912 <vTaskDelay>:
    4912:	9f 92       	push	r9
    4914:	af 92       	push	r10
    4916:	bf 92       	push	r11
    4918:	cf 92       	push	r12
    491a:	df 92       	push	r13
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	00 97       	sbiw	r24, 0x00	; 0
    492a:	09 f4       	brne	.+2      	; 0x492e <vTaskDelay+0x1c>
    492c:	63 c1       	rjmp	.+710    	; 0x4bf4 <vTaskDelay+0x2e2>
    492e:	20 91 ab 1a 	lds	r18, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4932:	2f 5f       	subi	r18, 0xFF	; 255
    4934:	20 93 ab 1a 	sts	0x1AAB, r18	; 0x801aab <uxSchedulerSuspended>
    4938:	c0 91 b4 1a 	lds	r28, 0x1AB4	; 0x801ab4 <xTickCount>
    493c:	d0 91 b5 1a 	lds	r29, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4940:	c8 0f       	add	r28, r24
    4942:	d9 1f       	adc	r29, r25
    4944:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4948:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    494c:	02 96       	adiw	r24, 0x02	; 2
    494e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4952:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4956:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    495a:	d3 83       	std	Z+3, r29	; 0x03
    495c:	c2 83       	std	Z+2, r28	; 0x02
    495e:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    4962:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4966:	c8 17       	cp	r28, r24
    4968:	d9 07       	cpc	r29, r25
    496a:	68 f4       	brcc	.+26     	; 0x4986 <vTaskDelay+0x74>
    496c:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4970:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4974:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    4978:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    497c:	6e 5f       	subi	r22, 0xFE	; 254
    497e:	7f 4f       	sbci	r23, 0xFF	; 255
    4980:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4984:	17 c0       	rjmp	.+46     	; 0x49b4 <vTaskDelay+0xa2>
    4986:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    498a:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    498e:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4992:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4996:	6e 5f       	subi	r22, 0xFE	; 254
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    499e:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    49a2:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    49a6:	c8 17       	cp	r28, r24
    49a8:	d9 07       	cpc	r29, r25
    49aa:	20 f4       	brcc	.+8      	; 0x49b4 <vTaskDelay+0xa2>
    49ac:	d0 93 ad 1a 	sts	0x1AAD, r29	; 0x801aad <xNextTaskUnblockTime+0x1>
    49b0:	c0 93 ac 1a 	sts	0x1AAC, r28	; 0x801aac <xNextTaskUnblockTime>
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	0f 92       	push	r0
    49ba:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    49be:	81 50       	subi	r24, 0x01	; 1
    49c0:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxSchedulerSuspended>
    49c4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    49c8:	81 11       	cpse	r24, r1
    49ca:	0d c1       	rjmp	.+538    	; 0x4be6 <vTaskDelay+0x2d4>
    49cc:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    49d0:	81 11       	cpse	r24, r1
    49d2:	33 c0       	rjmp	.+102    	; 0x4a3a <vTaskDelay+0x128>
    49d4:	0b c1       	rjmp	.+534    	; 0x4bec <vTaskDelay+0x2da>
    49d6:	d7 01       	movw	r26, r14
    49d8:	15 96       	adiw	r26, 0x05	; 5
    49da:	ed 91       	ld	r30, X+
    49dc:	fc 91       	ld	r31, X
    49de:	16 97       	sbiw	r26, 0x06	; 6
    49e0:	c6 81       	ldd	r28, Z+6	; 0x06
    49e2:	d7 81       	ldd	r29, Z+7	; 0x07
    49e4:	ce 01       	movw	r24, r28
    49e6:	0c 96       	adiw	r24, 0x0c	; 12
    49e8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    49ec:	8e 01       	movw	r16, r28
    49ee:	0e 5f       	subi	r16, 0xFE	; 254
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	c8 01       	movw	r24, r16
    49f4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    49f8:	8e 89       	ldd	r24, Y+22	; 0x16
    49fa:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    49fe:	98 17       	cp	r25, r24
    4a00:	10 f4       	brcc	.+4      	; 0x4a06 <vTaskDelay+0xf4>
    4a02:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	9c 01       	movw	r18, r24
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	22 0f       	add	r18, r18
    4a10:	33 1f       	adc	r19, r19
    4a12:	22 0f       	add	r18, r18
    4a14:	33 1f       	adc	r19, r19
    4a16:	82 0f       	add	r24, r18
    4a18:	93 1f       	adc	r25, r19
    4a1a:	b8 01       	movw	r22, r16
    4a1c:	81 52       	subi	r24, 0x21	; 33
    4a1e:	95 4e       	sbci	r25, 0xE5	; 229
    4a20:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4a24:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4a28:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4a2c:	9e 89       	ldd	r25, Y+22	; 0x16
    4a2e:	86 89       	ldd	r24, Z+22	; 0x16
    4a30:	98 17       	cp	r25, r24
    4a32:	58 f0       	brcs	.+22     	; 0x4a4a <vTaskDelay+0x138>
    4a34:	d0 92 b0 1a 	sts	0x1AB0, r13	; 0x801ab0 <xYieldPending>
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <vTaskDelay+0x138>
    4a3a:	0f 2e       	mov	r0, r31
    4a3c:	f0 ec       	ldi	r31, 0xC0	; 192
    4a3e:	ef 2e       	mov	r14, r31
    4a40:	fa e1       	ldi	r31, 0x1A	; 26
    4a42:	ff 2e       	mov	r15, r31
    4a44:	f0 2d       	mov	r31, r0
    4a46:	dd 24       	eor	r13, r13
    4a48:	d3 94       	inc	r13
    4a4a:	f7 01       	movw	r30, r14
    4a4c:	80 81       	ld	r24, Z
    4a4e:	81 11       	cpse	r24, r1
    4a50:	c2 cf       	rjmp	.-124    	; 0x49d6 <vTaskDelay+0xc4>
    4a52:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4a56:	88 23       	and	r24, r24
    4a58:	09 f4       	brne	.+2      	; 0x4a5c <vTaskDelay+0x14a>
    4a5a:	bd c0       	rjmp	.+378    	; 0x4bd6 <vTaskDelay+0x2c4>
    4a5c:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4a60:	88 23       	and	r24, r24
    4a62:	09 f4       	brne	.+2      	; 0x4a66 <vTaskDelay+0x154>
    4a64:	b8 c0       	rjmp	.+368    	; 0x4bd6 <vTaskDelay+0x2c4>
    4a66:	91 2c       	mov	r9, r1
    4a68:	bb 24       	eor	r11, r11
    4a6a:	b3 94       	inc	r11
    4a6c:	cc 24       	eor	r12, r12
    4a6e:	ca 94       	dec	r12
    4a70:	dc 2c       	mov	r13, r12
    4a72:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4a76:	81 11       	cpse	r24, r1
    4a78:	98 c0       	rjmp	.+304    	; 0x4baa <vTaskDelay+0x298>
    4a7a:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    4a7e:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4a82:	01 96       	adiw	r24, 0x01	; 1
    4a84:	90 93 b5 1a 	sts	0x1AB5, r25	; 0x801ab5 <xTickCount+0x1>
    4a88:	80 93 b4 1a 	sts	0x1AB4, r24	; 0x801ab4 <xTickCount>
    4a8c:	e0 90 b4 1a 	lds	r14, 0x1AB4	; 0x801ab4 <xTickCount>
    4a90:	f0 90 b5 1a 	lds	r15, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4a94:	e1 14       	cp	r14, r1
    4a96:	f1 04       	cpc	r15, r1
    4a98:	89 f5       	brne	.+98     	; 0x4afc <vTaskDelay+0x1ea>
    4a9a:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4a9e:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4aa2:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    4aa6:	30 91 ca 1a 	lds	r19, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4aaa:	30 93 cc 1a 	sts	0x1ACC, r19	; 0x801acc <pxDelayedTaskList+0x1>
    4aae:	20 93 cb 1a 	sts	0x1ACB, r18	; 0x801acb <pxDelayedTaskList>
    4ab2:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4ab6:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    4aba:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    4abe:	8f 5f       	subi	r24, 0xFF	; 255
    4ac0:	80 93 af 1a 	sts	0x1AAF, r24	; 0x801aaf <xNumOfOverflows>
    4ac4:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4ac8:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4acc:	80 81       	ld	r24, Z
    4ace:	81 11       	cpse	r24, r1
    4ad0:	05 c0       	rjmp	.+10     	; 0x4adc <vTaskDelay+0x1ca>
    4ad2:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    4ad6:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    4ada:	10 c0       	rjmp	.+32     	; 0x4afc <vTaskDelay+0x1ea>
    4adc:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4ae0:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4ae4:	05 80       	ldd	r0, Z+5	; 0x05
    4ae6:	f6 81       	ldd	r31, Z+6	; 0x06
    4ae8:	e0 2d       	mov	r30, r0
    4aea:	06 80       	ldd	r0, Z+6	; 0x06
    4aec:	f7 81       	ldd	r31, Z+7	; 0x07
    4aee:	e0 2d       	mov	r30, r0
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4af8:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4afc:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    4b00:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    4b04:	e8 16       	cp	r14, r24
    4b06:	f9 06       	cpc	r15, r25
    4b08:	08 f4       	brcc	.+2      	; 0x4b0c <vTaskDelay+0x1fa>
    4b0a:	77 c0       	rjmp	.+238    	; 0x4bfa <vTaskDelay+0x2e8>
    4b0c:	a9 2c       	mov	r10, r9
    4b0e:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4b12:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4b16:	80 81       	ld	r24, Z
    4b18:	81 11       	cpse	r24, r1
    4b1a:	05 c0       	rjmp	.+10     	; 0x4b26 <vTaskDelay+0x214>
    4b1c:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    4b20:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    4b24:	48 c0       	rjmp	.+144    	; 0x4bb6 <vTaskDelay+0x2a4>
    4b26:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4b2a:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4b2e:	05 80       	ldd	r0, Z+5	; 0x05
    4b30:	f6 81       	ldd	r31, Z+6	; 0x06
    4b32:	e0 2d       	mov	r30, r0
    4b34:	c6 81       	ldd	r28, Z+6	; 0x06
    4b36:	d7 81       	ldd	r29, Z+7	; 0x07
    4b38:	8a 81       	ldd	r24, Y+2	; 0x02
    4b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b3c:	e8 16       	cp	r14, r24
    4b3e:	f9 06       	cpc	r15, r25
    4b40:	28 f4       	brcc	.+10     	; 0x4b4c <vTaskDelay+0x23a>
    4b42:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4b46:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4b4a:	35 c0       	rjmp	.+106    	; 0x4bb6 <vTaskDelay+0x2a4>
    4b4c:	8e 01       	movw	r16, r28
    4b4e:	0e 5f       	subi	r16, 0xFE	; 254
    4b50:	1f 4f       	sbci	r17, 0xFF	; 255
    4b52:	c8 01       	movw	r24, r16
    4b54:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b58:	8c 89       	ldd	r24, Y+20	; 0x14
    4b5a:	9d 89       	ldd	r25, Y+21	; 0x15
    4b5c:	89 2b       	or	r24, r25
    4b5e:	21 f0       	breq	.+8      	; 0x4b68 <vTaskDelay+0x256>
    4b60:	ce 01       	movw	r24, r28
    4b62:	0c 96       	adiw	r24, 0x0c	; 12
    4b64:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b68:	8e 89       	ldd	r24, Y+22	; 0x16
    4b6a:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4b6e:	98 17       	cp	r25, r24
    4b70:	10 f4       	brcc	.+4      	; 0x4b76 <vTaskDelay+0x264>
    4b72:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	9c 01       	movw	r18, r24
    4b7a:	22 0f       	add	r18, r18
    4b7c:	33 1f       	adc	r19, r19
    4b7e:	22 0f       	add	r18, r18
    4b80:	33 1f       	adc	r19, r19
    4b82:	22 0f       	add	r18, r18
    4b84:	33 1f       	adc	r19, r19
    4b86:	82 0f       	add	r24, r18
    4b88:	93 1f       	adc	r25, r19
    4b8a:	b8 01       	movw	r22, r16
    4b8c:	81 52       	subi	r24, 0x21	; 33
    4b8e:	95 4e       	sbci	r25, 0xE5	; 229
    4b90:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4b94:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4b98:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4b9c:	9e 89       	ldd	r25, Y+22	; 0x16
    4b9e:	86 89       	ldd	r24, Z+22	; 0x16
    4ba0:	98 17       	cp	r25, r24
    4ba2:	08 f4       	brcc	.+2      	; 0x4ba6 <vTaskDelay+0x294>
    4ba4:	b4 cf       	rjmp	.-152    	; 0x4b0e <vTaskDelay+0x1fc>
    4ba6:	ab 2c       	mov	r10, r11
    4ba8:	b2 cf       	rjmp	.-156    	; 0x4b0e <vTaskDelay+0x1fc>
    4baa:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4bae:	8f 5f       	subi	r24, 0xFF	; 255
    4bb0:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    4bb4:	22 c0       	rjmp	.+68     	; 0x4bfa <vTaskDelay+0x2e8>
    4bb6:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    4bba:	81 11       	cpse	r24, r1
    4bbc:	01 c0       	rjmp	.+2      	; 0x4bc0 <vTaskDelay+0x2ae>
    4bbe:	a1 10       	cpse	r10, r1
    4bc0:	b0 92 b0 1a 	sts	0x1AB0, r11	; 0x801ab0 <xYieldPending>
    4bc4:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4bc8:	81 50       	subi	r24, 0x01	; 1
    4bca:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    4bce:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4bd2:	81 11       	cpse	r24, r1
    4bd4:	4e cf       	rjmp	.-356    	; 0x4a72 <vTaskDelay+0x160>
    4bd6:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    4bda:	81 30       	cpi	r24, 0x01	; 1
    4bdc:	31 f4       	brne	.+12     	; 0x4bea <vTaskDelay+0x2d8>
    4bde:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    4be2:	81 e0       	ldi	r24, 0x01	; 1
    4be4:	03 c0       	rjmp	.+6      	; 0x4bec <vTaskDelay+0x2da>
    4be6:	80 e0       	ldi	r24, 0x00	; 0
    4be8:	01 c0       	rjmp	.+2      	; 0x4bec <vTaskDelay+0x2da>
    4bea:	80 e0       	ldi	r24, 0x00	; 0
    4bec:	0f 90       	pop	r0
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	81 11       	cpse	r24, r1
    4bf2:	08 c0       	rjmp	.+16     	; 0x4c04 <vTaskDelay+0x2f2>
    4bf4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    4bf8:	05 c0       	rjmp	.+10     	; 0x4c04 <vTaskDelay+0x2f2>
    4bfa:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    4bfe:	81 11       	cpse	r24, r1
    4c00:	df cf       	rjmp	.-66     	; 0x4bc0 <vTaskDelay+0x2ae>
    4c02:	e0 cf       	rjmp	.-64     	; 0x4bc4 <vTaskDelay+0x2b2>
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	1f 91       	pop	r17
    4c0a:	0f 91       	pop	r16
    4c0c:	ff 90       	pop	r15
    4c0e:	ef 90       	pop	r14
    4c10:	df 90       	pop	r13
    4c12:	cf 90       	pop	r12
    4c14:	bf 90       	pop	r11
    4c16:	af 90       	pop	r10
    4c18:	9f 90       	pop	r9
    4c1a:	08 95       	ret

00004c1c <vTaskStartScheduler>:
    4c1c:	cf 92       	push	r12
    4c1e:	df 92       	push	r13
    4c20:	ef 92       	push	r14
    4c22:	ff 92       	push	r15
    4c24:	0f 93       	push	r16
    4c26:	1f 93       	push	r17
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	85 e5       	ldi	r24, 0x55	; 85
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c34:	8c 01       	movw	r16, r24
    4c36:	89 2b       	or	r24, r25
    4c38:	09 f4       	brne	.+2      	; 0x4c3c <vTaskStartScheduler+0x20>
    4c3a:	cb c0       	rjmp	.+406    	; 0x4dd2 <vTaskStartScheduler+0x1b6>
    4c3c:	88 e2       	ldi	r24, 0x28	; 40
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c44:	ec 01       	movw	r28, r24
    4c46:	89 2b       	or	r24, r25
    4c48:	69 f0       	breq	.+26     	; 0x4c64 <vTaskStartScheduler+0x48>
    4c4a:	18 8f       	std	Y+24, r17	; 0x18
    4c4c:	0f 8b       	std	Y+23, r16	; 0x17
    4c4e:	0c 5a       	subi	r16, 0xAC	; 172
    4c50:	1f 4f       	sbci	r17, 0xFF	; 255
    4c52:	89 e4       	ldi	r24, 0x49	; 73
    4c54:	89 8f       	std	Y+25, r24	; 0x19
    4c56:	ee e6       	ldi	r30, 0x6E	; 110
    4c58:	f7 e0       	ldi	r31, 0x07	; 7
    4c5a:	de 01       	movw	r26, r28
    4c5c:	5a 96       	adiw	r26, 0x1a	; 26
    4c5e:	25 e7       	ldi	r18, 0x75	; 117
    4c60:	37 e0       	ldi	r19, 0x07	; 7
    4c62:	04 c0       	rjmp	.+8      	; 0x4c6c <vTaskStartScheduler+0x50>
    4c64:	c8 01       	movw	r24, r16
    4c66:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4c6a:	b3 c0       	rjmp	.+358    	; 0x4dd2 <vTaskStartScheduler+0x1b6>
    4c6c:	91 91       	ld	r25, Z+
    4c6e:	9d 93       	st	X+, r25
    4c70:	99 23       	and	r25, r25
    4c72:	19 f0       	breq	.+6      	; 0x4c7a <vTaskStartScheduler+0x5e>
    4c74:	2e 17       	cp	r18, r30
    4c76:	3f 07       	cpc	r19, r31
    4c78:	c9 f7       	brne	.-14     	; 0x4c6c <vTaskStartScheduler+0x50>
    4c7a:	18 a2       	std	Y+32, r1	; 0x20
    4c7c:	1e 8a       	std	Y+22, r1	; 0x16
    4c7e:	19 a2       	std	Y+33, r1	; 0x21
    4c80:	1a a2       	std	Y+34, r1	; 0x22
    4c82:	7e 01       	movw	r14, r28
    4c84:	82 e0       	ldi	r24, 0x02	; 2
    4c86:	e8 0e       	add	r14, r24
    4c88:	f1 1c       	adc	r15, r1
    4c8a:	c7 01       	movw	r24, r14
    4c8c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c90:	ce 01       	movw	r24, r28
    4c92:	0c 96       	adiw	r24, 0x0c	; 12
    4c94:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c98:	d9 87       	std	Y+9, r29	; 0x09
    4c9a:	c8 87       	std	Y+8, r28	; 0x08
    4c9c:	86 e0       	ldi	r24, 0x06	; 6
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	9d 87       	std	Y+13, r25	; 0x0d
    4ca2:	8c 87       	std	Y+12, r24	; 0x0c
    4ca4:	db 8b       	std	Y+19, r29	; 0x13
    4ca6:	ca 8b       	std	Y+18, r28	; 0x12
    4ca8:	1b a2       	std	Y+35, r1	; 0x23
    4caa:	1c a2       	std	Y+36, r1	; 0x24
    4cac:	1d a2       	std	Y+37, r1	; 0x25
    4cae:	1e a2       	std	Y+38, r1	; 0x26
    4cb0:	1f a2       	std	Y+39, r1	; 0x27
    4cb2:	40 e0       	ldi	r20, 0x00	; 0
    4cb4:	50 e0       	ldi	r21, 0x00	; 0
    4cb6:	69 e1       	ldi	r22, 0x19	; 25
    4cb8:	71 e0       	ldi	r23, 0x01	; 1
    4cba:	c8 01       	movw	r24, r16
    4cbc:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <pxPortInitialiseStack>
    4cc0:	99 83       	std	Y+1, r25	; 0x01
    4cc2:	88 83       	st	Y, r24
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	0f 92       	push	r0
    4cca:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    4cce:	8f 5f       	subi	r24, 0xFF	; 255
    4cd0:	80 93 b6 1a 	sts	0x1AB6, r24	; 0x801ab6 <uxCurrentNumberOfTasks>
    4cd4:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4cd8:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4cdc:	89 2b       	or	r24, r25
    4cde:	a9 f5       	brne	.+106    	; 0x4d4a <vTaskStartScheduler+0x12e>
    4ce0:	d0 93 16 1b 	sts	0x1B16, r29	; 0x801b16 <pxCurrentTCB+0x1>
    4ce4:	c0 93 15 1b 	sts	0x1B15, r28	; 0x801b15 <pxCurrentTCB>
    4ce8:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    4cec:	81 30       	cpi	r24, 0x01	; 1
    4cee:	e1 f5       	brne	.+120    	; 0x4d68 <vTaskStartScheduler+0x14c>
    4cf0:	0f ed       	ldi	r16, 0xDF	; 223
    4cf2:	1a e1       	ldi	r17, 0x1A	; 26
    4cf4:	0f 2e       	mov	r0, r31
    4cf6:	f5 e1       	ldi	r31, 0x15	; 21
    4cf8:	cf 2e       	mov	r12, r31
    4cfa:	fb e1       	ldi	r31, 0x1B	; 27
    4cfc:	df 2e       	mov	r13, r31
    4cfe:	f0 2d       	mov	r31, r0
    4d00:	c8 01       	movw	r24, r16
    4d02:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d06:	07 5f       	subi	r16, 0xF7	; 247
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	0c 15       	cp	r16, r12
    4d0c:	1d 05       	cpc	r17, r13
    4d0e:	c1 f7       	brne	.-16     	; 0x4d00 <vTaskStartScheduler+0xe4>
    4d10:	86 ed       	ldi	r24, 0xD6	; 214
    4d12:	9a e1       	ldi	r25, 0x1A	; 26
    4d14:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d18:	8d ec       	ldi	r24, 0xCD	; 205
    4d1a:	9a e1       	ldi	r25, 0x1A	; 26
    4d1c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d20:	80 ec       	ldi	r24, 0xC0	; 192
    4d22:	9a e1       	ldi	r25, 0x1A	; 26
    4d24:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d28:	87 eb       	ldi	r24, 0xB7	; 183
    4d2a:	9a e1       	ldi	r25, 0x1A	; 26
    4d2c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d30:	86 ed       	ldi	r24, 0xD6	; 214
    4d32:	9a e1       	ldi	r25, 0x1A	; 26
    4d34:	90 93 cc 1a 	sts	0x1ACC, r25	; 0x801acc <pxDelayedTaskList+0x1>
    4d38:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <pxDelayedTaskList>
    4d3c:	8d ec       	ldi	r24, 0xCD	; 205
    4d3e:	9a e1       	ldi	r25, 0x1A	; 26
    4d40:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4d44:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    4d48:	0f c0       	rjmp	.+30     	; 0x4d68 <vTaskStartScheduler+0x14c>
    4d4a:	80 91 b2 1a 	lds	r24, 0x1AB2	; 0x801ab2 <xSchedulerRunning>
    4d4e:	81 11       	cpse	r24, r1
    4d50:	0b c0       	rjmp	.+22     	; 0x4d68 <vTaskStartScheduler+0x14c>
    4d52:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4d56:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4d5a:	86 89       	ldd	r24, Z+22	; 0x16
    4d5c:	81 11       	cpse	r24, r1
    4d5e:	04 c0       	rjmp	.+8      	; 0x4d68 <vTaskStartScheduler+0x14c>
    4d60:	d0 93 16 1b 	sts	0x1B16, r29	; 0x801b16 <pxCurrentTCB+0x1>
    4d64:	c0 93 15 1b 	sts	0x1B15, r28	; 0x801b15 <pxCurrentTCB>
    4d68:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <uxTaskNumber>
    4d6c:	8f 5f       	subi	r24, 0xFF	; 255
    4d6e:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <uxTaskNumber>
    4d72:	8e 89       	ldd	r24, Y+22	; 0x16
    4d74:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4d78:	98 17       	cp	r25, r24
    4d7a:	10 f4       	brcc	.+4      	; 0x4d80 <vTaskStartScheduler+0x164>
    4d7c:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	9c 01       	movw	r18, r24
    4d84:	22 0f       	add	r18, r18
    4d86:	33 1f       	adc	r19, r19
    4d88:	22 0f       	add	r18, r18
    4d8a:	33 1f       	adc	r19, r19
    4d8c:	22 0f       	add	r18, r18
    4d8e:	33 1f       	adc	r19, r19
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	b7 01       	movw	r22, r14
    4d96:	81 52       	subi	r24, 0x21	; 33
    4d98:	95 4e       	sbci	r25, 0xE5	; 229
    4d9a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4d9e:	0f 90       	pop	r0
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	80 91 b2 1a 	lds	r24, 0x1AB2	; 0x801ab2 <xSchedulerRunning>
    4da6:	88 23       	and	r24, r24
    4da8:	21 f0       	breq	.+8      	; 0x4db2 <vTaskStartScheduler+0x196>
    4daa:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4dae:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4db2:	f8 94       	cli
    4db4:	8f ef       	ldi	r24, 0xFF	; 255
    4db6:	9f ef       	ldi	r25, 0xFF	; 255
    4db8:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4dbc:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	80 93 b2 1a 	sts	0x1AB2, r24	; 0x801ab2 <xSchedulerRunning>
    4dc6:	10 92 b5 1a 	sts	0x1AB5, r1	; 0x801ab5 <xTickCount+0x1>
    4dca:	10 92 b4 1a 	sts	0x1AB4, r1	; 0x801ab4 <xTickCount>
    4dce:	0e 94 42 17 	call	0x2e84	; 0x2e84 <xPortStartScheduler>
    4dd2:	df 91       	pop	r29
    4dd4:	cf 91       	pop	r28
    4dd6:	1f 91       	pop	r17
    4dd8:	0f 91       	pop	r16
    4dda:	ff 90       	pop	r15
    4ddc:	ef 90       	pop	r14
    4dde:	df 90       	pop	r13
    4de0:	cf 90       	pop	r12
    4de2:	08 95       	ret

00004de4 <vTaskSuspendAll>:
    4de4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4de8:	8f 5f       	subi	r24, 0xFF	; 255
    4dea:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxSchedulerSuspended>
    4dee:	08 95       	ret

00004df0 <xTaskResumeAll>:
    4df0:	9f 92       	push	r9
    4df2:	af 92       	push	r10
    4df4:	bf 92       	push	r11
    4df6:	cf 92       	push	r12
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	ff 92       	push	r15
    4dfe:	0f 93       	push	r16
    4e00:	1f 93       	push	r17
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	0f 92       	push	r0
    4e0c:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4e10:	81 50       	subi	r24, 0x01	; 1
    4e12:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxSchedulerSuspended>
    4e16:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4e1a:	81 11       	cpse	r24, r1
    4e1c:	0d c1       	rjmp	.+538    	; 0x5038 <xTaskResumeAll+0x248>
    4e1e:	80 91 b6 1a 	lds	r24, 0x1AB6	; 0x801ab6 <uxCurrentNumberOfTasks>
    4e22:	81 11       	cpse	r24, r1
    4e24:	33 c0       	rjmp	.+102    	; 0x4e8c <xTaskResumeAll+0x9c>
    4e26:	0b c1       	rjmp	.+534    	; 0x503e <xTaskResumeAll+0x24e>
    4e28:	d7 01       	movw	r26, r14
    4e2a:	15 96       	adiw	r26, 0x05	; 5
    4e2c:	ed 91       	ld	r30, X+
    4e2e:	fc 91       	ld	r31, X
    4e30:	16 97       	sbiw	r26, 0x06	; 6
    4e32:	c6 81       	ldd	r28, Z+6	; 0x06
    4e34:	d7 81       	ldd	r29, Z+7	; 0x07
    4e36:	ce 01       	movw	r24, r28
    4e38:	0c 96       	adiw	r24, 0x0c	; 12
    4e3a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e3e:	8e 01       	movw	r16, r28
    4e40:	0e 5f       	subi	r16, 0xFE	; 254
    4e42:	1f 4f       	sbci	r17, 0xFF	; 255
    4e44:	c8 01       	movw	r24, r16
    4e46:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e4a:	8e 89       	ldd	r24, Y+22	; 0x16
    4e4c:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4e50:	98 17       	cp	r25, r24
    4e52:	10 f4       	brcc	.+4      	; 0x4e58 <xTaskResumeAll+0x68>
    4e54:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	9c 01       	movw	r18, r24
    4e5c:	22 0f       	add	r18, r18
    4e5e:	33 1f       	adc	r19, r19
    4e60:	22 0f       	add	r18, r18
    4e62:	33 1f       	adc	r19, r19
    4e64:	22 0f       	add	r18, r18
    4e66:	33 1f       	adc	r19, r19
    4e68:	82 0f       	add	r24, r18
    4e6a:	93 1f       	adc	r25, r19
    4e6c:	b8 01       	movw	r22, r16
    4e6e:	81 52       	subi	r24, 0x21	; 33
    4e70:	95 4e       	sbci	r25, 0xE5	; 229
    4e72:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4e76:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4e7a:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4e7e:	9e 89       	ldd	r25, Y+22	; 0x16
    4e80:	86 89       	ldd	r24, Z+22	; 0x16
    4e82:	98 17       	cp	r25, r24
    4e84:	58 f0       	brcs	.+22     	; 0x4e9c <xTaskResumeAll+0xac>
    4e86:	d0 92 b0 1a 	sts	0x1AB0, r13	; 0x801ab0 <xYieldPending>
    4e8a:	08 c0       	rjmp	.+16     	; 0x4e9c <xTaskResumeAll+0xac>
    4e8c:	0f 2e       	mov	r0, r31
    4e8e:	f0 ec       	ldi	r31, 0xC0	; 192
    4e90:	ef 2e       	mov	r14, r31
    4e92:	fa e1       	ldi	r31, 0x1A	; 26
    4e94:	ff 2e       	mov	r15, r31
    4e96:	f0 2d       	mov	r31, r0
    4e98:	dd 24       	eor	r13, r13
    4e9a:	d3 94       	inc	r13
    4e9c:	f7 01       	movw	r30, r14
    4e9e:	80 81       	ld	r24, Z
    4ea0:	81 11       	cpse	r24, r1
    4ea2:	c2 cf       	rjmp	.-124    	; 0x4e28 <xTaskResumeAll+0x38>
    4ea4:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4ea8:	88 23       	and	r24, r24
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <xTaskResumeAll+0xbe>
    4eac:	bd c0       	rjmp	.+378    	; 0x5028 <xTaskResumeAll+0x238>
    4eae:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    4eb2:	88 23       	and	r24, r24
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <xTaskResumeAll+0xc8>
    4eb6:	b8 c0       	rjmp	.+368    	; 0x5028 <xTaskResumeAll+0x238>
    4eb8:	91 2c       	mov	r9, r1
    4eba:	bb 24       	eor	r11, r11
    4ebc:	b3 94       	inc	r11
    4ebe:	cc 24       	eor	r12, r12
    4ec0:	ca 94       	dec	r12
    4ec2:	dc 2c       	mov	r13, r12
    4ec4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    4ec8:	81 11       	cpse	r24, r1
    4eca:	98 c0       	rjmp	.+304    	; 0x4ffc <xTaskResumeAll+0x20c>
    4ecc:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    4ed0:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4ed4:	01 96       	adiw	r24, 0x01	; 1
    4ed6:	90 93 b5 1a 	sts	0x1AB5, r25	; 0x801ab5 <xTickCount+0x1>
    4eda:	80 93 b4 1a 	sts	0x1AB4, r24	; 0x801ab4 <xTickCount>
    4ede:	e0 90 b4 1a 	lds	r14, 0x1AB4	; 0x801ab4 <xTickCount>
    4ee2:	f0 90 b5 1a 	lds	r15, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    4ee6:	e1 14       	cp	r14, r1
    4ee8:	f1 04       	cpc	r15, r1
    4eea:	89 f5       	brne	.+98     	; 0x4f4e <xTaskResumeAll+0x15e>
    4eec:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4ef0:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4ef4:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    4ef8:	30 91 ca 1a 	lds	r19, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4efc:	30 93 cc 1a 	sts	0x1ACC, r19	; 0x801acc <pxDelayedTaskList+0x1>
    4f00:	20 93 cb 1a 	sts	0x1ACB, r18	; 0x801acb <pxDelayedTaskList>
    4f04:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    4f08:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    4f0c:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    4f10:	8f 5f       	subi	r24, 0xFF	; 255
    4f12:	80 93 af 1a 	sts	0x1AAF, r24	; 0x801aaf <xNumOfOverflows>
    4f16:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4f1a:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4f1e:	80 81       	ld	r24, Z
    4f20:	81 11       	cpse	r24, r1
    4f22:	05 c0       	rjmp	.+10     	; 0x4f2e <xTaskResumeAll+0x13e>
    4f24:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    4f28:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    4f2c:	10 c0       	rjmp	.+32     	; 0x4f4e <xTaskResumeAll+0x15e>
    4f2e:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4f32:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4f36:	05 80       	ldd	r0, Z+5	; 0x05
    4f38:	f6 81       	ldd	r31, Z+6	; 0x06
    4f3a:	e0 2d       	mov	r30, r0
    4f3c:	06 80       	ldd	r0, Z+6	; 0x06
    4f3e:	f7 81       	ldd	r31, Z+7	; 0x07
    4f40:	e0 2d       	mov	r30, r0
    4f42:	82 81       	ldd	r24, Z+2	; 0x02
    4f44:	93 81       	ldd	r25, Z+3	; 0x03
    4f46:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4f4a:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4f4e:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    4f52:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    4f56:	e8 16       	cp	r14, r24
    4f58:	f9 06       	cpc	r15, r25
    4f5a:	08 f4       	brcc	.+2      	; 0x4f5e <xTaskResumeAll+0x16e>
    4f5c:	73 c0       	rjmp	.+230    	; 0x5044 <xTaskResumeAll+0x254>
    4f5e:	a9 2c       	mov	r10, r9
    4f60:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4f64:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4f68:	80 81       	ld	r24, Z
    4f6a:	81 11       	cpse	r24, r1
    4f6c:	05 c0       	rjmp	.+10     	; 0x4f78 <xTaskResumeAll+0x188>
    4f6e:	d0 92 ad 1a 	sts	0x1AAD, r13	; 0x801aad <xNextTaskUnblockTime+0x1>
    4f72:	c0 92 ac 1a 	sts	0x1AAC, r12	; 0x801aac <xNextTaskUnblockTime>
    4f76:	48 c0       	rjmp	.+144    	; 0x5008 <xTaskResumeAll+0x218>
    4f78:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    4f7c:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    4f80:	05 80       	ldd	r0, Z+5	; 0x05
    4f82:	f6 81       	ldd	r31, Z+6	; 0x06
    4f84:	e0 2d       	mov	r30, r0
    4f86:	c6 81       	ldd	r28, Z+6	; 0x06
    4f88:	d7 81       	ldd	r29, Z+7	; 0x07
    4f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f8e:	e8 16       	cp	r14, r24
    4f90:	f9 06       	cpc	r15, r25
    4f92:	28 f4       	brcc	.+10     	; 0x4f9e <xTaskResumeAll+0x1ae>
    4f94:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    4f98:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    4f9c:	35 c0       	rjmp	.+106    	; 0x5008 <xTaskResumeAll+0x218>
    4f9e:	8e 01       	movw	r16, r28
    4fa0:	0e 5f       	subi	r16, 0xFE	; 254
    4fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa4:	c8 01       	movw	r24, r16
    4fa6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4faa:	8c 89       	ldd	r24, Y+20	; 0x14
    4fac:	9d 89       	ldd	r25, Y+21	; 0x15
    4fae:	89 2b       	or	r24, r25
    4fb0:	21 f0       	breq	.+8      	; 0x4fba <xTaskResumeAll+0x1ca>
    4fb2:	ce 01       	movw	r24, r28
    4fb4:	0c 96       	adiw	r24, 0x0c	; 12
    4fb6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4fba:	8e 89       	ldd	r24, Y+22	; 0x16
    4fbc:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    4fc0:	98 17       	cp	r25, r24
    4fc2:	10 f4       	brcc	.+4      	; 0x4fc8 <xTaskResumeAll+0x1d8>
    4fc4:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	9c 01       	movw	r18, r24
    4fcc:	22 0f       	add	r18, r18
    4fce:	33 1f       	adc	r19, r19
    4fd0:	22 0f       	add	r18, r18
    4fd2:	33 1f       	adc	r19, r19
    4fd4:	22 0f       	add	r18, r18
    4fd6:	33 1f       	adc	r19, r19
    4fd8:	82 0f       	add	r24, r18
    4fda:	93 1f       	adc	r25, r19
    4fdc:	b8 01       	movw	r22, r16
    4fde:	81 52       	subi	r24, 0x21	; 33
    4fe0:	95 4e       	sbci	r25, 0xE5	; 229
    4fe2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4fe6:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    4fea:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    4fee:	9e 89       	ldd	r25, Y+22	; 0x16
    4ff0:	86 89       	ldd	r24, Z+22	; 0x16
    4ff2:	98 17       	cp	r25, r24
    4ff4:	08 f4       	brcc	.+2      	; 0x4ff8 <xTaskResumeAll+0x208>
    4ff6:	b4 cf       	rjmp	.-152    	; 0x4f60 <xTaskResumeAll+0x170>
    4ff8:	ab 2c       	mov	r10, r11
    4ffa:	b2 cf       	rjmp	.-156    	; 0x4f60 <xTaskResumeAll+0x170>
    4ffc:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    5000:	8f 5f       	subi	r24, 0xFF	; 255
    5002:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    5006:	1e c0       	rjmp	.+60     	; 0x5044 <xTaskResumeAll+0x254>
    5008:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    500c:	81 11       	cpse	r24, r1
    500e:	01 c0       	rjmp	.+2      	; 0x5012 <xTaskResumeAll+0x222>
    5010:	a1 10       	cpse	r10, r1
    5012:	b0 92 b0 1a 	sts	0x1AB0, r11	; 0x801ab0 <xYieldPending>
    5016:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    501a:	81 50       	subi	r24, 0x01	; 1
    501c:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    5020:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    5024:	81 11       	cpse	r24, r1
    5026:	4e cf       	rjmp	.-356    	; 0x4ec4 <xTaskResumeAll+0xd4>
    5028:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    502c:	81 30       	cpi	r24, 0x01	; 1
    502e:	31 f4       	brne	.+12     	; 0x503c <xTaskResumeAll+0x24c>
    5030:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	03 c0       	rjmp	.+6      	; 0x503e <xTaskResumeAll+0x24e>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	01 c0       	rjmp	.+2      	; 0x503e <xTaskResumeAll+0x24e>
    503c:	80 e0       	ldi	r24, 0x00	; 0
    503e:	0f 90       	pop	r0
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	05 c0       	rjmp	.+10     	; 0x504e <xTaskResumeAll+0x25e>
    5044:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    5048:	81 11       	cpse	r24, r1
    504a:	e3 cf       	rjmp	.-58     	; 0x5012 <xTaskResumeAll+0x222>
    504c:	e4 cf       	rjmp	.-56     	; 0x5016 <xTaskResumeAll+0x226>
    504e:	df 91       	pop	r29
    5050:	cf 91       	pop	r28
    5052:	1f 91       	pop	r17
    5054:	0f 91       	pop	r16
    5056:	ff 90       	pop	r15
    5058:	ef 90       	pop	r14
    505a:	df 90       	pop	r13
    505c:	cf 90       	pop	r12
    505e:	bf 90       	pop	r11
    5060:	af 90       	pop	r10
    5062:	9f 90       	pop	r9
    5064:	08 95       	ret

00005066 <xTaskGetTickCount>:
    5066:	0f b6       	in	r0, 0x3f	; 63
    5068:	f8 94       	cli
    506a:	0f 92       	push	r0
    506c:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    5070:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    5074:	0f 90       	pop	r0
    5076:	0f be       	out	0x3f, r0	; 63
    5078:	08 95       	ret

0000507a <xTaskIncrementTick>:
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    508e:	81 11       	cpse	r24, r1
    5090:	9f c0       	rjmp	.+318    	; 0x51d0 <xTaskIncrementTick+0x156>
    5092:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    5096:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    509a:	01 96       	adiw	r24, 0x01	; 1
    509c:	90 93 b5 1a 	sts	0x1AB5, r25	; 0x801ab5 <xTickCount+0x1>
    50a0:	80 93 b4 1a 	sts	0x1AB4, r24	; 0x801ab4 <xTickCount>
    50a4:	e0 90 b4 1a 	lds	r14, 0x1AB4	; 0x801ab4 <xTickCount>
    50a8:	f0 90 b5 1a 	lds	r15, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    50ac:	e1 14       	cp	r14, r1
    50ae:	f1 04       	cpc	r15, r1
    50b0:	99 f5       	brne	.+102    	; 0x5118 <xTaskIncrementTick+0x9e>
    50b2:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    50b6:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    50ba:	20 91 c9 1a 	lds	r18, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    50be:	30 91 ca 1a 	lds	r19, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    50c2:	30 93 cc 1a 	sts	0x1ACC, r19	; 0x801acc <pxDelayedTaskList+0x1>
    50c6:	20 93 cb 1a 	sts	0x1ACB, r18	; 0x801acb <pxDelayedTaskList>
    50ca:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    50ce:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxOverflowDelayedTaskList>
    50d2:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    50d6:	8f 5f       	subi	r24, 0xFF	; 255
    50d8:	80 93 af 1a 	sts	0x1AAF, r24	; 0x801aaf <xNumOfOverflows>
    50dc:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    50e0:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    50e4:	80 81       	ld	r24, Z
    50e6:	81 11       	cpse	r24, r1
    50e8:	07 c0       	rjmp	.+14     	; 0x50f8 <xTaskIncrementTick+0x7e>
    50ea:	8f ef       	ldi	r24, 0xFF	; 255
    50ec:	9f ef       	ldi	r25, 0xFF	; 255
    50ee:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    50f2:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    50f6:	10 c0       	rjmp	.+32     	; 0x5118 <xTaskIncrementTick+0x9e>
    50f8:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    50fc:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    5100:	05 80       	ldd	r0, Z+5	; 0x05
    5102:	f6 81       	ldd	r31, Z+6	; 0x06
    5104:	e0 2d       	mov	r30, r0
    5106:	06 80       	ldd	r0, Z+6	; 0x06
    5108:	f7 81       	ldd	r31, Z+7	; 0x07
    510a:	e0 2d       	mov	r30, r0
    510c:	82 81       	ldd	r24, Z+2	; 0x02
    510e:	93 81       	ldd	r25, Z+3	; 0x03
    5110:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    5114:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    5118:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    511c:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    5120:	e8 16       	cp	r14, r24
    5122:	f9 06       	cpc	r15, r25
    5124:	10 f4       	brcc	.+4      	; 0x512a <xTaskIncrementTick+0xb0>
    5126:	d1 2c       	mov	r13, r1
    5128:	59 c0       	rjmp	.+178    	; 0x51dc <xTaskIncrementTick+0x162>
    512a:	d1 2c       	mov	r13, r1
    512c:	cc 24       	eor	r12, r12
    512e:	c3 94       	inc	r12
    5130:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    5134:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    5138:	80 81       	ld	r24, Z
    513a:	81 11       	cpse	r24, r1
    513c:	07 c0       	rjmp	.+14     	; 0x514c <xTaskIncrementTick+0xd2>
    513e:	8f ef       	ldi	r24, 0xFF	; 255
    5140:	9f ef       	ldi	r25, 0xFF	; 255
    5142:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    5146:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    514a:	48 c0       	rjmp	.+144    	; 0x51dc <xTaskIncrementTick+0x162>
    514c:	e0 91 cb 1a 	lds	r30, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    5150:	f0 91 cc 1a 	lds	r31, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    5154:	05 80       	ldd	r0, Z+5	; 0x05
    5156:	f6 81       	ldd	r31, Z+6	; 0x06
    5158:	e0 2d       	mov	r30, r0
    515a:	c6 81       	ldd	r28, Z+6	; 0x06
    515c:	d7 81       	ldd	r29, Z+7	; 0x07
    515e:	8a 81       	ldd	r24, Y+2	; 0x02
    5160:	9b 81       	ldd	r25, Y+3	; 0x03
    5162:	e8 16       	cp	r14, r24
    5164:	f9 06       	cpc	r15, r25
    5166:	28 f4       	brcc	.+10     	; 0x5172 <xTaskIncrementTick+0xf8>
    5168:	90 93 ad 1a 	sts	0x1AAD, r25	; 0x801aad <xNextTaskUnblockTime+0x1>
    516c:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xNextTaskUnblockTime>
    5170:	35 c0       	rjmp	.+106    	; 0x51dc <xTaskIncrementTick+0x162>
    5172:	8e 01       	movw	r16, r28
    5174:	0e 5f       	subi	r16, 0xFE	; 254
    5176:	1f 4f       	sbci	r17, 0xFF	; 255
    5178:	c8 01       	movw	r24, r16
    517a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    517e:	8c 89       	ldd	r24, Y+20	; 0x14
    5180:	9d 89       	ldd	r25, Y+21	; 0x15
    5182:	89 2b       	or	r24, r25
    5184:	21 f0       	breq	.+8      	; 0x518e <xTaskIncrementTick+0x114>
    5186:	ce 01       	movw	r24, r28
    5188:	0c 96       	adiw	r24, 0x0c	; 12
    518a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    518e:	8e 89       	ldd	r24, Y+22	; 0x16
    5190:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    5194:	98 17       	cp	r25, r24
    5196:	10 f4       	brcc	.+4      	; 0x519c <xTaskIncrementTick+0x122>
    5198:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    519c:	90 e0       	ldi	r25, 0x00	; 0
    519e:	9c 01       	movw	r18, r24
    51a0:	22 0f       	add	r18, r18
    51a2:	33 1f       	adc	r19, r19
    51a4:	22 0f       	add	r18, r18
    51a6:	33 1f       	adc	r19, r19
    51a8:	22 0f       	add	r18, r18
    51aa:	33 1f       	adc	r19, r19
    51ac:	82 0f       	add	r24, r18
    51ae:	93 1f       	adc	r25, r19
    51b0:	b8 01       	movw	r22, r16
    51b2:	81 52       	subi	r24, 0x21	; 33
    51b4:	95 4e       	sbci	r25, 0xE5	; 229
    51b6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    51ba:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    51be:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    51c2:	9e 89       	ldd	r25, Y+22	; 0x16
    51c4:	86 89       	ldd	r24, Z+22	; 0x16
    51c6:	98 17       	cp	r25, r24
    51c8:	08 f4       	brcc	.+2      	; 0x51cc <xTaskIncrementTick+0x152>
    51ca:	b2 cf       	rjmp	.-156    	; 0x5130 <xTaskIncrementTick+0xb6>
    51cc:	dc 2c       	mov	r13, r12
    51ce:	b0 cf       	rjmp	.-160    	; 0x5130 <xTaskIncrementTick+0xb6>
    51d0:	80 91 b1 1a 	lds	r24, 0x1AB1	; 0x801ab1 <uxPendedTicks>
    51d4:	8f 5f       	subi	r24, 0xFF	; 255
    51d6:	80 93 b1 1a 	sts	0x1AB1, r24	; 0x801ab1 <uxPendedTicks>
    51da:	d1 2c       	mov	r13, r1
    51dc:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <xYieldPending>
    51e0:	88 23       	and	r24, r24
    51e2:	11 f0       	breq	.+4      	; 0x51e8 <xTaskIncrementTick+0x16e>
    51e4:	dd 24       	eor	r13, r13
    51e6:	d3 94       	inc	r13
    51e8:	8d 2d       	mov	r24, r13
    51ea:	df 91       	pop	r29
    51ec:	cf 91       	pop	r28
    51ee:	1f 91       	pop	r17
    51f0:	0f 91       	pop	r16
    51f2:	ff 90       	pop	r15
    51f4:	ef 90       	pop	r14
    51f6:	df 90       	pop	r13
    51f8:	cf 90       	pop	r12
    51fa:	08 95       	ret

000051fc <vTaskSwitchContext>:
    51fc:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    5200:	88 23       	and	r24, r24
    5202:	21 f0       	breq	.+8      	; 0x520c <vTaskSwitchContext+0x10>
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	80 93 b0 1a 	sts	0x1AB0, r24	; 0x801ab0 <xYieldPending>
    520a:	08 95       	ret
    520c:	10 92 b0 1a 	sts	0x1AB0, r1	; 0x801ab0 <xYieldPending>
    5210:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5214:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5218:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    521c:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5220:	2d 91       	ld	r18, X+
    5222:	3c 91       	ld	r19, X
    5224:	87 89       	ldd	r24, Z+23	; 0x17
    5226:	90 8d       	ldd	r25, Z+24	; 0x18
    5228:	82 17       	cp	r24, r18
    522a:	93 07       	cpc	r25, r19
    522c:	60 f0       	brcs	.+24     	; 0x5246 <vTaskSwitchContext+0x4a>
    522e:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5232:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5236:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    523a:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    523e:	67 5e       	subi	r22, 0xE7	; 231
    5240:	7f 4f       	sbci	r23, 0xFF	; 255
    5242:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <vApplicationStackOverflowHook>
    5246:	80 91 b3 1a 	lds	r24, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    524a:	90 e0       	ldi	r25, 0x00	; 0
    524c:	fc 01       	movw	r30, r24
    524e:	ee 0f       	add	r30, r30
    5250:	ff 1f       	adc	r31, r31
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	ee 0f       	add	r30, r30
    5258:	ff 1f       	adc	r31, r31
    525a:	8e 0f       	add	r24, r30
    525c:	9f 1f       	adc	r25, r31
    525e:	fc 01       	movw	r30, r24
    5260:	e1 52       	subi	r30, 0x21	; 33
    5262:	f5 4e       	sbci	r31, 0xE5	; 229
    5264:	80 81       	ld	r24, Z
    5266:	81 11       	cpse	r24, r1
    5268:	17 c0       	rjmp	.+46     	; 0x5298 <vTaskSwitchContext+0x9c>
    526a:	80 91 b3 1a 	lds	r24, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    526e:	81 50       	subi	r24, 0x01	; 1
    5270:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    5274:	80 91 b3 1a 	lds	r24, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	fc 01       	movw	r30, r24
    527c:	ee 0f       	add	r30, r30
    527e:	ff 1f       	adc	r31, r31
    5280:	ee 0f       	add	r30, r30
    5282:	ff 1f       	adc	r31, r31
    5284:	ee 0f       	add	r30, r30
    5286:	ff 1f       	adc	r31, r31
    5288:	8e 0f       	add	r24, r30
    528a:	9f 1f       	adc	r25, r31
    528c:	fc 01       	movw	r30, r24
    528e:	e1 52       	subi	r30, 0x21	; 33
    5290:	f5 4e       	sbci	r31, 0xE5	; 229
    5292:	80 81       	ld	r24, Z
    5294:	88 23       	and	r24, r24
    5296:	49 f3       	breq	.-46     	; 0x526a <vTaskSwitchContext+0x6e>
    5298:	80 91 b3 1a 	lds	r24, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	9c 01       	movw	r18, r24
    52a0:	22 0f       	add	r18, r18
    52a2:	33 1f       	adc	r19, r19
    52a4:	22 0f       	add	r18, r18
    52a6:	33 1f       	adc	r19, r19
    52a8:	22 0f       	add	r18, r18
    52aa:	33 1f       	adc	r19, r19
    52ac:	28 0f       	add	r18, r24
    52ae:	39 1f       	adc	r19, r25
    52b0:	d9 01       	movw	r26, r18
    52b2:	a1 52       	subi	r26, 0x21	; 33
    52b4:	b5 4e       	sbci	r27, 0xE5	; 229
    52b6:	11 96       	adiw	r26, 0x01	; 1
    52b8:	ed 91       	ld	r30, X+
    52ba:	fc 91       	ld	r31, X
    52bc:	12 97       	sbiw	r26, 0x02	; 2
    52be:	02 80       	ldd	r0, Z+2	; 0x02
    52c0:	f3 81       	ldd	r31, Z+3	; 0x03
    52c2:	e0 2d       	mov	r30, r0
    52c4:	12 96       	adiw	r26, 0x02	; 2
    52c6:	fc 93       	st	X, r31
    52c8:	ee 93       	st	-X, r30
    52ca:	11 97       	sbiw	r26, 0x01	; 1
    52cc:	2e 51       	subi	r18, 0x1E	; 30
    52ce:	35 4e       	sbci	r19, 0xE5	; 229
    52d0:	e2 17       	cp	r30, r18
    52d2:	f3 07       	cpc	r31, r19
    52d4:	29 f4       	brne	.+10     	; 0x52e0 <vTaskSwitchContext+0xe4>
    52d6:	22 81       	ldd	r18, Z+2	; 0x02
    52d8:	33 81       	ldd	r19, Z+3	; 0x03
    52da:	fd 01       	movw	r30, r26
    52dc:	32 83       	std	Z+2, r19	; 0x02
    52de:	21 83       	std	Z+1, r18	; 0x01
    52e0:	fc 01       	movw	r30, r24
    52e2:	ee 0f       	add	r30, r30
    52e4:	ff 1f       	adc	r31, r31
    52e6:	ee 0f       	add	r30, r30
    52e8:	ff 1f       	adc	r31, r31
    52ea:	ee 0f       	add	r30, r30
    52ec:	ff 1f       	adc	r31, r31
    52ee:	8e 0f       	add	r24, r30
    52f0:	9f 1f       	adc	r25, r31
    52f2:	fc 01       	movw	r30, r24
    52f4:	e1 52       	subi	r30, 0x21	; 33
    52f6:	f5 4e       	sbci	r31, 0xE5	; 229
    52f8:	01 80       	ldd	r0, Z+1	; 0x01
    52fa:	f2 81       	ldd	r31, Z+2	; 0x02
    52fc:	e0 2d       	mov	r30, r0
    52fe:	86 81       	ldd	r24, Z+6	; 0x06
    5300:	97 81       	ldd	r25, Z+7	; 0x07
    5302:	90 93 16 1b 	sts	0x1B16, r25	; 0x801b16 <pxCurrentTCB+0x1>
    5306:	80 93 15 1b 	sts	0x1B15, r24	; 0x801b15 <pxCurrentTCB>
    530a:	08 95       	ret

0000530c <vTaskPlaceOnEventList>:
    530c:	cf 93       	push	r28
    530e:	df 93       	push	r29
    5310:	eb 01       	movw	r28, r22
    5312:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5316:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    531a:	64 5f       	subi	r22, 0xF4	; 244
    531c:	7f 4f       	sbci	r23, 0xFF	; 255
    531e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5322:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5326:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    532a:	02 96       	adiw	r24, 0x02	; 2
    532c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5330:	cf 3f       	cpi	r28, 0xFF	; 255
    5332:	8f ef       	ldi	r24, 0xFF	; 255
    5334:	d8 07       	cpc	r29, r24
    5336:	59 f4       	brne	.+22     	; 0x534e <vTaskPlaceOnEventList+0x42>
    5338:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    533c:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5340:	6e 5f       	subi	r22, 0xFE	; 254
    5342:	7f 4f       	sbci	r23, 0xFF	; 255
    5344:	87 eb       	ldi	r24, 0xB7	; 183
    5346:	9a e1       	ldi	r25, 0x1A	; 26
    5348:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    534c:	37 c0       	rjmp	.+110    	; 0x53bc <vTaskPlaceOnEventList+0xb0>
    534e:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    5352:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    5356:	c8 0f       	add	r28, r24
    5358:	d9 1f       	adc	r29, r25
    535a:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    535e:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5362:	d3 83       	std	Z+3, r29	; 0x03
    5364:	c2 83       	std	Z+2, r28	; 0x02
    5366:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    536a:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    536e:	c8 17       	cp	r28, r24
    5370:	d9 07       	cpc	r29, r25
    5372:	68 f4       	brcc	.+26     	; 0x538e <vTaskPlaceOnEventList+0x82>
    5374:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5378:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    537c:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    5380:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    5384:	6e 5f       	subi	r22, 0xFE	; 254
    5386:	7f 4f       	sbci	r23, 0xFF	; 255
    5388:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    538c:	17 c0       	rjmp	.+46     	; 0x53bc <vTaskPlaceOnEventList+0xb0>
    538e:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5392:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5396:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    539a:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    539e:	6e 5f       	subi	r22, 0xFE	; 254
    53a0:	7f 4f       	sbci	r23, 0xFF	; 255
    53a2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    53a6:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    53aa:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    53ae:	c8 17       	cp	r28, r24
    53b0:	d9 07       	cpc	r29, r25
    53b2:	20 f4       	brcc	.+8      	; 0x53bc <vTaskPlaceOnEventList+0xb0>
    53b4:	d0 93 ad 1a 	sts	0x1AAD, r29	; 0x801aad <xNextTaskUnblockTime+0x1>
    53b8:	c0 93 ac 1a 	sts	0x1AAC, r28	; 0x801aac <xNextTaskUnblockTime>
    53bc:	df 91       	pop	r29
    53be:	cf 91       	pop	r28
    53c0:	08 95       	ret

000053c2 <xTaskRemoveFromEventList>:
    53c2:	0f 93       	push	r16
    53c4:	1f 93       	push	r17
    53c6:	cf 93       	push	r28
    53c8:	df 93       	push	r29
    53ca:	dc 01       	movw	r26, r24
    53cc:	15 96       	adiw	r26, 0x05	; 5
    53ce:	ed 91       	ld	r30, X+
    53d0:	fc 91       	ld	r31, X
    53d2:	16 97       	sbiw	r26, 0x06	; 6
    53d4:	c6 81       	ldd	r28, Z+6	; 0x06
    53d6:	d7 81       	ldd	r29, Z+7	; 0x07
    53d8:	8e 01       	movw	r16, r28
    53da:	04 5f       	subi	r16, 0xF4	; 244
    53dc:	1f 4f       	sbci	r17, 0xFF	; 255
    53de:	c8 01       	movw	r24, r16
    53e0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    53e4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    53e8:	81 11       	cpse	r24, r1
    53ea:	1c c0       	rjmp	.+56     	; 0x5424 <xTaskRemoveFromEventList+0x62>
    53ec:	0a 50       	subi	r16, 0x0A	; 10
    53ee:	11 09       	sbc	r17, r1
    53f0:	c8 01       	movw	r24, r16
    53f2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    53f6:	8e 89       	ldd	r24, Y+22	; 0x16
    53f8:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    53fc:	98 17       	cp	r25, r24
    53fe:	10 f4       	brcc	.+4      	; 0x5404 <xTaskRemoveFromEventList+0x42>
    5400:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	9c 01       	movw	r18, r24
    5408:	22 0f       	add	r18, r18
    540a:	33 1f       	adc	r19, r19
    540c:	22 0f       	add	r18, r18
    540e:	33 1f       	adc	r19, r19
    5410:	22 0f       	add	r18, r18
    5412:	33 1f       	adc	r19, r19
    5414:	82 0f       	add	r24, r18
    5416:	93 1f       	adc	r25, r19
    5418:	b8 01       	movw	r22, r16
    541a:	81 52       	subi	r24, 0x21	; 33
    541c:	95 4e       	sbci	r25, 0xE5	; 229
    541e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5422:	05 c0       	rjmp	.+10     	; 0x542e <xTaskRemoveFromEventList+0x6c>
    5424:	b8 01       	movw	r22, r16
    5426:	80 ec       	ldi	r24, 0xC0	; 192
    5428:	9a e1       	ldi	r25, 0x1A	; 26
    542a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    542e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5432:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5436:	9e 89       	ldd	r25, Y+22	; 0x16
    5438:	86 89       	ldd	r24, Z+22	; 0x16
    543a:	89 17       	cp	r24, r25
    543c:	20 f4       	brcc	.+8      	; 0x5446 <xTaskRemoveFromEventList+0x84>
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	80 93 b0 1a 	sts	0x1AB0, r24	; 0x801ab0 <xYieldPending>
    5444:	01 c0       	rjmp	.+2      	; 0x5448 <xTaskRemoveFromEventList+0x86>
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	df 91       	pop	r29
    544a:	cf 91       	pop	r28
    544c:	1f 91       	pop	r17
    544e:	0f 91       	pop	r16
    5450:	08 95       	ret

00005452 <vTaskSetTimeOutState>:
    5452:	20 91 af 1a 	lds	r18, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    5456:	fc 01       	movw	r30, r24
    5458:	20 83       	st	Z, r18
    545a:	20 91 b4 1a 	lds	r18, 0x1AB4	; 0x801ab4 <xTickCount>
    545e:	30 91 b5 1a 	lds	r19, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    5462:	32 83       	std	Z+2, r19	; 0x02
    5464:	21 83       	std	Z+1, r18	; 0x01
    5466:	08 95       	ret

00005468 <xTaskCheckForTimeOut>:
    5468:	fc 01       	movw	r30, r24
    546a:	0f b6       	in	r0, 0x3f	; 63
    546c:	f8 94       	cli
    546e:	0f 92       	push	r0
    5470:	20 91 b4 1a 	lds	r18, 0x1AB4	; 0x801ab4 <xTickCount>
    5474:	30 91 b5 1a 	lds	r19, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    5478:	db 01       	movw	r26, r22
    547a:	8d 91       	ld	r24, X+
    547c:	9c 91       	ld	r25, X
    547e:	8f 3f       	cpi	r24, 0xFF	; 255
    5480:	bf ef       	ldi	r27, 0xFF	; 255
    5482:	9b 07       	cpc	r25, r27
    5484:	21 f1       	breq	.+72     	; 0x54ce <xTaskCheckForTimeOut+0x66>
    5486:	40 91 af 1a 	lds	r20, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    548a:	50 81       	ld	r21, Z
    548c:	54 17       	cp	r21, r20
    548e:	29 f0       	breq	.+10     	; 0x549a <xTaskCheckForTimeOut+0x32>
    5490:	41 81       	ldd	r20, Z+1	; 0x01
    5492:	52 81       	ldd	r21, Z+2	; 0x02
    5494:	24 17       	cp	r18, r20
    5496:	35 07       	cpc	r19, r21
    5498:	e0 f4       	brcc	.+56     	; 0x54d2 <xTaskCheckForTimeOut+0x6a>
    549a:	41 81       	ldd	r20, Z+1	; 0x01
    549c:	52 81       	ldd	r21, Z+2	; 0x02
    549e:	d9 01       	movw	r26, r18
    54a0:	a4 1b       	sub	r26, r20
    54a2:	b5 0b       	sbc	r27, r21
    54a4:	a8 17       	cp	r26, r24
    54a6:	b9 07       	cpc	r27, r25
    54a8:	b0 f4       	brcc	.+44     	; 0x54d6 <xTaskCheckForTimeOut+0x6e>
    54aa:	42 1b       	sub	r20, r18
    54ac:	53 0b       	sbc	r21, r19
    54ae:	84 0f       	add	r24, r20
    54b0:	95 1f       	adc	r25, r21
    54b2:	db 01       	movw	r26, r22
    54b4:	8d 93       	st	X+, r24
    54b6:	9c 93       	st	X, r25
    54b8:	80 91 af 1a 	lds	r24, 0x1AAF	; 0x801aaf <xNumOfOverflows>
    54bc:	80 83       	st	Z, r24
    54be:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    54c2:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    54c6:	92 83       	std	Z+2, r25	; 0x02
    54c8:	81 83       	std	Z+1, r24	; 0x01
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	05 c0       	rjmp	.+10     	; 0x54d8 <xTaskCheckForTimeOut+0x70>
    54ce:	80 e0       	ldi	r24, 0x00	; 0
    54d0:	03 c0       	rjmp	.+6      	; 0x54d8 <xTaskCheckForTimeOut+0x70>
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	01 c0       	rjmp	.+2      	; 0x54d8 <xTaskCheckForTimeOut+0x70>
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	0f 90       	pop	r0
    54da:	0f be       	out	0x3f, r0	; 63
    54dc:	08 95       	ret

000054de <vTaskMissedYield>:
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	80 93 b0 1a 	sts	0x1AB0, r24	; 0x801ab0 <xYieldPending>
    54e4:	08 95       	ret

000054e6 <xTaskGetCurrentTaskHandle>:
    54e6:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    54ea:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    54ee:	08 95       	ret

000054f0 <vTaskPriorityInherit>:
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	fc 01       	movw	r30, r24
    54fa:	89 2b       	or	r24, r25
    54fc:	09 f4       	brne	.+2      	; 0x5500 <vTaskPriorityInherit+0x10>
    54fe:	55 c0       	rjmp	.+170    	; 0x55aa <vTaskPriorityInherit+0xba>
    5500:	26 89       	ldd	r18, Z+22	; 0x16
    5502:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5506:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    550a:	56 96       	adiw	r26, 0x16	; 22
    550c:	8c 91       	ld	r24, X
    550e:	28 17       	cp	r18, r24
    5510:	08 f0       	brcs	.+2      	; 0x5514 <vTaskPriorityInherit+0x24>
    5512:	4b c0       	rjmp	.+150    	; 0x55aa <vTaskPriorityInherit+0xba>
    5514:	84 85       	ldd	r24, Z+12	; 0x0c
    5516:	95 85       	ldd	r25, Z+13	; 0x0d
    5518:	99 23       	and	r25, r25
    551a:	64 f0       	brlt	.+24     	; 0x5534 <vTaskPriorityInherit+0x44>
    551c:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5520:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5524:	56 96       	adiw	r26, 0x16	; 22
    5526:	3c 91       	ld	r19, X
    5528:	86 e0       	ldi	r24, 0x06	; 6
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	83 1b       	sub	r24, r19
    552e:	91 09       	sbc	r25, r1
    5530:	95 87       	std	Z+13, r25	; 0x0d
    5532:	84 87       	std	Z+12, r24	; 0x0c
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	c9 01       	movw	r24, r18
    5538:	88 0f       	add	r24, r24
    553a:	99 1f       	adc	r25, r25
    553c:	88 0f       	add	r24, r24
    553e:	99 1f       	adc	r25, r25
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	28 0f       	add	r18, r24
    5546:	39 1f       	adc	r19, r25
    5548:	21 52       	subi	r18, 0x21	; 33
    554a:	35 4e       	sbci	r19, 0xE5	; 229
    554c:	82 85       	ldd	r24, Z+10	; 0x0a
    554e:	93 85       	ldd	r25, Z+11	; 0x0b
    5550:	82 17       	cp	r24, r18
    5552:	93 07       	cpc	r25, r19
    5554:	19 f5       	brne	.+70     	; 0x559c <vTaskPriorityInherit+0xac>
    5556:	8f 01       	movw	r16, r30
    5558:	ef 01       	movw	r28, r30
    555a:	22 96       	adiw	r28, 0x02	; 2
    555c:	ce 01       	movw	r24, r28
    555e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5562:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5566:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    556a:	86 89       	ldd	r24, Z+22	; 0x16
    556c:	f8 01       	movw	r30, r16
    556e:	86 8b       	std	Z+22, r24	; 0x16
    5570:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    5574:	98 17       	cp	r25, r24
    5576:	10 f4       	brcc	.+4      	; 0x557c <vTaskPriorityInherit+0x8c>
    5578:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	9c 01       	movw	r18, r24
    5580:	22 0f       	add	r18, r18
    5582:	33 1f       	adc	r19, r19
    5584:	22 0f       	add	r18, r18
    5586:	33 1f       	adc	r19, r19
    5588:	22 0f       	add	r18, r18
    558a:	33 1f       	adc	r19, r19
    558c:	82 0f       	add	r24, r18
    558e:	93 1f       	adc	r25, r19
    5590:	be 01       	movw	r22, r28
    5592:	81 52       	subi	r24, 0x21	; 33
    5594:	95 4e       	sbci	r25, 0xE5	; 229
    5596:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    559a:	07 c0       	rjmp	.+14     	; 0x55aa <vTaskPriorityInherit+0xba>
    559c:	a0 91 15 1b 	lds	r26, 0x1B15	; 0x801b15 <pxCurrentTCB>
    55a0:	b0 91 16 1b 	lds	r27, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    55a4:	56 96       	adiw	r26, 0x16	; 22
    55a6:	8c 91       	ld	r24, X
    55a8:	86 8b       	std	Z+22, r24	; 0x16
    55aa:	df 91       	pop	r29
    55ac:	cf 91       	pop	r28
    55ae:	1f 91       	pop	r17
    55b0:	0f 91       	pop	r16
    55b2:	08 95       	ret

000055b4 <xTaskPriorityDisinherit>:
    55b4:	0f 93       	push	r16
    55b6:	1f 93       	push	r17
    55b8:	cf 93       	push	r28
    55ba:	df 93       	push	r29
    55bc:	fc 01       	movw	r30, r24
    55be:	89 2b       	or	r24, r25
    55c0:	79 f1       	breq	.+94     	; 0x5620 <xTaskPriorityDisinherit+0x6c>
    55c2:	82 a1       	ldd	r24, Z+34	; 0x22
    55c4:	81 50       	subi	r24, 0x01	; 1
    55c6:	82 a3       	std	Z+34, r24	; 0x22
    55c8:	26 89       	ldd	r18, Z+22	; 0x16
    55ca:	91 a1       	ldd	r25, Z+33	; 0x21
    55cc:	29 17       	cp	r18, r25
    55ce:	51 f1       	breq	.+84     	; 0x5624 <xTaskPriorityDisinherit+0x70>
    55d0:	81 11       	cpse	r24, r1
    55d2:	2a c0       	rjmp	.+84     	; 0x5628 <xTaskPriorityDisinherit+0x74>
    55d4:	ef 01       	movw	r28, r30
    55d6:	8f 01       	movw	r16, r30
    55d8:	0e 5f       	subi	r16, 0xFE	; 254
    55da:	1f 4f       	sbci	r17, 0xFF	; 255
    55dc:	c8 01       	movw	r24, r16
    55de:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    55e2:	89 a1       	ldd	r24, Y+33	; 0x21
    55e4:	8e 8b       	std	Y+22, r24	; 0x16
    55e6:	26 e0       	ldi	r18, 0x06	; 6
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	28 1b       	sub	r18, r24
    55ec:	31 09       	sbc	r19, r1
    55ee:	3d 87       	std	Y+13, r19	; 0x0d
    55f0:	2c 87       	std	Y+12, r18	; 0x0c
    55f2:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    55f6:	98 17       	cp	r25, r24
    55f8:	10 f4       	brcc	.+4      	; 0x55fe <xTaskPriorityDisinherit+0x4a>
    55fa:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	9c 01       	movw	r18, r24
    5602:	22 0f       	add	r18, r18
    5604:	33 1f       	adc	r19, r19
    5606:	22 0f       	add	r18, r18
    5608:	33 1f       	adc	r19, r19
    560a:	22 0f       	add	r18, r18
    560c:	33 1f       	adc	r19, r19
    560e:	82 0f       	add	r24, r18
    5610:	93 1f       	adc	r25, r19
    5612:	b8 01       	movw	r22, r16
    5614:	81 52       	subi	r24, 0x21	; 33
    5616:	95 4e       	sbci	r25, 0xE5	; 229
    5618:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	05 c0       	rjmp	.+10     	; 0x562a <xTaskPriorityDisinherit+0x76>
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	03 c0       	rjmp	.+6      	; 0x562a <xTaskPriorityDisinherit+0x76>
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	01 c0       	rjmp	.+2      	; 0x562a <xTaskPriorityDisinherit+0x76>
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	df 91       	pop	r29
    562c:	cf 91       	pop	r28
    562e:	1f 91       	pop	r17
    5630:	0f 91       	pop	r16
    5632:	08 95       	ret

00005634 <pvTaskIncrementMutexHeldCount>:
    5634:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5638:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    563c:	89 2b       	or	r24, r25
    563e:	39 f0       	breq	.+14     	; 0x564e <pvTaskIncrementMutexHeldCount+0x1a>
    5640:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5644:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5648:	82 a1       	ldd	r24, Z+34	; 0x22
    564a:	8f 5f       	subi	r24, 0xFF	; 255
    564c:	82 a3       	std	Z+34, r24	; 0x22
    564e:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5652:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5656:	08 95       	ret

00005658 <ulTaskNotifyTake>:
    5658:	0f 93       	push	r16
    565a:	1f 93       	push	r17
    565c:	cf 93       	push	r28
    565e:	df 93       	push	r29
    5660:	18 2f       	mov	r17, r24
    5662:	eb 01       	movw	r28, r22
    5664:	0f b6       	in	r0, 0x3f	; 63
    5666:	f8 94       	cli
    5668:	0f 92       	push	r0
    566a:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    566e:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5672:	83 a1       	ldd	r24, Z+35	; 0x23
    5674:	94 a1       	ldd	r25, Z+36	; 0x24
    5676:	a5 a1       	ldd	r26, Z+37	; 0x25
    5678:	b6 a1       	ldd	r27, Z+38	; 0x26
    567a:	89 2b       	or	r24, r25
    567c:	8a 2b       	or	r24, r26
    567e:	8b 2b       	or	r24, r27
    5680:	09 f0       	breq	.+2      	; 0x5684 <ulTaskNotifyTake+0x2c>
    5682:	58 c0       	rjmp	.+176    	; 0x5734 <ulTaskNotifyTake+0xdc>
    5684:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5688:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    568c:	81 e0       	ldi	r24, 0x01	; 1
    568e:	87 a3       	std	Z+39, r24	; 0x27
    5690:	20 97       	sbiw	r28, 0x00	; 0
    5692:	09 f4       	brne	.+2      	; 0x5696 <ulTaskNotifyTake+0x3e>
    5694:	4f c0       	rjmp	.+158    	; 0x5734 <ulTaskNotifyTake+0xdc>
    5696:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    569a:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    569e:	02 96       	adiw	r24, 0x02	; 2
    56a0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    56a4:	cf 3f       	cpi	r28, 0xFF	; 255
    56a6:	8f ef       	ldi	r24, 0xFF	; 255
    56a8:	d8 07       	cpc	r29, r24
    56aa:	59 f4       	brne	.+22     	; 0x56c2 <ulTaskNotifyTake+0x6a>
    56ac:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    56b0:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    56b4:	6e 5f       	subi	r22, 0xFE	; 254
    56b6:	7f 4f       	sbci	r23, 0xFF	; 255
    56b8:	87 eb       	ldi	r24, 0xB7	; 183
    56ba:	9a e1       	ldi	r25, 0x1A	; 26
    56bc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    56c0:	37 c0       	rjmp	.+110    	; 0x5730 <ulTaskNotifyTake+0xd8>
    56c2:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    56c6:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    56ca:	c8 0f       	add	r28, r24
    56cc:	d9 1f       	adc	r29, r25
    56ce:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    56d2:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    56d6:	d3 83       	std	Z+3, r29	; 0x03
    56d8:	c2 83       	std	Z+2, r28	; 0x02
    56da:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    56de:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    56e2:	c8 17       	cp	r28, r24
    56e4:	d9 07       	cpc	r29, r25
    56e6:	68 f4       	brcc	.+26     	; 0x5702 <ulTaskNotifyTake+0xaa>
    56e8:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    56ec:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    56f0:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    56f4:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    56f8:	6e 5f       	subi	r22, 0xFE	; 254
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5700:	17 c0       	rjmp	.+46     	; 0x5730 <ulTaskNotifyTake+0xd8>
    5702:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5706:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    570a:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    570e:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    5712:	6e 5f       	subi	r22, 0xFE	; 254
    5714:	7f 4f       	sbci	r23, 0xFF	; 255
    5716:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    571a:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    571e:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    5722:	c8 17       	cp	r28, r24
    5724:	d9 07       	cpc	r29, r25
    5726:	20 f4       	brcc	.+8      	; 0x5730 <ulTaskNotifyTake+0xd8>
    5728:	d0 93 ad 1a 	sts	0x1AAD, r29	; 0x801aad <xNextTaskUnblockTime+0x1>
    572c:	c0 93 ac 1a 	sts	0x1AAC, r28	; 0x801aac <xNextTaskUnblockTime>
    5730:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    5734:	0f 90       	pop	r0
    5736:	0f be       	out	0x3f, r0	; 63
    5738:	0f b6       	in	r0, 0x3f	; 63
    573a:	f8 94       	cli
    573c:	0f 92       	push	r0
    573e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5742:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5746:	63 a1       	ldd	r22, Z+35	; 0x23
    5748:	74 a1       	ldd	r23, Z+36	; 0x24
    574a:	85 a1       	ldd	r24, Z+37	; 0x25
    574c:	96 a1       	ldd	r25, Z+38	; 0x26
    574e:	61 15       	cp	r22, r1
    5750:	71 05       	cpc	r23, r1
    5752:	81 05       	cpc	r24, r1
    5754:	91 05       	cpc	r25, r1
    5756:	d9 f0       	breq	.+54     	; 0x578e <ulTaskNotifyTake+0x136>
    5758:	11 23       	and	r17, r17
    575a:	49 f0       	breq	.+18     	; 0x576e <ulTaskNotifyTake+0x116>
    575c:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5760:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5764:	13 a2       	std	Z+35, r1	; 0x23
    5766:	14 a2       	std	Z+36, r1	; 0x24
    5768:	15 a2       	std	Z+37, r1	; 0x25
    576a:	16 a2       	std	Z+38, r1	; 0x26
    576c:	10 c0       	rjmp	.+32     	; 0x578e <ulTaskNotifyTake+0x136>
    576e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5772:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5776:	03 a1       	ldd	r16, Z+35	; 0x23
    5778:	14 a1       	ldd	r17, Z+36	; 0x24
    577a:	25 a1       	ldd	r18, Z+37	; 0x25
    577c:	36 a1       	ldd	r19, Z+38	; 0x26
    577e:	01 50       	subi	r16, 0x01	; 1
    5780:	11 09       	sbc	r17, r1
    5782:	21 09       	sbc	r18, r1
    5784:	31 09       	sbc	r19, r1
    5786:	03 a3       	std	Z+35, r16	; 0x23
    5788:	14 a3       	std	Z+36, r17	; 0x24
    578a:	25 a3       	std	Z+37, r18	; 0x25
    578c:	36 a3       	std	Z+38, r19	; 0x26
    578e:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5792:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5796:	17 a2       	std	Z+39, r1	; 0x27
    5798:	0f 90       	pop	r0
    579a:	0f be       	out	0x3f, r0	; 63
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	0f 91       	pop	r16
    57a4:	08 95       	ret

000057a6 <xTaskNotifyWait>:
    57a6:	4f 92       	push	r4
    57a8:	5f 92       	push	r5
    57aa:	6f 92       	push	r6
    57ac:	7f 92       	push	r7
    57ae:	8f 92       	push	r8
    57b0:	9f 92       	push	r9
    57b2:	af 92       	push	r10
    57b4:	bf 92       	push	r11
    57b6:	ef 92       	push	r14
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	49 01       	movw	r8, r18
    57c0:	5a 01       	movw	r10, r20
    57c2:	0f b6       	in	r0, 0x3f	; 63
    57c4:	f8 94       	cli
    57c6:	0f 92       	push	r0
    57c8:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    57cc:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    57d0:	27 a1       	ldd	r18, Z+39	; 0x27
    57d2:	22 30       	cpi	r18, 0x02	; 2
    57d4:	09 f4       	brne	.+2      	; 0x57d8 <xTaskNotifyWait+0x32>
    57d6:	6f c0       	rjmp	.+222    	; 0x58b6 <xTaskNotifyWait+0x110>
    57d8:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    57dc:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    57e0:	43 a0       	ldd	r4, Z+35	; 0x23
    57e2:	54 a0       	ldd	r5, Z+36	; 0x24
    57e4:	65 a0       	ldd	r6, Z+37	; 0x25
    57e6:	76 a0       	ldd	r7, Z+38	; 0x26
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	80 95       	com	r24
    57ee:	90 95       	com	r25
    57f0:	a0 95       	com	r26
    57f2:	b0 95       	com	r27
    57f4:	84 21       	and	r24, r4
    57f6:	95 21       	and	r25, r5
    57f8:	a6 21       	and	r26, r6
    57fa:	b7 21       	and	r27, r7
    57fc:	83 a3       	std	Z+35, r24	; 0x23
    57fe:	94 a3       	std	Z+36, r25	; 0x24
    5800:	a5 a3       	std	Z+37, r26	; 0x25
    5802:	b6 a3       	std	Z+38, r27	; 0x26
    5804:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5808:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	87 a3       	std	Z+39, r24	; 0x27
    5810:	e1 14       	cp	r14, r1
    5812:	f1 04       	cpc	r15, r1
    5814:	09 f4       	brne	.+2      	; 0x5818 <xTaskNotifyWait+0x72>
    5816:	4f c0       	rjmp	.+158    	; 0x58b6 <xTaskNotifyWait+0x110>
    5818:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    581c:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5820:	02 96       	adiw	r24, 0x02	; 2
    5822:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5826:	8f ef       	ldi	r24, 0xFF	; 255
    5828:	e8 16       	cp	r14, r24
    582a:	f8 06       	cpc	r15, r24
    582c:	59 f4       	brne	.+22     	; 0x5844 <xTaskNotifyWait+0x9e>
    582e:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5832:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5836:	6e 5f       	subi	r22, 0xFE	; 254
    5838:	7f 4f       	sbci	r23, 0xFF	; 255
    583a:	87 eb       	ldi	r24, 0xB7	; 183
    583c:	9a e1       	ldi	r25, 0x1A	; 26
    583e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5842:	37 c0       	rjmp	.+110    	; 0x58b2 <xTaskNotifyWait+0x10c>
    5844:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    5848:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    584c:	e8 0e       	add	r14, r24
    584e:	f9 1e       	adc	r15, r25
    5850:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5854:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5858:	f3 82       	std	Z+3, r15	; 0x03
    585a:	e2 82       	std	Z+2, r14	; 0x02
    585c:	80 91 b4 1a 	lds	r24, 0x1AB4	; 0x801ab4 <xTickCount>
    5860:	90 91 b5 1a 	lds	r25, 0x1AB5	; 0x801ab5 <xTickCount+0x1>
    5864:	e8 16       	cp	r14, r24
    5866:	f9 06       	cpc	r15, r25
    5868:	68 f4       	brcc	.+26     	; 0x5884 <xTaskNotifyWait+0xde>
    586a:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    586e:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5872:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxOverflowDelayedTaskList>
    5876:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxOverflowDelayedTaskList+0x1>
    587a:	6e 5f       	subi	r22, 0xFE	; 254
    587c:	7f 4f       	sbci	r23, 0xFF	; 255
    587e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5882:	17 c0       	rjmp	.+46     	; 0x58b2 <xTaskNotifyWait+0x10c>
    5884:	60 91 15 1b 	lds	r22, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5888:	70 91 16 1b 	lds	r23, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    588c:	80 91 cb 1a 	lds	r24, 0x1ACB	; 0x801acb <pxDelayedTaskList>
    5890:	90 91 cc 1a 	lds	r25, 0x1ACC	; 0x801acc <pxDelayedTaskList+0x1>
    5894:	6e 5f       	subi	r22, 0xFE	; 254
    5896:	7f 4f       	sbci	r23, 0xFF	; 255
    5898:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    589c:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xNextTaskUnblockTime>
    58a0:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <xNextTaskUnblockTime+0x1>
    58a4:	e8 16       	cp	r14, r24
    58a6:	f9 06       	cpc	r15, r25
    58a8:	20 f4       	brcc	.+8      	; 0x58b2 <xTaskNotifyWait+0x10c>
    58aa:	f0 92 ad 1a 	sts	0x1AAD, r15	; 0x801aad <xNextTaskUnblockTime+0x1>
    58ae:	e0 92 ac 1a 	sts	0x1AAC, r14	; 0x801aac <xNextTaskUnblockTime>
    58b2:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    58b6:	0f 90       	pop	r0
    58b8:	0f be       	out	0x3f, r0	; 63
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	f8 94       	cli
    58be:	0f 92       	push	r0
    58c0:	01 15       	cp	r16, r1
    58c2:	11 05       	cpc	r17, r1
    58c4:	69 f0       	breq	.+26     	; 0x58e0 <xTaskNotifyWait+0x13a>
    58c6:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    58ca:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    58ce:	83 a1       	ldd	r24, Z+35	; 0x23
    58d0:	94 a1       	ldd	r25, Z+36	; 0x24
    58d2:	a5 a1       	ldd	r26, Z+37	; 0x25
    58d4:	b6 a1       	ldd	r27, Z+38	; 0x26
    58d6:	f8 01       	movw	r30, r16
    58d8:	80 83       	st	Z, r24
    58da:	91 83       	std	Z+1, r25	; 0x01
    58dc:	a2 83       	std	Z+2, r26	; 0x02
    58de:	b3 83       	std	Z+3, r27	; 0x03
    58e0:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    58e4:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    58e8:	87 a1       	ldd	r24, Z+39	; 0x27
    58ea:	81 30       	cpi	r24, 0x01	; 1
    58ec:	b1 f0       	breq	.+44     	; 0x591a <xTaskNotifyWait+0x174>
    58ee:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    58f2:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    58f6:	83 a1       	ldd	r24, Z+35	; 0x23
    58f8:	94 a1       	ldd	r25, Z+36	; 0x24
    58fa:	a5 a1       	ldd	r26, Z+37	; 0x25
    58fc:	b6 a1       	ldd	r27, Z+38	; 0x26
    58fe:	80 94       	com	r8
    5900:	90 94       	com	r9
    5902:	a0 94       	com	r10
    5904:	b0 94       	com	r11
    5906:	88 22       	and	r8, r24
    5908:	99 22       	and	r9, r25
    590a:	aa 22       	and	r10, r26
    590c:	bb 22       	and	r11, r27
    590e:	83 a2       	std	Z+35, r8	; 0x23
    5910:	94 a2       	std	Z+36, r9	; 0x24
    5912:	a5 a2       	std	Z+37, r10	; 0x25
    5914:	b6 a2       	std	Z+38, r11	; 0x26
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	01 c0       	rjmp	.+2      	; 0x591c <xTaskNotifyWait+0x176>
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5920:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5924:	17 a2       	std	Z+39, r1	; 0x27
    5926:	0f 90       	pop	r0
    5928:	0f be       	out	0x3f, r0	; 63
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	ff 90       	pop	r15
    5930:	ef 90       	pop	r14
    5932:	bf 90       	pop	r11
    5934:	af 90       	pop	r10
    5936:	9f 90       	pop	r9
    5938:	8f 90       	pop	r8
    593a:	7f 90       	pop	r7
    593c:	6f 90       	pop	r6
    593e:	5f 90       	pop	r5
    5940:	4f 90       	pop	r4
    5942:	08 95       	ret

00005944 <xTaskGenericNotify>:
    5944:	0f 93       	push	r16
    5946:	1f 93       	push	r17
    5948:	cf 93       	push	r28
    594a:	df 93       	push	r29
    594c:	fc 01       	movw	r30, r24
    594e:	0f b6       	in	r0, 0x3f	; 63
    5950:	f8 94       	cli
    5952:	0f 92       	push	r0
    5954:	01 15       	cp	r16, r1
    5956:	11 05       	cpc	r17, r1
    5958:	49 f0       	breq	.+18     	; 0x596c <xTaskGenericNotify+0x28>
    595a:	83 a1       	ldd	r24, Z+35	; 0x23
    595c:	94 a1       	ldd	r25, Z+36	; 0x24
    595e:	a5 a1       	ldd	r26, Z+37	; 0x25
    5960:	b6 a1       	ldd	r27, Z+38	; 0x26
    5962:	e8 01       	movw	r28, r16
    5964:	88 83       	st	Y, r24
    5966:	99 83       	std	Y+1, r25	; 0x01
    5968:	aa 83       	std	Y+2, r26	; 0x02
    596a:	bb 83       	std	Y+3, r27	; 0x03
    596c:	87 a1       	ldd	r24, Z+39	; 0x27
    596e:	92 e0       	ldi	r25, 0x02	; 2
    5970:	97 a3       	std	Z+39, r25	; 0x27
    5972:	22 30       	cpi	r18, 0x02	; 2
    5974:	b1 f0       	breq	.+44     	; 0x59a2 <xTaskGenericNotify+0x5e>
    5976:	18 f4       	brcc	.+6      	; 0x597e <xTaskGenericNotify+0x3a>
    5978:	21 30       	cpi	r18, 0x01	; 1
    597a:	31 f0       	breq	.+12     	; 0x5988 <xTaskGenericNotify+0x44>
    597c:	2a c0       	rjmp	.+84     	; 0x59d2 <xTaskGenericNotify+0x8e>
    597e:	23 30       	cpi	r18, 0x03	; 3
    5980:	e9 f0       	breq	.+58     	; 0x59bc <xTaskGenericNotify+0x78>
    5982:	24 30       	cpi	r18, 0x04	; 4
    5984:	01 f1       	breq	.+64     	; 0x59c6 <xTaskGenericNotify+0x82>
    5986:	25 c0       	rjmp	.+74     	; 0x59d2 <xTaskGenericNotify+0x8e>
    5988:	03 a1       	ldd	r16, Z+35	; 0x23
    598a:	14 a1       	ldd	r17, Z+36	; 0x24
    598c:	25 a1       	ldd	r18, Z+37	; 0x25
    598e:	36 a1       	ldd	r19, Z+38	; 0x26
    5990:	40 2b       	or	r20, r16
    5992:	51 2b       	or	r21, r17
    5994:	62 2b       	or	r22, r18
    5996:	73 2b       	or	r23, r19
    5998:	43 a3       	std	Z+35, r20	; 0x23
    599a:	54 a3       	std	Z+36, r21	; 0x24
    599c:	65 a3       	std	Z+37, r22	; 0x25
    599e:	76 a3       	std	Z+38, r23	; 0x26
    59a0:	18 c0       	rjmp	.+48     	; 0x59d2 <xTaskGenericNotify+0x8e>
    59a2:	43 a1       	ldd	r20, Z+35	; 0x23
    59a4:	54 a1       	ldd	r21, Z+36	; 0x24
    59a6:	65 a1       	ldd	r22, Z+37	; 0x25
    59a8:	76 a1       	ldd	r23, Z+38	; 0x26
    59aa:	4f 5f       	subi	r20, 0xFF	; 255
    59ac:	5f 4f       	sbci	r21, 0xFF	; 255
    59ae:	6f 4f       	sbci	r22, 0xFF	; 255
    59b0:	7f 4f       	sbci	r23, 0xFF	; 255
    59b2:	43 a3       	std	Z+35, r20	; 0x23
    59b4:	54 a3       	std	Z+36, r21	; 0x24
    59b6:	65 a3       	std	Z+37, r22	; 0x25
    59b8:	76 a3       	std	Z+38, r23	; 0x26
    59ba:	0b c0       	rjmp	.+22     	; 0x59d2 <xTaskGenericNotify+0x8e>
    59bc:	43 a3       	std	Z+35, r20	; 0x23
    59be:	54 a3       	std	Z+36, r21	; 0x24
    59c0:	65 a3       	std	Z+37, r22	; 0x25
    59c2:	76 a3       	std	Z+38, r23	; 0x26
    59c4:	06 c0       	rjmp	.+12     	; 0x59d2 <xTaskGenericNotify+0x8e>
    59c6:	82 30       	cpi	r24, 0x02	; 2
    59c8:	79 f1       	breq	.+94     	; 0x5a28 <xTaskGenericNotify+0xe4>
    59ca:	43 a3       	std	Z+35, r20	; 0x23
    59cc:	54 a3       	std	Z+36, r21	; 0x24
    59ce:	65 a3       	std	Z+37, r22	; 0x25
    59d0:	76 a3       	std	Z+38, r23	; 0x26
    59d2:	81 30       	cpi	r24, 0x01	; 1
    59d4:	59 f5       	brne	.+86     	; 0x5a2c <xTaskGenericNotify+0xe8>
    59d6:	ef 01       	movw	r28, r30
    59d8:	8f 01       	movw	r16, r30
    59da:	0e 5f       	subi	r16, 0xFE	; 254
    59dc:	1f 4f       	sbci	r17, 0xFF	; 255
    59de:	c8 01       	movw	r24, r16
    59e0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    59e4:	8e 89       	ldd	r24, Y+22	; 0x16
    59e6:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    59ea:	98 17       	cp	r25, r24
    59ec:	10 f4       	brcc	.+4      	; 0x59f2 <xTaskGenericNotify+0xae>
    59ee:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	9c 01       	movw	r18, r24
    59f6:	22 0f       	add	r18, r18
    59f8:	33 1f       	adc	r19, r19
    59fa:	22 0f       	add	r18, r18
    59fc:	33 1f       	adc	r19, r19
    59fe:	22 0f       	add	r18, r18
    5a00:	33 1f       	adc	r19, r19
    5a02:	82 0f       	add	r24, r18
    5a04:	93 1f       	adc	r25, r19
    5a06:	b8 01       	movw	r22, r16
    5a08:	81 52       	subi	r24, 0x21	; 33
    5a0a:	95 4e       	sbci	r25, 0xE5	; 229
    5a0c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5a10:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5a14:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5a18:	9e 89       	ldd	r25, Y+22	; 0x16
    5a1a:	86 89       	ldd	r24, Z+22	; 0x16
    5a1c:	89 17       	cp	r24, r25
    5a1e:	40 f4       	brcc	.+16     	; 0x5a30 <xTaskGenericNotify+0xec>
    5a20:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <vPortYield>
    5a24:	81 e0       	ldi	r24, 0x01	; 1
    5a26:	05 c0       	rjmp	.+10     	; 0x5a32 <xTaskGenericNotify+0xee>
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	03 c0       	rjmp	.+6      	; 0x5a32 <xTaskGenericNotify+0xee>
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	01 c0       	rjmp	.+2      	; 0x5a32 <xTaskGenericNotify+0xee>
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	0f 90       	pop	r0
    5a34:	0f be       	out	0x3f, r0	; 63
    5a36:	df 91       	pop	r29
    5a38:	cf 91       	pop	r28
    5a3a:	1f 91       	pop	r17
    5a3c:	0f 91       	pop	r16
    5a3e:	08 95       	ret

00005a40 <xTaskGenericNotifyFromISR>:
    5a40:	ef 92       	push	r14
    5a42:	ff 92       	push	r15
    5a44:	0f 93       	push	r16
    5a46:	1f 93       	push	r17
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	fc 01       	movw	r30, r24
    5a4e:	01 15       	cp	r16, r1
    5a50:	11 05       	cpc	r17, r1
    5a52:	49 f0       	breq	.+18     	; 0x5a66 <xTaskGenericNotifyFromISR+0x26>
    5a54:	83 a1       	ldd	r24, Z+35	; 0x23
    5a56:	94 a1       	ldd	r25, Z+36	; 0x24
    5a58:	a5 a1       	ldd	r26, Z+37	; 0x25
    5a5a:	b6 a1       	ldd	r27, Z+38	; 0x26
    5a5c:	e8 01       	movw	r28, r16
    5a5e:	88 83       	st	Y, r24
    5a60:	99 83       	std	Y+1, r25	; 0x01
    5a62:	aa 83       	std	Y+2, r26	; 0x02
    5a64:	bb 83       	std	Y+3, r27	; 0x03
    5a66:	87 a1       	ldd	r24, Z+39	; 0x27
    5a68:	92 e0       	ldi	r25, 0x02	; 2
    5a6a:	97 a3       	std	Z+39, r25	; 0x27
    5a6c:	22 30       	cpi	r18, 0x02	; 2
    5a6e:	b1 f0       	breq	.+44     	; 0x5a9c <xTaskGenericNotifyFromISR+0x5c>
    5a70:	18 f4       	brcc	.+6      	; 0x5a78 <xTaskGenericNotifyFromISR+0x38>
    5a72:	21 30       	cpi	r18, 0x01	; 1
    5a74:	31 f0       	breq	.+12     	; 0x5a82 <xTaskGenericNotifyFromISR+0x42>
    5a76:	2a c0       	rjmp	.+84     	; 0x5acc <xTaskGenericNotifyFromISR+0x8c>
    5a78:	23 30       	cpi	r18, 0x03	; 3
    5a7a:	e9 f0       	breq	.+58     	; 0x5ab6 <xTaskGenericNotifyFromISR+0x76>
    5a7c:	24 30       	cpi	r18, 0x04	; 4
    5a7e:	01 f1       	breq	.+64     	; 0x5ac0 <xTaskGenericNotifyFromISR+0x80>
    5a80:	25 c0       	rjmp	.+74     	; 0x5acc <xTaskGenericNotifyFromISR+0x8c>
    5a82:	03 a1       	ldd	r16, Z+35	; 0x23
    5a84:	14 a1       	ldd	r17, Z+36	; 0x24
    5a86:	25 a1       	ldd	r18, Z+37	; 0x25
    5a88:	36 a1       	ldd	r19, Z+38	; 0x26
    5a8a:	40 2b       	or	r20, r16
    5a8c:	51 2b       	or	r21, r17
    5a8e:	62 2b       	or	r22, r18
    5a90:	73 2b       	or	r23, r19
    5a92:	43 a3       	std	Z+35, r20	; 0x23
    5a94:	54 a3       	std	Z+36, r21	; 0x24
    5a96:	65 a3       	std	Z+37, r22	; 0x25
    5a98:	76 a3       	std	Z+38, r23	; 0x26
    5a9a:	18 c0       	rjmp	.+48     	; 0x5acc <xTaskGenericNotifyFromISR+0x8c>
    5a9c:	43 a1       	ldd	r20, Z+35	; 0x23
    5a9e:	54 a1       	ldd	r21, Z+36	; 0x24
    5aa0:	65 a1       	ldd	r22, Z+37	; 0x25
    5aa2:	76 a1       	ldd	r23, Z+38	; 0x26
    5aa4:	4f 5f       	subi	r20, 0xFF	; 255
    5aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa8:	6f 4f       	sbci	r22, 0xFF	; 255
    5aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    5aac:	43 a3       	std	Z+35, r20	; 0x23
    5aae:	54 a3       	std	Z+36, r21	; 0x24
    5ab0:	65 a3       	std	Z+37, r22	; 0x25
    5ab2:	76 a3       	std	Z+38, r23	; 0x26
    5ab4:	0b c0       	rjmp	.+22     	; 0x5acc <xTaskGenericNotifyFromISR+0x8c>
    5ab6:	43 a3       	std	Z+35, r20	; 0x23
    5ab8:	54 a3       	std	Z+36, r21	; 0x24
    5aba:	65 a3       	std	Z+37, r22	; 0x25
    5abc:	76 a3       	std	Z+38, r23	; 0x26
    5abe:	06 c0       	rjmp	.+12     	; 0x5acc <xTaskGenericNotifyFromISR+0x8c>
    5ac0:	82 30       	cpi	r24, 0x02	; 2
    5ac2:	f1 f1       	breq	.+124    	; 0x5b40 <xTaskGenericNotifyFromISR+0x100>
    5ac4:	43 a3       	std	Z+35, r20	; 0x23
    5ac6:	54 a3       	std	Z+36, r21	; 0x24
    5ac8:	65 a3       	std	Z+37, r22	; 0x25
    5aca:	76 a3       	std	Z+38, r23	; 0x26
    5acc:	81 30       	cpi	r24, 0x01	; 1
    5ace:	d1 f5       	brne	.+116    	; 0x5b44 <xTaskGenericNotifyFromISR+0x104>
    5ad0:	ef 01       	movw	r28, r30
    5ad2:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxSchedulerSuspended>
    5ad6:	81 11       	cpse	r24, r1
    5ad8:	1d c0       	rjmp	.+58     	; 0x5b14 <xTaskGenericNotifyFromISR+0xd4>
    5ada:	8f 01       	movw	r16, r30
    5adc:	0e 5f       	subi	r16, 0xFE	; 254
    5ade:	1f 4f       	sbci	r17, 0xFF	; 255
    5ae0:	c8 01       	movw	r24, r16
    5ae2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5ae6:	8e 89       	ldd	r24, Y+22	; 0x16
    5ae8:	90 91 b3 1a 	lds	r25, 0x1AB3	; 0x801ab3 <uxTopReadyPriority>
    5aec:	98 17       	cp	r25, r24
    5aee:	10 f4       	brcc	.+4      	; 0x5af4 <xTaskGenericNotifyFromISR+0xb4>
    5af0:	80 93 b3 1a 	sts	0x1AB3, r24	; 0x801ab3 <uxTopReadyPriority>
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	9c 01       	movw	r18, r24
    5af8:	22 0f       	add	r18, r18
    5afa:	33 1f       	adc	r19, r19
    5afc:	22 0f       	add	r18, r18
    5afe:	33 1f       	adc	r19, r19
    5b00:	22 0f       	add	r18, r18
    5b02:	33 1f       	adc	r19, r19
    5b04:	82 0f       	add	r24, r18
    5b06:	93 1f       	adc	r25, r19
    5b08:	b8 01       	movw	r22, r16
    5b0a:	81 52       	subi	r24, 0x21	; 33
    5b0c:	95 4e       	sbci	r25, 0xE5	; 229
    5b0e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b12:	07 c0       	rjmp	.+14     	; 0x5b22 <xTaskGenericNotifyFromISR+0xe2>
    5b14:	bf 01       	movw	r22, r30
    5b16:	64 5f       	subi	r22, 0xF4	; 244
    5b18:	7f 4f       	sbci	r23, 0xFF	; 255
    5b1a:	80 ec       	ldi	r24, 0xC0	; 192
    5b1c:	9a e1       	ldi	r25, 0x1A	; 26
    5b1e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b22:	e0 91 15 1b 	lds	r30, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5b26:	f0 91 16 1b 	lds	r31, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>
    5b2a:	9e 89       	ldd	r25, Y+22	; 0x16
    5b2c:	86 89       	ldd	r24, Z+22	; 0x16
    5b2e:	89 17       	cp	r24, r25
    5b30:	58 f4       	brcc	.+22     	; 0x5b48 <xTaskGenericNotifyFromISR+0x108>
    5b32:	e1 14       	cp	r14, r1
    5b34:	f1 04       	cpc	r15, r1
    5b36:	51 f0       	breq	.+20     	; 0x5b4c <xTaskGenericNotifyFromISR+0x10c>
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	f7 01       	movw	r30, r14
    5b3c:	80 83       	st	Z, r24
    5b3e:	07 c0       	rjmp	.+14     	; 0x5b4e <xTaskGenericNotifyFromISR+0x10e>
    5b40:	80 e0       	ldi	r24, 0x00	; 0
    5b42:	05 c0       	rjmp	.+10     	; 0x5b4e <xTaskGenericNotifyFromISR+0x10e>
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	03 c0       	rjmp	.+6      	; 0x5b4e <xTaskGenericNotifyFromISR+0x10e>
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	01 c0       	rjmp	.+2      	; 0x5b4e <xTaskGenericNotifyFromISR+0x10e>
    5b4c:	81 e0       	ldi	r24, 0x01	; 1
    5b4e:	df 91       	pop	r29
    5b50:	cf 91       	pop	r28
    5b52:	1f 91       	pop	r17
    5b54:	0f 91       	pop	r16
    5b56:	ff 90       	pop	r15
    5b58:	ef 90       	pop	r14
    5b5a:	08 95       	ret

00005b5c <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5b5c:	00 97       	sbiw	r24, 0x00	; 0
    5b5e:	21 f4       	brne	.+8      	; 0x5b68 <xTaskNotifyStateClear+0xc>
    5b60:	80 91 15 1b 	lds	r24, 0x1B15	; 0x801b15 <pxCurrentTCB>
    5b64:	90 91 16 1b 	lds	r25, 0x1B16	; 0x801b16 <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5b68:	0f b6       	in	r0, 0x3f	; 63
    5b6a:	f8 94       	cli
    5b6c:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5b6e:	fc 01       	movw	r30, r24
    5b70:	27 a1       	ldd	r18, Z+39	; 0x27
    5b72:	22 30       	cpi	r18, 0x02	; 2
    5b74:	19 f4       	brne	.+6      	; 0x5b7c <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5b76:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5b78:	81 e0       	ldi	r24, 0x01	; 1
    5b7a:	01 c0       	rjmp	.+2      	; 0x5b7e <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5b7e:	0f 90       	pop	r0
    5b80:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5b82:	08 95       	ret

00005b84 <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	00 d0       	rcall	.+0      	; 0x5b8a <vFrameReaderTask+0x6>
    5b8a:	1f 92       	push	r1
    5b8c:	cd b7       	in	r28, 0x3d	; 61
    5b8e:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5b90:	aa dc       	rcall	.-1708   	; 0x54e6 <xTaskGetCurrentTaskHandle>
    5b92:	90 93 7e 1b 	sts	0x1B7E, r25	; 0x801b7e <frame_receiver+0x1>
    5b96:	80 93 7d 1b 	sts	0x1B7D, r24	; 0x801b7d <frame_receiver>
	uint32_t notification_value = 0;
    5b9a:	19 82       	std	Y+1, r1	; 0x01
    5b9c:	1a 82       	std	Y+2, r1	; 0x02
    5b9e:	1b 82       	std	Y+3, r1	; 0x03
    5ba0:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5ba2:	ee 24       	eor	r14, r14
    5ba4:	ea 94       	dec	r14
    5ba6:	fe 2c       	mov	r15, r14
    5ba8:	8e 01       	movw	r16, r28
    5baa:	0f 5f       	subi	r16, 0xFF	; 255
    5bac:	1f 4f       	sbci	r17, 0xFF	; 255
    5bae:	2f ef       	ldi	r18, 0xFF	; 255
    5bb0:	3f ef       	ldi	r19, 0xFF	; 255
    5bb2:	a9 01       	movw	r20, r18
    5bb4:	6f ef       	ldi	r22, 0xFF	; 255
    5bb6:	7f ef       	ldi	r23, 0xFF	; 255
    5bb8:	cb 01       	movw	r24, r22
    5bba:	f5 dd       	rcall	.-1046   	; 0x57a6 <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5bbc:	e0 91 e2 1b 	lds	r30, 0x1BE2	; 0x801be2 <receive_callback>
    5bc0:	f0 91 e3 1b 	lds	r31, 0x1BE3	; 0x801be3 <receive_callback+0x1>
    5bc4:	30 97       	sbiw	r30, 0x00	; 0
    5bc6:	69 f3       	breq	.-38     	; 0x5ba2 <vFrameReaderTask+0x1e>
    5bc8:	69 81       	ldd	r22, Y+1	; 0x01
    5bca:	7a 81       	ldd	r23, Y+2	; 0x02
    5bcc:	84 ee       	ldi	r24, 0xE4	; 228
    5bce:	9b e1       	ldi	r25, 0x1B	; 27
    5bd0:	19 95       	eicall
    5bd2:	e7 cf       	rjmp	.-50     	; 0x5ba2 <vFrameReaderTask+0x1e>

00005bd4 <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	cd b7       	in	r28, 0x3d	; 61
    5bda:	de b7       	in	r29, 0x3e	; 62
    5bdc:	c4 56       	subi	r28, 0x64	; 100
    5bde:	d1 09       	sbc	r29, r1
    5be0:	0f b6       	in	r0, 0x3f	; 63
    5be2:	f8 94       	cli
    5be4:	de bf       	out	0x3e, r29	; 62
    5be6:	0f be       	out	0x3f, r0	; 63
    5be8:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5bea:	00 ed       	ldi	r16, 0xD0	; 208
    5bec:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5bee:	0f 2e       	mov	r0, r31
    5bf0:	f6 ed       	ldi	r31, 0xD6	; 214
    5bf2:	ef 2e       	mov	r14, r31
    5bf4:	f1 2c       	mov	r15, r1
    5bf6:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5bf8:	20 e0       	ldi	r18, 0x00	; 0
    5bfa:	4f ef       	ldi	r20, 0xFF	; 255
    5bfc:	5f ef       	ldi	r21, 0xFF	; 255
    5bfe:	60 e0       	ldi	r22, 0x00	; 0
    5c00:	70 e0       	ldi	r23, 0x00	; 0
    5c02:	80 91 a3 1b 	lds	r24, 0x1BA3	; 0x801ba3 <xUartMutex>
    5c06:	90 91 a4 1b 	lds	r25, 0x1BA4	; 0x801ba4 <xUartMutex+0x1>
    5c0a:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5c0e:	24 e6       	ldi	r18, 0x64	; 100
    5c10:	30 e0       	ldi	r19, 0x00	; 0
    5c12:	40 e0       	ldi	r20, 0x00	; 0
    5c14:	be 01       	movw	r22, r28
    5c16:	6f 5f       	subi	r22, 0xFF	; 255
    5c18:	7f 4f       	sbci	r23, 0xFF	; 255
    5c1a:	88 e4       	ldi	r24, 0x48	; 72
    5c1c:	9c e1       	ldi	r25, 0x1C	; 28
    5c1e:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5c22:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	80 91 a3 1b 	lds	r24, 0x1BA3	; 0x801ba3 <xUartMutex>
    5c2c:	90 91 a4 1b 	lds	r25, 0x1BA4	; 0x801ba4 <xUartMutex+0x1>
    5c30:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
		if(num>0) {
    5c34:	c1 14       	cp	r12, r1
    5c36:	d1 04       	cpc	r13, r1
    5c38:	79 f0       	breq	.+30     	; 0x5c58 <vUartSendTask+0x84>
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	31 96       	adiw	r30, 0x01	; 1
    5c3e:	9f 01       	movw	r18, r30
    5c40:	2c 0d       	add	r18, r12
    5c42:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5c44:	d8 01       	movw	r26, r16
    5c46:	8c 91       	ld	r24, X
    5c48:	85 ff       	sbrs	r24, 5
    5c4a:	fc cf       	rjmp	.-8      	; 0x5c44 <vUartSendTask+0x70>
				UDR2 = data[i];
    5c4c:	81 91       	ld	r24, Z+
    5c4e:	d7 01       	movw	r26, r14
    5c50:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5c52:	2e 17       	cp	r18, r30
    5c54:	3f 07       	cpc	r19, r31
    5c56:	b1 f7       	brne	.-20     	; 0x5c44 <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5c58:	8a e0       	ldi	r24, 0x0A	; 10
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	0e 94 89 24 	call	0x4912	; 0x4912 <vTaskDelay>
	}
    5c60:	cb cf       	rjmp	.-106    	; 0x5bf8 <vUartSendTask+0x24>

00005c62 <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5c62:	af 92       	push	r10
    5c64:	bf 92       	push	r11
    5c66:	cf 92       	push	r12
    5c68:	df 92       	push	r13
    5c6a:	ef 92       	push	r14
    5c6c:	ff 92       	push	r15
    5c6e:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5c70:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5c74:	89 e1       	ldi	r24, 0x19	; 25
    5c76:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
    5c7a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE;
    5c7e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	UCSR0C = (3 << UCSZ00); /* 8-bit data */
    5c82:	86 e0       	ldi	r24, 0x06	; 6
    5c84:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   /* Enable RX and TX */
    5c88:	98 e1       	ldi	r25, 0x18	; 24
    5c8a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5c8e:	90 ee       	ldi	r25, 0xE0	; 224
    5c90:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5c94:	98 e9       	ldi	r25, 0x98	; 152
    5c96:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5c9a:	e2 ed       	ldi	r30, 0xD2	; 210
    5c9c:	f0 e0       	ldi	r31, 0x00	; 0
    5c9e:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5ca0:	80 81       	ld	r24, Z
    5ca2:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5ca4:	84 e6       	ldi	r24, 0x64	; 100
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5cac:	44 e6       	ldi	r20, 0x64	; 100
    5cae:	50 e0       	ldi	r21, 0x00	; 0
    5cb0:	bc 01       	movw	r22, r24
    5cb2:	88 e4       	ldi	r24, 0x48	; 72
    5cb4:	9c e1       	ldi	r25, 0x1C	; 28
    5cb6:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5cba:	a1 2c       	mov	r10, r1
    5cbc:	b1 2c       	mov	r11, r1
    5cbe:	c1 2c       	mov	r12, r1
    5cc0:	d1 2c       	mov	r13, r1
    5cc2:	e1 2c       	mov	r14, r1
    5cc4:	f1 2c       	mov	r15, r1
    5cc6:	04 e0       	ldi	r16, 0x04	; 4
    5cc8:	20 e0       	ldi	r18, 0x00	; 0
    5cca:	30 e0       	ldi	r19, 0x00	; 0
    5ccc:	4c e2       	ldi	r20, 0x2C	; 44
    5cce:	51 e0       	ldi	r21, 0x01	; 1
    5cd0:	62 e7       	ldi	r22, 0x72	; 114
    5cd2:	77 e0       	ldi	r23, 0x07	; 7
    5cd4:	82 ec       	ldi	r24, 0xC2	; 194
    5cd6:	9d e2       	ldi	r25, 0x2D	; 45
    5cd8:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5cdc:	20 e0       	ldi	r18, 0x00	; 0
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	4c e2       	ldi	r20, 0x2C	; 44
    5ce2:	51 e0       	ldi	r21, 0x01	; 1
    5ce4:	6e e7       	ldi	r22, 0x7E	; 126
    5ce6:	77 e0       	ldi	r23, 0x07	; 7
    5ce8:	8a ee       	ldi	r24, 0xEA	; 234
    5cea:	9d e2       	ldi	r25, 0x2D	; 45
    5cec:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	0e 94 b7 18 	call	0x316e	; 0x316e <xQueueCreateMutex>
    5cf6:	90 93 a4 1b 	sts	0x1BA4, r25	; 0x801ba4 <xUartMutex+0x1>
    5cfa:	80 93 a3 1b 	sts	0x1BA3, r24	; 0x801ba3 <xUartMutex>
}
    5cfe:	0f 91       	pop	r16
    5d00:	ff 90       	pop	r15
    5d02:	ef 90       	pop	r14
    5d04:	df 90       	pop	r13
    5d06:	cf 90       	pop	r12
    5d08:	bf 90       	pop	r11
    5d0a:	af 90       	pop	r10
    5d0c:	08 95       	ret

00005d0e <vUSART_send>:

void vUSART_send(uint8_t *data, uint16_t len) {
    5d0e:	0f 93       	push	r16
    5d10:	1f 93       	push	r17
    5d12:	cf 93       	push	r28
    5d14:	df 93       	push	r29
    5d16:	ec 01       	movw	r28, r24
    5d18:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	4f ef       	ldi	r20, 0xFF	; 255
    5d1e:	5f ef       	ldi	r21, 0xFF	; 255
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	80 91 a3 1b 	lds	r24, 0x1BA3	; 0x801ba3 <xUartMutex>
    5d28:	90 91 a4 1b 	lds	r25, 0x1BA4	; 0x801ba4 <xUartMutex+0x1>
    5d2c:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5d30:	a8 01       	movw	r20, r16
    5d32:	be 01       	movw	r22, r28
    5d34:	88 e4       	ldi	r24, 0x48	; 72
    5d36:	9c e1       	ldi	r25, 0x1C	; 28
    5d38:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5d3c:	60 e0       	ldi	r22, 0x00	; 0
    5d3e:	70 e0       	ldi	r23, 0x00	; 0
    5d40:	80 91 a3 1b 	lds	r24, 0x1BA3	; 0x801ba3 <xUartMutex>
    5d44:	90 91 a4 1b 	lds	r25, 0x1BA4	; 0x801ba4 <xUartMutex+0x1>
    5d48:	0e 94 09 1c 	call	0x3812	; 0x3812 <xQueueGive>
}
    5d4c:	df 91       	pop	r29
    5d4e:	cf 91       	pop	r28
    5d50:	1f 91       	pop	r17
    5d52:	0f 91       	pop	r16
    5d54:	08 95       	ret

00005d56 <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    5d56:	90 93 e3 1b 	sts	0x1BE3, r25	; 0x801be3 <receive_callback+0x1>
    5d5a:	80 93 e2 1b 	sts	0x1BE2, r24	; 0x801be2 <receive_callback>
    5d5e:	08 95       	ret

00005d60 <__vector_51>:
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}

ISR(USART2_RX_vect){
    5d60:	1f 92       	push	r1
    5d62:	0f 92       	push	r0
    5d64:	0f b6       	in	r0, 0x3f	; 63
    5d66:	0f 92       	push	r0
    5d68:	11 24       	eor	r1, r1
    5d6a:	0b b6       	in	r0, 0x3b	; 59
    5d6c:	0f 92       	push	r0
    5d6e:	cf 92       	push	r12
    5d70:	df 92       	push	r13
    5d72:	ef 92       	push	r14
    5d74:	ff 92       	push	r15
    5d76:	0f 93       	push	r16
    5d78:	1f 93       	push	r17
    5d7a:	2f 93       	push	r18
    5d7c:	3f 93       	push	r19
    5d7e:	4f 93       	push	r20
    5d80:	5f 93       	push	r21
    5d82:	6f 93       	push	r22
    5d84:	7f 93       	push	r23
    5d86:	8f 93       	push	r24
    5d88:	9f 93       	push	r25
    5d8a:	af 93       	push	r26
    5d8c:	bf 93       	push	r27
    5d8e:	cf 93       	push	r28
    5d90:	df 93       	push	r29
    5d92:	ef 93       	push	r30
    5d94:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    5d96:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <input_index.2064>
    5d9a:	90 91 7c 1b 	lds	r25, 0x1B7C	; 0x801b7c <input_index.2064+0x1>
    5d9e:	ec 01       	movw	r28, r24
    5da0:	21 96       	adiw	r28, 0x01	; 1
    5da2:	d0 93 7c 1b 	sts	0x1B7C, r29	; 0x801b7c <input_index.2064+0x1>
    5da6:	c0 93 7b 1b 	sts	0x1B7B, r28	; 0x801b7b <input_index.2064>
    5daa:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5dae:	fc 01       	movw	r30, r24
    5db0:	e9 5e       	subi	r30, 0xE9	; 233
    5db2:	f4 4e       	sbci	r31, 0xE4	; 228
    5db4:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    5db6:	21 11       	cpse	r18, r1
    5db8:	1d c0       	rjmp	.+58     	; 0x5df4 <__vector_51+0x94>
		if(frame_receiver != NULL) {
    5dba:	c0 90 7d 1b 	lds	r12, 0x1B7D	; 0x801b7d <frame_receiver>
    5dbe:	d0 90 7e 1b 	lds	r13, 0x1B7E	; 0x801b7e <frame_receiver+0x1>
    5dc2:	c1 14       	cp	r12, r1
    5dc4:	d1 04       	cpc	r13, r1
    5dc6:	89 f0       	breq	.+34     	; 0x5dea <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    5dc8:	ae 01       	movw	r20, r28
    5dca:	67 e1       	ldi	r22, 0x17	; 23
    5dcc:	7b e1       	ldi	r23, 0x1B	; 27
    5dce:	84 ee       	ldi	r24, 0xE4	; 228
    5dd0:	9b e1       	ldi	r25, 0x1B	; 27
    5dd2:	0e 94 14 37 	call	0x6e28	; 0x6e28 <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    5dd6:	ae 01       	movw	r20, r28
    5dd8:	60 e0       	ldi	r22, 0x00	; 0
    5dda:	70 e0       	ldi	r23, 0x00	; 0
    5ddc:	e1 2c       	mov	r14, r1
    5dde:	f1 2c       	mov	r15, r1
    5de0:	00 e0       	ldi	r16, 0x00	; 0
    5de2:	10 e0       	ldi	r17, 0x00	; 0
    5de4:	24 e0       	ldi	r18, 0x04	; 4
    5de6:	c6 01       	movw	r24, r12
    5de8:	2b de       	rcall	.-938    	; 0x5a40 <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    5dea:	10 92 7c 1b 	sts	0x1B7C, r1	; 0x801b7c <input_index.2064+0x1>
    5dee:	10 92 7b 1b 	sts	0x1B7B, r1	; 0x801b7b <input_index.2064>
    5df2:	07 c0       	rjmp	.+14     	; 0x5e02 <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    5df4:	c5 36       	cpi	r28, 0x65	; 101
    5df6:	d1 05       	cpc	r29, r1
    5df8:	20 f0       	brcs	.+8      	; 0x5e02 <__vector_51+0xa2>
    5dfa:	10 92 7c 1b 	sts	0x1B7C, r1	; 0x801b7c <input_index.2064+0x1>
    5dfe:	10 92 7b 1b 	sts	0x1B7B, r1	; 0x801b7b <input_index.2064>
    5e02:	ff 91       	pop	r31
    5e04:	ef 91       	pop	r30
    5e06:	df 91       	pop	r29
    5e08:	cf 91       	pop	r28
    5e0a:	bf 91       	pop	r27
    5e0c:	af 91       	pop	r26
    5e0e:	9f 91       	pop	r25
    5e10:	8f 91       	pop	r24
    5e12:	7f 91       	pop	r23
    5e14:	6f 91       	pop	r22
    5e16:	5f 91       	pop	r21
    5e18:	4f 91       	pop	r20
    5e1a:	3f 91       	pop	r19
    5e1c:	2f 91       	pop	r18
    5e1e:	1f 91       	pop	r17
    5e20:	0f 91       	pop	r16
    5e22:	ff 90       	pop	r15
    5e24:	ef 90       	pop	r14
    5e26:	df 90       	pop	r13
    5e28:	cf 90       	pop	r12
    5e2a:	0f 90       	pop	r0
    5e2c:	0b be       	out	0x3b, r0	; 59
    5e2e:	0f 90       	pop	r0
    5e30:	0f be       	out	0x3f, r0	; 63
    5e32:	0f 90       	pop	r0
    5e34:	1f 90       	pop	r1
    5e36:	18 95       	reti

00005e38 <__subsf3>:
    5e38:	50 58       	subi	r21, 0x80	; 128

00005e3a <__addsf3>:
    5e3a:	bb 27       	eor	r27, r27
    5e3c:	aa 27       	eor	r26, r26
    5e3e:	0e d0       	rcall	.+28     	; 0x5e5c <__addsf3x>
    5e40:	27 c2       	rjmp	.+1102   	; 0x6290 <__fp_round>
    5e42:	f0 d1       	rcall	.+992    	; 0x6224 <__fp_pscA>
    5e44:	30 f0       	brcs	.+12     	; 0x5e52 <__addsf3+0x18>
    5e46:	f5 d1       	rcall	.+1002   	; 0x6232 <__fp_pscB>
    5e48:	20 f0       	brcs	.+8      	; 0x5e52 <__addsf3+0x18>
    5e4a:	31 f4       	brne	.+12     	; 0x5e58 <__addsf3+0x1e>
    5e4c:	9f 3f       	cpi	r25, 0xFF	; 255
    5e4e:	11 f4       	brne	.+4      	; 0x5e54 <__addsf3+0x1a>
    5e50:	1e f4       	brtc	.+6      	; 0x5e58 <__addsf3+0x1e>
    5e52:	c0 c1       	rjmp	.+896    	; 0x61d4 <__fp_nan>
    5e54:	0e f4       	brtc	.+2      	; 0x5e58 <__addsf3+0x1e>
    5e56:	e0 95       	com	r30
    5e58:	e7 fb       	bst	r30, 7
    5e5a:	b6 c1       	rjmp	.+876    	; 0x61c8 <__fp_inf>

00005e5c <__addsf3x>:
    5e5c:	e9 2f       	mov	r30, r25
    5e5e:	3a d2       	rcall	.+1140   	; 0x62d4 <__fp_split3>
    5e60:	80 f3       	brcs	.-32     	; 0x5e42 <__addsf3+0x8>
    5e62:	ba 17       	cp	r27, r26
    5e64:	62 07       	cpc	r22, r18
    5e66:	73 07       	cpc	r23, r19
    5e68:	84 07       	cpc	r24, r20
    5e6a:	95 07       	cpc	r25, r21
    5e6c:	18 f0       	brcs	.+6      	; 0x5e74 <__addsf3x+0x18>
    5e6e:	71 f4       	brne	.+28     	; 0x5e8c <__addsf3x+0x30>
    5e70:	9e f5       	brtc	.+102    	; 0x5ed8 <__addsf3x+0x7c>
    5e72:	52 c2       	rjmp	.+1188   	; 0x6318 <__fp_zero>
    5e74:	0e f4       	brtc	.+2      	; 0x5e78 <__addsf3x+0x1c>
    5e76:	e0 95       	com	r30
    5e78:	0b 2e       	mov	r0, r27
    5e7a:	ba 2f       	mov	r27, r26
    5e7c:	a0 2d       	mov	r26, r0
    5e7e:	0b 01       	movw	r0, r22
    5e80:	b9 01       	movw	r22, r18
    5e82:	90 01       	movw	r18, r0
    5e84:	0c 01       	movw	r0, r24
    5e86:	ca 01       	movw	r24, r20
    5e88:	a0 01       	movw	r20, r0
    5e8a:	11 24       	eor	r1, r1
    5e8c:	ff 27       	eor	r31, r31
    5e8e:	59 1b       	sub	r21, r25
    5e90:	99 f0       	breq	.+38     	; 0x5eb8 <__addsf3x+0x5c>
    5e92:	59 3f       	cpi	r21, 0xF9	; 249
    5e94:	50 f4       	brcc	.+20     	; 0x5eaa <__addsf3x+0x4e>
    5e96:	50 3e       	cpi	r21, 0xE0	; 224
    5e98:	68 f1       	brcs	.+90     	; 0x5ef4 <__addsf3x+0x98>
    5e9a:	1a 16       	cp	r1, r26
    5e9c:	f0 40       	sbci	r31, 0x00	; 0
    5e9e:	a2 2f       	mov	r26, r18
    5ea0:	23 2f       	mov	r18, r19
    5ea2:	34 2f       	mov	r19, r20
    5ea4:	44 27       	eor	r20, r20
    5ea6:	58 5f       	subi	r21, 0xF8	; 248
    5ea8:	f3 cf       	rjmp	.-26     	; 0x5e90 <__addsf3x+0x34>
    5eaa:	46 95       	lsr	r20
    5eac:	37 95       	ror	r19
    5eae:	27 95       	ror	r18
    5eb0:	a7 95       	ror	r26
    5eb2:	f0 40       	sbci	r31, 0x00	; 0
    5eb4:	53 95       	inc	r21
    5eb6:	c9 f7       	brne	.-14     	; 0x5eaa <__addsf3x+0x4e>
    5eb8:	7e f4       	brtc	.+30     	; 0x5ed8 <__addsf3x+0x7c>
    5eba:	1f 16       	cp	r1, r31
    5ebc:	ba 0b       	sbc	r27, r26
    5ebe:	62 0b       	sbc	r22, r18
    5ec0:	73 0b       	sbc	r23, r19
    5ec2:	84 0b       	sbc	r24, r20
    5ec4:	ba f0       	brmi	.+46     	; 0x5ef4 <__addsf3x+0x98>
    5ec6:	91 50       	subi	r25, 0x01	; 1
    5ec8:	a1 f0       	breq	.+40     	; 0x5ef2 <__addsf3x+0x96>
    5eca:	ff 0f       	add	r31, r31
    5ecc:	bb 1f       	adc	r27, r27
    5ece:	66 1f       	adc	r22, r22
    5ed0:	77 1f       	adc	r23, r23
    5ed2:	88 1f       	adc	r24, r24
    5ed4:	c2 f7       	brpl	.-16     	; 0x5ec6 <__addsf3x+0x6a>
    5ed6:	0e c0       	rjmp	.+28     	; 0x5ef4 <__addsf3x+0x98>
    5ed8:	ba 0f       	add	r27, r26
    5eda:	62 1f       	adc	r22, r18
    5edc:	73 1f       	adc	r23, r19
    5ede:	84 1f       	adc	r24, r20
    5ee0:	48 f4       	brcc	.+18     	; 0x5ef4 <__addsf3x+0x98>
    5ee2:	87 95       	ror	r24
    5ee4:	77 95       	ror	r23
    5ee6:	67 95       	ror	r22
    5ee8:	b7 95       	ror	r27
    5eea:	f7 95       	ror	r31
    5eec:	9e 3f       	cpi	r25, 0xFE	; 254
    5eee:	08 f0       	brcs	.+2      	; 0x5ef2 <__addsf3x+0x96>
    5ef0:	b3 cf       	rjmp	.-154    	; 0x5e58 <__addsf3+0x1e>
    5ef2:	93 95       	inc	r25
    5ef4:	88 0f       	add	r24, r24
    5ef6:	08 f0       	brcs	.+2      	; 0x5efa <__addsf3x+0x9e>
    5ef8:	99 27       	eor	r25, r25
    5efa:	ee 0f       	add	r30, r30
    5efc:	97 95       	ror	r25
    5efe:	87 95       	ror	r24
    5f00:	08 95       	ret
    5f02:	90 d1       	rcall	.+800    	; 0x6224 <__fp_pscA>
    5f04:	58 f0       	brcs	.+22     	; 0x5f1c <__addsf3x+0xc0>
    5f06:	80 e8       	ldi	r24, 0x80	; 128
    5f08:	91 e0       	ldi	r25, 0x01	; 1
    5f0a:	09 f4       	brne	.+2      	; 0x5f0e <__addsf3x+0xb2>
    5f0c:	9e ef       	ldi	r25, 0xFE	; 254
    5f0e:	91 d1       	rcall	.+802    	; 0x6232 <__fp_pscB>
    5f10:	28 f0       	brcs	.+10     	; 0x5f1c <__addsf3x+0xc0>
    5f12:	40 e8       	ldi	r20, 0x80	; 128
    5f14:	51 e0       	ldi	r21, 0x01	; 1
    5f16:	59 f4       	brne	.+22     	; 0x5f2e <atan2+0xe>
    5f18:	5e ef       	ldi	r21, 0xFE	; 254
    5f1a:	09 c0       	rjmp	.+18     	; 0x5f2e <atan2+0xe>
    5f1c:	5b c1       	rjmp	.+694    	; 0x61d4 <__fp_nan>
    5f1e:	fc c1       	rjmp	.+1016   	; 0x6318 <__fp_zero>

00005f20 <atan2>:
    5f20:	e9 2f       	mov	r30, r25
    5f22:	e0 78       	andi	r30, 0x80	; 128
    5f24:	d7 d1       	rcall	.+942    	; 0x62d4 <__fp_split3>
    5f26:	68 f3       	brcs	.-38     	; 0x5f02 <__addsf3x+0xa6>
    5f28:	09 2e       	mov	r0, r25
    5f2a:	05 2a       	or	r0, r21
    5f2c:	c1 f3       	breq	.-16     	; 0x5f1e <__addsf3x+0xc2>
    5f2e:	26 17       	cp	r18, r22
    5f30:	37 07       	cpc	r19, r23
    5f32:	48 07       	cpc	r20, r24
    5f34:	59 07       	cpc	r21, r25
    5f36:	38 f0       	brcs	.+14     	; 0x5f46 <atan2+0x26>
    5f38:	0e 2e       	mov	r0, r30
    5f3a:	07 f8       	bld	r0, 7
    5f3c:	e0 25       	eor	r30, r0
    5f3e:	69 f0       	breq	.+26     	; 0x5f5a <atan2+0x3a>
    5f40:	e0 25       	eor	r30, r0
    5f42:	e0 64       	ori	r30, 0x40	; 64
    5f44:	0a c0       	rjmp	.+20     	; 0x5f5a <atan2+0x3a>
    5f46:	ef 63       	ori	r30, 0x3F	; 63
    5f48:	07 f8       	bld	r0, 7
    5f4a:	00 94       	com	r0
    5f4c:	07 fa       	bst	r0, 7
    5f4e:	db 01       	movw	r26, r22
    5f50:	b9 01       	movw	r22, r18
    5f52:	9d 01       	movw	r18, r26
    5f54:	dc 01       	movw	r26, r24
    5f56:	ca 01       	movw	r24, r20
    5f58:	ad 01       	movw	r20, r26
    5f5a:	ef 93       	push	r30
    5f5c:	4a d0       	rcall	.+148    	; 0x5ff2 <__divsf3_pse>
    5f5e:	98 d1       	rcall	.+816    	; 0x6290 <__fp_round>
    5f60:	0a d0       	rcall	.+20     	; 0x5f76 <atan>
    5f62:	5f 91       	pop	r21
    5f64:	55 23       	and	r21, r21
    5f66:	31 f0       	breq	.+12     	; 0x5f74 <atan2+0x54>
    5f68:	2b ed       	ldi	r18, 0xDB	; 219
    5f6a:	3f e0       	ldi	r19, 0x0F	; 15
    5f6c:	49 e4       	ldi	r20, 0x49	; 73
    5f6e:	50 fd       	sbrc	r21, 0
    5f70:	49 ec       	ldi	r20, 0xC9	; 201
    5f72:	63 cf       	rjmp	.-314    	; 0x5e3a <__addsf3>
    5f74:	08 95       	ret

00005f76 <atan>:
    5f76:	df 93       	push	r29
    5f78:	dd 27       	eor	r29, r29
    5f7a:	b9 2f       	mov	r27, r25
    5f7c:	bf 77       	andi	r27, 0x7F	; 127
    5f7e:	40 e8       	ldi	r20, 0x80	; 128
    5f80:	5f e3       	ldi	r21, 0x3F	; 63
    5f82:	16 16       	cp	r1, r22
    5f84:	17 06       	cpc	r1, r23
    5f86:	48 07       	cpc	r20, r24
    5f88:	5b 07       	cpc	r21, r27
    5f8a:	10 f4       	brcc	.+4      	; 0x5f90 <atan+0x1a>
    5f8c:	d9 2f       	mov	r29, r25
    5f8e:	cf d1       	rcall	.+926    	; 0x632e <inverse>
    5f90:	9f 93       	push	r25
    5f92:	8f 93       	push	r24
    5f94:	7f 93       	push	r23
    5f96:	6f 93       	push	r22
    5f98:	7c d2       	rcall	.+1272   	; 0x6492 <square>
    5f9a:	e4 ee       	ldi	r30, 0xE4	; 228
    5f9c:	f0 e0       	ldi	r31, 0x00	; 0
    5f9e:	1d d1       	rcall	.+570    	; 0x61da <__fp_powser>
    5fa0:	77 d1       	rcall	.+750    	; 0x6290 <__fp_round>
    5fa2:	2f 91       	pop	r18
    5fa4:	3f 91       	pop	r19
    5fa6:	4f 91       	pop	r20
    5fa8:	5f 91       	pop	r21
    5faa:	d4 d1       	rcall	.+936    	; 0x6354 <__mulsf3x>
    5fac:	dd 23       	and	r29, r29
    5fae:	49 f0       	breq	.+18     	; 0x5fc2 <atan+0x4c>
    5fb0:	90 58       	subi	r25, 0x80	; 128
    5fb2:	a2 ea       	ldi	r26, 0xA2	; 162
    5fb4:	2a ed       	ldi	r18, 0xDA	; 218
    5fb6:	3f e0       	ldi	r19, 0x0F	; 15
    5fb8:	49 ec       	ldi	r20, 0xC9	; 201
    5fba:	5f e3       	ldi	r21, 0x3F	; 63
    5fbc:	d0 78       	andi	r29, 0x80	; 128
    5fbe:	5d 27       	eor	r21, r29
    5fc0:	4d df       	rcall	.-358    	; 0x5e5c <__addsf3x>
    5fc2:	df 91       	pop	r29
    5fc4:	65 c1       	rjmp	.+714    	; 0x6290 <__fp_round>

00005fc6 <__cmpsf2>:
    5fc6:	dc d0       	rcall	.+440    	; 0x6180 <__fp_cmp>
    5fc8:	08 f4       	brcc	.+2      	; 0x5fcc <__cmpsf2+0x6>
    5fca:	81 e0       	ldi	r24, 0x01	; 1
    5fcc:	08 95       	ret

00005fce <cos>:
    5fce:	39 d1       	rcall	.+626    	; 0x6242 <__fp_rempio2>
    5fd0:	e3 95       	inc	r30
    5fd2:	6f c1       	rjmp	.+734    	; 0x62b2 <__fp_sinus>

00005fd4 <__divsf3>:
    5fd4:	0c d0       	rcall	.+24     	; 0x5fee <__divsf3x>
    5fd6:	5c c1       	rjmp	.+696    	; 0x6290 <__fp_round>
    5fd8:	2c d1       	rcall	.+600    	; 0x6232 <__fp_pscB>
    5fda:	40 f0       	brcs	.+16     	; 0x5fec <__divsf3+0x18>
    5fdc:	23 d1       	rcall	.+582    	; 0x6224 <__fp_pscA>
    5fde:	30 f0       	brcs	.+12     	; 0x5fec <__divsf3+0x18>
    5fe0:	21 f4       	brne	.+8      	; 0x5fea <__divsf3+0x16>
    5fe2:	5f 3f       	cpi	r21, 0xFF	; 255
    5fe4:	19 f0       	breq	.+6      	; 0x5fec <__divsf3+0x18>
    5fe6:	f0 c0       	rjmp	.+480    	; 0x61c8 <__fp_inf>
    5fe8:	51 11       	cpse	r21, r1
    5fea:	97 c1       	rjmp	.+814    	; 0x631a <__fp_szero>
    5fec:	f3 c0       	rjmp	.+486    	; 0x61d4 <__fp_nan>

00005fee <__divsf3x>:
    5fee:	72 d1       	rcall	.+740    	; 0x62d4 <__fp_split3>
    5ff0:	98 f3       	brcs	.-26     	; 0x5fd8 <__divsf3+0x4>

00005ff2 <__divsf3_pse>:
    5ff2:	99 23       	and	r25, r25
    5ff4:	c9 f3       	breq	.-14     	; 0x5fe8 <__divsf3+0x14>
    5ff6:	55 23       	and	r21, r21
    5ff8:	b1 f3       	breq	.-20     	; 0x5fe6 <__divsf3+0x12>
    5ffa:	95 1b       	sub	r25, r21
    5ffc:	55 0b       	sbc	r21, r21
    5ffe:	bb 27       	eor	r27, r27
    6000:	aa 27       	eor	r26, r26
    6002:	62 17       	cp	r22, r18
    6004:	73 07       	cpc	r23, r19
    6006:	84 07       	cpc	r24, r20
    6008:	38 f0       	brcs	.+14     	; 0x6018 <__divsf3_pse+0x26>
    600a:	9f 5f       	subi	r25, 0xFF	; 255
    600c:	5f 4f       	sbci	r21, 0xFF	; 255
    600e:	22 0f       	add	r18, r18
    6010:	33 1f       	adc	r19, r19
    6012:	44 1f       	adc	r20, r20
    6014:	aa 1f       	adc	r26, r26
    6016:	a9 f3       	breq	.-22     	; 0x6002 <__divsf3_pse+0x10>
    6018:	33 d0       	rcall	.+102    	; 0x6080 <__divsf3_pse+0x8e>
    601a:	0e 2e       	mov	r0, r30
    601c:	3a f0       	brmi	.+14     	; 0x602c <__divsf3_pse+0x3a>
    601e:	e0 e8       	ldi	r30, 0x80	; 128
    6020:	30 d0       	rcall	.+96     	; 0x6082 <__divsf3_pse+0x90>
    6022:	91 50       	subi	r25, 0x01	; 1
    6024:	50 40       	sbci	r21, 0x00	; 0
    6026:	e6 95       	lsr	r30
    6028:	00 1c       	adc	r0, r0
    602a:	ca f7       	brpl	.-14     	; 0x601e <__divsf3_pse+0x2c>
    602c:	29 d0       	rcall	.+82     	; 0x6080 <__divsf3_pse+0x8e>
    602e:	fe 2f       	mov	r31, r30
    6030:	27 d0       	rcall	.+78     	; 0x6080 <__divsf3_pse+0x8e>
    6032:	66 0f       	add	r22, r22
    6034:	77 1f       	adc	r23, r23
    6036:	88 1f       	adc	r24, r24
    6038:	bb 1f       	adc	r27, r27
    603a:	26 17       	cp	r18, r22
    603c:	37 07       	cpc	r19, r23
    603e:	48 07       	cpc	r20, r24
    6040:	ab 07       	cpc	r26, r27
    6042:	b0 e8       	ldi	r27, 0x80	; 128
    6044:	09 f0       	breq	.+2      	; 0x6048 <__divsf3_pse+0x56>
    6046:	bb 0b       	sbc	r27, r27
    6048:	80 2d       	mov	r24, r0
    604a:	bf 01       	movw	r22, r30
    604c:	ff 27       	eor	r31, r31
    604e:	93 58       	subi	r25, 0x83	; 131
    6050:	5f 4f       	sbci	r21, 0xFF	; 255
    6052:	2a f0       	brmi	.+10     	; 0x605e <__divsf3_pse+0x6c>
    6054:	9e 3f       	cpi	r25, 0xFE	; 254
    6056:	51 05       	cpc	r21, r1
    6058:	68 f0       	brcs	.+26     	; 0x6074 <__divsf3_pse+0x82>
    605a:	b6 c0       	rjmp	.+364    	; 0x61c8 <__fp_inf>
    605c:	5e c1       	rjmp	.+700    	; 0x631a <__fp_szero>
    605e:	5f 3f       	cpi	r21, 0xFF	; 255
    6060:	ec f3       	brlt	.-6      	; 0x605c <__divsf3_pse+0x6a>
    6062:	98 3e       	cpi	r25, 0xE8	; 232
    6064:	dc f3       	brlt	.-10     	; 0x605c <__divsf3_pse+0x6a>
    6066:	86 95       	lsr	r24
    6068:	77 95       	ror	r23
    606a:	67 95       	ror	r22
    606c:	b7 95       	ror	r27
    606e:	f7 95       	ror	r31
    6070:	9f 5f       	subi	r25, 0xFF	; 255
    6072:	c9 f7       	brne	.-14     	; 0x6066 <__divsf3_pse+0x74>
    6074:	88 0f       	add	r24, r24
    6076:	91 1d       	adc	r25, r1
    6078:	96 95       	lsr	r25
    607a:	87 95       	ror	r24
    607c:	97 f9       	bld	r25, 7
    607e:	08 95       	ret
    6080:	e1 e0       	ldi	r30, 0x01	; 1
    6082:	66 0f       	add	r22, r22
    6084:	77 1f       	adc	r23, r23
    6086:	88 1f       	adc	r24, r24
    6088:	bb 1f       	adc	r27, r27
    608a:	62 17       	cp	r22, r18
    608c:	73 07       	cpc	r23, r19
    608e:	84 07       	cpc	r24, r20
    6090:	ba 07       	cpc	r27, r26
    6092:	20 f0       	brcs	.+8      	; 0x609c <__divsf3_pse+0xaa>
    6094:	62 1b       	sub	r22, r18
    6096:	73 0b       	sbc	r23, r19
    6098:	84 0b       	sbc	r24, r20
    609a:	ba 0b       	sbc	r27, r26
    609c:	ee 1f       	adc	r30, r30
    609e:	88 f7       	brcc	.-30     	; 0x6082 <__divsf3_pse+0x90>
    60a0:	e0 95       	com	r30
    60a2:	08 95       	ret

000060a4 <__fixsfsi>:
    60a4:	04 d0       	rcall	.+8      	; 0x60ae <__fixunssfsi>
    60a6:	68 94       	set
    60a8:	b1 11       	cpse	r27, r1
    60aa:	37 c1       	rjmp	.+622    	; 0x631a <__fp_szero>
    60ac:	08 95       	ret

000060ae <__fixunssfsi>:
    60ae:	1a d1       	rcall	.+564    	; 0x62e4 <__fp_splitA>
    60b0:	88 f0       	brcs	.+34     	; 0x60d4 <__fixunssfsi+0x26>
    60b2:	9f 57       	subi	r25, 0x7F	; 127
    60b4:	90 f0       	brcs	.+36     	; 0x60da <__fixunssfsi+0x2c>
    60b6:	b9 2f       	mov	r27, r25
    60b8:	99 27       	eor	r25, r25
    60ba:	b7 51       	subi	r27, 0x17	; 23
    60bc:	a0 f0       	brcs	.+40     	; 0x60e6 <__fixunssfsi+0x38>
    60be:	d1 f0       	breq	.+52     	; 0x60f4 <__fixunssfsi+0x46>
    60c0:	66 0f       	add	r22, r22
    60c2:	77 1f       	adc	r23, r23
    60c4:	88 1f       	adc	r24, r24
    60c6:	99 1f       	adc	r25, r25
    60c8:	1a f0       	brmi	.+6      	; 0x60d0 <__fixunssfsi+0x22>
    60ca:	ba 95       	dec	r27
    60cc:	c9 f7       	brne	.-14     	; 0x60c0 <__fixunssfsi+0x12>
    60ce:	12 c0       	rjmp	.+36     	; 0x60f4 <__fixunssfsi+0x46>
    60d0:	b1 30       	cpi	r27, 0x01	; 1
    60d2:	81 f0       	breq	.+32     	; 0x60f4 <__fixunssfsi+0x46>
    60d4:	21 d1       	rcall	.+578    	; 0x6318 <__fp_zero>
    60d6:	b1 e0       	ldi	r27, 0x01	; 1
    60d8:	08 95       	ret
    60da:	1e c1       	rjmp	.+572    	; 0x6318 <__fp_zero>
    60dc:	67 2f       	mov	r22, r23
    60de:	78 2f       	mov	r23, r24
    60e0:	88 27       	eor	r24, r24
    60e2:	b8 5f       	subi	r27, 0xF8	; 248
    60e4:	39 f0       	breq	.+14     	; 0x60f4 <__fixunssfsi+0x46>
    60e6:	b9 3f       	cpi	r27, 0xF9	; 249
    60e8:	cc f3       	brlt	.-14     	; 0x60dc <__fixunssfsi+0x2e>
    60ea:	86 95       	lsr	r24
    60ec:	77 95       	ror	r23
    60ee:	67 95       	ror	r22
    60f0:	b3 95       	inc	r27
    60f2:	d9 f7       	brne	.-10     	; 0x60ea <__fixunssfsi+0x3c>
    60f4:	3e f4       	brtc	.+14     	; 0x6104 <__fixunssfsi+0x56>
    60f6:	90 95       	com	r25
    60f8:	80 95       	com	r24
    60fa:	70 95       	com	r23
    60fc:	61 95       	neg	r22
    60fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6100:	8f 4f       	sbci	r24, 0xFF	; 255
    6102:	9f 4f       	sbci	r25, 0xFF	; 255
    6104:	08 95       	ret

00006106 <__floatunsisf>:
    6106:	e8 94       	clt
    6108:	09 c0       	rjmp	.+18     	; 0x611c <__floatsisf+0x12>

0000610a <__floatsisf>:
    610a:	97 fb       	bst	r25, 7
    610c:	3e f4       	brtc	.+14     	; 0x611c <__floatsisf+0x12>
    610e:	90 95       	com	r25
    6110:	80 95       	com	r24
    6112:	70 95       	com	r23
    6114:	61 95       	neg	r22
    6116:	7f 4f       	sbci	r23, 0xFF	; 255
    6118:	8f 4f       	sbci	r24, 0xFF	; 255
    611a:	9f 4f       	sbci	r25, 0xFF	; 255
    611c:	99 23       	and	r25, r25
    611e:	a9 f0       	breq	.+42     	; 0x614a <__floatsisf+0x40>
    6120:	f9 2f       	mov	r31, r25
    6122:	96 e9       	ldi	r25, 0x96	; 150
    6124:	bb 27       	eor	r27, r27
    6126:	93 95       	inc	r25
    6128:	f6 95       	lsr	r31
    612a:	87 95       	ror	r24
    612c:	77 95       	ror	r23
    612e:	67 95       	ror	r22
    6130:	b7 95       	ror	r27
    6132:	f1 11       	cpse	r31, r1
    6134:	f8 cf       	rjmp	.-16     	; 0x6126 <__floatsisf+0x1c>
    6136:	fa f4       	brpl	.+62     	; 0x6176 <__floatsisf+0x6c>
    6138:	bb 0f       	add	r27, r27
    613a:	11 f4       	brne	.+4      	; 0x6140 <__floatsisf+0x36>
    613c:	60 ff       	sbrs	r22, 0
    613e:	1b c0       	rjmp	.+54     	; 0x6176 <__floatsisf+0x6c>
    6140:	6f 5f       	subi	r22, 0xFF	; 255
    6142:	7f 4f       	sbci	r23, 0xFF	; 255
    6144:	8f 4f       	sbci	r24, 0xFF	; 255
    6146:	9f 4f       	sbci	r25, 0xFF	; 255
    6148:	16 c0       	rjmp	.+44     	; 0x6176 <__floatsisf+0x6c>
    614a:	88 23       	and	r24, r24
    614c:	11 f0       	breq	.+4      	; 0x6152 <__floatsisf+0x48>
    614e:	96 e9       	ldi	r25, 0x96	; 150
    6150:	11 c0       	rjmp	.+34     	; 0x6174 <__floatsisf+0x6a>
    6152:	77 23       	and	r23, r23
    6154:	21 f0       	breq	.+8      	; 0x615e <__floatsisf+0x54>
    6156:	9e e8       	ldi	r25, 0x8E	; 142
    6158:	87 2f       	mov	r24, r23
    615a:	76 2f       	mov	r23, r22
    615c:	05 c0       	rjmp	.+10     	; 0x6168 <__floatsisf+0x5e>
    615e:	66 23       	and	r22, r22
    6160:	71 f0       	breq	.+28     	; 0x617e <__floatsisf+0x74>
    6162:	96 e8       	ldi	r25, 0x86	; 134
    6164:	86 2f       	mov	r24, r22
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	60 e0       	ldi	r22, 0x00	; 0
    616a:	2a f0       	brmi	.+10     	; 0x6176 <__floatsisf+0x6c>
    616c:	9a 95       	dec	r25
    616e:	66 0f       	add	r22, r22
    6170:	77 1f       	adc	r23, r23
    6172:	88 1f       	adc	r24, r24
    6174:	da f7       	brpl	.-10     	; 0x616c <__floatsisf+0x62>
    6176:	88 0f       	add	r24, r24
    6178:	96 95       	lsr	r25
    617a:	87 95       	ror	r24
    617c:	97 f9       	bld	r25, 7
    617e:	08 95       	ret

00006180 <__fp_cmp>:
    6180:	99 0f       	add	r25, r25
    6182:	00 08       	sbc	r0, r0
    6184:	55 0f       	add	r21, r21
    6186:	aa 0b       	sbc	r26, r26
    6188:	e0 e8       	ldi	r30, 0x80	; 128
    618a:	fe ef       	ldi	r31, 0xFE	; 254
    618c:	16 16       	cp	r1, r22
    618e:	17 06       	cpc	r1, r23
    6190:	e8 07       	cpc	r30, r24
    6192:	f9 07       	cpc	r31, r25
    6194:	c0 f0       	brcs	.+48     	; 0x61c6 <__fp_cmp+0x46>
    6196:	12 16       	cp	r1, r18
    6198:	13 06       	cpc	r1, r19
    619a:	e4 07       	cpc	r30, r20
    619c:	f5 07       	cpc	r31, r21
    619e:	98 f0       	brcs	.+38     	; 0x61c6 <__fp_cmp+0x46>
    61a0:	62 1b       	sub	r22, r18
    61a2:	73 0b       	sbc	r23, r19
    61a4:	84 0b       	sbc	r24, r20
    61a6:	95 0b       	sbc	r25, r21
    61a8:	39 f4       	brne	.+14     	; 0x61b8 <__fp_cmp+0x38>
    61aa:	0a 26       	eor	r0, r26
    61ac:	61 f0       	breq	.+24     	; 0x61c6 <__fp_cmp+0x46>
    61ae:	23 2b       	or	r18, r19
    61b0:	24 2b       	or	r18, r20
    61b2:	25 2b       	or	r18, r21
    61b4:	21 f4       	brne	.+8      	; 0x61be <__fp_cmp+0x3e>
    61b6:	08 95       	ret
    61b8:	0a 26       	eor	r0, r26
    61ba:	09 f4       	brne	.+2      	; 0x61be <__fp_cmp+0x3e>
    61bc:	a1 40       	sbci	r26, 0x01	; 1
    61be:	a6 95       	lsr	r26
    61c0:	8f ef       	ldi	r24, 0xFF	; 255
    61c2:	81 1d       	adc	r24, r1
    61c4:	81 1d       	adc	r24, r1
    61c6:	08 95       	ret

000061c8 <__fp_inf>:
    61c8:	97 f9       	bld	r25, 7
    61ca:	9f 67       	ori	r25, 0x7F	; 127
    61cc:	80 e8       	ldi	r24, 0x80	; 128
    61ce:	70 e0       	ldi	r23, 0x00	; 0
    61d0:	60 e0       	ldi	r22, 0x00	; 0
    61d2:	08 95       	ret

000061d4 <__fp_nan>:
    61d4:	9f ef       	ldi	r25, 0xFF	; 255
    61d6:	80 ec       	ldi	r24, 0xC0	; 192
    61d8:	08 95       	ret

000061da <__fp_powser>:
    61da:	df 93       	push	r29
    61dc:	cf 93       	push	r28
    61de:	1f 93       	push	r17
    61e0:	0f 93       	push	r16
    61e2:	ff 92       	push	r15
    61e4:	ef 92       	push	r14
    61e6:	df 92       	push	r13
    61e8:	7b 01       	movw	r14, r22
    61ea:	8c 01       	movw	r16, r24
    61ec:	68 94       	set
    61ee:	05 c0       	rjmp	.+10     	; 0x61fa <__fp_powser+0x20>
    61f0:	da 2e       	mov	r13, r26
    61f2:	ef 01       	movw	r28, r30
    61f4:	af d0       	rcall	.+350    	; 0x6354 <__mulsf3x>
    61f6:	fe 01       	movw	r30, r28
    61f8:	e8 94       	clt
    61fa:	a5 91       	lpm	r26, Z+
    61fc:	25 91       	lpm	r18, Z+
    61fe:	35 91       	lpm	r19, Z+
    6200:	45 91       	lpm	r20, Z+
    6202:	55 91       	lpm	r21, Z+
    6204:	ae f3       	brts	.-22     	; 0x61f0 <__fp_powser+0x16>
    6206:	ef 01       	movw	r28, r30
    6208:	29 de       	rcall	.-942    	; 0x5e5c <__addsf3x>
    620a:	fe 01       	movw	r30, r28
    620c:	97 01       	movw	r18, r14
    620e:	a8 01       	movw	r20, r16
    6210:	da 94       	dec	r13
    6212:	79 f7       	brne	.-34     	; 0x61f2 <__fp_powser+0x18>
    6214:	df 90       	pop	r13
    6216:	ef 90       	pop	r14
    6218:	ff 90       	pop	r15
    621a:	0f 91       	pop	r16
    621c:	1f 91       	pop	r17
    621e:	cf 91       	pop	r28
    6220:	df 91       	pop	r29
    6222:	08 95       	ret

00006224 <__fp_pscA>:
    6224:	00 24       	eor	r0, r0
    6226:	0a 94       	dec	r0
    6228:	16 16       	cp	r1, r22
    622a:	17 06       	cpc	r1, r23
    622c:	18 06       	cpc	r1, r24
    622e:	09 06       	cpc	r0, r25
    6230:	08 95       	ret

00006232 <__fp_pscB>:
    6232:	00 24       	eor	r0, r0
    6234:	0a 94       	dec	r0
    6236:	12 16       	cp	r1, r18
    6238:	13 06       	cpc	r1, r19
    623a:	14 06       	cpc	r1, r20
    623c:	05 06       	cpc	r0, r21
    623e:	08 95       	ret
    6240:	c9 cf       	rjmp	.-110    	; 0x61d4 <__fp_nan>

00006242 <__fp_rempio2>:
    6242:	50 d0       	rcall	.+160    	; 0x62e4 <__fp_splitA>
    6244:	e8 f3       	brcs	.-6      	; 0x6240 <__fp_pscB+0xe>
    6246:	e8 94       	clt
    6248:	e0 e0       	ldi	r30, 0x00	; 0
    624a:	bb 27       	eor	r27, r27
    624c:	9f 57       	subi	r25, 0x7F	; 127
    624e:	f0 f0       	brcs	.+60     	; 0x628c <__fp_rempio2+0x4a>
    6250:	2a ed       	ldi	r18, 0xDA	; 218
    6252:	3f e0       	ldi	r19, 0x0F	; 15
    6254:	49 ec       	ldi	r20, 0xC9	; 201
    6256:	06 c0       	rjmp	.+12     	; 0x6264 <__fp_rempio2+0x22>
    6258:	ee 0f       	add	r30, r30
    625a:	bb 0f       	add	r27, r27
    625c:	66 1f       	adc	r22, r22
    625e:	77 1f       	adc	r23, r23
    6260:	88 1f       	adc	r24, r24
    6262:	28 f0       	brcs	.+10     	; 0x626e <__fp_rempio2+0x2c>
    6264:	b2 3a       	cpi	r27, 0xA2	; 162
    6266:	62 07       	cpc	r22, r18
    6268:	73 07       	cpc	r23, r19
    626a:	84 07       	cpc	r24, r20
    626c:	28 f0       	brcs	.+10     	; 0x6278 <__fp_rempio2+0x36>
    626e:	b2 5a       	subi	r27, 0xA2	; 162
    6270:	62 0b       	sbc	r22, r18
    6272:	73 0b       	sbc	r23, r19
    6274:	84 0b       	sbc	r24, r20
    6276:	e3 95       	inc	r30
    6278:	9a 95       	dec	r25
    627a:	72 f7       	brpl	.-36     	; 0x6258 <__fp_rempio2+0x16>
    627c:	80 38       	cpi	r24, 0x80	; 128
    627e:	30 f4       	brcc	.+12     	; 0x628c <__fp_rempio2+0x4a>
    6280:	9a 95       	dec	r25
    6282:	bb 0f       	add	r27, r27
    6284:	66 1f       	adc	r22, r22
    6286:	77 1f       	adc	r23, r23
    6288:	88 1f       	adc	r24, r24
    628a:	d2 f7       	brpl	.-12     	; 0x6280 <__fp_rempio2+0x3e>
    628c:	90 48       	sbci	r25, 0x80	; 128
    628e:	06 c1       	rjmp	.+524    	; 0x649c <__fp_mpack_finite>

00006290 <__fp_round>:
    6290:	09 2e       	mov	r0, r25
    6292:	03 94       	inc	r0
    6294:	00 0c       	add	r0, r0
    6296:	11 f4       	brne	.+4      	; 0x629c <__fp_round+0xc>
    6298:	88 23       	and	r24, r24
    629a:	52 f0       	brmi	.+20     	; 0x62b0 <__fp_round+0x20>
    629c:	bb 0f       	add	r27, r27
    629e:	40 f4       	brcc	.+16     	; 0x62b0 <__fp_round+0x20>
    62a0:	bf 2b       	or	r27, r31
    62a2:	11 f4       	brne	.+4      	; 0x62a8 <__fp_round+0x18>
    62a4:	60 ff       	sbrs	r22, 0
    62a6:	04 c0       	rjmp	.+8      	; 0x62b0 <__fp_round+0x20>
    62a8:	6f 5f       	subi	r22, 0xFF	; 255
    62aa:	7f 4f       	sbci	r23, 0xFF	; 255
    62ac:	8f 4f       	sbci	r24, 0xFF	; 255
    62ae:	9f 4f       	sbci	r25, 0xFF	; 255
    62b0:	08 95       	ret

000062b2 <__fp_sinus>:
    62b2:	ef 93       	push	r30
    62b4:	e0 ff       	sbrs	r30, 0
    62b6:	06 c0       	rjmp	.+12     	; 0x62c4 <__fp_sinus+0x12>
    62b8:	a2 ea       	ldi	r26, 0xA2	; 162
    62ba:	2a ed       	ldi	r18, 0xDA	; 218
    62bc:	3f e0       	ldi	r19, 0x0F	; 15
    62be:	49 ec       	ldi	r20, 0xC9	; 201
    62c0:	5f eb       	ldi	r21, 0xBF	; 191
    62c2:	cc dd       	rcall	.-1128   	; 0x5e5c <__addsf3x>
    62c4:	e5 df       	rcall	.-54     	; 0x6290 <__fp_round>
    62c6:	0f 90       	pop	r0
    62c8:	03 94       	inc	r0
    62ca:	01 fc       	sbrc	r0, 1
    62cc:	90 58       	subi	r25, 0x80	; 128
    62ce:	e1 e1       	ldi	r30, 0x11	; 17
    62d0:	f1 e0       	ldi	r31, 0x01	; 1
    62d2:	f7 c0       	rjmp	.+494    	; 0x64c2 <__fp_powsodd>

000062d4 <__fp_split3>:
    62d4:	57 fd       	sbrc	r21, 7
    62d6:	90 58       	subi	r25, 0x80	; 128
    62d8:	44 0f       	add	r20, r20
    62da:	55 1f       	adc	r21, r21
    62dc:	59 f0       	breq	.+22     	; 0x62f4 <__fp_splitA+0x10>
    62de:	5f 3f       	cpi	r21, 0xFF	; 255
    62e0:	71 f0       	breq	.+28     	; 0x62fe <__fp_splitA+0x1a>
    62e2:	47 95       	ror	r20

000062e4 <__fp_splitA>:
    62e4:	88 0f       	add	r24, r24
    62e6:	97 fb       	bst	r25, 7
    62e8:	99 1f       	adc	r25, r25
    62ea:	61 f0       	breq	.+24     	; 0x6304 <__fp_splitA+0x20>
    62ec:	9f 3f       	cpi	r25, 0xFF	; 255
    62ee:	79 f0       	breq	.+30     	; 0x630e <__fp_splitA+0x2a>
    62f0:	87 95       	ror	r24
    62f2:	08 95       	ret
    62f4:	12 16       	cp	r1, r18
    62f6:	13 06       	cpc	r1, r19
    62f8:	14 06       	cpc	r1, r20
    62fa:	55 1f       	adc	r21, r21
    62fc:	f2 cf       	rjmp	.-28     	; 0x62e2 <__fp_split3+0xe>
    62fe:	46 95       	lsr	r20
    6300:	f1 df       	rcall	.-30     	; 0x62e4 <__fp_splitA>
    6302:	08 c0       	rjmp	.+16     	; 0x6314 <__fp_splitA+0x30>
    6304:	16 16       	cp	r1, r22
    6306:	17 06       	cpc	r1, r23
    6308:	18 06       	cpc	r1, r24
    630a:	99 1f       	adc	r25, r25
    630c:	f1 cf       	rjmp	.-30     	; 0x62f0 <__fp_splitA+0xc>
    630e:	86 95       	lsr	r24
    6310:	71 05       	cpc	r23, r1
    6312:	61 05       	cpc	r22, r1
    6314:	08 94       	sec
    6316:	08 95       	ret

00006318 <__fp_zero>:
    6318:	e8 94       	clt

0000631a <__fp_szero>:
    631a:	bb 27       	eor	r27, r27
    631c:	66 27       	eor	r22, r22
    631e:	77 27       	eor	r23, r23
    6320:	cb 01       	movw	r24, r22
    6322:	97 f9       	bld	r25, 7
    6324:	08 95       	ret

00006326 <__gesf2>:
    6326:	2c df       	rcall	.-424    	; 0x6180 <__fp_cmp>
    6328:	08 f4       	brcc	.+2      	; 0x632c <__gesf2+0x6>
    632a:	8f ef       	ldi	r24, 0xFF	; 255
    632c:	08 95       	ret

0000632e <inverse>:
    632e:	9b 01       	movw	r18, r22
    6330:	ac 01       	movw	r20, r24
    6332:	60 e0       	ldi	r22, 0x00	; 0
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	80 e8       	ldi	r24, 0x80	; 128
    6338:	9f e3       	ldi	r25, 0x3F	; 63
    633a:	4c ce       	rjmp	.-872    	; 0x5fd4 <__divsf3>

0000633c <__mulsf3>:
    633c:	0b d0       	rcall	.+22     	; 0x6354 <__mulsf3x>
    633e:	a8 cf       	rjmp	.-176    	; 0x6290 <__fp_round>
    6340:	71 df       	rcall	.-286    	; 0x6224 <__fp_pscA>
    6342:	28 f0       	brcs	.+10     	; 0x634e <__mulsf3+0x12>
    6344:	76 df       	rcall	.-276    	; 0x6232 <__fp_pscB>
    6346:	18 f0       	brcs	.+6      	; 0x634e <__mulsf3+0x12>
    6348:	95 23       	and	r25, r21
    634a:	09 f0       	breq	.+2      	; 0x634e <__mulsf3+0x12>
    634c:	3d cf       	rjmp	.-390    	; 0x61c8 <__fp_inf>
    634e:	42 cf       	rjmp	.-380    	; 0x61d4 <__fp_nan>
    6350:	11 24       	eor	r1, r1
    6352:	e3 cf       	rjmp	.-58     	; 0x631a <__fp_szero>

00006354 <__mulsf3x>:
    6354:	bf df       	rcall	.-130    	; 0x62d4 <__fp_split3>
    6356:	a0 f3       	brcs	.-24     	; 0x6340 <__mulsf3+0x4>

00006358 <__mulsf3_pse>:
    6358:	95 9f       	mul	r25, r21
    635a:	d1 f3       	breq	.-12     	; 0x6350 <__mulsf3+0x14>
    635c:	95 0f       	add	r25, r21
    635e:	50 e0       	ldi	r21, 0x00	; 0
    6360:	55 1f       	adc	r21, r21
    6362:	62 9f       	mul	r22, r18
    6364:	f0 01       	movw	r30, r0
    6366:	72 9f       	mul	r23, r18
    6368:	bb 27       	eor	r27, r27
    636a:	f0 0d       	add	r31, r0
    636c:	b1 1d       	adc	r27, r1
    636e:	63 9f       	mul	r22, r19
    6370:	aa 27       	eor	r26, r26
    6372:	f0 0d       	add	r31, r0
    6374:	b1 1d       	adc	r27, r1
    6376:	aa 1f       	adc	r26, r26
    6378:	64 9f       	mul	r22, r20
    637a:	66 27       	eor	r22, r22
    637c:	b0 0d       	add	r27, r0
    637e:	a1 1d       	adc	r26, r1
    6380:	66 1f       	adc	r22, r22
    6382:	82 9f       	mul	r24, r18
    6384:	22 27       	eor	r18, r18
    6386:	b0 0d       	add	r27, r0
    6388:	a1 1d       	adc	r26, r1
    638a:	62 1f       	adc	r22, r18
    638c:	73 9f       	mul	r23, r19
    638e:	b0 0d       	add	r27, r0
    6390:	a1 1d       	adc	r26, r1
    6392:	62 1f       	adc	r22, r18
    6394:	83 9f       	mul	r24, r19
    6396:	a0 0d       	add	r26, r0
    6398:	61 1d       	adc	r22, r1
    639a:	22 1f       	adc	r18, r18
    639c:	74 9f       	mul	r23, r20
    639e:	33 27       	eor	r19, r19
    63a0:	a0 0d       	add	r26, r0
    63a2:	61 1d       	adc	r22, r1
    63a4:	23 1f       	adc	r18, r19
    63a6:	84 9f       	mul	r24, r20
    63a8:	60 0d       	add	r22, r0
    63aa:	21 1d       	adc	r18, r1
    63ac:	82 2f       	mov	r24, r18
    63ae:	76 2f       	mov	r23, r22
    63b0:	6a 2f       	mov	r22, r26
    63b2:	11 24       	eor	r1, r1
    63b4:	9f 57       	subi	r25, 0x7F	; 127
    63b6:	50 40       	sbci	r21, 0x00	; 0
    63b8:	8a f0       	brmi	.+34     	; 0x63dc <__mulsf3_pse+0x84>
    63ba:	e1 f0       	breq	.+56     	; 0x63f4 <__mulsf3_pse+0x9c>
    63bc:	88 23       	and	r24, r24
    63be:	4a f0       	brmi	.+18     	; 0x63d2 <__mulsf3_pse+0x7a>
    63c0:	ee 0f       	add	r30, r30
    63c2:	ff 1f       	adc	r31, r31
    63c4:	bb 1f       	adc	r27, r27
    63c6:	66 1f       	adc	r22, r22
    63c8:	77 1f       	adc	r23, r23
    63ca:	88 1f       	adc	r24, r24
    63cc:	91 50       	subi	r25, 0x01	; 1
    63ce:	50 40       	sbci	r21, 0x00	; 0
    63d0:	a9 f7       	brne	.-22     	; 0x63bc <__mulsf3_pse+0x64>
    63d2:	9e 3f       	cpi	r25, 0xFE	; 254
    63d4:	51 05       	cpc	r21, r1
    63d6:	70 f0       	brcs	.+28     	; 0x63f4 <__mulsf3_pse+0x9c>
    63d8:	f7 ce       	rjmp	.-530    	; 0x61c8 <__fp_inf>
    63da:	9f cf       	rjmp	.-194    	; 0x631a <__fp_szero>
    63dc:	5f 3f       	cpi	r21, 0xFF	; 255
    63de:	ec f3       	brlt	.-6      	; 0x63da <__mulsf3_pse+0x82>
    63e0:	98 3e       	cpi	r25, 0xE8	; 232
    63e2:	dc f3       	brlt	.-10     	; 0x63da <__mulsf3_pse+0x82>
    63e4:	86 95       	lsr	r24
    63e6:	77 95       	ror	r23
    63e8:	67 95       	ror	r22
    63ea:	b7 95       	ror	r27
    63ec:	f7 95       	ror	r31
    63ee:	e7 95       	ror	r30
    63f0:	9f 5f       	subi	r25, 0xFF	; 255
    63f2:	c1 f7       	brne	.-16     	; 0x63e4 <__mulsf3_pse+0x8c>
    63f4:	fe 2b       	or	r31, r30
    63f6:	88 0f       	add	r24, r24
    63f8:	91 1d       	adc	r25, r1
    63fa:	96 95       	lsr	r25
    63fc:	87 95       	ror	r24
    63fe:	97 f9       	bld	r25, 7
    6400:	08 95       	ret

00006402 <sin>:
    6402:	9f 93       	push	r25
    6404:	1e df       	rcall	.-452    	; 0x6242 <__fp_rempio2>
    6406:	0f 90       	pop	r0
    6408:	07 fc       	sbrc	r0, 7
    640a:	ee 5f       	subi	r30, 0xFE	; 254
    640c:	52 cf       	rjmp	.-348    	; 0x62b2 <__fp_sinus>
    640e:	11 f4       	brne	.+4      	; 0x6414 <sin+0x12>
    6410:	0e f4       	brtc	.+2      	; 0x6414 <sin+0x12>
    6412:	e0 ce       	rjmp	.-576    	; 0x61d4 <__fp_nan>
    6414:	41 c0       	rjmp	.+130    	; 0x6498 <__fp_mpack>

00006416 <sqrt>:
    6416:	66 df       	rcall	.-308    	; 0x62e4 <__fp_splitA>
    6418:	d0 f3       	brcs	.-12     	; 0x640e <sin+0xc>
    641a:	99 23       	and	r25, r25
    641c:	d9 f3       	breq	.-10     	; 0x6414 <sin+0x12>
    641e:	ce f3       	brts	.-14     	; 0x6412 <sin+0x10>
    6420:	9f 57       	subi	r25, 0x7F	; 127
    6422:	55 0b       	sbc	r21, r21
    6424:	87 ff       	sbrs	r24, 7
    6426:	46 d0       	rcall	.+140    	; 0x64b4 <__fp_norm2>
    6428:	00 24       	eor	r0, r0
    642a:	a0 e6       	ldi	r26, 0x60	; 96
    642c:	40 ea       	ldi	r20, 0xA0	; 160
    642e:	90 01       	movw	r18, r0
    6430:	80 58       	subi	r24, 0x80	; 128
    6432:	56 95       	lsr	r21
    6434:	97 95       	ror	r25
    6436:	28 f4       	brcc	.+10     	; 0x6442 <sqrt+0x2c>
    6438:	80 5c       	subi	r24, 0xC0	; 192
    643a:	66 0f       	add	r22, r22
    643c:	77 1f       	adc	r23, r23
    643e:	88 1f       	adc	r24, r24
    6440:	20 f0       	brcs	.+8      	; 0x644a <sqrt+0x34>
    6442:	26 17       	cp	r18, r22
    6444:	37 07       	cpc	r19, r23
    6446:	48 07       	cpc	r20, r24
    6448:	30 f4       	brcc	.+12     	; 0x6456 <sqrt+0x40>
    644a:	62 1b       	sub	r22, r18
    644c:	73 0b       	sbc	r23, r19
    644e:	84 0b       	sbc	r24, r20
    6450:	20 29       	or	r18, r0
    6452:	31 29       	or	r19, r1
    6454:	4a 2b       	or	r20, r26
    6456:	a6 95       	lsr	r26
    6458:	17 94       	ror	r1
    645a:	07 94       	ror	r0
    645c:	20 25       	eor	r18, r0
    645e:	31 25       	eor	r19, r1
    6460:	4a 27       	eor	r20, r26
    6462:	58 f7       	brcc	.-42     	; 0x643a <sqrt+0x24>
    6464:	66 0f       	add	r22, r22
    6466:	77 1f       	adc	r23, r23
    6468:	88 1f       	adc	r24, r24
    646a:	20 f0       	brcs	.+8      	; 0x6474 <sqrt+0x5e>
    646c:	26 17       	cp	r18, r22
    646e:	37 07       	cpc	r19, r23
    6470:	48 07       	cpc	r20, r24
    6472:	30 f4       	brcc	.+12     	; 0x6480 <sqrt+0x6a>
    6474:	62 0b       	sbc	r22, r18
    6476:	73 0b       	sbc	r23, r19
    6478:	84 0b       	sbc	r24, r20
    647a:	20 0d       	add	r18, r0
    647c:	31 1d       	adc	r19, r1
    647e:	41 1d       	adc	r20, r1
    6480:	a0 95       	com	r26
    6482:	81 f7       	brne	.-32     	; 0x6464 <sqrt+0x4e>
    6484:	b9 01       	movw	r22, r18
    6486:	84 2f       	mov	r24, r20
    6488:	91 58       	subi	r25, 0x81	; 129
    648a:	88 0f       	add	r24, r24
    648c:	96 95       	lsr	r25
    648e:	87 95       	ror	r24
    6490:	08 95       	ret

00006492 <square>:
    6492:	9b 01       	movw	r18, r22
    6494:	ac 01       	movw	r20, r24
    6496:	52 cf       	rjmp	.-348    	; 0x633c <__mulsf3>

00006498 <__fp_mpack>:
    6498:	9f 3f       	cpi	r25, 0xFF	; 255
    649a:	31 f0       	breq	.+12     	; 0x64a8 <__fp_mpack_finite+0xc>

0000649c <__fp_mpack_finite>:
    649c:	91 50       	subi	r25, 0x01	; 1
    649e:	20 f4       	brcc	.+8      	; 0x64a8 <__fp_mpack_finite+0xc>
    64a0:	87 95       	ror	r24
    64a2:	77 95       	ror	r23
    64a4:	67 95       	ror	r22
    64a6:	b7 95       	ror	r27
    64a8:	88 0f       	add	r24, r24
    64aa:	91 1d       	adc	r25, r1
    64ac:	96 95       	lsr	r25
    64ae:	87 95       	ror	r24
    64b0:	97 f9       	bld	r25, 7
    64b2:	08 95       	ret

000064b4 <__fp_norm2>:
    64b4:	91 50       	subi	r25, 0x01	; 1
    64b6:	50 40       	sbci	r21, 0x00	; 0
    64b8:	66 0f       	add	r22, r22
    64ba:	77 1f       	adc	r23, r23
    64bc:	88 1f       	adc	r24, r24
    64be:	d2 f7       	brpl	.-12     	; 0x64b4 <__fp_norm2>
    64c0:	08 95       	ret

000064c2 <__fp_powsodd>:
    64c2:	9f 93       	push	r25
    64c4:	8f 93       	push	r24
    64c6:	7f 93       	push	r23
    64c8:	6f 93       	push	r22
    64ca:	ff 93       	push	r31
    64cc:	ef 93       	push	r30
    64ce:	9b 01       	movw	r18, r22
    64d0:	ac 01       	movw	r20, r24
    64d2:	34 df       	rcall	.-408    	; 0x633c <__mulsf3>
    64d4:	ef 91       	pop	r30
    64d6:	ff 91       	pop	r31
    64d8:	80 de       	rcall	.-768    	; 0x61da <__fp_powser>
    64da:	2f 91       	pop	r18
    64dc:	3f 91       	pop	r19
    64de:	4f 91       	pop	r20
    64e0:	5f 91       	pop	r21
    64e2:	2c cf       	rjmp	.-424    	; 0x633c <__mulsf3>

000064e4 <vfprintf>:
    64e4:	2f 92       	push	r2
    64e6:	3f 92       	push	r3
    64e8:	4f 92       	push	r4
    64ea:	5f 92       	push	r5
    64ec:	6f 92       	push	r6
    64ee:	7f 92       	push	r7
    64f0:	8f 92       	push	r8
    64f2:	9f 92       	push	r9
    64f4:	af 92       	push	r10
    64f6:	bf 92       	push	r11
    64f8:	cf 92       	push	r12
    64fa:	df 92       	push	r13
    64fc:	ef 92       	push	r14
    64fe:	ff 92       	push	r15
    6500:	0f 93       	push	r16
    6502:	1f 93       	push	r17
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
    6508:	cd b7       	in	r28, 0x3d	; 61
    650a:	de b7       	in	r29, 0x3e	; 62
    650c:	60 97       	sbiw	r28, 0x10	; 16
    650e:	0f b6       	in	r0, 0x3f	; 63
    6510:	f8 94       	cli
    6512:	de bf       	out	0x3e, r29	; 62
    6514:	0f be       	out	0x3f, r0	; 63
    6516:	cd bf       	out	0x3d, r28	; 61
    6518:	7c 01       	movw	r14, r24
    651a:	1b 01       	movw	r2, r22
    651c:	6a 01       	movw	r12, r20
    651e:	fc 01       	movw	r30, r24
    6520:	17 82       	std	Z+7, r1	; 0x07
    6522:	16 82       	std	Z+6, r1	; 0x06
    6524:	83 81       	ldd	r24, Z+3	; 0x03
    6526:	81 ff       	sbrs	r24, 1
    6528:	2a c3       	rjmp	.+1620   	; 0x6b7e <vfprintf+0x69a>
    652a:	9e 01       	movw	r18, r28
    652c:	2f 5f       	subi	r18, 0xFF	; 255
    652e:	3f 4f       	sbci	r19, 0xFF	; 255
    6530:	39 01       	movw	r6, r18
    6532:	f7 01       	movw	r30, r14
    6534:	93 81       	ldd	r25, Z+3	; 0x03
    6536:	f1 01       	movw	r30, r2
    6538:	93 fd       	sbrc	r25, 3
    653a:	85 91       	lpm	r24, Z+
    653c:	93 ff       	sbrs	r25, 3
    653e:	81 91       	ld	r24, Z+
    6540:	1f 01       	movw	r2, r30
    6542:	88 23       	and	r24, r24
    6544:	09 f4       	brne	.+2      	; 0x6548 <vfprintf+0x64>
    6546:	17 c3       	rjmp	.+1582   	; 0x6b76 <vfprintf+0x692>
    6548:	85 32       	cpi	r24, 0x25	; 37
    654a:	39 f4       	brne	.+14     	; 0x655a <vfprintf+0x76>
    654c:	93 fd       	sbrc	r25, 3
    654e:	85 91       	lpm	r24, Z+
    6550:	93 ff       	sbrs	r25, 3
    6552:	81 91       	ld	r24, Z+
    6554:	1f 01       	movw	r2, r30
    6556:	85 32       	cpi	r24, 0x25	; 37
    6558:	31 f4       	brne	.+12     	; 0x6566 <vfprintf+0x82>
    655a:	b7 01       	movw	r22, r14
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	78 d4       	rcall	.+2288   	; 0x6e50 <fputc>
    6560:	56 01       	movw	r10, r12
    6562:	65 01       	movw	r12, r10
    6564:	e6 cf       	rjmp	.-52     	; 0x6532 <vfprintf+0x4e>
    6566:	10 e0       	ldi	r17, 0x00	; 0
    6568:	51 2c       	mov	r5, r1
    656a:	91 2c       	mov	r9, r1
    656c:	ff e1       	ldi	r31, 0x1F	; 31
    656e:	f9 15       	cp	r31, r9
    6570:	d8 f0       	brcs	.+54     	; 0x65a8 <vfprintf+0xc4>
    6572:	8b 32       	cpi	r24, 0x2B	; 43
    6574:	79 f0       	breq	.+30     	; 0x6594 <vfprintf+0xb0>
    6576:	38 f4       	brcc	.+14     	; 0x6586 <vfprintf+0xa2>
    6578:	80 32       	cpi	r24, 0x20	; 32
    657a:	79 f0       	breq	.+30     	; 0x659a <vfprintf+0xb6>
    657c:	83 32       	cpi	r24, 0x23	; 35
    657e:	a1 f4       	brne	.+40     	; 0x65a8 <vfprintf+0xc4>
    6580:	f9 2d       	mov	r31, r9
    6582:	f0 61       	ori	r31, 0x10	; 16
    6584:	2e c0       	rjmp	.+92     	; 0x65e2 <vfprintf+0xfe>
    6586:	8d 32       	cpi	r24, 0x2D	; 45
    6588:	61 f0       	breq	.+24     	; 0x65a2 <vfprintf+0xbe>
    658a:	80 33       	cpi	r24, 0x30	; 48
    658c:	69 f4       	brne	.+26     	; 0x65a8 <vfprintf+0xc4>
    658e:	29 2d       	mov	r18, r9
    6590:	21 60       	ori	r18, 0x01	; 1
    6592:	2d c0       	rjmp	.+90     	; 0x65ee <vfprintf+0x10a>
    6594:	39 2d       	mov	r19, r9
    6596:	32 60       	ori	r19, 0x02	; 2
    6598:	93 2e       	mov	r9, r19
    659a:	89 2d       	mov	r24, r9
    659c:	84 60       	ori	r24, 0x04	; 4
    659e:	98 2e       	mov	r9, r24
    65a0:	2a c0       	rjmp	.+84     	; 0x65f6 <vfprintf+0x112>
    65a2:	e9 2d       	mov	r30, r9
    65a4:	e8 60       	ori	r30, 0x08	; 8
    65a6:	15 c0       	rjmp	.+42     	; 0x65d2 <vfprintf+0xee>
    65a8:	97 fc       	sbrc	r9, 7
    65aa:	2d c0       	rjmp	.+90     	; 0x6606 <vfprintf+0x122>
    65ac:	20 ed       	ldi	r18, 0xD0	; 208
    65ae:	28 0f       	add	r18, r24
    65b0:	2a 30       	cpi	r18, 0x0A	; 10
    65b2:	88 f4       	brcc	.+34     	; 0x65d6 <vfprintf+0xf2>
    65b4:	96 fe       	sbrs	r9, 6
    65b6:	06 c0       	rjmp	.+12     	; 0x65c4 <vfprintf+0xe0>
    65b8:	3a e0       	ldi	r19, 0x0A	; 10
    65ba:	13 9f       	mul	r17, r19
    65bc:	20 0d       	add	r18, r0
    65be:	11 24       	eor	r1, r1
    65c0:	12 2f       	mov	r17, r18
    65c2:	19 c0       	rjmp	.+50     	; 0x65f6 <vfprintf+0x112>
    65c4:	8a e0       	ldi	r24, 0x0A	; 10
    65c6:	58 9e       	mul	r5, r24
    65c8:	20 0d       	add	r18, r0
    65ca:	11 24       	eor	r1, r1
    65cc:	52 2e       	mov	r5, r18
    65ce:	e9 2d       	mov	r30, r9
    65d0:	e0 62       	ori	r30, 0x20	; 32
    65d2:	9e 2e       	mov	r9, r30
    65d4:	10 c0       	rjmp	.+32     	; 0x65f6 <vfprintf+0x112>
    65d6:	8e 32       	cpi	r24, 0x2E	; 46
    65d8:	31 f4       	brne	.+12     	; 0x65e6 <vfprintf+0x102>
    65da:	96 fc       	sbrc	r9, 6
    65dc:	cc c2       	rjmp	.+1432   	; 0x6b76 <vfprintf+0x692>
    65de:	f9 2d       	mov	r31, r9
    65e0:	f0 64       	ori	r31, 0x40	; 64
    65e2:	9f 2e       	mov	r9, r31
    65e4:	08 c0       	rjmp	.+16     	; 0x65f6 <vfprintf+0x112>
    65e6:	8c 36       	cpi	r24, 0x6C	; 108
    65e8:	21 f4       	brne	.+8      	; 0x65f2 <vfprintf+0x10e>
    65ea:	29 2d       	mov	r18, r9
    65ec:	20 68       	ori	r18, 0x80	; 128
    65ee:	92 2e       	mov	r9, r18
    65f0:	02 c0       	rjmp	.+4      	; 0x65f6 <vfprintf+0x112>
    65f2:	88 36       	cpi	r24, 0x68	; 104
    65f4:	41 f4       	brne	.+16     	; 0x6606 <vfprintf+0x122>
    65f6:	f1 01       	movw	r30, r2
    65f8:	93 fd       	sbrc	r25, 3
    65fa:	85 91       	lpm	r24, Z+
    65fc:	93 ff       	sbrs	r25, 3
    65fe:	81 91       	ld	r24, Z+
    6600:	1f 01       	movw	r2, r30
    6602:	81 11       	cpse	r24, r1
    6604:	b3 cf       	rjmp	.-154    	; 0x656c <vfprintf+0x88>
    6606:	9b eb       	ldi	r25, 0xBB	; 187
    6608:	98 0f       	add	r25, r24
    660a:	93 30       	cpi	r25, 0x03	; 3
    660c:	20 f4       	brcc	.+8      	; 0x6616 <vfprintf+0x132>
    660e:	99 2d       	mov	r25, r9
    6610:	90 61       	ori	r25, 0x10	; 16
    6612:	80 5e       	subi	r24, 0xE0	; 224
    6614:	07 c0       	rjmp	.+14     	; 0x6624 <vfprintf+0x140>
    6616:	9b e9       	ldi	r25, 0x9B	; 155
    6618:	98 0f       	add	r25, r24
    661a:	93 30       	cpi	r25, 0x03	; 3
    661c:	08 f0       	brcs	.+2      	; 0x6620 <vfprintf+0x13c>
    661e:	59 c1       	rjmp	.+690    	; 0x68d2 <vfprintf+0x3ee>
    6620:	99 2d       	mov	r25, r9
    6622:	9f 7e       	andi	r25, 0xEF	; 239
    6624:	96 ff       	sbrs	r25, 6
    6626:	16 e0       	ldi	r17, 0x06	; 6
    6628:	9f 73       	andi	r25, 0x3F	; 63
    662a:	99 2e       	mov	r9, r25
    662c:	85 36       	cpi	r24, 0x65	; 101
    662e:	19 f4       	brne	.+6      	; 0x6636 <vfprintf+0x152>
    6630:	90 64       	ori	r25, 0x40	; 64
    6632:	99 2e       	mov	r9, r25
    6634:	08 c0       	rjmp	.+16     	; 0x6646 <vfprintf+0x162>
    6636:	86 36       	cpi	r24, 0x66	; 102
    6638:	21 f4       	brne	.+8      	; 0x6642 <vfprintf+0x15e>
    663a:	39 2f       	mov	r19, r25
    663c:	30 68       	ori	r19, 0x80	; 128
    663e:	93 2e       	mov	r9, r19
    6640:	02 c0       	rjmp	.+4      	; 0x6646 <vfprintf+0x162>
    6642:	11 11       	cpse	r17, r1
    6644:	11 50       	subi	r17, 0x01	; 1
    6646:	97 fe       	sbrs	r9, 7
    6648:	07 c0       	rjmp	.+14     	; 0x6658 <vfprintf+0x174>
    664a:	1c 33       	cpi	r17, 0x3C	; 60
    664c:	50 f4       	brcc	.+20     	; 0x6662 <vfprintf+0x17e>
    664e:	44 24       	eor	r4, r4
    6650:	43 94       	inc	r4
    6652:	41 0e       	add	r4, r17
    6654:	27 e0       	ldi	r18, 0x07	; 7
    6656:	0b c0       	rjmp	.+22     	; 0x666e <vfprintf+0x18a>
    6658:	18 30       	cpi	r17, 0x08	; 8
    665a:	38 f0       	brcs	.+14     	; 0x666a <vfprintf+0x186>
    665c:	27 e0       	ldi	r18, 0x07	; 7
    665e:	17 e0       	ldi	r17, 0x07	; 7
    6660:	05 c0       	rjmp	.+10     	; 0x666c <vfprintf+0x188>
    6662:	27 e0       	ldi	r18, 0x07	; 7
    6664:	9c e3       	ldi	r25, 0x3C	; 60
    6666:	49 2e       	mov	r4, r25
    6668:	02 c0       	rjmp	.+4      	; 0x666e <vfprintf+0x18a>
    666a:	21 2f       	mov	r18, r17
    666c:	41 2c       	mov	r4, r1
    666e:	56 01       	movw	r10, r12
    6670:	84 e0       	ldi	r24, 0x04	; 4
    6672:	a8 0e       	add	r10, r24
    6674:	b1 1c       	adc	r11, r1
    6676:	f6 01       	movw	r30, r12
    6678:	60 81       	ld	r22, Z
    667a:	71 81       	ldd	r23, Z+1	; 0x01
    667c:	82 81       	ldd	r24, Z+2	; 0x02
    667e:	93 81       	ldd	r25, Z+3	; 0x03
    6680:	04 2d       	mov	r16, r4
    6682:	a3 01       	movw	r20, r6
    6684:	ee d2       	rcall	.+1500   	; 0x6c62 <__ftoa_engine>
    6686:	6c 01       	movw	r12, r24
    6688:	f9 81       	ldd	r31, Y+1	; 0x01
    668a:	fc 87       	std	Y+12, r31	; 0x0c
    668c:	f0 ff       	sbrs	r31, 0
    668e:	02 c0       	rjmp	.+4      	; 0x6694 <vfprintf+0x1b0>
    6690:	f3 ff       	sbrs	r31, 3
    6692:	06 c0       	rjmp	.+12     	; 0x66a0 <vfprintf+0x1bc>
    6694:	91 fc       	sbrc	r9, 1
    6696:	06 c0       	rjmp	.+12     	; 0x66a4 <vfprintf+0x1c0>
    6698:	92 fe       	sbrs	r9, 2
    669a:	06 c0       	rjmp	.+12     	; 0x66a8 <vfprintf+0x1c4>
    669c:	00 e2       	ldi	r16, 0x20	; 32
    669e:	05 c0       	rjmp	.+10     	; 0x66aa <vfprintf+0x1c6>
    66a0:	0d e2       	ldi	r16, 0x2D	; 45
    66a2:	03 c0       	rjmp	.+6      	; 0x66aa <vfprintf+0x1c6>
    66a4:	0b e2       	ldi	r16, 0x2B	; 43
    66a6:	01 c0       	rjmp	.+2      	; 0x66aa <vfprintf+0x1c6>
    66a8:	00 e0       	ldi	r16, 0x00	; 0
    66aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    66ac:	8c 70       	andi	r24, 0x0C	; 12
    66ae:	19 f0       	breq	.+6      	; 0x66b6 <vfprintf+0x1d2>
    66b0:	01 11       	cpse	r16, r1
    66b2:	43 c2       	rjmp	.+1158   	; 0x6b3a <vfprintf+0x656>
    66b4:	80 c2       	rjmp	.+1280   	; 0x6bb6 <vfprintf+0x6d2>
    66b6:	97 fe       	sbrs	r9, 7
    66b8:	10 c0       	rjmp	.+32     	; 0x66da <vfprintf+0x1f6>
    66ba:	4c 0c       	add	r4, r12
    66bc:	fc 85       	ldd	r31, Y+12	; 0x0c
    66be:	f4 ff       	sbrs	r31, 4
    66c0:	04 c0       	rjmp	.+8      	; 0x66ca <vfprintf+0x1e6>
    66c2:	8a 81       	ldd	r24, Y+2	; 0x02
    66c4:	81 33       	cpi	r24, 0x31	; 49
    66c6:	09 f4       	brne	.+2      	; 0x66ca <vfprintf+0x1e6>
    66c8:	4a 94       	dec	r4
    66ca:	14 14       	cp	r1, r4
    66cc:	74 f5       	brge	.+92     	; 0x672a <vfprintf+0x246>
    66ce:	28 e0       	ldi	r18, 0x08	; 8
    66d0:	24 15       	cp	r18, r4
    66d2:	78 f5       	brcc	.+94     	; 0x6732 <vfprintf+0x24e>
    66d4:	88 e0       	ldi	r24, 0x08	; 8
    66d6:	48 2e       	mov	r4, r24
    66d8:	2c c0       	rjmp	.+88     	; 0x6732 <vfprintf+0x24e>
    66da:	96 fc       	sbrc	r9, 6
    66dc:	2a c0       	rjmp	.+84     	; 0x6732 <vfprintf+0x24e>
    66de:	81 2f       	mov	r24, r17
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	8c 15       	cp	r24, r12
    66e4:	9d 05       	cpc	r25, r13
    66e6:	9c f0       	brlt	.+38     	; 0x670e <vfprintf+0x22a>
    66e8:	3c ef       	ldi	r19, 0xFC	; 252
    66ea:	c3 16       	cp	r12, r19
    66ec:	3f ef       	ldi	r19, 0xFF	; 255
    66ee:	d3 06       	cpc	r13, r19
    66f0:	74 f0       	brlt	.+28     	; 0x670e <vfprintf+0x22a>
    66f2:	89 2d       	mov	r24, r9
    66f4:	80 68       	ori	r24, 0x80	; 128
    66f6:	98 2e       	mov	r9, r24
    66f8:	0a c0       	rjmp	.+20     	; 0x670e <vfprintf+0x22a>
    66fa:	e2 e0       	ldi	r30, 0x02	; 2
    66fc:	f0 e0       	ldi	r31, 0x00	; 0
    66fe:	ec 0f       	add	r30, r28
    6700:	fd 1f       	adc	r31, r29
    6702:	e1 0f       	add	r30, r17
    6704:	f1 1d       	adc	r31, r1
    6706:	80 81       	ld	r24, Z
    6708:	80 33       	cpi	r24, 0x30	; 48
    670a:	19 f4       	brne	.+6      	; 0x6712 <vfprintf+0x22e>
    670c:	11 50       	subi	r17, 0x01	; 1
    670e:	11 11       	cpse	r17, r1
    6710:	f4 cf       	rjmp	.-24     	; 0x66fa <vfprintf+0x216>
    6712:	97 fe       	sbrs	r9, 7
    6714:	0e c0       	rjmp	.+28     	; 0x6732 <vfprintf+0x24e>
    6716:	44 24       	eor	r4, r4
    6718:	43 94       	inc	r4
    671a:	41 0e       	add	r4, r17
    671c:	81 2f       	mov	r24, r17
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	c8 16       	cp	r12, r24
    6722:	d9 06       	cpc	r13, r25
    6724:	2c f4       	brge	.+10     	; 0x6730 <vfprintf+0x24c>
    6726:	1c 19       	sub	r17, r12
    6728:	04 c0       	rjmp	.+8      	; 0x6732 <vfprintf+0x24e>
    672a:	44 24       	eor	r4, r4
    672c:	43 94       	inc	r4
    672e:	01 c0       	rjmp	.+2      	; 0x6732 <vfprintf+0x24e>
    6730:	10 e0       	ldi	r17, 0x00	; 0
    6732:	97 fe       	sbrs	r9, 7
    6734:	06 c0       	rjmp	.+12     	; 0x6742 <vfprintf+0x25e>
    6736:	1c 14       	cp	r1, r12
    6738:	1d 04       	cpc	r1, r13
    673a:	34 f4       	brge	.+12     	; 0x6748 <vfprintf+0x264>
    673c:	c6 01       	movw	r24, r12
    673e:	01 96       	adiw	r24, 0x01	; 1
    6740:	05 c0       	rjmp	.+10     	; 0x674c <vfprintf+0x268>
    6742:	85 e0       	ldi	r24, 0x05	; 5
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	02 c0       	rjmp	.+4      	; 0x674c <vfprintf+0x268>
    6748:	81 e0       	ldi	r24, 0x01	; 1
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	01 11       	cpse	r16, r1
    674e:	01 96       	adiw	r24, 0x01	; 1
    6750:	11 23       	and	r17, r17
    6752:	31 f0       	breq	.+12     	; 0x6760 <vfprintf+0x27c>
    6754:	21 2f       	mov	r18, r17
    6756:	30 e0       	ldi	r19, 0x00	; 0
    6758:	2f 5f       	subi	r18, 0xFF	; 255
    675a:	3f 4f       	sbci	r19, 0xFF	; 255
    675c:	82 0f       	add	r24, r18
    675e:	93 1f       	adc	r25, r19
    6760:	25 2d       	mov	r18, r5
    6762:	30 e0       	ldi	r19, 0x00	; 0
    6764:	82 17       	cp	r24, r18
    6766:	93 07       	cpc	r25, r19
    6768:	14 f4       	brge	.+4      	; 0x676e <vfprintf+0x28a>
    676a:	58 1a       	sub	r5, r24
    676c:	01 c0       	rjmp	.+2      	; 0x6770 <vfprintf+0x28c>
    676e:	51 2c       	mov	r5, r1
    6770:	89 2d       	mov	r24, r9
    6772:	89 70       	andi	r24, 0x09	; 9
    6774:	41 f4       	brne	.+16     	; 0x6786 <vfprintf+0x2a2>
    6776:	55 20       	and	r5, r5
    6778:	31 f0       	breq	.+12     	; 0x6786 <vfprintf+0x2a2>
    677a:	b7 01       	movw	r22, r14
    677c:	80 e2       	ldi	r24, 0x20	; 32
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	67 d3       	rcall	.+1742   	; 0x6e50 <fputc>
    6782:	5a 94       	dec	r5
    6784:	f8 cf       	rjmp	.-16     	; 0x6776 <vfprintf+0x292>
    6786:	00 23       	and	r16, r16
    6788:	21 f0       	breq	.+8      	; 0x6792 <vfprintf+0x2ae>
    678a:	b7 01       	movw	r22, r14
    678c:	80 2f       	mov	r24, r16
    678e:	90 e0       	ldi	r25, 0x00	; 0
    6790:	5f d3       	rcall	.+1726   	; 0x6e50 <fputc>
    6792:	93 fc       	sbrc	r9, 3
    6794:	08 c0       	rjmp	.+16     	; 0x67a6 <vfprintf+0x2c2>
    6796:	55 20       	and	r5, r5
    6798:	31 f0       	breq	.+12     	; 0x67a6 <vfprintf+0x2c2>
    679a:	b7 01       	movw	r22, r14
    679c:	80 e3       	ldi	r24, 0x30	; 48
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	57 d3       	rcall	.+1710   	; 0x6e50 <fputc>
    67a2:	5a 94       	dec	r5
    67a4:	f8 cf       	rjmp	.-16     	; 0x6796 <vfprintf+0x2b2>
    67a6:	97 fe       	sbrs	r9, 7
    67a8:	4a c0       	rjmp	.+148    	; 0x683e <vfprintf+0x35a>
    67aa:	46 01       	movw	r8, r12
    67ac:	d7 fe       	sbrs	r13, 7
    67ae:	02 c0       	rjmp	.+4      	; 0x67b4 <vfprintf+0x2d0>
    67b0:	81 2c       	mov	r8, r1
    67b2:	91 2c       	mov	r9, r1
    67b4:	c6 01       	movw	r24, r12
    67b6:	88 19       	sub	r24, r8
    67b8:	99 09       	sbc	r25, r9
    67ba:	f3 01       	movw	r30, r6
    67bc:	e8 0f       	add	r30, r24
    67be:	f9 1f       	adc	r31, r25
    67c0:	fe 87       	std	Y+14, r31	; 0x0e
    67c2:	ed 87       	std	Y+13, r30	; 0x0d
    67c4:	96 01       	movw	r18, r12
    67c6:	24 19       	sub	r18, r4
    67c8:	31 09       	sbc	r19, r1
    67ca:	38 8b       	std	Y+16, r19	; 0x10
    67cc:	2f 87       	std	Y+15, r18	; 0x0f
    67ce:	01 2f       	mov	r16, r17
    67d0:	10 e0       	ldi	r17, 0x00	; 0
    67d2:	11 95       	neg	r17
    67d4:	01 95       	neg	r16
    67d6:	11 09       	sbc	r17, r1
    67d8:	3f ef       	ldi	r19, 0xFF	; 255
    67da:	83 16       	cp	r8, r19
    67dc:	93 06       	cpc	r9, r19
    67de:	21 f4       	brne	.+8      	; 0x67e8 <vfprintf+0x304>
    67e0:	b7 01       	movw	r22, r14
    67e2:	8e e2       	ldi	r24, 0x2E	; 46
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	34 d3       	rcall	.+1640   	; 0x6e50 <fputc>
    67e8:	c8 14       	cp	r12, r8
    67ea:	d9 04       	cpc	r13, r9
    67ec:	4c f0       	brlt	.+18     	; 0x6800 <vfprintf+0x31c>
    67ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    67f0:	98 89       	ldd	r25, Y+16	; 0x10
    67f2:	88 15       	cp	r24, r8
    67f4:	99 05       	cpc	r25, r9
    67f6:	24 f4       	brge	.+8      	; 0x6800 <vfprintf+0x31c>
    67f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    67fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    67fc:	81 81       	ldd	r24, Z+1	; 0x01
    67fe:	01 c0       	rjmp	.+2      	; 0x6802 <vfprintf+0x31e>
    6800:	80 e3       	ldi	r24, 0x30	; 48
    6802:	f1 e0       	ldi	r31, 0x01	; 1
    6804:	8f 1a       	sub	r8, r31
    6806:	91 08       	sbc	r9, r1
    6808:	2d 85       	ldd	r18, Y+13	; 0x0d
    680a:	3e 85       	ldd	r19, Y+14	; 0x0e
    680c:	2f 5f       	subi	r18, 0xFF	; 255
    680e:	3f 4f       	sbci	r19, 0xFF	; 255
    6810:	3e 87       	std	Y+14, r19	; 0x0e
    6812:	2d 87       	std	Y+13, r18	; 0x0d
    6814:	80 16       	cp	r8, r16
    6816:	91 06       	cpc	r9, r17
    6818:	24 f0       	brlt	.+8      	; 0x6822 <vfprintf+0x33e>
    681a:	b7 01       	movw	r22, r14
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	18 d3       	rcall	.+1584   	; 0x6e50 <fputc>
    6820:	db cf       	rjmp	.-74     	; 0x67d8 <vfprintf+0x2f4>
    6822:	c8 14       	cp	r12, r8
    6824:	d9 04       	cpc	r13, r9
    6826:	41 f4       	brne	.+16     	; 0x6838 <vfprintf+0x354>
    6828:	9a 81       	ldd	r25, Y+2	; 0x02
    682a:	96 33       	cpi	r25, 0x36	; 54
    682c:	20 f4       	brcc	.+8      	; 0x6836 <vfprintf+0x352>
    682e:	95 33       	cpi	r25, 0x35	; 53
    6830:	19 f4       	brne	.+6      	; 0x6838 <vfprintf+0x354>
    6832:	3c 85       	ldd	r19, Y+12	; 0x0c
    6834:	34 ff       	sbrs	r19, 4
    6836:	81 e3       	ldi	r24, 0x31	; 49
    6838:	b7 01       	movw	r22, r14
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	48 c0       	rjmp	.+144    	; 0x68ce <vfprintf+0x3ea>
    683e:	8a 81       	ldd	r24, Y+2	; 0x02
    6840:	81 33       	cpi	r24, 0x31	; 49
    6842:	19 f0       	breq	.+6      	; 0x684a <vfprintf+0x366>
    6844:	9c 85       	ldd	r25, Y+12	; 0x0c
    6846:	9f 7e       	andi	r25, 0xEF	; 239
    6848:	9c 87       	std	Y+12, r25	; 0x0c
    684a:	b7 01       	movw	r22, r14
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	00 d3       	rcall	.+1536   	; 0x6e50 <fputc>
    6850:	11 11       	cpse	r17, r1
    6852:	05 c0       	rjmp	.+10     	; 0x685e <vfprintf+0x37a>
    6854:	94 fc       	sbrc	r9, 4
    6856:	16 c0       	rjmp	.+44     	; 0x6884 <vfprintf+0x3a0>
    6858:	85 e6       	ldi	r24, 0x65	; 101
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	15 c0       	rjmp	.+42     	; 0x6888 <vfprintf+0x3a4>
    685e:	b7 01       	movw	r22, r14
    6860:	8e e2       	ldi	r24, 0x2E	; 46
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	f5 d2       	rcall	.+1514   	; 0x6e50 <fputc>
    6866:	1e 5f       	subi	r17, 0xFE	; 254
    6868:	82 e0       	ldi	r24, 0x02	; 2
    686a:	01 e0       	ldi	r16, 0x01	; 1
    686c:	08 0f       	add	r16, r24
    686e:	f3 01       	movw	r30, r6
    6870:	e8 0f       	add	r30, r24
    6872:	f1 1d       	adc	r31, r1
    6874:	80 81       	ld	r24, Z
    6876:	b7 01       	movw	r22, r14
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	ea d2       	rcall	.+1492   	; 0x6e50 <fputc>
    687c:	80 2f       	mov	r24, r16
    687e:	01 13       	cpse	r16, r17
    6880:	f4 cf       	rjmp	.-24     	; 0x686a <vfprintf+0x386>
    6882:	e8 cf       	rjmp	.-48     	; 0x6854 <vfprintf+0x370>
    6884:	85 e4       	ldi	r24, 0x45	; 69
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	b7 01       	movw	r22, r14
    688a:	e2 d2       	rcall	.+1476   	; 0x6e50 <fputc>
    688c:	d7 fc       	sbrc	r13, 7
    688e:	06 c0       	rjmp	.+12     	; 0x689c <vfprintf+0x3b8>
    6890:	c1 14       	cp	r12, r1
    6892:	d1 04       	cpc	r13, r1
    6894:	41 f4       	brne	.+16     	; 0x68a6 <vfprintf+0x3c2>
    6896:	ec 85       	ldd	r30, Y+12	; 0x0c
    6898:	e4 ff       	sbrs	r30, 4
    689a:	05 c0       	rjmp	.+10     	; 0x68a6 <vfprintf+0x3c2>
    689c:	d1 94       	neg	r13
    689e:	c1 94       	neg	r12
    68a0:	d1 08       	sbc	r13, r1
    68a2:	8d e2       	ldi	r24, 0x2D	; 45
    68a4:	01 c0       	rjmp	.+2      	; 0x68a8 <vfprintf+0x3c4>
    68a6:	8b e2       	ldi	r24, 0x2B	; 43
    68a8:	b7 01       	movw	r22, r14
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	d1 d2       	rcall	.+1442   	; 0x6e50 <fputc>
    68ae:	80 e3       	ldi	r24, 0x30	; 48
    68b0:	2a e0       	ldi	r18, 0x0A	; 10
    68b2:	c2 16       	cp	r12, r18
    68b4:	d1 04       	cpc	r13, r1
    68b6:	2c f0       	brlt	.+10     	; 0x68c2 <vfprintf+0x3de>
    68b8:	8f 5f       	subi	r24, 0xFF	; 255
    68ba:	fa e0       	ldi	r31, 0x0A	; 10
    68bc:	cf 1a       	sub	r12, r31
    68be:	d1 08       	sbc	r13, r1
    68c0:	f7 cf       	rjmp	.-18     	; 0x68b0 <vfprintf+0x3cc>
    68c2:	b7 01       	movw	r22, r14
    68c4:	90 e0       	ldi	r25, 0x00	; 0
    68c6:	c4 d2       	rcall	.+1416   	; 0x6e50 <fputc>
    68c8:	b7 01       	movw	r22, r14
    68ca:	c6 01       	movw	r24, r12
    68cc:	c0 96       	adiw	r24, 0x30	; 48
    68ce:	c0 d2       	rcall	.+1408   	; 0x6e50 <fputc>
    68d0:	49 c1       	rjmp	.+658    	; 0x6b64 <vfprintf+0x680>
    68d2:	83 36       	cpi	r24, 0x63	; 99
    68d4:	31 f0       	breq	.+12     	; 0x68e2 <vfprintf+0x3fe>
    68d6:	83 37       	cpi	r24, 0x73	; 115
    68d8:	79 f0       	breq	.+30     	; 0x68f8 <vfprintf+0x414>
    68da:	83 35       	cpi	r24, 0x53	; 83
    68dc:	09 f0       	breq	.+2      	; 0x68e0 <vfprintf+0x3fc>
    68de:	52 c0       	rjmp	.+164    	; 0x6984 <vfprintf+0x4a0>
    68e0:	1f c0       	rjmp	.+62     	; 0x6920 <vfprintf+0x43c>
    68e2:	56 01       	movw	r10, r12
    68e4:	32 e0       	ldi	r19, 0x02	; 2
    68e6:	a3 0e       	add	r10, r19
    68e8:	b1 1c       	adc	r11, r1
    68ea:	f6 01       	movw	r30, r12
    68ec:	80 81       	ld	r24, Z
    68ee:	89 83       	std	Y+1, r24	; 0x01
    68f0:	01 e0       	ldi	r16, 0x01	; 1
    68f2:	10 e0       	ldi	r17, 0x00	; 0
    68f4:	63 01       	movw	r12, r6
    68f6:	11 c0       	rjmp	.+34     	; 0x691a <vfprintf+0x436>
    68f8:	56 01       	movw	r10, r12
    68fa:	f2 e0       	ldi	r31, 0x02	; 2
    68fc:	af 0e       	add	r10, r31
    68fe:	b1 1c       	adc	r11, r1
    6900:	f6 01       	movw	r30, r12
    6902:	c0 80       	ld	r12, Z
    6904:	d1 80       	ldd	r13, Z+1	; 0x01
    6906:	96 fe       	sbrs	r9, 6
    6908:	03 c0       	rjmp	.+6      	; 0x6910 <vfprintf+0x42c>
    690a:	61 2f       	mov	r22, r17
    690c:	70 e0       	ldi	r23, 0x00	; 0
    690e:	02 c0       	rjmp	.+4      	; 0x6914 <vfprintf+0x430>
    6910:	6f ef       	ldi	r22, 0xFF	; 255
    6912:	7f ef       	ldi	r23, 0xFF	; 255
    6914:	c6 01       	movw	r24, r12
    6916:	91 d2       	rcall	.+1314   	; 0x6e3a <strnlen>
    6918:	8c 01       	movw	r16, r24
    691a:	f9 2d       	mov	r31, r9
    691c:	ff 77       	andi	r31, 0x7F	; 127
    691e:	13 c0       	rjmp	.+38     	; 0x6946 <vfprintf+0x462>
    6920:	56 01       	movw	r10, r12
    6922:	22 e0       	ldi	r18, 0x02	; 2
    6924:	a2 0e       	add	r10, r18
    6926:	b1 1c       	adc	r11, r1
    6928:	f6 01       	movw	r30, r12
    692a:	c0 80       	ld	r12, Z
    692c:	d1 80       	ldd	r13, Z+1	; 0x01
    692e:	96 fe       	sbrs	r9, 6
    6930:	03 c0       	rjmp	.+6      	; 0x6938 <vfprintf+0x454>
    6932:	61 2f       	mov	r22, r17
    6934:	70 e0       	ldi	r23, 0x00	; 0
    6936:	02 c0       	rjmp	.+4      	; 0x693c <vfprintf+0x458>
    6938:	6f ef       	ldi	r22, 0xFF	; 255
    693a:	7f ef       	ldi	r23, 0xFF	; 255
    693c:	c6 01       	movw	r24, r12
    693e:	69 d2       	rcall	.+1234   	; 0x6e12 <strnlen_P>
    6940:	8c 01       	movw	r16, r24
    6942:	f9 2d       	mov	r31, r9
    6944:	f0 68       	ori	r31, 0x80	; 128
    6946:	9f 2e       	mov	r9, r31
    6948:	f3 fd       	sbrc	r31, 3
    694a:	18 c0       	rjmp	.+48     	; 0x697c <vfprintf+0x498>
    694c:	85 2d       	mov	r24, r5
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	08 17       	cp	r16, r24
    6952:	19 07       	cpc	r17, r25
    6954:	98 f4       	brcc	.+38     	; 0x697c <vfprintf+0x498>
    6956:	b7 01       	movw	r22, r14
    6958:	80 e2       	ldi	r24, 0x20	; 32
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	79 d2       	rcall	.+1266   	; 0x6e50 <fputc>
    695e:	5a 94       	dec	r5
    6960:	f5 cf       	rjmp	.-22     	; 0x694c <vfprintf+0x468>
    6962:	f6 01       	movw	r30, r12
    6964:	97 fc       	sbrc	r9, 7
    6966:	85 91       	lpm	r24, Z+
    6968:	97 fe       	sbrs	r9, 7
    696a:	81 91       	ld	r24, Z+
    696c:	6f 01       	movw	r12, r30
    696e:	b7 01       	movw	r22, r14
    6970:	90 e0       	ldi	r25, 0x00	; 0
    6972:	6e d2       	rcall	.+1244   	; 0x6e50 <fputc>
    6974:	51 10       	cpse	r5, r1
    6976:	5a 94       	dec	r5
    6978:	01 50       	subi	r16, 0x01	; 1
    697a:	11 09       	sbc	r17, r1
    697c:	01 15       	cp	r16, r1
    697e:	11 05       	cpc	r17, r1
    6980:	81 f7       	brne	.-32     	; 0x6962 <vfprintf+0x47e>
    6982:	f0 c0       	rjmp	.+480    	; 0x6b64 <vfprintf+0x680>
    6984:	84 36       	cpi	r24, 0x64	; 100
    6986:	11 f0       	breq	.+4      	; 0x698c <vfprintf+0x4a8>
    6988:	89 36       	cpi	r24, 0x69	; 105
    698a:	59 f5       	brne	.+86     	; 0x69e2 <vfprintf+0x4fe>
    698c:	56 01       	movw	r10, r12
    698e:	97 fe       	sbrs	r9, 7
    6990:	09 c0       	rjmp	.+18     	; 0x69a4 <vfprintf+0x4c0>
    6992:	24 e0       	ldi	r18, 0x04	; 4
    6994:	a2 0e       	add	r10, r18
    6996:	b1 1c       	adc	r11, r1
    6998:	f6 01       	movw	r30, r12
    699a:	60 81       	ld	r22, Z
    699c:	71 81       	ldd	r23, Z+1	; 0x01
    699e:	82 81       	ldd	r24, Z+2	; 0x02
    69a0:	93 81       	ldd	r25, Z+3	; 0x03
    69a2:	0a c0       	rjmp	.+20     	; 0x69b8 <vfprintf+0x4d4>
    69a4:	f2 e0       	ldi	r31, 0x02	; 2
    69a6:	af 0e       	add	r10, r31
    69a8:	b1 1c       	adc	r11, r1
    69aa:	f6 01       	movw	r30, r12
    69ac:	60 81       	ld	r22, Z
    69ae:	71 81       	ldd	r23, Z+1	; 0x01
    69b0:	07 2e       	mov	r0, r23
    69b2:	00 0c       	add	r0, r0
    69b4:	88 0b       	sbc	r24, r24
    69b6:	99 0b       	sbc	r25, r25
    69b8:	f9 2d       	mov	r31, r9
    69ba:	ff 76       	andi	r31, 0x6F	; 111
    69bc:	9f 2e       	mov	r9, r31
    69be:	97 ff       	sbrs	r25, 7
    69c0:	09 c0       	rjmp	.+18     	; 0x69d4 <vfprintf+0x4f0>
    69c2:	90 95       	com	r25
    69c4:	80 95       	com	r24
    69c6:	70 95       	com	r23
    69c8:	61 95       	neg	r22
    69ca:	7f 4f       	sbci	r23, 0xFF	; 255
    69cc:	8f 4f       	sbci	r24, 0xFF	; 255
    69ce:	9f 4f       	sbci	r25, 0xFF	; 255
    69d0:	f0 68       	ori	r31, 0x80	; 128
    69d2:	9f 2e       	mov	r9, r31
    69d4:	2a e0       	ldi	r18, 0x0A	; 10
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	a3 01       	movw	r20, r6
    69da:	9e d2       	rcall	.+1340   	; 0x6f18 <__ultoa_invert>
    69dc:	c8 2e       	mov	r12, r24
    69de:	c6 18       	sub	r12, r6
    69e0:	3e c0       	rjmp	.+124    	; 0x6a5e <vfprintf+0x57a>
    69e2:	09 2d       	mov	r16, r9
    69e4:	85 37       	cpi	r24, 0x75	; 117
    69e6:	21 f4       	brne	.+8      	; 0x69f0 <vfprintf+0x50c>
    69e8:	0f 7e       	andi	r16, 0xEF	; 239
    69ea:	2a e0       	ldi	r18, 0x0A	; 10
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	1d c0       	rjmp	.+58     	; 0x6a2a <vfprintf+0x546>
    69f0:	09 7f       	andi	r16, 0xF9	; 249
    69f2:	8f 36       	cpi	r24, 0x6F	; 111
    69f4:	91 f0       	breq	.+36     	; 0x6a1a <vfprintf+0x536>
    69f6:	18 f4       	brcc	.+6      	; 0x69fe <vfprintf+0x51a>
    69f8:	88 35       	cpi	r24, 0x58	; 88
    69fa:	59 f0       	breq	.+22     	; 0x6a12 <vfprintf+0x52e>
    69fc:	bc c0       	rjmp	.+376    	; 0x6b76 <vfprintf+0x692>
    69fe:	80 37       	cpi	r24, 0x70	; 112
    6a00:	19 f0       	breq	.+6      	; 0x6a08 <vfprintf+0x524>
    6a02:	88 37       	cpi	r24, 0x78	; 120
    6a04:	11 f0       	breq	.+4      	; 0x6a0a <vfprintf+0x526>
    6a06:	b7 c0       	rjmp	.+366    	; 0x6b76 <vfprintf+0x692>
    6a08:	00 61       	ori	r16, 0x10	; 16
    6a0a:	04 ff       	sbrs	r16, 4
    6a0c:	09 c0       	rjmp	.+18     	; 0x6a20 <vfprintf+0x53c>
    6a0e:	04 60       	ori	r16, 0x04	; 4
    6a10:	07 c0       	rjmp	.+14     	; 0x6a20 <vfprintf+0x53c>
    6a12:	94 fe       	sbrs	r9, 4
    6a14:	08 c0       	rjmp	.+16     	; 0x6a26 <vfprintf+0x542>
    6a16:	06 60       	ori	r16, 0x06	; 6
    6a18:	06 c0       	rjmp	.+12     	; 0x6a26 <vfprintf+0x542>
    6a1a:	28 e0       	ldi	r18, 0x08	; 8
    6a1c:	30 e0       	ldi	r19, 0x00	; 0
    6a1e:	05 c0       	rjmp	.+10     	; 0x6a2a <vfprintf+0x546>
    6a20:	20 e1       	ldi	r18, 0x10	; 16
    6a22:	30 e0       	ldi	r19, 0x00	; 0
    6a24:	02 c0       	rjmp	.+4      	; 0x6a2a <vfprintf+0x546>
    6a26:	20 e1       	ldi	r18, 0x10	; 16
    6a28:	32 e0       	ldi	r19, 0x02	; 2
    6a2a:	56 01       	movw	r10, r12
    6a2c:	07 ff       	sbrs	r16, 7
    6a2e:	09 c0       	rjmp	.+18     	; 0x6a42 <vfprintf+0x55e>
    6a30:	84 e0       	ldi	r24, 0x04	; 4
    6a32:	a8 0e       	add	r10, r24
    6a34:	b1 1c       	adc	r11, r1
    6a36:	f6 01       	movw	r30, r12
    6a38:	60 81       	ld	r22, Z
    6a3a:	71 81       	ldd	r23, Z+1	; 0x01
    6a3c:	82 81       	ldd	r24, Z+2	; 0x02
    6a3e:	93 81       	ldd	r25, Z+3	; 0x03
    6a40:	08 c0       	rjmp	.+16     	; 0x6a52 <vfprintf+0x56e>
    6a42:	f2 e0       	ldi	r31, 0x02	; 2
    6a44:	af 0e       	add	r10, r31
    6a46:	b1 1c       	adc	r11, r1
    6a48:	f6 01       	movw	r30, r12
    6a4a:	60 81       	ld	r22, Z
    6a4c:	71 81       	ldd	r23, Z+1	; 0x01
    6a4e:	80 e0       	ldi	r24, 0x00	; 0
    6a50:	90 e0       	ldi	r25, 0x00	; 0
    6a52:	a3 01       	movw	r20, r6
    6a54:	61 d2       	rcall	.+1218   	; 0x6f18 <__ultoa_invert>
    6a56:	c8 2e       	mov	r12, r24
    6a58:	c6 18       	sub	r12, r6
    6a5a:	0f 77       	andi	r16, 0x7F	; 127
    6a5c:	90 2e       	mov	r9, r16
    6a5e:	96 fe       	sbrs	r9, 6
    6a60:	0b c0       	rjmp	.+22     	; 0x6a78 <vfprintf+0x594>
    6a62:	09 2d       	mov	r16, r9
    6a64:	0e 7f       	andi	r16, 0xFE	; 254
    6a66:	c1 16       	cp	r12, r17
    6a68:	50 f4       	brcc	.+20     	; 0x6a7e <vfprintf+0x59a>
    6a6a:	94 fe       	sbrs	r9, 4
    6a6c:	0a c0       	rjmp	.+20     	; 0x6a82 <vfprintf+0x59e>
    6a6e:	92 fc       	sbrc	r9, 2
    6a70:	08 c0       	rjmp	.+16     	; 0x6a82 <vfprintf+0x59e>
    6a72:	09 2d       	mov	r16, r9
    6a74:	0e 7e       	andi	r16, 0xEE	; 238
    6a76:	05 c0       	rjmp	.+10     	; 0x6a82 <vfprintf+0x59e>
    6a78:	dc 2c       	mov	r13, r12
    6a7a:	09 2d       	mov	r16, r9
    6a7c:	03 c0       	rjmp	.+6      	; 0x6a84 <vfprintf+0x5a0>
    6a7e:	dc 2c       	mov	r13, r12
    6a80:	01 c0       	rjmp	.+2      	; 0x6a84 <vfprintf+0x5a0>
    6a82:	d1 2e       	mov	r13, r17
    6a84:	04 ff       	sbrs	r16, 4
    6a86:	0d c0       	rjmp	.+26     	; 0x6aa2 <vfprintf+0x5be>
    6a88:	fe 01       	movw	r30, r28
    6a8a:	ec 0d       	add	r30, r12
    6a8c:	f1 1d       	adc	r31, r1
    6a8e:	80 81       	ld	r24, Z
    6a90:	80 33       	cpi	r24, 0x30	; 48
    6a92:	11 f4       	brne	.+4      	; 0x6a98 <vfprintf+0x5b4>
    6a94:	09 7e       	andi	r16, 0xE9	; 233
    6a96:	09 c0       	rjmp	.+18     	; 0x6aaa <vfprintf+0x5c6>
    6a98:	02 ff       	sbrs	r16, 2
    6a9a:	06 c0       	rjmp	.+12     	; 0x6aa8 <vfprintf+0x5c4>
    6a9c:	d3 94       	inc	r13
    6a9e:	d3 94       	inc	r13
    6aa0:	04 c0       	rjmp	.+8      	; 0x6aaa <vfprintf+0x5c6>
    6aa2:	80 2f       	mov	r24, r16
    6aa4:	86 78       	andi	r24, 0x86	; 134
    6aa6:	09 f0       	breq	.+2      	; 0x6aaa <vfprintf+0x5c6>
    6aa8:	d3 94       	inc	r13
    6aaa:	03 fd       	sbrc	r16, 3
    6aac:	10 c0       	rjmp	.+32     	; 0x6ace <vfprintf+0x5ea>
    6aae:	00 ff       	sbrs	r16, 0
    6ab0:	06 c0       	rjmp	.+12     	; 0x6abe <vfprintf+0x5da>
    6ab2:	1c 2d       	mov	r17, r12
    6ab4:	d5 14       	cp	r13, r5
    6ab6:	78 f4       	brcc	.+30     	; 0x6ad6 <vfprintf+0x5f2>
    6ab8:	15 0d       	add	r17, r5
    6aba:	1d 19       	sub	r17, r13
    6abc:	0c c0       	rjmp	.+24     	; 0x6ad6 <vfprintf+0x5f2>
    6abe:	d5 14       	cp	r13, r5
    6ac0:	50 f4       	brcc	.+20     	; 0x6ad6 <vfprintf+0x5f2>
    6ac2:	b7 01       	movw	r22, r14
    6ac4:	80 e2       	ldi	r24, 0x20	; 32
    6ac6:	90 e0       	ldi	r25, 0x00	; 0
    6ac8:	c3 d1       	rcall	.+902    	; 0x6e50 <fputc>
    6aca:	d3 94       	inc	r13
    6acc:	f8 cf       	rjmp	.-16     	; 0x6abe <vfprintf+0x5da>
    6ace:	d5 14       	cp	r13, r5
    6ad0:	10 f4       	brcc	.+4      	; 0x6ad6 <vfprintf+0x5f2>
    6ad2:	5d 18       	sub	r5, r13
    6ad4:	01 c0       	rjmp	.+2      	; 0x6ad8 <vfprintf+0x5f4>
    6ad6:	51 2c       	mov	r5, r1
    6ad8:	04 ff       	sbrs	r16, 4
    6ada:	0f c0       	rjmp	.+30     	; 0x6afa <vfprintf+0x616>
    6adc:	b7 01       	movw	r22, r14
    6ade:	80 e3       	ldi	r24, 0x30	; 48
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	b6 d1       	rcall	.+876    	; 0x6e50 <fputc>
    6ae4:	02 ff       	sbrs	r16, 2
    6ae6:	16 c0       	rjmp	.+44     	; 0x6b14 <vfprintf+0x630>
    6ae8:	01 fd       	sbrc	r16, 1
    6aea:	03 c0       	rjmp	.+6      	; 0x6af2 <vfprintf+0x60e>
    6aec:	88 e7       	ldi	r24, 0x78	; 120
    6aee:	90 e0       	ldi	r25, 0x00	; 0
    6af0:	02 c0       	rjmp	.+4      	; 0x6af6 <vfprintf+0x612>
    6af2:	88 e5       	ldi	r24, 0x58	; 88
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	b7 01       	movw	r22, r14
    6af8:	0c c0       	rjmp	.+24     	; 0x6b12 <vfprintf+0x62e>
    6afa:	80 2f       	mov	r24, r16
    6afc:	86 78       	andi	r24, 0x86	; 134
    6afe:	51 f0       	breq	.+20     	; 0x6b14 <vfprintf+0x630>
    6b00:	01 ff       	sbrs	r16, 1
    6b02:	02 c0       	rjmp	.+4      	; 0x6b08 <vfprintf+0x624>
    6b04:	8b e2       	ldi	r24, 0x2B	; 43
    6b06:	01 c0       	rjmp	.+2      	; 0x6b0a <vfprintf+0x626>
    6b08:	80 e2       	ldi	r24, 0x20	; 32
    6b0a:	07 fd       	sbrc	r16, 7
    6b0c:	8d e2       	ldi	r24, 0x2D	; 45
    6b0e:	b7 01       	movw	r22, r14
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	9e d1       	rcall	.+828    	; 0x6e50 <fputc>
    6b14:	c1 16       	cp	r12, r17
    6b16:	30 f4       	brcc	.+12     	; 0x6b24 <vfprintf+0x640>
    6b18:	b7 01       	movw	r22, r14
    6b1a:	80 e3       	ldi	r24, 0x30	; 48
    6b1c:	90 e0       	ldi	r25, 0x00	; 0
    6b1e:	98 d1       	rcall	.+816    	; 0x6e50 <fputc>
    6b20:	11 50       	subi	r17, 0x01	; 1
    6b22:	f8 cf       	rjmp	.-16     	; 0x6b14 <vfprintf+0x630>
    6b24:	ca 94       	dec	r12
    6b26:	f3 01       	movw	r30, r6
    6b28:	ec 0d       	add	r30, r12
    6b2a:	f1 1d       	adc	r31, r1
    6b2c:	80 81       	ld	r24, Z
    6b2e:	b7 01       	movw	r22, r14
    6b30:	90 e0       	ldi	r25, 0x00	; 0
    6b32:	8e d1       	rcall	.+796    	; 0x6e50 <fputc>
    6b34:	c1 10       	cpse	r12, r1
    6b36:	f6 cf       	rjmp	.-20     	; 0x6b24 <vfprintf+0x640>
    6b38:	15 c0       	rjmp	.+42     	; 0x6b64 <vfprintf+0x680>
    6b3a:	f4 e0       	ldi	r31, 0x04	; 4
    6b3c:	f5 15       	cp	r31, r5
    6b3e:	50 f5       	brcc	.+84     	; 0x6b94 <vfprintf+0x6b0>
    6b40:	84 e0       	ldi	r24, 0x04	; 4
    6b42:	58 1a       	sub	r5, r24
    6b44:	93 fe       	sbrs	r9, 3
    6b46:	1e c0       	rjmp	.+60     	; 0x6b84 <vfprintf+0x6a0>
    6b48:	01 11       	cpse	r16, r1
    6b4a:	25 c0       	rjmp	.+74     	; 0x6b96 <vfprintf+0x6b2>
    6b4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b4e:	23 ff       	sbrs	r18, 3
    6b50:	27 c0       	rjmp	.+78     	; 0x6ba0 <vfprintf+0x6bc>
    6b52:	00 e3       	ldi	r16, 0x30	; 48
    6b54:	11 e0       	ldi	r17, 0x01	; 1
    6b56:	39 2d       	mov	r19, r9
    6b58:	30 71       	andi	r19, 0x10	; 16
    6b5a:	93 2e       	mov	r9, r19
    6b5c:	f8 01       	movw	r30, r16
    6b5e:	84 91       	lpm	r24, Z
    6b60:	81 11       	cpse	r24, r1
    6b62:	21 c0       	rjmp	.+66     	; 0x6ba6 <vfprintf+0x6c2>
    6b64:	55 20       	and	r5, r5
    6b66:	09 f4       	brne	.+2      	; 0x6b6a <vfprintf+0x686>
    6b68:	fc cc       	rjmp	.-1544   	; 0x6562 <vfprintf+0x7e>
    6b6a:	b7 01       	movw	r22, r14
    6b6c:	80 e2       	ldi	r24, 0x20	; 32
    6b6e:	90 e0       	ldi	r25, 0x00	; 0
    6b70:	6f d1       	rcall	.+734    	; 0x6e50 <fputc>
    6b72:	5a 94       	dec	r5
    6b74:	f7 cf       	rjmp	.-18     	; 0x6b64 <vfprintf+0x680>
    6b76:	f7 01       	movw	r30, r14
    6b78:	86 81       	ldd	r24, Z+6	; 0x06
    6b7a:	97 81       	ldd	r25, Z+7	; 0x07
    6b7c:	23 c0       	rjmp	.+70     	; 0x6bc4 <vfprintf+0x6e0>
    6b7e:	8f ef       	ldi	r24, 0xFF	; 255
    6b80:	9f ef       	ldi	r25, 0xFF	; 255
    6b82:	20 c0       	rjmp	.+64     	; 0x6bc4 <vfprintf+0x6e0>
    6b84:	b7 01       	movw	r22, r14
    6b86:	80 e2       	ldi	r24, 0x20	; 32
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	62 d1       	rcall	.+708    	; 0x6e50 <fputc>
    6b8c:	5a 94       	dec	r5
    6b8e:	51 10       	cpse	r5, r1
    6b90:	f9 cf       	rjmp	.-14     	; 0x6b84 <vfprintf+0x6a0>
    6b92:	da cf       	rjmp	.-76     	; 0x6b48 <vfprintf+0x664>
    6b94:	51 2c       	mov	r5, r1
    6b96:	b7 01       	movw	r22, r14
    6b98:	80 2f       	mov	r24, r16
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	59 d1       	rcall	.+690    	; 0x6e50 <fputc>
    6b9e:	d6 cf       	rjmp	.-84     	; 0x6b4c <vfprintf+0x668>
    6ba0:	04 e3       	ldi	r16, 0x34	; 52
    6ba2:	11 e0       	ldi	r17, 0x01	; 1
    6ba4:	d8 cf       	rjmp	.-80     	; 0x6b56 <vfprintf+0x672>
    6ba6:	91 10       	cpse	r9, r1
    6ba8:	80 52       	subi	r24, 0x20	; 32
    6baa:	b7 01       	movw	r22, r14
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	50 d1       	rcall	.+672    	; 0x6e50 <fputc>
    6bb0:	0f 5f       	subi	r16, 0xFF	; 255
    6bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb4:	d3 cf       	rjmp	.-90     	; 0x6b5c <vfprintf+0x678>
    6bb6:	23 e0       	ldi	r18, 0x03	; 3
    6bb8:	25 15       	cp	r18, r5
    6bba:	10 f4       	brcc	.+4      	; 0x6bc0 <vfprintf+0x6dc>
    6bbc:	83 e0       	ldi	r24, 0x03	; 3
    6bbe:	c1 cf       	rjmp	.-126    	; 0x6b42 <vfprintf+0x65e>
    6bc0:	51 2c       	mov	r5, r1
    6bc2:	c4 cf       	rjmp	.-120    	; 0x6b4c <vfprintf+0x668>
    6bc4:	60 96       	adiw	r28, 0x10	; 16
    6bc6:	0f b6       	in	r0, 0x3f	; 63
    6bc8:	f8 94       	cli
    6bca:	de bf       	out	0x3e, r29	; 62
    6bcc:	0f be       	out	0x3f, r0	; 63
    6bce:	cd bf       	out	0x3d, r28	; 61
    6bd0:	df 91       	pop	r29
    6bd2:	cf 91       	pop	r28
    6bd4:	1f 91       	pop	r17
    6bd6:	0f 91       	pop	r16
    6bd8:	ff 90       	pop	r15
    6bda:	ef 90       	pop	r14
    6bdc:	df 90       	pop	r13
    6bde:	cf 90       	pop	r12
    6be0:	bf 90       	pop	r11
    6be2:	af 90       	pop	r10
    6be4:	9f 90       	pop	r9
    6be6:	8f 90       	pop	r8
    6be8:	7f 90       	pop	r7
    6bea:	6f 90       	pop	r6
    6bec:	5f 90       	pop	r5
    6bee:	4f 90       	pop	r4
    6bf0:	3f 90       	pop	r3
    6bf2:	2f 90       	pop	r2
    6bf4:	08 95       	ret

00006bf6 <__divmodhi4>:
    6bf6:	97 fb       	bst	r25, 7
    6bf8:	07 2e       	mov	r0, r23
    6bfa:	16 f4       	brtc	.+4      	; 0x6c00 <__divmodhi4+0xa>
    6bfc:	00 94       	com	r0
    6bfe:	06 d0       	rcall	.+12     	; 0x6c0c <__divmodhi4_neg1>
    6c00:	77 fd       	sbrc	r23, 7
    6c02:	08 d0       	rcall	.+16     	; 0x6c14 <__divmodhi4_neg2>
    6c04:	1a d0       	rcall	.+52     	; 0x6c3a <__udivmodhi4>
    6c06:	07 fc       	sbrc	r0, 7
    6c08:	05 d0       	rcall	.+10     	; 0x6c14 <__divmodhi4_neg2>
    6c0a:	3e f4       	brtc	.+14     	; 0x6c1a <__divmodhi4_exit>

00006c0c <__divmodhi4_neg1>:
    6c0c:	90 95       	com	r25
    6c0e:	81 95       	neg	r24
    6c10:	9f 4f       	sbci	r25, 0xFF	; 255
    6c12:	08 95       	ret

00006c14 <__divmodhi4_neg2>:
    6c14:	70 95       	com	r23
    6c16:	61 95       	neg	r22
    6c18:	7f 4f       	sbci	r23, 0xFF	; 255

00006c1a <__divmodhi4_exit>:
    6c1a:	08 95       	ret

00006c1c <__umulhisi3>:
    6c1c:	a2 9f       	mul	r26, r18
    6c1e:	b0 01       	movw	r22, r0
    6c20:	b3 9f       	mul	r27, r19
    6c22:	c0 01       	movw	r24, r0
    6c24:	a3 9f       	mul	r26, r19
    6c26:	70 0d       	add	r23, r0
    6c28:	81 1d       	adc	r24, r1
    6c2a:	11 24       	eor	r1, r1
    6c2c:	91 1d       	adc	r25, r1
    6c2e:	b2 9f       	mul	r27, r18
    6c30:	70 0d       	add	r23, r0
    6c32:	81 1d       	adc	r24, r1
    6c34:	11 24       	eor	r1, r1
    6c36:	91 1d       	adc	r25, r1
    6c38:	08 95       	ret

00006c3a <__udivmodhi4>:
    6c3a:	aa 1b       	sub	r26, r26
    6c3c:	bb 1b       	sub	r27, r27
    6c3e:	51 e1       	ldi	r21, 0x11	; 17
    6c40:	07 c0       	rjmp	.+14     	; 0x6c50 <__udivmodhi4_ep>

00006c42 <__udivmodhi4_loop>:
    6c42:	aa 1f       	adc	r26, r26
    6c44:	bb 1f       	adc	r27, r27
    6c46:	a6 17       	cp	r26, r22
    6c48:	b7 07       	cpc	r27, r23
    6c4a:	10 f0       	brcs	.+4      	; 0x6c50 <__udivmodhi4_ep>
    6c4c:	a6 1b       	sub	r26, r22
    6c4e:	b7 0b       	sbc	r27, r23

00006c50 <__udivmodhi4_ep>:
    6c50:	88 1f       	adc	r24, r24
    6c52:	99 1f       	adc	r25, r25
    6c54:	5a 95       	dec	r21
    6c56:	a9 f7       	brne	.-22     	; 0x6c42 <__udivmodhi4_loop>
    6c58:	80 95       	com	r24
    6c5a:	90 95       	com	r25
    6c5c:	bc 01       	movw	r22, r24
    6c5e:	cd 01       	movw	r24, r26
    6c60:	08 95       	ret

00006c62 <__ftoa_engine>:
    6c62:	28 30       	cpi	r18, 0x08	; 8
    6c64:	08 f0       	brcs	.+2      	; 0x6c68 <__ftoa_engine+0x6>
    6c66:	27 e0       	ldi	r18, 0x07	; 7
    6c68:	33 27       	eor	r19, r19
    6c6a:	da 01       	movw	r26, r20
    6c6c:	99 0f       	add	r25, r25
    6c6e:	31 1d       	adc	r19, r1
    6c70:	87 fd       	sbrc	r24, 7
    6c72:	91 60       	ori	r25, 0x01	; 1
    6c74:	00 96       	adiw	r24, 0x00	; 0
    6c76:	61 05       	cpc	r22, r1
    6c78:	71 05       	cpc	r23, r1
    6c7a:	39 f4       	brne	.+14     	; 0x6c8a <__ftoa_engine+0x28>
    6c7c:	32 60       	ori	r19, 0x02	; 2
    6c7e:	2e 5f       	subi	r18, 0xFE	; 254
    6c80:	3d 93       	st	X+, r19
    6c82:	30 e3       	ldi	r19, 0x30	; 48
    6c84:	2a 95       	dec	r18
    6c86:	e1 f7       	brne	.-8      	; 0x6c80 <__ftoa_engine+0x1e>
    6c88:	08 95       	ret
    6c8a:	9f 3f       	cpi	r25, 0xFF	; 255
    6c8c:	30 f0       	brcs	.+12     	; 0x6c9a <__ftoa_engine+0x38>
    6c8e:	80 38       	cpi	r24, 0x80	; 128
    6c90:	71 05       	cpc	r23, r1
    6c92:	61 05       	cpc	r22, r1
    6c94:	09 f0       	breq	.+2      	; 0x6c98 <__ftoa_engine+0x36>
    6c96:	3c 5f       	subi	r19, 0xFC	; 252
    6c98:	3c 5f       	subi	r19, 0xFC	; 252
    6c9a:	3d 93       	st	X+, r19
    6c9c:	91 30       	cpi	r25, 0x01	; 1
    6c9e:	08 f0       	brcs	.+2      	; 0x6ca2 <__ftoa_engine+0x40>
    6ca0:	80 68       	ori	r24, 0x80	; 128
    6ca2:	91 1d       	adc	r25, r1
    6ca4:	df 93       	push	r29
    6ca6:	cf 93       	push	r28
    6ca8:	1f 93       	push	r17
    6caa:	0f 93       	push	r16
    6cac:	ff 92       	push	r15
    6cae:	ef 92       	push	r14
    6cb0:	19 2f       	mov	r17, r25
    6cb2:	98 7f       	andi	r25, 0xF8	; 248
    6cb4:	96 95       	lsr	r25
    6cb6:	e9 2f       	mov	r30, r25
    6cb8:	96 95       	lsr	r25
    6cba:	96 95       	lsr	r25
    6cbc:	e9 0f       	add	r30, r25
    6cbe:	ff 27       	eor	r31, r31
    6cc0:	ee 56       	subi	r30, 0x6E	; 110
    6cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    6cc4:	99 27       	eor	r25, r25
    6cc6:	33 27       	eor	r19, r19
    6cc8:	ee 24       	eor	r14, r14
    6cca:	ff 24       	eor	r15, r15
    6ccc:	a7 01       	movw	r20, r14
    6cce:	e7 01       	movw	r28, r14
    6cd0:	05 90       	lpm	r0, Z+
    6cd2:	08 94       	sec
    6cd4:	07 94       	ror	r0
    6cd6:	28 f4       	brcc	.+10     	; 0x6ce2 <__ftoa_engine+0x80>
    6cd8:	36 0f       	add	r19, r22
    6cda:	e7 1e       	adc	r14, r23
    6cdc:	f8 1e       	adc	r15, r24
    6cde:	49 1f       	adc	r20, r25
    6ce0:	51 1d       	adc	r21, r1
    6ce2:	66 0f       	add	r22, r22
    6ce4:	77 1f       	adc	r23, r23
    6ce6:	88 1f       	adc	r24, r24
    6ce8:	99 1f       	adc	r25, r25
    6cea:	06 94       	lsr	r0
    6cec:	a1 f7       	brne	.-24     	; 0x6cd6 <__ftoa_engine+0x74>
    6cee:	05 90       	lpm	r0, Z+
    6cf0:	07 94       	ror	r0
    6cf2:	28 f4       	brcc	.+10     	; 0x6cfe <__ftoa_engine+0x9c>
    6cf4:	e7 0e       	add	r14, r23
    6cf6:	f8 1e       	adc	r15, r24
    6cf8:	49 1f       	adc	r20, r25
    6cfa:	56 1f       	adc	r21, r22
    6cfc:	c1 1d       	adc	r28, r1
    6cfe:	77 0f       	add	r23, r23
    6d00:	88 1f       	adc	r24, r24
    6d02:	99 1f       	adc	r25, r25
    6d04:	66 1f       	adc	r22, r22
    6d06:	06 94       	lsr	r0
    6d08:	a1 f7       	brne	.-24     	; 0x6cf2 <__ftoa_engine+0x90>
    6d0a:	05 90       	lpm	r0, Z+
    6d0c:	07 94       	ror	r0
    6d0e:	28 f4       	brcc	.+10     	; 0x6d1a <__ftoa_engine+0xb8>
    6d10:	f8 0e       	add	r15, r24
    6d12:	49 1f       	adc	r20, r25
    6d14:	56 1f       	adc	r21, r22
    6d16:	c7 1f       	adc	r28, r23
    6d18:	d1 1d       	adc	r29, r1
    6d1a:	88 0f       	add	r24, r24
    6d1c:	99 1f       	adc	r25, r25
    6d1e:	66 1f       	adc	r22, r22
    6d20:	77 1f       	adc	r23, r23
    6d22:	06 94       	lsr	r0
    6d24:	a1 f7       	brne	.-24     	; 0x6d0e <__ftoa_engine+0xac>
    6d26:	05 90       	lpm	r0, Z+
    6d28:	07 94       	ror	r0
    6d2a:	20 f4       	brcc	.+8      	; 0x6d34 <__ftoa_engine+0xd2>
    6d2c:	49 0f       	add	r20, r25
    6d2e:	56 1f       	adc	r21, r22
    6d30:	c7 1f       	adc	r28, r23
    6d32:	d8 1f       	adc	r29, r24
    6d34:	99 0f       	add	r25, r25
    6d36:	66 1f       	adc	r22, r22
    6d38:	77 1f       	adc	r23, r23
    6d3a:	88 1f       	adc	r24, r24
    6d3c:	06 94       	lsr	r0
    6d3e:	a9 f7       	brne	.-22     	; 0x6d2a <__ftoa_engine+0xc8>
    6d40:	84 91       	lpm	r24, Z
    6d42:	10 95       	com	r17
    6d44:	17 70       	andi	r17, 0x07	; 7
    6d46:	41 f0       	breq	.+16     	; 0x6d58 <__ftoa_engine+0xf6>
    6d48:	d6 95       	lsr	r29
    6d4a:	c7 95       	ror	r28
    6d4c:	57 95       	ror	r21
    6d4e:	47 95       	ror	r20
    6d50:	f7 94       	ror	r15
    6d52:	e7 94       	ror	r14
    6d54:	1a 95       	dec	r17
    6d56:	c1 f7       	brne	.-16     	; 0x6d48 <__ftoa_engine+0xe6>
    6d58:	e8 e3       	ldi	r30, 0x38	; 56
    6d5a:	f1 e0       	ldi	r31, 0x01	; 1
    6d5c:	68 94       	set
    6d5e:	15 90       	lpm	r1, Z+
    6d60:	15 91       	lpm	r17, Z+
    6d62:	35 91       	lpm	r19, Z+
    6d64:	65 91       	lpm	r22, Z+
    6d66:	95 91       	lpm	r25, Z+
    6d68:	05 90       	lpm	r0, Z+
    6d6a:	7f e2       	ldi	r23, 0x2F	; 47
    6d6c:	73 95       	inc	r23
    6d6e:	e1 18       	sub	r14, r1
    6d70:	f1 0a       	sbc	r15, r17
    6d72:	43 0b       	sbc	r20, r19
    6d74:	56 0b       	sbc	r21, r22
    6d76:	c9 0b       	sbc	r28, r25
    6d78:	d0 09       	sbc	r29, r0
    6d7a:	c0 f7       	brcc	.-16     	; 0x6d6c <__ftoa_engine+0x10a>
    6d7c:	e1 0c       	add	r14, r1
    6d7e:	f1 1e       	adc	r15, r17
    6d80:	43 1f       	adc	r20, r19
    6d82:	56 1f       	adc	r21, r22
    6d84:	c9 1f       	adc	r28, r25
    6d86:	d0 1d       	adc	r29, r0
    6d88:	7e f4       	brtc	.+30     	; 0x6da8 <__ftoa_engine+0x146>
    6d8a:	70 33       	cpi	r23, 0x30	; 48
    6d8c:	11 f4       	brne	.+4      	; 0x6d92 <__ftoa_engine+0x130>
    6d8e:	8a 95       	dec	r24
    6d90:	e6 cf       	rjmp	.-52     	; 0x6d5e <__ftoa_engine+0xfc>
    6d92:	e8 94       	clt
    6d94:	01 50       	subi	r16, 0x01	; 1
    6d96:	30 f0       	brcs	.+12     	; 0x6da4 <__ftoa_engine+0x142>
    6d98:	08 0f       	add	r16, r24
    6d9a:	0a f4       	brpl	.+2      	; 0x6d9e <__ftoa_engine+0x13c>
    6d9c:	00 27       	eor	r16, r16
    6d9e:	02 17       	cp	r16, r18
    6da0:	08 f4       	brcc	.+2      	; 0x6da4 <__ftoa_engine+0x142>
    6da2:	20 2f       	mov	r18, r16
    6da4:	23 95       	inc	r18
    6da6:	02 2f       	mov	r16, r18
    6da8:	7a 33       	cpi	r23, 0x3A	; 58
    6daa:	28 f0       	brcs	.+10     	; 0x6db6 <__ftoa_engine+0x154>
    6dac:	79 e3       	ldi	r23, 0x39	; 57
    6dae:	7d 93       	st	X+, r23
    6db0:	2a 95       	dec	r18
    6db2:	e9 f7       	brne	.-6      	; 0x6dae <__ftoa_engine+0x14c>
    6db4:	10 c0       	rjmp	.+32     	; 0x6dd6 <__ftoa_engine+0x174>
    6db6:	7d 93       	st	X+, r23
    6db8:	2a 95       	dec	r18
    6dba:	89 f6       	brne	.-94     	; 0x6d5e <__ftoa_engine+0xfc>
    6dbc:	06 94       	lsr	r0
    6dbe:	97 95       	ror	r25
    6dc0:	67 95       	ror	r22
    6dc2:	37 95       	ror	r19
    6dc4:	17 95       	ror	r17
    6dc6:	17 94       	ror	r1
    6dc8:	e1 18       	sub	r14, r1
    6dca:	f1 0a       	sbc	r15, r17
    6dcc:	43 0b       	sbc	r20, r19
    6dce:	56 0b       	sbc	r21, r22
    6dd0:	c9 0b       	sbc	r28, r25
    6dd2:	d0 09       	sbc	r29, r0
    6dd4:	98 f0       	brcs	.+38     	; 0x6dfc <__ftoa_engine+0x19a>
    6dd6:	23 95       	inc	r18
    6dd8:	7e 91       	ld	r23, -X
    6dda:	73 95       	inc	r23
    6ddc:	7a 33       	cpi	r23, 0x3A	; 58
    6dde:	08 f0       	brcs	.+2      	; 0x6de2 <__ftoa_engine+0x180>
    6de0:	70 e3       	ldi	r23, 0x30	; 48
    6de2:	7c 93       	st	X, r23
    6de4:	20 13       	cpse	r18, r16
    6de6:	b8 f7       	brcc	.-18     	; 0x6dd6 <__ftoa_engine+0x174>
    6de8:	7e 91       	ld	r23, -X
    6dea:	70 61       	ori	r23, 0x10	; 16
    6dec:	7d 93       	st	X+, r23
    6dee:	30 f0       	brcs	.+12     	; 0x6dfc <__ftoa_engine+0x19a>
    6df0:	83 95       	inc	r24
    6df2:	71 e3       	ldi	r23, 0x31	; 49
    6df4:	7d 93       	st	X+, r23
    6df6:	70 e3       	ldi	r23, 0x30	; 48
    6df8:	2a 95       	dec	r18
    6dfa:	e1 f7       	brne	.-8      	; 0x6df4 <__ftoa_engine+0x192>
    6dfc:	11 24       	eor	r1, r1
    6dfe:	ef 90       	pop	r14
    6e00:	ff 90       	pop	r15
    6e02:	0f 91       	pop	r16
    6e04:	1f 91       	pop	r17
    6e06:	cf 91       	pop	r28
    6e08:	df 91       	pop	r29
    6e0a:	99 27       	eor	r25, r25
    6e0c:	87 fd       	sbrc	r24, 7
    6e0e:	90 95       	com	r25
    6e10:	08 95       	ret

00006e12 <strnlen_P>:
    6e12:	fc 01       	movw	r30, r24
    6e14:	05 90       	lpm	r0, Z+
    6e16:	61 50       	subi	r22, 0x01	; 1
    6e18:	70 40       	sbci	r23, 0x00	; 0
    6e1a:	01 10       	cpse	r0, r1
    6e1c:	d8 f7       	brcc	.-10     	; 0x6e14 <strnlen_P+0x2>
    6e1e:	80 95       	com	r24
    6e20:	90 95       	com	r25
    6e22:	8e 0f       	add	r24, r30
    6e24:	9f 1f       	adc	r25, r31
    6e26:	08 95       	ret

00006e28 <memcpy>:
    6e28:	fb 01       	movw	r30, r22
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	02 c0       	rjmp	.+4      	; 0x6e32 <memcpy+0xa>
    6e2e:	01 90       	ld	r0, Z+
    6e30:	0d 92       	st	X+, r0
    6e32:	41 50       	subi	r20, 0x01	; 1
    6e34:	50 40       	sbci	r21, 0x00	; 0
    6e36:	d8 f7       	brcc	.-10     	; 0x6e2e <memcpy+0x6>
    6e38:	08 95       	ret

00006e3a <strnlen>:
    6e3a:	fc 01       	movw	r30, r24
    6e3c:	61 50       	subi	r22, 0x01	; 1
    6e3e:	70 40       	sbci	r23, 0x00	; 0
    6e40:	01 90       	ld	r0, Z+
    6e42:	01 10       	cpse	r0, r1
    6e44:	d8 f7       	brcc	.-10     	; 0x6e3c <strnlen+0x2>
    6e46:	80 95       	com	r24
    6e48:	90 95       	com	r25
    6e4a:	8e 0f       	add	r24, r30
    6e4c:	9f 1f       	adc	r25, r31
    6e4e:	08 95       	ret

00006e50 <fputc>:
    6e50:	0f 93       	push	r16
    6e52:	1f 93       	push	r17
    6e54:	cf 93       	push	r28
    6e56:	df 93       	push	r29
    6e58:	fb 01       	movw	r30, r22
    6e5a:	23 81       	ldd	r18, Z+3	; 0x03
    6e5c:	21 fd       	sbrc	r18, 1
    6e5e:	03 c0       	rjmp	.+6      	; 0x6e66 <fputc+0x16>
    6e60:	8f ef       	ldi	r24, 0xFF	; 255
    6e62:	9f ef       	ldi	r25, 0xFF	; 255
    6e64:	2c c0       	rjmp	.+88     	; 0x6ebe <fputc+0x6e>
    6e66:	22 ff       	sbrs	r18, 2
    6e68:	16 c0       	rjmp	.+44     	; 0x6e96 <fputc+0x46>
    6e6a:	46 81       	ldd	r20, Z+6	; 0x06
    6e6c:	57 81       	ldd	r21, Z+7	; 0x07
    6e6e:	24 81       	ldd	r18, Z+4	; 0x04
    6e70:	35 81       	ldd	r19, Z+5	; 0x05
    6e72:	42 17       	cp	r20, r18
    6e74:	53 07       	cpc	r21, r19
    6e76:	44 f4       	brge	.+16     	; 0x6e88 <fputc+0x38>
    6e78:	a0 81       	ld	r26, Z
    6e7a:	b1 81       	ldd	r27, Z+1	; 0x01
    6e7c:	9d 01       	movw	r18, r26
    6e7e:	2f 5f       	subi	r18, 0xFF	; 255
    6e80:	3f 4f       	sbci	r19, 0xFF	; 255
    6e82:	31 83       	std	Z+1, r19	; 0x01
    6e84:	20 83       	st	Z, r18
    6e86:	8c 93       	st	X, r24
    6e88:	26 81       	ldd	r18, Z+6	; 0x06
    6e8a:	37 81       	ldd	r19, Z+7	; 0x07
    6e8c:	2f 5f       	subi	r18, 0xFF	; 255
    6e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e90:	37 83       	std	Z+7, r19	; 0x07
    6e92:	26 83       	std	Z+6, r18	; 0x06
    6e94:	14 c0       	rjmp	.+40     	; 0x6ebe <fputc+0x6e>
    6e96:	8b 01       	movw	r16, r22
    6e98:	ec 01       	movw	r28, r24
    6e9a:	fb 01       	movw	r30, r22
    6e9c:	00 84       	ldd	r0, Z+8	; 0x08
    6e9e:	f1 85       	ldd	r31, Z+9	; 0x09
    6ea0:	e0 2d       	mov	r30, r0
    6ea2:	19 95       	eicall
    6ea4:	89 2b       	or	r24, r25
    6ea6:	e1 f6       	brne	.-72     	; 0x6e60 <fputc+0x10>
    6ea8:	d8 01       	movw	r26, r16
    6eaa:	16 96       	adiw	r26, 0x06	; 6
    6eac:	8d 91       	ld	r24, X+
    6eae:	9c 91       	ld	r25, X
    6eb0:	17 97       	sbiw	r26, 0x07	; 7
    6eb2:	01 96       	adiw	r24, 0x01	; 1
    6eb4:	17 96       	adiw	r26, 0x07	; 7
    6eb6:	9c 93       	st	X, r25
    6eb8:	8e 93       	st	-X, r24
    6eba:	16 97       	sbiw	r26, 0x06	; 6
    6ebc:	ce 01       	movw	r24, r28
    6ebe:	df 91       	pop	r29
    6ec0:	cf 91       	pop	r28
    6ec2:	1f 91       	pop	r17
    6ec4:	0f 91       	pop	r16
    6ec6:	08 95       	ret

00006ec8 <vsprintf>:
    6ec8:	0f 93       	push	r16
    6eca:	1f 93       	push	r17
    6ecc:	cf 93       	push	r28
    6ece:	df 93       	push	r29
    6ed0:	cd b7       	in	r28, 0x3d	; 61
    6ed2:	de b7       	in	r29, 0x3e	; 62
    6ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	8c 01       	movw	r16, r24
    6ee2:	86 e0       	ldi	r24, 0x06	; 6
    6ee4:	8c 83       	std	Y+4, r24	; 0x04
    6ee6:	1a 83       	std	Y+2, r17	; 0x02
    6ee8:	09 83       	std	Y+1, r16	; 0x01
    6eea:	8f ef       	ldi	r24, 0xFF	; 255
    6eec:	9f e7       	ldi	r25, 0x7F	; 127
    6eee:	9e 83       	std	Y+6, r25	; 0x06
    6ef0:	8d 83       	std	Y+5, r24	; 0x05
    6ef2:	ce 01       	movw	r24, r28
    6ef4:	01 96       	adiw	r24, 0x01	; 1
    6ef6:	f6 da       	rcall	.-2580   	; 0x64e4 <vfprintf>
    6ef8:	ef 81       	ldd	r30, Y+7	; 0x07
    6efa:	f8 85       	ldd	r31, Y+8	; 0x08
    6efc:	e0 0f       	add	r30, r16
    6efe:	f1 1f       	adc	r31, r17
    6f00:	10 82       	st	Z, r1
    6f02:	2e 96       	adiw	r28, 0x0e	; 14
    6f04:	0f b6       	in	r0, 0x3f	; 63
    6f06:	f8 94       	cli
    6f08:	de bf       	out	0x3e, r29	; 62
    6f0a:	0f be       	out	0x3f, r0	; 63
    6f0c:	cd bf       	out	0x3d, r28	; 61
    6f0e:	df 91       	pop	r29
    6f10:	cf 91       	pop	r28
    6f12:	1f 91       	pop	r17
    6f14:	0f 91       	pop	r16
    6f16:	08 95       	ret

00006f18 <__ultoa_invert>:
    6f18:	fa 01       	movw	r30, r20
    6f1a:	aa 27       	eor	r26, r26
    6f1c:	28 30       	cpi	r18, 0x08	; 8
    6f1e:	51 f1       	breq	.+84     	; 0x6f74 <__ultoa_invert+0x5c>
    6f20:	20 31       	cpi	r18, 0x10	; 16
    6f22:	81 f1       	breq	.+96     	; 0x6f84 <__ultoa_invert+0x6c>
    6f24:	e8 94       	clt
    6f26:	6f 93       	push	r22
    6f28:	6e 7f       	andi	r22, 0xFE	; 254
    6f2a:	6e 5f       	subi	r22, 0xFE	; 254
    6f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f30:	9f 4f       	sbci	r25, 0xFF	; 255
    6f32:	af 4f       	sbci	r26, 0xFF	; 255
    6f34:	b1 e0       	ldi	r27, 0x01	; 1
    6f36:	3e d0       	rcall	.+124    	; 0x6fb4 <__ultoa_invert+0x9c>
    6f38:	b4 e0       	ldi	r27, 0x04	; 4
    6f3a:	3c d0       	rcall	.+120    	; 0x6fb4 <__ultoa_invert+0x9c>
    6f3c:	67 0f       	add	r22, r23
    6f3e:	78 1f       	adc	r23, r24
    6f40:	89 1f       	adc	r24, r25
    6f42:	9a 1f       	adc	r25, r26
    6f44:	a1 1d       	adc	r26, r1
    6f46:	68 0f       	add	r22, r24
    6f48:	79 1f       	adc	r23, r25
    6f4a:	8a 1f       	adc	r24, r26
    6f4c:	91 1d       	adc	r25, r1
    6f4e:	a1 1d       	adc	r26, r1
    6f50:	6a 0f       	add	r22, r26
    6f52:	71 1d       	adc	r23, r1
    6f54:	81 1d       	adc	r24, r1
    6f56:	91 1d       	adc	r25, r1
    6f58:	a1 1d       	adc	r26, r1
    6f5a:	20 d0       	rcall	.+64     	; 0x6f9c <__ultoa_invert+0x84>
    6f5c:	09 f4       	brne	.+2      	; 0x6f60 <__ultoa_invert+0x48>
    6f5e:	68 94       	set
    6f60:	3f 91       	pop	r19
    6f62:	2a e0       	ldi	r18, 0x0A	; 10
    6f64:	26 9f       	mul	r18, r22
    6f66:	11 24       	eor	r1, r1
    6f68:	30 19       	sub	r19, r0
    6f6a:	30 5d       	subi	r19, 0xD0	; 208
    6f6c:	31 93       	st	Z+, r19
    6f6e:	de f6       	brtc	.-74     	; 0x6f26 <__ultoa_invert+0xe>
    6f70:	cf 01       	movw	r24, r30
    6f72:	08 95       	ret
    6f74:	46 2f       	mov	r20, r22
    6f76:	47 70       	andi	r20, 0x07	; 7
    6f78:	40 5d       	subi	r20, 0xD0	; 208
    6f7a:	41 93       	st	Z+, r20
    6f7c:	b3 e0       	ldi	r27, 0x03	; 3
    6f7e:	0f d0       	rcall	.+30     	; 0x6f9e <__ultoa_invert+0x86>
    6f80:	c9 f7       	brne	.-14     	; 0x6f74 <__ultoa_invert+0x5c>
    6f82:	f6 cf       	rjmp	.-20     	; 0x6f70 <__ultoa_invert+0x58>
    6f84:	46 2f       	mov	r20, r22
    6f86:	4f 70       	andi	r20, 0x0F	; 15
    6f88:	40 5d       	subi	r20, 0xD0	; 208
    6f8a:	4a 33       	cpi	r20, 0x3A	; 58
    6f8c:	18 f0       	brcs	.+6      	; 0x6f94 <__ultoa_invert+0x7c>
    6f8e:	49 5d       	subi	r20, 0xD9	; 217
    6f90:	31 fd       	sbrc	r19, 1
    6f92:	40 52       	subi	r20, 0x20	; 32
    6f94:	41 93       	st	Z+, r20
    6f96:	02 d0       	rcall	.+4      	; 0x6f9c <__ultoa_invert+0x84>
    6f98:	a9 f7       	brne	.-22     	; 0x6f84 <__ultoa_invert+0x6c>
    6f9a:	ea cf       	rjmp	.-44     	; 0x6f70 <__ultoa_invert+0x58>
    6f9c:	b4 e0       	ldi	r27, 0x04	; 4
    6f9e:	a6 95       	lsr	r26
    6fa0:	97 95       	ror	r25
    6fa2:	87 95       	ror	r24
    6fa4:	77 95       	ror	r23
    6fa6:	67 95       	ror	r22
    6fa8:	ba 95       	dec	r27
    6faa:	c9 f7       	brne	.-14     	; 0x6f9e <__ultoa_invert+0x86>
    6fac:	00 97       	sbiw	r24, 0x00	; 0
    6fae:	61 05       	cpc	r22, r1
    6fb0:	71 05       	cpc	r23, r1
    6fb2:	08 95       	ret
    6fb4:	9b 01       	movw	r18, r22
    6fb6:	ac 01       	movw	r20, r24
    6fb8:	0a 2e       	mov	r0, r26
    6fba:	06 94       	lsr	r0
    6fbc:	57 95       	ror	r21
    6fbe:	47 95       	ror	r20
    6fc0:	37 95       	ror	r19
    6fc2:	27 95       	ror	r18
    6fc4:	ba 95       	dec	r27
    6fc6:	c9 f7       	brne	.-14     	; 0x6fba <__ultoa_invert+0xa2>
    6fc8:	62 0f       	add	r22, r18
    6fca:	73 1f       	adc	r23, r19
    6fcc:	84 1f       	adc	r24, r20
    6fce:	95 1f       	adc	r25, r21
    6fd0:	a0 1d       	adc	r26, r0
    6fd2:	08 95       	ret

00006fd4 <_exit>:
    6fd4:	f8 94       	cli

00006fd6 <__stop_program>:
    6fd6:	ff cf       	rjmp	.-2      	; 0x6fd6 <__stop_program>
