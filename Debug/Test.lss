
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000586  00800200  00006ffc  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  00800786  00800786  00007616  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  000076b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a750  00000000  00000000  00007e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021e4  00000000  00000000  00012584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005feb  00000000  00000000  00014768  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001954  00000000  00000000  0001a754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002eda  00000000  00000000  0001c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ac3b  00000000  00000000  0001ef82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000868  00000000  00000000  00029bbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_3>
      10:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__vector_4>
      14:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 c2 2e 	jmp	0x5d84	; 0x5d84 <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	c9 ed       	ldi	r28, 0xD9	; 217
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	ec ef       	ldi	r30, 0xFC	; 252
     25a:	ff e6       	ldi	r31, 0x6F	; 111
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a6 38       	cpi	r26, 0x86	; 134
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2c e1       	ldi	r18, 0x1C	; 28
     26e:	a6 e8       	ldi	r26, 0x86	; 134
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	ac 34       	cpi	r26, 0x4C	; 76
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 c8 13 	call	0x2790	; 0x2790 <main>
     280:	0c 94 fc 37 	jmp	0x6ff8	; 0x6ff8 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 20 16 	call	0x2c40	; 0x2c40 <network_set_callback>
     294:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <__data_end+0x1>
     298:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <__data_end>
     29c:	c8 e8       	ldi	r28, 0x88	; 136
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 84 18 	call	0x3108	; 0x3108 <xQueueCreateMutex>
     2b0:	90 93 12 08 	sts	0x0812, r25	; 0x800812 <connections+0x8a>
     2b4:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	e8 e8       	ldi	r30, 0x88	; 136
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <connections+0x8c>
     2ea:	10 92 13 08 	sts	0x0813, r1	; 0x800813 <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	08 57       	subi	r16, 0x78	; 120
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 85 2a 	call	0x550a	; 0x550a <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 3e 2b 	call	0x567c	; 0x567c <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	e8 57       	subi	r30, 0x78	; 120
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	65 d6       	rcall	.+3274   	; 0x104e <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	87 57       	subi	r24, 0x77	; 119
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	53 d6       	rcall	.+3238   	; 0x104e <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	8d 56       	subi	r24, 0x6D	; 109
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	e8 57       	subi	r30, 0x78	; 120
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     404:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     408:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
     40c:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     41c:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     420:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	c8 e8       	ldi	r28, 0x88	; 136
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	18 d7       	rcall	.+3632   	; 0x1262 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	15 d7       	rcall	.+3626   	; 0x1262 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     452:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     456:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     492:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     496:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
     49a:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     4be:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     4c2:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 91 07 	lds	r18, 0x0791	; 0x800791 <connections+0x9>
     4d2:	30 91 92 07 	lds	r19, 0x0792	; 0x800792 <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 9b 07 	lds	r18, 0x079B	; 0x80079b <connections+0x13>
     4ea:	30 91 9c 07 	lds	r19, 0x079C	; 0x80079c <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	89 e8       	ldi	r24, 0x89	; 137
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	89 e8       	ldi	r24, 0x89	; 137
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	83 e9       	ldi	r24, 0x93	; 147
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     558:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     55c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     56c:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     570:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <connections+0x20>
     5c2:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     61c:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     620:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     634:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     638:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	e8 e8       	ldi	r30, 0x88	; 136
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     66a:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     66e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	e8 e8       	ldi	r30, 0x88	; 136
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	83 e9       	ldi	r24, 0x93	; 147
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	89 e8       	ldi	r24, 0x89	; 137
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	e8 e8       	ldi	r30, 0x88	; 136
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	83 e9       	ldi	r24, 0x93	; 147
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	89 e8       	ldi	r24, 0x89	; 137
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <connections+0x89>
     7b2:	90 91 12 08 	lds	r25, 0x0812	; 0x800812 <connections+0x8a>
     7b6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <connections+0x23>
     7ee:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <connections+0x24>
     80c:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	08 e8       	ldi	r16, 0x88	; 136
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	83 55       	subi	r24, 0x53	; 83
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	8d ea       	ldi	r24, 0xAD	; 173
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f8 e8       	ldi	r31, 0x88	; 136
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 86 07 	lds	r30, 0x0786	; 0x800786 <__data_end>
     8be:	f0 91 87 07 	lds	r31, 0x0787	; 0x800787 <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 b4 2c 	call	0x5968	; 0x5968 <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 b4 2c 	call	0x5968	; 0x5968 <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 9b 24 	call	0x4936	; 0x4936 <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <crc_ibutton_update>:
  return crc;
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
     f04:	86 27       	eor	r24, r22
     f06:	98 e0       	ldi	r25, 0x08	; 8
  for (i = 0; i < 8; i++) {
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
     f08:	2c e8       	ldi	r18, 0x8C	; 140
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <crc_ibutton_update+0x10>
     f0e:	86 95       	lsr	r24
     f10:	82 27       	eor	r24, r18
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <crc_ibutton_update+0x12>
    else crc >>= 1;
     f14:	86 95       	lsr	r24
     f16:	91 50       	subi	r25, 0x01	; 1
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
  for (i = 0; i < 8; i++) {
     f18:	c1 f7       	brne	.-16     	; 0xf0a <crc_ibutton_update+0x6>
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
    else crc >>= 1;
  }
  return crc;
     f1a:	08 95       	ret

00000f1c <calculate_crc>:

#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f24:	66 23       	and	r22, r22
     f26:	59 f0       	breq	.+22     	; 0xf3e <calculate_crc+0x22>
     f28:	8c 01       	movw	r16, r24
     f2a:	ec 01       	movw	r28, r24
     f2c:	06 0f       	add	r16, r22
     f2e:	11 1d       	adc	r17, r1
     f30:	80 e0       	ldi	r24, 0x00	; 0
    crc = crc_ibutton_update(crc, data[i]);
     f32:	69 91       	ld	r22, Y+
     f34:	e7 df       	rcall	.-50     	; 0xf04 <crc_ibutton_update>
char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f36:	0c 17       	cp	r16, r28
     f38:	1d 07       	cpc	r17, r29
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <calculate_crc+0x16>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <calculate_crc+0x24>
#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
  int i;
  for(i=0;i<len;i++) {
    crc = crc_ibutton_update(crc, data[i]);
  }
  return crc;
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     f4a:	80 b3       	in	r24, 0x10	; 16
     f4c:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f4e:	ec e7       	ldi	r30, 0x7C	; 124
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 6c       	ori	r24, 0xC0	; 192
     f56:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     f58:	ea e7       	ldi	r30, 0x7A	; 122
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     f62:	80 81       	ld	r24, Z
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	80 83       	st	Z, r24
     f68:	08 95       	ret

00000f6a <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     f6a:	ec e7       	ldi	r30, 0x7C	; 124
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f70:	90 81       	ld	r25, Z
     f72:	90 6c       	ori	r25, 0xC0	; 192
     f74:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     f76:	ea e7       	ldi	r30, 0x7A	; 122
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	90 64       	ori	r25, 0x40	; 64
     f7e:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
     f80:	90 81       	ld	r25, Z
     f82:	96 fd       	sbrc	r25, 6
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
     f86:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
     f8e:	e8 2f       	mov	r30, r24
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	26 95       	lsr	r18
     f94:	26 95       	lsr	r18
     f96:	30 e4       	ldi	r19, 0x40	; 64
     f98:	93 9f       	mul	r25, r19
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	82 2b       	or	r24, r18
     fa0:	fe 2f       	mov	r31, r30
     fa2:	ee 27       	eor	r30, r30
     fa4:	e0 50       	subi	r30, 0x00	; 0
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e8 0f       	add	r30, r24
     faa:	f1 1d       	adc	r31, r1
}
     fac:	80 81       	ld	r24, Z
     fae:	08 95       	ret

00000fb0 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
     fbe:	c8 80       	ld	r12, Y
     fc0:	d9 80       	ldd	r13, Y+1	; 0x01
     fc2:	ea 80       	ldd	r14, Y+2	; 0x02
     fc4:	fb 80       	ldd	r15, Y+3	; 0x03
     fc6:	2b ed       	ldi	r18, 0xDB	; 219
     fc8:	3f e0       	ldi	r19, 0x0F	; 15
     fca:	49 e4       	ldi	r20, 0x49	; 73
     fcc:	50 e4       	ldi	r21, 0x40	; 64
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	6c f4       	brge	.+26     	; 0xff4 <vFunc_Inf2pi+0x44>
     fda:	2b ed       	ldi	r18, 0xDB	; 219
     fdc:	3f e0       	ldi	r19, 0x0F	; 15
     fde:	49 ec       	ldi	r20, 0xC9	; 201
     fe0:	50 e4       	ldi	r21, 0x40	; 64
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
     fea:	68 83       	st	Y, r22
     fec:	79 83       	std	Y+1, r23	; 0x01
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
     ff4:	2b ed       	ldi	r18, 0xDB	; 219
     ff6:	3f e0       	ldi	r19, 0x0F	; 15
     ff8:	49 e4       	ldi	r20, 0x49	; 73
     ffa:	50 ec       	ldi	r21, 0xC0	; 192
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__cmpsf2>
    1004:	88 23       	and	r24, r24
    1006:	64 f4       	brge	.+24     	; 0x1020 <vFunc_Inf2pi+0x70>
    1008:	2b ed       	ldi	r18, 0xDB	; 219
    100a:	3f e0       	ldi	r19, 0x0F	; 15
    100c:	49 ec       	ldi	r20, 0xC9	; 201
    100e:	50 e4       	ldi	r21, 0x40	; 64
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    1020:	88 81       	ld	r24, Y
    1022:	99 81       	ldd	r25, Y+1	; 0x01
    1024:	aa 81       	ldd	r26, Y+2	; 0x02
    1026:	bb 81       	ldd	r27, Y+3	; 0x03
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	2b ed       	ldi	r18, 0xDB	; 219
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 e4       	ldi	r20, 0x49	; 73
    1034:	50 e4       	ldi	r21, 0x40	; 64
    1036:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <vFunc_Inf2pi+0x90>
    103e:	bf cf       	rjmp	.-130    	; 0xfbe <vFunc_Inf2pi+0xe>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	08 95       	ret

0000104e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    105c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1060:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pxEnd>
    1064:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <pxEnd+0x1>
    1068:	89 2b       	or	r24, r25
    106a:	41 f5       	brne	.+80     	; 0x10bc <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    106c:	ed e1       	ldi	r30, 0x1D	; 29
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	a1 e2       	ldi	r26, 0x21	; 33
    1072:	b8 e0       	ldi	r27, 0x08	; 8
    1074:	b1 83       	std	Z+1, r27	; 0x01
    1076:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    107c:	ed e1       	ldi	r30, 0x1D	; 29
    107e:	fa e1       	ldi	r31, 0x1A	; 26
    1080:	f0 93 1c 08 	sts	0x081C, r31	; 0x80081c <pxEnd+0x1>
    1084:	e0 93 1b 08 	sts	0x081B, r30	; 0x80081b <pxEnd>
	pxEnd->xBlockSize = 0;
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1090:	8c ef       	ldi	r24, 0xFC	; 252
    1092:	91 e1       	ldi	r25, 0x11	; 17
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    109c:	ed 93       	st	X+, r30
    109e:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a0:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <xMinimumEverFreeBytesRemaining+0x1>
    10a4:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a8:	90 93 1a 08 	sts	0x081A, r25	; 0x80081a <xFreeBytesRemaining+0x1>
    10ac:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e8       	ldi	r25, 0x80	; 128
    10b4:	90 93 16 08 	sts	0x0816, r25	; 0x800816 <xBlockAllocatedBit+0x1>
    10b8:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10bc:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <xBlockAllocatedBit>
    10c0:	90 91 16 08 	lds	r25, 0x0816	; 0x800816 <xBlockAllocatedBit+0x1>
    10c4:	8c 23       	and	r24, r28
    10c6:	9d 23       	and	r25, r29
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f0       	breq	.+2      	; 0x10ce <pvPortMalloc+0x80>
    10cc:	b2 c0       	rjmp	.+356    	; 0x1232 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <pvPortMalloc+0x86>
    10d2:	b2 c0       	rjmp	.+356    	; 0x1238 <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    10d4:	ae 01       	movw	r20, r28
    10d6:	4c 5f       	subi	r20, 0xFC	; 252
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10da:	09 f4       	brne	.+2      	; 0x10de <pvPortMalloc+0x90>
    10dc:	b0 c0       	rjmp	.+352    	; 0x123e <pvPortMalloc+0x1f0>
    10de:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xFreeBytesRemaining>
    10e2:	90 91 1a 08 	lds	r25, 0x081A	; 0x80081a <xFreeBytesRemaining+0x1>
    10e6:	84 17       	cp	r24, r20
    10e8:	95 07       	cpc	r25, r21
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <pvPortMalloc+0xa0>
    10ec:	ab c0       	rjmp	.+342    	; 0x1244 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    10ee:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <xStart>
    10f2:	f0 91 1e 08 	lds	r31, 0x081E	; 0x80081e <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    10f6:	ad e1       	ldi	r26, 0x1D	; 29
    10f8:	b8 e0       	ldi	r27, 0x08	; 8
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <pvPortMalloc+0xb2>
    10fc:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    10fe:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1100:	22 81       	ldd	r18, Z+2	; 0x02
    1102:	33 81       	ldd	r19, Z+3	; 0x03
    1104:	24 17       	cp	r18, r20
    1106:	35 07       	cpc	r19, r21
    1108:	28 f4       	brcc	.+10     	; 0x1114 <pvPortMalloc+0xc6>
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	a1 f7       	brne	.-24     	; 0x10fc <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1114:	60 91 1b 08 	lds	r22, 0x081B	; 0x80081b <pxEnd>
    1118:	70 91 1c 08 	lds	r23, 0x081C	; 0x80081c <pxEnd+0x1>
    111c:	e6 17       	cp	r30, r22
    111e:	f7 07       	cpc	r31, r23
    1120:	09 f4       	brne	.+2      	; 0x1124 <pvPortMalloc+0xd6>
    1122:	93 c0       	rjmp	.+294    	; 0x124a <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1124:	cd 91       	ld	r28, X+
    1126:	dc 91       	ld	r29, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	7e 01       	movw	r14, r28
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	e8 0e       	add	r14, r24
    1130:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8d 93       	st	X+, r24
    1138:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	84 1b       	sub	r24, r20
    1140:	95 0b       	sbc	r25, r21
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	91 05       	cpc	r25, r1
    1146:	08 f4       	brcc	.+2      	; 0x114a <pvPortMalloc+0xfc>
    1148:	52 c0       	rjmp	.+164    	; 0x11ee <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    114a:	9f 01       	movw	r18, r30
    114c:	24 0f       	add	r18, r20
    114e:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1150:	d9 01       	movw	r26, r18
    1152:	13 96       	adiw	r26, 0x03	; 3
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    115a:	53 83       	std	Z+3, r21	; 0x03
    115c:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    115e:	ad e1       	ldi	r26, 0x1D	; 29
    1160:	b8 e0       	ldi	r27, 0x08	; 8
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <pvPortMalloc+0x118>
    1164:	dc 01       	movw	r26, r24
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	c8 f3       	brcs	.-14     	; 0x1164 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	4d 91       	ld	r20, X+
    1176:	5c 91       	ld	r21, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	8d 01       	movw	r16, r26
    117c:	04 0f       	add	r16, r20
    117e:	15 1f       	adc	r17, r21
    1180:	20 17       	cp	r18, r16
    1182:	31 07       	cpc	r19, r17
    1184:	51 f4       	brne	.+20     	; 0x119a <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1186:	e9 01       	movw	r28, r18
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	3b 81       	ldd	r19, Y+3	; 0x03
    118c:	42 0f       	add	r20, r18
    118e:	53 1f       	adc	r21, r19
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	5c 93       	st	X, r21
    1194:	4e 93       	st	-X, r20
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    119a:	e9 01       	movw	r28, r18
    119c:	4a 81       	ldd	r20, Y+2	; 0x02
    119e:	5b 81       	ldd	r21, Y+3	; 0x03
    11a0:	89 01       	movw	r16, r18
    11a2:	04 0f       	add	r16, r20
    11a4:	15 1f       	adc	r17, r21
    11a6:	80 17       	cp	r24, r16
    11a8:	91 07       	cpc	r25, r17
    11aa:	c9 f4       	brne	.+50     	; 0x11de <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11ac:	60 17       	cp	r22, r16
    11ae:	71 07       	cpc	r23, r17
    11b0:	91 f0       	breq	.+36     	; 0x11d6 <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11b2:	e8 01       	movw	r28, r16
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	48 0f       	add	r20, r24
    11ba:	59 1f       	adc	r21, r25
    11bc:	e9 01       	movw	r28, r18
    11be:	5b 83       	std	Y+3, r21	; 0x03
    11c0:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	ec 01       	movw	r28, r24
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	e9 01       	movw	r28, r18
    11d0:	99 83       	std	Y+1, r25	; 0x01
    11d2:	88 83       	st	Y, r24
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11d6:	e9 01       	movw	r28, r18
    11d8:	79 83       	std	Y+1, r23	; 0x01
    11da:	68 83       	st	Y, r22
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11de:	e9 01       	movw	r28, r18
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11e4:	a2 17       	cp	r26, r18
    11e6:	b3 07       	cpc	r27, r19
    11e8:	11 f0       	breq	.+4      	; 0x11ee <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11ea:	2d 93       	st	X+, r18
    11ec:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    11ee:	22 81       	ldd	r18, Z+2	; 0x02
    11f0:	33 81       	ldd	r19, Z+3	; 0x03
    11f2:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xFreeBytesRemaining>
    11f6:	90 91 1a 08 	lds	r25, 0x081A	; 0x80081a <xFreeBytesRemaining+0x1>
    11fa:	82 1b       	sub	r24, r18
    11fc:	93 0b       	sbc	r25, r19
    11fe:	90 93 1a 08 	sts	0x081A, r25	; 0x80081a <xFreeBytesRemaining+0x1>
    1202:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1206:	40 91 17 08 	lds	r20, 0x0817	; 0x800817 <xMinimumEverFreeBytesRemaining>
    120a:	50 91 18 08 	lds	r21, 0x0818	; 0x800818 <xMinimumEverFreeBytesRemaining+0x1>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	20 f4       	brcc	.+8      	; 0x121c <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1214:	90 93 18 08 	sts	0x0818, r25	; 0x800818 <xMinimumEverFreeBytesRemaining+0x1>
    1218:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    121c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <xBlockAllocatedBit>
    1220:	90 91 16 08 	lds	r25, 0x0816	; 0x800816 <xBlockAllocatedBit+0x1>
    1224:	28 2b       	or	r18, r24
    1226:	39 2b       	or	r19, r25
    1228:	33 83       	std	Z+3, r19	; 0x03
    122a:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	0e c0       	rjmp	.+28     	; 0x124e <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    1232:	e1 2c       	mov	r14, r1
    1234:	f1 2c       	mov	r15, r1
    1236:	0b c0       	rjmp	.+22     	; 0x124e <pvPortMalloc+0x200>
    1238:	e1 2c       	mov	r14, r1
    123a:	f1 2c       	mov	r15, r1
    123c:	08 c0       	rjmp	.+16     	; 0x124e <pvPortMalloc+0x200>
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <pvPortMalloc+0x200>
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <pvPortMalloc+0x200>
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    124e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1252:	c7 01       	movw	r24, r14
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <vPortFree+0xa>
    126a:	68 c0       	rjmp	.+208    	; 0x133c <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    126c:	fc 01       	movw	r30, r24
    126e:	34 97       	sbiw	r30, 0x04	; 4
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	33 81       	ldd	r19, Z+3	; 0x03
    1274:	40 91 15 08 	lds	r20, 0x0815	; 0x800815 <xBlockAllocatedBit>
    1278:	50 91 16 08 	lds	r21, 0x0816	; 0x800816 <xBlockAllocatedBit+0x1>
    127c:	b9 01       	movw	r22, r18
    127e:	64 23       	and	r22, r20
    1280:	75 23       	and	r23, r21
    1282:	67 2b       	or	r22, r23
    1284:	09 f4       	brne	.+2      	; 0x1288 <vPortFree+0x26>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	67 2b       	or	r22, r23
    128e:	09 f0       	breq	.+2      	; 0x1292 <vPortFree+0x30>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1292:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1294:	40 95       	com	r20
    1296:	50 95       	com	r21
    1298:	24 23       	and	r18, r20
    129a:	35 23       	and	r19, r21
    129c:	33 83       	std	Z+3, r19	; 0x03
    129e:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12a0:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12a4:	4a 81       	ldd	r20, Y+2	; 0x02
    12a6:	5b 81       	ldd	r21, Y+3	; 0x03
    12a8:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <xFreeBytesRemaining>
    12ac:	90 91 1a 08 	lds	r25, 0x081A	; 0x80081a <xFreeBytesRemaining+0x1>
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	90 93 1a 08 	sts	0x081A, r25	; 0x80081a <xFreeBytesRemaining+0x1>
    12b8:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12bc:	ed e1       	ldi	r30, 0x1D	; 29
    12be:	f8 e0       	ldi	r31, 0x08	; 8
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <vPortFree+0x62>
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	8c 17       	cp	r24, r28
    12ca:	9d 07       	cpc	r25, r29
    12cc:	d0 f3       	brcs	.-12     	; 0x12c2 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    12ce:	22 81       	ldd	r18, Z+2	; 0x02
    12d0:	33 81       	ldd	r19, Z+3	; 0x03
    12d2:	bf 01       	movw	r22, r30
    12d4:	62 0f       	add	r22, r18
    12d6:	73 1f       	adc	r23, r19
    12d8:	c6 17       	cp	r28, r22
    12da:	d7 07       	cpc	r29, r23
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    12de:	24 0f       	add	r18, r20
    12e0:	35 1f       	adc	r19, r21
    12e2:	33 83       	std	Z+3, r19	; 0x03
    12e4:	22 83       	std	Z+2, r18	; 0x02
    12e6:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	de 01       	movw	r26, r28
    12ee:	a2 0f       	add	r26, r18
    12f0:	b3 1f       	adc	r27, r19
    12f2:	8a 17       	cp	r24, r26
    12f4:	9b 07       	cpc	r25, r27
    12f6:	c9 f4       	brne	.+50     	; 0x132a <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    12f8:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pxEnd>
    12fc:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <pxEnd+0x1>
    1300:	a8 17       	cp	r26, r24
    1302:	b9 07       	cpc	r27, r25
    1304:	79 f0       	breq	.+30     	; 0x1324 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	28 0f       	add	r18, r24
    1310:	39 1f       	adc	r19, r25
    1312:	3b 83       	std	Y+3, r19	; 0x03
    1314:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	99 83       	std	Y+1, r25	; 0x01
    1320:	88 83       	st	Y, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1324:	b9 83       	std	Y+1, r27	; 0x01
    1326:	a8 83       	st	Y, r26
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    132e:	ec 17       	cp	r30, r28
    1330:	fd 07       	cpc	r31, r29
    1332:	11 f0       	breq	.+4      	; 0x1338 <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1334:	d1 83       	std	Z+1, r29	; 0x01
    1336:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    1338:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	e4 2e       	mov	r14, r20
    1352:	28 98       	cbi	0x05, 0	; 5
    1354:	86 2f       	mov	r24, r22
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    135c:	ee 20       	and	r14, r14
    135e:	b1 f0       	breq	.+44     	; 0x138c <sIMU_readRegisterRegion+0x4a>
    1360:	0f ef       	ldi	r16, 0xFF	; 255
    1362:	0e 0d       	add	r16, r14
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	0c 0f       	add	r16, r28
    136c:	1d 1f       	adc	r17, r29
    136e:	f1 2c       	mov	r15, r1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <sIMU_readRegisterRegion+0x3a>
    137a:	f3 94       	inc	r15
    137c:	89 93       	st	Y+, r24
    137e:	0c 17       	cp	r16, r28
    1380:	1d 07       	cpc	r17, r29
    1382:	b1 f7       	brne	.-20     	; 0x1370 <sIMU_readRegisterRegion+0x2e>
    1384:	fe 10       	cpse	r15, r14
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <sIMU_readRegisterRegion+0x4e>
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    138c:	85 e0       	ldi	r24, 0x05	; 5
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	28 9a       	sbi	0x05, 0	; 5
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <sIMU_readRegister>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	28 98       	cbi	0x05, 0	; 5
    13aa:	86 2f       	mov	r24, r22
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    13b8:	28 9a       	sbi	0x05, 0	; 5
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <sIMU_readRegister+0x20>
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <sIMU_readRegister+0x22>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	88 83       	st	Y, r24
    13c6:	89 2f       	mov	r24, r25
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <sIMU_Init>:
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	1f 92       	push	r1
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	e9 e7       	ldi	r30, 0x79	; 121
    13dc:	fb e1       	ldi	r31, 0x1B	; 27
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
    13e2:	24 ef       	ldi	r18, 0xF4	; 244
    13e4:	31 e0       	ldi	r19, 0x01	; 1
    13e6:	32 83       	std	Z+2, r19	; 0x02
    13e8:	21 83       	std	Z+1, r18	; 0x01
    13ea:	22 e8       	ldi	r18, 0x82	; 130
    13ec:	36 e0       	ldi	r19, 0x06	; 6
    13ee:	34 83       	std	Z+4, r19	; 0x04
    13f0:	23 83       	std	Z+3, r18	; 0x03
    13f2:	20 e9       	ldi	r18, 0x90	; 144
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	36 83       	std	Z+6, r19	; 0x06
    13f8:	25 83       	std	Z+5, r18	; 0x05
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	10 86       	std	Z+8, r1	; 0x08
    13fe:	81 87       	std	Z+9, r24	; 0x09
    1400:	82 87       	std	Z+10, r24	; 0x0a
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	34 87       	std	Z+12, r19	; 0x0c
    1408:	23 87       	std	Z+11, r18	; 0x0b
    140a:	2d e0       	ldi	r18, 0x0D	; 13
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	36 87       	std	Z+14, r19	; 0x0e
    1410:	25 87       	std	Z+13, r18	; 0x0d
    1412:	22 e3       	ldi	r18, 0x32	; 50
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	30 8b       	std	Z+16, r19	; 0x10
    1418:	27 87       	std	Z+15, r18	; 0x0f
    141a:	11 8a       	std	Z+17, r1	; 0x11
    141c:	12 8a       	std	Z+18, r1	; 0x12
    141e:	83 8b       	std	Z+19, r24	; 0x13
    1420:	84 8b       	std	Z+20, r24	; 0x14
    1422:	88 eb       	ldi	r24, 0xB8	; 184
    1424:	9b e0       	ldi	r25, 0x0B	; 11
    1426:	96 8b       	std	Z+22, r25	; 0x16
    1428:	85 8b       	std	Z+21, r24	; 0x15
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 8f       	std	Z+24, r25	; 0x18
    1430:	87 8b       	std	Z+23, r24	; 0x17
    1432:	11 8e       	std	Z+25, r1	; 0x19
    1434:	10 92 94 1b 	sts	0x1B94, r1	; 0x801b94 <allOnesCounter+0x1>
    1438:	10 92 93 1b 	sts	0x1B93, r1	; 0x801b93 <allOnesCounter>
    143c:	10 92 96 1b 	sts	0x1B96, r1	; 0x801b96 <nonSuccessCounter+0x1>
    1440:	10 92 95 1b 	sts	0x1B95, r1	; 0x801b95 <nonSuccessCounter>
    1444:	0e 94 cf 21 	call	0x439e	; 0x439e <vSPI_MasterInit>
    1448:	20 9a       	sbi	0x04, 0	; 4
    144a:	28 9a       	sbi	0x05, 0	; 5
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	20 e1       	ldi	r18, 0x10	; 16
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	31 09       	sbc	r19, r1
    145c:	d1 f7       	brne	.-12     	; 0x1452 <sIMU_Init+0x84>
    145e:	6f e0       	ldi	r22, 0x0F	; 15
    1460:	ce 01       	movw	r24, r28
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	9e df       	rcall	.-196    	; 0x13a2 <sIMU_readRegister>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	89 36       	cpi	r24, 0x69	; 105
    146a:	c9 f7       	brne	.-14     	; 0x145e <sIMU_Init+0x90>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <sIMU_readRegisterInt16>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	1f 92       	push	r1
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8c 01       	movw	r16, r24
    148a:	42 e0       	ldi	r20, 0x02	; 2
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	58 df       	rcall	.-336    	; 0x1342 <sIMU_readRegisterRegion>
    1492:	2a 81       	ldd	r18, Y+2	; 0x02
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	32 2f       	mov	r19, r18
    1498:	22 27       	eor	r18, r18
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	29 2b       	or	r18, r25
    149e:	f8 01       	movw	r30, r16
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <sIMU_writeRegister>:
    14b2:	cf 93       	push	r28
    14b4:	c6 2f       	mov	r28, r22
    14b6:	28 98       	cbi	0x05, 0	; 5
    14b8:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ui8SPI_MasterTransmit>
    14c2:	28 9a       	sbi	0x05, 0	; 5
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <sIMU_begin>:
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	1f 92       	push	r1
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	79 df       	rcall	.-270    	; 0x13ce <sIMU_Init>
    14dc:	18 2f       	mov	r17, r24
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	80 91 82 1b 	lds	r24, 0x1B82	; 0x801b82 <settings+0x9>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <sIMU_begin+0x20>
    14e8:	83 c0       	rjmp	.+262    	; 0x15f0 <sIMU_begin+0x126>
    14ea:	80 91 88 1b 	lds	r24, 0x1B88	; 0x801b88 <settings+0xf>
    14ee:	90 91 89 1b 	lds	r25, 0x1B89	; 0x801b89 <settings+0x10>
    14f2:	84 36       	cpi	r24, 0x64	; 100
    14f4:	91 05       	cpc	r25, r1
    14f6:	41 f0       	breq	.+16     	; 0x1508 <sIMU_begin+0x3e>
    14f8:	88 3c       	cpi	r24, 0xC8	; 200
    14fa:	91 05       	cpc	r25, r1
    14fc:	41 f0       	breq	.+16     	; 0x150e <sIMU_begin+0x44>
    14fe:	c2 97       	sbiw	r24, 0x32	; 50
    1500:	41 f4       	brne	.+16     	; 0x1512 <sIMU_begin+0x48>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <sIMU_begin+0x48>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <sIMU_begin+0x48>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <settings+0xb>
    1516:	90 91 85 1b 	lds	r25, 0x1B85	; 0x801b85 <settings+0xc>
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	31 f0       	breq	.+12     	; 0x152c <sIMU_begin+0x62>
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	91 05       	cpc	r25, r1
    1524:	39 f0       	breq	.+14     	; 0x1534 <sIMU_begin+0x6a>
    1526:	02 97       	sbiw	r24, 0x02	; 2
    1528:	49 f4       	brne	.+18     	; 0x153c <sIMU_begin+0x72>
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <sIMU_begin+0x78>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	88 60       	ori	r24, 0x08	; 8
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <sIMU_begin+0x78>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8c 60       	ori	r24, 0x0C	; 12
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <sIMU_begin+0x78>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	80 91 86 1b 	lds	r24, 0x1B86	; 0x801b86 <settings+0xd>
    1546:	90 91 87 1b 	lds	r25, 0x1B87	; 0x801b87 <settings+0xe>
    154a:	80 3a       	cpi	r24, 0xA0	; 160
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	92 07       	cpc	r25, r18
    1550:	c1 f1       	breq	.+112    	; 0x15c2 <sIMU_begin+0xf8>
    1552:	70 f4       	brcc	.+28     	; 0x1570 <sIMU_begin+0xa6>
    1554:	8a 31       	cpi	r24, 0x1A	; 26
    1556:	91 05       	cpc	r25, r1
    1558:	21 f1       	breq	.+72     	; 0x15a2 <sIMU_begin+0xd8>
    155a:	18 f4       	brcc	.+6      	; 0x1562 <sIMU_begin+0x98>
    155c:	0d 97       	sbiw	r24, 0x0d	; 13
    155e:	e9 f0       	breq	.+58     	; 0x159a <sIMU_begin+0xd0>
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <sIMU_begin+0xe8>
    1562:	84 33       	cpi	r24, 0x34	; 52
    1564:	91 05       	cpc	r25, r1
    1566:	09 f1       	breq	.+66     	; 0x15aa <sIMU_begin+0xe0>
    1568:	80 3d       	cpi	r24, 0xD0	; 208
    156a:	91 05       	cpc	r25, r1
    156c:	31 f1       	breq	.+76     	; 0x15ba <sIMU_begin+0xf0>
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <sIMU_begin+0xe8>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	2d e0       	ldi	r18, 0x0D	; 13
    1574:	92 07       	cpc	r25, r18
    1576:	89 f1       	breq	.+98     	; 0x15da <sIMU_begin+0x110>
    1578:	40 f4       	brcc	.+16     	; 0x158a <sIMU_begin+0xc0>
    157a:	81 34       	cpi	r24, 0x41	; 65
    157c:	23 e0       	ldi	r18, 0x03	; 3
    157e:	92 07       	cpc	r25, r18
    1580:	21 f1       	breq	.+72     	; 0x15ca <sIMU_begin+0x100>
    1582:	8c 37       	cpi	r24, 0x7C	; 124
    1584:	96 40       	sbci	r25, 0x06	; 6
    1586:	29 f1       	breq	.+74     	; 0x15d2 <sIMU_begin+0x108>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <sIMU_begin+0xe8>
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	2a e1       	ldi	r18, 0x1A	; 26
    158e:	92 07       	cpc	r25, r18
    1590:	41 f1       	breq	.+80     	; 0x15e2 <sIMU_begin+0x118>
    1592:	82 31       	cpi	r24, 0x12	; 18
    1594:	94 43       	sbci	r25, 0x34	; 52
    1596:	49 f1       	breq	.+82     	; 0x15ea <sIMU_begin+0x120>
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <sIMU_begin+0xe8>
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <sIMU_begin+0x126>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <sIMU_begin+0x126>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	80 63       	ori	r24, 0x30	; 48
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <sIMU_begin+0x126>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <sIMU_begin+0x126>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 65       	ori	r24, 0x50	; 80
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <sIMU_begin+0x126>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 66       	ori	r24, 0x60	; 96
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <sIMU_begin+0x126>
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 67       	ori	r24, 0x70	; 112
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <sIMU_begin+0x126>
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <sIMU_begin+0x126>
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	80 69       	ori	r24, 0x90	; 144
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <sIMU_begin+0x126>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 6a       	ori	r24, 0xA0	; 160
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <sIMU_begin+0x126>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 6b       	ori	r24, 0xB0	; 176
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	5e df       	rcall	.-324    	; 0x14b2 <sIMU_writeRegister>
    15f6:	63 e1       	ldi	r22, 0x13	; 19
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	d2 de       	rcall	.-604    	; 0x13a2 <sIMU_readRegister>
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	90 91 83 1b 	lds	r25, 0x1B83	; 0x801b83 <settings+0xa>
    1608:	91 30       	cpi	r25, 0x01	; 1
    160a:	11 f4       	brne	.+4      	; 0x1610 <sIMU_begin+0x146>
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	83 e1       	ldi	r24, 0x13	; 19
    1614:	4e df       	rcall	.-356    	; 0x14b2 <sIMU_writeRegister>
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	80 91 79 1b 	lds	r24, 0x1B79	; 0x801b79 <settings>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <sIMU_begin+0x158>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <sIMU_begin+0x20e>
    1622:	80 91 7a 1b 	lds	r24, 0x1B7A	; 0x801b7a <settings+0x1>
    1626:	90 91 7b 1b 	lds	r25, 0x1B7B	; 0x801b7b <settings+0x2>
    162a:	85 3f       	cpi	r24, 0xF5	; 245
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f0       	breq	.+48     	; 0x1660 <sIMU_begin+0x196>
    1630:	20 f4       	brcc	.+8      	; 0x163a <sIMU_begin+0x170>
    1632:	8d 37       	cpi	r24, 0x7D	; 125
    1634:	91 05       	cpc	r25, r1
    1636:	49 f0       	breq	.+18     	; 0x164a <sIMU_begin+0x180>
    1638:	11 c0       	rjmp	.+34     	; 0x165c <sIMU_begin+0x192>
    163a:	84 3f       	cpi	r24, 0xF4	; 244
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	92 07       	cpc	r25, r18
    1640:	39 f0       	breq	.+14     	; 0x1650 <sIMU_begin+0x186>
    1642:	88 3e       	cpi	r24, 0xE8	; 232
    1644:	93 40       	sbci	r25, 0x03	; 3
    1646:	39 f0       	breq	.+14     	; 0x1656 <sIMU_begin+0x18c>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <sIMU_begin+0x192>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <sIMU_begin+0x196>
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <sIMU_begin+0x196>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <sIMU_begin+0x196>
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	80 91 7c 1b 	lds	r24, 0x1B7C	; 0x801b7c <settings+0x3>
    1664:	90 91 7d 1b 	lds	r25, 0x1B7D	; 0x801b7d <settings+0x4>
    1668:	80 3d       	cpi	r24, 0xD0	; 208
    166a:	91 05       	cpc	r25, r1
    166c:	31 f1       	breq	.+76     	; 0x16ba <sIMU_begin+0x1f0>
    166e:	48 f4       	brcc	.+18     	; 0x1682 <sIMU_begin+0x1b8>
    1670:	8a 31       	cpi	r24, 0x1A	; 26
    1672:	91 05       	cpc	r25, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <sIMU_begin+0x1d8>
    1676:	84 33       	cpi	r24, 0x34	; 52
    1678:	91 05       	cpc	r25, r1
    167a:	b9 f0       	breq	.+46     	; 0x16aa <sIMU_begin+0x1e0>
    167c:	0d 97       	sbiw	r24, 0x0d	; 13
    167e:	c9 f4       	brne	.+50     	; 0x16b2 <sIMU_begin+0x1e8>
    1680:	0c c0       	rjmp	.+24     	; 0x169a <sIMU_begin+0x1d0>
    1682:	81 34       	cpi	r24, 0x41	; 65
    1684:	23 e0       	ldi	r18, 0x03	; 3
    1686:	92 07       	cpc	r25, r18
    1688:	01 f1       	breq	.+64     	; 0x16ca <sIMU_begin+0x200>
    168a:	8c 37       	cpi	r24, 0x7C	; 124
    168c:	26 e0       	ldi	r18, 0x06	; 6
    168e:	92 07       	cpc	r25, r18
    1690:	01 f1       	breq	.+64     	; 0x16d2 <sIMU_begin+0x208>
    1692:	80 3a       	cpi	r24, 0xA0	; 160
    1694:	91 40       	sbci	r25, 0x01	; 1
    1696:	69 f4       	brne	.+26     	; 0x16b2 <sIMU_begin+0x1e8>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <sIMU_begin+0x1f8>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	80 61       	ori	r24, 0x10	; 16
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <sIMU_begin+0x20e>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <sIMU_begin+0x20e>
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	80 63       	ori	r24, 0x30	; 48
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <sIMU_begin+0x20e>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 64       	ori	r24, 0x40	; 64
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <sIMU_begin+0x20e>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 65       	ori	r24, 0x50	; 80
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <sIMU_begin+0x20e>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 66       	ori	r24, 0x60	; 96
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <sIMU_begin+0x20e>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 67       	ori	r24, 0x70	; 112
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <sIMU_begin+0x20e>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	ea de       	rcall	.-556    	; 0x14b2 <sIMU_writeRegister>
    16de:	6f e0       	ldi	r22, 0x0F	; 15
    16e0:	ce 01       	movw	r24, r28
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	5e de       	rcall	.-836    	; 0x13a2 <sIMU_readRegister>
    16e6:	81 2f       	mov	r24, r17
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <i16IMU_readRawGyroZ>:
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	1f 92       	push	r1
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	66 e2       	ldi	r22, 0x26	; 38
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	b8 de       	rcall	.-656    	; 0x1478 <sIMU_readRegisterInt16>
    1708:	88 23       	and	r24, r24
    170a:	a9 f0       	breq	.+42     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    170c:	85 30       	cpi	r24, 0x05	; 5
    170e:	51 f4       	brne	.+20     	; 0x1724 <i16IMU_readRawGyroZ+0x30>
    1710:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <allOnesCounter>
    1714:	90 91 94 1b 	lds	r25, 0x1B94	; 0x801b94 <allOnesCounter+0x1>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	90 93 94 1b 	sts	0x1B94, r25	; 0x801b94 <allOnesCounter+0x1>
    171e:	80 93 93 1b 	sts	0x1B93, r24	; 0x801b93 <allOnesCounter>
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    1724:	80 91 95 1b 	lds	r24, 0x1B95	; 0x801b95 <nonSuccessCounter>
    1728:	90 91 96 1b 	lds	r25, 0x1B96	; 0x801b96 <nonSuccessCounter+0x1>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 96 1b 	sts	0x1B96, r25	; 0x801b96 <nonSuccessCounter+0x1>
    1732:	80 93 95 1b 	sts	0x1B95, r24	; 0x801b95 <nonSuccessCounter>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <fIMU_calcGyro>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	cf 93       	push	r28
    174e:	fc 01       	movw	r30, r24
    1750:	40 91 7a 1b 	lds	r20, 0x1B7A	; 0x801b7a <settings+0x1>
    1754:	50 91 7b 1b 	lds	r21, 0x1B7B	; 0x801b7b <settings+0x2>
    1758:	45 3f       	cpi	r20, 0xF5	; 245
    175a:	51 05       	cpc	r21, r1
    175c:	b1 f0       	breq	.+44     	; 0x178a <fIMU_calcGyro+0x46>
    175e:	9a 01       	movw	r18, r20
    1760:	a5 e2       	ldi	r26, 0x25	; 37
    1762:	b6 e0       	ldi	r27, 0x06	; 6
    1764:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__umulhisi3>
    1768:	48 1b       	sub	r20, r24
    176a:	59 0b       	sbc	r21, r25
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	00 24       	eor	r0, r0
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	00 1c       	adc	r0, r0
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	00 1c       	adc	r0, r0
    1782:	89 2f       	mov	r24, r25
    1784:	90 2d       	mov	r25, r0
    1786:	c8 2f       	mov	r28, r24
    1788:	01 c0       	rjmp	.+2      	; 0x178c <fIMU_calcGyro+0x48>
    178a:	c2 e0       	ldi	r28, 0x02	; 2
    178c:	bf 01       	movw	r22, r30
    178e:	ff 0f       	add	r31, r31
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4c e8       	ldi	r20, 0x8C	; 140
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	6c 2f       	mov	r22, r28
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a e7       	ldi	r20, 0x7A	; 122
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    17cc:	cf 91       	pop	r28
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    17d8:	8d df       	rcall	.-230    	; 0x16f4 <i16IMU_readRawGyroZ>
    17da:	b4 cf       	rjmp	.-152    	; 0x1744 <fIMU_calcGyro>
    
    return output;
}
    17dc:	08 95       	ret

000017de <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    17de:	ea e0       	ldi	r30, 0x0A	; 10
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	87 60       	ori	r24, 0x07	; 7
    17e6:	80 83       	st	Z, r24
    17e8:	08 95       	ret

000017ea <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vLED_singleHigh+0x12>
    17f0:	eb e0       	ldi	r30, 0x0B	; 11
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	80 83       	st	Z, r24
    17fa:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	31 f4       	brne	.+12     	; 0x180e <vLED_singleHigh+0x24>
    1802:	eb e0       	ldi	r30, 0x0B	; 11
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	80 83       	st	Z, r24
    180c:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    180e:	89 2b       	or	r24, r25
    1810:	29 f4       	brne	.+10     	; 0x181c <vLED_singleHigh+0x32>
    1812:	eb e0       	ldi	r30, 0x0B	; 11
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	08 95       	ret

0000181e <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	31 f4       	brne	.+12     	; 0x1830 <vLED_singleLow+0x12>
    1824:	eb e0       	ldi	r30, 0x0B	; 11
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	80 83       	st	Z, r24
    182e:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	31 f4       	brne	.+12     	; 0x1842 <vLED_singleLow+0x24>
    1836:	eb e0       	ldi	r30, 0x0B	; 11
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	80 83       	st	Z, r24
    1840:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    1842:	89 2b       	or	r24, r25
    1844:	29 f4       	brne	.+10     	; 0x1850 <vLED_singleLow+0x32>
    1846:	eb e0       	ldi	r30, 0x0B	; 11
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	80 83       	st	Z, r24
    1850:	08 95       	ret

00001852 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	91 05       	cpc	r25, r1
    1856:	39 f4       	brne	.+14     	; 0x1866 <vLED_toggle+0x14>
    1858:	eb e0       	ldi	r30, 0x0B	; 11
    185a:	f1 e0       	ldi	r31, 0x01	; 1
    185c:	90 81       	ld	r25, Z
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	89 27       	eor	r24, r25
    1862:	80 83       	st	Z, r24
    1864:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	39 f4       	brne	.+14     	; 0x187a <vLED_toggle+0x28>
    186c:	eb e0       	ldi	r30, 0x0B	; 11
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	90 81       	ld	r25, Z
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 27       	eor	r24, r25
    1876:	80 83       	st	Z, r24
    1878:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    187a:	89 2b       	or	r24, r25
    187c:	31 f4       	brne	.+12     	; 0x188a <vLED_toggle+0x38>
    187e:	eb e0       	ldi	r30, 0x0B	; 11
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	90 81       	ld	r25, Z
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 27       	eor	r24, r25
    1888:	80 83       	st	Z, r24
    188a:	08 95       	ret

0000188c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    188c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	34 83       	std	Z+4, r19	; 0x04
    189a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    189c:	96 83       	std	Z+6, r25	; 0x06
    189e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18a0:	90 87       	std	Z+8, r25	; 0x08
    18a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18a4:	10 82       	st	Z, r1
    18a6:	08 95       	ret

000018a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 86       	std	Z+9, r1	; 0x09
    18ac:	10 86       	std	Z+8, r1	; 0x08
    18ae:	08 95       	ret

000018b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	9c 01       	movw	r18, r24
    18b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18b8:	dc 01       	movw	r26, r24
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	cd 91       	ld	r28, X+
    18be:	dc 91       	ld	r29, X
    18c0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    18c2:	d3 83       	std	Z+3, r29	; 0x03
    18c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	dc 01       	movw	r26, r24
    18d4:	13 96       	adiw	r26, 0x03	; 3
    18d6:	7c 93       	st	X, r23
    18d8:	6e 93       	st	-X, r22
    18da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    18dc:	7d 83       	std	Y+5, r23	; 0x05
    18de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    18e0:	31 87       	std	Z+9, r19	; 0x09
    18e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    18e4:	f9 01       	movw	r30, r18
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 83       	st	Z, r24
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18f8:	48 81       	ld	r20, Y
    18fa:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    18fc:	4f 3f       	cpi	r20, 0xFF	; 255
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	52 07       	cpc	r21, r18
    1902:	21 f4       	brne	.+8      	; 0x190c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1904:	fc 01       	movw	r30, r24
    1906:	a7 81       	ldd	r26, Z+7	; 0x07
    1908:	b0 85       	ldd	r27, Z+8	; 0x08
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    190c:	dc 01       	movw	r26, r24
    190e:	13 96       	adiw	r26, 0x03	; 3
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vListInsert+0x22>
    1912:	df 01       	movw	r26, r30
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	20 81       	ld	r18, Z
    191e:	31 81       	ldd	r19, Z+1	; 0x01
    1920:	42 17       	cp	r20, r18
    1922:	53 07       	cpc	r21, r19
    1924:	b0 f7       	brcc	.-20     	; 0x1912 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1926:	12 96       	adiw	r26, 0x02	; 2
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	fb 83       	std	Y+3, r31	; 0x03
    1930:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1932:	d5 83       	std	Z+5, r29	; 0x05
    1934:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1936:	bd 83       	std	Y+5, r27	; 0x05
    1938:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    193a:	13 96       	adiw	r26, 0x03	; 3
    193c:	dc 93       	st	X, r29
    193e:	ce 93       	st	-X, r28
    1940:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1942:	99 87       	std	Y+9, r25	; 0x09
    1944:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1946:	fc 01       	movw	r30, r24
    1948:	20 81       	ld	r18, Z
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	20 83       	st	Z, r18
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    195a:	a0 85       	ldd	r26, Z+8	; 0x08
    195c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    195e:	c2 81       	ldd	r28, Z+2	; 0x02
    1960:	d3 81       	ldd	r29, Z+3	; 0x03
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	95 81       	ldd	r25, Z+5	; 0x05
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    196a:	c4 81       	ldd	r28, Z+4	; 0x04
    196c:	d5 81       	ldd	r29, Z+5	; 0x05
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	12 97       	sbiw	r26, 0x02	; 2
    197e:	e8 17       	cp	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	31 f4       	brne	.+12     	; 0x1990 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	95 81       	ldd	r25, Z+5	; 0x05
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
    198e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1994:	8c 91       	ld	r24, X
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <vMainCommunicationTask>:
char printToTerminal[0] = " ";
*/

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	28 97       	sbiw	r28, 0x08	; 8
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
	// Setup for the communication task
	struct sPoint Setpoint = {0}; // Struct for setpoints from server
    19b4:	fe 01       	movw	r30, r28
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	df 01       	movw	r26, r30
    19bc:	1d 92       	st	X+, r1
    19be:	8a 95       	dec	r24
    19c0:	e9 f7       	brne	.-6      	; 0x19bc <vMainCommunicationTask+0x1c>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    19c2:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    19c6:	a1 2c       	mov	r10, r1
    19c8:	b1 2c       	mov	r11, r1
    19ca:	c1 2c       	mov	r12, r1
    19cc:	d1 2c       	mov	r13, r1
    19ce:	e1 2c       	mov	r14, r1
    19d0:	f1 2c       	mov	r15, r1
    19d2:	03 e0       	ldi	r16, 0x03	; 3
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	48 ec       	ldi	r20, 0xC8	; 200
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	6b e0       	ldi	r22, 0x0B	; 11
    19de:	76 e0       	ldi	r23, 0x06	; 6
    19e0:	85 e2       	ldi	r24, 0x25	; 37
    19e2:	95 e0       	ldi	r25, 0x05	; 5
    19e4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <vMainCommunicationTask+0x52>
		vLED_singleHigh(ledRED);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc de       	rcall	.-520    	; 0x17ea <vLED_singleHigh>
	}
	uint8_t success = 0;
	
	while(!success) {
		success = server_connect();
    19f2:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <server_connect>
    19f6:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    19f8:	88 ee       	ldi	r24, 0xE8	; 232
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	0e 94 9b 24 	call	0x4936	; 0x4936 <vTaskDelay>
		vLED_toggle(ledGREEN);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	26 df       	rcall	.-436    	; 0x1852 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	
	while(!success) {
    1a06:	11 23       	and	r17, r17
    1a08:	a1 f3       	breq	.-24     	; 0x19f2 <vMainCommunicationTask+0x52>
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	
	send_handshake();
    1a0a:	0e 94 77 1f 	call	0x3eee	; 0x3eee <send_handshake>
		vLED_toggle(ledGREEN);
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	f3 ea       	ldi	r31, 0xA3	; 163
    1a12:	2f 2e       	mov	r2, r31
    1a14:	fb e1       	ldi	r31, 0x1B	; 27
    1a16:	3f 2e       	mov	r3, r31
    1a18:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			debug("Message received: \n");
    1a1a:	0f 2e       	mov	r0, r31
    1a1c:	ff e0       	ldi	r31, 0x0F	; 15
    1a1e:	af 2e       	mov	r10, r31
    1a20:	f6 e0       	ldi	r31, 0x06	; 6
    1a22:	bf 2e       	mov	r11, r31
    1a24:	f0 2d       	mov	r31, r0
			debug("Type: %i", command_in.type);
    1a26:	0f 2e       	mov	r0, r31
    1a28:	f3 e2       	ldi	r31, 0x23	; 35
    1a2a:	cf 2e       	mov	r12, r31
    1a2c:	f6 e0       	ldi	r31, 0x06	; 6
    1a2e:	df 2e       	mov	r13, r31
    1a30:	f0 2d       	mov	r31, r0
			//debug("Order x: %i", command_in.message.order.x);
			//debug("Order y: %i", command_in.message.order.y);
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1a32:	44 24       	eor	r4, r4
    1a34:	43 94       	inc	r4
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
					break;
				case TYPE_PAUSE:
					// Stop sending update messages
					debug("Received pause from server");
    1a36:	0f 2e       	mov	r0, r31
    1a38:	fc e2       	ldi	r31, 0x2C	; 44
    1a3a:	6f 2e       	mov	r6, r31
    1a3c:	f6 e0       	ldi	r31, 0x06	; 6
    1a3e:	7f 2e       	mov	r7, r31
    1a40:	f0 2d       	mov	r31, r0
	}
	
	send_handshake();
	
	while(1){
		vLED_toggle(ledGREEN);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	05 df       	rcall	.-502    	; 0x1852 <vLED_toggle>
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	4f ef       	ldi	r20, 0xFF	; 255
    1a4c:	5f ef       	ldi	r21, 0xFF	; 255
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	70 e0       	ldi	r23, 0x00	; 0
    1a52:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xCommandReadyBSem>
    1a56:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xCommandReadyBSem+0x1>
    1a5a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <vMainCommunicationTask+0xc4>
    1a62:	98 c0       	rjmp	.+304    	; 0x1b94 <vMainCommunicationTask+0x1f4>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1a64:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	0f 92       	push	r0
			command_in = message_in;
    1a6e:	f1 01       	movw	r30, r2
    1a70:	10 81       	ld	r17, Z
    1a72:	e1 80       	ldd	r14, Z+1	; 0x01
    1a74:	f2 80       	ldd	r15, Z+2	; 0x02
    1a76:	83 80       	ldd	r8, Z+3	; 0x03
    1a78:	94 80       	ldd	r9, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1a7e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
			debug("Message received: \n");
    1a82:	bf 92       	push	r11
    1a84:	af 92       	push	r10
    1a86:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <debug>
			debug("Type: %i", command_in.type);
    1a8a:	1f 92       	push	r1
    1a8c:	1f 93       	push	r17
    1a8e:	df 92       	push	r13
    1a90:	cf 92       	push	r12
    1a92:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <debug>
			//debug("Order x: %i", command_in.message.order.x);
			//debug("Order y: %i", command_in.message.order.y);
			switch(command_in.type){
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	15 30       	cpi	r17, 0x05	; 5
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <vMainCommunicationTask+0x108>
    1aa6:	67 c0       	rjmp	.+206    	; 0x1b76 <vMainCommunicationTask+0x1d6>
    1aa8:	30 f4       	brcc	.+12     	; 0x1ab6 <vMainCommunicationTask+0x116>
    1aaa:	12 30       	cpi	r17, 0x02	; 2
    1aac:	b1 f0       	breq	.+44     	; 0x1ada <vMainCommunicationTask+0x13a>
    1aae:	14 30       	cpi	r17, 0x04	; 4
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <vMainCommunicationTask+0x114>
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <vMainCommunicationTask+0x192>
    1ab4:	6f c0       	rjmp	.+222    	; 0x1b94 <vMainCommunicationTask+0x1f4>
    1ab6:	17 30       	cpi	r17, 0x07	; 7
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <vMainCommunicationTask+0x11c>
    1aba:	65 c0       	rjmp	.+202    	; 0x1b86 <vMainCommunicationTask+0x1e6>
    1abc:	18 f0       	brcs	.+6      	; 0x1ac4 <vMainCommunicationTask+0x124>
    1abe:	18 30       	cpi	r17, 0x08	; 8
    1ac0:	49 f0       	breq	.+18     	; 0x1ad4 <vMainCommunicationTask+0x134>
    1ac2:	68 c0       	rjmp	.+208    	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1aca:	40 92 2e 1a 	sts	0x1A2E, r4	; 0x801a2e <gHandshook>
					taskEXIT_CRITICAL();
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
					break;
    1ad2:	60 c0       	rjmp	.+192    	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_PING:
					send_ping_response();
    1ad4:	0e 94 6d 20 	call	0x40da	; 0x40da <send_ping_response>
					break;
    1ad8:	5d c0       	rjmp	.+186    	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_ORDER:
					Setpoint.x = command_in.message.order.x*10;
    1ada:	b7 01       	movw	r22, r14
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	ee 0c       	add	r14, r14
    1ae2:	ff 1c       	adc	r15, r15
    1ae4:	ee 0c       	add	r14, r14
    1ae6:	ff 1c       	adc	r15, r15
    1ae8:	ee 0c       	add	r14, r14
    1aea:	ff 1c       	adc	r15, r15
    1aec:	6e 0d       	add	r22, r14
    1aee:	7f 1d       	adc	r23, r15
    1af0:	07 2e       	mov	r0, r23
    1af2:	00 0c       	add	r0, r0
    1af4:	88 0b       	sbc	r24, r24
    1af6:	99 0b       	sbc	r25, r25
    1af8:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    1afc:	69 83       	std	Y+1, r22	; 0x01
    1afe:	7a 83       	std	Y+2, r23	; 0x02
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	9c 83       	std	Y+4, r25	; 0x04
					Setpoint.y = command_in.message.order.y;
    1b04:	b4 01       	movw	r22, r8
    1b06:	99 0c       	add	r9, r9
    1b08:	88 0b       	sbc	r24, r24
    1b0a:	99 0b       	sbc	r25, r25
    1b0c:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    1b10:	6d 83       	std	Y+5, r22	; 0x05
    1b12:	7e 83       	std	Y+6, r23	; 0x06
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
					vFunc_Inf2pi(&Setpoint.heading);
					*/
					
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	44 e6       	ldi	r20, 0x64	; 100
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	be 01       	movw	r22, r28
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <poseControllerQ>
    1b28:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <poseControllerQ+0x1>
    1b2c:	0e 94 06 1a 	call	0x340c	; 0x340c <xQueueGenericSend>
					break;
    1b30:	31 c0       	rjmp	.+98     	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_PAUSE:
					// Stop sending update messages
					debug("Received pause from server");
    1b32:	7f 92       	push	r7
    1b34:	6f 92       	push	r6
    1b36:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <debug>
					taskENTER_CRITICAL();
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	0f 92       	push	r0
					gPaused = TRUE;
    1b40:	40 92 2d 1a 	sts	0x1A2D, r4	; 0x801a2d <gPaused>
					taskEXIT_CRITICAL();
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.x = 0;
    1b48:	19 82       	std	Y+1, r1	; 0x01
    1b4a:	1a 82       	std	Y+2, r1	; 0x02
    1b4c:	1b 82       	std	Y+3, r1	; 0x03
    1b4e:	1c 82       	std	Y+4, r1	; 0x04
					Setpoint.y = 0;
    1b50:	1d 82       	std	Y+5, r1	; 0x05
    1b52:	1e 82       	std	Y+6, r1	; 0x06
    1b54:	1f 82       	std	Y+7, r1	; 0x07
    1b56:	18 86       	std	Y+8, r1	; 0x08
					/*
					Setpoint.distance = 0;
					Setpoint.heading = 0;
					*/
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	44 e6       	ldi	r20, 0x64	; 100
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	be 01       	movw	r22, r28
    1b60:	6f 5f       	subi	r22, 0xFF	; 255
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <poseControllerQ>
    1b68:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <poseControllerQ+0x1>
    1b6c:	0e 94 06 1a 	call	0x340c	; 0x340c <xQueueGenericSend>
					break;
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	0f 92       	push	r0
					gPaused = FALSE;
    1b7c:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <gPaused>
					taskEXIT_CRITICAL();
    1b80:	0f 90       	pop	r0
    1b82:	0f be       	out	0x3f, r0	; 63
					break;
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <vMainCommunicationTask+0x1f4>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	0f 92       	push	r0
					gHandshook = FALSE;
    1b8c:	10 92 2e 1a 	sts	0x1A2E, r1	; 0x801a2e <gHandshook>
					taskEXIT_CRITICAL();
    1b90:	0f 90       	pop	r0
					break;
			}
			// Command is processed
		}
		vLED_singleLow(ledRED); // if (xCommandReady) end
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	42 de       	rcall	.-892    	; 0x181e <vLED_singleLow>
	}// While(1) end
    1b9a:	53 cf       	rjmp	.-346    	; 0x1a42 <vMainCommunicationTask+0xa2>

00001b9c <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	1f 92       	push	r1
    1ba2:	1f 92       	push	r1
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1ba8:	0e 94 45 28 	call	0x508a	; 0x508a <xTaskGetTickCount>
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1bb0:	64 e1       	ldi	r22, 0x14	; 20
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <vTaskDelayUntil>
    1bbc:	f9 cf       	rjmp	.-14     	; 0x1bb0 <vMainMovementTask+0x14>

00001bbe <vMainSensorTowerTask>:
		vLED_singleLow(ledRED); // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	61 97       	sbiw	r28, 0x11	; 17
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	89 8b       	std	Y+17, r24	; 0x11
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1bda:	f1 2c       	mov	r15, r1
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1bdc:	68 94       	set
    1bde:	dd 24       	eor	r13, r13
    1be0:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1be2:	68 94       	set
    1be4:	22 24       	eor	r2, r2
    1be6:	22 f8       	bld	r2, 2
    1be8:	0e c0       	rjmp	.+28     	; 0x1c06 <vMainSensorTowerTask+0x48>
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1bea:	0f 2e       	mov	r0, r31
    1bec:	f3 e0       	ldi	r31, 0x03	; 3
    1bee:	df 2e       	mov	r13, r31
    1bf0:	f0 2d       	mov	r31, r0
    1bf2:	09 c0       	rjmp	.+18     	; 0x1c06 <vMainSensorTowerTask+0x48>
    1bf4:	0f 2e       	mov	r0, r31
    1bf6:	f3 e0       	ldi	r31, 0x03	; 3
    1bf8:	df 2e       	mov	r13, r31
    1bfa:	f0 2d       	mov	r31, r0
    1bfc:	04 c0       	rjmp	.+8      	; 0x1c06 <vMainSensorTowerTask+0x48>
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	f3 e0       	ldi	r31, 0x03	; 3
    1c02:	df 2e       	mov	r13, r31
    1c04:	f0 2d       	mov	r31, r0
    int16_t previous_right = 0;
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
		vLED_toggle(ledRED);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	23 de       	rcall	.-954    	; 0x1852 <vLED_toggle>
        // Loop
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1c0c:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <gHandshook>
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <vMainSensorTowerTask+0x58>
    1c14:	0d c1       	rjmp	.+538    	; 0x1e30 <vMainSensorTowerTask+0x272>
    1c16:	80 91 2d 1a 	lds	r24, 0x1A2D	; 0x801a2d <gPaused>
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	09 c1       	rjmp	.+530    	; 0x1e30 <vMainSensorTowerTask+0x272>
			vLED_toggle(ledYELLOW);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	17 de       	rcall	.-978    	; 0x1852 <vLED_toggle>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1c24:	0e 94 45 28 	call	0x508a	; 0x508a <xTaskGetTickCount>
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	46 e9       	ldi	r20, 0x96	; 150
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	be 01       	movw	r22, r28
    1c34:	6f 5f       	subi	r22, 0xFF	; 255
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	80 91 33 1a 	lds	r24, 0x1A33	; 0x801a33 <scanStatusQ>
    1c3c:	90 91 34 1a 	lds	r25, 0x1A34	; 0x801a34 <scanStatusQ+0x1>
    1c40:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	c9 f4       	brne	.+50     	; 0x1c7a <vMainSensorTowerTask+0xbc>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	88 23       	and	r24, r24
    1c4c:	19 f0       	breq	.+6      	; 0x1c54 <vMainSensorTowerTask+0x96>
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	98 f4       	brcc	.+38     	; 0x1c78 <vMainSensorTowerTask+0xba>
    1c52:	08 c0       	rjmp	.+16     	; 0x1c64 <vMainSensorTowerTask+0xa6>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1c54:	99 89       	ldd	r25, Y+17	; 0x11
    1c56:	f9 9e       	mul	r15, r25
    1c58:	f0 2c       	mov	r15, r0
    1c5a:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1c5c:	11 e0       	ldi	r17, 0x01	; 1
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1c5e:	a1 e0       	ldi	r26, 0x01	; 1
    1c60:	a9 8b       	std	Y+17, r26	; 0x11
                        idleCounter = 1;
						break;
    1c62:	0b c0       	rjmp	.+22     	; 0x1c7a <vMainSensorTowerTask+0xbc>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1c64:	bd ec       	ldi	r27, 0xCD	; 205
    1c66:	fb 9e       	mul	r15, r27
    1c68:	f1 2c       	mov	r15, r1
    1c6a:	11 24       	eor	r1, r1
    1c6c:	f6 94       	lsr	r15
    1c6e:	f6 94       	lsr	r15
                        idleCounter = 0;
    1c70:	10 e0       	ldi	r17, 0x00	; 0
                        servoResolution = 1;
                        idleCounter = 1;
						break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1c72:	85 e0       	ldi	r24, 0x05	; 5
    1c74:	89 8b       	std	Y+17, r24	; 0x11
                        servoStep /= servoResolution;
                        idleCounter = 0;
						break;
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <vMainSensorTowerTask+0xbc>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1c78:	10 e0       	ldi	r17, 0x00	; 0
                    default:
                        idleCounter = 0;
						break;
                }
            }
			if ((servoStep*servoResolution)>90 || (servoStep*servoResolution)<0){
    1c7a:	99 89       	ldd	r25, Y+17	; 0x11
    1c7c:	49 2e       	mov	r4, r25
    1c7e:	51 2c       	mov	r5, r1
    1c80:	f4 9c       	mul	r15, r4
    1c82:	40 01       	movw	r8, r0
    1c84:	f5 9c       	mul	r15, r5
    1c86:	90 0c       	add	r9, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	ab e5       	ldi	r26, 0x5B	; 91
    1c8c:	8a 16       	cp	r8, r26
    1c8e:	91 04       	cpc	r9, r1
    1c90:	28 f4       	brcc	.+10     	; 0x1c9c <vMainSensorTowerTask+0xde>
				//debug("servostep*servoresultion error: %i\t%i", servoStep, servoResolution);
			} else{
				vServo_setAngle(servoStep*servoResolution);
    1c92:	f9 9e       	mul	r15, r25
    1c94:	80 2d       	mov	r24, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	0e 94 98 20 	call	0x4130	; 0x4130 <vServo_setAngle>
			}
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point					ENDRET FRA 200 TIL 100 FOR TEST!!!!
    1c9c:	68 ec       	ldi	r22, 0xC8	; 200
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	02 96       	adiw	r24, 0x02	; 2
    1ca4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	5f d9       	rcall	.-3394   	; 0xf6a <ui8DistSens_readCM>
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1cac:	38 2e       	mov	r3, r24
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	5c d9       	rcall	.-3400   	; 0xf6a <ui8DistSens_readCM>
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1cb2:	e8 2e       	mov	r14, r24
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	59 d9       	rcall	.-3406   	; 0xf6a <ui8DistSens_readCM>
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1cb8:	c8 2e       	mov	r12, r24
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	56 d9       	rcall	.-3412   	; 0xf6a <ui8DistSens_readCM>
    1cbe:	88 8b       	std	Y+16, r24	; 0x10
			//debug("forwardSensor: %i", forwardSensor);
			//debug("leftSensor: %i", leftSensor);
			//debug("rearSensor: %i", rearSensor);
			//debug("rightSensor: %i", rightSensor);
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	48 e2       	ldi	r20, 0x28	; 40
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    1cce:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    1cd2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
                thetahat = gTheta_hat;
    1cd6:	80 91 29 1a 	lds	r24, 0x1A29	; 0x801a29 <gTheta_hat>
    1cda:	90 91 2a 1a 	lds	r25, 0x1A2A	; 0x801a2a <gTheta_hat+0x1>
    1cde:	a0 91 2b 1a 	lds	r26, 0x1A2B	; 0x801a2b <gTheta_hat+0x2>
    1ce2:	b0 91 2c 1a 	lds	r27, 0x1A2C	; 0x801a2c <gTheta_hat+0x3>
    1ce6:	8c 87       	std	Y+12, r24	; 0x0c
    1ce8:	9d 87       	std	Y+13, r25	; 0x0d
    1cea:	ae 87       	std	Y+14, r26	; 0x0e
    1cec:	bf 87       	std	Y+15, r27	; 0x0f
                xhat = gX_hat;
    1cee:	a0 90 27 1a 	lds	r10, 0x1A27	; 0x801a27 <gX_hat>
    1cf2:	b0 90 28 1a 	lds	r11, 0x1A28	; 0x801a28 <gX_hat+0x1>
                yhat = gY_hat;
    1cf6:	60 90 25 1a 	lds	r6, 0x1A25	; 0x801a25 <gY_hat>
    1cfa:	70 90 26 1a 	lds	r7, 0x1A26	; 0x801a26 <gY_hat+0x1>
            xSemaphoreGive(xPoseMutex);
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    1d06:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    1d0a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1d0e:	1b 30       	cpi	r17, 0x0B	; 11
    1d10:	38 f0       	brcs	.+14     	; 0x1d20 <vMainSensorTowerTask+0x162>
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	81 11       	cpse	r24, r1
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <vMainSensorTowerTask+0x162>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1d18:	0e 94 42 20 	call	0x4084	; 0x4084 <send_idle>
                idleCounter = 1;
    1d1c:	11 e0       	ldi	r17, 0x01	; 1
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <vMainSensorTowerTask+0x16e>
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1d20:	11 23       	and	r17, r17
    1d22:	21 f0       	breq	.+8      	; 0x1d2c <vMainSensorTowerTask+0x16e>
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	81 11       	cpse	r24, r1
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vMainSensorTowerTask+0x16e>
                idleCounter++;
    1d2a:	1f 5f       	subi	r17, 0xFF	; 255
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	44 e3       	ldi	r20, 0x34	; 52
    1d32:	53 e4       	ldi	r21, 0x43	; 67
    1d34:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d36:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d3c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    1d40:	2b ed       	ldi	r18, 0xDB	; 219
    1d42:	3f e0       	ldi	r19, 0x0F	; 15
    1d44:	49 e4       	ldi	r20, 0x49	; 73
    1d46:	50 e4       	ldi	r21, 0x40	; 64
    1d48:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    1d4c:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    1d50:	6c 87       	std	Y+12, r22	; 0x0c
    1d52:	7d 87       	std	Y+13, r23	; 0x0d
    1d54:	8e 87       	std	Y+14, r24	; 0x0e
    1d56:	9f 87       	std	Y+15, r25	; 0x0f
    1d58:	c3 01       	movw	r24, r6
    1d5a:	6a e0       	ldi	r22, 0x0A	; 10
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <__divmodhi4>
    1d62:	fb 01       	movw	r30, r22
    1d64:	c5 01       	movw	r24, r10
    1d66:	6a e0       	ldi	r22, 0x0A	; 10
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <__divmodhi4>
    1d6e:	cb 01       	movw	r24, r22
    1d70:	a8 88       	ldd	r10, Y+16	; 0x10
    1d72:	03 2d       	mov	r16, r3
    1d74:	94 01       	movw	r18, r8
    1d76:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d78:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d7a:	bf 01       	movw	r22, r30
    1d7c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <send_update>
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1d80:	9f e1       	ldi	r25, 0x1F	; 31
    1d82:	89 16       	cp	r8, r25
    1d84:	91 04       	cpc	r9, r1
    1d86:	2c f0       	brlt	.+10     	; 0x1d92 <vMainSensorTowerTask+0x1d4>
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1d88:	ac e3       	ldi	r26, 0x3C	; 60
    1d8a:	8a 16       	cp	r8, r26
    1d8c:	91 04       	cpc	r9, r1
    1d8e:	dc f0       	brlt	.+54     	; 0x1dc6 <vMainSensorTowerTask+0x208>
    1d90:	38 88       	ldd	r3, Y+16	; 0x10
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	83 0d       	add	r24, r3
    1d96:	83 31       	cpi	r24, 0x13	; 19
    1d98:	b0 f4       	brcc	.+44     	; 0x1dc6 <vMainSensorTowerTask+0x208>
                // Stop controller
                struct sPoint Setpoint = {0, 0};
    1d9a:	1c 82       	std	Y+4, r1	; 0x04
    1d9c:	1d 82       	std	Y+5, r1	; 0x05
    1d9e:	1e 82       	std	Y+6, r1	; 0x06
    1da0:	1f 82       	std	Y+7, r1	; 0x07
    1da2:	18 86       	std	Y+8, r1	; 0x08
    1da4:	19 86       	std	Y+9, r1	; 0x09
    1da6:	1a 86       	std	Y+10, r1	; 0x0a
    1da8:	1b 86       	std	Y+11, r1	; 0x0b
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	44 e6       	ldi	r20, 0x64	; 100
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	be 01       	movw	r22, r28
    1db2:	6c 5f       	subi	r22, 0xFC	; 252
    1db4:	7f 4f       	sbci	r23, 0xFF	; 255
    1db6:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <poseControllerQ>
    1dba:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <poseControllerQ+0x1>
    1dbe:	0e 94 06 1a 	call	0x340c	; 0x340c <xQueueGenericSend>
				send_idle();
    1dc2:	0e 94 42 20 	call	0x4084	; 0x4084 <send_idle>
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1dc6:	bb e5       	ldi	r27, 0x5B	; 91
    1dc8:	8b 16       	cp	r8, r27
    1dca:	91 04       	cpc	r9, r1
    1dcc:	9c f4       	brge	.+38     	; 0x1df4 <vMainSensorTowerTask+0x236>
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	d8 12       	cpse	r13, r24
    1dd2:	10 c0       	rjmp	.+32     	; 0x1df4 <vMainSensorTowerTask+0x236>
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <vMainSensorTowerTask+0x21e>
    1dda:	40 c0       	rjmp	.+128    	; 0x1e5c <vMainSensorTowerTask+0x29e>
                servoStep++;
    1ddc:	f3 94       	inc	r15
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1dde:	f4 9c       	mul	r15, r4
    1de0:	40 01       	movw	r8, r0
    1de2:	f5 9c       	mul	r15, r5
    1de4:	90 0c       	add	r9, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	9a e5       	ldi	r25, 0x5A	; 90
    1dea:	89 16       	cp	r8, r25
    1dec:	91 04       	cpc	r9, r1
    1dee:	0c f0       	brlt	.+2      	; 0x1df2 <vMainSensorTowerTask+0x234>
    1df0:	fc ce       	rjmp	.-520    	; 0x1bea <vMainSensorTowerTask+0x2c>
    1df2:	15 c0       	rjmp	.+42     	; 0x1e1e <vMainSensorTowerTask+0x260>
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1df4:	18 14       	cp	r1, r8
    1df6:	19 04       	cpc	r1, r9
    1df8:	64 f5       	brge	.+88     	; 0x1e52 <vMainSensorTowerTask+0x294>
    1dfa:	a3 e0       	ldi	r26, 0x03	; 3
    1dfc:	da 12       	cpse	r13, r26
    1dfe:	23 c0       	rjmp	.+70     	; 0x1e46 <vMainSensorTowerTask+0x288>
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <vMainSensorTowerTask+0x24a>
    1e06:	ff ce       	rjmp	.-514    	; 0x1c06 <vMainSensorTowerTask+0x48>
                servoStep --;
    1e08:	fa 94       	dec	r15
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e0a:	f4 9c       	mul	r15, r4
    1e0c:	40 01       	movw	r8, r0
    1e0e:	f5 9c       	mul	r15, r5
    1e10:	90 0c       	add	r9, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <vMainSensorTowerTask+0x260>
    1e16:	b4 e0       	ldi	r27, 0x04	; 4
    1e18:	db 16       	cp	r13, r27
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <vMainSensorTowerTask+0x260>
    1e1c:	eb ce       	rjmp	.-554    	; 0x1bf4 <vMainSensorTowerTask+0x36>
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1e1e:	18 14       	cp	r1, r8
    1e20:	19 04       	cpc	r1, r9
    1e22:	0c f4       	brge	.+2      	; 0x1e26 <vMainSensorTowerTask+0x268>
    1e24:	f0 ce       	rjmp	.-544    	; 0x1c06 <vMainSensorTowerTask+0x48>
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	d8 12       	cpse	r13, r24
    1e2a:	ed ce       	rjmp	.-550    	; 0x1c06 <vMainSensorTowerTask+0x48>
                rotationDirection = moveCounterClockwise;
    1e2c:	d2 2c       	mov	r13, r2
    1e2e:	eb ce       	rjmp	.-554    	; 0x1c06 <vMainSensorTowerTask+0x48>
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	0e 94 98 20 	call	0x4130	; 0x4130 <vServo_setAngle>
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1e36:	84 e6       	ldi	r24, 0x64	; 100
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 9b 24 	call	0x4936	; 0x4936 <vTaskDelay>
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1e3e:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1e40:	f1 2c       	mov	r15, r1
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1e42:	d2 2c       	mov	r13, r2
    1e44:	e0 ce       	rjmp	.-576    	; 0x1c06 <vMainSensorTowerTask+0x48>
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e46:	9a e5       	ldi	r25, 0x5A	; 90
    1e48:	89 16       	cp	r8, r25
    1e4a:	91 04       	cpc	r9, r1
    1e4c:	0c f4       	brge	.+2      	; 0x1e50 <vMainSensorTowerTask+0x292>
    1e4e:	db ce       	rjmp	.-586    	; 0x1c06 <vMainSensorTowerTask+0x48>
    1e50:	e2 cf       	rjmp	.-60     	; 0x1e16 <vMainSensorTowerTask+0x258>
    1e52:	aa e5       	ldi	r26, 0x5A	; 90
    1e54:	8a 16       	cp	r8, r26
    1e56:	91 04       	cpc	r9, r1
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <vMainSensorTowerTask+0x2a6>
    1e5a:	e5 cf       	rjmp	.-54     	; 0x1e26 <vMainSensorTowerTask+0x268>
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e5c:	18 14       	cp	r1, r8
    1e5e:	19 04       	cpc	r1, r9
    1e60:	94 f3       	brlt	.-28     	; 0x1e46 <vMainSensorTowerTask+0x288>
    1e62:	f7 cf       	rjmp	.-18     	; 0x1e52 <vMainSensorTowerTask+0x294>
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e64:	b4 e0       	ldi	r27, 0x04	; 4
    1e66:	db 12       	cpse	r13, r27
    1e68:	de cf       	rjmp	.-68     	; 0x1e26 <vMainSensorTowerTask+0x268>
    1e6a:	c9 ce       	rjmp	.-622    	; 0x1bfe <vMainSensorTowerTask+0x40>

00001e6c <vMainPoseControllerTask>:
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	a3 97       	sbiw	r28, 0x23	; 35
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
        debug("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
	
    /* Task init */    
    struct sPoint Setpoint = {0}; // Updates from server
    1e80:	fe 01       	movw	r30, r28
    1e82:	31 96       	adiw	r30, 0x01	; 1
    1e84:	88 e0       	ldi	r24, 0x08	; 8
    1e86:	df 01       	movw	r26, r30
    1e88:	1d 92       	st	X+, r1
    1e8a:	8a 95       	dec	r24
    1e8c:	e9 f7       	brne	.-6      	; 0x1e88 <vMainPoseControllerTask+0x1c>
    //struct sCartesian Error = {0}; // Error values
    struct sPoint oldVal = {0};
    struct sPoint referenceModel = {0};
	float radiusEpsilon = 5; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1e8e:	19 86       	std	Y+9, r1	; 0x09
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1e90:	1b 86       	std	Y+11, r1	; 0x0b
    1e92:	1a 86       	std	Y+10, r1	; 0x0a
	int16_t rightWheelTicks = 0;
    1e94:	1d 86       	std	Y+13, r1	; 0x0d
    1e96:	1c 86       	std	Y+12, r1	; 0x0c
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1e98:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t gRightWheelDirection = 0;
    1e9a:	1f 86       	std	Y+15, r1	; 0x0f
	
	uint8_t idleSendt = FALSE;
    1e9c:	00 e0       	ldi	r16, 0x00	; 0
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1e9e:	22 24       	eor	r2, r2
    1ea0:	23 94       	inc	r2
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1ea2:	18 a2       	std	Y+32, r1	; 0x20
    1ea4:	19 a2       	std	Y+33, r1	; 0x21
    1ea6:	1a a2       	std	Y+34, r1	; 0x22
    1ea8:	1b a2       	std	Y+35, r1	; 0x23
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1eaa:	1c 8e       	std	Y+28, r1	; 0x1c
    1eac:	1d 8e       	std	Y+29, r1	; 0x1d
    1eae:	1e 8e       	std	Y+30, r1	; 0x1e
    1eb0:	1f 8e       	std	Y+31, r1	; 0x1f
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gLeftWheelDirection = motorLeftForward;
    1eb2:	68 94       	set
    1eb4:	33 24       	eor	r3, r3
    1eb6:	32 f8       	bld	r3, 2
	
	uint8_t idleSendt = FALSE;
	     
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1eb8:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <gHandshook>
    1ebc:	88 23       	and	r24, r24
    1ebe:	e1 f3       	breq	.-8      	; 0x1eb8 <vMainPoseControllerTask+0x4c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ec0:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1ec2:	40 91 2f 1a 	lds	r20, 0x1A2F	; 0x801a2f <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1ec6:	10 92 2f 1a 	sts	0x1A2F, r1	; 0x801a2f <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1eca:	10 91 30 1a 	lds	r17, 0x1A30	; 0x801a30 <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1ece:	10 92 30 1a 	sts	0x1A30, r1	; 0x801a30 <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1ed2:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1ed4:	be 01       	movw	r22, r28
    1ed6:	66 5f       	subi	r22, 0xF6	; 246
    1ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1edc:	27 d6       	rcall	.+3150   	; 0x2b2c <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1ede:	41 2f       	mov	r20, r17
    1ee0:	be 01       	movw	r22, r28
    1ee2:	64 5f       	subi	r22, 0xF4	; 244
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	38 d6       	rcall	.+3184   	; 0x2b5a <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <xTickMutex>
    1ef8:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <xTickMutex+0x1>
    1efc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1f00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f04:	90 93 22 1a 	sts	0x1A22, r25	; 0x801a22 <gLeftWheelTicks+0x1>
    1f08:	80 93 21 1a 	sts	0x1A21, r24	; 0x801a21 <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f10:	90 93 24 1a 	sts	0x1A24, r25	; 0x801a24 <gRightWheelTicks+0x1>
    1f14:	80 93 23 1a 	sts	0x1A23, r24	; 0x801a23 <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <xTickMutex>
    1f20:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <xTickMutex+0x1>
    1f24:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	4f ef       	ldi	r20, 0xFF	; 255
    1f2c:	5f ef       	ldi	r21, 0xFF	; 255
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	80 91 99 1b 	lds	r24, 0x1B99	; 0x801b99 <xControllerBSem>
    1f36:	90 91 9a 1b 	lds	r25, 0x1B9A	; 0x801b9a <xControllerBSem+0x1>
    1f3a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	09 f0       	breq	.+2      	; 0x1f44 <vMainPoseControllerTask+0xd8>
    1f42:	ba cf       	rjmp	.-140    	; 0x1eb8 <vMainPoseControllerTask+0x4c>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	4f ef       	ldi	r20, 0xFF	; 255
    1f48:	5f ef       	ldi	r21, 0xFF	; 255
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    1f52:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    1f56:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1f5a:	40 90 29 1a 	lds	r4, 0x1A29	; 0x801a29 <gTheta_hat>
    1f5e:	50 90 2a 1a 	lds	r5, 0x1A2A	; 0x801a2a <gTheta_hat+0x1>
    1f62:	60 90 2b 1a 	lds	r6, 0x1A2B	; 0x801a2b <gTheta_hat+0x2>
    1f66:	70 90 2c 1a 	lds	r7, 0x1A2C	; 0x801a2c <gTheta_hat+0x3>
					xhat = gX_hat;
    1f6a:	c0 90 27 1a 	lds	r12, 0x1A27	; 0x801a27 <gX_hat>
    1f6e:	d0 90 28 1a 	lds	r13, 0x1A28	; 0x801a28 <gX_hat+0x1>
					yhat = gY_hat;
    1f72:	e0 90 25 1a 	lds	r14, 0x1A25	; 0x801a25 <gY_hat>
    1f76:	f0 90 26 1a 	lds	r15, 0x1A26	; 0x801a26 <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    1f82:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    1f86:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	be 01       	movw	r22, r28
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <poseControllerQ>
    1f9a:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <poseControllerQ+0x1>
    1f9e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	c9 f4       	brne	.+50     	; 0x1fd8 <vMainPoseControllerTask+0x16c>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	44 e1       	ldi	r20, 0x14	; 20
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	be 01       	movw	r22, r28
    1fae:	6f 5f       	subi	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	80 91 35 1a 	lds	r24, 0x1A35	; 0x801a35 <poseControllerQ>
    1fb6:	90 91 36 1a 	lds	r25, 0x1A36	; 0x801a36 <poseControllerQ+0x1>
    1fba:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
					xTargt = Setpoint.x;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc6:	8c 8b       	std	Y+20, r24	; 0x14
    1fc8:	9d 8b       	std	Y+21, r25	; 0x15
    1fca:	ae 8b       	std	Y+22, r26	; 0x16
    1fcc:	bf 8b       	std	Y+23, r27	; 0x17
					yTargt = Setpoint.y;
    1fce:	8d 80       	ldd	r8, Y+5	; 0x05
    1fd0:	9e 80       	ldd	r9, Y+6	; 0x06
    1fd2:	af 80       	ldd	r10, Y+7	; 0x07
    1fd4:	b8 84       	ldd	r11, Y+8	; 0x08
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <vMainPoseControllerTask+0x194>
				} else {
					xTargt = xhat;
    1fd8:	b6 01       	movw	r22, r12
    1fda:	0d 2c       	mov	r0, r13
    1fdc:	00 0c       	add	r0, r0
    1fde:	88 0b       	sbc	r24, r24
    1fe0:	99 0b       	sbc	r25, r25
    1fe2:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    1fe6:	6c 8b       	std	Y+20, r22	; 0x14
    1fe8:	7d 8b       	std	Y+21, r23	; 0x15
    1fea:	8e 8b       	std	Y+22, r24	; 0x16
    1fec:	9f 8b       	std	Y+23, r25	; 0x17
					yTargt = yhat;
    1fee:	b7 01       	movw	r22, r14
    1ff0:	0f 2c       	mov	r0, r15
    1ff2:	00 0c       	add	r0, r0
    1ff4:	88 0b       	sbc	r24, r24
    1ff6:	99 0b       	sbc	r25, r25
    1ff8:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    1ffc:	4b 01       	movw	r8, r22
    1ffe:	5c 01       	movw	r10, r24
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    2000:	b6 01       	movw	r22, r12
    2002:	dd 0c       	add	r13, r13
    2004:	88 0b       	sbc	r24, r24
    2006:	99 0b       	sbc	r25, r25
    2008:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	6c 89       	ldd	r22, Y+20	; 0x14
    2012:	7d 89       	ldd	r23, Y+21	; 0x15
    2014:	8e 89       	ldd	r24, Y+22	; 0x16
    2016:	9f 89       	ldd	r25, Y+23	; 0x17
    2018:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    201c:	6c 8b       	std	Y+20, r22	; 0x14
    201e:	7d 8b       	std	Y+21, r23	; 0x15
    2020:	8e 8b       	std	Y+22, r24	; 0x16
    2022:	9f 8b       	std	Y+23, r25	; 0x17
    2024:	b7 01       	movw	r22, r14
    2026:	ff 0c       	add	r15, r15
    2028:	88 0b       	sbc	r24, r24
    202a:	99 0b       	sbc	r25, r25
    202c:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    2030:	9b 01       	movw	r18, r22
    2032:	ac 01       	movw	r20, r24
    2034:	c5 01       	movw	r24, r10
    2036:	b4 01       	movw	r22, r8
    2038:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    203c:	6b 01       	movw	r12, r22
    203e:	7c 01       	movw	r14, r24
    2040:	2c 89       	ldd	r18, Y+20	; 0x14
    2042:	3d 89       	ldd	r19, Y+21	; 0x15
    2044:	4e 89       	ldd	r20, Y+22	; 0x16
    2046:	5f 89       	ldd	r21, Y+23	; 0x17
    2048:	ca 01       	movw	r24, r20
    204a:	b9 01       	movw	r22, r18
    204c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2050:	4b 01       	movw	r8, r22
    2052:	5c 01       	movw	r10, r24
    2054:	a7 01       	movw	r20, r14
    2056:	96 01       	movw	r18, r12
    2058:	c7 01       	movw	r24, r14
    205a:	b6 01       	movw	r22, r12
    205c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2060:	68 8f       	std	Y+24, r22	; 0x18
    2062:	79 8f       	std	Y+25, r23	; 0x19
    2064:	8a 8f       	std	Y+26, r24	; 0x1a
    2066:	9b 8f       	std	Y+27, r25	; 0x1b
    2068:	28 8d       	ldd	r18, Y+24	; 0x18
    206a:	39 8d       	ldd	r19, Y+25	; 0x19
    206c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    206e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2070:	c5 01       	movw	r24, r10
    2072:	b4 01       	movw	r22, r8
    2074:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    2078:	0e 94 1d 32 	call	0x643a	; 0x643a <sqrt>
    207c:	4b 01       	movw	r8, r22
    207e:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	46 e9       	ldi	r20, 0x96	; 150
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__cmpsf2>
    208c:	88 23       	and	r24, r24
    208e:	c4 f4       	brge	.+48     	; 0x20c0 <vMainPoseControllerTask+0x254>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4c e4       	ldi	r20, 0x4C	; 76
    2096:	52 e4       	ldi	r21, 0x42	; 66
    2098:	c5 01       	movw	r24, r10
    209a:	b4 01       	movw	r22, r8
    209c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	46 e9       	ldi	r20, 0x96	; 150
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 ec       	ldi	r20, 0xC0	; 192
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    20b8:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__fixunssfsi>
    20bc:	16 2f       	mov	r17, r22
    20be:	01 c0       	rjmp	.+2      	; 0x20c2 <vMainPoseControllerTask+0x256>
				}else{
					currentDriveActuation = maxDriveActuation;
    20c0:	1b e4       	ldi	r17, 0x4B	; 75
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 ea       	ldi	r20, 0xA0	; 160
    20c8:	50 e4       	ldi	r21, 0x40	; 64
    20ca:	c5 01       	movw	r24, r10
    20cc:	b4 01       	movw	r22, r8
    20ce:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	0c f0       	brlt	.+2      	; 0x20d8 <vMainPoseControllerTask+0x26c>
    20d6:	4b c1       	rjmp	.+662    	; 0x236e <__stack+0x16f>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    20d8:	2c 89       	ldd	r18, Y+20	; 0x14
    20da:	3d 89       	ldd	r19, Y+21	; 0x15
    20dc:	4e 89       	ldd	r20, Y+22	; 0x16
    20de:	5f 89       	ldd	r21, Y+23	; 0x17
    20e0:	c7 01       	movw	r24, r14
    20e2:	b6 01       	movw	r22, r12
    20e4:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    20e8:	a3 01       	movw	r20, r6
    20ea:	92 01       	movw	r18, r4
    20ec:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    20f0:	68 8b       	std	Y+16, r22	; 0x10
    20f2:	79 8b       	std	Y+17, r23	; 0x11
    20f4:	8a 8b       	std	Y+18, r24	; 0x12
    20f6:	9b 8b       	std	Y+19, r25	; 0x13
					vFunc_Inf2pi(&thetaDiff);
    20f8:	ce 01       	movw	r24, r28
    20fa:	40 96       	adiw	r24, 0x10	; 16
    20fc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    2100:	88 88       	ldd	r8, Y+16	; 0x10
    2102:	99 88       	ldd	r9, Y+17	; 0x11
    2104:	aa 88       	ldd	r10, Y+18	; 0x12
    2106:	bb 88       	ldd	r11, Y+19	; 0x13
    2108:	75 01       	movw	r14, r10
    210a:	64 01       	movw	r12, r8
    210c:	e8 94       	clt
    210e:	f7 f8       	bld	r15, 7
    2110:	29 e1       	ldi	r18, 0x19	; 25
    2112:	34 e0       	ldi	r19, 0x04	; 4
    2114:	46 e0       	ldi	r20, 0x06	; 6
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	c7 01       	movw	r24, r14
    211a:	b6 01       	movw	r22, r12
    211c:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
    2120:	18 16       	cp	r1, r24
    2122:	0c f4       	brge	.+2      	; 0x2126 <vMainPoseControllerTask+0x2ba>
    2124:	ab c0       	rjmp	.+342    	; 0x227c <__stack+0x7d>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    2126:	22 e7       	ldi	r18, 0x72	; 114
    2128:	3a e8       	ldi	r19, 0x8A	; 138
    212a:	4e e8       	ldi	r20, 0x8E	; 142
    212c:	5c e3       	ldi	r21, 0x3C	; 60
    212e:	c7 01       	movw	r24, r14
    2130:	b6 01       	movw	r22, r12
    2132:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__cmpsf2>
    2136:	88 23       	and	r24, r24
    2138:	1c f0       	brlt	.+6      	; 0x2140 <vMainPoseControllerTask+0x2d4>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    213a:	21 10       	cpse	r2, r1
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <vMainPoseControllerTask+0x2d8>
    213e:	9e c0       	rjmp	.+316    	; 0x227c <__stack+0x7d>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    2140:	22 24       	eor	r2, r2
    2142:	23 94       	inc	r2
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	a9 01       	movw	r20, r18
    214a:	c5 01       	movw	r24, r10
    214c:	b4 01       	movw	r22, r8
    214e:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
    2152:	88 23       	and	r24, r24
    2154:	c4 f1       	brlt	.+112    	; 0x21c6 <vMainPoseControllerTask+0x35a>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    2156:	01 2f       	mov	r16, r17
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	b8 01       	movw	r22, r16
    215c:	01 2e       	mov	r0, r17
    215e:	00 0c       	add	r0, r0
    2160:	88 0b       	sbc	r24, r24
    2162:	99 0b       	sbc	r25, r25
    2164:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    2168:	2b 01       	movw	r4, r22
    216a:	3c 01       	movw	r6, r24
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	46 e1       	ldi	r20, 0x16	; 22
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	c7 01       	movw	r24, r14
    2176:	b6 01       	movw	r22, r12
    2178:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    217c:	9b 01       	movw	r18, r22
    217e:	ac 01       	movw	r20, r24
    2180:	c3 01       	movw	r24, r6
    2182:	b2 01       	movw	r22, r4
    2184:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    2188:	6b 01       	movw	r12, r22
    218a:	7c 01       	movw	r14, r24
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2196:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2198:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    219c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	c7 01       	movw	r24, r14
    21a6:	b6 01       	movw	r22, r12
    21a8:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    21ac:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    21b0:	06 17       	cp	r16, r22
    21b2:	17 07       	cpc	r17, r23
    21b4:	0c f4       	brge	.+2      	; 0x21b8 <vMainPoseControllerTask+0x34c>
    21b6:	41 c0       	rjmp	.+130    	; 0x223a <__stack+0x3b>
    21b8:	3b 01       	movw	r6, r22
    21ba:	77 23       	and	r23, r23
    21bc:	0c f0       	brlt	.+2      	; 0x21c0 <vMainPoseControllerTask+0x354>
    21be:	40 c0       	rjmp	.+128    	; 0x2240 <__stack+0x41>
    21c0:	61 2c       	mov	r6, r1
    21c2:	71 2c       	mov	r7, r1
    21c4:	3d c0       	rjmp	.+122    	; 0x2240 <__stack+0x41>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    21c6:	61 2e       	mov	r6, r17
    21c8:	71 2c       	mov	r7, r1
    21ca:	b3 01       	movw	r22, r6
    21cc:	07 2c       	mov	r0, r7
    21ce:	00 0c       	add	r0, r0
    21d0:	88 0b       	sbc	r24, r24
    21d2:	99 0b       	sbc	r25, r25
    21d4:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    21d8:	6c 8b       	std	Y+20, r22	; 0x14
    21da:	7d 8b       	std	Y+21, r23	; 0x15
    21dc:	8e 8b       	std	Y+22, r24	; 0x16
    21de:	9f 8b       	std	Y+23, r25	; 0x17
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	46 e1       	ldi	r20, 0x16	; 22
    21e6:	54 e4       	ldi	r21, 0x44	; 68
    21e8:	c7 01       	movw	r24, r14
    21ea:	b6 01       	movw	r22, r12
    21ec:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	6c 89       	ldd	r22, Y+20	; 0x14
    21f6:	7d 89       	ldd	r23, Y+21	; 0x15
    21f8:	8e 89       	ldd	r24, Y+22	; 0x16
    21fa:	9f 89       	ldd	r25, Y+23	; 0x17
    21fc:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    2200:	6b 01       	movw	r12, r22
    2202:	7c 01       	movw	r14, r24
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	68 a1       	ldd	r22, Y+32	; 0x20
    220e:	79 a1       	ldd	r23, Y+33	; 0x21
    2210:	8a a1       	ldd	r24, Y+34	; 0x22
    2212:	9b a1       	ldd	r25, Y+35	; 0x23
    2214:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2218:	9b 01       	movw	r18, r22
    221a:	ac 01       	movw	r20, r24
    221c:	c7 01       	movw	r24, r14
    221e:	b6 01       	movw	r22, r12
    2220:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    2224:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    2228:	66 16       	cp	r6, r22
    222a:	77 06       	cpc	r7, r23
    222c:	44 f0       	brlt	.+16     	; 0x223e <__stack+0x3f>
    222e:	8b 01       	movw	r16, r22
    2230:	77 23       	and	r23, r23
    2232:	34 f4       	brge	.+12     	; 0x2240 <__stack+0x41>
    2234:	00 e0       	ldi	r16, 0x00	; 0
    2236:	10 e0       	ldi	r17, 0x00	; 0
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <__stack+0x41>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    223a:	38 01       	movw	r6, r16
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <__stack+0x41>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    223e:	83 01       	movw	r16, r6
							LSpeed = currentDriveActuation;
							
							
						}
						
						leftIntError += thetaDiff;
    2240:	a5 01       	movw	r20, r10
    2242:	94 01       	movw	r18, r8
    2244:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2246:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2248:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    224c:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    2250:	6c 8f       	std	Y+28, r22	; 0x1c
    2252:	7d 8f       	std	Y+29, r23	; 0x1d
    2254:	8e 8f       	std	Y+30, r24	; 0x1e
    2256:	9f 8f       	std	Y+31, r25	; 0x1f
						rightIntError -= thetaDiff;
    2258:	a5 01       	movw	r20, r10
    225a:	94 01       	movw	r18, r8
    225c:	68 a1       	ldd	r22, Y+32	; 0x20
    225e:	79 a1       	ldd	r23, Y+33	; 0x21
    2260:	8a a1       	ldd	r24, Y+34	; 0x22
    2262:	9b a1       	ldd	r25, Y+35	; 0x23
    2264:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    2268:	68 a3       	std	Y+32, r22	; 0x20
    226a:	79 a3       	std	Y+33, r23	; 0x21
    226c:	8a a3       	std	Y+34, r24	; 0x22
    226e:	9b a3       	std	Y+35, r25	; 0x23
						
						
						gRightWheelDirection = motorRightForward;
    2270:	96 e0       	ldi	r25, 0x06	; 6
    2272:	9f 87       	std	Y+15, r25	; 0x0f
						gLeftWheelDirection = motorLeftForward;
    2274:	3e 86       	std	Y+14, r3	; 0x0e
						lastMovement = moveForward;
    2276:	a1 e0       	ldi	r26, 0x01	; 1
    2278:	a9 87       	std	Y+9, r26	; 0x09
    227a:	6e c0       	rjmp	.+220    	; 0x2358 <__stack+0x159>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	a9 01       	movw	r20, r18
    2282:	c5 01       	movw	r24, r10
    2284:	b4 01       	movw	r22, r8
    2286:	0e 94 a5 31 	call	0x634a	; 0x634a <__gesf2>
    228a:	88 23       	and	r24, r24
    228c:	9c f1       	brlt	.+102    	; 0x22f4 <__stack+0xf5>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    228e:	2e ea       	ldi	r18, 0xAE	; 174
    2290:	37 e4       	ldi	r19, 0x47	; 71
    2292:	41 e6       	ldi	r20, 0x61	; 97
    2294:	5e e3       	ldi	r21, 0x3E	; 62
    2296:	c7 01       	movw	r24, r14
    2298:	b6 01       	movw	r22, r12
    229a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    229e:	2a e9       	ldi	r18, 0x9A	; 154
    22a0:	39 e9       	ldi	r19, 0x99	; 153
    22a2:	49 e9       	ldi	r20, 0x99	; 153
    22a4:	5e e3       	ldi	r21, 0x3E	; 62
    22a6:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    22aa:	6b 01       	movw	r12, r22
    22ac:	7c 01       	movw	r14, r24
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	52 ec       	ldi	r21, 0xC2	; 194
    22b6:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    22ba:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    22be:	3b 01       	movw	r6, r22
							gLeftWheelDirection = motorLeftBackward;
    22c0:	b5 e0       	ldi	r27, 0x05	; 5
    22c2:	be 87       	std	Y+14, r27	; 0x0e
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	52 e4       	ldi	r21, 0x42	; 66
    22cc:	c7 01       	movw	r24, r14
    22ce:	b6 01       	movw	r22, r12
    22d0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    22d4:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    22d8:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightForward;
    22da:	86 e0       	ldi	r24, 0x06	; 6
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
							lastMovement = moveCounterClockwise;
    22de:	39 86       	std	Y+9, r3	; 0x09
    22e0:	21 2c       	mov	r2, r1
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    22e2:	18 a2       	std	Y+32, r1	; 0x20
    22e4:	19 a2       	std	Y+33, r1	; 0x21
    22e6:	1a a2       	std	Y+34, r1	; 0x22
    22e8:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    22ea:	1c 8e       	std	Y+28, r1	; 0x1c
    22ec:	1d 8e       	std	Y+29, r1	; 0x1d
    22ee:	1e 8e       	std	Y+30, r1	; 0x1e
    22f0:	1f 8e       	std	Y+31, r1	; 0x1f
    22f2:	32 c0       	rjmp	.+100    	; 0x2358 <__stack+0x159>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22f4:	2e ea       	ldi	r18, 0xAE	; 174
    22f6:	37 e4       	ldi	r19, 0x47	; 71
    22f8:	41 e6       	ldi	r20, 0x61	; 97
    22fa:	5e e3       	ldi	r21, 0x3E	; 62
    22fc:	c7 01       	movw	r24, r14
    22fe:	b6 01       	movw	r22, r12
    2300:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2304:	2a e9       	ldi	r18, 0x9A	; 154
    2306:	39 e9       	ldi	r19, 0x99	; 153
    2308:	49 e9       	ldi	r20, 0x99	; 153
    230a:	5e e3       	ldi	r21, 0x3E	; 62
    230c:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    2310:	6b 01       	movw	r12, r22
    2312:	7c 01       	movw	r14, r24
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	52 e4       	ldi	r21, 0x42	; 66
    231c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2320:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    2324:	3b 01       	movw	r6, r22
							gLeftWheelDirection = motorLeftForward;
    2326:	3e 86       	std	Y+14, r3	; 0x0e
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	52 ec       	ldi	r21, 0xC2	; 194
    2330:	c7 01       	movw	r24, r14
    2332:	b6 01       	movw	r22, r12
    2334:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2338:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    233c:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightBackward;
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	9f 87       	std	Y+15, r25	; 0x0f
							lastMovement = moveClockwise;
    2342:	a3 e0       	ldi	r26, 0x03	; 3
    2344:	a9 87       	std	Y+9, r26	; 0x09
    2346:	21 2c       	mov	r2, r1
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2348:	18 a2       	std	Y+32, r1	; 0x20
    234a:	19 a2       	std	Y+33, r1	; 0x21
    234c:	1a a2       	std	Y+34, r1	; 0x22
    234e:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2350:	1c 8e       	std	Y+28, r1	; 0x1c
    2352:	1d 8e       	std	Y+29, r1	; 0x1d
    2354:	1e 8e       	std	Y+30, r1	; 0x1e
    2356:	1f 8e       	std	Y+31, r1	; 0x1f
					/*debug("Left speed: %i",LSpeed);
					debug("Right speed: %i", RSpeed);
					debug("Left wheel direction: %i", gLeftWheelDirection);
					debug("Right wheel direction: %i", gRightWheelDirection);
					*/
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    2358:	9e 01       	movw	r18, r28
    235a:	21 5f       	subi	r18, 0xF1	; 241
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	ae 01       	movw	r20, r28
    2360:	42 5f       	subi	r20, 0xF2	; 242
    2362:	5f 4f       	sbci	r21, 0xFF	; 255
    2364:	b8 01       	movw	r22, r16
    2366:	c3 01       	movw	r24, r6
    2368:	ba d3       	rcall	.+1908   	; 0x2ade <vMotorMovementSwitch>
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    236a:	00 e0       	ldi	r16, 0x00	; 0
    236c:	08 c0       	rjmp	.+16     	; 0x237e <__stack+0x17f>
					*/
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    236e:	01 11       	cpse	r16, r1
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <__stack+0x179>
						send_idle();
    2372:	0e 94 42 20 	call	0x4084	; 0x4084 <send_idle>
						idleSendt = TRUE;
					}
					
					vMotorBrakeLeft();
    2376:	01 e0       	ldi	r16, 0x01	; 1
    2378:	a1 d3       	rcall	.+1858   	; 0x2abc <vMotorBrakeLeft>
					vMotorBrakeRight();
    237a:	a4 d3       	rcall	.+1864   	; 0x2ac4 <vMotorBrakeRight>
    237c:	19 86       	std	Y+9, r1	; 0x09
					lastMovement = moveStop;
    237e:	20 e0       	ldi	r18, 0x00	; 0
				}
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	be 01       	movw	r22, r28
    2386:	67 5f       	subi	r22, 0xF7	; 247
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	80 91 33 1a 	lds	r24, 0x1A33	; 0x801a33 <scanStatusQ>
    238e:	90 91 34 1a 	lds	r25, 0x1A34	; 0x801a34 <scanStatusQ+0x1>
    2392:	0e 94 06 1a 	call	0x340c	; 0x340c <xQueueGenericSend>
    2396:	90 cd       	rjmp	.-1248   	; 0x1eb8 <vMainPoseControllerTask+0x4c>

00002398 <vMainPoseEstimatorTask>:
    2398:	cf 93       	push	r28
	} 
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    239a:	df 93       	push	r29
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	a2 97       	sbiw	r28, 0x22	; 34
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	1a 82       	std	Y+2, r1	; 0x02
    23b0:	1b 82       	std	Y+3, r1	; 0x03
    23b2:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    23b4:	0e 94 45 28 	call	0x508a	; 0x508a <xTaskGetTickCount>
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    23bc:	1e 8e       	std	Y+30, r1	; 0x1e
    23be:	1f 8e       	std	Y+31, r1	; 0x1f
    23c0:	18 a2       	std	Y+32, r1	; 0x20
    23c2:	19 a2       	std	Y+33, r1	; 0x21
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    23c4:	1b 8a       	std	Y+19, r1	; 0x13
    23c6:	1c 8a       	std	Y+20, r1	; 0x14
    23c8:	1d 8a       	std	Y+21, r1	; 0x15
    23ca:	1e 8a       	std	Y+22, r1	; 0x16
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    23cc:	1f 86       	std	Y+15, r1	; 0x0f
    23ce:	18 8a       	std	Y+16, r1	; 0x10
    23d0:	19 8a       	std	Y+17, r1	; 0x11
    23d2:	1a 8a       	std	Y+18, r1	; 0x12
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    23d4:	1b 86       	std	Y+11, r1	; 0x0b
    23d6:	1c 86       	std	Y+12, r1	; 0x0c
    23d8:	1d 86       	std	Y+13, r1	; 0x0d
    23da:	1e 86       	std	Y+14, r1	; 0x0e


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    23dc:	e1 2c       	mov	r14, r1
    23de:	f1 2c       	mov	r15, r1
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    23e0:	81 2c       	mov	r8, r1
    23e2:	91 2c       	mov	r9, r1
    23e4:	41 2c       	mov	r4, r1
    23e6:	31 2c       	mov	r3, r1
    23e8:	21 2c       	mov	r2, r1
    23ea:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    23ec:	68 e2       	ldi	r22, 0x28	; 40
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	ce 01       	movw	r24, r28
    23f2:	05 96       	adiw	r24, 0x05	; 5
    23f4:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    23f8:	80 91 2e 1a 	lds	r24, 0x1A2E	; 0x801a2e <gHandshook>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <vMainPoseEstimatorTask+0x6a>
    2400:	8d c1       	rjmp	.+794    	; 0x271c <vMainPoseEstimatorTask+0x384>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	4f e0       	ldi	r20, 0x0F	; 15
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <xTickMutex>
    2410:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <xTickMutex+0x1>
    2414:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    2418:	60 90 21 1a 	lds	r6, 0x1A21	; 0x801a21 <gLeftWheelTicks>
    241c:	70 90 22 1a 	lds	r7, 0x1A22	; 0x801a22 <gLeftWheelTicks+0x1>
                rightWheelTicks = gRightWheelTicks;
    2420:	00 91 23 1a 	lds	r16, 0x1A23	; 0x801a23 <gRightWheelTicks>
    2424:	10 91 24 1a 	lds	r17, 0x1A24	; 0x801a24 <gRightWheelTicks+0x1>
            xSemaphoreGive(xTickMutex);
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	80 91 9b 1b 	lds	r24, 0x1B9B	; 0x801b9b <xTickMutex>
    2430:	90 91 9c 1b 	lds	r25, 0x1B9C	; 0x801b9c <xTickMutex+0x1>
    2434:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    2438:	b3 01       	movw	r22, r6
    243a:	68 19       	sub	r22, r8
    243c:	79 09       	sbc	r23, r9
    243e:	07 2e       	mov	r0, r23
    2440:	00 0c       	add	r0, r0
    2442:	88 0b       	sbc	r24, r24
    2444:	99 0b       	sbc	r25, r25
    2446:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    244a:	28 ef       	ldi	r18, 0xF8	; 248
    244c:	33 e5       	ldi	r19, 0x53	; 83
    244e:	43 e2       	ldi	r20, 0x23	; 35
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2456:	4b 01       	movw	r8, r22
    2458:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    245a:	b8 01       	movw	r22, r16
    245c:	6e 19       	sub	r22, r14
    245e:	7f 09       	sbc	r23, r15
    2460:	07 2e       	mov	r0, r23
    2462:	00 0c       	add	r0, r0
    2464:	88 0b       	sbc	r24, r24
    2466:	99 0b       	sbc	r25, r25
    2468:	0e 94 97 30 	call	0x612e	; 0x612e <__floatsisf>
    246c:	28 ef       	ldi	r18, 0xF8	; 248
    246e:	33 e5       	ldi	r19, 0x53	; 83
    2470:	43 e2       	ldi	r20, 0x23	; 35
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2478:	6b 01       	movw	r12, r22
    247a:	7c 01       	movw	r14, r24
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
            				   
					   
            float dRobot = (dLeft + dRight) / 2;           
    247c:	9b 01       	movw	r18, r22
    247e:	ac 01       	movw	r20, r24
    2480:	c5 01       	movw	r24, r10
    2482:	b4 01       	movw	r22, r8
    2484:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2494:	6f 8b       	std	Y+23, r22	; 0x17
    2496:	78 8f       	std	Y+24, r23	; 0x18
    2498:	89 8f       	std	Y+25, r24	; 0x19
    249a:	9a 8f       	std	Y+26, r25	; 0x1a
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    249c:	a5 01       	movw	r20, r10
    249e:	94 01       	movw	r18, r8
    24a0:	c7 01       	movw	r24, r14
    24a2:	b6 01       	movw	r22, r12
    24a4:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	43 e1       	ldi	r20, 0x13	; 19
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    24b4:	4b 01       	movw	r8, r22
    24b6:	5c 01       	movw	r10, r24
            
  
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    24b8:	8f d9       	rcall	.-3298   	; 0x17d8 <fIMU_readFloatGyroZ>
    24ba:	2b 89       	ldd	r18, Y+19	; 0x13
    24bc:	3c 89       	ldd	r19, Y+20	; 0x14
    24be:	4d 89       	ldd	r20, Y+21	; 0x15
    24c0:	5e 89       	ldd	r21, Y+22	; 0x16
    24c2:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    24c6:	6b 01       	movw	r12, r22
    24c8:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    24ca:	9f 77       	andi	r25, 0x7F	; 127
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__cmpsf2>
    24d8:	88 23       	and	r24, r24
    24da:	4c f0       	brlt	.+18     	; 0x24ee <vMainPoseEstimatorTask+0x156>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	8a a3       	std	Y+34, r24	; 0x22
                gyroWeight = 0.75; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders  UPDATE: ENDRET I GEIRS KODE TIL 0.75
    24e0:	1f 82       	std	Y+7, r1	; 0x07
    24e2:	1b 8e       	std	Y+27, r1	; 0x1b
    24e4:	80 e4       	ldi	r24, 0x40	; 64
    24e6:	8c 8f       	std	Y+28, r24	; 0x1c
    24e8:	8f e3       	ldi	r24, 0x3F	; 63
    24ea:	8d 8f       	std	Y+29, r24	; 0x1d
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <vMainPoseEstimatorTask+0x160>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    24ee:	1a a2       	std	Y+34, r1	; 0x22
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    24f0:	4f 82       	std	Y+7, r4	; 0x07
    24f2:	3b 8e       	std	Y+27, r3	; 0x1b
    24f4:	2c 8e       	std	Y+28, r2	; 0x1c
    24f6:	5d 8e       	std	Y+29, r5	; 0x1d
            
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
           		
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    24f8:	2f 81       	ldd	r18, Y+7	; 0x07
    24fa:	3b 8d       	ldd	r19, Y+27	; 0x1b
    24fc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    24fe:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	80 e8       	ldi	r24, 0x80	; 128
    2506:	9f e3       	ldi	r25, 0x3F	; 63
    2508:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    250c:	a5 01       	movw	r20, r10
    250e:	94 01       	movw	r18, r8
    2510:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2514:	4b 01       	movw	r8, r22
    2516:	5c 01       	movw	r10, r24
    2518:	24 ed       	ldi	r18, 0xD4	; 212
    251a:	32 e0       	ldi	r19, 0x02	; 2
    251c:	47 e3       	ldi	r20, 0x37	; 55
    251e:	5a e3       	ldi	r21, 0x3A	; 58
    2520:	c7 01       	movw	r24, r14
    2522:	b6 01       	movw	r22, r12
    2524:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2528:	2f 81       	ldd	r18, Y+7	; 0x07
    252a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    252c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    252e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2530:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2534:	a5 01       	movw	r20, r10
    2536:	94 01       	movw	r18, r8
    2538:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    253c:	4b 01       	movw	r8, r22
    253e:	5c 01       	movw	r10, r24
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    2540:	c9 80       	ldd	r12, Y+1	; 0x01
    2542:	da 80       	ldd	r13, Y+2	; 0x02
    2544:	eb 80       	ldd	r14, Y+3	; 0x03
    2546:	fc 80       	ldd	r15, Y+4	; 0x04
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2554:	a7 01       	movw	r20, r14
    2556:	96 01       	movw	r18, r12
    2558:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    255c:	6f 83       	std	Y+7, r22	; 0x07
    255e:	78 87       	std	Y+8, r23	; 0x08
    2560:	89 87       	std	Y+9, r24	; 0x09
    2562:	9a 87       	std	Y+10, r25	; 0x0a
    2564:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <cos>
    2568:	9b 01       	movw	r18, r22
    256a:	ac 01       	movw	r20, r24
    256c:	6f 89       	ldd	r22, Y+23	; 0x17
    256e:	78 8d       	ldd	r23, Y+24	; 0x18
    2570:	89 8d       	ldd	r24, Y+25	; 0x19
    2572:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2574:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2578:	9b 01       	movw	r18, r22
    257a:	ac 01       	movw	r20, r24
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    2588:	6b 87       	std	Y+11, r22	; 0x0b
    258a:	7c 87       	std	Y+12, r23	; 0x0c
    258c:	8d 87       	std	Y+13, r24	; 0x0d
    258e:	9e 87       	std	Y+14, r25	; 0x0e
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    2590:	6f 81       	ldd	r22, Y+7	; 0x07
    2592:	78 85       	ldd	r23, Y+8	; 0x08
    2594:	89 85       	ldd	r24, Y+9	; 0x09
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	0e 94 13 32 	call	0x6426	; 0x6426 <sin>
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	6f 89       	ldd	r22, Y+23	; 0x17
    25a2:	78 8d       	ldd	r23, Y+24	; 0x18
    25a4:	89 8d       	ldd	r24, Y+25	; 0x19
    25a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25a8:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    25ac:	9b 01       	movw	r18, r22
    25ae:	ac 01       	movw	r20, r24
    25b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    25b2:	78 89       	ldd	r23, Y+16	; 0x10
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    25bc:	6f 87       	std	Y+15, r22	; 0x0f
    25be:	78 8b       	std	Y+16, r23	; 0x10
    25c0:	89 8b       	std	Y+17, r24	; 0x11
    25c2:	9a 8b       	std	Y+18, r25	; 0x12

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    25c4:	a7 01       	movw	r20, r14
    25c6:	96 01       	movw	r18, r12
    25c8:	c5 01       	movw	r24, r10
    25ca:	b4 01       	movw	r22, r8
    25cc:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    25d0:	69 83       	std	Y+1, r22	; 0x01
    25d2:	7a 83       	std	Y+2, r23	; 0x02
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    25d8:	2f ee       	ldi	r18, 0xEF	; 239
    25da:	3c ed       	ldi	r19, 0xDC	; 220
    25dc:	4b e2       	ldi	r20, 0x2B	; 43
    25de:	5b e3       	ldi	r21, 0x3B	; 59
    25e0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    25e2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    25e4:	88 a1       	ldd	r24, Y+32	; 0x20
    25e6:	99 a1       	ldd	r25, Y+33	; 0x21
    25e8:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    25ec:	6b 01       	movw	r12, r22
    25ee:	7c 01       	movw	r14, r24
	            // If we have a reading over this, we can safely ignore the compass
	            // Ignore compass while driving in a straight line
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
            }
            else if ((robot_is_turning == FALSE) && (dRobot == 0)){
    25f0:	8a a1       	ldd	r24, Y+34	; 0x22
    25f2:	81 11       	cpse	r24, r1
    25f4:	22 c0       	rjmp	.+68     	; 0x263a <vMainPoseEstimatorTask+0x2a2>
    25f6:	24 2d       	mov	r18, r4
    25f8:	33 2d       	mov	r19, r3
    25fa:	42 2d       	mov	r20, r2
    25fc:	55 2d       	mov	r21, r5
    25fe:	6f 89       	ldd	r22, Y+23	; 0x17
    2600:	78 8d       	ldd	r23, Y+24	; 0x18
    2602:	89 8d       	ldd	r24, Y+25	; 0x19
    2604:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2606:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__cmpsf2>
    260a:	81 11       	cpse	r24, r1
    260c:	16 c0       	rjmp	.+44     	; 0x263a <vMainPoseEstimatorTask+0x2a2>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
    260e:	24 2d       	mov	r18, r4
    2610:	33 2d       	mov	r19, r3
    2612:	42 2d       	mov	r20, r2
    2614:	55 2d       	mov	r21, r5
    2616:	c7 01       	movw	r24, r14
    2618:	b6 01       	movw	r22, r12
    261a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    261e:	9b 01       	movw	r18, r22
    2620:	ac 01       	movw	r20, r24
    2622:	c7 01       	movw	r24, r14
    2624:	b6 01       	movw	r22, r12
    2626:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    262a:	b6 2e       	mov	r11, r22
    262c:	a7 2e       	mov	r10, r23
    262e:	98 2e       	mov	r9, r24
    2630:	89 2e       	mov	r8, r25
	            vLED_singleHigh(ledYELLOW);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	d9 d8       	rcall	.-3662   	; 0x17ea <vLED_singleHigh>
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <vMainPoseEstimatorTask+0x2b0>
            }
            else{
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	ef d8       	rcall	.-3618   	; 0x181e <vLED_singleLow>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
	            vLED_singleHigh(ledYELLOW);
            }
            else{
	            kalmanGain = 0;
    2640:	b4 2c       	mov	r11, r4
    2642:	a3 2c       	mov	r10, r3
    2644:	92 2c       	mov	r9, r2
    2646:	85 2c       	mov	r8, r5
	            vLED_singleLow(ledYELLOW);
            }         
            //*/
           
            predictedTheta  += kalmanGain*(error);
    2648:	24 2d       	mov	r18, r4
    264a:	33 2d       	mov	r19, r3
    264c:	42 2d       	mov	r20, r2
    264e:	55 2d       	mov	r21, r5
    2650:	6b 2d       	mov	r22, r11
    2652:	7a 2d       	mov	r23, r10
    2654:	89 2d       	mov	r24, r9
    2656:	98 2d       	mov	r25, r8
    2658:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	69 81       	ldd	r22, Y+1	; 0x01
    2662:	7a 81       	ldd	r23, Y+2	; 0x02
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    266c:	69 83       	std	Y+1, r22	; 0x01
    266e:	7a 83       	std	Y+2, r23	; 0x02
    2670:	8b 83       	std	Y+3, r24	; 0x03
    2672:	9c 83       	std	Y+4, r25	; 0x04
			vFunc_Inf2pi(&predictedTheta);            
    2674:	ce 01       	movw	r24, r28
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    267c:	2b 2d       	mov	r18, r11
    267e:	3a 2d       	mov	r19, r10
    2680:	49 2d       	mov	r20, r9
    2682:	58 2d       	mov	r21, r8
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	80 e8       	ldi	r24, 0x80	; 128
    268a:	9f e3       	ldi	r25, 0x3F	; 63
    268c:	0e 94 2e 2f 	call	0x5e5c	; 0x5e5c <__subsf3>
    2690:	a7 01       	movw	r20, r14
    2692:	96 01       	movw	r18, r12
    2694:	0e 94 b0 31 	call	0x6360	; 0x6360 <__mulsf3>
    2698:	6e 8f       	std	Y+30, r22	; 0x1e
    269a:	7f 8f       	std	Y+31, r23	; 0x1f
    269c:	88 a3       	std	Y+32, r24	; 0x20
    269e:	99 a3       	std	Y+33, r25	; 0x21

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	4f e0       	ldi	r20, 0x0F	; 15
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	70 e0       	ldi	r23, 0x00	; 0
    26aa:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    26ae:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    26b2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
                gTheta_hat = predictedTheta;
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ba:	ab 81       	ldd	r26, Y+3	; 0x03
    26bc:	bc 81       	ldd	r27, Y+4	; 0x04
    26be:	80 93 29 1a 	sts	0x1A29, r24	; 0x801a29 <gTheta_hat>
    26c2:	90 93 2a 1a 	sts	0x1A2A, r25	; 0x801a2a <gTheta_hat+0x1>
    26c6:	a0 93 2b 1a 	sts	0x1A2B, r26	; 0x801a2b <gTheta_hat+0x2>
    26ca:	b0 93 2c 1a 	sts	0x1A2C, r27	; 0x801a2c <gTheta_hat+0x3>
                gX_hat = predictedX;
    26ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d6:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    26da:	70 93 28 1a 	sts	0x1A28, r23	; 0x801a28 <gX_hat+0x1>
    26de:	60 93 27 1a 	sts	0x1A27, r22	; 0x801a27 <gX_hat>
                gY_hat = predictedY;
    26e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    26e4:	78 89       	ldd	r23, Y+16	; 0x10
    26e6:	89 89       	ldd	r24, Y+17	; 0x11
    26e8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ea:	0e 94 64 30 	call	0x60c8	; 0x60c8 <__fixsfsi>
    26ee:	70 93 26 1a 	sts	0x1A26, r23	; 0x801a26 <gY_hat+0x1>
    26f2:	60 93 25 1a 	sts	0x1A25, r22	; 0x801a25 <gY_hat>
            xSemaphoreGive(xPoseMutex);
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	70 e0       	ldi	r23, 0x00	; 0
    26fa:	80 91 a1 1b 	lds	r24, 0x1BA1	; 0x801ba1 <xPoseMutex>
    26fe:	90 91 a2 1b 	lds	r25, 0x1BA2	; 0x801ba2 <xPoseMutex+0x1>
    2702:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	80 91 99 1b 	lds	r24, 0x1B99	; 0x801b99 <xControllerBSem>
    270e:	90 91 9a 1b 	lds	r25, 0x1B9A	; 0x801b9a <xControllerBSem+0x1>
    2712:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    2716:	78 01       	movw	r14, r16
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    2718:	43 01       	movw	r8, r6
    271a:	68 ce       	rjmp	.-816    	; 0x23ec <vMainPoseEstimatorTask+0x54>
    271c:	05 e6       	ldi	r16, 0x65	; 101
    271e:	10 e0       	ldi	r17, 0x00	; 0
    2720:	a4 2c       	mov	r10, r4
    2722:	b3 2c       	mov	r11, r3
    2724:	c2 2c       	mov	r12, r2
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    2726:	d5 2c       	mov	r13, r5
    2728:	57 d8       	rcall	.-3922   	; 0x17d8 <fIMU_readFloatGyroZ>
    272a:	9b 01       	movw	r18, r22
    272c:	ac 01       	movw	r20, r24
    272e:	6a 2d       	mov	r22, r10
    2730:	7b 2d       	mov	r23, r11
    2732:	8c 2d       	mov	r24, r12
    2734:	9d 2d       	mov	r25, r13
    2736:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__addsf3>
    273a:	a6 2e       	mov	r10, r22
    273c:	b7 2e       	mov	r11, r23
    273e:	c8 2e       	mov	r12, r24
    2740:	d9 2e       	mov	r13, r25
    2742:	01 50       	subi	r16, 0x01	; 1
    2744:	11 09       	sbc	r17, r1
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    2746:	81 f7       	brne	.-32     	; 0x2728 <vMainPoseEstimatorTask+0x390>
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    2748:	84 2d       	mov	r24, r4
    274a:	93 2d       	mov	r25, r3
    274c:	a2 2d       	mov	r26, r2
    274e:	b5 2d       	mov	r27, r5
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	ab 83       	std	Y+3, r26	; 0x03
    2756:	bc 83       	std	Y+4, r27	; 0x04
            gyroOffset = gyro / (float)i;       
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a ec       	ldi	r20, 0xCA	; 202
    275e:	52 e4       	ldi	r21, 0x42	; 66
    2760:	6a 2d       	mov	r22, r10
    2762:	7b 2d       	mov	r23, r11
    2764:	8c 2d       	mov	r24, r12
    2766:	9d 2d       	mov	r25, r13
    2768:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <__divsf3>
    276c:	6b 8b       	std	Y+19, r22	; 0x13
    276e:	7c 8b       	std	Y+20, r23	; 0x14
    2770:	8d 8b       	std	Y+21, r24	; 0x15
    2772:	9e 8b       	std	Y+22, r25	; 0x16
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    2774:	4f 86       	std	Y+15, r4	; 0x0f
    2776:	38 8a       	std	Y+16, r3	; 0x10
    2778:	29 8a       	std	Y+17, r2	; 0x11
    277a:	5a 8a       	std	Y+18, r5	; 0x12
                gyro+= fIMU_readFloatGyroZ();
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    277c:	4b 86       	std	Y+11, r4	; 0x0b
    277e:	3c 86       	std	Y+12, r3	; 0x0c
    2780:	2d 86       	std	Y+13, r2	; 0x0d
    2782:	5e 86       	std	Y+14, r5	; 0x0e
    2784:	33 ce       	rjmp	.-922    	; 0x23ec <vMainPoseEstimatorTask+0x54>

00002786 <vApplicationStackOverflowHook>:
}
#endif
*/
/*  In case of stack overflow, disable all interrupts and handle it  */
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName){
    cli();
    2786:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	62 d8       	rcall	.-3900   	; 0x1852 <vLED_toggle>
    278e:	fc cf       	rjmp	.-8      	; 0x2788 <vApplicationStackOverflowHook+0x2>

00002790 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    2790:	26 d8       	rcall	.-4020   	; 0x17de <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	29 d8       	rcall	.-4014   	; 0x17ea <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    2798:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <vUSART_init>
    network_init();
    279c:	4c d2       	rcall	.+1176   	; 0x2c36 <network_init>
    arq_init();
    279e:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    27a2:	83 e1       	ldi	r24, 0x13	; 19
    27a4:	9f e1       	ldi	r25, 0x1F	; 31
    27a6:	0e 94 43 21 	call	0x4286	; 0x4286 <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	0e 94 bb 20 	call	0x4176	; 0x4176 <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    27b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <vDistSens_init>
    /* Initialize motor controller */
    vMotor_init();
    27b4:	00 d1       	rcall	.+512    	; 0x29b6 <vMotor_init>
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
	//vLED_singleHigh(ledGREEN);
    sIMU_begin(); 
    27b6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sIMU_begin>
   //vLED_singleLow(ledGREEN);
	vLED_singleLow(ledRED);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	2f d8       	rcall	.-4002   	; 0x181e <vLED_singleLow>
	
	/* ************************************* TESTING **************************************/
	
	
	/* Initialize RTOS utilities  */
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	61 e0       	ldi	r22, 0x01	; 1
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	4e d4       	rcall	.+2204   	; 0x3064 <xQueueGenericCreate>
    27c8:	90 93 38 1a 	sts	0x1A38, r25	; 0x801a38 <movementQ+0x1>
    27cc:	80 93 37 1a 	sts	0x1A37, r24	; 0x801a37 <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPoint)); // For setpoints to controller
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	68 e0       	ldi	r22, 0x08	; 8
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	46 d4       	rcall	.+2188   	; 0x3064 <xQueueGenericCreate>
    27d8:	90 93 36 1a 	sts	0x1A36, r25	; 0x801a36 <poseControllerQ+0x1>
    27dc:	80 93 35 1a 	sts	0x1A35, r24	; 0x801a35 <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	3e d4       	rcall	.+2172   	; 0x3064 <xQueueGenericCreate>
    27e8:	90 93 34 1a 	sts	0x1A34, r25	; 0x801a34 <scanStatusQ+0x1>
    27ec:	80 93 33 1a 	sts	0x1A33, r24	; 0x801a33 <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	36 d4       	rcall	.+2156   	; 0x3064 <xQueueGenericCreate>
    27f8:	90 93 32 1a 	sts	0x1A32, r25	; 0x801a32 <actuationQ+0x1>
    27fc:	80 93 31 1a 	sts	0x1A31, r24	; 0x801a31 <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	82 d4       	rcall	.+2308   	; 0x3108 <xQueueCreateMutex>
    2804:	90 93 a2 1b 	sts	0x1BA2, r25	; 0x801ba2 <xPoseMutex+0x1>
    2808:	80 93 a1 1b 	sts	0x1BA1, r24	; 0x801ba1 <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	7c d4       	rcall	.+2296   	; 0x3108 <xQueueCreateMutex>
    2810:	90 93 9e 1b 	sts	0x1B9E, r25	; 0x801b9e <xUartMutex+0x1>
    2814:	80 93 9d 1b 	sts	0x1B9D, r24	; 0x801b9d <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	76 d4       	rcall	.+2284   	; 0x3108 <xQueueCreateMutex>
    281c:	90 93 9c 1b 	sts	0x1B9C, r25	; 0x801b9c <xTickMutex+0x1>
    2820:	80 93 9b 1b 	sts	0x1B9B, r24	; 0x801b9b <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    2824:	43 e0       	ldi	r20, 0x03	; 3
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	1c d4       	rcall	.+2104   	; 0x3064 <xQueueGenericCreate>
    282c:	90 93 9a 1b 	sts	0x1B9A, r25	; 0x801b9a <xControllerBSem+0x1>
    2830:	80 93 99 1b 	sts	0x1B99, r24	; 0x801b99 <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    2834:	43 e0       	ldi	r20, 0x03	; 3
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	14 d4       	rcall	.+2088   	; 0x3064 <xQueueGenericCreate>
    283c:	90 93 a0 1b 	sts	0x1BA0, r25	; 0x801ba0 <xCommandReadyBSem+0x1>
    2840:	80 93 9f 1b 	sts	0x1B9F, r24	; 0x801b9f <xCommandReadyBSem>
    2844:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    2846:	b1 2c       	mov	r11, r1
    2848:	c1 2c       	mov	r12, r1
    284a:	d1 2c       	mov	r13, r1
    284c:	e1 2c       	mov	r14, r1
    284e:	f1 2c       	mov	r15, r1
    2850:	04 e0       	ldi	r16, 0x04	; 4
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4c e2       	ldi	r20, 0x2C	; 44
    2858:	51 e0       	ldi	r21, 0x01	; 1
    285a:	67 e4       	ldi	r22, 0x47	; 71
    285c:	76 e0       	ldi	r23, 0x06	; 6
    285e:	8e ec       	ldi	r24, 0xCE	; 206
    2860:	9d e0       	ldi	r25, 0x0D	; 13
    2862:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    2866:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4c e2       	ldi	r20, 0x2C	; 44
    286e:	51 e0       	ldi	r21, 0x01	; 1
    2870:	60 e5       	ldi	r22, 0x50	; 80
    2872:	76 e0       	ldi	r23, 0x06	; 6
    2874:	80 ed       	ldi	r24, 0xD0	; 208
    2876:	9c e0       	ldi	r25, 0x0C	; 12
    2878:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    287c:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4c e2       	ldi	r20, 0x2C	; 44
    2884:	51 e0       	ldi	r21, 0x01	; 1
    2886:	65 e5       	ldi	r22, 0x55	; 85
    2888:	76 e0       	ldi	r23, 0x06	; 6
    288a:	86 e3       	ldi	r24, 0x36	; 54
    288c:	9f e0       	ldi	r25, 0x0F	; 15
    288e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    2892:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4c e2       	ldi	r20, 0x2C	; 44
    289a:	51 e0       	ldi	r21, 0x01	; 1
    289c:	6d e5       	ldi	r22, 0x5D	; 93
    289e:	76 e0       	ldi	r23, 0x06	; 6
    28a0:	8c ec       	ldi	r24, 0xCC	; 204
    28a2:	91 e1       	ldi	r25, 0x11	; 17
    28a4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    28a8:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4c e2       	ldi	r20, 0x2C	; 44
    28b0:	51 e0       	ldi	r21, 0x01	; 1
    28b2:	65 e6       	ldi	r22, 0x65	; 101
    28b4:	76 e0       	ldi	r23, 0x06	; 6
    28b6:	8f ed       	ldi	r24, 0xDF	; 223
    28b8:	9d e0       	ldi	r25, 0x0D	; 13
    28ba:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
    28be:	78 94       	sei
        debug("COMPASS CALIBRATION!\n");
        debug("Connect to begin!\n");
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif

    sei();
    28c0:	0e 94 20 26 	call	0x4c40	; 0x4c40 <vTaskStartScheduler>
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    //  Start scheduler 
    vTaskStartScheduler();
    28c4:	cb e6       	ldi	r28, 0x6B	; 107

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
        debug("RAM fail\n");
    28c6:	d6 e0       	ldi	r29, 0x06	; 6
    28c8:	f8 94       	cli
    //  Start scheduler 
    vTaskStartScheduler();

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
    28ca:	df 93       	push	r29
        debug("RAM fail\n");
    28cc:	cf 93       	push	r28
    28ce:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <debug>
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	f8 cf       	rjmp	.-16     	; 0x28c8 <main+0x138>

000028d8 <__vector_4>:
    28d8:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    28da:	0f 92       	push	r0
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	0f 92       	push	r0
    28e0:	11 24       	eor	r1, r1
    28e2:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    28e4:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <gISR_leftWheelTicks>
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	80 93 2f 1a 	sts	0x1A2F, r24	; 0x801a2f <gISR_leftWheelTicks>
}
    28ee:	8f 91       	pop	r24
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	0f 92       	push	r0
    2902:	11 24       	eor	r1, r1
    2904:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    2906:	80 91 30 1a 	lds	r24, 0x1A30	; 0x801a30 <gISR_rightWheelTicks>
    290a:	8f 5f       	subi	r24, 0xFF	; 255
    290c:	80 93 30 1a 	sts	0x1A30, r24	; 0x801a30 <gISR_rightWheelTicks>
}
    2910:	8f 91       	pop	r24
    2912:	0f 90       	pop	r0
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	0f 90       	pop	r0
    2918:	1f 90       	pop	r1
    291a:	18 95       	reti

0000291c <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    291c:	1f 92       	push	r1
    291e:	0f 92       	push	r0
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	0f 92       	push	r0
    2924:	11 24       	eor	r1, r1
    2926:	0b b6       	in	r0, 0x3b	; 59
    2928:	0f 92       	push	r0
    292a:	2f 93       	push	r18
    292c:	3f 93       	push	r19
    292e:	4f 93       	push	r20
    2930:	5f 93       	push	r21
    2932:	6f 93       	push	r22
    2934:	7f 93       	push	r23
    2936:	8f 93       	push	r24
    2938:	9f 93       	push	r25
    293a:	af 93       	push	r26
    293c:	bf 93       	push	r27
    293e:	ef 93       	push	r30
    2940:	ff 93       	push	r31
    if (nRFconnected){
    2942:	64 99       	sbic	0x0c, 4	; 12
    2944:	05 c0       	rjmp	.+10     	; 0x2950 <__vector_5+0x34>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    294e:	18 c0       	rjmp	.+48     	; 0x2980 <__vector_5+0x64>
        
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    2950:	10 92 2e 1a 	sts	0x1A2E, r1	; 0x801a2e <gHandshook>
		
        gPaused = FALSE;
    2954:	10 92 2d 1a 	sts	0x1A2D, r1	; 0x801a2d <gPaused>
        vLED_singleLow(ledGREEN);
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleHigh(ledYELLOW);
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
        vLED_singleLow(ledRED);
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xCommandReadyBSem>
    2978:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xCommandReadyBSem+0x1>
    297c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	80 91 99 1b 	lds	r24, 0x1B99	; 0x801b99 <xControllerBSem>
    2988:	90 91 9a 1b 	lds	r25, 0x1B9A	; 0x801b9a <xControllerBSem+0x1>
    298c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <xQueueGiveFromISR>
}
    2990:	ff 91       	pop	r31
    2992:	ef 91       	pop	r30
    2994:	bf 91       	pop	r27
    2996:	af 91       	pop	r26
    2998:	9f 91       	pop	r25
    299a:	8f 91       	pop	r24
    299c:	7f 91       	pop	r23
    299e:	6f 91       	pop	r22
    29a0:	5f 91       	pop	r21
    29a2:	4f 91       	pop	r20
    29a4:	3f 91       	pop	r19
    29a6:	2f 91       	pop	r18
    29a8:	0f 90       	pop	r0
    29aa:	0b be       	out	0x3b, r0	; 59
    29ac:	0f 90       	pop	r0
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	0f 90       	pop	r0
    29b2:	1f 90       	pop	r1
    29b4:	18 95       	reti

000029b6 <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    29b6:	27 9a       	sbi	0x04, 7	; 4
    29b8:	84 b1       	in	r24, 0x04	; 4
    29ba:	80 63       	ori	r24, 0x30	; 48
    29bc:	84 b9       	out	0x04, r24	; 4
    29be:	26 9a       	sbi	0x04, 6	; 4
    29c0:	e1 e0       	ldi	r30, 0x01	; 1
    29c2:	f1 e0       	ldi	r31, 0x01	; 1
    29c4:	80 81       	ld	r24, Z
    29c6:	80 66       	ori	r24, 0x60	; 96
    29c8:	80 83       	st	Z, r24
    29ca:	2f 98       	cbi	0x05, 7	; 5
    29cc:	2e 98       	cbi	0x05, 6	; 5
    29ce:	e2 e0       	ldi	r30, 0x02	; 2
    29d0:	f1 e0       	ldi	r31, 0x01	; 1
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 79       	andi	r24, 0x9F	; 159
    29d6:	80 83       	st	Z, r24
    29d8:	85 b1       	in	r24, 0x05	; 5
    29da:	8f 7c       	andi	r24, 0xCF	; 207
    29dc:	85 b9       	out	0x05, r24	; 5
    29de:	8a b1       	in	r24, 0x0a	; 10
    29e0:	8a b9       	out	0x0a, r24	; 10
    29e2:	8b b1       	in	r24, 0x0b	; 11
    29e4:	8c 60       	ori	r24, 0x0C	; 12
    29e6:	8b b9       	out	0x0b, r24	; 11
    29e8:	6c 98       	cbi	0x0d, 4	; 13
    29ea:	8d b3       	in	r24, 0x1d	; 29
    29ec:	8d bb       	out	0x1d, r24	; 29
    29ee:	e9 e6       	ldi	r30, 0x69	; 105
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	80 6f       	ori	r24, 0xF0	; 240
    29f6:	80 83       	st	Z, r24
    29f8:	ea e6       	ldi	r30, 0x6A	; 106
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	81 60       	ori	r24, 0x01	; 1
    2a00:	80 83       	st	Z, r24
    2a02:	8c e1       	ldi	r24, 0x1C	; 28
    2a04:	8c bb       	out	0x1c, r24	; 28
    2a06:	8d b3       	in	r24, 0x1d	; 29
    2a08:	8c 61       	ori	r24, 0x1C	; 28
    2a0a:	8d bb       	out	0x1d, r24	; 29
    2a0c:	84 b5       	in	r24, 0x24	; 36
    2a0e:	80 68       	ori	r24, 0x80	; 128
    2a10:	84 bd       	out	0x24, r24	; 36
    2a12:	e0 e8       	ldi	r30, 0x80	; 128
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	80 62       	ori	r24, 0x20	; 32
    2a1a:	80 83       	st	Z, r24
    2a1c:	85 b5       	in	r24, 0x25	; 37
    2a1e:	85 bd       	out	0x25, r24	; 37
    2a20:	84 b5       	in	r24, 0x24	; 36
    2a22:	83 60       	ori	r24, 0x03	; 3
    2a24:	84 bd       	out	0x24, r24	; 36
    2a26:	a1 e8       	ldi	r26, 0x81	; 129
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	8c 91       	ld	r24, X
    2a2c:	88 60       	ori	r24, 0x08	; 8
    2a2e:	8c 93       	st	X, r24
    2a30:	80 81       	ld	r24, Z
    2a32:	81 60       	ori	r24, 0x01	; 1
    2a34:	80 83       	st	Z, r24
    2a36:	85 b5       	in	r24, 0x25	; 37
    2a38:	82 60       	ori	r24, 0x02	; 2
    2a3a:	85 bd       	out	0x25, r24	; 37
    2a3c:	8c 91       	ld	r24, X
    2a3e:	82 60       	ori	r24, 0x02	; 2
    2a40:	8c 93       	st	X, r24
    2a42:	80 81       	ld	r24, Z
    2a44:	80 83       	st	Z, r24
    2a46:	e0 eb       	ldi	r30, 0xB0	; 176
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 83       	st	Z, r24
    2a4e:	80 81       	ld	r24, Z
    2a50:	80 83       	st	Z, r24
    2a52:	e0 ea       	ldi	r30, 0xA0	; 160
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 83       	st	Z, r24
    2a5a:	08 95       	ret

00002a5c <vMotorMoveLeftForward>:
    2a5c:	87 bd       	out	0x27, r24	; 39
    2a5e:	2c 9a       	sbi	0x05, 4	; 5
    2a60:	2d 98       	cbi	0x05, 5	; 5
    2a62:	84 e0       	ldi	r24, 0x04	; 4
    2a64:	fb 01       	movw	r30, r22
    2a66:	80 83       	st	Z, r24
    2a68:	08 95       	ret

00002a6a <vMotorMoveRightForward>:
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2a70:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2a74:	e2 e0       	ldi	r30, 0x02	; 2
    2a76:	f1 e0       	ldi	r31, 0x01	; 1
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 64       	ori	r24, 0x40	; 64
    2a7c:	80 83       	st	Z, r24
    2a7e:	80 81       	ld	r24, Z
    2a80:	8f 7d       	andi	r24, 0xDF	; 223
    2a82:	80 83       	st	Z, r24
    2a84:	86 e0       	ldi	r24, 0x06	; 6
    2a86:	fb 01       	movw	r30, r22
    2a88:	80 83       	st	Z, r24
    2a8a:	08 95       	ret

00002a8c <vMotorMoveLeftBackward>:
    2a8c:	87 bd       	out	0x27, r24	; 39
    2a8e:	2c 98       	cbi	0x05, 4	; 5
    2a90:	2d 9a       	sbi	0x05, 5	; 5
    2a92:	85 e0       	ldi	r24, 0x05	; 5
    2a94:	fb 01       	movw	r30, r22
    2a96:	80 83       	st	Z, r24
    2a98:	08 95       	ret

00002a9a <vMotorMoveRightBackward>:
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2aa0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2aa4:	e2 e0       	ldi	r30, 0x02	; 2
    2aa6:	f1 e0       	ldi	r31, 0x01	; 1
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 7b       	andi	r24, 0xBF	; 191
    2aac:	80 83       	st	Z, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 62       	ori	r24, 0x20	; 32
    2ab2:	80 83       	st	Z, r24
    2ab4:	85 e0       	ldi	r24, 0x05	; 5
    2ab6:	fb 01       	movw	r30, r22
    2ab8:	80 83       	st	Z, r24
    2aba:	08 95       	ret

00002abc <vMotorBrakeLeft>:
    2abc:	17 bc       	out	0x27, r1	; 39
    2abe:	2c 98       	cbi	0x05, 4	; 5
    2ac0:	2d 98       	cbi	0x05, 5	; 5
    2ac2:	08 95       	ret

00002ac4 <vMotorBrakeRight>:
    2ac4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2ac8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2acc:	e2 e0       	ldi	r30, 0x02	; 2
    2ace:	f1 e0       	ldi	r31, 0x01	; 1
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8f 7b       	andi	r24, 0xBF	; 191
    2ad4:	80 83       	st	Z, r24
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8f 7d       	andi	r24, 0xDF	; 223
    2ada:	80 83       	st	Z, r24
    2adc:	08 95       	ret

00002ade <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	eb 01       	movw	r28, r22
    2ae8:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2aea:	18 16       	cp	r1, r24
    2aec:	19 06       	cpc	r1, r25
    2aee:	1c f4       	brge	.+6      	; 0x2af6 <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2af0:	ba 01       	movw	r22, r20
    2af2:	b4 df       	rcall	.-152    	; 0x2a5c <vMotorMoveLeftForward>
    2af4:	07 c0       	rjmp	.+14     	; 0x2b04 <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2af6:	99 23       	and	r25, r25
    2af8:	24 f4       	brge	.+8      	; 0x2b02 <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2afa:	ba 01       	movw	r22, r20
    2afc:	81 95       	neg	r24
    2afe:	c6 df       	rcall	.-116    	; 0x2a8c <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <vMotorMovementSwitch+0x26>
    2b02:	dc df       	rcall	.-72     	; 0x2abc <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2b04:	1c 16       	cp	r1, r28
    2b06:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2b08:	24 f4       	brge	.+8      	; 0x2b12 <vMotorMovementSwitch+0x34>
    2b0a:	b8 01       	movw	r22, r16
    2b0c:	8c 2f       	mov	r24, r28
    2b0e:	ad df       	rcall	.-166    	; 0x2a6a <vMotorMoveRightForward>
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2b12:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <vMotorMovementSwitch+0x42>
    2b16:	b8 01       	movw	r22, r16
    2b18:	8c 2f       	mov	r24, r28
    2b1a:	81 95       	neg	r24
    2b1c:	be df       	rcall	.-132    	; 0x2a9a <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2b1e:	01 c0       	rjmp	.+2      	; 0x2b22 <vMotorMovementSwitch+0x44>
    2b20:	d1 df       	rcall	.-94     	; 0x2ac4 <vMotorBrakeRight>
	
	
	
	

}
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2b2c:	84 30       	cpi	r24, 0x04	; 4
    2b2e:	19 f0       	breq	.+6      	; 0x2b36 <vMotorEncoderLeftTickFromISR+0xa>
    2b30:	85 30       	cpi	r24, 0x05	; 5
    2b32:	51 f0       	breq	.+20     	; 0x2b48 <vMotorEncoderLeftTickFromISR+0x1c>
    2b34:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2b36:	46 95       	lsr	r20
    2b38:	fb 01       	movw	r30, r22
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	84 0f       	add	r24, r20
    2b40:	91 1d       	adc	r25, r1
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
            break;
    2b46:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2b48:	46 95       	lsr	r20
    2b4a:	fb 01       	movw	r30, r22
    2b4c:	80 81       	ld	r24, Z
    2b4e:	91 81       	ldd	r25, Z+1	; 0x01
    2b50:	84 1b       	sub	r24, r20
    2b52:	91 09       	sbc	r25, r1
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	08 95       	ret

00002b5a <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2b5a:	85 30       	cpi	r24, 0x05	; 5
    2b5c:	59 f0       	breq	.+22     	; 0x2b74 <vMotorEncoderRightTickFromISR+0x1a>
    2b5e:	86 30       	cpi	r24, 0x06	; 6
    2b60:	89 f4       	brne	.+34     	; 0x2b84 <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2b62:	46 95       	lsr	r20
    2b64:	fb 01       	movw	r30, r22
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	84 0f       	add	r24, r20
    2b6c:	91 1d       	adc	r25, r1
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
            break;
    2b72:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2b74:	46 95       	lsr	r20
    2b76:	fb 01       	movw	r30, r22
    2b78:	80 81       	ld	r24, Z
    2b7a:	91 81       	ldd	r25, Z+1	; 0x01
    2b7c:	84 1b       	sub	r24, r20
    2b7e:	91 09       	sbc	r25, r1
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
    2b84:	08 95       	ret

00002b86 <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	7c 01       	movw	r14, r24
    2b94:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2b96:	cb 01       	movw	r24, r22
    2b98:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2b9c:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2b9e:	98 01       	movw	r18, r16
    2ba0:	21 50       	subi	r18, 0x01	; 1
    2ba2:	31 09       	sbc	r19, r1
    2ba4:	a7 01       	movw	r20, r14
    2ba6:	b8 01       	movw	r22, r16
    2ba8:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2bac:	88 23       	and	r24, r24
    2bae:	49 f0       	breq	.+18     	; 0x2bc2 <network_receive+0x3c>
	   ++cobs;
    2bb0:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <cobs.2024>
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <cobs.2024>
	   vPortFree(decoded_data);
    2bba:	ce 01       	movw	r24, r28
    2bbc:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bc0:	33 c0       	rjmp	.+102    	; 0x2c28 <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2bc2:	86 2f       	mov	r24, r22
    2bc4:	97 2f       	mov	r25, r23
    2bc6:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e8 0f       	add	r30, r24
    2bcc:	f9 1f       	adc	r31, r25
    2bce:	31 97       	sbiw	r30, 0x01	; 1
    2bd0:	f0 80       	ld	r15, Z
    2bd2:	6f ef       	ldi	r22, 0xFF	; 255
    2bd4:	68 0f       	add	r22, r24
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2bdc:	f8 16       	cp	r15, r24
    2bde:	49 f0       	breq	.+18     	; 0x2bf2 <network_receive+0x6c>
	   ++crc;
    2be0:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <crc.2025>
    2be4:	8f 5f       	subi	r24, 0xFF	; 255
    2be6:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <crc.2025>
	   vPortFree(decoded_data);
    2bea:	ce 01       	movw	r24, r28
    2bec:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bf0:	1b c0       	rjmp	.+54     	; 0x2c28 <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2bf2:	88 81       	ld	r24, Y
    2bf4:	83 30       	cpi	r24, 0x03	; 3
    2bf6:	21 f0       	breq	.+8      	; 0x2c00 <network_receive+0x7a>
	   vPortFree(decoded_data);
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2c00:	a8 01       	movw	r20, r16
    2c02:	44 50       	subi	r20, 0x04	; 4
    2c04:	51 09       	sbc	r21, r1
    2c06:	be 01       	movw	r22, r28
    2c08:	6d 5f       	subi	r22, 0xFD	; 253
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	ef 53       	subi	r30, 0x3F	; 63
    2c16:	f4 4e       	sbci	r31, 0xE4	; 228
    2c18:	01 90       	ld	r0, Z+
    2c1a:	f0 81       	ld	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	19 95       	eicall
   vPortFree(decoded_data);
    2c22:	ce 01       	movw	r24, r28
    2c24:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
}
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	08 95       	ret

00002c36 <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2c36:	83 ec       	ldi	r24, 0xC3	; 195
    2c38:	95 e1       	ldi	r25, 0x15	; 21
    2c3a:	0c 94 bd 2e 	jmp	0x5d7a	; 0x5d7a <vUSART_set_receive_callback>
    2c3e:	08 95       	ret

00002c40 <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	40 f4       	brcc	.+16     	; 0x2c54 <network_set_callback+0x14>
    2c44:	e8 2f       	mov	r30, r24
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	ee 0f       	add	r30, r30
    2c4a:	ff 1f       	adc	r31, r31
    2c4c:	ef 53       	subi	r30, 0x3F	; 63
    2c4e:	f4 4e       	sbci	r31, 0xE4	; 228
    2c50:	71 83       	std	Z+1, r23	; 0x01
    2c52:	60 83       	st	Z, r22
    2c54:	08 95       	ret

00002c56 <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2c56:	8f 92       	push	r8
    2c58:	9f 92       	push	r9
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	88 2e       	mov	r8, r24
    2c70:	96 2e       	mov	r9, r22
    2c72:	5a 01       	movw	r10, r20
    2c74:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2c76:	69 01       	movw	r12, r18
    2c78:	84 e0       	ldi	r24, 0x04	; 4
    2c7a:	c8 0e       	add	r12, r24
    2c7c:	d1 1c       	adc	r13, r1
    2c7e:	c6 01       	movw	r24, r12
    2c80:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2c84:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2c86:	c8 01       	movw	r24, r16
    2c88:	06 96       	adiw	r24, 0x06	; 6
    2c8a:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2c8e:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2c90:	20 97       	sbiw	r28, 0x00	; 0
    2c92:	11 f0       	breq	.+4      	; 0x2c98 <network_send+0x42>
    2c94:	89 2b       	or	r24, r25
    2c96:	41 f4       	brne	.+16     	; 0x2ca8 <network_send+0x52>
    vPortFree(packet);
    2c98:	ce 01       	movw	r24, r28
    2c9a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2c9e:	c7 01       	movw	r24, r14
    2ca0:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	3c c0       	rjmp	.+120    	; 0x2d20 <network_send+0xca>
  }
  packet[0] = remote_address;
    2ca8:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2cae:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2cb0:	a8 01       	movw	r20, r16
    2cb2:	b5 01       	movw	r22, r10
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	03 96       	adiw	r24, 0x03	; 3
    2cb8:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2cbc:	58 01       	movw	r10, r16
    2cbe:	e3 e0       	ldi	r30, 0x03	; 3
    2cc0:	ae 0e       	add	r10, r30
    2cc2:	b1 1c       	adc	r11, r1
    2cc4:	ac 0e       	add	r10, r28
    2cc6:	bd 1e       	adc	r11, r29
    2cc8:	63 e0       	ldi	r22, 0x03	; 3
    2cca:	60 0f       	add	r22, r16
    2ccc:	ce 01       	movw	r24, r28
    2cce:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2cd2:	f5 01       	movw	r30, r10
    2cd4:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	6b 5f       	subi	r22, 0xFB	; 251
    2cda:	7f 4f       	sbci	r23, 0xFF	; 255
    2cdc:	96 01       	movw	r18, r12
    2cde:	ae 01       	movw	r20, r28
    2ce0:	c7 01       	movw	r24, r14
    2ce2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2ce6:	88 23       	and	r24, r24
    2ce8:	41 f0       	breq	.+16     	; 0x2cfa <network_send+0xa4>
    vPortFree(packet);
    2cea:	ce 01       	movw	r24, r28
    2cec:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2cf0:	c7 01       	movw	r24, r14
    2cf2:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	13 c0       	rjmp	.+38     	; 0x2d20 <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2cfa:	86 2f       	mov	r24, r22
    2cfc:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2cfe:	f7 01       	movw	r30, r14
    2d00:	e8 0f       	add	r30, r24
    2d02:	f9 1f       	adc	r31, r25
    2d04:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2d06:	bc 01       	movw	r22, r24
    2d08:	6f 5f       	subi	r22, 0xFF	; 255
    2d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0c:	c7 01       	movw	r24, r14
    2d0e:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <vUSART_send>
  vPortFree(packet);
    2d12:	ce 01       	movw	r24, r28
    2d14:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  vPortFree(encoded_data);
    2d18:	c7 01       	movw	r24, r14
    2d1a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
}
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	ff 90       	pop	r15
    2d2a:	ef 90       	pop	r14
    2d2c:	df 90       	pop	r13
    2d2e:	cf 90       	pop	r12
    2d30:	bf 90       	pop	r11
    2d32:	af 90       	pop	r10
    2d34:	9f 90       	pop	r9
    2d36:	8f 90       	pop	r8
    2d38:	08 95       	ret

00002d3a <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2d3a:	31 e1       	ldi	r19, 0x11	; 17
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	30 83       	st	Z, r19
    2d40:	31 97       	sbiw	r30, 0x01	; 1
    2d42:	22 e2       	ldi	r18, 0x22	; 34
    2d44:	20 83       	st	Z, r18
    2d46:	31 97       	sbiw	r30, 0x01	; 1
    2d48:	a3 e3       	ldi	r26, 0x33	; 51
    2d4a:	a0 83       	st	Z, r26
    2d4c:	31 97       	sbiw	r30, 0x01	; 1
    2d4e:	60 83       	st	Z, r22
    2d50:	31 97       	sbiw	r30, 0x01	; 1
    2d52:	70 83       	st	Z, r23
    2d54:	31 97       	sbiw	r30, 0x01	; 1
    2d56:	10 82       	st	Z, r1
    2d58:	31 97       	sbiw	r30, 0x01	; 1
    2d5a:	10 82       	st	Z, r1
    2d5c:	31 97       	sbiw	r30, 0x01	; 1
    2d5e:	60 e8       	ldi	r22, 0x80	; 128
    2d60:	60 83       	st	Z, r22
    2d62:	31 97       	sbiw	r30, 0x01	; 1
    2d64:	10 82       	st	Z, r1
    2d66:	31 97       	sbiw	r30, 0x01	; 1
    2d68:	10 82       	st	Z, r1
    2d6a:	31 97       	sbiw	r30, 0x01	; 1
    2d6c:	10 82       	st	Z, r1
    2d6e:	31 97       	sbiw	r30, 0x01	; 1
    2d70:	62 e0       	ldi	r22, 0x02	; 2
    2d72:	60 83       	st	Z, r22
    2d74:	31 97       	sbiw	r30, 0x01	; 1
    2d76:	63 e0       	ldi	r22, 0x03	; 3
    2d78:	60 83       	st	Z, r22
    2d7a:	31 97       	sbiw	r30, 0x01	; 1
    2d7c:	64 e0       	ldi	r22, 0x04	; 4
    2d7e:	60 83       	st	Z, r22
    2d80:	31 97       	sbiw	r30, 0x01	; 1
    2d82:	65 e0       	ldi	r22, 0x05	; 5
    2d84:	60 83       	st	Z, r22
    2d86:	31 97       	sbiw	r30, 0x01	; 1
    2d88:	66 e0       	ldi	r22, 0x06	; 6
    2d8a:	60 83       	st	Z, r22
    2d8c:	31 97       	sbiw	r30, 0x01	; 1
    2d8e:	67 e0       	ldi	r22, 0x07	; 7
    2d90:	60 83       	st	Z, r22
    2d92:	31 97       	sbiw	r30, 0x01	; 1
    2d94:	68 e0       	ldi	r22, 0x08	; 8
    2d96:	60 83       	st	Z, r22
    2d98:	31 97       	sbiw	r30, 0x01	; 1
    2d9a:	69 e0       	ldi	r22, 0x09	; 9
    2d9c:	60 83       	st	Z, r22
    2d9e:	31 97       	sbiw	r30, 0x01	; 1
    2da0:	60 e1       	ldi	r22, 0x10	; 16
    2da2:	60 83       	st	Z, r22
    2da4:	31 97       	sbiw	r30, 0x01	; 1
    2da6:	30 83       	st	Z, r19
    2da8:	31 97       	sbiw	r30, 0x01	; 1
    2daa:	32 e1       	ldi	r19, 0x12	; 18
    2dac:	30 83       	st	Z, r19
    2dae:	31 97       	sbiw	r30, 0x01	; 1
    2db0:	33 e1       	ldi	r19, 0x13	; 19
    2db2:	30 83       	st	Z, r19
    2db4:	31 97       	sbiw	r30, 0x01	; 1
    2db6:	34 e1       	ldi	r19, 0x14	; 20
    2db8:	30 83       	st	Z, r19
    2dba:	31 97       	sbiw	r30, 0x01	; 1
    2dbc:	35 e1       	ldi	r19, 0x15	; 21
    2dbe:	30 83       	st	Z, r19
    2dc0:	31 97       	sbiw	r30, 0x01	; 1
    2dc2:	36 e1       	ldi	r19, 0x16	; 22
    2dc4:	30 83       	st	Z, r19
    2dc6:	31 97       	sbiw	r30, 0x01	; 1
    2dc8:	37 e1       	ldi	r19, 0x17	; 23
    2dca:	30 83       	st	Z, r19
    2dcc:	31 97       	sbiw	r30, 0x01	; 1
    2dce:	38 e1       	ldi	r19, 0x18	; 24
    2dd0:	30 83       	st	Z, r19
    2dd2:	31 97       	sbiw	r30, 0x01	; 1
    2dd4:	39 e1       	ldi	r19, 0x19	; 25
    2dd6:	30 83       	st	Z, r19
    2dd8:	31 97       	sbiw	r30, 0x01	; 1
    2dda:	30 e2       	ldi	r19, 0x20	; 32
    2ddc:	30 83       	st	Z, r19
    2dde:	31 97       	sbiw	r30, 0x01	; 1
    2de0:	31 e2       	ldi	r19, 0x21	; 33
    2de2:	30 83       	st	Z, r19
    2de4:	31 97       	sbiw	r30, 0x01	; 1
    2de6:	20 83       	st	Z, r18
    2de8:	31 97       	sbiw	r30, 0x01	; 1
    2dea:	23 e2       	ldi	r18, 0x23	; 35
    2dec:	20 83       	st	Z, r18
    2dee:	31 97       	sbiw	r30, 0x01	; 1
    2df0:	40 83       	st	Z, r20
    2df2:	31 97       	sbiw	r30, 0x01	; 1
    2df4:	50 83       	st	Z, r21
    2df6:	31 97       	sbiw	r30, 0x01	; 1
    2df8:	26 e2       	ldi	r18, 0x26	; 38
    2dfa:	20 83       	st	Z, r18
    2dfc:	31 97       	sbiw	r30, 0x01	; 1
    2dfe:	27 e2       	ldi	r18, 0x27	; 39
    2e00:	20 83       	st	Z, r18
    2e02:	31 97       	sbiw	r30, 0x01	; 1
    2e04:	28 e2       	ldi	r18, 0x28	; 40
    2e06:	20 83       	st	Z, r18
    2e08:	31 97       	sbiw	r30, 0x01	; 1
    2e0a:	29 e2       	ldi	r18, 0x29	; 41
    2e0c:	20 83       	st	Z, r18
    2e0e:	31 97       	sbiw	r30, 0x01	; 1
    2e10:	20 e3       	ldi	r18, 0x30	; 48
    2e12:	20 83       	st	Z, r18
    2e14:	31 97       	sbiw	r30, 0x01	; 1
    2e16:	21 e3       	ldi	r18, 0x31	; 49
    2e18:	20 83       	st	Z, r18
    2e1a:	89 97       	sbiw	r24, 0x29	; 41
    2e1c:	08 95       	ret

00002e1e <xPortStartScheduler>:
    2e1e:	88 ee       	ldi	r24, 0xE8	; 232
    2e20:	93 e0       	ldi	r25, 0x03	; 3
    2e22:	90 93 d6 1b 	sts	0x1BD6, r25	; 0x801bd6 <portTickRateHz+0x1>
    2e26:	80 93 d5 1b 	sts	0x1BD5, r24	; 0x801bd5 <portTickRateHz>
    2e2a:	90 93 d8 1b 	sts	0x1BD8, r25	; 0x801bd8 <ticksRemainingInSec+0x1>
    2e2e:	80 93 d7 1b 	sts	0x1BD7, r24	; 0x801bd7 <ticksRemainingInSec>
    2e32:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2e36:	89 ef       	ldi	r24, 0xF9	; 249
    2e38:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2e3c:	8b e0       	ldi	r24, 0x0B	; 11
    2e3e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2e42:	e1 e7       	ldi	r30, 0x71	; 113
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	80 83       	st	Z, r24
    2e4c:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    2e50:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    2e54:	cd 91       	ld	r28, X+
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	dd 91       	ld	r29, X+
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	bf 91       	pop	r27
    2e66:	af 91       	pop	r26
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	7f 91       	pop	r23
    2e6e:	6f 91       	pop	r22
    2e70:	5f 91       	pop	r21
    2e72:	4f 91       	pop	r20
    2e74:	3f 91       	pop	r19
    2e76:	2f 91       	pop	r18
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	df 90       	pop	r13
    2e82:	cf 90       	pop	r12
    2e84:	bf 90       	pop	r11
    2e86:	af 90       	pop	r10
    2e88:	9f 90       	pop	r9
    2e8a:	8f 90       	pop	r8
    2e8c:	7f 90       	pop	r7
    2e8e:	6f 90       	pop	r6
    2e90:	5f 90       	pop	r5
    2e92:	4f 90       	pop	r4
    2e94:	3f 90       	pop	r3
    2e96:	2f 90       	pop	r2
    2e98:	1f 90       	pop	r1
    2e9a:	0f 90       	pop	r0
    2e9c:	0c be       	out	0x3c, r0	; 60
    2e9e:	0f 90       	pop	r0
    2ea0:	0b be       	out	0x3b, r0	; 59
    2ea2:	0f 90       	pop	r0
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	0f 90       	pop	r0
    2ea8:	08 95       	ret
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	08 95       	ret

00002eae <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2eae:	0f 92       	push	r0
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	0f 92       	push	r0
    2eb6:	0b b6       	in	r0, 0x3b	; 59
    2eb8:	0f 92       	push	r0
    2eba:	0c b6       	in	r0, 0x3c	; 60
    2ebc:	0f 92       	push	r0
    2ebe:	1f 92       	push	r1
    2ec0:	11 24       	eor	r1, r1
    2ec2:	2f 92       	push	r2
    2ec4:	3f 92       	push	r3
    2ec6:	4f 92       	push	r4
    2ec8:	5f 92       	push	r5
    2eca:	6f 92       	push	r6
    2ecc:	7f 92       	push	r7
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	2f 93       	push	r18
    2ee4:	3f 93       	push	r19
    2ee6:	4f 93       	push	r20
    2ee8:	5f 93       	push	r21
    2eea:	6f 93       	push	r22
    2eec:	7f 93       	push	r23
    2eee:	8f 93       	push	r24
    2ef0:	9f 93       	push	r25
    2ef2:	af 93       	push	r26
    2ef4:	bf 93       	push	r27
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	ef 93       	push	r30
    2efc:	ff 93       	push	r31
    2efe:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    2f02:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    2f06:	0d b6       	in	r0, 0x3d	; 61
    2f08:	0d 92       	st	X+, r0
    2f0a:	0e b6       	in	r0, 0x3e	; 62
    2f0c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f0e:	0e 94 10 29 	call	0x5220	; 0x5220 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f12:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    2f16:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    2f1a:	cd 91       	ld	r28, X+
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	dd 91       	ld	r29, X+
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	ff 91       	pop	r31
    2f24:	ef 91       	pop	r30
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	bf 91       	pop	r27
    2f2c:	af 91       	pop	r26
    2f2e:	9f 91       	pop	r25
    2f30:	8f 91       	pop	r24
    2f32:	7f 91       	pop	r23
    2f34:	6f 91       	pop	r22
    2f36:	5f 91       	pop	r21
    2f38:	4f 91       	pop	r20
    2f3a:	3f 91       	pop	r19
    2f3c:	2f 91       	pop	r18
    2f3e:	1f 91       	pop	r17
    2f40:	0f 91       	pop	r16
    2f42:	ff 90       	pop	r15
    2f44:	ef 90       	pop	r14
    2f46:	df 90       	pop	r13
    2f48:	cf 90       	pop	r12
    2f4a:	bf 90       	pop	r11
    2f4c:	af 90       	pop	r10
    2f4e:	9f 90       	pop	r9
    2f50:	8f 90       	pop	r8
    2f52:	7f 90       	pop	r7
    2f54:	6f 90       	pop	r6
    2f56:	5f 90       	pop	r5
    2f58:	4f 90       	pop	r4
    2f5a:	3f 90       	pop	r3
    2f5c:	2f 90       	pop	r2
    2f5e:	1f 90       	pop	r1
    2f60:	0f 90       	pop	r0
    2f62:	0c be       	out	0x3c, r0	; 60
    2f64:	0f 90       	pop	r0
    2f66:	0b be       	out	0x3b, r0	; 59
    2f68:	0f 90       	pop	r0
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2f6e:	08 95       	ret

00002f70 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2f70:	0f 92       	push	r0
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	0f 92       	push	r0
    2f78:	0b b6       	in	r0, 0x3b	; 59
    2f7a:	0f 92       	push	r0
    2f7c:	0c b6       	in	r0, 0x3c	; 60
    2f7e:	0f 92       	push	r0
    2f80:	1f 92       	push	r1
    2f82:	11 24       	eor	r1, r1
    2f84:	2f 92       	push	r2
    2f86:	3f 92       	push	r3
    2f88:	4f 92       	push	r4
    2f8a:	5f 92       	push	r5
    2f8c:	6f 92       	push	r6
    2f8e:	7f 92       	push	r7
    2f90:	8f 92       	push	r8
    2f92:	9f 92       	push	r9
    2f94:	af 92       	push	r10
    2f96:	bf 92       	push	r11
    2f98:	cf 92       	push	r12
    2f9a:	df 92       	push	r13
    2f9c:	ef 92       	push	r14
    2f9e:	ff 92       	push	r15
    2fa0:	0f 93       	push	r16
    2fa2:	1f 93       	push	r17
    2fa4:	2f 93       	push	r18
    2fa6:	3f 93       	push	r19
    2fa8:	4f 93       	push	r20
    2faa:	5f 93       	push	r21
    2fac:	6f 93       	push	r22
    2fae:	7f 93       	push	r23
    2fb0:	8f 93       	push	r24
    2fb2:	9f 93       	push	r25
    2fb4:	af 93       	push	r26
    2fb6:	bf 93       	push	r27
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	ef 93       	push	r30
    2fbe:	ff 93       	push	r31
    2fc0:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    2fc4:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    2fc8:	0d b6       	in	r0, 0x3d	; 61
    2fca:	0d 92       	st	X+, r0
    2fcc:	0e b6       	in	r0, 0x3e	; 62
    2fce:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2fd0:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    2fd2:	80 91 d7 1b 	lds	r24, 0x1BD7	; 0x801bd7 <ticksRemainingInSec>
    2fd6:	90 91 d8 1b 	lds	r25, 0x1BD8	; 0x801bd8 <ticksRemainingInSec+0x1>
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	90 93 d8 1b 	sts	0x1BD8, r25	; 0x801bd8 <ticksRemainingInSec+0x1>
    2fe0:	80 93 d7 1b 	sts	0x1BD7, r24	; 0x801bd7 <ticksRemainingInSec>
    2fe4:	89 2b       	or	r24, r25
    2fe6:	41 f4       	brne	.+16     	; 0x2ff8 <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    2fe8:	80 91 d5 1b 	lds	r24, 0x1BD5	; 0x801bd5 <portTickRateHz>
    2fec:	90 91 d6 1b 	lds	r25, 0x1BD6	; 0x801bd6 <portTickRateHz+0x1>
    2ff0:	90 93 d8 1b 	sts	0x1BD8, r25	; 0x801bd8 <ticksRemainingInSec+0x1>
    2ff4:	80 93 d7 1b 	sts	0x1BD7, r24	; 0x801bd7 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    2ff8:	0e 94 4f 28 	call	0x509e	; 0x509e <xTaskIncrementTick>
    2ffc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2ffe:	0e 94 10 29 	call	0x5220	; 0x5220 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    3002:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    3006:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    300a:	cd 91       	ld	r28, X+
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	dd 91       	ld	r29, X+
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	ff 91       	pop	r31
    3014:	ef 91       	pop	r30
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	bf 91       	pop	r27
    301c:	af 91       	pop	r26
    301e:	9f 91       	pop	r25
    3020:	8f 91       	pop	r24
    3022:	7f 91       	pop	r23
    3024:	6f 91       	pop	r22
    3026:	5f 91       	pop	r21
    3028:	4f 91       	pop	r20
    302a:	3f 91       	pop	r19
    302c:	2f 91       	pop	r18
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	ff 90       	pop	r15
    3034:	ef 90       	pop	r14
    3036:	df 90       	pop	r13
    3038:	cf 90       	pop	r12
    303a:	bf 90       	pop	r11
    303c:	af 90       	pop	r10
    303e:	9f 90       	pop	r9
    3040:	8f 90       	pop	r8
    3042:	7f 90       	pop	r7
    3044:	6f 90       	pop	r6
    3046:	5f 90       	pop	r5
    3048:	4f 90       	pop	r4
    304a:	3f 90       	pop	r3
    304c:	2f 90       	pop	r2
    304e:	1f 90       	pop	r1
    3050:	0f 90       	pop	r0
    3052:	0c be       	out	0x3c, r0	; 60
    3054:	0f 90       	pop	r0
    3056:	0b be       	out	0x3b, r0	; 59
    3058:	0f 90       	pop	r0
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    305e:	08 95       	ret

00003060 <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    3060:	87 df       	rcall	.-242    	; 0x2f70 <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    3062:	18 95       	reti

00003064 <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	08 2f       	mov	r16, r24
    306e:	16 2f       	mov	r17, r22
    3070:	66 23       	and	r22, r22
    3072:	09 f4       	brne	.+2      	; 0x3076 <xQueueGenericCreate+0x12>
    3074:	3b c0       	rjmp	.+118    	; 0x30ec <xQueueGenericCreate+0x88>
    3076:	86 9f       	mul	r24, r22
    3078:	c0 01       	movw	r24, r0
    307a:	11 24       	eor	r1, r1
    307c:	80 96       	adiw	r24, 0x20	; 32
    307e:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    3082:	ec 01       	movw	r28, r24
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	21 f4       	brne	.+8      	; 0x3090 <xQueueGenericCreate+0x2c>
    3088:	39 c0       	rjmp	.+114    	; 0x30fc <xQueueGenericCreate+0x98>
    308a:	d9 83       	std	Y+1, r29	; 0x01
    308c:	c8 83       	st	Y, r28
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <xQueueGenericCreate+0x32>
    3090:	4f 96       	adiw	r24, 0x1f	; 31
    3092:	99 83       	std	Y+1, r25	; 0x01
    3094:	88 83       	st	Y, r24
    3096:	0b 8f       	std	Y+27, r16	; 0x1b
    3098:	1c 8f       	std	Y+28, r17	; 0x1c
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	0f 92       	push	r0
    30a0:	48 81       	ld	r20, Y
    30a2:	59 81       	ldd	r21, Y+1	; 0x01
    30a4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    30aa:	62 9f       	mul	r22, r18
    30ac:	c0 01       	movw	r24, r0
    30ae:	63 9f       	mul	r22, r19
    30b0:	90 0d       	add	r25, r0
    30b2:	11 24       	eor	r1, r1
    30b4:	ba 01       	movw	r22, r20
    30b6:	68 0f       	add	r22, r24
    30b8:	79 1f       	adc	r23, r25
    30ba:	7b 83       	std	Y+3, r23	; 0x03
    30bc:	6a 83       	std	Y+2, r22	; 0x02
    30be:	1a 8e       	std	Y+26, r1	; 0x1a
    30c0:	5d 83       	std	Y+5, r21	; 0x05
    30c2:	4c 83       	std	Y+4, r20	; 0x04
    30c4:	82 1b       	sub	r24, r18
    30c6:	93 0b       	sbc	r25, r19
    30c8:	84 0f       	add	r24, r20
    30ca:	95 1f       	adc	r25, r21
    30cc:	9f 83       	std	Y+7, r25	; 0x07
    30ce:	8e 83       	std	Y+6, r24	; 0x06
    30d0:	8f ef       	ldi	r24, 0xFF	; 255
    30d2:	8d 8f       	std	Y+29, r24	; 0x1d
    30d4:	8e 8f       	std	Y+30, r24	; 0x1e
    30d6:	ce 01       	movw	r24, r28
    30d8:	08 96       	adiw	r24, 0x08	; 8
    30da:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    30de:	ce 01       	movw	r24, r28
    30e0:	41 96       	adiw	r24, 0x11	; 17
    30e2:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	08 c0       	rjmp	.+16     	; 0x30fc <xQueueGenericCreate+0x98>
    30ec:	8f e1       	ldi	r24, 0x1F	; 31
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    30f4:	ec 01       	movw	r28, r24
    30f6:	89 2b       	or	r24, r25
    30f8:	09 f0       	breq	.+2      	; 0x30fc <xQueueGenericCreate+0x98>
    30fa:	c7 cf       	rjmp	.-114    	; 0x308a <xQueueGenericCreate+0x26>
    30fc:	ce 01       	movw	r24, r28
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	08 95       	ret

00003108 <xQueueCreateMutex>:
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	00 d0       	rcall	.+0      	; 0x3120 <xQueueCreateMutex+0x18>
    3120:	1f 92       	push	r1
    3122:	1f 92       	push	r1
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	8f e1       	ldi	r24, 0x1F	; 31
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    3130:	8c 01       	movw	r16, r24
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	09 f4       	brne	.+2      	; 0x3138 <xQueueCreateMutex+0x30>
    3136:	58 c1       	rjmp	.+688    	; 0x33e8 <xQueueCreateMutex+0x2e0>
    3138:	fc 01       	movw	r30, r24
    313a:	13 82       	std	Z+3, r1	; 0x03
    313c:	12 82       	std	Z+2, r1	; 0x02
    313e:	11 82       	std	Z+1, r1	; 0x01
    3140:	10 82       	st	Z, r1
    3142:	15 82       	std	Z+5, r1	; 0x05
    3144:	14 82       	std	Z+4, r1	; 0x04
    3146:	17 82       	std	Z+7, r1	; 0x07
    3148:	16 82       	std	Z+6, r1	; 0x06
    314a:	12 8e       	std	Z+26, r1	; 0x1a
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	83 8f       	std	Z+27, r24	; 0x1b
    3150:	14 8e       	std	Z+28, r1	; 0x1c
    3152:	8f ef       	ldi	r24, 0xFF	; 255
    3154:	85 8f       	std	Z+29, r24	; 0x1d
    3156:	86 8f       	std	Z+30, r24	; 0x1e
    3158:	78 01       	movw	r14, r16
    315a:	f8 e0       	ldi	r31, 0x08	; 8
    315c:	ef 0e       	add	r14, r31
    315e:	f1 1c       	adc	r15, r1
    3160:	c7 01       	movw	r24, r14
    3162:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3166:	68 01       	movw	r12, r16
    3168:	81 e1       	ldi	r24, 0x11	; 17
    316a:	c8 0e       	add	r12, r24
    316c:	d1 1c       	adc	r13, r1
    316e:	c6 01       	movw	r24, r12
    3170:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3174:	1d 82       	std	Y+5, r1	; 0x05
    3176:	1c 82       	std	Y+4, r1	; 0x04
    3178:	a1 2c       	mov	r10, r1
    317a:	99 24       	eor	r9, r9
    317c:	93 94       	inc	r9
    317e:	bb 24       	eor	r11, r11
    3180:	ba 94       	dec	r11
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	0f 92       	push	r0
    3188:	f8 01       	movw	r30, r16
    318a:	92 8d       	ldd	r25, Z+26	; 0x1a
    318c:	83 8d       	ldd	r24, Z+27	; 0x1b
    318e:	98 17       	cp	r25, r24
    3190:	f0 f4       	brcc	.+60     	; 0x31ce <xQueueCreateMutex+0xc6>
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	89 2b       	or	r24, r25
    3198:	09 f0       	breq	.+2      	; 0x319c <xQueueCreateMutex+0x94>
    319a:	1d c1       	rjmp	.+570    	; 0x33d6 <xQueueCreateMutex+0x2ce>
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	93 81       	ldd	r25, Z+3	; 0x03
    31a0:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <xTaskPriorityDisinherit>
    31a4:	f8 01       	movw	r30, r16
    31a6:	13 82       	std	Z+3, r1	; 0x03
    31a8:	12 82       	std	Z+2, r1	; 0x02
    31aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    31ac:	9f 5f       	subi	r25, 0xFF	; 255
    31ae:	92 8f       	std	Z+26, r25	; 0x1a
    31b0:	91 89       	ldd	r25, Z+17	; 0x11
    31b2:	99 23       	and	r25, r25
    31b4:	39 f0       	breq	.+14     	; 0x31c4 <xQueueCreateMutex+0xbc>
    31b6:	c6 01       	movw	r24, r12
    31b8:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	21 f4       	brne	.+8      	; 0x31c8 <xQueueCreateMutex+0xc0>
    31c0:	76 de       	rcall	.-788    	; 0x2eae <vPortYield>
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <xQueueCreateMutex+0xc0>
    31c4:	81 11       	cpse	r24, r1
    31c6:	73 de       	rcall	.-794    	; 0x2eae <vPortYield>
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	0d c1       	rjmp	.+538    	; 0x33e8 <xQueueCreateMutex+0x2e0>
    31ce:	8c 81       	ldd	r24, Y+4	; 0x04
    31d0:	9d 81       	ldd	r25, Y+5	; 0x05
    31d2:	89 2b       	or	r24, r25
    31d4:	19 f4       	brne	.+6      	; 0x31dc <xQueueCreateMutex+0xd4>
    31d6:	0f 90       	pop	r0
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	06 c1       	rjmp	.+524    	; 0x33e8 <xQueueCreateMutex+0x2e0>
    31dc:	a1 10       	cpse	r10, r1
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <xQueueCreateMutex+0xe2>
    31e0:	ce 01       	movw	r24, r28
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	0e 94 3b 2a 	call	0x5476	; 0x5476 <vTaskSetTimeOutState>
    31e8:	a9 2c       	mov	r10, r9
    31ea:	0f 90       	pop	r0
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	0f 92       	push	r0
    31f8:	f8 01       	movw	r30, r16
    31fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	09 f4       	brne	.+2      	; 0x3202 <xQueueCreateMutex+0xfa>
    3200:	15 8e       	std	Z+29, r1	; 0x1d
    3202:	f8 01       	movw	r30, r16
    3204:	86 8d       	ldd	r24, Z+30	; 0x1e
    3206:	8f 3f       	cpi	r24, 0xFF	; 255
    3208:	09 f4       	brne	.+2      	; 0x320c <xQueueCreateMutex+0x104>
    320a:	16 8e       	std	Z+30, r1	; 0x1e
    320c:	0f 90       	pop	r0
    320e:	0f be       	out	0x3f, r0	; 63
    3210:	be 01       	movw	r22, r28
    3212:	6c 5f       	subi	r22, 0xFC	; 252
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	ce 01       	movw	r24, r28
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	0e 94 46 2a 	call	0x548c	; 0x548c <xTaskCheckForTimeOut>
    321e:	81 11       	cpse	r24, r1
    3220:	96 c0       	rjmp	.+300    	; 0x334e <xQueueCreateMutex+0x246>
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	0f 92       	push	r0
    3228:	f8 01       	movw	r30, r16
    322a:	92 8d       	ldd	r25, Z+26	; 0x1a
    322c:	83 8d       	ldd	r24, Z+27	; 0x1b
    322e:	0f 90       	pop	r0
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	98 13       	cpse	r25, r24
    3234:	4a c0       	rjmp	.+148    	; 0x32ca <xQueueCreateMutex+0x1c2>
    3236:	6c 81       	ldd	r22, Y+4	; 0x04
    3238:	7d 81       	ldd	r23, Y+5	; 0x05
    323a:	c7 01       	movw	r24, r14
    323c:	0e 94 98 29 	call	0x5330	; 0x5330 <vTaskPlaceOnEventList>
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	0f 92       	push	r0
    3246:	f8 01       	movw	r30, r16
    3248:	86 8d       	ldd	r24, Z+30	; 0x1e
    324a:	18 16       	cp	r1, r24
    324c:	ac f4       	brge	.+42     	; 0x3278 <xQueueCreateMutex+0x170>
    324e:	81 89       	ldd	r24, Z+17	; 0x11
    3250:	81 11       	cpse	r24, r1
    3252:	05 c0       	rjmp	.+10     	; 0x325e <xQueueCreateMutex+0x156>
    3254:	11 c0       	rjmp	.+34     	; 0x3278 <xQueueCreateMutex+0x170>
    3256:	f8 01       	movw	r30, r16
    3258:	81 89       	ldd	r24, Z+17	; 0x11
    325a:	88 23       	and	r24, r24
    325c:	69 f0       	breq	.+26     	; 0x3278 <xQueueCreateMutex+0x170>
    325e:	c6 01       	movw	r24, r12
    3260:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3264:	81 11       	cpse	r24, r1
    3266:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    326a:	f8 01       	movw	r30, r16
    326c:	86 8d       	ldd	r24, Z+30	; 0x1e
    326e:	81 50       	subi	r24, 0x01	; 1
    3270:	86 8f       	std	Z+30, r24	; 0x1e
    3272:	86 8d       	ldd	r24, Z+30	; 0x1e
    3274:	18 16       	cp	r1, r24
    3276:	7c f3       	brlt	.-34     	; 0x3256 <xQueueCreateMutex+0x14e>
    3278:	f8 01       	movw	r30, r16
    327a:	b6 8e       	std	Z+30, r11	; 0x1e
    327c:	0f 90       	pop	r0
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	0f 92       	push	r0
    3286:	85 8d       	ldd	r24, Z+29	; 0x1d
    3288:	18 16       	cp	r1, r24
    328a:	ac f4       	brge	.+42     	; 0x32b6 <xQueueCreateMutex+0x1ae>
    328c:	80 85       	ldd	r24, Z+8	; 0x08
    328e:	81 11       	cpse	r24, r1
    3290:	05 c0       	rjmp	.+10     	; 0x329c <xQueueCreateMutex+0x194>
    3292:	11 c0       	rjmp	.+34     	; 0x32b6 <xQueueCreateMutex+0x1ae>
    3294:	f8 01       	movw	r30, r16
    3296:	80 85       	ldd	r24, Z+8	; 0x08
    3298:	88 23       	and	r24, r24
    329a:	69 f0       	breq	.+26     	; 0x32b6 <xQueueCreateMutex+0x1ae>
    329c:	c7 01       	movw	r24, r14
    329e:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    32a2:	81 11       	cpse	r24, r1
    32a4:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    32a8:	f8 01       	movw	r30, r16
    32aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    32ac:	81 50       	subi	r24, 0x01	; 1
    32ae:	85 8f       	std	Z+29, r24	; 0x1d
    32b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    32b2:	18 16       	cp	r1, r24
    32b4:	7c f3       	brlt	.-34     	; 0x3294 <xQueueCreateMutex+0x18c>
    32b6:	f8 01       	movw	r30, r16
    32b8:	b5 8e       	std	Z+29, r11	; 0x1d
    32ba:	0f 90       	pop	r0
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    32c2:	81 11       	cpse	r24, r1
    32c4:	5e cf       	rjmp	.-324    	; 0x3182 <xQueueCreateMutex+0x7a>
    32c6:	f3 dd       	rcall	.-1050   	; 0x2eae <vPortYield>
    32c8:	5c cf       	rjmp	.-328    	; 0x3182 <xQueueCreateMutex+0x7a>
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	0f 92       	push	r0
    32d0:	f8 01       	movw	r30, r16
    32d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    32d4:	18 16       	cp	r1, r24
    32d6:	ac f4       	brge	.+42     	; 0x3302 <xQueueCreateMutex+0x1fa>
    32d8:	81 89       	ldd	r24, Z+17	; 0x11
    32da:	81 11       	cpse	r24, r1
    32dc:	05 c0       	rjmp	.+10     	; 0x32e8 <xQueueCreateMutex+0x1e0>
    32de:	11 c0       	rjmp	.+34     	; 0x3302 <xQueueCreateMutex+0x1fa>
    32e0:	f8 01       	movw	r30, r16
    32e2:	81 89       	ldd	r24, Z+17	; 0x11
    32e4:	88 23       	and	r24, r24
    32e6:	69 f0       	breq	.+26     	; 0x3302 <xQueueCreateMutex+0x1fa>
    32e8:	c6 01       	movw	r24, r12
    32ea:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    32ee:	81 11       	cpse	r24, r1
    32f0:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    32f4:	f8 01       	movw	r30, r16
    32f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    32f8:	81 50       	subi	r24, 0x01	; 1
    32fa:	86 8f       	std	Z+30, r24	; 0x1e
    32fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    32fe:	18 16       	cp	r1, r24
    3300:	7c f3       	brlt	.-34     	; 0x32e0 <xQueueCreateMutex+0x1d8>
    3302:	f8 01       	movw	r30, r16
    3304:	b6 8e       	std	Z+30, r11	; 0x1e
    3306:	0f 90       	pop	r0
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	0f 92       	push	r0
    3310:	85 8d       	ldd	r24, Z+29	; 0x1d
    3312:	18 16       	cp	r1, r24
    3314:	ac f4       	brge	.+42     	; 0x3340 <xQueueCreateMutex+0x238>
    3316:	80 85       	ldd	r24, Z+8	; 0x08
    3318:	81 11       	cpse	r24, r1
    331a:	05 c0       	rjmp	.+10     	; 0x3326 <xQueueCreateMutex+0x21e>
    331c:	11 c0       	rjmp	.+34     	; 0x3340 <xQueueCreateMutex+0x238>
    331e:	f8 01       	movw	r30, r16
    3320:	80 85       	ldd	r24, Z+8	; 0x08
    3322:	88 23       	and	r24, r24
    3324:	69 f0       	breq	.+26     	; 0x3340 <xQueueCreateMutex+0x238>
    3326:	c7 01       	movw	r24, r14
    3328:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    332c:	81 11       	cpse	r24, r1
    332e:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3332:	f8 01       	movw	r30, r16
    3334:	85 8d       	ldd	r24, Z+29	; 0x1d
    3336:	81 50       	subi	r24, 0x01	; 1
    3338:	85 8f       	std	Z+29, r24	; 0x1d
    333a:	85 8d       	ldd	r24, Z+29	; 0x1d
    333c:	18 16       	cp	r1, r24
    333e:	7c f3       	brlt	.-34     	; 0x331e <xQueueCreateMutex+0x216>
    3340:	f8 01       	movw	r30, r16
    3342:	b5 8e       	std	Z+29, r11	; 0x1d
    3344:	0f 90       	pop	r0
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    334c:	1a cf       	rjmp	.-460    	; 0x3182 <xQueueCreateMutex+0x7a>
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	0f 92       	push	r0
    3354:	f8 01       	movw	r30, r16
    3356:	86 8d       	ldd	r24, Z+30	; 0x1e
    3358:	18 16       	cp	r1, r24
    335a:	ac f4       	brge	.+42     	; 0x3386 <xQueueCreateMutex+0x27e>
    335c:	81 89       	ldd	r24, Z+17	; 0x11
    335e:	81 11       	cpse	r24, r1
    3360:	05 c0       	rjmp	.+10     	; 0x336c <xQueueCreateMutex+0x264>
    3362:	11 c0       	rjmp	.+34     	; 0x3386 <xQueueCreateMutex+0x27e>
    3364:	f8 01       	movw	r30, r16
    3366:	81 89       	ldd	r24, Z+17	; 0x11
    3368:	88 23       	and	r24, r24
    336a:	69 f0       	breq	.+26     	; 0x3386 <xQueueCreateMutex+0x27e>
    336c:	c6 01       	movw	r24, r12
    336e:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3372:	81 11       	cpse	r24, r1
    3374:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3378:	f8 01       	movw	r30, r16
    337a:	86 8d       	ldd	r24, Z+30	; 0x1e
    337c:	81 50       	subi	r24, 0x01	; 1
    337e:	86 8f       	std	Z+30, r24	; 0x1e
    3380:	86 8d       	ldd	r24, Z+30	; 0x1e
    3382:	18 16       	cp	r1, r24
    3384:	7c f3       	brlt	.-34     	; 0x3364 <xQueueCreateMutex+0x25c>
    3386:	8f ef       	ldi	r24, 0xFF	; 255
    3388:	f8 01       	movw	r30, r16
    338a:	86 8f       	std	Z+30, r24	; 0x1e
    338c:	0f 90       	pop	r0
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	0f 92       	push	r0
    3396:	85 8d       	ldd	r24, Z+29	; 0x1d
    3398:	18 16       	cp	r1, r24
    339a:	ac f4       	brge	.+42     	; 0x33c6 <xQueueCreateMutex+0x2be>
    339c:	80 85       	ldd	r24, Z+8	; 0x08
    339e:	81 11       	cpse	r24, r1
    33a0:	05 c0       	rjmp	.+10     	; 0x33ac <xQueueCreateMutex+0x2a4>
    33a2:	11 c0       	rjmp	.+34     	; 0x33c6 <xQueueCreateMutex+0x2be>
    33a4:	f8 01       	movw	r30, r16
    33a6:	80 85       	ldd	r24, Z+8	; 0x08
    33a8:	88 23       	and	r24, r24
    33aa:	69 f0       	breq	.+26     	; 0x33c6 <xQueueCreateMutex+0x2be>
    33ac:	c7 01       	movw	r24, r14
    33ae:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    33b2:	81 11       	cpse	r24, r1
    33b4:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    33b8:	f8 01       	movw	r30, r16
    33ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    33bc:	81 50       	subi	r24, 0x01	; 1
    33be:	85 8f       	std	Z+29, r24	; 0x1d
    33c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    33c2:	18 16       	cp	r1, r24
    33c4:	7c f3       	brlt	.-34     	; 0x33a4 <xQueueCreateMutex+0x29c>
    33c6:	8f ef       	ldi	r24, 0xFF	; 255
    33c8:	f8 01       	movw	r30, r16
    33ca:	85 8f       	std	Z+29, r24	; 0x1d
    33cc:	0f 90       	pop	r0
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    33d4:	09 c0       	rjmp	.+18     	; 0x33e8 <xQueueCreateMutex+0x2e0>
    33d6:	f8 01       	movw	r30, r16
    33d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    33da:	8f 5f       	subi	r24, 0xFF	; 255
    33dc:	82 8f       	std	Z+26, r24	; 0x1a
    33de:	81 89       	ldd	r24, Z+17	; 0x11
    33e0:	88 23       	and	r24, r24
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <xQueueCreateMutex+0x2de>
    33e4:	f1 ce       	rjmp	.-542    	; 0x31c8 <xQueueCreateMutex+0xc0>
    33e6:	e7 ce       	rjmp	.-562    	; 0x31b6 <xQueueCreateMutex+0xae>
    33e8:	c8 01       	movw	r24, r16
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	ff 90       	pop	r15
    33fe:	ef 90       	pop	r14
    3400:	df 90       	pop	r13
    3402:	cf 90       	pop	r12
    3404:	bf 90       	pop	r11
    3406:	af 90       	pop	r10
    3408:	9f 90       	pop	r9
    340a:	08 95       	ret

0000340c <xQueueGenericSend>:
    340c:	6f 92       	push	r6
    340e:	7f 92       	push	r7
    3410:	8f 92       	push	r8
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	00 d0       	rcall	.+0      	; 0x342a <xQueueGenericSend+0x1e>
    342a:	1f 92       	push	r1
    342c:	1f 92       	push	r1
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	8c 01       	movw	r16, r24
    3434:	5b 01       	movw	r10, r22
    3436:	5d 83       	std	Y+5, r21	; 0x05
    3438:	4c 83       	std	Y+4, r20	; 0x04
    343a:	72 2e       	mov	r7, r18
    343c:	81 2c       	mov	r8, r1
    343e:	66 24       	eor	r6, r6
    3440:	63 94       	inc	r6
    3442:	99 24       	eor	r9, r9
    3444:	9a 94       	dec	r9
    3446:	7c 01       	movw	r14, r24
    3448:	88 e0       	ldi	r24, 0x08	; 8
    344a:	e8 0e       	add	r14, r24
    344c:	f1 1c       	adc	r15, r1
    344e:	68 01       	movw	r12, r16
    3450:	e1 e1       	ldi	r30, 0x11	; 17
    3452:	ce 0e       	add	r12, r30
    3454:	d1 1c       	adc	r13, r1
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	0f 92       	push	r0
    345c:	f8 01       	movw	r30, r16
    345e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3460:	83 8d       	ldd	r24, Z+27	; 0x1b
    3462:	98 17       	cp	r25, r24
    3464:	20 f0       	brcs	.+8      	; 0x346e <xQueueGenericSend+0x62>
    3466:	f2 e0       	ldi	r31, 0x02	; 2
    3468:	7f 12       	cpse	r7, r31
    346a:	6e c0       	rjmp	.+220    	; 0x3548 <xQueueGenericSend+0x13c>
    346c:	7d c1       	rjmp	.+762    	; 0x3768 <xQueueGenericSend+0x35c>
    346e:	f8 01       	movw	r30, r16
    3470:	44 8d       	ldd	r20, Z+28	; 0x1c
    3472:	41 11       	cpse	r20, r1
    3474:	15 c0       	rjmp	.+42     	; 0x34a0 <xQueueGenericSend+0x94>
    3476:	f8 01       	movw	r30, r16
    3478:	80 81       	ld	r24, Z
    347a:	91 81       	ldd	r25, Z+1	; 0x01
    347c:	89 2b       	or	r24, r25
    347e:	09 f0       	breq	.+2      	; 0x3482 <xQueueGenericSend+0x76>
    3480:	79 c1       	rjmp	.+754    	; 0x3774 <xQueueGenericSend+0x368>
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <xTaskPriorityDisinherit>
    348a:	f8 01       	movw	r30, r16
    348c:	13 82       	std	Z+3, r1	; 0x03
    348e:	12 82       	std	Z+2, r1	; 0x02
    3490:	92 8d       	ldd	r25, Z+26	; 0x1a
    3492:	9f 5f       	subi	r25, 0xFF	; 255
    3494:	92 8f       	std	Z+26, r25	; 0x1a
    3496:	91 89       	ldd	r25, Z+17	; 0x11
    3498:	99 23       	and	r25, r25
    349a:	09 f4       	brne	.+2      	; 0x349e <xQueueGenericSend+0x92>
    349c:	4f c0       	rjmp	.+158    	; 0x353c <xQueueGenericSend+0x130>
    349e:	46 c0       	rjmp	.+140    	; 0x352c <xQueueGenericSend+0x120>
    34a0:	71 10       	cpse	r7, r1
    34a2:	1a c0       	rjmp	.+52     	; 0x34d8 <xQueueGenericSend+0xcc>
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	b5 01       	movw	r22, r10
    34a8:	f8 01       	movw	r30, r16
    34aa:	84 81       	ldd	r24, Z+4	; 0x04
    34ac:	95 81       	ldd	r25, Z+5	; 0x05
    34ae:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    34b2:	f8 01       	movw	r30, r16
    34b4:	24 8d       	ldd	r18, Z+28	; 0x1c
    34b6:	84 81       	ldd	r24, Z+4	; 0x04
    34b8:	95 81       	ldd	r25, Z+5	; 0x05
    34ba:	82 0f       	add	r24, r18
    34bc:	91 1d       	adc	r25, r1
    34be:	95 83       	std	Z+5, r25	; 0x05
    34c0:	84 83       	std	Z+4, r24	; 0x04
    34c2:	22 81       	ldd	r18, Z+2	; 0x02
    34c4:	33 81       	ldd	r19, Z+3	; 0x03
    34c6:	82 17       	cp	r24, r18
    34c8:	93 07       	cpc	r25, r19
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <xQueueGenericSend+0xc2>
    34cc:	53 c1       	rjmp	.+678    	; 0x3774 <xQueueGenericSend+0x368>
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	95 83       	std	Z+5, r25	; 0x05
    34d4:	84 83       	std	Z+4, r24	; 0x04
    34d6:	4e c1       	rjmp	.+668    	; 0x3774 <xQueueGenericSend+0x368>
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	b5 01       	movw	r22, r10
    34dc:	f8 01       	movw	r30, r16
    34de:	86 81       	ldd	r24, Z+6	; 0x06
    34e0:	97 81       	ldd	r25, Z+7	; 0x07
    34e2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    34e6:	f8 01       	movw	r30, r16
    34e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	91 95       	neg	r25
    34ee:	81 95       	neg	r24
    34f0:	91 09       	sbc	r25, r1
    34f2:	26 81       	ldd	r18, Z+6	; 0x06
    34f4:	37 81       	ldd	r19, Z+7	; 0x07
    34f6:	28 0f       	add	r18, r24
    34f8:	39 1f       	adc	r19, r25
    34fa:	37 83       	std	Z+7, r19	; 0x07
    34fc:	26 83       	std	Z+6, r18	; 0x06
    34fe:	40 81       	ld	r20, Z
    3500:	51 81       	ldd	r21, Z+1	; 0x01
    3502:	24 17       	cp	r18, r20
    3504:	35 07       	cpc	r19, r21
    3506:	30 f4       	brcc	.+12     	; 0x3514 <xQueueGenericSend+0x108>
    3508:	22 81       	ldd	r18, Z+2	; 0x02
    350a:	33 81       	ldd	r19, Z+3	; 0x03
    350c:	82 0f       	add	r24, r18
    350e:	93 1f       	adc	r25, r19
    3510:	97 83       	std	Z+7, r25	; 0x07
    3512:	86 83       	std	Z+6, r24	; 0x06
    3514:	f2 e0       	ldi	r31, 0x02	; 2
    3516:	7f 12       	cpse	r7, r31
    3518:	2d c1       	rjmp	.+602    	; 0x3774 <xQueueGenericSend+0x368>
    351a:	f8 01       	movw	r30, r16
    351c:	82 8d       	ldd	r24, Z+26	; 0x1a
    351e:	88 23       	and	r24, r24
    3520:	09 f4       	brne	.+2      	; 0x3524 <xQueueGenericSend+0x118>
    3522:	28 c1       	rjmp	.+592    	; 0x3774 <xQueueGenericSend+0x368>
    3524:	82 8d       	ldd	r24, Z+26	; 0x1a
    3526:	81 50       	subi	r24, 0x01	; 1
    3528:	82 8f       	std	Z+26, r24	; 0x1a
    352a:	24 c1       	rjmp	.+584    	; 0x3774 <xQueueGenericSend+0x368>
    352c:	c8 01       	movw	r24, r16
    352e:	41 96       	adiw	r24, 0x11	; 17
    3530:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3534:	81 30       	cpi	r24, 0x01	; 1
    3536:	21 f4       	brne	.+8      	; 0x3540 <xQueueGenericSend+0x134>
    3538:	ba dc       	rcall	.-1676   	; 0x2eae <vPortYield>
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <xQueueGenericSend+0x134>
    353c:	81 11       	cpse	r24, r1
    353e:	b7 dc       	rcall	.-1682   	; 0x2eae <vPortYield>
    3540:	0f 90       	pop	r0
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	1e c1       	rjmp	.+572    	; 0x3784 <xQueueGenericSend+0x378>
    3548:	8c 81       	ldd	r24, Y+4	; 0x04
    354a:	9d 81       	ldd	r25, Y+5	; 0x05
    354c:	89 2b       	or	r24, r25
    354e:	21 f4       	brne	.+8      	; 0x3558 <xQueueGenericSend+0x14c>
    3550:	0f 90       	pop	r0
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	16 c1       	rjmp	.+556    	; 0x3784 <xQueueGenericSend+0x378>
    3558:	81 10       	cpse	r8, r1
    355a:	05 c0       	rjmp	.+10     	; 0x3566 <xQueueGenericSend+0x15a>
    355c:	ce 01       	movw	r24, r28
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	0e 94 3b 2a 	call	0x5476	; 0x5476 <vTaskSetTimeOutState>
    3564:	86 2c       	mov	r8, r6
    3566:	0f 90       	pop	r0
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	0f 92       	push	r0
    3574:	f8 01       	movw	r30, r16
    3576:	85 8d       	ldd	r24, Z+29	; 0x1d
    3578:	8f 3f       	cpi	r24, 0xFF	; 255
    357a:	09 f4       	brne	.+2      	; 0x357e <xQueueGenericSend+0x172>
    357c:	15 8e       	std	Z+29, r1	; 0x1d
    357e:	f8 01       	movw	r30, r16
    3580:	86 8d       	ldd	r24, Z+30	; 0x1e
    3582:	8f 3f       	cpi	r24, 0xFF	; 255
    3584:	09 f4       	brne	.+2      	; 0x3588 <xQueueGenericSend+0x17c>
    3586:	16 8e       	std	Z+30, r1	; 0x1e
    3588:	0f 90       	pop	r0
    358a:	0f be       	out	0x3f, r0	; 63
    358c:	be 01       	movw	r22, r28
    358e:	6c 5f       	subi	r22, 0xFC	; 252
    3590:	7f 4f       	sbci	r23, 0xFF	; 255
    3592:	ce 01       	movw	r24, r28
    3594:	01 96       	adiw	r24, 0x01	; 1
    3596:	0e 94 46 2a 	call	0x548c	; 0x548c <xTaskCheckForTimeOut>
    359a:	81 11       	cpse	r24, r1
    359c:	96 c0       	rjmp	.+300    	; 0x36ca <xQueueGenericSend+0x2be>
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	0f 92       	push	r0
    35a4:	f8 01       	movw	r30, r16
    35a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    35a8:	83 8d       	ldd	r24, Z+27	; 0x1b
    35aa:	0f 90       	pop	r0
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	98 13       	cpse	r25, r24
    35b0:	4a c0       	rjmp	.+148    	; 0x3646 <xQueueGenericSend+0x23a>
    35b2:	6c 81       	ldd	r22, Y+4	; 0x04
    35b4:	7d 81       	ldd	r23, Y+5	; 0x05
    35b6:	c7 01       	movw	r24, r14
    35b8:	0e 94 98 29 	call	0x5330	; 0x5330 <vTaskPlaceOnEventList>
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	0f 92       	push	r0
    35c2:	f8 01       	movw	r30, r16
    35c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    35c6:	18 16       	cp	r1, r24
    35c8:	ac f4       	brge	.+42     	; 0x35f4 <xQueueGenericSend+0x1e8>
    35ca:	81 89       	ldd	r24, Z+17	; 0x11
    35cc:	81 11       	cpse	r24, r1
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <xQueueGenericSend+0x1ce>
    35d0:	11 c0       	rjmp	.+34     	; 0x35f4 <xQueueGenericSend+0x1e8>
    35d2:	f8 01       	movw	r30, r16
    35d4:	81 89       	ldd	r24, Z+17	; 0x11
    35d6:	88 23       	and	r24, r24
    35d8:	69 f0       	breq	.+26     	; 0x35f4 <xQueueGenericSend+0x1e8>
    35da:	c6 01       	movw	r24, r12
    35dc:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    35e0:	81 11       	cpse	r24, r1
    35e2:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    35e6:	f8 01       	movw	r30, r16
    35e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    35ea:	81 50       	subi	r24, 0x01	; 1
    35ec:	86 8f       	std	Z+30, r24	; 0x1e
    35ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    35f0:	18 16       	cp	r1, r24
    35f2:	7c f3       	brlt	.-34     	; 0x35d2 <xQueueGenericSend+0x1c6>
    35f4:	f8 01       	movw	r30, r16
    35f6:	96 8e       	std	Z+30, r9	; 0x1e
    35f8:	0f 90       	pop	r0
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	0f 92       	push	r0
    3602:	85 8d       	ldd	r24, Z+29	; 0x1d
    3604:	18 16       	cp	r1, r24
    3606:	ac f4       	brge	.+42     	; 0x3632 <xQueueGenericSend+0x226>
    3608:	80 85       	ldd	r24, Z+8	; 0x08
    360a:	81 11       	cpse	r24, r1
    360c:	05 c0       	rjmp	.+10     	; 0x3618 <xQueueGenericSend+0x20c>
    360e:	11 c0       	rjmp	.+34     	; 0x3632 <xQueueGenericSend+0x226>
    3610:	f8 01       	movw	r30, r16
    3612:	80 85       	ldd	r24, Z+8	; 0x08
    3614:	88 23       	and	r24, r24
    3616:	69 f0       	breq	.+26     	; 0x3632 <xQueueGenericSend+0x226>
    3618:	c7 01       	movw	r24, r14
    361a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    361e:	81 11       	cpse	r24, r1
    3620:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3624:	f8 01       	movw	r30, r16
    3626:	85 8d       	ldd	r24, Z+29	; 0x1d
    3628:	81 50       	subi	r24, 0x01	; 1
    362a:	85 8f       	std	Z+29, r24	; 0x1d
    362c:	85 8d       	ldd	r24, Z+29	; 0x1d
    362e:	18 16       	cp	r1, r24
    3630:	7c f3       	brlt	.-34     	; 0x3610 <xQueueGenericSend+0x204>
    3632:	f8 01       	movw	r30, r16
    3634:	95 8e       	std	Z+29, r9	; 0x1d
    3636:	0f 90       	pop	r0
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    363e:	81 11       	cpse	r24, r1
    3640:	0a cf       	rjmp	.-492    	; 0x3456 <xQueueGenericSend+0x4a>
    3642:	35 dc       	rcall	.-1942   	; 0x2eae <vPortYield>
    3644:	08 cf       	rjmp	.-496    	; 0x3456 <xQueueGenericSend+0x4a>
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	0f 92       	push	r0
    364c:	f8 01       	movw	r30, r16
    364e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3650:	18 16       	cp	r1, r24
    3652:	ac f4       	brge	.+42     	; 0x367e <xQueueGenericSend+0x272>
    3654:	81 89       	ldd	r24, Z+17	; 0x11
    3656:	81 11       	cpse	r24, r1
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <xQueueGenericSend+0x258>
    365a:	11 c0       	rjmp	.+34     	; 0x367e <xQueueGenericSend+0x272>
    365c:	f8 01       	movw	r30, r16
    365e:	81 89       	ldd	r24, Z+17	; 0x11
    3660:	88 23       	and	r24, r24
    3662:	69 f0       	breq	.+26     	; 0x367e <xQueueGenericSend+0x272>
    3664:	c6 01       	movw	r24, r12
    3666:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    366a:	81 11       	cpse	r24, r1
    366c:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3670:	f8 01       	movw	r30, r16
    3672:	86 8d       	ldd	r24, Z+30	; 0x1e
    3674:	81 50       	subi	r24, 0x01	; 1
    3676:	86 8f       	std	Z+30, r24	; 0x1e
    3678:	86 8d       	ldd	r24, Z+30	; 0x1e
    367a:	18 16       	cp	r1, r24
    367c:	7c f3       	brlt	.-34     	; 0x365c <xQueueGenericSend+0x250>
    367e:	f8 01       	movw	r30, r16
    3680:	96 8e       	std	Z+30, r9	; 0x1e
    3682:	0f 90       	pop	r0
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	0f 92       	push	r0
    368c:	85 8d       	ldd	r24, Z+29	; 0x1d
    368e:	18 16       	cp	r1, r24
    3690:	ac f4       	brge	.+42     	; 0x36bc <xQueueGenericSend+0x2b0>
    3692:	80 85       	ldd	r24, Z+8	; 0x08
    3694:	81 11       	cpse	r24, r1
    3696:	05 c0       	rjmp	.+10     	; 0x36a2 <xQueueGenericSend+0x296>
    3698:	11 c0       	rjmp	.+34     	; 0x36bc <xQueueGenericSend+0x2b0>
    369a:	f8 01       	movw	r30, r16
    369c:	80 85       	ldd	r24, Z+8	; 0x08
    369e:	88 23       	and	r24, r24
    36a0:	69 f0       	breq	.+26     	; 0x36bc <xQueueGenericSend+0x2b0>
    36a2:	c7 01       	movw	r24, r14
    36a4:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    36a8:	81 11       	cpse	r24, r1
    36aa:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    36ae:	f8 01       	movw	r30, r16
    36b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    36b2:	81 50       	subi	r24, 0x01	; 1
    36b4:	85 8f       	std	Z+29, r24	; 0x1d
    36b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    36b8:	18 16       	cp	r1, r24
    36ba:	7c f3       	brlt	.-34     	; 0x369a <xQueueGenericSend+0x28e>
    36bc:	f8 01       	movw	r30, r16
    36be:	95 8e       	std	Z+29, r9	; 0x1d
    36c0:	0f 90       	pop	r0
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    36c8:	c6 ce       	rjmp	.-628    	; 0x3456 <xQueueGenericSend+0x4a>
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	0f 92       	push	r0
    36d0:	f8 01       	movw	r30, r16
    36d2:	86 8d       	ldd	r24, Z+30	; 0x1e
    36d4:	18 16       	cp	r1, r24
    36d6:	d4 f4       	brge	.+52     	; 0x370c <xQueueGenericSend+0x300>
    36d8:	81 89       	ldd	r24, Z+17	; 0x11
    36da:	81 11       	cpse	r24, r1
    36dc:	06 c0       	rjmp	.+12     	; 0x36ea <xQueueGenericSend+0x2de>
    36de:	16 c0       	rjmp	.+44     	; 0x370c <xQueueGenericSend+0x300>
    36e0:	f8 01       	movw	r30, r16
    36e2:	81 89       	ldd	r24, Z+17	; 0x11
    36e4:	81 11       	cpse	r24, r1
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <xQueueGenericSend+0x2e6>
    36e8:	11 c0       	rjmp	.+34     	; 0x370c <xQueueGenericSend+0x300>
    36ea:	78 01       	movw	r14, r16
    36ec:	f1 e1       	ldi	r31, 0x11	; 17
    36ee:	ef 0e       	add	r14, r31
    36f0:	f1 1c       	adc	r15, r1
    36f2:	c7 01       	movw	r24, r14
    36f4:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    36f8:	81 11       	cpse	r24, r1
    36fa:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    36fe:	f8 01       	movw	r30, r16
    3700:	86 8d       	ldd	r24, Z+30	; 0x1e
    3702:	81 50       	subi	r24, 0x01	; 1
    3704:	86 8f       	std	Z+30, r24	; 0x1e
    3706:	86 8d       	ldd	r24, Z+30	; 0x1e
    3708:	18 16       	cp	r1, r24
    370a:	54 f3       	brlt	.-44     	; 0x36e0 <xQueueGenericSend+0x2d4>
    370c:	8f ef       	ldi	r24, 0xFF	; 255
    370e:	f8 01       	movw	r30, r16
    3710:	86 8f       	std	Z+30, r24	; 0x1e
    3712:	0f 90       	pop	r0
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	0f 92       	push	r0
    371c:	85 8d       	ldd	r24, Z+29	; 0x1d
    371e:	18 16       	cp	r1, r24
    3720:	d4 f4       	brge	.+52     	; 0x3756 <xQueueGenericSend+0x34a>
    3722:	80 85       	ldd	r24, Z+8	; 0x08
    3724:	81 11       	cpse	r24, r1
    3726:	06 c0       	rjmp	.+12     	; 0x3734 <xQueueGenericSend+0x328>
    3728:	16 c0       	rjmp	.+44     	; 0x3756 <xQueueGenericSend+0x34a>
    372a:	f8 01       	movw	r30, r16
    372c:	80 85       	ldd	r24, Z+8	; 0x08
    372e:	81 11       	cpse	r24, r1
    3730:	05 c0       	rjmp	.+10     	; 0x373c <xQueueGenericSend+0x330>
    3732:	11 c0       	rjmp	.+34     	; 0x3756 <xQueueGenericSend+0x34a>
    3734:	78 01       	movw	r14, r16
    3736:	f8 e0       	ldi	r31, 0x08	; 8
    3738:	ef 0e       	add	r14, r31
    373a:	f1 1c       	adc	r15, r1
    373c:	c7 01       	movw	r24, r14
    373e:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3742:	81 11       	cpse	r24, r1
    3744:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3748:	f8 01       	movw	r30, r16
    374a:	85 8d       	ldd	r24, Z+29	; 0x1d
    374c:	81 50       	subi	r24, 0x01	; 1
    374e:	85 8f       	std	Z+29, r24	; 0x1d
    3750:	85 8d       	ldd	r24, Z+29	; 0x1d
    3752:	18 16       	cp	r1, r24
    3754:	54 f3       	brlt	.-44     	; 0x372a <xQueueGenericSend+0x31e>
    3756:	8f ef       	ldi	r24, 0xFF	; 255
    3758:	f8 01       	movw	r30, r16
    375a:	85 8f       	std	Z+29, r24	; 0x1d
    375c:	0f 90       	pop	r0
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	0e c0       	rjmp	.+28     	; 0x3784 <xQueueGenericSend+0x378>
    3768:	f8 01       	movw	r30, r16
    376a:	44 8d       	ldd	r20, Z+28	; 0x1c
    376c:	44 23       	and	r20, r20
    376e:	09 f4       	brne	.+2      	; 0x3772 <xQueueGenericSend+0x366>
    3770:	82 ce       	rjmp	.-764    	; 0x3476 <xQueueGenericSend+0x6a>
    3772:	b2 ce       	rjmp	.-668    	; 0x34d8 <xQueueGenericSend+0xcc>
    3774:	f8 01       	movw	r30, r16
    3776:	82 8d       	ldd	r24, Z+26	; 0x1a
    3778:	8f 5f       	subi	r24, 0xFF	; 255
    377a:	82 8f       	std	Z+26, r24	; 0x1a
    377c:	81 89       	ldd	r24, Z+17	; 0x11
    377e:	81 11       	cpse	r24, r1
    3780:	d5 ce       	rjmp	.-598    	; 0x352c <xQueueGenericSend+0x120>
    3782:	de ce       	rjmp	.-580    	; 0x3540 <xQueueGenericSend+0x134>
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	bf 90       	pop	r11
    37a0:	af 90       	pop	r10
    37a2:	9f 90       	pop	r9
    37a4:	8f 90       	pop	r8
    37a6:	7f 90       	pop	r7
    37a8:	6f 90       	pop	r6
    37aa:	08 95       	ret

000037ac <xQueueGive>:
    37ac:	9f 92       	push	r9
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	00 d0       	rcall	.+0      	; 0x37c4 <xQueueGive+0x18>
    37c4:	1f 92       	push	r1
    37c6:	1f 92       	push	r1
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	8c 01       	movw	r16, r24
    37ce:	7d 83       	std	Y+5, r23	; 0x05
    37d0:	6c 83       	std	Y+4, r22	; 0x04
    37d2:	a1 2c       	mov	r10, r1
    37d4:	99 24       	eor	r9, r9
    37d6:	93 94       	inc	r9
    37d8:	bb 24       	eor	r11, r11
    37da:	ba 94       	dec	r11
    37dc:	7c 01       	movw	r14, r24
    37de:	88 e0       	ldi	r24, 0x08	; 8
    37e0:	e8 0e       	add	r14, r24
    37e2:	f1 1c       	adc	r15, r1
    37e4:	68 01       	movw	r12, r16
    37e6:	e1 e1       	ldi	r30, 0x11	; 17
    37e8:	ce 0e       	add	r12, r30
    37ea:	d1 1c       	adc	r13, r1
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	0f 92       	push	r0
    37f2:	f8 01       	movw	r30, r16
    37f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    37f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    37f8:	98 17       	cp	r25, r24
    37fa:	00 f5       	brcc	.+64     	; 0x383c <xQueueGive+0x90>
    37fc:	80 81       	ld	r24, Z
    37fe:	91 81       	ldd	r25, Z+1	; 0x01
    3800:	89 2b       	or	r24, r25
    3802:	09 f0       	breq	.+2      	; 0x3806 <xQueueGive+0x5a>
    3804:	2b c1       	rjmp	.+598    	; 0x3a5c <xQueueGive+0x2b0>
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <xTaskPriorityDisinherit>
    380e:	f8 01       	movw	r30, r16
    3810:	13 82       	std	Z+3, r1	; 0x03
    3812:	12 82       	std	Z+2, r1	; 0x02
    3814:	92 8d       	ldd	r25, Z+26	; 0x1a
    3816:	9f 5f       	subi	r25, 0xFF	; 255
    3818:	92 8f       	std	Z+26, r25	; 0x1a
    381a:	91 89       	ldd	r25, Z+17	; 0x11
    381c:	99 23       	and	r25, r25
    381e:	41 f0       	breq	.+16     	; 0x3830 <xQueueGive+0x84>
    3820:	c8 01       	movw	r24, r16
    3822:	41 96       	adiw	r24, 0x11	; 17
    3824:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3828:	81 30       	cpi	r24, 0x01	; 1
    382a:	21 f4       	brne	.+8      	; 0x3834 <xQueueGive+0x88>
    382c:	40 db       	rcall	.-2432   	; 0x2eae <vPortYield>
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <xQueueGive+0x88>
    3830:	81 11       	cpse	r24, r1
    3832:	3d db       	rcall	.-2438   	; 0x2eae <vPortYield>
    3834:	0f 90       	pop	r0
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	18 c1       	rjmp	.+560    	; 0x3a6c <xQueueGive+0x2c0>
    383c:	8c 81       	ldd	r24, Y+4	; 0x04
    383e:	9d 81       	ldd	r25, Y+5	; 0x05
    3840:	89 2b       	or	r24, r25
    3842:	21 f4       	brne	.+8      	; 0x384c <xQueueGive+0xa0>
    3844:	0f 90       	pop	r0
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	10 c1       	rjmp	.+544    	; 0x3a6c <xQueueGive+0x2c0>
    384c:	a1 10       	cpse	r10, r1
    384e:	05 c0       	rjmp	.+10     	; 0x385a <xQueueGive+0xae>
    3850:	ce 01       	movw	r24, r28
    3852:	01 96       	adiw	r24, 0x01	; 1
    3854:	0e 94 3b 2a 	call	0x5476	; 0x5476 <vTaskSetTimeOutState>
    3858:	a9 2c       	mov	r10, r9
    385a:	0f 90       	pop	r0
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	0f 92       	push	r0
    3868:	f8 01       	movw	r30, r16
    386a:	85 8d       	ldd	r24, Z+29	; 0x1d
    386c:	8f 3f       	cpi	r24, 0xFF	; 255
    386e:	09 f4       	brne	.+2      	; 0x3872 <xQueueGive+0xc6>
    3870:	15 8e       	std	Z+29, r1	; 0x1d
    3872:	f8 01       	movw	r30, r16
    3874:	86 8d       	ldd	r24, Z+30	; 0x1e
    3876:	8f 3f       	cpi	r24, 0xFF	; 255
    3878:	09 f4       	brne	.+2      	; 0x387c <xQueueGive+0xd0>
    387a:	16 8e       	std	Z+30, r1	; 0x1e
    387c:	0f 90       	pop	r0
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	be 01       	movw	r22, r28
    3882:	6c 5f       	subi	r22, 0xFC	; 252
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	ce 01       	movw	r24, r28
    3888:	01 96       	adiw	r24, 0x01	; 1
    388a:	0e 94 46 2a 	call	0x548c	; 0x548c <xTaskCheckForTimeOut>
    388e:	81 11       	cpse	r24, r1
    3890:	96 c0       	rjmp	.+300    	; 0x39be <xQueueGive+0x212>
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	0f 92       	push	r0
    3898:	f8 01       	movw	r30, r16
    389a:	92 8d       	ldd	r25, Z+26	; 0x1a
    389c:	83 8d       	ldd	r24, Z+27	; 0x1b
    389e:	0f 90       	pop	r0
    38a0:	0f be       	out	0x3f, r0	; 63
    38a2:	98 13       	cpse	r25, r24
    38a4:	4a c0       	rjmp	.+148    	; 0x393a <xQueueGive+0x18e>
    38a6:	6c 81       	ldd	r22, Y+4	; 0x04
    38a8:	7d 81       	ldd	r23, Y+5	; 0x05
    38aa:	c7 01       	movw	r24, r14
    38ac:	0e 94 98 29 	call	0x5330	; 0x5330 <vTaskPlaceOnEventList>
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	0f 92       	push	r0
    38b6:	f8 01       	movw	r30, r16
    38b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    38ba:	18 16       	cp	r1, r24
    38bc:	ac f4       	brge	.+42     	; 0x38e8 <xQueueGive+0x13c>
    38be:	81 89       	ldd	r24, Z+17	; 0x11
    38c0:	81 11       	cpse	r24, r1
    38c2:	05 c0       	rjmp	.+10     	; 0x38ce <xQueueGive+0x122>
    38c4:	11 c0       	rjmp	.+34     	; 0x38e8 <xQueueGive+0x13c>
    38c6:	f8 01       	movw	r30, r16
    38c8:	81 89       	ldd	r24, Z+17	; 0x11
    38ca:	88 23       	and	r24, r24
    38cc:	69 f0       	breq	.+26     	; 0x38e8 <xQueueGive+0x13c>
    38ce:	c6 01       	movw	r24, r12
    38d0:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    38d4:	81 11       	cpse	r24, r1
    38d6:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    38da:	f8 01       	movw	r30, r16
    38dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    38de:	81 50       	subi	r24, 0x01	; 1
    38e0:	86 8f       	std	Z+30, r24	; 0x1e
    38e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    38e4:	18 16       	cp	r1, r24
    38e6:	7c f3       	brlt	.-34     	; 0x38c6 <xQueueGive+0x11a>
    38e8:	f8 01       	movw	r30, r16
    38ea:	b6 8e       	std	Z+30, r11	; 0x1e
    38ec:	0f 90       	pop	r0
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	0f 92       	push	r0
    38f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    38f8:	18 16       	cp	r1, r24
    38fa:	ac f4       	brge	.+42     	; 0x3926 <xQueueGive+0x17a>
    38fc:	80 85       	ldd	r24, Z+8	; 0x08
    38fe:	81 11       	cpse	r24, r1
    3900:	05 c0       	rjmp	.+10     	; 0x390c <xQueueGive+0x160>
    3902:	11 c0       	rjmp	.+34     	; 0x3926 <xQueueGive+0x17a>
    3904:	f8 01       	movw	r30, r16
    3906:	80 85       	ldd	r24, Z+8	; 0x08
    3908:	88 23       	and	r24, r24
    390a:	69 f0       	breq	.+26     	; 0x3926 <xQueueGive+0x17a>
    390c:	c7 01       	movw	r24, r14
    390e:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3912:	81 11       	cpse	r24, r1
    3914:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3918:	f8 01       	movw	r30, r16
    391a:	85 8d       	ldd	r24, Z+29	; 0x1d
    391c:	81 50       	subi	r24, 0x01	; 1
    391e:	85 8f       	std	Z+29, r24	; 0x1d
    3920:	85 8d       	ldd	r24, Z+29	; 0x1d
    3922:	18 16       	cp	r1, r24
    3924:	7c f3       	brlt	.-34     	; 0x3904 <xQueueGive+0x158>
    3926:	f8 01       	movw	r30, r16
    3928:	b5 8e       	std	Z+29, r11	; 0x1d
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    3932:	81 11       	cpse	r24, r1
    3934:	5b cf       	rjmp	.-330    	; 0x37ec <xQueueGive+0x40>
    3936:	bb da       	rcall	.-2698   	; 0x2eae <vPortYield>
    3938:	59 cf       	rjmp	.-334    	; 0x37ec <xQueueGive+0x40>
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	0f 92       	push	r0
    3940:	f8 01       	movw	r30, r16
    3942:	86 8d       	ldd	r24, Z+30	; 0x1e
    3944:	18 16       	cp	r1, r24
    3946:	ac f4       	brge	.+42     	; 0x3972 <xQueueGive+0x1c6>
    3948:	81 89       	ldd	r24, Z+17	; 0x11
    394a:	81 11       	cpse	r24, r1
    394c:	05 c0       	rjmp	.+10     	; 0x3958 <xQueueGive+0x1ac>
    394e:	11 c0       	rjmp	.+34     	; 0x3972 <xQueueGive+0x1c6>
    3950:	f8 01       	movw	r30, r16
    3952:	81 89       	ldd	r24, Z+17	; 0x11
    3954:	88 23       	and	r24, r24
    3956:	69 f0       	breq	.+26     	; 0x3972 <xQueueGive+0x1c6>
    3958:	c6 01       	movw	r24, r12
    395a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    395e:	81 11       	cpse	r24, r1
    3960:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3964:	f8 01       	movw	r30, r16
    3966:	86 8d       	ldd	r24, Z+30	; 0x1e
    3968:	81 50       	subi	r24, 0x01	; 1
    396a:	86 8f       	std	Z+30, r24	; 0x1e
    396c:	86 8d       	ldd	r24, Z+30	; 0x1e
    396e:	18 16       	cp	r1, r24
    3970:	7c f3       	brlt	.-34     	; 0x3950 <xQueueGive+0x1a4>
    3972:	f8 01       	movw	r30, r16
    3974:	b6 8e       	std	Z+30, r11	; 0x1e
    3976:	0f 90       	pop	r0
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	0f 92       	push	r0
    3980:	85 8d       	ldd	r24, Z+29	; 0x1d
    3982:	18 16       	cp	r1, r24
    3984:	ac f4       	brge	.+42     	; 0x39b0 <xQueueGive+0x204>
    3986:	80 85       	ldd	r24, Z+8	; 0x08
    3988:	81 11       	cpse	r24, r1
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <xQueueGive+0x1ea>
    398c:	11 c0       	rjmp	.+34     	; 0x39b0 <xQueueGive+0x204>
    398e:	f8 01       	movw	r30, r16
    3990:	80 85       	ldd	r24, Z+8	; 0x08
    3992:	88 23       	and	r24, r24
    3994:	69 f0       	breq	.+26     	; 0x39b0 <xQueueGive+0x204>
    3996:	c7 01       	movw	r24, r14
    3998:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    399c:	81 11       	cpse	r24, r1
    399e:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    39a2:	f8 01       	movw	r30, r16
    39a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    39a6:	81 50       	subi	r24, 0x01	; 1
    39a8:	85 8f       	std	Z+29, r24	; 0x1d
    39aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    39ac:	18 16       	cp	r1, r24
    39ae:	7c f3       	brlt	.-34     	; 0x398e <xQueueGive+0x1e2>
    39b0:	f8 01       	movw	r30, r16
    39b2:	b5 8e       	std	Z+29, r11	; 0x1d
    39b4:	0f 90       	pop	r0
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    39bc:	17 cf       	rjmp	.-466    	; 0x37ec <xQueueGive+0x40>
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	0f 92       	push	r0
    39c4:	f8 01       	movw	r30, r16
    39c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    39c8:	18 16       	cp	r1, r24
    39ca:	d4 f4       	brge	.+52     	; 0x3a00 <xQueueGive+0x254>
    39cc:	81 89       	ldd	r24, Z+17	; 0x11
    39ce:	81 11       	cpse	r24, r1
    39d0:	06 c0       	rjmp	.+12     	; 0x39de <xQueueGive+0x232>
    39d2:	16 c0       	rjmp	.+44     	; 0x3a00 <xQueueGive+0x254>
    39d4:	f8 01       	movw	r30, r16
    39d6:	81 89       	ldd	r24, Z+17	; 0x11
    39d8:	81 11       	cpse	r24, r1
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <xQueueGive+0x23a>
    39dc:	11 c0       	rjmp	.+34     	; 0x3a00 <xQueueGive+0x254>
    39de:	78 01       	movw	r14, r16
    39e0:	f1 e1       	ldi	r31, 0x11	; 17
    39e2:	ef 0e       	add	r14, r31
    39e4:	f1 1c       	adc	r15, r1
    39e6:	c7 01       	movw	r24, r14
    39e8:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    39ec:	81 11       	cpse	r24, r1
    39ee:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    39f2:	f8 01       	movw	r30, r16
    39f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    39f6:	81 50       	subi	r24, 0x01	; 1
    39f8:	86 8f       	std	Z+30, r24	; 0x1e
    39fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    39fc:	18 16       	cp	r1, r24
    39fe:	54 f3       	brlt	.-44     	; 0x39d4 <xQueueGive+0x228>
    3a00:	8f ef       	ldi	r24, 0xFF	; 255
    3a02:	f8 01       	movw	r30, r16
    3a04:	86 8f       	std	Z+30, r24	; 0x1e
    3a06:	0f 90       	pop	r0
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	0f 92       	push	r0
    3a10:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a12:	18 16       	cp	r1, r24
    3a14:	d4 f4       	brge	.+52     	; 0x3a4a <xQueueGive+0x29e>
    3a16:	80 85       	ldd	r24, Z+8	; 0x08
    3a18:	81 11       	cpse	r24, r1
    3a1a:	06 c0       	rjmp	.+12     	; 0x3a28 <xQueueGive+0x27c>
    3a1c:	16 c0       	rjmp	.+44     	; 0x3a4a <xQueueGive+0x29e>
    3a1e:	f8 01       	movw	r30, r16
    3a20:	80 85       	ldd	r24, Z+8	; 0x08
    3a22:	81 11       	cpse	r24, r1
    3a24:	05 c0       	rjmp	.+10     	; 0x3a30 <xQueueGive+0x284>
    3a26:	11 c0       	rjmp	.+34     	; 0x3a4a <xQueueGive+0x29e>
    3a28:	78 01       	movw	r14, r16
    3a2a:	f8 e0       	ldi	r31, 0x08	; 8
    3a2c:	ef 0e       	add	r14, r31
    3a2e:	f1 1c       	adc	r15, r1
    3a30:	c7 01       	movw	r24, r14
    3a32:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3a36:	81 11       	cpse	r24, r1
    3a38:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
    3a3c:	f8 01       	movw	r30, r16
    3a3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a40:	81 50       	subi	r24, 0x01	; 1
    3a42:	85 8f       	std	Z+29, r24	; 0x1d
    3a44:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a46:	18 16       	cp	r1, r24
    3a48:	54 f3       	brlt	.-44     	; 0x3a1e <xQueueGive+0x272>
    3a4a:	8f ef       	ldi	r24, 0xFF	; 255
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	85 8f       	std	Z+29, r24	; 0x1d
    3a50:	0f 90       	pop	r0
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	08 c0       	rjmp	.+16     	; 0x3a6c <xQueueGive+0x2c0>
    3a5c:	f8 01       	movw	r30, r16
    3a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a60:	8f 5f       	subi	r24, 0xFF	; 255
    3a62:	82 8f       	std	Z+26, r24	; 0x1a
    3a64:	81 89       	ldd	r24, Z+17	; 0x11
    3a66:	81 11       	cpse	r24, r1
    3a68:	db ce       	rjmp	.-586    	; 0x3820 <xQueueGive+0x74>
    3a6a:	e4 ce       	rjmp	.-568    	; 0x3834 <xQueueGive+0x88>
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
    3a76:	df 91       	pop	r29
    3a78:	cf 91       	pop	r28
    3a7a:	1f 91       	pop	r17
    3a7c:	0f 91       	pop	r16
    3a7e:	ff 90       	pop	r15
    3a80:	ef 90       	pop	r14
    3a82:	df 90       	pop	r13
    3a84:	cf 90       	pop	r12
    3a86:	bf 90       	pop	r11
    3a88:	af 90       	pop	r10
    3a8a:	9f 90       	pop	r9
    3a8c:	08 95       	ret

00003a8e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3a94:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a96:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a98:	98 17       	cp	r25, r24
    3a9a:	d0 f4       	brcc	.+52     	; 0x3ad0 <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3a9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a9e:	8f 5f       	subi	r24, 0xFF	; 255
    3aa0:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3aa2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3aa4:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa6:	79 f4       	brne	.+30     	; 0x3ac6 <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3aa8:	81 89       	ldd	r24, Z+17	; 0x11
    3aaa:	88 23       	and	r24, r24
    3aac:	99 f0       	breq	.+38     	; 0x3ad4 <xQueueGiveFromISR+0x46>
    3aae:	eb 01       	movw	r28, r22
    3ab0:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ab2:	41 96       	adiw	r24, 0x11	; 17
    3ab4:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3ab8:	88 23       	and	r24, r24
    3aba:	71 f0       	breq	.+28     	; 0x3ad8 <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3abc:	20 97       	sbiw	r28, 0x00	; 0
    3abe:	71 f0       	breq	.+28     	; 0x3adc <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	88 83       	st	Y, r24
    3ac4:	0c c0       	rjmp	.+24     	; 0x3ade <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3ac6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ac8:	8f 5f       	subi	r24, 0xFF	; 255
    3aca:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	07 c0       	rjmp	.+14     	; 0x3ade <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	03 c0       	rjmp	.+6      	; 0x3ade <xQueueGiveFromISR+0x50>
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <xQueueGiveFromISR+0x50>
    3adc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	08 95       	ret

00003ae4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3ae4:	6f 92       	push	r6
    3ae6:	7f 92       	push	r7
    3ae8:	8f 92       	push	r8
    3aea:	9f 92       	push	r9
    3aec:	af 92       	push	r10
    3aee:	bf 92       	push	r11
    3af0:	cf 92       	push	r12
    3af2:	df 92       	push	r13
    3af4:	ef 92       	push	r14
    3af6:	ff 92       	push	r15
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <xQueueGenericReceive+0x1e>
    3b02:	1f 92       	push	r1
    3b04:	1f 92       	push	r1
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	8c 01       	movw	r16, r24
    3b0c:	5b 01       	movw	r10, r22
    3b0e:	5d 83       	std	Y+5, r21	; 0x05
    3b10:	4c 83       	std	Y+4, r20	; 0x04
    3b12:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3b14:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3b16:	77 24       	eor	r7, r7
    3b18:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3b1a:	99 24       	eor	r9, r9
    3b1c:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3b1e:	6c 01       	movw	r12, r24
    3b20:	88 e0       	ldi	r24, 0x08	; 8
    3b22:	c8 0e       	add	r12, r24
    3b24:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b26:	78 01       	movw	r14, r16
    3b28:	e1 e1       	ldi	r30, 0x11	; 17
    3b2a:	ee 0e       	add	r14, r30
    3b2c:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3b34:	f8 01       	movw	r30, r16
    3b36:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b38:	88 23       	and	r24, r24
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <xQueueGenericReceive+0x5a>
    3b3c:	45 c0       	rjmp	.+138    	; 0x3bc8 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3b3e:	e6 80       	ldd	r14, Z+6	; 0x06
    3b40:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3b42:	44 8d       	ldd	r20, Z+28	; 0x1c
    3b44:	44 23       	and	r20, r20
    3b46:	a9 f0       	breq	.+42     	; 0x3b72 <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3b48:	50 e0       	ldi	r21, 0x00	; 0
    3b4a:	c7 01       	movw	r24, r14
    3b4c:	84 0f       	add	r24, r20
    3b4e:	95 1f       	adc	r25, r21
    3b50:	97 83       	std	Z+7, r25	; 0x07
    3b52:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3b54:	22 81       	ldd	r18, Z+2	; 0x02
    3b56:	33 81       	ldd	r19, Z+3	; 0x03
    3b58:	82 17       	cp	r24, r18
    3b5a:	93 07       	cpc	r25, r19
    3b5c:	20 f0       	brcs	.+8      	; 0x3b66 <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	97 83       	std	Z+7, r25	; 0x07
    3b64:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3b66:	f8 01       	movw	r30, r16
    3b68:	66 81       	ldd	r22, Z+6	; 0x06
    3b6a:	77 81       	ldd	r23, Z+7	; 0x07
    3b6c:	c5 01       	movw	r24, r10
    3b6e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3b72:	61 10       	cpse	r6, r1
    3b74:	19 c0       	rjmp	.+50     	; 0x3ba8 <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3b76:	f8 01       	movw	r30, r16
    3b78:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b7a:	81 50       	subi	r24, 0x01	; 1
    3b7c:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	89 2b       	or	r24, r25
    3b84:	29 f4       	brne	.+10     	; 0x3b90 <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3b86:	0e 94 2c 2b 	call	0x5658	; 0x5658 <pvTaskIncrementMutexHeldCount>
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	93 83       	std	Z+3, r25	; 0x03
    3b8e:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3b90:	f8 01       	movw	r30, r16
    3b92:	80 85       	ldd	r24, Z+8	; 0x08
    3b94:	88 23       	and	r24, r24
    3b96:	a1 f0       	breq	.+40     	; 0x3bc0 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3b98:	c8 01       	movw	r24, r16
    3b9a:	08 96       	adiw	r24, 0x08	; 8
    3b9c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3ba0:	81 30       	cpi	r24, 0x01	; 1
    3ba2:	71 f4       	brne	.+28     	; 0x3bc0 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3ba4:	84 d9       	rcall	.-3320   	; 0x2eae <vPortYield>
    3ba6:	0c c0       	rjmp	.+24     	; 0x3bc0 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3ba8:	f8 01       	movw	r30, r16
    3baa:	f7 82       	std	Z+7, r15	; 0x07
    3bac:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3bae:	81 89       	ldd	r24, Z+17	; 0x11
    3bb0:	88 23       	and	r24, r24
    3bb2:	31 f0       	breq	.+12     	; 0x3bc0 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	41 96       	adiw	r24, 0x11	; 17
    3bb8:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3bbc:	81 11       	cpse	r24, r1
    3bbe:	77 d9       	rcall	.-3346   	; 0x2eae <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3bc0:	0f 90       	pop	r0
    3bc2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	1b c1       	rjmp	.+566    	; 0x3dfe <xQueueGenericReceive+0x31a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bca:	9d 81       	ldd	r25, Y+5	; 0x05
    3bcc:	89 2b       	or	r24, r25
    3bce:	21 f4       	brne	.+8      	; 0x3bd8 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	13 c1       	rjmp	.+550    	; 0x3dfe <xQueueGenericReceive+0x31a>
				}
				else if( xEntryTimeSet == pdFALSE )
    3bd8:	81 10       	cpse	r8, r1
    3bda:	05 c0       	rjmp	.+10     	; 0x3be6 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3bdc:	ce 01       	movw	r24, r28
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	0e 94 3b 2a 	call	0x5476	; 0x5476 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3be4:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3be6:	0f 90       	pop	r0
    3be8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3bea:	0e 94 04 27 	call	0x4e08	; 0x4e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	f8 94       	cli
    3bf2:	0f 92       	push	r0
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bfa:	09 f4       	brne	.+2      	; 0x3bfe <xQueueGenericReceive+0x11a>
    3bfc:	15 8e       	std	Z+29, r1	; 0x1d
    3bfe:	f8 01       	movw	r30, r16
    3c00:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c02:	8f 3f       	cpi	r24, 0xFF	; 255
    3c04:	09 f4       	brne	.+2      	; 0x3c08 <xQueueGenericReceive+0x124>
    3c06:	16 8e       	std	Z+30, r1	; 0x1e
    3c08:	0f 90       	pop	r0
    3c0a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c0c:	be 01       	movw	r22, r28
    3c0e:	6c 5f       	subi	r22, 0xFC	; 252
    3c10:	7f 4f       	sbci	r23, 0xFF	; 255
    3c12:	ce 01       	movw	r24, r28
    3c14:	01 96       	adiw	r24, 0x01	; 1
    3c16:	0e 94 46 2a 	call	0x548c	; 0x548c <xTaskCheckForTimeOut>
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	a2 c0       	rjmp	.+324    	; 0x3d62 <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3c24:	f8 01       	movw	r30, r16
    3c26:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3c28:	0f 90       	pop	r0
    3c2a:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3c2c:	81 11       	cpse	r24, r1
    3c2e:	57 c0       	rjmp	.+174    	; 0x3cde <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3c30:	80 81       	ld	r24, Z
    3c32:	91 81       	ldd	r25, Z+1	; 0x01
    3c34:	89 2b       	or	r24, r25
    3c36:	49 f4       	brne	.+18     	; 0x3c4a <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3c3e:	82 81       	ldd	r24, Z+2	; 0x02
    3c40:	93 81       	ldd	r25, Z+3	; 0x03
    3c42:	0e 94 8a 2a 	call	0x5514	; 0x5514 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3c46:	0f 90       	pop	r0
    3c48:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3c4a:	6c 81       	ldd	r22, Y+4	; 0x04
    3c4c:	7d 81       	ldd	r23, Y+5	; 0x05
    3c4e:	c7 01       	movw	r24, r14
    3c50:	0e 94 98 29 	call	0x5330	; 0x5330 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3c5a:	f8 01       	movw	r30, r16
    3c5c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c5e:	18 16       	cp	r1, r24
    3c60:	ac f4       	brge	.+42     	; 0x3c8c <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c62:	81 89       	ldd	r24, Z+17	; 0x11
    3c64:	81 11       	cpse	r24, r1
    3c66:	05 c0       	rjmp	.+10     	; 0x3c72 <xQueueGenericReceive+0x18e>
    3c68:	11 c0       	rjmp	.+34     	; 0x3c8c <xQueueGenericReceive+0x1a8>
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	81 89       	ldd	r24, Z+17	; 0x11
    3c6e:	88 23       	and	r24, r24
    3c70:	69 f0       	breq	.+26     	; 0x3c8c <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c72:	c7 01       	movw	r24, r14
    3c74:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3c78:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3c7a:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3c7e:	f8 01       	movw	r30, r16
    3c80:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c82:	81 50       	subi	r24, 0x01	; 1
    3c84:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3c86:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c88:	18 16       	cp	r1, r24
    3c8a:	7c f3       	brlt	.-34     	; 0x3c6a <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3c90:	0f 90       	pop	r0
    3c92:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3c9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c9c:	18 16       	cp	r1, r24
    3c9e:	ac f4       	brge	.+42     	; 0x3cca <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3ca0:	80 85       	ldd	r24, Z+8	; 0x08
    3ca2:	81 11       	cpse	r24, r1
    3ca4:	05 c0       	rjmp	.+10     	; 0x3cb0 <xQueueGenericReceive+0x1cc>
    3ca6:	11 c0       	rjmp	.+34     	; 0x3cca <xQueueGenericReceive+0x1e6>
    3ca8:	f8 01       	movw	r30, r16
    3caa:	80 85       	ldd	r24, Z+8	; 0x08
    3cac:	88 23       	and	r24, r24
    3cae:	69 f0       	breq	.+26     	; 0x3cca <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3cb0:	c6 01       	movw	r24, r12
    3cb2:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3cb6:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3cb8:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3cbc:	f8 01       	movw	r30, r16
    3cbe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cc0:	81 50       	subi	r24, 0x01	; 1
    3cc2:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3cc4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cc6:	18 16       	cp	r1, r24
    3cc8:	7c f3       	brlt	.-34     	; 0x3ca8 <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3cca:	f8 01       	movw	r30, r16
    3ccc:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3cce:	0f 90       	pop	r0
    3cd0:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3cd2:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    3cd6:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3cd8:	2a cf       	rjmp	.-428    	; 0x3b2e <xQueueGenericReceive+0x4a>
    3cda:	e9 d8       	rcall	.-3630   	; 0x2eae <vPortYield>
    3cdc:	28 cf       	rjmp	.-432    	; 0x3b2e <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3ce4:	f8 01       	movw	r30, r16
    3ce6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ce8:	18 16       	cp	r1, r24
    3cea:	ac f4       	brge	.+42     	; 0x3d16 <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3cec:	81 89       	ldd	r24, Z+17	; 0x11
    3cee:	81 11       	cpse	r24, r1
    3cf0:	05 c0       	rjmp	.+10     	; 0x3cfc <xQueueGenericReceive+0x218>
    3cf2:	11 c0       	rjmp	.+34     	; 0x3d16 <xQueueGenericReceive+0x232>
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	81 89       	ldd	r24, Z+17	; 0x11
    3cf8:	88 23       	and	r24, r24
    3cfa:	69 f0       	breq	.+26     	; 0x3d16 <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cfc:	c7 01       	movw	r24, r14
    3cfe:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3d02:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3d04:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d08:	f8 01       	movw	r30, r16
    3d0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d0c:	81 50       	subi	r24, 0x01	; 1
    3d0e:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d10:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d12:	18 16       	cp	r1, r24
    3d14:	7c f3       	brlt	.-34     	; 0x3cf4 <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d16:	f8 01       	movw	r30, r16
    3d18:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3d1a:	0f 90       	pop	r0
    3d1c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d24:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d26:	18 16       	cp	r1, r24
    3d28:	ac f4       	brge	.+42     	; 0x3d54 <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d2a:	80 85       	ldd	r24, Z+8	; 0x08
    3d2c:	81 11       	cpse	r24, r1
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <xQueueGenericReceive+0x256>
    3d30:	11 c0       	rjmp	.+34     	; 0x3d54 <xQueueGenericReceive+0x270>
    3d32:	f8 01       	movw	r30, r16
    3d34:	80 85       	ldd	r24, Z+8	; 0x08
    3d36:	88 23       	and	r24, r24
    3d38:	69 f0       	breq	.+26     	; 0x3d54 <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d3a:	c6 01       	movw	r24, r12
    3d3c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3d40:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3d42:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3d46:	f8 01       	movw	r30, r16
    3d48:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d4a:	81 50       	subi	r24, 0x01	; 1
    3d4c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d50:	18 16       	cp	r1, r24
    3d52:	7c f3       	brlt	.-34     	; 0x3d32 <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d54:	f8 01       	movw	r30, r16
    3d56:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d58:	0f 90       	pop	r0
    3d5a:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3d5c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
    3d60:	e6 ce       	rjmp	.-564    	; 0x3b2e <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d68:	f8 01       	movw	r30, r16
    3d6a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d6c:	18 16       	cp	r1, r24
    3d6e:	d4 f4       	brge	.+52     	; 0x3da4 <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d70:	81 89       	ldd	r24, Z+17	; 0x11
    3d72:	81 11       	cpse	r24, r1
    3d74:	06 c0       	rjmp	.+12     	; 0x3d82 <xQueueGenericReceive+0x29e>
    3d76:	16 c0       	rjmp	.+44     	; 0x3da4 <xQueueGenericReceive+0x2c0>
    3d78:	f8 01       	movw	r30, r16
    3d7a:	81 89       	ldd	r24, Z+17	; 0x11
    3d7c:	81 11       	cpse	r24, r1
    3d7e:	05 c0       	rjmp	.+10     	; 0x3d8a <xQueueGenericReceive+0x2a6>
    3d80:	11 c0       	rjmp	.+34     	; 0x3da4 <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d82:	78 01       	movw	r14, r16
    3d84:	f1 e1       	ldi	r31, 0x11	; 17
    3d86:	ef 0e       	add	r14, r31
    3d88:	f1 1c       	adc	r15, r1
    3d8a:	c7 01       	movw	r24, r14
    3d8c:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3d90:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3d92:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d96:	f8 01       	movw	r30, r16
    3d98:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d9e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3da0:	18 16       	cp	r1, r24
    3da2:	54 f3       	brlt	.-44     	; 0x3d78 <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3da4:	8f ef       	ldi	r24, 0xFF	; 255
    3da6:	f8 01       	movw	r30, r16
    3da8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3daa:	0f 90       	pop	r0
    3dac:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3db4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db6:	18 16       	cp	r1, r24
    3db8:	d4 f4       	brge	.+52     	; 0x3dee <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3dba:	80 85       	ldd	r24, Z+8	; 0x08
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	06 c0       	rjmp	.+12     	; 0x3dcc <xQueueGenericReceive+0x2e8>
    3dc0:	16 c0       	rjmp	.+44     	; 0x3dee <xQueueGenericReceive+0x30a>
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	80 85       	ldd	r24, Z+8	; 0x08
    3dc6:	81 11       	cpse	r24, r1
    3dc8:	05 c0       	rjmp	.+10     	; 0x3dd4 <xQueueGenericReceive+0x2f0>
    3dca:	11 c0       	rjmp	.+34     	; 0x3dee <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3dcc:	78 01       	movw	r14, r16
    3dce:	f8 e0       	ldi	r31, 0x08	; 8
    3dd0:	ef 0e       	add	r14, r31
    3dd2:	f1 1c       	adc	r15, r1
    3dd4:	c7 01       	movw	r24, r14
    3dd6:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <xTaskRemoveFromEventList>
    3dda:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3ddc:	0e 94 81 2a 	call	0x5502	; 0x5502 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3de0:	f8 01       	movw	r30, r16
    3de2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3de4:	81 50       	subi	r24, 0x01	; 1
    3de6:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3de8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3dea:	18 16       	cp	r1, r24
    3dec:	54 f3       	brlt	.-44     	; 0x3dc2 <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3dee:	8f ef       	ldi	r24, 0xFF	; 255
    3df0:	f8 01       	movw	r30, r16
    3df2:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3df4:	0f 90       	pop	r0
    3df6:	0f be       	out	0x3f, r0	; 63
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    3df8:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	0f 90       	pop	r0
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	1f 91       	pop	r17
    3e0e:	0f 91       	pop	r16
    3e10:	ff 90       	pop	r15
    3e12:	ef 90       	pop	r14
    3e14:	df 90       	pop	r13
    3e16:	cf 90       	pop	r12
    3e18:	bf 90       	pop	r11
    3e1a:	af 90       	pop	r10
    3e1c:	9f 90       	pop	r9
    3e1e:	8f 90       	pop	r8
    3e20:	7f 90       	pop	r7
    3e22:	6f 90       	pop	r6
    3e24:	08 95       	ret

00003e26 <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    3e26:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	11 f4       	brne	.+4      	; 0x3e30 <server_receiver+0xa>
      gHandshook = 0;
    3e2c:	10 92 2e 1a 	sts	0x1A2E, r1	; 0x801a2e <gHandshook>
  }
  memcpy(&message_in, data, len);
    3e30:	bc 01       	movw	r22, r24
    3e32:	83 ea       	ldi	r24, 0xA3	; 163
    3e34:	9b e1       	ldi	r25, 0x1B	; 27
    3e36:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    3e3a:	60 e0       	ldi	r22, 0x00	; 0
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	80 91 9f 1b 	lds	r24, 0x1B9F	; 0x801b9f <xCommandReadyBSem>
    3e42:	90 91 a0 1b 	lds	r25, 0x1BA0	; 0x801ba0 <xCommandReadyBSem+0x1>
    3e46:	b2 cc       	rjmp	.-1692   	; 0x37ac <xQueueGive>
    3e48:	08 95       	ret

00003e4a <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    3e4a:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <connected>
    3e4e:	81 11       	cpse	r24, r1
    3e50:	04 c0       	rjmp	.+8      	; 0x3e5a <server_communication_init+0x10>
  server_connection = arq_new_connection();
    3e52:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    3e56:	80 93 d9 1b 	sts	0x1BD9, r24	; 0x801bd9 <server_connection>
    3e5a:	08 95       	ret

00003e5c <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    3e5c:	28 ee       	ldi	r18, 0xE8	; 232
    3e5e:	33 e0       	ldi	r19, 0x03	; 3
    3e60:	43 e1       	ldi	r20, 0x13	; 19
    3e62:	5f e1       	ldi	r21, 0x1F	; 31
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    3e6a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    3e6e:	80 93 3b 1a 	sts	0x1A3B, r24	; 0x801a3b <connected>
  return connected;
}
    3e72:	08 95       	ret

00003e74 <debug>:
  debug("Send idle");
  uint8_t status = TYPE_IDLE;
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}
void debug(const char *fmt, ...) {
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	cd b7       	in	r28, 0x3d	; 61
    3e7a:	de b7       	in	r29, 0x3e	; 62
    3e7c:	c4 56       	subi	r28, 0x64	; 100
    3e7e:	d1 09       	sbc	r29, r1
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	de bf       	out	0x3e, r29	; 62
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	cd bf       	out	0x3d, r28	; 61
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	46 59       	subi	r20, 0x96	; 150
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	fa 01       	movw	r30, r20
    3e92:	61 91       	ld	r22, Z+
    3e94:	71 91       	ld	r23, Z+
    3e96:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    3e98:	8a e0       	ldi	r24, 0x0A	; 10
    3e9a:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	02 96       	adiw	r24, 0x02	; 2
    3ea0:	0e 94 76 37 	call	0x6eec	; 0x6eec <vsprintf>
	va_end(ap);
	if (ret > 0) {
    3ea4:	88 23       	and	r24, r24
    3ea6:	c9 f0       	breq	.+50     	; 0x3eda <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    3ea8:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    3eac:	22 23       	and	r18, r18
    3eae:	61 f0       	breq	.+24     	; 0x3ec8 <debug+0x54>
    3eb0:	99 27       	eor	r25, r25
    3eb2:	ac 01       	movw	r20, r24
    3eb4:	4f 5f       	subi	r20, 0xFF	; 255
    3eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb8:	be 01       	movw	r22, r28
    3eba:	6f 5f       	subi	r22, 0xFF	; 255
    3ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ebe:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    3ec2:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    3ec6:	09 c0       	rjmp	.+18     	; 0x3eda <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    3ec8:	99 27       	eor	r25, r25
    3eca:	ac 01       	movw	r20, r24
    3ecc:	4f 5f       	subi	r20, 0xFF	; 255
    3ece:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed0:	be 01       	movw	r22, r28
    3ed2:	6f 5f       	subi	r22, 0xFF	; 255
    3ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed6:	80 e0       	ldi	r24, 0x00	; 0
    3ed8:	e3 d1       	rcall	.+966    	; 0x42a0 <simple_p_send>
	}
}
    3eda:	cc 59       	subi	r28, 0x9C	; 156
    3edc:	df 4f       	sbci	r29, 0xFF	; 255
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	08 95       	ret

00003eee <send_handshake>:
uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
  return connected;
}

uint8_t send_handshake(void) {
    3eee:	cf 93       	push	r28
    3ef0:	df 93       	push	r29
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	ec 97       	sbiw	r28, 0x3c	; 60
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    3f02:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <connected>
    3f06:	88 23       	and	r24, r24
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <send_handshake+0x1e>
    3f0a:	55 c0       	rjmp	.+170    	; 0x3fb6 <send_handshake+0xc8>
  debug("Send handshake");
    3f0c:	85 e7       	ldi	r24, 0x75	; 117
    3f0e:	96 e0       	ldi	r25, 0x06	; 6
    3f10:	9f 93       	push	r25
    3f12:	8f 93       	push	r24
    3f14:	af df       	rcall	.-162    	; 0x3e74 <debug>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    3f16:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    3f18:	87 e0       	ldi	r24, 0x07	; 7
    3f1a:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    3f1c:	88 e0       	ldi	r24, 0x08	; 8
    3f1e:	e4 e8       	ldi	r30, 0x84	; 132
    3f20:	f6 e0       	ldi	r31, 0x06	; 6
    3f22:	de 01       	movw	r26, r28
    3f24:	13 96       	adiw	r26, 0x03	; 3
    3f26:	01 90       	ld	r0, Z+
    3f28:	0d 92       	st	X+, r0
    3f2a:	8a 95       	dec	r24
    3f2c:	e1 f7       	brne	.-8      	; 0x3f26 <send_handshake+0x38>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    3f2e:	24 eb       	ldi	r18, 0xB4	; 180
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	3b 87       	std	Y+11, r19	; 0x0b
    3f34:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    3f36:	85 ef       	ldi	r24, 0xF5	; 245
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	9d 87       	std	Y+13, r25	; 0x0d
    3f3c:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    3f3e:	88 e3       	ldi	r24, 0x38	; 56
    3f40:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    3f42:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    3f44:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    3f46:	85 e1       	ldi	r24, 0x15	; 21
    3f48:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    3f4a:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    3f4c:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    3f4e:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    3f50:	1e 8a       	std	Y+22, r1	; 0x16
    3f52:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    3f54:	8a e5       	ldi	r24, 0x5A	; 90
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	98 8f       	std	Y+24, r25	; 0x18
    3f5a:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    3f5c:	3a 8f       	std	Y+26, r19	; 0x1a
    3f5e:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    3f60:	8e e0       	ldi	r24, 0x0E	; 14
    3f62:	91 e0       	ldi	r25, 0x01	; 1
    3f64:	9c 8f       	std	Y+28, r25	; 0x1c
    3f66:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    3f68:	88 ec       	ldi	r24, 0xC8	; 200
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9e 8f       	std	Y+30, r25	; 0x1e
    3f6e:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3f70:	8e e1       	ldi	r24, 0x1E	; 30
    3f72:	fe 01       	movw	r30, r28
    3f74:	31 96       	adiw	r30, 0x01	; 1
    3f76:	de 01       	movw	r26, r28
    3f78:	5f 96       	adiw	r26, 0x1f	; 31
    3f7a:	01 90       	ld	r0, Z+
    3f7c:	0d 92       	st	X+, r0
    3f7e:	8a 95       	dec	r24
    3f80:	e1 f7       	brne	.-8      	; 0x3f7a <send_handshake+0x8c>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    3f8a:	88 23       	and	r24, r24
    3f8c:	59 f0       	breq	.+22     	; 0x3fa4 <send_handshake+0xb6>
    3f8e:	4e e1       	ldi	r20, 0x1E	; 30
    3f90:	50 e0       	ldi	r21, 0x00	; 0
    3f92:	be 01       	movw	r22, r28
    3f94:	61 5e       	subi	r22, 0xE1	; 225
    3f96:	7f 4f       	sbci	r23, 0xFF	; 255
    3f98:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    3f9c:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	09 c0       	rjmp	.+18     	; 0x3fb6 <send_handshake+0xc8>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    3fa4:	4e e1       	ldi	r20, 0x1E	; 30
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	be 01       	movw	r22, r28
    3faa:	61 5e       	subi	r22, 0xE1	; 225
    3fac:	7f 4f       	sbci	r23, 0xFF	; 255
    3fae:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    3fb2:	76 d1       	rcall	.+748    	; 0x42a0 <simple_p_send>
  return 1;
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
}
    3fb6:	ec 96       	adiw	r28, 0x3c	; 60
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    3fc8:	2f 92       	push	r2
    3fca:	3f 92       	push	r3
    3fcc:	4f 92       	push	r4
    3fce:	5f 92       	push	r5
    3fd0:	6f 92       	push	r6
    3fd2:	7f 92       	push	r7
    3fd4:	8f 92       	push	r8
    3fd6:	9f 92       	push	r9
    3fd8:	af 92       	push	r10
    3fda:	cf 92       	push	r12
    3fdc:	ef 92       	push	r14
    3fde:	0f 93       	push	r16
    3fe0:	cf 93       	push	r28
    3fe2:	df 93       	push	r29
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	2d 97       	sbiw	r28, 0x0d	; 13
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	fc 01       	movw	r30, r24
  if(!connected) return;
    3ff6:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <connected>
    3ffa:	99 23       	and	r25, r25
    3ffc:	71 f1       	breq	.+92     	; 0x405a <send_update+0x92>
    3ffe:	49 01       	movw	r8, r18
    4000:	3a 01       	movw	r6, r20
    4002:	2b 01       	movw	r4, r22
    4004:	1f 01       	movw	r2, r30
  debug("Send update");
    4006:	8c e8       	ldi	r24, 0x8C	; 140
    4008:	96 e0       	ldi	r25, 0x06	; 6
    400a:	9f 93       	push	r25
    400c:	8f 93       	push	r24
    400e:	32 df       	rcall	.-412    	; 0x3e74 <debug>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	89 83       	std	Y+1, r24	; 0x01
    4014:	3b 82       	std	Y+3, r3	; 0x03
    4016:	2a 82       	std	Y+2, r2	; 0x02
    4018:	5d 82       	std	Y+5, r5	; 0x05
    401a:	4c 82       	std	Y+4, r4	; 0x04
    401c:	7f 82       	std	Y+7, r7	; 0x07
    401e:	6e 82       	std	Y+6, r6	; 0x06
    4020:	99 86       	std	Y+9, r9	; 0x09
    4022:	88 86       	std	Y+8, r8	; 0x08
    4024:	0a 87       	std	Y+10, r16	; 0x0a
    4026:	eb 86       	std	Y+11, r14	; 0x0b
    4028:	cc 86       	std	Y+12, r12	; 0x0c
    402a:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    4034:	88 23       	and	r24, r24
    4036:	51 f0       	breq	.+20     	; 0x404c <send_update+0x84>
    4038:	4d e0       	ldi	r20, 0x0D	; 13
    403a:	50 e0       	ldi	r21, 0x00	; 0
    403c:	be 01       	movw	r22, r28
    403e:	6f 5f       	subi	r22, 0xFF	; 255
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    4046:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    404a:	07 c0       	rjmp	.+14     	; 0x405a <send_update+0x92>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    404c:	4d e0       	ldi	r20, 0x0D	; 13
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	be 01       	movw	r22, r28
    4052:	6f 5f       	subi	r22, 0xFF	; 255
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	23 d1       	rcall	.+582    	; 0x42a0 <simple_p_send>
}
    405a:	2d 96       	adiw	r28, 0x0d	; 13
    405c:	0f b6       	in	r0, 0x3f	; 63
    405e:	f8 94       	cli
    4060:	de bf       	out	0x3e, r29	; 62
    4062:	0f be       	out	0x3f, r0	; 63
    4064:	cd bf       	out	0x3d, r28	; 61
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	0f 91       	pop	r16
    406c:	ef 90       	pop	r14
    406e:	cf 90       	pop	r12
    4070:	af 90       	pop	r10
    4072:	9f 90       	pop	r9
    4074:	8f 90       	pop	r8
    4076:	7f 90       	pop	r7
    4078:	6f 90       	pop	r6
    407a:	5f 90       	pop	r5
    407c:	4f 90       	pop	r4
    407e:	3f 90       	pop	r3
    4080:	2f 90       	pop	r2
    4082:	08 95       	ret

00004084 <send_idle>:

void send_idle(void) {
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	1f 92       	push	r1
    408a:	cd b7       	in	r28, 0x3d	; 61
    408c:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    408e:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <connected>
    4092:	88 23       	and	r24, r24
    4094:	f1 f0       	breq	.+60     	; 0x40d2 <send_idle+0x4e>
  debug("Send idle");
    4096:	88 e9       	ldi	r24, 0x98	; 152
    4098:	96 e0       	ldi	r25, 0x06	; 6
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	ea de       	rcall	.-556    	; 0x3e74 <debug>
  uint8_t status = TYPE_IDLE;
    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    40ac:	88 23       	and	r24, r24
    40ae:	51 f0       	breq	.+20     	; 0x40c4 <send_idle+0x40>
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	be 01       	movw	r22, r28
    40b6:	6f 5f       	subi	r22, 0xFF	; 255
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    40be:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    40c2:	07 c0       	rjmp	.+14     	; 0x40d2 <send_idle+0x4e>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    40c4:	41 e0       	ldi	r20, 0x01	; 1
    40c6:	50 e0       	ldi	r21, 0x00	; 0
    40c8:	be 01       	movw	r22, r28
    40ca:	6f 5f       	subi	r22, 0xFF	; 255
    40cc:	7f 4f       	sbci	r23, 0xFF	; 255
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	e7 d0       	rcall	.+462    	; 0x42a0 <simple_p_send>
}
    40d2:	0f 90       	pop	r0
    40d4:	df 91       	pop	r29
    40d6:	cf 91       	pop	r28
    40d8:	08 95       	ret

000040da <send_ping_response>:
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
	}
}

void send_ping_response(void) {
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
    40de:	1f 92       	push	r1
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    40e4:	80 91 3b 1a 	lds	r24, 0x1A3B	; 0x801a3b <connected>
    40e8:	88 23       	and	r24, r24
    40ea:	f1 f0       	breq	.+60     	; 0x4128 <send_ping_response+0x4e>
  debug("Ping Response!");
    40ec:	82 ea       	ldi	r24, 0xA2	; 162
    40ee:	96 e0       	ldi	r25, 0x06	; 6
    40f0:	9f 93       	push	r25
    40f2:	8f 93       	push	r24
    40f4:	bf de       	rcall	.-642    	; 0x3e74 <debug>
  uint8_t status = TYPE_PING_RESPONSE;
    40f6:	89 e0       	ldi	r24, 0x09	; 9
    40f8:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    4102:	88 23       	and	r24, r24
    4104:	51 f0       	breq	.+20     	; 0x411a <send_ping_response+0x40>
    4106:	41 e0       	ldi	r20, 0x01	; 1
    4108:	50 e0       	ldi	r21, 0x00	; 0
    410a:	be 01       	movw	r22, r28
    410c:	6f 5f       	subi	r22, 0xFF	; 255
    410e:	7f 4f       	sbci	r23, 0xFF	; 255
    4110:	80 91 d9 1b 	lds	r24, 0x1BD9	; 0x801bd9 <server_connection>
    4114:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    4118:	07 c0       	rjmp	.+14     	; 0x4128 <send_ping_response+0x4e>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    411a:	41 e0       	ldi	r20, 0x01	; 1
    411c:	50 e0       	ldi	r21, 0x00	; 0
    411e:	be 01       	movw	r22, r28
    4120:	6f 5f       	subi	r22, 0xFF	; 255
    4122:	7f 4f       	sbci	r23, 0xFF	; 255
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	bc d0       	rcall	.+376    	; 0x42a0 <simple_p_send>
}
    4128:	0f 90       	pop	r0
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <vServo_setAngle>:

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
	//debug("vServo_setAngle: %i", ServoAngleDeg);
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    4130:	8a 35       	cpi	r24, 0x5A	; 90
    4132:	38 f0       	brcs	.+14     	; 0x4142 <vServo_setAngle+0x12>
        ServoAngleDeg = 90;
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    4134:	8e ea       	ldi	r24, 0xAE	; 174
    4136:	9b e0       	ldi	r25, 0x0B	; 11
    4138:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    413c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4140:	08 95       	ret
    }
    else if(ServoAngleDeg <= 0){
    4142:	81 11       	cpse	r24, r1
    4144:	07 c0       	rjmp	.+14     	; 0x4154 <vServo_setAngle+0x24>
        ServoAngleDeg = 0;
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    4146:	81 e4       	ldi	r24, 0x41	; 65
    4148:	95 e0       	ldi	r25, 0x05	; 5
    414a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    414e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4152:	08 95       	ret
    }
	else if (ServoAngleDeg>0 && ServoAngleDeg<90)
    4154:	9f ef       	ldi	r25, 0xFF	; 255
    4156:	98 0f       	add	r25, r24
    4158:	99 35       	cpi	r25, 0x59	; 89
    415a:	60 f4       	brcc	.+24     	; 0x4174 <vServo_setAngle+0x44>
	{
		/* Fetch pulse width from array and set to output */
		servoOCR = DEG_TO_PWM[ServoAngleDeg];
    415c:	e8 2f       	mov	r30, r24
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	ee 0f       	add	r30, r30
    4162:	ff 1f       	adc	r31, r31
    4164:	ef 54       	subi	r30, 0x4F	; 79
    4166:	f9 4f       	sbci	r31, 0xF9	; 249
    4168:	80 81       	ld	r24, Z
    416a:	91 81       	ldd	r25, Z+1	; 0x01
    416c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    4170:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    4174:	08 95       	ret

00004176 <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    4176:	a0 ea       	ldi	r26, 0xA0	; 160
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	9c 91       	ld	r25, X
    417c:	90 62       	ori	r25, 0x20	; 32
    417e:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    4180:	e1 ea       	ldi	r30, 0xA1	; 161
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	90 81       	ld	r25, Z
    4186:	98 61       	ori	r25, 0x18	; 24
    4188:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    418a:	9c 91       	ld	r25, X
    418c:	92 60       	ori	r25, 0x02	; 2
    418e:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    4190:	90 81       	ld	r25, Z
    4192:	92 60       	ori	r25, 0x02	; 2
    4194:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    4196:	2f e3       	ldi	r18, 0x3F	; 63
    4198:	3c e9       	ldi	r19, 0x9C	; 156
    419a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    419e:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    41a2:	e1 e0       	ldi	r30, 0x01	; 1
    41a4:	f1 e0       	ldi	r31, 0x01	; 1
    41a6:	90 81       	ld	r25, Z
    41a8:	90 61       	ori	r25, 0x10	; 16
    41aa:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    41ac:	c1 cf       	rjmp	.-126    	; 0x4130 <vServo_setAngle>
    41ae:	08 95       	ret

000041b0 <simple_p_reassembly>:
  vPortFree(part);
  return 1;
}


void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length) {
    41b0:	ef 92       	push	r14
    41b2:	ff 92       	push	r15
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
  uint8_t i;
  uint8_t id = 0xFF;
  uint8_t free = 0xFF;
  for(i=0;i<MAX_MESSAGES;i++) {
    if(messages[i].address == 0xFF && free == 0xFF) free = i;
    41bc:	90 91 3d 1a 	lds	r25, 0x1A3D	; 0x801a3d <messages+0x1>
    41c0:	9f 3f       	cpi	r25, 0xFF	; 255
    41c2:	11 f0       	breq	.+4      	; 0x41c8 <simple_p_reassembly+0x18>
    else if(messages[i].address == sender) {
    41c4:	98 13       	cpse	r25, r24
    41c6:	58 c0       	rjmp	.+176    	; 0x4278 <simple_p_reassembly+0xc8>
  if(id == 0xFF && free == 0xFF) return; // Not room for any more messages, and none is stored for this address
  else if(id == 0xFF && free != 0xFF) { // Did not find any part messages from this sender, but there is room to store a new one
    id = free; 
  }
    
  if(data[0] == 0) { // First part of a new message
    41c8:	fb 01       	movw	r30, r22
    41ca:	80 81       	ld	r24, Z
    41cc:	81 11       	cpse	r24, r1
    41ce:	05 c0       	rjmp	.+10     	; 0x41da <simple_p_reassembly+0x2a>
    messages[id].num_received_bytes = 0;
    41d0:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <messages+0x3>
    41d4:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <messages+0x2>
    41d8:	0c c0       	rjmp	.+24     	; 0x41f2 <simple_p_reassembly+0x42>
  } else if(data[0] != messages[id].next_part) {
    41da:	90 91 40 1a 	lds	r25, 0x1A40	; 0x801a40 <messages+0x4>
    41de:	89 17       	cp	r24, r25
    41e0:	41 f0       	breq	.+16     	; 0x41f2 <simple_p_reassembly+0x42>
    messages[id].next_part = 0;
    41e2:	ec e3       	ldi	r30, 0x3C	; 60
    41e4:	fa e1       	ldi	r31, 0x1A	; 26
    41e6:	14 82       	std	Z+4, r1	; 0x04
    messages[id].num_received_bytes = 0;
    41e8:	13 82       	std	Z+3, r1	; 0x03
    41ea:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    41ec:	8f ef       	ldi	r24, 0xFF	; 255
    41ee:	81 83       	std	Z+1, r24	; 0x01
    return;
    41f0:	43 c0       	rjmp	.+134    	; 0x4278 <simple_p_reassembly+0xc8>
  }

  if(messages[id].num_received_bytes + (length-2) > MAX_MESSAGE_SIZE) { // Message is larger than what can be handled, discard it
    41f2:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <messages+0x2>
    41f6:	90 91 3f 1a 	lds	r25, 0x1A3F	; 0x801a3f <messages+0x3>
    41fa:	9c 01       	movw	r18, r24
    41fc:	22 50       	subi	r18, 0x02	; 2
    41fe:	31 09       	sbc	r19, r1
    4200:	24 0f       	add	r18, r20
    4202:	35 1f       	adc	r19, r21
    4204:	25 36       	cpi	r18, 0x65	; 101
    4206:	31 05       	cpc	r19, r1
    4208:	40 f0       	brcs	.+16     	; 0x421a <simple_p_reassembly+0x6a>
    messages[id].num_received_bytes = 0;
    420a:	ec e3       	ldi	r30, 0x3C	; 60
    420c:	fa e1       	ldi	r31, 0x1A	; 26
    420e:	13 82       	std	Z+3, r1	; 0x03
    4210:	12 82       	std	Z+2, r1	; 0x02
    messages[id].next_part = 0;
    4212:	14 82       	std	Z+4, r1	; 0x04
    messages[id].address = 0xFF;
    4214:	8f ef       	ldi	r24, 0xFF	; 255
    4216:	81 83       	std	Z+1, r24	; 0x01
    return;
    4218:	2f c0       	rjmp	.+94     	; 0x4278 <simple_p_reassembly+0xc8>
    421a:	8a 01       	movw	r16, r20
    421c:	eb 01       	movw	r28, r22
  }
  
  messages[id].next_part++;
    421e:	0f 2e       	mov	r0, r31
    4220:	fc e3       	ldi	r31, 0x3C	; 60
    4222:	ef 2e       	mov	r14, r31
    4224:	fa e1       	ldi	r31, 0x1A	; 26
    4226:	ff 2e       	mov	r15, r31
    4228:	f0 2d       	mov	r31, r0
    422a:	f7 01       	movw	r30, r14
    422c:	24 81       	ldd	r18, Z+4	; 0x04
    422e:	2f 5f       	subi	r18, 0xFF	; 255
    4230:	24 83       	std	Z+4, r18	; 0x04
  memcpy(messages[id].message+messages[id].num_received_bytes, data+2, length-2);
    4232:	42 50       	subi	r20, 0x02	; 2
    4234:	51 09       	sbc	r21, r1
    4236:	6e 5f       	subi	r22, 0xFE	; 254
    4238:	7f 4f       	sbci	r23, 0xFF	; 255
    423a:	8f 5b       	subi	r24, 0xBF	; 191
    423c:	95 4e       	sbci	r25, 0xE5	; 229
    423e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
  messages[id].num_received_bytes += (length-2);
    4242:	f7 01       	movw	r30, r14
    4244:	42 81       	ldd	r20, Z+2	; 0x02
    4246:	53 81       	ldd	r21, Z+3	; 0x03
    4248:	42 50       	subi	r20, 0x02	; 2
    424a:	51 09       	sbc	r21, r1
    424c:	ba 01       	movw	r22, r20
    424e:	60 0f       	add	r22, r16
    4250:	71 1f       	adc	r23, r17
    4252:	73 83       	std	Z+3, r23	; 0x03
    4254:	62 83       	std	Z+2, r22	; 0x02
  
  if(data[0] == data[1]) {
    4256:	98 81       	ld	r25, Y
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	98 13       	cpse	r25, r24
    425c:	0d c0       	rjmp	.+26     	; 0x4278 <simple_p_reassembly+0xc8>
    callback_data_received(messages[id].message, messages[id].num_received_bytes);
    425e:	e0 91 da 1b 	lds	r30, 0x1BDA	; 0x801bda <callback_data_received>
    4262:	f0 91 db 1b 	lds	r31, 0x1BDB	; 0x801bdb <callback_data_received+0x1>
    4266:	81 e4       	ldi	r24, 0x41	; 65
    4268:	9a e1       	ldi	r25, 0x1A	; 26
    426a:	19 95       	eicall
    messages[id].num_received_bytes = messages[id].next_part = 0;
    426c:	f7 01       	movw	r30, r14
    426e:	14 82       	std	Z+4, r1	; 0x04
    4270:	13 82       	std	Z+3, r1	; 0x03
    4272:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    4274:	8f ef       	ldi	r24, 0xFF	; 255
    4276:	81 83       	std	Z+1, r24	; 0x01
  }
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	ff 90       	pop	r15
    4282:	ef 90       	pop	r14
    4284:	08 95       	ret

00004286 <simple_p_init>:
void (*callback_data_received)(uint8_t*, uint16_t); 

void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length);

void simple_p_init(void (*cb)(uint8_t*, uint16_t)) {
  callback_data_received = cb;
    4286:	90 93 db 1b 	sts	0x1BDB, r25	; 0x801bdb <callback_data_received+0x1>
    428a:	80 93 da 1b 	sts	0x1BDA, r24	; 0x801bda <callback_data_received>
  uint8_t i;
  network_set_callback(PROTOCOL_SIMPLE, simple_p_reassembly);
    428e:	68 ed       	ldi	r22, 0xD8	; 216
    4290:	70 e2       	ldi	r23, 0x20	; 32
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	0e 94 20 16 	call	0x2c40	; 0x2c40 <network_set_callback>
  for(i=0;i<MAX_MESSAGES;i++) {
    messages[i].address = 0xFF;
    4298:	8f ef       	ldi	r24, 0xFF	; 255
    429a:	80 93 3d 1a 	sts	0x1A3D, r24	; 0x801a3d <messages+0x1>
    429e:	08 95       	ret

000042a0 <simple_p_send>:
  }
}

uint8_t simple_p_send(uint8_t address, uint8_t *data, uint16_t length) {  
    42a0:	5f 92       	push	r5
    42a2:	6f 92       	push	r6
    42a4:	7f 92       	push	r7
    42a6:	8f 92       	push	r8
    42a8:	9f 92       	push	r9
    42aa:	af 92       	push	r10
    42ac:	bf 92       	push	r11
    42ae:	cf 92       	push	r12
    42b0:	df 92       	push	r13
    42b2:	ef 92       	push	r14
    42b4:	ff 92       	push	r15
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	58 2e       	mov	r5, r24
    42c0:	5b 01       	movw	r10, r22
    42c2:	8a 01       	movw	r16, r20
  uint16_t tmp;
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
    42c4:	8c e2       	ldi	r24, 0x2C	; 44
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    42cc:	7c 01       	movw	r14, r24
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
    42ce:	98 01       	movw	r18, r16
    42d0:	36 95       	lsr	r19
    42d2:	27 95       	ror	r18
    42d4:	ad e0       	ldi	r26, 0x0D	; 13
    42d6:	b3 ec       	ldi	r27, 0xC3	; 195
    42d8:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__umulhisi3>
    42dc:	92 95       	swap	r25
    42de:	82 95       	swap	r24
    42e0:	8f 70       	andi	r24, 0x0F	; 15
    42e2:	89 27       	eor	r24, r25
    42e4:	9f 70       	andi	r25, 0x0F	; 15
    42e6:	89 27       	eor	r24, r25
    42e8:	4a e2       	ldi	r20, 0x2A	; 42
    42ea:	48 9f       	mul	r20, r24
    42ec:	90 01       	movw	r18, r0
    42ee:	49 9f       	mul	r20, r25
    42f0:	30 0d       	add	r19, r0
    42f2:	11 24       	eor	r1, r1
    42f4:	41 e0       	ldi	r20, 0x01	; 1
    42f6:	02 17       	cp	r16, r18
    42f8:	13 07       	cpc	r17, r19
    42fa:	09 f4       	brne	.+2      	; 0x42fe <simple_p_send+0x5e>
    42fc:	40 e0       	ldi	r20, 0x00	; 0
    42fe:	98 01       	movw	r18, r16
    4300:	36 95       	lsr	r19
    4302:	27 95       	ror	r18
    4304:	ad e0       	ldi	r26, 0x0D	; 13
    4306:	b3 ec       	ldi	r27, 0xC3	; 195
    4308:	0e 94 20 36 	call	0x6c40	; 0x6c40 <__umulhisi3>
    430c:	92 95       	swap	r25
    430e:	82 95       	swap	r24
    4310:	8f 70       	andi	r24, 0x0F	; 15
    4312:	89 27       	eor	r24, r25
    4314:	9f 70       	andi	r25, 0x0F	; 15
    4316:	89 27       	eor	r24, r25
    4318:	84 0f       	add	r24, r20
  while(remaining > 0) {
    431a:	01 15       	cp	r16, r1
    431c:	11 05       	cpc	r17, r1
    431e:	59 f1       	breq	.+86     	; 0x4376 <simple_p_send+0xd6>
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	c1 2c       	mov	r12, r1
    4324:	d1 2c       	mov	r13, r1
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    part[1] = number_of_parts-1;
    4326:	66 24       	eor	r6, r6
    4328:	6a 94       	dec	r6
    432a:	68 0e       	add	r6, r24
    memcpy(part+2, data+offset, tmp);
    432c:	47 01       	movw	r8, r14
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	88 0e       	add	r8, r24
    4332:	91 1c       	adc	r9, r1
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    4334:	e8 01       	movw	r28, r16
    4336:	0b 32       	cpi	r16, 0x2B	; 43
    4338:	11 05       	cpc	r17, r1
    433a:	10 f0       	brcs	.+4      	; 0x4340 <simple_p_send+0xa0>
    433c:	ca e2       	ldi	r28, 0x2A	; 42
    433e:	d0 e0       	ldi	r29, 0x00	; 0
    part[0] = part_number++;
    4340:	77 24       	eor	r7, r7
    4342:	73 94       	inc	r7
    4344:	79 0e       	add	r7, r25
    4346:	f7 01       	movw	r30, r14
    4348:	90 83       	st	Z, r25
    part[1] = number_of_parts-1;
    434a:	61 82       	std	Z+1, r6	; 0x01
    memcpy(part+2, data+offset, tmp);
    434c:	b5 01       	movw	r22, r10
    434e:	6c 0d       	add	r22, r12
    4350:	7d 1d       	adc	r23, r13
    4352:	ae 01       	movw	r20, r28
    4354:	c4 01       	movw	r24, r8
    4356:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    435a:	9e 01       	movw	r18, r28
    435c:	2e 5f       	subi	r18, 0xFE	; 254
    435e:	3f 4f       	sbci	r19, 0xFF	; 255
    4360:	a7 01       	movw	r20, r14
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	85 2d       	mov	r24, r5
    4366:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <network_send>
    offset += tmp;
    436a:	cc 0e       	add	r12, r28
    436c:	dd 1e       	adc	r13, r29
    remaining -= tmp;
    436e:	0c 1b       	sub	r16, r28
    4370:	1d 0b       	sbc	r17, r29
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    4372:	97 2d       	mov	r25, r7
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    4374:	f9 f6       	brne	.-66     	; 0x4334 <simple_p_send+0x94>
    memcpy(part+2, data+offset, tmp);
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    offset += tmp;
    remaining -= tmp;
  }
  vPortFree(part);
    4376:	c7 01       	movw	r24, r14
    4378:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
}
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	df 91       	pop	r29
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	ff 90       	pop	r15
    4388:	ef 90       	pop	r14
    438a:	df 90       	pop	r13
    438c:	cf 90       	pop	r12
    438e:	bf 90       	pop	r11
    4390:	af 90       	pop	r10
    4392:	9f 90       	pop	r9
    4394:	8f 90       	pop	r8
    4396:	7f 90       	pop	r7
    4398:	6f 90       	pop	r6
    439a:	5f 90       	pop	r5
    439c:	08 95       	ret

0000439e <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    439e:	84 b1       	in	r24, 0x04	; 4
    43a0:	87 60       	ori	r24, 0x07	; 7
    43a2:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    43a4:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    43a6:	8c b5       	in	r24, 0x2c	; 44
    43a8:	81 60       	ori	r24, 0x01	; 1
    43aa:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    43ac:	8c b5       	in	r24, 0x2c	; 44
    43ae:	8c 65       	ori	r24, 0x5C	; 92
    43b0:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    43b2:	8c b5       	in	r24, 0x2c	; 44
    43b4:	8f 7d       	andi	r24, 0xDF	; 223
    43b6:	8c bd       	out	0x2c, r24	; 44
    43b8:	08 95       	ret

000043ba <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    43ba:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    43bc:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    43be:	0d b4       	in	r0, 0x2d	; 45
    43c0:	07 fe       	sbrs	r0, 7
    43c2:	fd cf       	rjmp	.-6      	; 0x43be <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    43c4:	8e b5       	in	r24, 0x2e	; 46
}
    43c6:	08 95       	ret

000043c8 <xTaskGenericCreate>:
    43c8:	4f 92       	push	r4
    43ca:	5f 92       	push	r5
    43cc:	6f 92       	push	r6
    43ce:	7f 92       	push	r7
    43d0:	8f 92       	push	r8
    43d2:	9f 92       	push	r9
    43d4:	af 92       	push	r10
    43d6:	bf 92       	push	r11
    43d8:	cf 92       	push	r12
    43da:	df 92       	push	r13
    43dc:	ef 92       	push	r14
    43de:	ff 92       	push	r15
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	3c 01       	movw	r6, r24
    43ea:	5b 01       	movw	r10, r22
    43ec:	4a 01       	movw	r8, r20
    43ee:	29 01       	movw	r4, r18
    43f0:	c1 14       	cp	r12, r1
    43f2:	d1 04       	cpc	r13, r1
    43f4:	39 f4       	brne	.+14     	; 0x4404 <xTaskGenericCreate+0x3c>
    43f6:	ca 01       	movw	r24, r20
    43f8:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    43fc:	6c 01       	movw	r12, r24
    43fe:	89 2b       	or	r24, r25
    4400:	09 f4       	brne	.+2      	; 0x4404 <xTaskGenericCreate+0x3c>
    4402:	e4 c0       	rjmp	.+456    	; 0x45cc <xTaskGenericCreate+0x204>
    4404:	88 e2       	ldi	r24, 0x28	; 40
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    440c:	ec 01       	movw	r28, r24
    440e:	89 2b       	or	r24, r25
    4410:	71 f0       	breq	.+28     	; 0x442e <xTaskGenericCreate+0x66>
    4412:	d8 8e       	std	Y+24, r13	; 0x18
    4414:	cf 8a       	std	Y+23, r12	; 0x17
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	88 1a       	sub	r8, r24
    441a:	91 08       	sbc	r9, r1
    441c:	c8 0c       	add	r12, r8
    441e:	d9 1c       	adc	r13, r9
    4420:	d5 01       	movw	r26, r10
    4422:	8c 91       	ld	r24, X
    4424:	89 8f       	std	Y+25, r24	; 0x19
    4426:	8c 91       	ld	r24, X
    4428:	81 11       	cpse	r24, r1
    442a:	05 c0       	rjmp	.+10     	; 0x4436 <xTaskGenericCreate+0x6e>
    442c:	18 c0       	rjmp	.+48     	; 0x445e <xTaskGenericCreate+0x96>
    442e:	c6 01       	movw	r24, r12
    4430:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4434:	cb c0       	rjmp	.+406    	; 0x45cc <xTaskGenericCreate+0x204>
    4436:	ae 01       	movw	r20, r28
    4438:	46 5e       	subi	r20, 0xE6	; 230
    443a:	5f 4f       	sbci	r21, 0xFF	; 255
    443c:	f5 01       	movw	r30, r10
    443e:	31 96       	adiw	r30, 0x01	; 1
    4440:	b8 e0       	ldi	r27, 0x08	; 8
    4442:	ab 0e       	add	r10, r27
    4444:	b1 1c       	adc	r11, r1
    4446:	cf 01       	movw	r24, r30
    4448:	21 91       	ld	r18, Z+
    444a:	da 01       	movw	r26, r20
    444c:	2d 93       	st	X+, r18
    444e:	ad 01       	movw	r20, r26
    4450:	dc 01       	movw	r26, r24
    4452:	8c 91       	ld	r24, X
    4454:	88 23       	and	r24, r24
    4456:	19 f0       	breq	.+6      	; 0x445e <xTaskGenericCreate+0x96>
    4458:	ae 16       	cp	r10, r30
    445a:	bf 06       	cpc	r11, r31
    445c:	a1 f7       	brne	.-24     	; 0x4446 <xTaskGenericCreate+0x7e>
    445e:	18 a2       	std	Y+32, r1	; 0x20
    4460:	10 2f       	mov	r17, r16
    4462:	06 30       	cpi	r16, 0x06	; 6
    4464:	08 f0       	brcs	.+2      	; 0x4468 <xTaskGenericCreate+0xa0>
    4466:	15 e0       	ldi	r17, 0x05	; 5
    4468:	1e 8b       	std	Y+22, r17	; 0x16
    446a:	19 a3       	std	Y+33, r17	; 0x21
    446c:	1a a2       	std	Y+34, r1	; 0x22
    446e:	5e 01       	movw	r10, r28
    4470:	b2 e0       	ldi	r27, 0x02	; 2
    4472:	ab 0e       	add	r10, r27
    4474:	b1 1c       	adc	r11, r1
    4476:	c5 01       	movw	r24, r10
    4478:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    447c:	ce 01       	movw	r24, r28
    447e:	0c 96       	adiw	r24, 0x0c	; 12
    4480:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4484:	d9 87       	std	Y+9, r29	; 0x09
    4486:	c8 87       	std	Y+8, r28	; 0x08
    4488:	86 e0       	ldi	r24, 0x06	; 6
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	81 1b       	sub	r24, r17
    448e:	91 09       	sbc	r25, r1
    4490:	9d 87       	std	Y+13, r25	; 0x0d
    4492:	8c 87       	std	Y+12, r24	; 0x0c
    4494:	db 8b       	std	Y+19, r29	; 0x13
    4496:	ca 8b       	std	Y+18, r28	; 0x12
    4498:	1b a2       	std	Y+35, r1	; 0x23
    449a:	1c a2       	std	Y+36, r1	; 0x24
    449c:	1d a2       	std	Y+37, r1	; 0x25
    449e:	1e a2       	std	Y+38, r1	; 0x26
    44a0:	1f a2       	std	Y+39, r1	; 0x27
    44a2:	a2 01       	movw	r20, r4
    44a4:	b3 01       	movw	r22, r6
    44a6:	c6 01       	movw	r24, r12
    44a8:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <pxPortInitialiseStack>
    44ac:	99 83       	std	Y+1, r25	; 0x01
    44ae:	88 83       	st	Y, r24
    44b0:	e1 14       	cp	r14, r1
    44b2:	f1 04       	cpc	r15, r1
    44b4:	19 f0       	breq	.+6      	; 0x44bc <xTaskGenericCreate+0xf4>
    44b6:	f7 01       	movw	r30, r14
    44b8:	d1 83       	std	Z+1, r29	; 0x01
    44ba:	c0 83       	st	Z, r28
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	0f 92       	push	r0
    44c2:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    44c6:	8f 5f       	subi	r24, 0xFF	; 255
    44c8:	80 93 b0 1a 	sts	0x1AB0, r24	; 0x801ab0 <uxCurrentNumberOfTasks>
    44cc:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    44d0:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    44d4:	89 2b       	or	r24, r25
    44d6:	d9 f5       	brne	.+118    	; 0x454e <xTaskGenericCreate+0x186>
    44d8:	d0 93 10 1b 	sts	0x1B10, r29	; 0x801b10 <pxCurrentTCB+0x1>
    44dc:	c0 93 0f 1b 	sts	0x1B0F, r28	; 0x801b0f <pxCurrentTCB>
    44e0:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    44e4:	81 30       	cpi	r24, 0x01	; 1
    44e6:	09 f0       	breq	.+2      	; 0x44ea <xTaskGenericCreate+0x122>
    44e8:	41 c0       	rjmp	.+130    	; 0x456c <xTaskGenericCreate+0x1a4>
    44ea:	0f 2e       	mov	r0, r31
    44ec:	f9 ed       	ldi	r31, 0xD9	; 217
    44ee:	ef 2e       	mov	r14, r31
    44f0:	fa e1       	ldi	r31, 0x1A	; 26
    44f2:	ff 2e       	mov	r15, r31
    44f4:	f0 2d       	mov	r31, r0
    44f6:	0f 2e       	mov	r0, r31
    44f8:	ff e0       	ldi	r31, 0x0F	; 15
    44fa:	cf 2e       	mov	r12, r31
    44fc:	fb e1       	ldi	r31, 0x1B	; 27
    44fe:	df 2e       	mov	r13, r31
    4500:	f0 2d       	mov	r31, r0
    4502:	c7 01       	movw	r24, r14
    4504:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4508:	f9 e0       	ldi	r31, 0x09	; 9
    450a:	ef 0e       	add	r14, r31
    450c:	f1 1c       	adc	r15, r1
    450e:	ec 14       	cp	r14, r12
    4510:	fd 04       	cpc	r15, r13
    4512:	b9 f7       	brne	.-18     	; 0x4502 <xTaskGenericCreate+0x13a>
    4514:	80 ed       	ldi	r24, 0xD0	; 208
    4516:	9a e1       	ldi	r25, 0x1A	; 26
    4518:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    451c:	87 ec       	ldi	r24, 0xC7	; 199
    451e:	9a e1       	ldi	r25, 0x1A	; 26
    4520:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4524:	8a eb       	ldi	r24, 0xBA	; 186
    4526:	9a e1       	ldi	r25, 0x1A	; 26
    4528:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    452c:	81 eb       	ldi	r24, 0xB1	; 177
    452e:	9a e1       	ldi	r25, 0x1A	; 26
    4530:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4534:	80 ed       	ldi	r24, 0xD0	; 208
    4536:	9a e1       	ldi	r25, 0x1A	; 26
    4538:	90 93 c6 1a 	sts	0x1AC6, r25	; 0x801ac6 <pxDelayedTaskList+0x1>
    453c:	80 93 c5 1a 	sts	0x1AC5, r24	; 0x801ac5 <pxDelayedTaskList>
    4540:	87 ec       	ldi	r24, 0xC7	; 199
    4542:	9a e1       	ldi	r25, 0x1A	; 26
    4544:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4548:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    454c:	0f c0       	rjmp	.+30     	; 0x456c <xTaskGenericCreate+0x1a4>
    454e:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xSchedulerRunning>
    4552:	81 11       	cpse	r24, r1
    4554:	0b c0       	rjmp	.+22     	; 0x456c <xTaskGenericCreate+0x1a4>
    4556:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    455a:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    455e:	86 89       	ldd	r24, Z+22	; 0x16
    4560:	08 17       	cp	r16, r24
    4562:	20 f0       	brcs	.+8      	; 0x456c <xTaskGenericCreate+0x1a4>
    4564:	d0 93 10 1b 	sts	0x1B10, r29	; 0x801b10 <pxCurrentTCB+0x1>
    4568:	c0 93 0f 1b 	sts	0x1B0F, r28	; 0x801b0f <pxCurrentTCB>
    456c:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <uxTaskNumber>
    4570:	8f 5f       	subi	r24, 0xFF	; 255
    4572:	80 93 a8 1a 	sts	0x1AA8, r24	; 0x801aa8 <uxTaskNumber>
    4576:	8e 89       	ldd	r24, Y+22	; 0x16
    4578:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    457c:	98 17       	cp	r25, r24
    457e:	10 f4       	brcc	.+4      	; 0x4584 <xTaskGenericCreate+0x1bc>
    4580:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	9c 01       	movw	r18, r24
    4588:	22 0f       	add	r18, r18
    458a:	33 1f       	adc	r19, r19
    458c:	22 0f       	add	r18, r18
    458e:	33 1f       	adc	r19, r19
    4590:	22 0f       	add	r18, r18
    4592:	33 1f       	adc	r19, r19
    4594:	82 0f       	add	r24, r18
    4596:	93 1f       	adc	r25, r19
    4598:	b5 01       	movw	r22, r10
    459a:	87 52       	subi	r24, 0x27	; 39
    459c:	95 4e       	sbci	r25, 0xE5	; 229
    459e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    45a2:	0f 90       	pop	r0
    45a4:	0f be       	out	0x3f, r0	; 63
    45a6:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xSchedulerRunning>
    45aa:	88 23       	and	r24, r24
    45ac:	59 f0       	breq	.+22     	; 0x45c4 <xTaskGenericCreate+0x1fc>
    45ae:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    45b2:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    45b6:	86 89       	ldd	r24, Z+22	; 0x16
    45b8:	80 17       	cp	r24, r16
    45ba:	30 f4       	brcc	.+12     	; 0x45c8 <xTaskGenericCreate+0x200>
    45bc:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <xTaskGenericCreate+0x206>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	03 c0       	rjmp	.+6      	; 0x45ce <xTaskGenericCreate+0x206>
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	01 c0       	rjmp	.+2      	; 0x45ce <xTaskGenericCreate+0x206>
    45cc:	8f ef       	ldi	r24, 0xFF	; 255
    45ce:	df 91       	pop	r29
    45d0:	cf 91       	pop	r28
    45d2:	1f 91       	pop	r17
    45d4:	0f 91       	pop	r16
    45d6:	ff 90       	pop	r15
    45d8:	ef 90       	pop	r14
    45da:	df 90       	pop	r13
    45dc:	cf 90       	pop	r12
    45de:	bf 90       	pop	r11
    45e0:	af 90       	pop	r10
    45e2:	9f 90       	pop	r9
    45e4:	8f 90       	pop	r8
    45e6:	7f 90       	pop	r7
    45e8:	6f 90       	pop	r6
    45ea:	5f 90       	pop	r5
    45ec:	4f 90       	pop	r4
    45ee:	08 95       	ret

000045f0 <vTaskDelayUntil>:
    45f0:	9f 92       	push	r9
    45f2:	af 92       	push	r10
    45f4:	bf 92       	push	r11
    45f6:	cf 92       	push	r12
    45f8:	df 92       	push	r13
    45fa:	ef 92       	push	r14
    45fc:	ff 92       	push	r15
    45fe:	0f 93       	push	r16
    4600:	1f 93       	push	r17
    4602:	cf 93       	push	r28
    4604:	df 93       	push	r29
    4606:	fc 01       	movw	r30, r24
    4608:	90 91 a5 1a 	lds	r25, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    460c:	9f 5f       	subi	r25, 0xFF	; 255
    460e:	90 93 a5 1a 	sts	0x1AA5, r25	; 0x801aa5 <uxSchedulerSuspended>
    4612:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    4616:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    461a:	20 81       	ld	r18, Z
    461c:	31 81       	ldd	r19, Z+1	; 0x01
    461e:	e9 01       	movw	r28, r18
    4620:	c6 0f       	add	r28, r22
    4622:	d7 1f       	adc	r29, r23
    4624:	82 17       	cp	r24, r18
    4626:	93 07       	cpc	r25, r19
    4628:	58 f4       	brcc	.+22     	; 0x4640 <vTaskDelayUntil+0x50>
    462a:	c2 17       	cp	r28, r18
    462c:	d3 07       	cpc	r29, r19
    462e:	08 f0       	brcs	.+2      	; 0x4632 <vTaskDelayUntil+0x42>
    4630:	6e c1       	rjmp	.+732    	; 0x490e <vTaskDelayUntil+0x31e>
    4632:	d1 83       	std	Z+1, r29	; 0x01
    4634:	c0 83       	st	Z, r28
    4636:	8c 17       	cp	r24, r28
    4638:	9d 07       	cpc	r25, r29
    463a:	08 f0       	brcs	.+2      	; 0x463e <vTaskDelayUntil+0x4e>
    463c:	42 c0       	rjmp	.+132    	; 0x46c2 <vTaskDelayUntil+0xd2>
    463e:	09 c0       	rjmp	.+18     	; 0x4652 <vTaskDelayUntil+0x62>
    4640:	c2 17       	cp	r28, r18
    4642:	d3 07       	cpc	r29, r19
    4644:	08 f4       	brcc	.+2      	; 0x4648 <vTaskDelayUntil+0x58>
    4646:	60 c1       	rjmp	.+704    	; 0x4908 <vTaskDelayUntil+0x318>
    4648:	8c 17       	cp	r24, r28
    464a:	9d 07       	cpc	r25, r29
    464c:	08 f4       	brcc	.+2      	; 0x4650 <vTaskDelayUntil+0x60>
    464e:	5c c1       	rjmp	.+696    	; 0x4908 <vTaskDelayUntil+0x318>
    4650:	5e c1       	rjmp	.+700    	; 0x490e <vTaskDelayUntil+0x31e>
    4652:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4656:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    465a:	02 96       	adiw	r24, 0x02	; 2
    465c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4660:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4664:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4668:	d3 83       	std	Z+3, r29	; 0x03
    466a:	c2 83       	std	Z+2, r28	; 0x02
    466c:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    4670:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4674:	c8 17       	cp	r28, r24
    4676:	d9 07       	cpc	r29, r25
    4678:	68 f4       	brcc	.+26     	; 0x4694 <vTaskDelayUntil+0xa4>
    467a:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    467e:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4682:	80 91 c3 1a 	lds	r24, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    4686:	90 91 c4 1a 	lds	r25, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    468a:	6e 5f       	subi	r22, 0xFE	; 254
    468c:	7f 4f       	sbci	r23, 0xFF	; 255
    468e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4692:	17 c0       	rjmp	.+46     	; 0x46c2 <vTaskDelayUntil+0xd2>
    4694:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4698:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    469c:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    46a0:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    46a4:	6e 5f       	subi	r22, 0xFE	; 254
    46a6:	7f 4f       	sbci	r23, 0xFF	; 255
    46a8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    46ac:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    46b0:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    46b4:	c8 17       	cp	r28, r24
    46b6:	d9 07       	cpc	r29, r25
    46b8:	20 f4       	brcc	.+8      	; 0x46c2 <vTaskDelayUntil+0xd2>
    46ba:	d0 93 a7 1a 	sts	0x1AA7, r29	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    46be:	c0 93 a6 1a 	sts	0x1AA6, r28	; 0x801aa6 <xNextTaskUnblockTime>
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	0f 92       	push	r0
    46c8:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    46cc:	81 50       	subi	r24, 0x01	; 1
    46ce:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <uxSchedulerSuspended>
    46d2:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    46d6:	81 11       	cpse	r24, r1
    46d8:	0d c1       	rjmp	.+538    	; 0x48f4 <vTaskDelayUntil+0x304>
    46da:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    46de:	81 11       	cpse	r24, r1
    46e0:	33 c0       	rjmp	.+102    	; 0x4748 <vTaskDelayUntil+0x158>
    46e2:	0b c1       	rjmp	.+534    	; 0x48fa <vTaskDelayUntil+0x30a>
    46e4:	d7 01       	movw	r26, r14
    46e6:	15 96       	adiw	r26, 0x05	; 5
    46e8:	ed 91       	ld	r30, X+
    46ea:	fc 91       	ld	r31, X
    46ec:	16 97       	sbiw	r26, 0x06	; 6
    46ee:	c6 81       	ldd	r28, Z+6	; 0x06
    46f0:	d7 81       	ldd	r29, Z+7	; 0x07
    46f2:	ce 01       	movw	r24, r28
    46f4:	0c 96       	adiw	r24, 0x0c	; 12
    46f6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    46fa:	8e 01       	movw	r16, r28
    46fc:	0e 5f       	subi	r16, 0xFE	; 254
    46fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4700:	c8 01       	movw	r24, r16
    4702:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4706:	8e 89       	ldd	r24, Y+22	; 0x16
    4708:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    470c:	98 17       	cp	r25, r24
    470e:	10 f4       	brcc	.+4      	; 0x4714 <vTaskDelayUntil+0x124>
    4710:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	9c 01       	movw	r18, r24
    4718:	22 0f       	add	r18, r18
    471a:	33 1f       	adc	r19, r19
    471c:	22 0f       	add	r18, r18
    471e:	33 1f       	adc	r19, r19
    4720:	22 0f       	add	r18, r18
    4722:	33 1f       	adc	r19, r19
    4724:	82 0f       	add	r24, r18
    4726:	93 1f       	adc	r25, r19
    4728:	b8 01       	movw	r22, r16
    472a:	87 52       	subi	r24, 0x27	; 39
    472c:	95 4e       	sbci	r25, 0xE5	; 229
    472e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4732:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4736:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    473a:	9e 89       	ldd	r25, Y+22	; 0x16
    473c:	86 89       	ldd	r24, Z+22	; 0x16
    473e:	98 17       	cp	r25, r24
    4740:	58 f0       	brcs	.+22     	; 0x4758 <vTaskDelayUntil+0x168>
    4742:	d0 92 aa 1a 	sts	0x1AAA, r13	; 0x801aaa <xYieldPending>
    4746:	08 c0       	rjmp	.+16     	; 0x4758 <vTaskDelayUntil+0x168>
    4748:	0f 2e       	mov	r0, r31
    474a:	fa eb       	ldi	r31, 0xBA	; 186
    474c:	ef 2e       	mov	r14, r31
    474e:	fa e1       	ldi	r31, 0x1A	; 26
    4750:	ff 2e       	mov	r15, r31
    4752:	f0 2d       	mov	r31, r0
    4754:	dd 24       	eor	r13, r13
    4756:	d3 94       	inc	r13
    4758:	f7 01       	movw	r30, r14
    475a:	80 81       	ld	r24, Z
    475c:	81 11       	cpse	r24, r1
    475e:	c2 cf       	rjmp	.-124    	; 0x46e4 <vTaskDelayUntil+0xf4>
    4760:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4764:	88 23       	and	r24, r24
    4766:	09 f4       	brne	.+2      	; 0x476a <vTaskDelayUntil+0x17a>
    4768:	bd c0       	rjmp	.+378    	; 0x48e4 <vTaskDelayUntil+0x2f4>
    476a:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    476e:	88 23       	and	r24, r24
    4770:	09 f4       	brne	.+2      	; 0x4774 <vTaskDelayUntil+0x184>
    4772:	b8 c0       	rjmp	.+368    	; 0x48e4 <vTaskDelayUntil+0x2f4>
    4774:	91 2c       	mov	r9, r1
    4776:	bb 24       	eor	r11, r11
    4778:	b3 94       	inc	r11
    477a:	cc 24       	eor	r12, r12
    477c:	ca 94       	dec	r12
    477e:	dc 2c       	mov	r13, r12
    4780:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4784:	81 11       	cpse	r24, r1
    4786:	98 c0       	rjmp	.+304    	; 0x48b8 <vTaskDelayUntil+0x2c8>
    4788:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    478c:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4790:	01 96       	adiw	r24, 0x01	; 1
    4792:	90 93 af 1a 	sts	0x1AAF, r25	; 0x801aaf <xTickCount+0x1>
    4796:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <xTickCount>
    479a:	e0 90 ae 1a 	lds	r14, 0x1AAE	; 0x801aae <xTickCount>
    479e:	f0 90 af 1a 	lds	r15, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    47a2:	e1 14       	cp	r14, r1
    47a4:	f1 04       	cpc	r15, r1
    47a6:	89 f5       	brne	.+98     	; 0x480a <vTaskDelayUntil+0x21a>
    47a8:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    47ac:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    47b0:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    47b4:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    47b8:	30 93 c6 1a 	sts	0x1AC6, r19	; 0x801ac6 <pxDelayedTaskList+0x1>
    47bc:	20 93 c5 1a 	sts	0x1AC5, r18	; 0x801ac5 <pxDelayedTaskList>
    47c0:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    47c4:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    47c8:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    47cc:	8f 5f       	subi	r24, 0xFF	; 255
    47ce:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <xNumOfOverflows>
    47d2:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    47d6:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    47da:	80 81       	ld	r24, Z
    47dc:	81 11       	cpse	r24, r1
    47de:	05 c0       	rjmp	.+10     	; 0x47ea <vTaskDelayUntil+0x1fa>
    47e0:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    47e4:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    47e8:	10 c0       	rjmp	.+32     	; 0x480a <vTaskDelayUntil+0x21a>
    47ea:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    47ee:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    47f2:	05 80       	ldd	r0, Z+5	; 0x05
    47f4:	f6 81       	ldd	r31, Z+6	; 0x06
    47f6:	e0 2d       	mov	r30, r0
    47f8:	06 80       	ldd	r0, Z+6	; 0x06
    47fa:	f7 81       	ldd	r31, Z+7	; 0x07
    47fc:	e0 2d       	mov	r30, r0
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4806:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    480a:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    480e:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4812:	e8 16       	cp	r14, r24
    4814:	f9 06       	cpc	r15, r25
    4816:	08 f4       	brcc	.+2      	; 0x481a <vTaskDelayUntil+0x22a>
    4818:	7d c0       	rjmp	.+250    	; 0x4914 <vTaskDelayUntil+0x324>
    481a:	a9 2c       	mov	r10, r9
    481c:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4820:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4824:	80 81       	ld	r24, Z
    4826:	81 11       	cpse	r24, r1
    4828:	05 c0       	rjmp	.+10     	; 0x4834 <vTaskDelayUntil+0x244>
    482a:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    482e:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    4832:	48 c0       	rjmp	.+144    	; 0x48c4 <vTaskDelayUntil+0x2d4>
    4834:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4838:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    483c:	05 80       	ldd	r0, Z+5	; 0x05
    483e:	f6 81       	ldd	r31, Z+6	; 0x06
    4840:	e0 2d       	mov	r30, r0
    4842:	c6 81       	ldd	r28, Z+6	; 0x06
    4844:	d7 81       	ldd	r29, Z+7	; 0x07
    4846:	8a 81       	ldd	r24, Y+2	; 0x02
    4848:	9b 81       	ldd	r25, Y+3	; 0x03
    484a:	e8 16       	cp	r14, r24
    484c:	f9 06       	cpc	r15, r25
    484e:	28 f4       	brcc	.+10     	; 0x485a <vTaskDelayUntil+0x26a>
    4850:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4854:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4858:	35 c0       	rjmp	.+106    	; 0x48c4 <vTaskDelayUntil+0x2d4>
    485a:	8e 01       	movw	r16, r28
    485c:	0e 5f       	subi	r16, 0xFE	; 254
    485e:	1f 4f       	sbci	r17, 0xFF	; 255
    4860:	c8 01       	movw	r24, r16
    4862:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4866:	8c 89       	ldd	r24, Y+20	; 0x14
    4868:	9d 89       	ldd	r25, Y+21	; 0x15
    486a:	89 2b       	or	r24, r25
    486c:	21 f0       	breq	.+8      	; 0x4876 <vTaskDelayUntil+0x286>
    486e:	ce 01       	movw	r24, r28
    4870:	0c 96       	adiw	r24, 0x0c	; 12
    4872:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4876:	8e 89       	ldd	r24, Y+22	; 0x16
    4878:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    487c:	98 17       	cp	r25, r24
    487e:	10 f4       	brcc	.+4      	; 0x4884 <vTaskDelayUntil+0x294>
    4880:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	9c 01       	movw	r18, r24
    4888:	22 0f       	add	r18, r18
    488a:	33 1f       	adc	r19, r19
    488c:	22 0f       	add	r18, r18
    488e:	33 1f       	adc	r19, r19
    4890:	22 0f       	add	r18, r18
    4892:	33 1f       	adc	r19, r19
    4894:	82 0f       	add	r24, r18
    4896:	93 1f       	adc	r25, r19
    4898:	b8 01       	movw	r22, r16
    489a:	87 52       	subi	r24, 0x27	; 39
    489c:	95 4e       	sbci	r25, 0xE5	; 229
    489e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    48a2:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    48a6:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    48aa:	9e 89       	ldd	r25, Y+22	; 0x16
    48ac:	86 89       	ldd	r24, Z+22	; 0x16
    48ae:	98 17       	cp	r25, r24
    48b0:	08 f4       	brcc	.+2      	; 0x48b4 <vTaskDelayUntil+0x2c4>
    48b2:	b4 cf       	rjmp	.-152    	; 0x481c <vTaskDelayUntil+0x22c>
    48b4:	ab 2c       	mov	r10, r11
    48b6:	b2 cf       	rjmp	.-156    	; 0x481c <vTaskDelayUntil+0x22c>
    48b8:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    48bc:	8f 5f       	subi	r24, 0xFF	; 255
    48be:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    48c2:	28 c0       	rjmp	.+80     	; 0x4914 <vTaskDelayUntil+0x324>
    48c4:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    48c8:	81 11       	cpse	r24, r1
    48ca:	01 c0       	rjmp	.+2      	; 0x48ce <vTaskDelayUntil+0x2de>
    48cc:	a1 10       	cpse	r10, r1
    48ce:	b0 92 aa 1a 	sts	0x1AAA, r11	; 0x801aaa <xYieldPending>
    48d2:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    48d6:	81 50       	subi	r24, 0x01	; 1
    48d8:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    48dc:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    48e0:	81 11       	cpse	r24, r1
    48e2:	4e cf       	rjmp	.-356    	; 0x4780 <vTaskDelayUntil+0x190>
    48e4:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    48e8:	81 30       	cpi	r24, 0x01	; 1
    48ea:	31 f4       	brne	.+12     	; 0x48f8 <vTaskDelayUntil+0x308>
    48ec:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <vTaskDelayUntil+0x30a>
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	01 c0       	rjmp	.+2      	; 0x48fa <vTaskDelayUntil+0x30a>
    48f8:	80 e0       	ldi	r24, 0x00	; 0
    48fa:	0f 90       	pop	r0
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	81 11       	cpse	r24, r1
    4900:	0e c0       	rjmp	.+28     	; 0x491e <vTaskDelayUntil+0x32e>
    4902:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    4906:	0b c0       	rjmp	.+22     	; 0x491e <vTaskDelayUntil+0x32e>
    4908:	d1 83       	std	Z+1, r29	; 0x01
    490a:	c0 83       	st	Z, r28
    490c:	a2 ce       	rjmp	.-700    	; 0x4652 <vTaskDelayUntil+0x62>
    490e:	d1 83       	std	Z+1, r29	; 0x01
    4910:	c0 83       	st	Z, r28
    4912:	d7 ce       	rjmp	.-594    	; 0x46c2 <vTaskDelayUntil+0xd2>
    4914:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    4918:	81 11       	cpse	r24, r1
    491a:	d9 cf       	rjmp	.-78     	; 0x48ce <vTaskDelayUntil+0x2de>
    491c:	da cf       	rjmp	.-76     	; 0x48d2 <vTaskDelayUntil+0x2e2>
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	1f 91       	pop	r17
    4924:	0f 91       	pop	r16
    4926:	ff 90       	pop	r15
    4928:	ef 90       	pop	r14
    492a:	df 90       	pop	r13
    492c:	cf 90       	pop	r12
    492e:	bf 90       	pop	r11
    4930:	af 90       	pop	r10
    4932:	9f 90       	pop	r9
    4934:	08 95       	ret

00004936 <vTaskDelay>:
    4936:	9f 92       	push	r9
    4938:	af 92       	push	r10
    493a:	bf 92       	push	r11
    493c:	cf 92       	push	r12
    493e:	df 92       	push	r13
    4940:	ef 92       	push	r14
    4942:	ff 92       	push	r15
    4944:	0f 93       	push	r16
    4946:	1f 93       	push	r17
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	00 97       	sbiw	r24, 0x00	; 0
    494e:	09 f4       	brne	.+2      	; 0x4952 <vTaskDelay+0x1c>
    4950:	63 c1       	rjmp	.+710    	; 0x4c18 <vTaskDelay+0x2e2>
    4952:	20 91 a5 1a 	lds	r18, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4956:	2f 5f       	subi	r18, 0xFF	; 255
    4958:	20 93 a5 1a 	sts	0x1AA5, r18	; 0x801aa5 <uxSchedulerSuspended>
    495c:	c0 91 ae 1a 	lds	r28, 0x1AAE	; 0x801aae <xTickCount>
    4960:	d0 91 af 1a 	lds	r29, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4964:	c8 0f       	add	r28, r24
    4966:	d9 1f       	adc	r29, r25
    4968:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    496c:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4970:	02 96       	adiw	r24, 0x02	; 2
    4972:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4976:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    497a:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    497e:	d3 83       	std	Z+3, r29	; 0x03
    4980:	c2 83       	std	Z+2, r28	; 0x02
    4982:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    4986:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    498a:	c8 17       	cp	r28, r24
    498c:	d9 07       	cpc	r29, r25
    498e:	68 f4       	brcc	.+26     	; 0x49aa <vTaskDelay+0x74>
    4990:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4994:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4998:	80 91 c3 1a 	lds	r24, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    499c:	90 91 c4 1a 	lds	r25, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    49a0:	6e 5f       	subi	r22, 0xFE	; 254
    49a2:	7f 4f       	sbci	r23, 0xFF	; 255
    49a4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    49a8:	17 c0       	rjmp	.+46     	; 0x49d8 <vTaskDelay+0xa2>
    49aa:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    49ae:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    49b2:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    49b6:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    49ba:	6e 5f       	subi	r22, 0xFE	; 254
    49bc:	7f 4f       	sbci	r23, 0xFF	; 255
    49be:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    49c2:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    49c6:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    49ca:	c8 17       	cp	r28, r24
    49cc:	d9 07       	cpc	r29, r25
    49ce:	20 f4       	brcc	.+8      	; 0x49d8 <vTaskDelay+0xa2>
    49d0:	d0 93 a7 1a 	sts	0x1AA7, r29	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    49d4:	c0 93 a6 1a 	sts	0x1AA6, r28	; 0x801aa6 <xNextTaskUnblockTime>
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	0f 92       	push	r0
    49de:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    49e2:	81 50       	subi	r24, 0x01	; 1
    49e4:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <uxSchedulerSuspended>
    49e8:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    49ec:	81 11       	cpse	r24, r1
    49ee:	0d c1       	rjmp	.+538    	; 0x4c0a <vTaskDelay+0x2d4>
    49f0:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    49f4:	81 11       	cpse	r24, r1
    49f6:	33 c0       	rjmp	.+102    	; 0x4a5e <vTaskDelay+0x128>
    49f8:	0b c1       	rjmp	.+534    	; 0x4c10 <vTaskDelay+0x2da>
    49fa:	d7 01       	movw	r26, r14
    49fc:	15 96       	adiw	r26, 0x05	; 5
    49fe:	ed 91       	ld	r30, X+
    4a00:	fc 91       	ld	r31, X
    4a02:	16 97       	sbiw	r26, 0x06	; 6
    4a04:	c6 81       	ldd	r28, Z+6	; 0x06
    4a06:	d7 81       	ldd	r29, Z+7	; 0x07
    4a08:	ce 01       	movw	r24, r28
    4a0a:	0c 96       	adiw	r24, 0x0c	; 12
    4a0c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4a10:	8e 01       	movw	r16, r28
    4a12:	0e 5f       	subi	r16, 0xFE	; 254
    4a14:	1f 4f       	sbci	r17, 0xFF	; 255
    4a16:	c8 01       	movw	r24, r16
    4a18:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4a1c:	8e 89       	ldd	r24, Y+22	; 0x16
    4a1e:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    4a22:	98 17       	cp	r25, r24
    4a24:	10 f4       	brcc	.+4      	; 0x4a2a <vTaskDelay+0xf4>
    4a26:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	9c 01       	movw	r18, r24
    4a2e:	22 0f       	add	r18, r18
    4a30:	33 1f       	adc	r19, r19
    4a32:	22 0f       	add	r18, r18
    4a34:	33 1f       	adc	r19, r19
    4a36:	22 0f       	add	r18, r18
    4a38:	33 1f       	adc	r19, r19
    4a3a:	82 0f       	add	r24, r18
    4a3c:	93 1f       	adc	r25, r19
    4a3e:	b8 01       	movw	r22, r16
    4a40:	87 52       	subi	r24, 0x27	; 39
    4a42:	95 4e       	sbci	r25, 0xE5	; 229
    4a44:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4a48:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4a4c:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4a50:	9e 89       	ldd	r25, Y+22	; 0x16
    4a52:	86 89       	ldd	r24, Z+22	; 0x16
    4a54:	98 17       	cp	r25, r24
    4a56:	58 f0       	brcs	.+22     	; 0x4a6e <vTaskDelay+0x138>
    4a58:	d0 92 aa 1a 	sts	0x1AAA, r13	; 0x801aaa <xYieldPending>
    4a5c:	08 c0       	rjmp	.+16     	; 0x4a6e <vTaskDelay+0x138>
    4a5e:	0f 2e       	mov	r0, r31
    4a60:	fa eb       	ldi	r31, 0xBA	; 186
    4a62:	ef 2e       	mov	r14, r31
    4a64:	fa e1       	ldi	r31, 0x1A	; 26
    4a66:	ff 2e       	mov	r15, r31
    4a68:	f0 2d       	mov	r31, r0
    4a6a:	dd 24       	eor	r13, r13
    4a6c:	d3 94       	inc	r13
    4a6e:	f7 01       	movw	r30, r14
    4a70:	80 81       	ld	r24, Z
    4a72:	81 11       	cpse	r24, r1
    4a74:	c2 cf       	rjmp	.-124    	; 0x49fa <vTaskDelay+0xc4>
    4a76:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4a7a:	88 23       	and	r24, r24
    4a7c:	09 f4       	brne	.+2      	; 0x4a80 <vTaskDelay+0x14a>
    4a7e:	bd c0       	rjmp	.+378    	; 0x4bfa <vTaskDelay+0x2c4>
    4a80:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4a84:	88 23       	and	r24, r24
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <vTaskDelay+0x154>
    4a88:	b8 c0       	rjmp	.+368    	; 0x4bfa <vTaskDelay+0x2c4>
    4a8a:	91 2c       	mov	r9, r1
    4a8c:	bb 24       	eor	r11, r11
    4a8e:	b3 94       	inc	r11
    4a90:	cc 24       	eor	r12, r12
    4a92:	ca 94       	dec	r12
    4a94:	dc 2c       	mov	r13, r12
    4a96:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4a9a:	81 11       	cpse	r24, r1
    4a9c:	98 c0       	rjmp	.+304    	; 0x4bce <vTaskDelay+0x298>
    4a9e:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    4aa2:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4aa6:	01 96       	adiw	r24, 0x01	; 1
    4aa8:	90 93 af 1a 	sts	0x1AAF, r25	; 0x801aaf <xTickCount+0x1>
    4aac:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <xTickCount>
    4ab0:	e0 90 ae 1a 	lds	r14, 0x1AAE	; 0x801aae <xTickCount>
    4ab4:	f0 90 af 1a 	lds	r15, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4ab8:	e1 14       	cp	r14, r1
    4aba:	f1 04       	cpc	r15, r1
    4abc:	89 f5       	brne	.+98     	; 0x4b20 <vTaskDelay+0x1ea>
    4abe:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4ac2:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4ac6:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    4aca:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4ace:	30 93 c6 1a 	sts	0x1AC6, r19	; 0x801ac6 <pxDelayedTaskList+0x1>
    4ad2:	20 93 c5 1a 	sts	0x1AC5, r18	; 0x801ac5 <pxDelayedTaskList>
    4ad6:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4ada:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    4ade:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    4ae2:	8f 5f       	subi	r24, 0xFF	; 255
    4ae4:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <xNumOfOverflows>
    4ae8:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4aec:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4af0:	80 81       	ld	r24, Z
    4af2:	81 11       	cpse	r24, r1
    4af4:	05 c0       	rjmp	.+10     	; 0x4b00 <vTaskDelay+0x1ca>
    4af6:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4afa:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    4afe:	10 c0       	rjmp	.+32     	; 0x4b20 <vTaskDelay+0x1ea>
    4b00:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4b04:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4b08:	05 80       	ldd	r0, Z+5	; 0x05
    4b0a:	f6 81       	ldd	r31, Z+6	; 0x06
    4b0c:	e0 2d       	mov	r30, r0
    4b0e:	06 80       	ldd	r0, Z+6	; 0x06
    4b10:	f7 81       	ldd	r31, Z+7	; 0x07
    4b12:	e0 2d       	mov	r30, r0
    4b14:	82 81       	ldd	r24, Z+2	; 0x02
    4b16:	93 81       	ldd	r25, Z+3	; 0x03
    4b18:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4b1c:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4b20:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    4b24:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4b28:	e8 16       	cp	r14, r24
    4b2a:	f9 06       	cpc	r15, r25
    4b2c:	08 f4       	brcc	.+2      	; 0x4b30 <vTaskDelay+0x1fa>
    4b2e:	77 c0       	rjmp	.+238    	; 0x4c1e <vTaskDelay+0x2e8>
    4b30:	a9 2c       	mov	r10, r9
    4b32:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4b36:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4b3a:	80 81       	ld	r24, Z
    4b3c:	81 11       	cpse	r24, r1
    4b3e:	05 c0       	rjmp	.+10     	; 0x4b4a <vTaskDelay+0x214>
    4b40:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4b44:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    4b48:	48 c0       	rjmp	.+144    	; 0x4bda <vTaskDelay+0x2a4>
    4b4a:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4b4e:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4b52:	05 80       	ldd	r0, Z+5	; 0x05
    4b54:	f6 81       	ldd	r31, Z+6	; 0x06
    4b56:	e0 2d       	mov	r30, r0
    4b58:	c6 81       	ldd	r28, Z+6	; 0x06
    4b5a:	d7 81       	ldd	r29, Z+7	; 0x07
    4b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b60:	e8 16       	cp	r14, r24
    4b62:	f9 06       	cpc	r15, r25
    4b64:	28 f4       	brcc	.+10     	; 0x4b70 <vTaskDelay+0x23a>
    4b66:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4b6a:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4b6e:	35 c0       	rjmp	.+106    	; 0x4bda <vTaskDelay+0x2a4>
    4b70:	8e 01       	movw	r16, r28
    4b72:	0e 5f       	subi	r16, 0xFE	; 254
    4b74:	1f 4f       	sbci	r17, 0xFF	; 255
    4b76:	c8 01       	movw	r24, r16
    4b78:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b7c:	8c 89       	ldd	r24, Y+20	; 0x14
    4b7e:	9d 89       	ldd	r25, Y+21	; 0x15
    4b80:	89 2b       	or	r24, r25
    4b82:	21 f0       	breq	.+8      	; 0x4b8c <vTaskDelay+0x256>
    4b84:	ce 01       	movw	r24, r28
    4b86:	0c 96       	adiw	r24, 0x0c	; 12
    4b88:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4b8c:	8e 89       	ldd	r24, Y+22	; 0x16
    4b8e:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    4b92:	98 17       	cp	r25, r24
    4b94:	10 f4       	brcc	.+4      	; 0x4b9a <vTaskDelay+0x264>
    4b96:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	9c 01       	movw	r18, r24
    4b9e:	22 0f       	add	r18, r18
    4ba0:	33 1f       	adc	r19, r19
    4ba2:	22 0f       	add	r18, r18
    4ba4:	33 1f       	adc	r19, r19
    4ba6:	22 0f       	add	r18, r18
    4ba8:	33 1f       	adc	r19, r19
    4baa:	82 0f       	add	r24, r18
    4bac:	93 1f       	adc	r25, r19
    4bae:	b8 01       	movw	r22, r16
    4bb0:	87 52       	subi	r24, 0x27	; 39
    4bb2:	95 4e       	sbci	r25, 0xE5	; 229
    4bb4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4bb8:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4bbc:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4bc0:	9e 89       	ldd	r25, Y+22	; 0x16
    4bc2:	86 89       	ldd	r24, Z+22	; 0x16
    4bc4:	98 17       	cp	r25, r24
    4bc6:	08 f4       	brcc	.+2      	; 0x4bca <vTaskDelay+0x294>
    4bc8:	b4 cf       	rjmp	.-152    	; 0x4b32 <vTaskDelay+0x1fc>
    4bca:	ab 2c       	mov	r10, r11
    4bcc:	b2 cf       	rjmp	.-156    	; 0x4b32 <vTaskDelay+0x1fc>
    4bce:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4bd2:	8f 5f       	subi	r24, 0xFF	; 255
    4bd4:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    4bd8:	22 c0       	rjmp	.+68     	; 0x4c1e <vTaskDelay+0x2e8>
    4bda:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    4bde:	81 11       	cpse	r24, r1
    4be0:	01 c0       	rjmp	.+2      	; 0x4be4 <vTaskDelay+0x2ae>
    4be2:	a1 10       	cpse	r10, r1
    4be4:	b0 92 aa 1a 	sts	0x1AAA, r11	; 0x801aaa <xYieldPending>
    4be8:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4bec:	81 50       	subi	r24, 0x01	; 1
    4bee:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    4bf2:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4bf6:	81 11       	cpse	r24, r1
    4bf8:	4e cf       	rjmp	.-356    	; 0x4a96 <vTaskDelay+0x160>
    4bfa:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    4bfe:	81 30       	cpi	r24, 0x01	; 1
    4c00:	31 f4       	brne	.+12     	; 0x4c0e <vTaskDelay+0x2d8>
    4c02:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	03 c0       	rjmp	.+6      	; 0x4c10 <vTaskDelay+0x2da>
    4c0a:	80 e0       	ldi	r24, 0x00	; 0
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <vTaskDelay+0x2da>
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	0f 90       	pop	r0
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	81 11       	cpse	r24, r1
    4c16:	08 c0       	rjmp	.+16     	; 0x4c28 <vTaskDelay+0x2f2>
    4c18:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    4c1c:	05 c0       	rjmp	.+10     	; 0x4c28 <vTaskDelay+0x2f2>
    4c1e:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    4c22:	81 11       	cpse	r24, r1
    4c24:	df cf       	rjmp	.-66     	; 0x4be4 <vTaskDelay+0x2ae>
    4c26:	e0 cf       	rjmp	.-64     	; 0x4be8 <vTaskDelay+0x2b2>
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	ff 90       	pop	r15
    4c32:	ef 90       	pop	r14
    4c34:	df 90       	pop	r13
    4c36:	cf 90       	pop	r12
    4c38:	bf 90       	pop	r11
    4c3a:	af 90       	pop	r10
    4c3c:	9f 90       	pop	r9
    4c3e:	08 95       	ret

00004c40 <vTaskStartScheduler>:
    4c40:	cf 92       	push	r12
    4c42:	df 92       	push	r13
    4c44:	ef 92       	push	r14
    4c46:	ff 92       	push	r15
    4c48:	0f 93       	push	r16
    4c4a:	1f 93       	push	r17
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	85 e5       	ldi	r24, 0x55	; 85
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c58:	8c 01       	movw	r16, r24
    4c5a:	89 2b       	or	r24, r25
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <vTaskStartScheduler+0x20>
    4c5e:	cb c0       	rjmp	.+406    	; 0x4df6 <vTaskStartScheduler+0x1b6>
    4c60:	88 e2       	ldi	r24, 0x28	; 40
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4c68:	ec 01       	movw	r28, r24
    4c6a:	89 2b       	or	r24, r25
    4c6c:	69 f0       	breq	.+26     	; 0x4c88 <vTaskStartScheduler+0x48>
    4c6e:	18 8f       	std	Y+24, r17	; 0x18
    4c70:	0f 8b       	std	Y+23, r16	; 0x17
    4c72:	0c 5a       	subi	r16, 0xAC	; 172
    4c74:	1f 4f       	sbci	r17, 0xFF	; 255
    4c76:	89 e4       	ldi	r24, 0x49	; 73
    4c78:	89 8f       	std	Y+25, r24	; 0x19
    4c7a:	e8 e6       	ldi	r30, 0x68	; 104
    4c7c:	f7 e0       	ldi	r31, 0x07	; 7
    4c7e:	de 01       	movw	r26, r28
    4c80:	5a 96       	adiw	r26, 0x1a	; 26
    4c82:	2f e6       	ldi	r18, 0x6F	; 111
    4c84:	37 e0       	ldi	r19, 0x07	; 7
    4c86:	04 c0       	rjmp	.+8      	; 0x4c90 <vTaskStartScheduler+0x50>
    4c88:	c8 01       	movw	r24, r16
    4c8a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4c8e:	b3 c0       	rjmp	.+358    	; 0x4df6 <vTaskStartScheduler+0x1b6>
    4c90:	91 91       	ld	r25, Z+
    4c92:	9d 93       	st	X+, r25
    4c94:	99 23       	and	r25, r25
    4c96:	19 f0       	breq	.+6      	; 0x4c9e <vTaskStartScheduler+0x5e>
    4c98:	2e 17       	cp	r18, r30
    4c9a:	3f 07       	cpc	r19, r31
    4c9c:	c9 f7       	brne	.-14     	; 0x4c90 <vTaskStartScheduler+0x50>
    4c9e:	18 a2       	std	Y+32, r1	; 0x20
    4ca0:	1e 8a       	std	Y+22, r1	; 0x16
    4ca2:	19 a2       	std	Y+33, r1	; 0x21
    4ca4:	1a a2       	std	Y+34, r1	; 0x22
    4ca6:	7e 01       	movw	r14, r28
    4ca8:	82 e0       	ldi	r24, 0x02	; 2
    4caa:	e8 0e       	add	r14, r24
    4cac:	f1 1c       	adc	r15, r1
    4cae:	c7 01       	movw	r24, r14
    4cb0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4cb4:	ce 01       	movw	r24, r28
    4cb6:	0c 96       	adiw	r24, 0x0c	; 12
    4cb8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4cbc:	d9 87       	std	Y+9, r29	; 0x09
    4cbe:	c8 87       	std	Y+8, r28	; 0x08
    4cc0:	86 e0       	ldi	r24, 0x06	; 6
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	9d 87       	std	Y+13, r25	; 0x0d
    4cc6:	8c 87       	std	Y+12, r24	; 0x0c
    4cc8:	db 8b       	std	Y+19, r29	; 0x13
    4cca:	ca 8b       	std	Y+18, r28	; 0x12
    4ccc:	1b a2       	std	Y+35, r1	; 0x23
    4cce:	1c a2       	std	Y+36, r1	; 0x24
    4cd0:	1d a2       	std	Y+37, r1	; 0x25
    4cd2:	1e a2       	std	Y+38, r1	; 0x26
    4cd4:	1f a2       	std	Y+39, r1	; 0x27
    4cd6:	40 e0       	ldi	r20, 0x00	; 0
    4cd8:	50 e0       	ldi	r21, 0x00	; 0
    4cda:	69 e1       	ldi	r22, 0x19	; 25
    4cdc:	71 e0       	ldi	r23, 0x01	; 1
    4cde:	c8 01       	movw	r24, r16
    4ce0:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <pxPortInitialiseStack>
    4ce4:	99 83       	std	Y+1, r25	; 0x01
    4ce6:	88 83       	st	Y, r24
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	0f 92       	push	r0
    4cee:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    4cf2:	8f 5f       	subi	r24, 0xFF	; 255
    4cf4:	80 93 b0 1a 	sts	0x1AB0, r24	; 0x801ab0 <uxCurrentNumberOfTasks>
    4cf8:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4cfc:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4d00:	89 2b       	or	r24, r25
    4d02:	a9 f5       	brne	.+106    	; 0x4d6e <vTaskStartScheduler+0x12e>
    4d04:	d0 93 10 1b 	sts	0x1B10, r29	; 0x801b10 <pxCurrentTCB+0x1>
    4d08:	c0 93 0f 1b 	sts	0x1B0F, r28	; 0x801b0f <pxCurrentTCB>
    4d0c:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    4d10:	81 30       	cpi	r24, 0x01	; 1
    4d12:	e1 f5       	brne	.+120    	; 0x4d8c <vTaskStartScheduler+0x14c>
    4d14:	09 ed       	ldi	r16, 0xD9	; 217
    4d16:	1a e1       	ldi	r17, 0x1A	; 26
    4d18:	0f 2e       	mov	r0, r31
    4d1a:	ff e0       	ldi	r31, 0x0F	; 15
    4d1c:	cf 2e       	mov	r12, r31
    4d1e:	fb e1       	ldi	r31, 0x1B	; 27
    4d20:	df 2e       	mov	r13, r31
    4d22:	f0 2d       	mov	r31, r0
    4d24:	c8 01       	movw	r24, r16
    4d26:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d2a:	07 5f       	subi	r16, 0xF7	; 247
    4d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d2e:	0c 15       	cp	r16, r12
    4d30:	1d 05       	cpc	r17, r13
    4d32:	c1 f7       	brne	.-16     	; 0x4d24 <vTaskStartScheduler+0xe4>
    4d34:	80 ed       	ldi	r24, 0xD0	; 208
    4d36:	9a e1       	ldi	r25, 0x1A	; 26
    4d38:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d3c:	87 ec       	ldi	r24, 0xC7	; 199
    4d3e:	9a e1       	ldi	r25, 0x1A	; 26
    4d40:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d44:	8a eb       	ldi	r24, 0xBA	; 186
    4d46:	9a e1       	ldi	r25, 0x1A	; 26
    4d48:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d4c:	81 eb       	ldi	r24, 0xB1	; 177
    4d4e:	9a e1       	ldi	r25, 0x1A	; 26
    4d50:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4d54:	80 ed       	ldi	r24, 0xD0	; 208
    4d56:	9a e1       	ldi	r25, 0x1A	; 26
    4d58:	90 93 c6 1a 	sts	0x1AC6, r25	; 0x801ac6 <pxDelayedTaskList+0x1>
    4d5c:	80 93 c5 1a 	sts	0x1AC5, r24	; 0x801ac5 <pxDelayedTaskList>
    4d60:	87 ec       	ldi	r24, 0xC7	; 199
    4d62:	9a e1       	ldi	r25, 0x1A	; 26
    4d64:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4d68:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <vTaskStartScheduler+0x14c>
    4d6e:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xSchedulerRunning>
    4d72:	81 11       	cpse	r24, r1
    4d74:	0b c0       	rjmp	.+22     	; 0x4d8c <vTaskStartScheduler+0x14c>
    4d76:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4d7a:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4d7e:	86 89       	ldd	r24, Z+22	; 0x16
    4d80:	81 11       	cpse	r24, r1
    4d82:	04 c0       	rjmp	.+8      	; 0x4d8c <vTaskStartScheduler+0x14c>
    4d84:	d0 93 10 1b 	sts	0x1B10, r29	; 0x801b10 <pxCurrentTCB+0x1>
    4d88:	c0 93 0f 1b 	sts	0x1B0F, r28	; 0x801b0f <pxCurrentTCB>
    4d8c:	80 91 a8 1a 	lds	r24, 0x1AA8	; 0x801aa8 <uxTaskNumber>
    4d90:	8f 5f       	subi	r24, 0xFF	; 255
    4d92:	80 93 a8 1a 	sts	0x1AA8, r24	; 0x801aa8 <uxTaskNumber>
    4d96:	8e 89       	ldd	r24, Y+22	; 0x16
    4d98:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    4d9c:	98 17       	cp	r25, r24
    4d9e:	10 f4       	brcc	.+4      	; 0x4da4 <vTaskStartScheduler+0x164>
    4da0:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	9c 01       	movw	r18, r24
    4da8:	22 0f       	add	r18, r18
    4daa:	33 1f       	adc	r19, r19
    4dac:	22 0f       	add	r18, r18
    4dae:	33 1f       	adc	r19, r19
    4db0:	22 0f       	add	r18, r18
    4db2:	33 1f       	adc	r19, r19
    4db4:	82 0f       	add	r24, r18
    4db6:	93 1f       	adc	r25, r19
    4db8:	b7 01       	movw	r22, r14
    4dba:	87 52       	subi	r24, 0x27	; 39
    4dbc:	95 4e       	sbci	r25, 0xE5	; 229
    4dbe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4dc2:	0f 90       	pop	r0
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	80 91 ac 1a 	lds	r24, 0x1AAC	; 0x801aac <xSchedulerRunning>
    4dca:	88 23       	and	r24, r24
    4dcc:	21 f0       	breq	.+8      	; 0x4dd6 <vTaskStartScheduler+0x196>
    4dce:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4dd2:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4dd6:	f8 94       	cli
    4dd8:	8f ef       	ldi	r24, 0xFF	; 255
    4dda:	9f ef       	ldi	r25, 0xFF	; 255
    4ddc:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4de0:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	80 93 ac 1a 	sts	0x1AAC, r24	; 0x801aac <xSchedulerRunning>
    4dea:	10 92 af 1a 	sts	0x1AAF, r1	; 0x801aaf <xTickCount+0x1>
    4dee:	10 92 ae 1a 	sts	0x1AAE, r1	; 0x801aae <xTickCount>
    4df2:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <xPortStartScheduler>
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	ff 90       	pop	r15
    4e00:	ef 90       	pop	r14
    4e02:	df 90       	pop	r13
    4e04:	cf 90       	pop	r12
    4e06:	08 95       	ret

00004e08 <vTaskSuspendAll>:
    4e08:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4e0c:	8f 5f       	subi	r24, 0xFF	; 255
    4e0e:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <uxSchedulerSuspended>
    4e12:	08 95       	ret

00004e14 <xTaskResumeAll>:
    4e14:	9f 92       	push	r9
    4e16:	af 92       	push	r10
    4e18:	bf 92       	push	r11
    4e1a:	cf 92       	push	r12
    4e1c:	df 92       	push	r13
    4e1e:	ef 92       	push	r14
    4e20:	ff 92       	push	r15
    4e22:	0f 93       	push	r16
    4e24:	1f 93       	push	r17
    4e26:	cf 93       	push	r28
    4e28:	df 93       	push	r29
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	0f 92       	push	r0
    4e30:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4e34:	81 50       	subi	r24, 0x01	; 1
    4e36:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <uxSchedulerSuspended>
    4e3a:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4e3e:	81 11       	cpse	r24, r1
    4e40:	0d c1       	rjmp	.+538    	; 0x505c <xTaskResumeAll+0x248>
    4e42:	80 91 b0 1a 	lds	r24, 0x1AB0	; 0x801ab0 <uxCurrentNumberOfTasks>
    4e46:	81 11       	cpse	r24, r1
    4e48:	33 c0       	rjmp	.+102    	; 0x4eb0 <xTaskResumeAll+0x9c>
    4e4a:	0b c1       	rjmp	.+534    	; 0x5062 <xTaskResumeAll+0x24e>
    4e4c:	d7 01       	movw	r26, r14
    4e4e:	15 96       	adiw	r26, 0x05	; 5
    4e50:	ed 91       	ld	r30, X+
    4e52:	fc 91       	ld	r31, X
    4e54:	16 97       	sbiw	r26, 0x06	; 6
    4e56:	c6 81       	ldd	r28, Z+6	; 0x06
    4e58:	d7 81       	ldd	r29, Z+7	; 0x07
    4e5a:	ce 01       	movw	r24, r28
    4e5c:	0c 96       	adiw	r24, 0x0c	; 12
    4e5e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e62:	8e 01       	movw	r16, r28
    4e64:	0e 5f       	subi	r16, 0xFE	; 254
    4e66:	1f 4f       	sbci	r17, 0xFF	; 255
    4e68:	c8 01       	movw	r24, r16
    4e6a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4e6e:	8e 89       	ldd	r24, Y+22	; 0x16
    4e70:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    4e74:	98 17       	cp	r25, r24
    4e76:	10 f4       	brcc	.+4      	; 0x4e7c <xTaskResumeAll+0x68>
    4e78:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	9c 01       	movw	r18, r24
    4e80:	22 0f       	add	r18, r18
    4e82:	33 1f       	adc	r19, r19
    4e84:	22 0f       	add	r18, r18
    4e86:	33 1f       	adc	r19, r19
    4e88:	22 0f       	add	r18, r18
    4e8a:	33 1f       	adc	r19, r19
    4e8c:	82 0f       	add	r24, r18
    4e8e:	93 1f       	adc	r25, r19
    4e90:	b8 01       	movw	r22, r16
    4e92:	87 52       	subi	r24, 0x27	; 39
    4e94:	95 4e       	sbci	r25, 0xE5	; 229
    4e96:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4e9a:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    4e9e:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    4ea2:	9e 89       	ldd	r25, Y+22	; 0x16
    4ea4:	86 89       	ldd	r24, Z+22	; 0x16
    4ea6:	98 17       	cp	r25, r24
    4ea8:	58 f0       	brcs	.+22     	; 0x4ec0 <xTaskResumeAll+0xac>
    4eaa:	d0 92 aa 1a 	sts	0x1AAA, r13	; 0x801aaa <xYieldPending>
    4eae:	08 c0       	rjmp	.+16     	; 0x4ec0 <xTaskResumeAll+0xac>
    4eb0:	0f 2e       	mov	r0, r31
    4eb2:	fa eb       	ldi	r31, 0xBA	; 186
    4eb4:	ef 2e       	mov	r14, r31
    4eb6:	fa e1       	ldi	r31, 0x1A	; 26
    4eb8:	ff 2e       	mov	r15, r31
    4eba:	f0 2d       	mov	r31, r0
    4ebc:	dd 24       	eor	r13, r13
    4ebe:	d3 94       	inc	r13
    4ec0:	f7 01       	movw	r30, r14
    4ec2:	80 81       	ld	r24, Z
    4ec4:	81 11       	cpse	r24, r1
    4ec6:	c2 cf       	rjmp	.-124    	; 0x4e4c <xTaskResumeAll+0x38>
    4ec8:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4ecc:	88 23       	and	r24, r24
    4ece:	09 f4       	brne	.+2      	; 0x4ed2 <xTaskResumeAll+0xbe>
    4ed0:	bd c0       	rjmp	.+378    	; 0x504c <xTaskResumeAll+0x238>
    4ed2:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    4ed6:	88 23       	and	r24, r24
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <xTaskResumeAll+0xc8>
    4eda:	b8 c0       	rjmp	.+368    	; 0x504c <xTaskResumeAll+0x238>
    4edc:	91 2c       	mov	r9, r1
    4ede:	bb 24       	eor	r11, r11
    4ee0:	b3 94       	inc	r11
    4ee2:	cc 24       	eor	r12, r12
    4ee4:	ca 94       	dec	r12
    4ee6:	dc 2c       	mov	r13, r12
    4ee8:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    4eec:	81 11       	cpse	r24, r1
    4eee:	98 c0       	rjmp	.+304    	; 0x5020 <xTaskResumeAll+0x20c>
    4ef0:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    4ef4:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4ef8:	01 96       	adiw	r24, 0x01	; 1
    4efa:	90 93 af 1a 	sts	0x1AAF, r25	; 0x801aaf <xTickCount+0x1>
    4efe:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <xTickCount>
    4f02:	e0 90 ae 1a 	lds	r14, 0x1AAE	; 0x801aae <xTickCount>
    4f06:	f0 90 af 1a 	lds	r15, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    4f0a:	e1 14       	cp	r14, r1
    4f0c:	f1 04       	cpc	r15, r1
    4f0e:	89 f5       	brne	.+98     	; 0x4f72 <xTaskResumeAll+0x15e>
    4f10:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4f14:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4f18:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    4f1c:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4f20:	30 93 c6 1a 	sts	0x1AC6, r19	; 0x801ac6 <pxDelayedTaskList+0x1>
    4f24:	20 93 c5 1a 	sts	0x1AC5, r18	; 0x801ac5 <pxDelayedTaskList>
    4f28:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    4f2c:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    4f30:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    4f34:	8f 5f       	subi	r24, 0xFF	; 255
    4f36:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <xNumOfOverflows>
    4f3a:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4f3e:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4f42:	80 81       	ld	r24, Z
    4f44:	81 11       	cpse	r24, r1
    4f46:	05 c0       	rjmp	.+10     	; 0x4f52 <xTaskResumeAll+0x13e>
    4f48:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4f4c:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    4f50:	10 c0       	rjmp	.+32     	; 0x4f72 <xTaskResumeAll+0x15e>
    4f52:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4f56:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4f5a:	05 80       	ldd	r0, Z+5	; 0x05
    4f5c:	f6 81       	ldd	r31, Z+6	; 0x06
    4f5e:	e0 2d       	mov	r30, r0
    4f60:	06 80       	ldd	r0, Z+6	; 0x06
    4f62:	f7 81       	ldd	r31, Z+7	; 0x07
    4f64:	e0 2d       	mov	r30, r0
    4f66:	82 81       	ldd	r24, Z+2	; 0x02
    4f68:	93 81       	ldd	r25, Z+3	; 0x03
    4f6a:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4f6e:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4f72:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    4f76:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4f7a:	e8 16       	cp	r14, r24
    4f7c:	f9 06       	cpc	r15, r25
    4f7e:	08 f4       	brcc	.+2      	; 0x4f82 <xTaskResumeAll+0x16e>
    4f80:	73 c0       	rjmp	.+230    	; 0x5068 <xTaskResumeAll+0x254>
    4f82:	a9 2c       	mov	r10, r9
    4f84:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4f88:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4f8c:	80 81       	ld	r24, Z
    4f8e:	81 11       	cpse	r24, r1
    4f90:	05 c0       	rjmp	.+10     	; 0x4f9c <xTaskResumeAll+0x188>
    4f92:	d0 92 a7 1a 	sts	0x1AA7, r13	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4f96:	c0 92 a6 1a 	sts	0x1AA6, r12	; 0x801aa6 <xNextTaskUnblockTime>
    4f9a:	48 c0       	rjmp	.+144    	; 0x502c <xTaskResumeAll+0x218>
    4f9c:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    4fa0:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    4fa4:	05 80       	ldd	r0, Z+5	; 0x05
    4fa6:	f6 81       	ldd	r31, Z+6	; 0x06
    4fa8:	e0 2d       	mov	r30, r0
    4faa:	c6 81       	ldd	r28, Z+6	; 0x06
    4fac:	d7 81       	ldd	r29, Z+7	; 0x07
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fb2:	e8 16       	cp	r14, r24
    4fb4:	f9 06       	cpc	r15, r25
    4fb6:	28 f4       	brcc	.+10     	; 0x4fc2 <xTaskResumeAll+0x1ae>
    4fb8:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    4fbc:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    4fc0:	35 c0       	rjmp	.+106    	; 0x502c <xTaskResumeAll+0x218>
    4fc2:	8e 01       	movw	r16, r28
    4fc4:	0e 5f       	subi	r16, 0xFE	; 254
    4fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc8:	c8 01       	movw	r24, r16
    4fca:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4fce:	8c 89       	ldd	r24, Y+20	; 0x14
    4fd0:	9d 89       	ldd	r25, Y+21	; 0x15
    4fd2:	89 2b       	or	r24, r25
    4fd4:	21 f0       	breq	.+8      	; 0x4fde <xTaskResumeAll+0x1ca>
    4fd6:	ce 01       	movw	r24, r28
    4fd8:	0c 96       	adiw	r24, 0x0c	; 12
    4fda:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4fde:	8e 89       	ldd	r24, Y+22	; 0x16
    4fe0:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    4fe4:	98 17       	cp	r25, r24
    4fe6:	10 f4       	brcc	.+4      	; 0x4fec <xTaskResumeAll+0x1d8>
    4fe8:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	9c 01       	movw	r18, r24
    4ff0:	22 0f       	add	r18, r18
    4ff2:	33 1f       	adc	r19, r19
    4ff4:	22 0f       	add	r18, r18
    4ff6:	33 1f       	adc	r19, r19
    4ff8:	22 0f       	add	r18, r18
    4ffa:	33 1f       	adc	r19, r19
    4ffc:	82 0f       	add	r24, r18
    4ffe:	93 1f       	adc	r25, r19
    5000:	b8 01       	movw	r22, r16
    5002:	87 52       	subi	r24, 0x27	; 39
    5004:	95 4e       	sbci	r25, 0xE5	; 229
    5006:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    500a:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    500e:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5012:	9e 89       	ldd	r25, Y+22	; 0x16
    5014:	86 89       	ldd	r24, Z+22	; 0x16
    5016:	98 17       	cp	r25, r24
    5018:	08 f4       	brcc	.+2      	; 0x501c <xTaskResumeAll+0x208>
    501a:	b4 cf       	rjmp	.-152    	; 0x4f84 <xTaskResumeAll+0x170>
    501c:	ab 2c       	mov	r10, r11
    501e:	b2 cf       	rjmp	.-156    	; 0x4f84 <xTaskResumeAll+0x170>
    5020:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    5024:	8f 5f       	subi	r24, 0xFF	; 255
    5026:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    502a:	1e c0       	rjmp	.+60     	; 0x5068 <xTaskResumeAll+0x254>
    502c:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    5030:	81 11       	cpse	r24, r1
    5032:	01 c0       	rjmp	.+2      	; 0x5036 <xTaskResumeAll+0x222>
    5034:	a1 10       	cpse	r10, r1
    5036:	b0 92 aa 1a 	sts	0x1AAA, r11	; 0x801aaa <xYieldPending>
    503a:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    503e:	81 50       	subi	r24, 0x01	; 1
    5040:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    5044:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    5048:	81 11       	cpse	r24, r1
    504a:	4e cf       	rjmp	.-356    	; 0x4ee8 <xTaskResumeAll+0xd4>
    504c:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    5050:	81 30       	cpi	r24, 0x01	; 1
    5052:	31 f4       	brne	.+12     	; 0x5060 <xTaskResumeAll+0x24c>
    5054:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    5058:	81 e0       	ldi	r24, 0x01	; 1
    505a:	03 c0       	rjmp	.+6      	; 0x5062 <xTaskResumeAll+0x24e>
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	01 c0       	rjmp	.+2      	; 0x5062 <xTaskResumeAll+0x24e>
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	0f 90       	pop	r0
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	05 c0       	rjmp	.+10     	; 0x5072 <xTaskResumeAll+0x25e>
    5068:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    506c:	81 11       	cpse	r24, r1
    506e:	e3 cf       	rjmp	.-58     	; 0x5036 <xTaskResumeAll+0x222>
    5070:	e4 cf       	rjmp	.-56     	; 0x503a <xTaskResumeAll+0x226>
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	ff 90       	pop	r15
    507c:	ef 90       	pop	r14
    507e:	df 90       	pop	r13
    5080:	cf 90       	pop	r12
    5082:	bf 90       	pop	r11
    5084:	af 90       	pop	r10
    5086:	9f 90       	pop	r9
    5088:	08 95       	ret

0000508a <xTaskGetTickCount>:
    508a:	0f b6       	in	r0, 0x3f	; 63
    508c:	f8 94       	cli
    508e:	0f 92       	push	r0
    5090:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    5094:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5098:	0f 90       	pop	r0
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	08 95       	ret

0000509e <xTaskIncrementTick>:
    509e:	cf 92       	push	r12
    50a0:	df 92       	push	r13
    50a2:	ef 92       	push	r14
    50a4:	ff 92       	push	r15
    50a6:	0f 93       	push	r16
    50a8:	1f 93       	push	r17
    50aa:	cf 93       	push	r28
    50ac:	df 93       	push	r29
    50ae:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    50b2:	81 11       	cpse	r24, r1
    50b4:	9f c0       	rjmp	.+318    	; 0x51f4 <xTaskIncrementTick+0x156>
    50b6:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    50ba:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    50be:	01 96       	adiw	r24, 0x01	; 1
    50c0:	90 93 af 1a 	sts	0x1AAF, r25	; 0x801aaf <xTickCount+0x1>
    50c4:	80 93 ae 1a 	sts	0x1AAE, r24	; 0x801aae <xTickCount>
    50c8:	e0 90 ae 1a 	lds	r14, 0x1AAE	; 0x801aae <xTickCount>
    50cc:	f0 90 af 1a 	lds	r15, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    50d0:	e1 14       	cp	r14, r1
    50d2:	f1 04       	cpc	r15, r1
    50d4:	99 f5       	brne	.+102    	; 0x513c <xTaskIncrementTick+0x9e>
    50d6:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    50da:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    50de:	20 91 c3 1a 	lds	r18, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    50e2:	30 91 c4 1a 	lds	r19, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    50e6:	30 93 c6 1a 	sts	0x1AC6, r19	; 0x801ac6 <pxDelayedTaskList+0x1>
    50ea:	20 93 c5 1a 	sts	0x1AC5, r18	; 0x801ac5 <pxDelayedTaskList>
    50ee:	90 93 c4 1a 	sts	0x1AC4, r25	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    50f2:	80 93 c3 1a 	sts	0x1AC3, r24	; 0x801ac3 <pxOverflowDelayedTaskList>
    50f6:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    50fa:	8f 5f       	subi	r24, 0xFF	; 255
    50fc:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <xNumOfOverflows>
    5100:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    5104:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    5108:	80 81       	ld	r24, Z
    510a:	81 11       	cpse	r24, r1
    510c:	07 c0       	rjmp	.+14     	; 0x511c <xTaskIncrementTick+0x7e>
    510e:	8f ef       	ldi	r24, 0xFF	; 255
    5110:	9f ef       	ldi	r25, 0xFF	; 255
    5112:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5116:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    511a:	10 c0       	rjmp	.+32     	; 0x513c <xTaskIncrementTick+0x9e>
    511c:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    5120:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    5124:	05 80       	ldd	r0, Z+5	; 0x05
    5126:	f6 81       	ldd	r31, Z+6	; 0x06
    5128:	e0 2d       	mov	r30, r0
    512a:	06 80       	ldd	r0, Z+6	; 0x06
    512c:	f7 81       	ldd	r31, Z+7	; 0x07
    512e:	e0 2d       	mov	r30, r0
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5138:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    513c:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    5140:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5144:	e8 16       	cp	r14, r24
    5146:	f9 06       	cpc	r15, r25
    5148:	10 f4       	brcc	.+4      	; 0x514e <xTaskIncrementTick+0xb0>
    514a:	d1 2c       	mov	r13, r1
    514c:	59 c0       	rjmp	.+178    	; 0x5200 <xTaskIncrementTick+0x162>
    514e:	d1 2c       	mov	r13, r1
    5150:	cc 24       	eor	r12, r12
    5152:	c3 94       	inc	r12
    5154:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    5158:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    515c:	80 81       	ld	r24, Z
    515e:	81 11       	cpse	r24, r1
    5160:	07 c0       	rjmp	.+14     	; 0x5170 <xTaskIncrementTick+0xd2>
    5162:	8f ef       	ldi	r24, 0xFF	; 255
    5164:	9f ef       	ldi	r25, 0xFF	; 255
    5166:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    516a:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    516e:	48 c0       	rjmp	.+144    	; 0x5200 <xTaskIncrementTick+0x162>
    5170:	e0 91 c5 1a 	lds	r30, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    5174:	f0 91 c6 1a 	lds	r31, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    5178:	05 80       	ldd	r0, Z+5	; 0x05
    517a:	f6 81       	ldd	r31, Z+6	; 0x06
    517c:	e0 2d       	mov	r30, r0
    517e:	c6 81       	ldd	r28, Z+6	; 0x06
    5180:	d7 81       	ldd	r29, Z+7	; 0x07
    5182:	8a 81       	ldd	r24, Y+2	; 0x02
    5184:	9b 81       	ldd	r25, Y+3	; 0x03
    5186:	e8 16       	cp	r14, r24
    5188:	f9 06       	cpc	r15, r25
    518a:	28 f4       	brcc	.+10     	; 0x5196 <xTaskIncrementTick+0xf8>
    518c:	90 93 a7 1a 	sts	0x1AA7, r25	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5190:	80 93 a6 1a 	sts	0x1AA6, r24	; 0x801aa6 <xNextTaskUnblockTime>
    5194:	35 c0       	rjmp	.+106    	; 0x5200 <xTaskIncrementTick+0x162>
    5196:	8e 01       	movw	r16, r28
    5198:	0e 5f       	subi	r16, 0xFE	; 254
    519a:	1f 4f       	sbci	r17, 0xFF	; 255
    519c:	c8 01       	movw	r24, r16
    519e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    51a2:	8c 89       	ldd	r24, Y+20	; 0x14
    51a4:	9d 89       	ldd	r25, Y+21	; 0x15
    51a6:	89 2b       	or	r24, r25
    51a8:	21 f0       	breq	.+8      	; 0x51b2 <xTaskIncrementTick+0x114>
    51aa:	ce 01       	movw	r24, r28
    51ac:	0c 96       	adiw	r24, 0x0c	; 12
    51ae:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    51b2:	8e 89       	ldd	r24, Y+22	; 0x16
    51b4:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    51b8:	98 17       	cp	r25, r24
    51ba:	10 f4       	brcc	.+4      	; 0x51c0 <xTaskIncrementTick+0x122>
    51bc:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	9c 01       	movw	r18, r24
    51c4:	22 0f       	add	r18, r18
    51c6:	33 1f       	adc	r19, r19
    51c8:	22 0f       	add	r18, r18
    51ca:	33 1f       	adc	r19, r19
    51cc:	22 0f       	add	r18, r18
    51ce:	33 1f       	adc	r19, r19
    51d0:	82 0f       	add	r24, r18
    51d2:	93 1f       	adc	r25, r19
    51d4:	b8 01       	movw	r22, r16
    51d6:	87 52       	subi	r24, 0x27	; 39
    51d8:	95 4e       	sbci	r25, 0xE5	; 229
    51da:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    51de:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    51e2:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    51e6:	9e 89       	ldd	r25, Y+22	; 0x16
    51e8:	86 89       	ldd	r24, Z+22	; 0x16
    51ea:	98 17       	cp	r25, r24
    51ec:	08 f4       	brcc	.+2      	; 0x51f0 <xTaskIncrementTick+0x152>
    51ee:	b2 cf       	rjmp	.-156    	; 0x5154 <xTaskIncrementTick+0xb6>
    51f0:	dc 2c       	mov	r13, r12
    51f2:	b0 cf       	rjmp	.-160    	; 0x5154 <xTaskIncrementTick+0xb6>
    51f4:	80 91 ab 1a 	lds	r24, 0x1AAB	; 0x801aab <uxPendedTicks>
    51f8:	8f 5f       	subi	r24, 0xFF	; 255
    51fa:	80 93 ab 1a 	sts	0x1AAB, r24	; 0x801aab <uxPendedTicks>
    51fe:	d1 2c       	mov	r13, r1
    5200:	80 91 aa 1a 	lds	r24, 0x1AAA	; 0x801aaa <xYieldPending>
    5204:	88 23       	and	r24, r24
    5206:	11 f0       	breq	.+4      	; 0x520c <xTaskIncrementTick+0x16e>
    5208:	dd 24       	eor	r13, r13
    520a:	d3 94       	inc	r13
    520c:	8d 2d       	mov	r24, r13
    520e:	df 91       	pop	r29
    5210:	cf 91       	pop	r28
    5212:	1f 91       	pop	r17
    5214:	0f 91       	pop	r16
    5216:	ff 90       	pop	r15
    5218:	ef 90       	pop	r14
    521a:	df 90       	pop	r13
    521c:	cf 90       	pop	r12
    521e:	08 95       	ret

00005220 <vTaskSwitchContext>:
    5220:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    5224:	88 23       	and	r24, r24
    5226:	21 f0       	breq	.+8      	; 0x5230 <vTaskSwitchContext+0x10>
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	80 93 aa 1a 	sts	0x1AAA, r24	; 0x801aaa <xYieldPending>
    522e:	08 95       	ret
    5230:	10 92 aa 1a 	sts	0x1AAA, r1	; 0x801aaa <xYieldPending>
    5234:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5238:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    523c:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5240:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5244:	2d 91       	ld	r18, X+
    5246:	3c 91       	ld	r19, X
    5248:	87 89       	ldd	r24, Z+23	; 0x17
    524a:	90 8d       	ldd	r25, Z+24	; 0x18
    524c:	82 17       	cp	r24, r18
    524e:	93 07       	cpc	r25, r19
    5250:	60 f0       	brcs	.+24     	; 0x526a <vTaskSwitchContext+0x4a>
    5252:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5256:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    525a:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    525e:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5262:	67 5e       	subi	r22, 0xE7	; 231
    5264:	7f 4f       	sbci	r23, 0xFF	; 255
    5266:	0e 94 c3 13 	call	0x2786	; 0x2786 <vApplicationStackOverflowHook>
    526a:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	fc 01       	movw	r30, r24
    5272:	ee 0f       	add	r30, r30
    5274:	ff 1f       	adc	r31, r31
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	ee 0f       	add	r30, r30
    527c:	ff 1f       	adc	r31, r31
    527e:	8e 0f       	add	r24, r30
    5280:	9f 1f       	adc	r25, r31
    5282:	fc 01       	movw	r30, r24
    5284:	e7 52       	subi	r30, 0x27	; 39
    5286:	f5 4e       	sbci	r31, 0xE5	; 229
    5288:	80 81       	ld	r24, Z
    528a:	81 11       	cpse	r24, r1
    528c:	17 c0       	rjmp	.+46     	; 0x52bc <vTaskSwitchContext+0x9c>
    528e:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    5292:	81 50       	subi	r24, 0x01	; 1
    5294:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    5298:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	fc 01       	movw	r30, r24
    52a0:	ee 0f       	add	r30, r30
    52a2:	ff 1f       	adc	r31, r31
    52a4:	ee 0f       	add	r30, r30
    52a6:	ff 1f       	adc	r31, r31
    52a8:	ee 0f       	add	r30, r30
    52aa:	ff 1f       	adc	r31, r31
    52ac:	8e 0f       	add	r24, r30
    52ae:	9f 1f       	adc	r25, r31
    52b0:	fc 01       	movw	r30, r24
    52b2:	e7 52       	subi	r30, 0x27	; 39
    52b4:	f5 4e       	sbci	r31, 0xE5	; 229
    52b6:	80 81       	ld	r24, Z
    52b8:	88 23       	and	r24, r24
    52ba:	49 f3       	breq	.-46     	; 0x528e <vTaskSwitchContext+0x6e>
    52bc:	80 91 ad 1a 	lds	r24, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	9c 01       	movw	r18, r24
    52c4:	22 0f       	add	r18, r18
    52c6:	33 1f       	adc	r19, r19
    52c8:	22 0f       	add	r18, r18
    52ca:	33 1f       	adc	r19, r19
    52cc:	22 0f       	add	r18, r18
    52ce:	33 1f       	adc	r19, r19
    52d0:	28 0f       	add	r18, r24
    52d2:	39 1f       	adc	r19, r25
    52d4:	d9 01       	movw	r26, r18
    52d6:	a7 52       	subi	r26, 0x27	; 39
    52d8:	b5 4e       	sbci	r27, 0xE5	; 229
    52da:	11 96       	adiw	r26, 0x01	; 1
    52dc:	ed 91       	ld	r30, X+
    52de:	fc 91       	ld	r31, X
    52e0:	12 97       	sbiw	r26, 0x02	; 2
    52e2:	02 80       	ldd	r0, Z+2	; 0x02
    52e4:	f3 81       	ldd	r31, Z+3	; 0x03
    52e6:	e0 2d       	mov	r30, r0
    52e8:	12 96       	adiw	r26, 0x02	; 2
    52ea:	fc 93       	st	X, r31
    52ec:	ee 93       	st	-X, r30
    52ee:	11 97       	sbiw	r26, 0x01	; 1
    52f0:	24 52       	subi	r18, 0x24	; 36
    52f2:	35 4e       	sbci	r19, 0xE5	; 229
    52f4:	e2 17       	cp	r30, r18
    52f6:	f3 07       	cpc	r31, r19
    52f8:	29 f4       	brne	.+10     	; 0x5304 <vTaskSwitchContext+0xe4>
    52fa:	22 81       	ldd	r18, Z+2	; 0x02
    52fc:	33 81       	ldd	r19, Z+3	; 0x03
    52fe:	fd 01       	movw	r30, r26
    5300:	32 83       	std	Z+2, r19	; 0x02
    5302:	21 83       	std	Z+1, r18	; 0x01
    5304:	fc 01       	movw	r30, r24
    5306:	ee 0f       	add	r30, r30
    5308:	ff 1f       	adc	r31, r31
    530a:	ee 0f       	add	r30, r30
    530c:	ff 1f       	adc	r31, r31
    530e:	ee 0f       	add	r30, r30
    5310:	ff 1f       	adc	r31, r31
    5312:	8e 0f       	add	r24, r30
    5314:	9f 1f       	adc	r25, r31
    5316:	fc 01       	movw	r30, r24
    5318:	e7 52       	subi	r30, 0x27	; 39
    531a:	f5 4e       	sbci	r31, 0xE5	; 229
    531c:	01 80       	ldd	r0, Z+1	; 0x01
    531e:	f2 81       	ldd	r31, Z+2	; 0x02
    5320:	e0 2d       	mov	r30, r0
    5322:	86 81       	ldd	r24, Z+6	; 0x06
    5324:	97 81       	ldd	r25, Z+7	; 0x07
    5326:	90 93 10 1b 	sts	0x1B10, r25	; 0x801b10 <pxCurrentTCB+0x1>
    532a:	80 93 0f 1b 	sts	0x1B0F, r24	; 0x801b0f <pxCurrentTCB>
    532e:	08 95       	ret

00005330 <vTaskPlaceOnEventList>:
    5330:	cf 93       	push	r28
    5332:	df 93       	push	r29
    5334:	eb 01       	movw	r28, r22
    5336:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    533a:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    533e:	64 5f       	subi	r22, 0xF4	; 244
    5340:	7f 4f       	sbci	r23, 0xFF	; 255
    5342:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5346:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    534a:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    534e:	02 96       	adiw	r24, 0x02	; 2
    5350:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5354:	cf 3f       	cpi	r28, 0xFF	; 255
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	d8 07       	cpc	r29, r24
    535a:	59 f4       	brne	.+22     	; 0x5372 <vTaskPlaceOnEventList+0x42>
    535c:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5360:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5364:	6e 5f       	subi	r22, 0xFE	; 254
    5366:	7f 4f       	sbci	r23, 0xFF	; 255
    5368:	81 eb       	ldi	r24, 0xB1	; 177
    536a:	9a e1       	ldi	r25, 0x1A	; 26
    536c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5370:	37 c0       	rjmp	.+110    	; 0x53e0 <vTaskPlaceOnEventList+0xb0>
    5372:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    5376:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    537a:	c8 0f       	add	r28, r24
    537c:	d9 1f       	adc	r29, r25
    537e:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5382:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5386:	d3 83       	std	Z+3, r29	; 0x03
    5388:	c2 83       	std	Z+2, r28	; 0x02
    538a:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    538e:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5392:	c8 17       	cp	r28, r24
    5394:	d9 07       	cpc	r29, r25
    5396:	68 f4       	brcc	.+26     	; 0x53b2 <vTaskPlaceOnEventList+0x82>
    5398:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    539c:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    53a0:	80 91 c3 1a 	lds	r24, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    53a4:	90 91 c4 1a 	lds	r25, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    53a8:	6e 5f       	subi	r22, 0xFE	; 254
    53aa:	7f 4f       	sbci	r23, 0xFF	; 255
    53ac:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    53b0:	17 c0       	rjmp	.+46     	; 0x53e0 <vTaskPlaceOnEventList+0xb0>
    53b2:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    53b6:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    53ba:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    53be:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    53c2:	6e 5f       	subi	r22, 0xFE	; 254
    53c4:	7f 4f       	sbci	r23, 0xFF	; 255
    53c6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    53ca:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    53ce:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    53d2:	c8 17       	cp	r28, r24
    53d4:	d9 07       	cpc	r29, r25
    53d6:	20 f4       	brcc	.+8      	; 0x53e0 <vTaskPlaceOnEventList+0xb0>
    53d8:	d0 93 a7 1a 	sts	0x1AA7, r29	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    53dc:	c0 93 a6 1a 	sts	0x1AA6, r28	; 0x801aa6 <xNextTaskUnblockTime>
    53e0:	df 91       	pop	r29
    53e2:	cf 91       	pop	r28
    53e4:	08 95       	ret

000053e6 <xTaskRemoveFromEventList>:
    53e6:	0f 93       	push	r16
    53e8:	1f 93       	push	r17
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	dc 01       	movw	r26, r24
    53f0:	15 96       	adiw	r26, 0x05	; 5
    53f2:	ed 91       	ld	r30, X+
    53f4:	fc 91       	ld	r31, X
    53f6:	16 97       	sbiw	r26, 0x06	; 6
    53f8:	c6 81       	ldd	r28, Z+6	; 0x06
    53fa:	d7 81       	ldd	r29, Z+7	; 0x07
    53fc:	8e 01       	movw	r16, r28
    53fe:	04 5f       	subi	r16, 0xF4	; 244
    5400:	1f 4f       	sbci	r17, 0xFF	; 255
    5402:	c8 01       	movw	r24, r16
    5404:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5408:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    540c:	81 11       	cpse	r24, r1
    540e:	1c c0       	rjmp	.+56     	; 0x5448 <xTaskRemoveFromEventList+0x62>
    5410:	0a 50       	subi	r16, 0x0A	; 10
    5412:	11 09       	sbc	r17, r1
    5414:	c8 01       	movw	r24, r16
    5416:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    541a:	8e 89       	ldd	r24, Y+22	; 0x16
    541c:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    5420:	98 17       	cp	r25, r24
    5422:	10 f4       	brcc	.+4      	; 0x5428 <xTaskRemoveFromEventList+0x42>
    5424:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	9c 01       	movw	r18, r24
    542c:	22 0f       	add	r18, r18
    542e:	33 1f       	adc	r19, r19
    5430:	22 0f       	add	r18, r18
    5432:	33 1f       	adc	r19, r19
    5434:	22 0f       	add	r18, r18
    5436:	33 1f       	adc	r19, r19
    5438:	82 0f       	add	r24, r18
    543a:	93 1f       	adc	r25, r19
    543c:	b8 01       	movw	r22, r16
    543e:	87 52       	subi	r24, 0x27	; 39
    5440:	95 4e       	sbci	r25, 0xE5	; 229
    5442:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5446:	05 c0       	rjmp	.+10     	; 0x5452 <xTaskRemoveFromEventList+0x6c>
    5448:	b8 01       	movw	r22, r16
    544a:	8a eb       	ldi	r24, 0xBA	; 186
    544c:	9a e1       	ldi	r25, 0x1A	; 26
    544e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5452:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5456:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    545a:	9e 89       	ldd	r25, Y+22	; 0x16
    545c:	86 89       	ldd	r24, Z+22	; 0x16
    545e:	89 17       	cp	r24, r25
    5460:	20 f4       	brcc	.+8      	; 0x546a <xTaskRemoveFromEventList+0x84>
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	80 93 aa 1a 	sts	0x1AAA, r24	; 0x801aaa <xYieldPending>
    5468:	01 c0       	rjmp	.+2      	; 0x546c <xTaskRemoveFromEventList+0x86>
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	08 95       	ret

00005476 <vTaskSetTimeOutState>:
    5476:	20 91 a9 1a 	lds	r18, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    547a:	fc 01       	movw	r30, r24
    547c:	20 83       	st	Z, r18
    547e:	20 91 ae 1a 	lds	r18, 0x1AAE	; 0x801aae <xTickCount>
    5482:	30 91 af 1a 	lds	r19, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5486:	32 83       	std	Z+2, r19	; 0x02
    5488:	21 83       	std	Z+1, r18	; 0x01
    548a:	08 95       	ret

0000548c <xTaskCheckForTimeOut>:
    548c:	fc 01       	movw	r30, r24
    548e:	0f b6       	in	r0, 0x3f	; 63
    5490:	f8 94       	cli
    5492:	0f 92       	push	r0
    5494:	20 91 ae 1a 	lds	r18, 0x1AAE	; 0x801aae <xTickCount>
    5498:	30 91 af 1a 	lds	r19, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    549c:	db 01       	movw	r26, r22
    549e:	8d 91       	ld	r24, X+
    54a0:	9c 91       	ld	r25, X
    54a2:	8f 3f       	cpi	r24, 0xFF	; 255
    54a4:	bf ef       	ldi	r27, 0xFF	; 255
    54a6:	9b 07       	cpc	r25, r27
    54a8:	21 f1       	breq	.+72     	; 0x54f2 <xTaskCheckForTimeOut+0x66>
    54aa:	40 91 a9 1a 	lds	r20, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    54ae:	50 81       	ld	r21, Z
    54b0:	54 17       	cp	r21, r20
    54b2:	29 f0       	breq	.+10     	; 0x54be <xTaskCheckForTimeOut+0x32>
    54b4:	41 81       	ldd	r20, Z+1	; 0x01
    54b6:	52 81       	ldd	r21, Z+2	; 0x02
    54b8:	24 17       	cp	r18, r20
    54ba:	35 07       	cpc	r19, r21
    54bc:	e0 f4       	brcc	.+56     	; 0x54f6 <xTaskCheckForTimeOut+0x6a>
    54be:	41 81       	ldd	r20, Z+1	; 0x01
    54c0:	52 81       	ldd	r21, Z+2	; 0x02
    54c2:	d9 01       	movw	r26, r18
    54c4:	a4 1b       	sub	r26, r20
    54c6:	b5 0b       	sbc	r27, r21
    54c8:	a8 17       	cp	r26, r24
    54ca:	b9 07       	cpc	r27, r25
    54cc:	b0 f4       	brcc	.+44     	; 0x54fa <xTaskCheckForTimeOut+0x6e>
    54ce:	42 1b       	sub	r20, r18
    54d0:	53 0b       	sbc	r21, r19
    54d2:	84 0f       	add	r24, r20
    54d4:	95 1f       	adc	r25, r21
    54d6:	db 01       	movw	r26, r22
    54d8:	8d 93       	st	X+, r24
    54da:	9c 93       	st	X, r25
    54dc:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <xNumOfOverflows>
    54e0:	80 83       	st	Z, r24
    54e2:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    54e6:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    54ea:	92 83       	std	Z+2, r25	; 0x02
    54ec:	81 83       	std	Z+1, r24	; 0x01
    54ee:	80 e0       	ldi	r24, 0x00	; 0
    54f0:	05 c0       	rjmp	.+10     	; 0x54fc <xTaskCheckForTimeOut+0x70>
    54f2:	80 e0       	ldi	r24, 0x00	; 0
    54f4:	03 c0       	rjmp	.+6      	; 0x54fc <xTaskCheckForTimeOut+0x70>
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	01 c0       	rjmp	.+2      	; 0x54fc <xTaskCheckForTimeOut+0x70>
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	0f 90       	pop	r0
    54fe:	0f be       	out	0x3f, r0	; 63
    5500:	08 95       	ret

00005502 <vTaskMissedYield>:
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	80 93 aa 1a 	sts	0x1AAA, r24	; 0x801aaa <xYieldPending>
    5508:	08 95       	ret

0000550a <xTaskGetCurrentTaskHandle>:
    550a:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    550e:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5512:	08 95       	ret

00005514 <vTaskPriorityInherit>:
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	fc 01       	movw	r30, r24
    551e:	89 2b       	or	r24, r25
    5520:	09 f4       	brne	.+2      	; 0x5524 <vTaskPriorityInherit+0x10>
    5522:	55 c0       	rjmp	.+170    	; 0x55ce <vTaskPriorityInherit+0xba>
    5524:	26 89       	ldd	r18, Z+22	; 0x16
    5526:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    552a:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    552e:	56 96       	adiw	r26, 0x16	; 22
    5530:	8c 91       	ld	r24, X
    5532:	28 17       	cp	r18, r24
    5534:	08 f0       	brcs	.+2      	; 0x5538 <vTaskPriorityInherit+0x24>
    5536:	4b c0       	rjmp	.+150    	; 0x55ce <vTaskPriorityInherit+0xba>
    5538:	84 85       	ldd	r24, Z+12	; 0x0c
    553a:	95 85       	ldd	r25, Z+13	; 0x0d
    553c:	99 23       	and	r25, r25
    553e:	64 f0       	brlt	.+24     	; 0x5558 <vTaskPriorityInherit+0x44>
    5540:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5544:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5548:	56 96       	adiw	r26, 0x16	; 22
    554a:	3c 91       	ld	r19, X
    554c:	86 e0       	ldi	r24, 0x06	; 6
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	83 1b       	sub	r24, r19
    5552:	91 09       	sbc	r25, r1
    5554:	95 87       	std	Z+13, r25	; 0x0d
    5556:	84 87       	std	Z+12, r24	; 0x0c
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	c9 01       	movw	r24, r18
    555c:	88 0f       	add	r24, r24
    555e:	99 1f       	adc	r25, r25
    5560:	88 0f       	add	r24, r24
    5562:	99 1f       	adc	r25, r25
    5564:	88 0f       	add	r24, r24
    5566:	99 1f       	adc	r25, r25
    5568:	28 0f       	add	r18, r24
    556a:	39 1f       	adc	r19, r25
    556c:	27 52       	subi	r18, 0x27	; 39
    556e:	35 4e       	sbci	r19, 0xE5	; 229
    5570:	82 85       	ldd	r24, Z+10	; 0x0a
    5572:	93 85       	ldd	r25, Z+11	; 0x0b
    5574:	82 17       	cp	r24, r18
    5576:	93 07       	cpc	r25, r19
    5578:	19 f5       	brne	.+70     	; 0x55c0 <vTaskPriorityInherit+0xac>
    557a:	8f 01       	movw	r16, r30
    557c:	ef 01       	movw	r28, r30
    557e:	22 96       	adiw	r28, 0x02	; 2
    5580:	ce 01       	movw	r24, r28
    5582:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5586:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    558a:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    558e:	86 89       	ldd	r24, Z+22	; 0x16
    5590:	f8 01       	movw	r30, r16
    5592:	86 8b       	std	Z+22, r24	; 0x16
    5594:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    5598:	98 17       	cp	r25, r24
    559a:	10 f4       	brcc	.+4      	; 0x55a0 <vTaskPriorityInherit+0x8c>
    559c:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	9c 01       	movw	r18, r24
    55a4:	22 0f       	add	r18, r18
    55a6:	33 1f       	adc	r19, r19
    55a8:	22 0f       	add	r18, r18
    55aa:	33 1f       	adc	r19, r19
    55ac:	22 0f       	add	r18, r18
    55ae:	33 1f       	adc	r19, r19
    55b0:	82 0f       	add	r24, r18
    55b2:	93 1f       	adc	r25, r19
    55b4:	be 01       	movw	r22, r28
    55b6:	87 52       	subi	r24, 0x27	; 39
    55b8:	95 4e       	sbci	r25, 0xE5	; 229
    55ba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    55be:	07 c0       	rjmp	.+14     	; 0x55ce <vTaskPriorityInherit+0xba>
    55c0:	a0 91 0f 1b 	lds	r26, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    55c4:	b0 91 10 1b 	lds	r27, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    55c8:	56 96       	adiw	r26, 0x16	; 22
    55ca:	8c 91       	ld	r24, X
    55cc:	86 8b       	std	Z+22, r24	; 0x16
    55ce:	df 91       	pop	r29
    55d0:	cf 91       	pop	r28
    55d2:	1f 91       	pop	r17
    55d4:	0f 91       	pop	r16
    55d6:	08 95       	ret

000055d8 <xTaskPriorityDisinherit>:
    55d8:	0f 93       	push	r16
    55da:	1f 93       	push	r17
    55dc:	cf 93       	push	r28
    55de:	df 93       	push	r29
    55e0:	fc 01       	movw	r30, r24
    55e2:	89 2b       	or	r24, r25
    55e4:	79 f1       	breq	.+94     	; 0x5644 <xTaskPriorityDisinherit+0x6c>
    55e6:	82 a1       	ldd	r24, Z+34	; 0x22
    55e8:	81 50       	subi	r24, 0x01	; 1
    55ea:	82 a3       	std	Z+34, r24	; 0x22
    55ec:	26 89       	ldd	r18, Z+22	; 0x16
    55ee:	91 a1       	ldd	r25, Z+33	; 0x21
    55f0:	29 17       	cp	r18, r25
    55f2:	51 f1       	breq	.+84     	; 0x5648 <xTaskPriorityDisinherit+0x70>
    55f4:	81 11       	cpse	r24, r1
    55f6:	2a c0       	rjmp	.+84     	; 0x564c <xTaskPriorityDisinherit+0x74>
    55f8:	ef 01       	movw	r28, r30
    55fa:	8f 01       	movw	r16, r30
    55fc:	0e 5f       	subi	r16, 0xFE	; 254
    55fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5600:	c8 01       	movw	r24, r16
    5602:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5606:	89 a1       	ldd	r24, Y+33	; 0x21
    5608:	8e 8b       	std	Y+22, r24	; 0x16
    560a:	26 e0       	ldi	r18, 0x06	; 6
    560c:	30 e0       	ldi	r19, 0x00	; 0
    560e:	28 1b       	sub	r18, r24
    5610:	31 09       	sbc	r19, r1
    5612:	3d 87       	std	Y+13, r19	; 0x0d
    5614:	2c 87       	std	Y+12, r18	; 0x0c
    5616:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    561a:	98 17       	cp	r25, r24
    561c:	10 f4       	brcc	.+4      	; 0x5622 <xTaskPriorityDisinherit+0x4a>
    561e:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	9c 01       	movw	r18, r24
    5626:	22 0f       	add	r18, r18
    5628:	33 1f       	adc	r19, r19
    562a:	22 0f       	add	r18, r18
    562c:	33 1f       	adc	r19, r19
    562e:	22 0f       	add	r18, r18
    5630:	33 1f       	adc	r19, r19
    5632:	82 0f       	add	r24, r18
    5634:	93 1f       	adc	r25, r19
    5636:	b8 01       	movw	r22, r16
    5638:	87 52       	subi	r24, 0x27	; 39
    563a:	95 4e       	sbci	r25, 0xE5	; 229
    563c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	05 c0       	rjmp	.+10     	; 0x564e <xTaskPriorityDisinherit+0x76>
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	03 c0       	rjmp	.+6      	; 0x564e <xTaskPriorityDisinherit+0x76>
    5648:	80 e0       	ldi	r24, 0x00	; 0
    564a:	01 c0       	rjmp	.+2      	; 0x564e <xTaskPriorityDisinherit+0x76>
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	df 91       	pop	r29
    5650:	cf 91       	pop	r28
    5652:	1f 91       	pop	r17
    5654:	0f 91       	pop	r16
    5656:	08 95       	ret

00005658 <pvTaskIncrementMutexHeldCount>:
    5658:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    565c:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5660:	89 2b       	or	r24, r25
    5662:	39 f0       	breq	.+14     	; 0x5672 <pvTaskIncrementMutexHeldCount+0x1a>
    5664:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5668:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    566c:	82 a1       	ldd	r24, Z+34	; 0x22
    566e:	8f 5f       	subi	r24, 0xFF	; 255
    5670:	82 a3       	std	Z+34, r24	; 0x22
    5672:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5676:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    567a:	08 95       	ret

0000567c <ulTaskNotifyTake>:
    567c:	0f 93       	push	r16
    567e:	1f 93       	push	r17
    5680:	cf 93       	push	r28
    5682:	df 93       	push	r29
    5684:	18 2f       	mov	r17, r24
    5686:	eb 01       	movw	r28, r22
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	f8 94       	cli
    568c:	0f 92       	push	r0
    568e:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5692:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5696:	83 a1       	ldd	r24, Z+35	; 0x23
    5698:	94 a1       	ldd	r25, Z+36	; 0x24
    569a:	a5 a1       	ldd	r26, Z+37	; 0x25
    569c:	b6 a1       	ldd	r27, Z+38	; 0x26
    569e:	89 2b       	or	r24, r25
    56a0:	8a 2b       	or	r24, r26
    56a2:	8b 2b       	or	r24, r27
    56a4:	09 f0       	breq	.+2      	; 0x56a8 <ulTaskNotifyTake+0x2c>
    56a6:	58 c0       	rjmp	.+176    	; 0x5758 <ulTaskNotifyTake+0xdc>
    56a8:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    56ac:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    56b0:	81 e0       	ldi	r24, 0x01	; 1
    56b2:	87 a3       	std	Z+39, r24	; 0x27
    56b4:	20 97       	sbiw	r28, 0x00	; 0
    56b6:	09 f4       	brne	.+2      	; 0x56ba <ulTaskNotifyTake+0x3e>
    56b8:	4f c0       	rjmp	.+158    	; 0x5758 <ulTaskNotifyTake+0xdc>
    56ba:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    56be:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    56c2:	02 96       	adiw	r24, 0x02	; 2
    56c4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    56c8:	cf 3f       	cpi	r28, 0xFF	; 255
    56ca:	8f ef       	ldi	r24, 0xFF	; 255
    56cc:	d8 07       	cpc	r29, r24
    56ce:	59 f4       	brne	.+22     	; 0x56e6 <ulTaskNotifyTake+0x6a>
    56d0:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    56d4:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    56d8:	6e 5f       	subi	r22, 0xFE	; 254
    56da:	7f 4f       	sbci	r23, 0xFF	; 255
    56dc:	81 eb       	ldi	r24, 0xB1	; 177
    56de:	9a e1       	ldi	r25, 0x1A	; 26
    56e0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    56e4:	37 c0       	rjmp	.+110    	; 0x5754 <ulTaskNotifyTake+0xd8>
    56e6:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    56ea:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    56ee:	c8 0f       	add	r28, r24
    56f0:	d9 1f       	adc	r29, r25
    56f2:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    56f6:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    56fa:	d3 83       	std	Z+3, r29	; 0x03
    56fc:	c2 83       	std	Z+2, r28	; 0x02
    56fe:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    5702:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5706:	c8 17       	cp	r28, r24
    5708:	d9 07       	cpc	r29, r25
    570a:	68 f4       	brcc	.+26     	; 0x5726 <ulTaskNotifyTake+0xaa>
    570c:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5710:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5714:	80 91 c3 1a 	lds	r24, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    5718:	90 91 c4 1a 	lds	r25, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    571c:	6e 5f       	subi	r22, 0xFE	; 254
    571e:	7f 4f       	sbci	r23, 0xFF	; 255
    5720:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5724:	17 c0       	rjmp	.+46     	; 0x5754 <ulTaskNotifyTake+0xd8>
    5726:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    572a:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    572e:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    5732:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    5736:	6e 5f       	subi	r22, 0xFE	; 254
    5738:	7f 4f       	sbci	r23, 0xFF	; 255
    573a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    573e:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    5742:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5746:	c8 17       	cp	r28, r24
    5748:	d9 07       	cpc	r29, r25
    574a:	20 f4       	brcc	.+8      	; 0x5754 <ulTaskNotifyTake+0xd8>
    574c:	d0 93 a7 1a 	sts	0x1AA7, r29	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    5750:	c0 93 a6 1a 	sts	0x1AA6, r28	; 0x801aa6 <xNextTaskUnblockTime>
    5754:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    5758:	0f 90       	pop	r0
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	0f b6       	in	r0, 0x3f	; 63
    575e:	f8 94       	cli
    5760:	0f 92       	push	r0
    5762:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5766:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    576a:	63 a1       	ldd	r22, Z+35	; 0x23
    576c:	74 a1       	ldd	r23, Z+36	; 0x24
    576e:	85 a1       	ldd	r24, Z+37	; 0x25
    5770:	96 a1       	ldd	r25, Z+38	; 0x26
    5772:	61 15       	cp	r22, r1
    5774:	71 05       	cpc	r23, r1
    5776:	81 05       	cpc	r24, r1
    5778:	91 05       	cpc	r25, r1
    577a:	d9 f0       	breq	.+54     	; 0x57b2 <ulTaskNotifyTake+0x136>
    577c:	11 23       	and	r17, r17
    577e:	49 f0       	breq	.+18     	; 0x5792 <ulTaskNotifyTake+0x116>
    5780:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5784:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5788:	13 a2       	std	Z+35, r1	; 0x23
    578a:	14 a2       	std	Z+36, r1	; 0x24
    578c:	15 a2       	std	Z+37, r1	; 0x25
    578e:	16 a2       	std	Z+38, r1	; 0x26
    5790:	10 c0       	rjmp	.+32     	; 0x57b2 <ulTaskNotifyTake+0x136>
    5792:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5796:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    579a:	03 a1       	ldd	r16, Z+35	; 0x23
    579c:	14 a1       	ldd	r17, Z+36	; 0x24
    579e:	25 a1       	ldd	r18, Z+37	; 0x25
    57a0:	36 a1       	ldd	r19, Z+38	; 0x26
    57a2:	01 50       	subi	r16, 0x01	; 1
    57a4:	11 09       	sbc	r17, r1
    57a6:	21 09       	sbc	r18, r1
    57a8:	31 09       	sbc	r19, r1
    57aa:	03 a3       	std	Z+35, r16	; 0x23
    57ac:	14 a3       	std	Z+36, r17	; 0x24
    57ae:	25 a3       	std	Z+37, r18	; 0x25
    57b0:	36 a3       	std	Z+38, r19	; 0x26
    57b2:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    57b6:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    57ba:	17 a2       	std	Z+39, r1	; 0x27
    57bc:	0f 90       	pop	r0
    57be:	0f be       	out	0x3f, r0	; 63
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0f 91       	pop	r16
    57c8:	08 95       	ret

000057ca <xTaskNotifyWait>:
    57ca:	4f 92       	push	r4
    57cc:	5f 92       	push	r5
    57ce:	6f 92       	push	r6
    57d0:	7f 92       	push	r7
    57d2:	8f 92       	push	r8
    57d4:	9f 92       	push	r9
    57d6:	af 92       	push	r10
    57d8:	bf 92       	push	r11
    57da:	ef 92       	push	r14
    57dc:	ff 92       	push	r15
    57de:	0f 93       	push	r16
    57e0:	1f 93       	push	r17
    57e2:	49 01       	movw	r8, r18
    57e4:	5a 01       	movw	r10, r20
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	f8 94       	cli
    57ea:	0f 92       	push	r0
    57ec:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    57f0:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    57f4:	27 a1       	ldd	r18, Z+39	; 0x27
    57f6:	22 30       	cpi	r18, 0x02	; 2
    57f8:	09 f4       	brne	.+2      	; 0x57fc <xTaskNotifyWait+0x32>
    57fa:	6f c0       	rjmp	.+222    	; 0x58da <xTaskNotifyWait+0x110>
    57fc:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5800:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5804:	43 a0       	ldd	r4, Z+35	; 0x23
    5806:	54 a0       	ldd	r5, Z+36	; 0x24
    5808:	65 a0       	ldd	r6, Z+37	; 0x25
    580a:	76 a0       	ldd	r7, Z+38	; 0x26
    580c:	dc 01       	movw	r26, r24
    580e:	cb 01       	movw	r24, r22
    5810:	80 95       	com	r24
    5812:	90 95       	com	r25
    5814:	a0 95       	com	r26
    5816:	b0 95       	com	r27
    5818:	84 21       	and	r24, r4
    581a:	95 21       	and	r25, r5
    581c:	a6 21       	and	r26, r6
    581e:	b7 21       	and	r27, r7
    5820:	83 a3       	std	Z+35, r24	; 0x23
    5822:	94 a3       	std	Z+36, r25	; 0x24
    5824:	a5 a3       	std	Z+37, r26	; 0x25
    5826:	b6 a3       	std	Z+38, r27	; 0x26
    5828:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    582c:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	87 a3       	std	Z+39, r24	; 0x27
    5834:	e1 14       	cp	r14, r1
    5836:	f1 04       	cpc	r15, r1
    5838:	09 f4       	brne	.+2      	; 0x583c <xTaskNotifyWait+0x72>
    583a:	4f c0       	rjmp	.+158    	; 0x58da <xTaskNotifyWait+0x110>
    583c:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5840:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5844:	02 96       	adiw	r24, 0x02	; 2
    5846:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    584a:	8f ef       	ldi	r24, 0xFF	; 255
    584c:	e8 16       	cp	r14, r24
    584e:	f8 06       	cpc	r15, r24
    5850:	59 f4       	brne	.+22     	; 0x5868 <xTaskNotifyWait+0x9e>
    5852:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5856:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    585a:	6e 5f       	subi	r22, 0xFE	; 254
    585c:	7f 4f       	sbci	r23, 0xFF	; 255
    585e:	81 eb       	ldi	r24, 0xB1	; 177
    5860:	9a e1       	ldi	r25, 0x1A	; 26
    5862:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5866:	37 c0       	rjmp	.+110    	; 0x58d6 <xTaskNotifyWait+0x10c>
    5868:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    586c:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5870:	e8 0e       	add	r14, r24
    5872:	f9 1e       	adc	r15, r25
    5874:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5878:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    587c:	f3 82       	std	Z+3, r15	; 0x03
    587e:	e2 82       	std	Z+2, r14	; 0x02
    5880:	80 91 ae 1a 	lds	r24, 0x1AAE	; 0x801aae <xTickCount>
    5884:	90 91 af 1a 	lds	r25, 0x1AAF	; 0x801aaf <xTickCount+0x1>
    5888:	e8 16       	cp	r14, r24
    588a:	f9 06       	cpc	r15, r25
    588c:	68 f4       	brcc	.+26     	; 0x58a8 <xTaskNotifyWait+0xde>
    588e:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5892:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5896:	80 91 c3 1a 	lds	r24, 0x1AC3	; 0x801ac3 <pxOverflowDelayedTaskList>
    589a:	90 91 c4 1a 	lds	r25, 0x1AC4	; 0x801ac4 <pxOverflowDelayedTaskList+0x1>
    589e:	6e 5f       	subi	r22, 0xFE	; 254
    58a0:	7f 4f       	sbci	r23, 0xFF	; 255
    58a2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    58a6:	17 c0       	rjmp	.+46     	; 0x58d6 <xTaskNotifyWait+0x10c>
    58a8:	60 91 0f 1b 	lds	r22, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    58ac:	70 91 10 1b 	lds	r23, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    58b0:	80 91 c5 1a 	lds	r24, 0x1AC5	; 0x801ac5 <pxDelayedTaskList>
    58b4:	90 91 c6 1a 	lds	r25, 0x1AC6	; 0x801ac6 <pxDelayedTaskList+0x1>
    58b8:	6e 5f       	subi	r22, 0xFE	; 254
    58ba:	7f 4f       	sbci	r23, 0xFF	; 255
    58bc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    58c0:	80 91 a6 1a 	lds	r24, 0x1AA6	; 0x801aa6 <xNextTaskUnblockTime>
    58c4:	90 91 a7 1a 	lds	r25, 0x1AA7	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    58c8:	e8 16       	cp	r14, r24
    58ca:	f9 06       	cpc	r15, r25
    58cc:	20 f4       	brcc	.+8      	; 0x58d6 <xTaskNotifyWait+0x10c>
    58ce:	f0 92 a7 1a 	sts	0x1AA7, r15	; 0x801aa7 <xNextTaskUnblockTime+0x1>
    58d2:	e0 92 a6 1a 	sts	0x1AA6, r14	; 0x801aa6 <xNextTaskUnblockTime>
    58d6:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    58da:	0f 90       	pop	r0
    58dc:	0f be       	out	0x3f, r0	; 63
    58de:	0f b6       	in	r0, 0x3f	; 63
    58e0:	f8 94       	cli
    58e2:	0f 92       	push	r0
    58e4:	01 15       	cp	r16, r1
    58e6:	11 05       	cpc	r17, r1
    58e8:	69 f0       	breq	.+26     	; 0x5904 <xTaskNotifyWait+0x13a>
    58ea:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    58ee:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    58f2:	83 a1       	ldd	r24, Z+35	; 0x23
    58f4:	94 a1       	ldd	r25, Z+36	; 0x24
    58f6:	a5 a1       	ldd	r26, Z+37	; 0x25
    58f8:	b6 a1       	ldd	r27, Z+38	; 0x26
    58fa:	f8 01       	movw	r30, r16
    58fc:	80 83       	st	Z, r24
    58fe:	91 83       	std	Z+1, r25	; 0x01
    5900:	a2 83       	std	Z+2, r26	; 0x02
    5902:	b3 83       	std	Z+3, r27	; 0x03
    5904:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5908:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    590c:	87 a1       	ldd	r24, Z+39	; 0x27
    590e:	81 30       	cpi	r24, 0x01	; 1
    5910:	b1 f0       	breq	.+44     	; 0x593e <xTaskNotifyWait+0x174>
    5912:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5916:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    591a:	83 a1       	ldd	r24, Z+35	; 0x23
    591c:	94 a1       	ldd	r25, Z+36	; 0x24
    591e:	a5 a1       	ldd	r26, Z+37	; 0x25
    5920:	b6 a1       	ldd	r27, Z+38	; 0x26
    5922:	80 94       	com	r8
    5924:	90 94       	com	r9
    5926:	a0 94       	com	r10
    5928:	b0 94       	com	r11
    592a:	88 22       	and	r8, r24
    592c:	99 22       	and	r9, r25
    592e:	aa 22       	and	r10, r26
    5930:	bb 22       	and	r11, r27
    5932:	83 a2       	std	Z+35, r8	; 0x23
    5934:	94 a2       	std	Z+36, r9	; 0x24
    5936:	a5 a2       	std	Z+37, r10	; 0x25
    5938:	b6 a2       	std	Z+38, r11	; 0x26
    593a:	81 e0       	ldi	r24, 0x01	; 1
    593c:	01 c0       	rjmp	.+2      	; 0x5940 <xTaskNotifyWait+0x176>
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5944:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5948:	17 a2       	std	Z+39, r1	; 0x27
    594a:	0f 90       	pop	r0
    594c:	0f be       	out	0x3f, r0	; 63
    594e:	1f 91       	pop	r17
    5950:	0f 91       	pop	r16
    5952:	ff 90       	pop	r15
    5954:	ef 90       	pop	r14
    5956:	bf 90       	pop	r11
    5958:	af 90       	pop	r10
    595a:	9f 90       	pop	r9
    595c:	8f 90       	pop	r8
    595e:	7f 90       	pop	r7
    5960:	6f 90       	pop	r6
    5962:	5f 90       	pop	r5
    5964:	4f 90       	pop	r4
    5966:	08 95       	ret

00005968 <xTaskGenericNotify>:
    5968:	0f 93       	push	r16
    596a:	1f 93       	push	r17
    596c:	cf 93       	push	r28
    596e:	df 93       	push	r29
    5970:	fc 01       	movw	r30, r24
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	0f 92       	push	r0
    5978:	01 15       	cp	r16, r1
    597a:	11 05       	cpc	r17, r1
    597c:	49 f0       	breq	.+18     	; 0x5990 <xTaskGenericNotify+0x28>
    597e:	83 a1       	ldd	r24, Z+35	; 0x23
    5980:	94 a1       	ldd	r25, Z+36	; 0x24
    5982:	a5 a1       	ldd	r26, Z+37	; 0x25
    5984:	b6 a1       	ldd	r27, Z+38	; 0x26
    5986:	e8 01       	movw	r28, r16
    5988:	88 83       	st	Y, r24
    598a:	99 83       	std	Y+1, r25	; 0x01
    598c:	aa 83       	std	Y+2, r26	; 0x02
    598e:	bb 83       	std	Y+3, r27	; 0x03
    5990:	87 a1       	ldd	r24, Z+39	; 0x27
    5992:	92 e0       	ldi	r25, 0x02	; 2
    5994:	97 a3       	std	Z+39, r25	; 0x27
    5996:	22 30       	cpi	r18, 0x02	; 2
    5998:	b1 f0       	breq	.+44     	; 0x59c6 <xTaskGenericNotify+0x5e>
    599a:	18 f4       	brcc	.+6      	; 0x59a2 <xTaskGenericNotify+0x3a>
    599c:	21 30       	cpi	r18, 0x01	; 1
    599e:	31 f0       	breq	.+12     	; 0x59ac <xTaskGenericNotify+0x44>
    59a0:	2a c0       	rjmp	.+84     	; 0x59f6 <xTaskGenericNotify+0x8e>
    59a2:	23 30       	cpi	r18, 0x03	; 3
    59a4:	e9 f0       	breq	.+58     	; 0x59e0 <xTaskGenericNotify+0x78>
    59a6:	24 30       	cpi	r18, 0x04	; 4
    59a8:	01 f1       	breq	.+64     	; 0x59ea <xTaskGenericNotify+0x82>
    59aa:	25 c0       	rjmp	.+74     	; 0x59f6 <xTaskGenericNotify+0x8e>
    59ac:	03 a1       	ldd	r16, Z+35	; 0x23
    59ae:	14 a1       	ldd	r17, Z+36	; 0x24
    59b0:	25 a1       	ldd	r18, Z+37	; 0x25
    59b2:	36 a1       	ldd	r19, Z+38	; 0x26
    59b4:	40 2b       	or	r20, r16
    59b6:	51 2b       	or	r21, r17
    59b8:	62 2b       	or	r22, r18
    59ba:	73 2b       	or	r23, r19
    59bc:	43 a3       	std	Z+35, r20	; 0x23
    59be:	54 a3       	std	Z+36, r21	; 0x24
    59c0:	65 a3       	std	Z+37, r22	; 0x25
    59c2:	76 a3       	std	Z+38, r23	; 0x26
    59c4:	18 c0       	rjmp	.+48     	; 0x59f6 <xTaskGenericNotify+0x8e>
    59c6:	43 a1       	ldd	r20, Z+35	; 0x23
    59c8:	54 a1       	ldd	r21, Z+36	; 0x24
    59ca:	65 a1       	ldd	r22, Z+37	; 0x25
    59cc:	76 a1       	ldd	r23, Z+38	; 0x26
    59ce:	4f 5f       	subi	r20, 0xFF	; 255
    59d0:	5f 4f       	sbci	r21, 0xFF	; 255
    59d2:	6f 4f       	sbci	r22, 0xFF	; 255
    59d4:	7f 4f       	sbci	r23, 0xFF	; 255
    59d6:	43 a3       	std	Z+35, r20	; 0x23
    59d8:	54 a3       	std	Z+36, r21	; 0x24
    59da:	65 a3       	std	Z+37, r22	; 0x25
    59dc:	76 a3       	std	Z+38, r23	; 0x26
    59de:	0b c0       	rjmp	.+22     	; 0x59f6 <xTaskGenericNotify+0x8e>
    59e0:	43 a3       	std	Z+35, r20	; 0x23
    59e2:	54 a3       	std	Z+36, r21	; 0x24
    59e4:	65 a3       	std	Z+37, r22	; 0x25
    59e6:	76 a3       	std	Z+38, r23	; 0x26
    59e8:	06 c0       	rjmp	.+12     	; 0x59f6 <xTaskGenericNotify+0x8e>
    59ea:	82 30       	cpi	r24, 0x02	; 2
    59ec:	79 f1       	breq	.+94     	; 0x5a4c <xTaskGenericNotify+0xe4>
    59ee:	43 a3       	std	Z+35, r20	; 0x23
    59f0:	54 a3       	std	Z+36, r21	; 0x24
    59f2:	65 a3       	std	Z+37, r22	; 0x25
    59f4:	76 a3       	std	Z+38, r23	; 0x26
    59f6:	81 30       	cpi	r24, 0x01	; 1
    59f8:	59 f5       	brne	.+86     	; 0x5a50 <xTaskGenericNotify+0xe8>
    59fa:	ef 01       	movw	r28, r30
    59fc:	8f 01       	movw	r16, r30
    59fe:	0e 5f       	subi	r16, 0xFE	; 254
    5a00:	1f 4f       	sbci	r17, 0xFF	; 255
    5a02:	c8 01       	movw	r24, r16
    5a04:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5a08:	8e 89       	ldd	r24, Y+22	; 0x16
    5a0a:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    5a0e:	98 17       	cp	r25, r24
    5a10:	10 f4       	brcc	.+4      	; 0x5a16 <xTaskGenericNotify+0xae>
    5a12:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	9c 01       	movw	r18, r24
    5a1a:	22 0f       	add	r18, r18
    5a1c:	33 1f       	adc	r19, r19
    5a1e:	22 0f       	add	r18, r18
    5a20:	33 1f       	adc	r19, r19
    5a22:	22 0f       	add	r18, r18
    5a24:	33 1f       	adc	r19, r19
    5a26:	82 0f       	add	r24, r18
    5a28:	93 1f       	adc	r25, r19
    5a2a:	b8 01       	movw	r22, r16
    5a2c:	87 52       	subi	r24, 0x27	; 39
    5a2e:	95 4e       	sbci	r25, 0xE5	; 229
    5a30:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5a34:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5a38:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5a3c:	9e 89       	ldd	r25, Y+22	; 0x16
    5a3e:	86 89       	ldd	r24, Z+22	; 0x16
    5a40:	89 17       	cp	r24, r25
    5a42:	40 f4       	brcc	.+16     	; 0x5a54 <xTaskGenericNotify+0xec>
    5a44:	0e 94 57 17 	call	0x2eae	; 0x2eae <vPortYield>
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	05 c0       	rjmp	.+10     	; 0x5a56 <xTaskGenericNotify+0xee>
    5a4c:	80 e0       	ldi	r24, 0x00	; 0
    5a4e:	03 c0       	rjmp	.+6      	; 0x5a56 <xTaskGenericNotify+0xee>
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	01 c0       	rjmp	.+2      	; 0x5a56 <xTaskGenericNotify+0xee>
    5a54:	81 e0       	ldi	r24, 0x01	; 1
    5a56:	0f 90       	pop	r0
    5a58:	0f be       	out	0x3f, r0	; 63
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	1f 91       	pop	r17
    5a60:	0f 91       	pop	r16
    5a62:	08 95       	ret

00005a64 <xTaskGenericNotifyFromISR>:
    5a64:	ef 92       	push	r14
    5a66:	ff 92       	push	r15
    5a68:	0f 93       	push	r16
    5a6a:	1f 93       	push	r17
    5a6c:	cf 93       	push	r28
    5a6e:	df 93       	push	r29
    5a70:	fc 01       	movw	r30, r24
    5a72:	01 15       	cp	r16, r1
    5a74:	11 05       	cpc	r17, r1
    5a76:	49 f0       	breq	.+18     	; 0x5a8a <xTaskGenericNotifyFromISR+0x26>
    5a78:	83 a1       	ldd	r24, Z+35	; 0x23
    5a7a:	94 a1       	ldd	r25, Z+36	; 0x24
    5a7c:	a5 a1       	ldd	r26, Z+37	; 0x25
    5a7e:	b6 a1       	ldd	r27, Z+38	; 0x26
    5a80:	e8 01       	movw	r28, r16
    5a82:	88 83       	st	Y, r24
    5a84:	99 83       	std	Y+1, r25	; 0x01
    5a86:	aa 83       	std	Y+2, r26	; 0x02
    5a88:	bb 83       	std	Y+3, r27	; 0x03
    5a8a:	87 a1       	ldd	r24, Z+39	; 0x27
    5a8c:	92 e0       	ldi	r25, 0x02	; 2
    5a8e:	97 a3       	std	Z+39, r25	; 0x27
    5a90:	22 30       	cpi	r18, 0x02	; 2
    5a92:	b1 f0       	breq	.+44     	; 0x5ac0 <xTaskGenericNotifyFromISR+0x5c>
    5a94:	18 f4       	brcc	.+6      	; 0x5a9c <xTaskGenericNotifyFromISR+0x38>
    5a96:	21 30       	cpi	r18, 0x01	; 1
    5a98:	31 f0       	breq	.+12     	; 0x5aa6 <xTaskGenericNotifyFromISR+0x42>
    5a9a:	2a c0       	rjmp	.+84     	; 0x5af0 <xTaskGenericNotifyFromISR+0x8c>
    5a9c:	23 30       	cpi	r18, 0x03	; 3
    5a9e:	e9 f0       	breq	.+58     	; 0x5ada <xTaskGenericNotifyFromISR+0x76>
    5aa0:	24 30       	cpi	r18, 0x04	; 4
    5aa2:	01 f1       	breq	.+64     	; 0x5ae4 <xTaskGenericNotifyFromISR+0x80>
    5aa4:	25 c0       	rjmp	.+74     	; 0x5af0 <xTaskGenericNotifyFromISR+0x8c>
    5aa6:	03 a1       	ldd	r16, Z+35	; 0x23
    5aa8:	14 a1       	ldd	r17, Z+36	; 0x24
    5aaa:	25 a1       	ldd	r18, Z+37	; 0x25
    5aac:	36 a1       	ldd	r19, Z+38	; 0x26
    5aae:	40 2b       	or	r20, r16
    5ab0:	51 2b       	or	r21, r17
    5ab2:	62 2b       	or	r22, r18
    5ab4:	73 2b       	or	r23, r19
    5ab6:	43 a3       	std	Z+35, r20	; 0x23
    5ab8:	54 a3       	std	Z+36, r21	; 0x24
    5aba:	65 a3       	std	Z+37, r22	; 0x25
    5abc:	76 a3       	std	Z+38, r23	; 0x26
    5abe:	18 c0       	rjmp	.+48     	; 0x5af0 <xTaskGenericNotifyFromISR+0x8c>
    5ac0:	43 a1       	ldd	r20, Z+35	; 0x23
    5ac2:	54 a1       	ldd	r21, Z+36	; 0x24
    5ac4:	65 a1       	ldd	r22, Z+37	; 0x25
    5ac6:	76 a1       	ldd	r23, Z+38	; 0x26
    5ac8:	4f 5f       	subi	r20, 0xFF	; 255
    5aca:	5f 4f       	sbci	r21, 0xFF	; 255
    5acc:	6f 4f       	sbci	r22, 0xFF	; 255
    5ace:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad0:	43 a3       	std	Z+35, r20	; 0x23
    5ad2:	54 a3       	std	Z+36, r21	; 0x24
    5ad4:	65 a3       	std	Z+37, r22	; 0x25
    5ad6:	76 a3       	std	Z+38, r23	; 0x26
    5ad8:	0b c0       	rjmp	.+22     	; 0x5af0 <xTaskGenericNotifyFromISR+0x8c>
    5ada:	43 a3       	std	Z+35, r20	; 0x23
    5adc:	54 a3       	std	Z+36, r21	; 0x24
    5ade:	65 a3       	std	Z+37, r22	; 0x25
    5ae0:	76 a3       	std	Z+38, r23	; 0x26
    5ae2:	06 c0       	rjmp	.+12     	; 0x5af0 <xTaskGenericNotifyFromISR+0x8c>
    5ae4:	82 30       	cpi	r24, 0x02	; 2
    5ae6:	f1 f1       	breq	.+124    	; 0x5b64 <xTaskGenericNotifyFromISR+0x100>
    5ae8:	43 a3       	std	Z+35, r20	; 0x23
    5aea:	54 a3       	std	Z+36, r21	; 0x24
    5aec:	65 a3       	std	Z+37, r22	; 0x25
    5aee:	76 a3       	std	Z+38, r23	; 0x26
    5af0:	81 30       	cpi	r24, 0x01	; 1
    5af2:	d1 f5       	brne	.+116    	; 0x5b68 <xTaskGenericNotifyFromISR+0x104>
    5af4:	ef 01       	movw	r28, r30
    5af6:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <uxSchedulerSuspended>
    5afa:	81 11       	cpse	r24, r1
    5afc:	1d c0       	rjmp	.+58     	; 0x5b38 <xTaskGenericNotifyFromISR+0xd4>
    5afe:	8f 01       	movw	r16, r30
    5b00:	0e 5f       	subi	r16, 0xFE	; 254
    5b02:	1f 4f       	sbci	r17, 0xFF	; 255
    5b04:	c8 01       	movw	r24, r16
    5b06:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5b0a:	8e 89       	ldd	r24, Y+22	; 0x16
    5b0c:	90 91 ad 1a 	lds	r25, 0x1AAD	; 0x801aad <uxTopReadyPriority>
    5b10:	98 17       	cp	r25, r24
    5b12:	10 f4       	brcc	.+4      	; 0x5b18 <xTaskGenericNotifyFromISR+0xb4>
    5b14:	80 93 ad 1a 	sts	0x1AAD, r24	; 0x801aad <uxTopReadyPriority>
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	9c 01       	movw	r18, r24
    5b1c:	22 0f       	add	r18, r18
    5b1e:	33 1f       	adc	r19, r19
    5b20:	22 0f       	add	r18, r18
    5b22:	33 1f       	adc	r19, r19
    5b24:	22 0f       	add	r18, r18
    5b26:	33 1f       	adc	r19, r19
    5b28:	82 0f       	add	r24, r18
    5b2a:	93 1f       	adc	r25, r19
    5b2c:	b8 01       	movw	r22, r16
    5b2e:	87 52       	subi	r24, 0x27	; 39
    5b30:	95 4e       	sbci	r25, 0xE5	; 229
    5b32:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b36:	07 c0       	rjmp	.+14     	; 0x5b46 <xTaskGenericNotifyFromISR+0xe2>
    5b38:	bf 01       	movw	r22, r30
    5b3a:	64 5f       	subi	r22, 0xF4	; 244
    5b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b3e:	8a eb       	ldi	r24, 0xBA	; 186
    5b40:	9a e1       	ldi	r25, 0x1A	; 26
    5b42:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5b46:	e0 91 0f 1b 	lds	r30, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5b4a:	f0 91 10 1b 	lds	r31, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>
    5b4e:	9e 89       	ldd	r25, Y+22	; 0x16
    5b50:	86 89       	ldd	r24, Z+22	; 0x16
    5b52:	89 17       	cp	r24, r25
    5b54:	58 f4       	brcc	.+22     	; 0x5b6c <xTaskGenericNotifyFromISR+0x108>
    5b56:	e1 14       	cp	r14, r1
    5b58:	f1 04       	cpc	r15, r1
    5b5a:	51 f0       	breq	.+20     	; 0x5b70 <xTaskGenericNotifyFromISR+0x10c>
    5b5c:	81 e0       	ldi	r24, 0x01	; 1
    5b5e:	f7 01       	movw	r30, r14
    5b60:	80 83       	st	Z, r24
    5b62:	07 c0       	rjmp	.+14     	; 0x5b72 <xTaskGenericNotifyFromISR+0x10e>
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	05 c0       	rjmp	.+10     	; 0x5b72 <xTaskGenericNotifyFromISR+0x10e>
    5b68:	81 e0       	ldi	r24, 0x01	; 1
    5b6a:	03 c0       	rjmp	.+6      	; 0x5b72 <xTaskGenericNotifyFromISR+0x10e>
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	01 c0       	rjmp	.+2      	; 0x5b72 <xTaskGenericNotifyFromISR+0x10e>
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	df 91       	pop	r29
    5b74:	cf 91       	pop	r28
    5b76:	1f 91       	pop	r17
    5b78:	0f 91       	pop	r16
    5b7a:	ff 90       	pop	r15
    5b7c:	ef 90       	pop	r14
    5b7e:	08 95       	ret

00005b80 <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5b80:	00 97       	sbiw	r24, 0x00	; 0
    5b82:	21 f4       	brne	.+8      	; 0x5b8c <xTaskNotifyStateClear+0xc>
    5b84:	80 91 0f 1b 	lds	r24, 0x1B0F	; 0x801b0f <pxCurrentTCB>
    5b88:	90 91 10 1b 	lds	r25, 0x1B10	; 0x801b10 <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5b8c:	0f b6       	in	r0, 0x3f	; 63
    5b8e:	f8 94       	cli
    5b90:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5b92:	fc 01       	movw	r30, r24
    5b94:	27 a1       	ldd	r18, Z+39	; 0x27
    5b96:	22 30       	cpi	r18, 0x02	; 2
    5b98:	19 f4       	brne	.+6      	; 0x5ba0 <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5b9a:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	01 c0       	rjmp	.+2      	; 0x5ba2 <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5ba2:	0f 90       	pop	r0
    5ba4:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5ba6:	08 95       	ret

00005ba8 <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5ba8:	cf 93       	push	r28
    5baa:	df 93       	push	r29
    5bac:	00 d0       	rcall	.+0      	; 0x5bae <vFrameReaderTask+0x6>
    5bae:	1f 92       	push	r1
    5bb0:	cd b7       	in	r28, 0x3d	; 61
    5bb2:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5bb4:	aa dc       	rcall	.-1708   	; 0x550a <xTaskGetCurrentTaskHandle>
    5bb6:	90 93 78 1b 	sts	0x1B78, r25	; 0x801b78 <frame_receiver+0x1>
    5bba:	80 93 77 1b 	sts	0x1B77, r24	; 0x801b77 <frame_receiver>
	uint32_t notification_value = 0;
    5bbe:	19 82       	std	Y+1, r1	; 0x01
    5bc0:	1a 82       	std	Y+2, r1	; 0x02
    5bc2:	1b 82       	std	Y+3, r1	; 0x03
    5bc4:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5bc6:	ee 24       	eor	r14, r14
    5bc8:	ea 94       	dec	r14
    5bca:	fe 2c       	mov	r15, r14
    5bcc:	8e 01       	movw	r16, r28
    5bce:	0f 5f       	subi	r16, 0xFF	; 255
    5bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd2:	2f ef       	ldi	r18, 0xFF	; 255
    5bd4:	3f ef       	ldi	r19, 0xFF	; 255
    5bd6:	a9 01       	movw	r20, r18
    5bd8:	6f ef       	ldi	r22, 0xFF	; 255
    5bda:	7f ef       	ldi	r23, 0xFF	; 255
    5bdc:	cb 01       	movw	r24, r22
    5bde:	f5 dd       	rcall	.-1046   	; 0x57ca <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5be0:	e0 91 dc 1b 	lds	r30, 0x1BDC	; 0x801bdc <receive_callback>
    5be4:	f0 91 dd 1b 	lds	r31, 0x1BDD	; 0x801bdd <receive_callback+0x1>
    5be8:	30 97       	sbiw	r30, 0x00	; 0
    5bea:	69 f3       	breq	.-38     	; 0x5bc6 <vFrameReaderTask+0x1e>
    5bec:	69 81       	ldd	r22, Y+1	; 0x01
    5bee:	7a 81       	ldd	r23, Y+2	; 0x02
    5bf0:	8e ed       	ldi	r24, 0xDE	; 222
    5bf2:	9b e1       	ldi	r25, 0x1B	; 27
    5bf4:	19 95       	eicall
    5bf6:	e7 cf       	rjmp	.-50     	; 0x5bc6 <vFrameReaderTask+0x1e>

00005bf8 <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
    5c00:	c4 56       	subi	r28, 0x64	; 100
    5c02:	d1 09       	sbc	r29, r1
    5c04:	0f b6       	in	r0, 0x3f	; 63
    5c06:	f8 94       	cli
    5c08:	de bf       	out	0x3e, r29	; 62
    5c0a:	0f be       	out	0x3f, r0	; 63
    5c0c:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5c0e:	00 ed       	ldi	r16, 0xD0	; 208
    5c10:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5c12:	0f 2e       	mov	r0, r31
    5c14:	f6 ed       	ldi	r31, 0xD6	; 214
    5c16:	ef 2e       	mov	r14, r31
    5c18:	f1 2c       	mov	r15, r1
    5c1a:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	4f ef       	ldi	r20, 0xFF	; 255
    5c20:	5f ef       	ldi	r21, 0xFF	; 255
    5c22:	60 e0       	ldi	r22, 0x00	; 0
    5c24:	70 e0       	ldi	r23, 0x00	; 0
    5c26:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <xUartMutex>
    5c2a:	90 91 9e 1b 	lds	r25, 0x1B9E	; 0x801b9e <xUartMutex+0x1>
    5c2e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5c32:	24 e6       	ldi	r18, 0x64	; 100
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	40 e0       	ldi	r20, 0x00	; 0
    5c38:	be 01       	movw	r22, r28
    5c3a:	6f 5f       	subi	r22, 0xFF	; 255
    5c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c3e:	82 e4       	ldi	r24, 0x42	; 66
    5c40:	9c e1       	ldi	r25, 0x1C	; 28
    5c42:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5c46:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5c48:	60 e0       	ldi	r22, 0x00	; 0
    5c4a:	70 e0       	ldi	r23, 0x00	; 0
    5c4c:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <xUartMutex>
    5c50:	90 91 9e 1b 	lds	r25, 0x1B9E	; 0x801b9e <xUartMutex+0x1>
    5c54:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
		if(num>0) {
    5c58:	c1 14       	cp	r12, r1
    5c5a:	d1 04       	cpc	r13, r1
    5c5c:	79 f0       	breq	.+30     	; 0x5c7c <vUartSendTask+0x84>
    5c5e:	fe 01       	movw	r30, r28
    5c60:	31 96       	adiw	r30, 0x01	; 1
    5c62:	9f 01       	movw	r18, r30
    5c64:	2c 0d       	add	r18, r12
    5c66:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5c68:	d8 01       	movw	r26, r16
    5c6a:	8c 91       	ld	r24, X
    5c6c:	85 ff       	sbrs	r24, 5
    5c6e:	fc cf       	rjmp	.-8      	; 0x5c68 <vUartSendTask+0x70>
				UDR2 = data[i];
    5c70:	81 91       	ld	r24, Z+
    5c72:	d7 01       	movw	r26, r14
    5c74:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5c76:	2e 17       	cp	r18, r30
    5c78:	3f 07       	cpc	r19, r31
    5c7a:	b1 f7       	brne	.-20     	; 0x5c68 <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5c7c:	8a e0       	ldi	r24, 0x0A	; 10
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	0e 94 9b 24 	call	0x4936	; 0x4936 <vTaskDelay>
	}
    5c84:	cb cf       	rjmp	.-106    	; 0x5c1c <vUartSendTask+0x24>

00005c86 <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5c86:	af 92       	push	r10
    5c88:	bf 92       	push	r11
    5c8a:	cf 92       	push	r12
    5c8c:	df 92       	push	r13
    5c8e:	ef 92       	push	r14
    5c90:	ff 92       	push	r15
    5c92:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5c94:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5c98:	89 e1       	ldi	r24, 0x19	; 25
    5c9a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
    5c9e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE;
    5ca2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	UCSR0C = (3 << UCSZ00); /* 8-bit data */
    5ca6:	86 e0       	ldi	r24, 0x06	; 6
    5ca8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   /* Enable RX and TX */
    5cac:	98 e1       	ldi	r25, 0x18	; 24
    5cae:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5cb2:	90 ee       	ldi	r25, 0xE0	; 224
    5cb4:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5cb8:	98 e9       	ldi	r25, 0x98	; 152
    5cba:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5cbe:	e2 ed       	ldi	r30, 0xD2	; 210
    5cc0:	f0 e0       	ldi	r31, 0x00	; 0
    5cc2:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5cc4:	80 81       	ld	r24, Z
    5cc6:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5cc8:	84 e6       	ldi	r24, 0x64	; 100
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5cd0:	44 e6       	ldi	r20, 0x64	; 100
    5cd2:	50 e0       	ldi	r21, 0x00	; 0
    5cd4:	bc 01       	movw	r22, r24
    5cd6:	82 e4       	ldi	r24, 0x42	; 66
    5cd8:	9c e1       	ldi	r25, 0x1C	; 28
    5cda:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5cde:	a1 2c       	mov	r10, r1
    5ce0:	b1 2c       	mov	r11, r1
    5ce2:	c1 2c       	mov	r12, r1
    5ce4:	d1 2c       	mov	r13, r1
    5ce6:	e1 2c       	mov	r14, r1
    5ce8:	f1 2c       	mov	r15, r1
    5cea:	04 e0       	ldi	r16, 0x04	; 4
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	4c e2       	ldi	r20, 0x2C	; 44
    5cf2:	51 e0       	ldi	r21, 0x01	; 1
    5cf4:	6c e6       	ldi	r22, 0x6C	; 108
    5cf6:	77 e0       	ldi	r23, 0x07	; 7
    5cf8:	84 ed       	ldi	r24, 0xD4	; 212
    5cfa:	9d e2       	ldi	r25, 0x2D	; 45
    5cfc:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	30 e0       	ldi	r19, 0x00	; 0
    5d04:	4c e2       	ldi	r20, 0x2C	; 44
    5d06:	51 e0       	ldi	r21, 0x01	; 1
    5d08:	68 e7       	ldi	r22, 0x78	; 120
    5d0a:	77 e0       	ldi	r23, 0x07	; 7
    5d0c:	8c ef       	ldi	r24, 0xFC	; 252
    5d0e:	9d e2       	ldi	r25, 0x2D	; 45
    5d10:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5d14:	81 e0       	ldi	r24, 0x01	; 1
    5d16:	0e 94 84 18 	call	0x3108	; 0x3108 <xQueueCreateMutex>
    5d1a:	90 93 9e 1b 	sts	0x1B9E, r25	; 0x801b9e <xUartMutex+0x1>
    5d1e:	80 93 9d 1b 	sts	0x1B9D, r24	; 0x801b9d <xUartMutex>
}
    5d22:	0f 91       	pop	r16
    5d24:	ff 90       	pop	r15
    5d26:	ef 90       	pop	r14
    5d28:	df 90       	pop	r13
    5d2a:	cf 90       	pop	r12
    5d2c:	bf 90       	pop	r11
    5d2e:	af 90       	pop	r10
    5d30:	08 95       	ret

00005d32 <vUSART_send>:

void vUSART_send(uint8_t *data, uint16_t len) {
    5d32:	0f 93       	push	r16
    5d34:	1f 93       	push	r17
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	ec 01       	movw	r28, r24
    5d3c:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5d3e:	20 e0       	ldi	r18, 0x00	; 0
    5d40:	4f ef       	ldi	r20, 0xFF	; 255
    5d42:	5f ef       	ldi	r21, 0xFF	; 255
    5d44:	60 e0       	ldi	r22, 0x00	; 0
    5d46:	70 e0       	ldi	r23, 0x00	; 0
    5d48:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <xUartMutex>
    5d4c:	90 91 9e 1b 	lds	r25, 0x1B9E	; 0x801b9e <xUartMutex+0x1>
    5d50:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5d54:	a8 01       	movw	r20, r16
    5d56:	be 01       	movw	r22, r28
    5d58:	82 e4       	ldi	r24, 0x42	; 66
    5d5a:	9c e1       	ldi	r25, 0x1C	; 28
    5d5c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5d60:	60 e0       	ldi	r22, 0x00	; 0
    5d62:	70 e0       	ldi	r23, 0x00	; 0
    5d64:	80 91 9d 1b 	lds	r24, 0x1B9D	; 0x801b9d <xUartMutex>
    5d68:	90 91 9e 1b 	lds	r25, 0x1B9E	; 0x801b9e <xUartMutex+0x1>
    5d6c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <xQueueGive>
}
    5d70:	df 91       	pop	r29
    5d72:	cf 91       	pop	r28
    5d74:	1f 91       	pop	r17
    5d76:	0f 91       	pop	r16
    5d78:	08 95       	ret

00005d7a <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    5d7a:	90 93 dd 1b 	sts	0x1BDD, r25	; 0x801bdd <receive_callback+0x1>
    5d7e:	80 93 dc 1b 	sts	0x1BDC, r24	; 0x801bdc <receive_callback>
    5d82:	08 95       	ret

00005d84 <__vector_51>:
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}

ISR(USART2_RX_vect){
    5d84:	1f 92       	push	r1
    5d86:	0f 92       	push	r0
    5d88:	0f b6       	in	r0, 0x3f	; 63
    5d8a:	0f 92       	push	r0
    5d8c:	11 24       	eor	r1, r1
    5d8e:	0b b6       	in	r0, 0x3b	; 59
    5d90:	0f 92       	push	r0
    5d92:	cf 92       	push	r12
    5d94:	df 92       	push	r13
    5d96:	ef 92       	push	r14
    5d98:	ff 92       	push	r15
    5d9a:	0f 93       	push	r16
    5d9c:	1f 93       	push	r17
    5d9e:	2f 93       	push	r18
    5da0:	3f 93       	push	r19
    5da2:	4f 93       	push	r20
    5da4:	5f 93       	push	r21
    5da6:	6f 93       	push	r22
    5da8:	7f 93       	push	r23
    5daa:	8f 93       	push	r24
    5dac:	9f 93       	push	r25
    5dae:	af 93       	push	r26
    5db0:	bf 93       	push	r27
    5db2:	cf 93       	push	r28
    5db4:	df 93       	push	r29
    5db6:	ef 93       	push	r30
    5db8:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    5dba:	80 91 75 1b 	lds	r24, 0x1B75	; 0x801b75 <input_index.2064>
    5dbe:	90 91 76 1b 	lds	r25, 0x1B76	; 0x801b76 <input_index.2064+0x1>
    5dc2:	ec 01       	movw	r28, r24
    5dc4:	21 96       	adiw	r28, 0x01	; 1
    5dc6:	d0 93 76 1b 	sts	0x1B76, r29	; 0x801b76 <input_index.2064+0x1>
    5dca:	c0 93 75 1b 	sts	0x1B75, r28	; 0x801b75 <input_index.2064>
    5dce:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5dd2:	fc 01       	movw	r30, r24
    5dd4:	ef 5e       	subi	r30, 0xEF	; 239
    5dd6:	f4 4e       	sbci	r31, 0xE4	; 228
    5dd8:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    5dda:	21 11       	cpse	r18, r1
    5ddc:	1d c0       	rjmp	.+58     	; 0x5e18 <__vector_51+0x94>
		if(frame_receiver != NULL) {
    5dde:	c0 90 77 1b 	lds	r12, 0x1B77	; 0x801b77 <frame_receiver>
    5de2:	d0 90 78 1b 	lds	r13, 0x1B78	; 0x801b78 <frame_receiver+0x1>
    5de6:	c1 14       	cp	r12, r1
    5de8:	d1 04       	cpc	r13, r1
    5dea:	89 f0       	breq	.+34     	; 0x5e0e <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    5dec:	ae 01       	movw	r20, r28
    5dee:	61 e1       	ldi	r22, 0x11	; 17
    5df0:	7b e1       	ldi	r23, 0x1B	; 27
    5df2:	8e ed       	ldi	r24, 0xDE	; 222
    5df4:	9b e1       	ldi	r25, 0x1B	; 27
    5df6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    5dfa:	ae 01       	movw	r20, r28
    5dfc:	60 e0       	ldi	r22, 0x00	; 0
    5dfe:	70 e0       	ldi	r23, 0x00	; 0
    5e00:	e1 2c       	mov	r14, r1
    5e02:	f1 2c       	mov	r15, r1
    5e04:	00 e0       	ldi	r16, 0x00	; 0
    5e06:	10 e0       	ldi	r17, 0x00	; 0
    5e08:	24 e0       	ldi	r18, 0x04	; 4
    5e0a:	c6 01       	movw	r24, r12
    5e0c:	2b de       	rcall	.-938    	; 0x5a64 <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    5e0e:	10 92 76 1b 	sts	0x1B76, r1	; 0x801b76 <input_index.2064+0x1>
    5e12:	10 92 75 1b 	sts	0x1B75, r1	; 0x801b75 <input_index.2064>
    5e16:	07 c0       	rjmp	.+14     	; 0x5e26 <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    5e18:	c5 36       	cpi	r28, 0x65	; 101
    5e1a:	d1 05       	cpc	r29, r1
    5e1c:	20 f0       	brcs	.+8      	; 0x5e26 <__vector_51+0xa2>
    5e1e:	10 92 76 1b 	sts	0x1B76, r1	; 0x801b76 <input_index.2064+0x1>
    5e22:	10 92 75 1b 	sts	0x1B75, r1	; 0x801b75 <input_index.2064>
    5e26:	ff 91       	pop	r31
    5e28:	ef 91       	pop	r30
    5e2a:	df 91       	pop	r29
    5e2c:	cf 91       	pop	r28
    5e2e:	bf 91       	pop	r27
    5e30:	af 91       	pop	r26
    5e32:	9f 91       	pop	r25
    5e34:	8f 91       	pop	r24
    5e36:	7f 91       	pop	r23
    5e38:	6f 91       	pop	r22
    5e3a:	5f 91       	pop	r21
    5e3c:	4f 91       	pop	r20
    5e3e:	3f 91       	pop	r19
    5e40:	2f 91       	pop	r18
    5e42:	1f 91       	pop	r17
    5e44:	0f 91       	pop	r16
    5e46:	ff 90       	pop	r15
    5e48:	ef 90       	pop	r14
    5e4a:	df 90       	pop	r13
    5e4c:	cf 90       	pop	r12
    5e4e:	0f 90       	pop	r0
    5e50:	0b be       	out	0x3b, r0	; 59
    5e52:	0f 90       	pop	r0
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	0f 90       	pop	r0
    5e58:	1f 90       	pop	r1
    5e5a:	18 95       	reti

00005e5c <__subsf3>:
    5e5c:	50 58       	subi	r21, 0x80	; 128

00005e5e <__addsf3>:
    5e5e:	bb 27       	eor	r27, r27
    5e60:	aa 27       	eor	r26, r26
    5e62:	0e d0       	rcall	.+28     	; 0x5e80 <__addsf3x>
    5e64:	27 c2       	rjmp	.+1102   	; 0x62b4 <__fp_round>
    5e66:	f0 d1       	rcall	.+992    	; 0x6248 <__fp_pscA>
    5e68:	30 f0       	brcs	.+12     	; 0x5e76 <__addsf3+0x18>
    5e6a:	f5 d1       	rcall	.+1002   	; 0x6256 <__fp_pscB>
    5e6c:	20 f0       	brcs	.+8      	; 0x5e76 <__addsf3+0x18>
    5e6e:	31 f4       	brne	.+12     	; 0x5e7c <__addsf3+0x1e>
    5e70:	9f 3f       	cpi	r25, 0xFF	; 255
    5e72:	11 f4       	brne	.+4      	; 0x5e78 <__addsf3+0x1a>
    5e74:	1e f4       	brtc	.+6      	; 0x5e7c <__addsf3+0x1e>
    5e76:	c0 c1       	rjmp	.+896    	; 0x61f8 <__fp_nan>
    5e78:	0e f4       	brtc	.+2      	; 0x5e7c <__addsf3+0x1e>
    5e7a:	e0 95       	com	r30
    5e7c:	e7 fb       	bst	r30, 7
    5e7e:	b6 c1       	rjmp	.+876    	; 0x61ec <__fp_inf>

00005e80 <__addsf3x>:
    5e80:	e9 2f       	mov	r30, r25
    5e82:	3a d2       	rcall	.+1140   	; 0x62f8 <__fp_split3>
    5e84:	80 f3       	brcs	.-32     	; 0x5e66 <__addsf3+0x8>
    5e86:	ba 17       	cp	r27, r26
    5e88:	62 07       	cpc	r22, r18
    5e8a:	73 07       	cpc	r23, r19
    5e8c:	84 07       	cpc	r24, r20
    5e8e:	95 07       	cpc	r25, r21
    5e90:	18 f0       	brcs	.+6      	; 0x5e98 <__addsf3x+0x18>
    5e92:	71 f4       	brne	.+28     	; 0x5eb0 <__addsf3x+0x30>
    5e94:	9e f5       	brtc	.+102    	; 0x5efc <__addsf3x+0x7c>
    5e96:	52 c2       	rjmp	.+1188   	; 0x633c <__fp_zero>
    5e98:	0e f4       	brtc	.+2      	; 0x5e9c <__addsf3x+0x1c>
    5e9a:	e0 95       	com	r30
    5e9c:	0b 2e       	mov	r0, r27
    5e9e:	ba 2f       	mov	r27, r26
    5ea0:	a0 2d       	mov	r26, r0
    5ea2:	0b 01       	movw	r0, r22
    5ea4:	b9 01       	movw	r22, r18
    5ea6:	90 01       	movw	r18, r0
    5ea8:	0c 01       	movw	r0, r24
    5eaa:	ca 01       	movw	r24, r20
    5eac:	a0 01       	movw	r20, r0
    5eae:	11 24       	eor	r1, r1
    5eb0:	ff 27       	eor	r31, r31
    5eb2:	59 1b       	sub	r21, r25
    5eb4:	99 f0       	breq	.+38     	; 0x5edc <__addsf3x+0x5c>
    5eb6:	59 3f       	cpi	r21, 0xF9	; 249
    5eb8:	50 f4       	brcc	.+20     	; 0x5ece <__addsf3x+0x4e>
    5eba:	50 3e       	cpi	r21, 0xE0	; 224
    5ebc:	68 f1       	brcs	.+90     	; 0x5f18 <__addsf3x+0x98>
    5ebe:	1a 16       	cp	r1, r26
    5ec0:	f0 40       	sbci	r31, 0x00	; 0
    5ec2:	a2 2f       	mov	r26, r18
    5ec4:	23 2f       	mov	r18, r19
    5ec6:	34 2f       	mov	r19, r20
    5ec8:	44 27       	eor	r20, r20
    5eca:	58 5f       	subi	r21, 0xF8	; 248
    5ecc:	f3 cf       	rjmp	.-26     	; 0x5eb4 <__addsf3x+0x34>
    5ece:	46 95       	lsr	r20
    5ed0:	37 95       	ror	r19
    5ed2:	27 95       	ror	r18
    5ed4:	a7 95       	ror	r26
    5ed6:	f0 40       	sbci	r31, 0x00	; 0
    5ed8:	53 95       	inc	r21
    5eda:	c9 f7       	brne	.-14     	; 0x5ece <__addsf3x+0x4e>
    5edc:	7e f4       	brtc	.+30     	; 0x5efc <__addsf3x+0x7c>
    5ede:	1f 16       	cp	r1, r31
    5ee0:	ba 0b       	sbc	r27, r26
    5ee2:	62 0b       	sbc	r22, r18
    5ee4:	73 0b       	sbc	r23, r19
    5ee6:	84 0b       	sbc	r24, r20
    5ee8:	ba f0       	brmi	.+46     	; 0x5f18 <__addsf3x+0x98>
    5eea:	91 50       	subi	r25, 0x01	; 1
    5eec:	a1 f0       	breq	.+40     	; 0x5f16 <__addsf3x+0x96>
    5eee:	ff 0f       	add	r31, r31
    5ef0:	bb 1f       	adc	r27, r27
    5ef2:	66 1f       	adc	r22, r22
    5ef4:	77 1f       	adc	r23, r23
    5ef6:	88 1f       	adc	r24, r24
    5ef8:	c2 f7       	brpl	.-16     	; 0x5eea <__addsf3x+0x6a>
    5efa:	0e c0       	rjmp	.+28     	; 0x5f18 <__addsf3x+0x98>
    5efc:	ba 0f       	add	r27, r26
    5efe:	62 1f       	adc	r22, r18
    5f00:	73 1f       	adc	r23, r19
    5f02:	84 1f       	adc	r24, r20
    5f04:	48 f4       	brcc	.+18     	; 0x5f18 <__addsf3x+0x98>
    5f06:	87 95       	ror	r24
    5f08:	77 95       	ror	r23
    5f0a:	67 95       	ror	r22
    5f0c:	b7 95       	ror	r27
    5f0e:	f7 95       	ror	r31
    5f10:	9e 3f       	cpi	r25, 0xFE	; 254
    5f12:	08 f0       	brcs	.+2      	; 0x5f16 <__addsf3x+0x96>
    5f14:	b3 cf       	rjmp	.-154    	; 0x5e7c <__addsf3+0x1e>
    5f16:	93 95       	inc	r25
    5f18:	88 0f       	add	r24, r24
    5f1a:	08 f0       	brcs	.+2      	; 0x5f1e <__addsf3x+0x9e>
    5f1c:	99 27       	eor	r25, r25
    5f1e:	ee 0f       	add	r30, r30
    5f20:	97 95       	ror	r25
    5f22:	87 95       	ror	r24
    5f24:	08 95       	ret
    5f26:	90 d1       	rcall	.+800    	; 0x6248 <__fp_pscA>
    5f28:	58 f0       	brcs	.+22     	; 0x5f40 <__addsf3x+0xc0>
    5f2a:	80 e8       	ldi	r24, 0x80	; 128
    5f2c:	91 e0       	ldi	r25, 0x01	; 1
    5f2e:	09 f4       	brne	.+2      	; 0x5f32 <__addsf3x+0xb2>
    5f30:	9e ef       	ldi	r25, 0xFE	; 254
    5f32:	91 d1       	rcall	.+802    	; 0x6256 <__fp_pscB>
    5f34:	28 f0       	brcs	.+10     	; 0x5f40 <__addsf3x+0xc0>
    5f36:	40 e8       	ldi	r20, 0x80	; 128
    5f38:	51 e0       	ldi	r21, 0x01	; 1
    5f3a:	59 f4       	brne	.+22     	; 0x5f52 <atan2+0xe>
    5f3c:	5e ef       	ldi	r21, 0xFE	; 254
    5f3e:	09 c0       	rjmp	.+18     	; 0x5f52 <atan2+0xe>
    5f40:	5b c1       	rjmp	.+694    	; 0x61f8 <__fp_nan>
    5f42:	fc c1       	rjmp	.+1016   	; 0x633c <__fp_zero>

00005f44 <atan2>:
    5f44:	e9 2f       	mov	r30, r25
    5f46:	e0 78       	andi	r30, 0x80	; 128
    5f48:	d7 d1       	rcall	.+942    	; 0x62f8 <__fp_split3>
    5f4a:	68 f3       	brcs	.-38     	; 0x5f26 <__addsf3x+0xa6>
    5f4c:	09 2e       	mov	r0, r25
    5f4e:	05 2a       	or	r0, r21
    5f50:	c1 f3       	breq	.-16     	; 0x5f42 <__addsf3x+0xc2>
    5f52:	26 17       	cp	r18, r22
    5f54:	37 07       	cpc	r19, r23
    5f56:	48 07       	cpc	r20, r24
    5f58:	59 07       	cpc	r21, r25
    5f5a:	38 f0       	brcs	.+14     	; 0x5f6a <atan2+0x26>
    5f5c:	0e 2e       	mov	r0, r30
    5f5e:	07 f8       	bld	r0, 7
    5f60:	e0 25       	eor	r30, r0
    5f62:	69 f0       	breq	.+26     	; 0x5f7e <atan2+0x3a>
    5f64:	e0 25       	eor	r30, r0
    5f66:	e0 64       	ori	r30, 0x40	; 64
    5f68:	0a c0       	rjmp	.+20     	; 0x5f7e <atan2+0x3a>
    5f6a:	ef 63       	ori	r30, 0x3F	; 63
    5f6c:	07 f8       	bld	r0, 7
    5f6e:	00 94       	com	r0
    5f70:	07 fa       	bst	r0, 7
    5f72:	db 01       	movw	r26, r22
    5f74:	b9 01       	movw	r22, r18
    5f76:	9d 01       	movw	r18, r26
    5f78:	dc 01       	movw	r26, r24
    5f7a:	ca 01       	movw	r24, r20
    5f7c:	ad 01       	movw	r20, r26
    5f7e:	ef 93       	push	r30
    5f80:	4a d0       	rcall	.+148    	; 0x6016 <__divsf3_pse>
    5f82:	98 d1       	rcall	.+816    	; 0x62b4 <__fp_round>
    5f84:	0a d0       	rcall	.+20     	; 0x5f9a <atan>
    5f86:	5f 91       	pop	r21
    5f88:	55 23       	and	r21, r21
    5f8a:	31 f0       	breq	.+12     	; 0x5f98 <atan2+0x54>
    5f8c:	2b ed       	ldi	r18, 0xDB	; 219
    5f8e:	3f e0       	ldi	r19, 0x0F	; 15
    5f90:	49 e4       	ldi	r20, 0x49	; 73
    5f92:	50 fd       	sbrc	r21, 0
    5f94:	49 ec       	ldi	r20, 0xC9	; 201
    5f96:	63 cf       	rjmp	.-314    	; 0x5e5e <__addsf3>
    5f98:	08 95       	ret

00005f9a <atan>:
    5f9a:	df 93       	push	r29
    5f9c:	dd 27       	eor	r29, r29
    5f9e:	b9 2f       	mov	r27, r25
    5fa0:	bf 77       	andi	r27, 0x7F	; 127
    5fa2:	40 e8       	ldi	r20, 0x80	; 128
    5fa4:	5f e3       	ldi	r21, 0x3F	; 63
    5fa6:	16 16       	cp	r1, r22
    5fa8:	17 06       	cpc	r1, r23
    5faa:	48 07       	cpc	r20, r24
    5fac:	5b 07       	cpc	r21, r27
    5fae:	10 f4       	brcc	.+4      	; 0x5fb4 <atan+0x1a>
    5fb0:	d9 2f       	mov	r29, r25
    5fb2:	cf d1       	rcall	.+926    	; 0x6352 <inverse>
    5fb4:	9f 93       	push	r25
    5fb6:	8f 93       	push	r24
    5fb8:	7f 93       	push	r23
    5fba:	6f 93       	push	r22
    5fbc:	7c d2       	rcall	.+1272   	; 0x64b6 <square>
    5fbe:	e4 ee       	ldi	r30, 0xE4	; 228
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	1d d1       	rcall	.+570    	; 0x61fe <__fp_powser>
    5fc4:	77 d1       	rcall	.+750    	; 0x62b4 <__fp_round>
    5fc6:	2f 91       	pop	r18
    5fc8:	3f 91       	pop	r19
    5fca:	4f 91       	pop	r20
    5fcc:	5f 91       	pop	r21
    5fce:	d4 d1       	rcall	.+936    	; 0x6378 <__mulsf3x>
    5fd0:	dd 23       	and	r29, r29
    5fd2:	49 f0       	breq	.+18     	; 0x5fe6 <atan+0x4c>
    5fd4:	90 58       	subi	r25, 0x80	; 128
    5fd6:	a2 ea       	ldi	r26, 0xA2	; 162
    5fd8:	2a ed       	ldi	r18, 0xDA	; 218
    5fda:	3f e0       	ldi	r19, 0x0F	; 15
    5fdc:	49 ec       	ldi	r20, 0xC9	; 201
    5fde:	5f e3       	ldi	r21, 0x3F	; 63
    5fe0:	d0 78       	andi	r29, 0x80	; 128
    5fe2:	5d 27       	eor	r21, r29
    5fe4:	4d df       	rcall	.-358    	; 0x5e80 <__addsf3x>
    5fe6:	df 91       	pop	r29
    5fe8:	65 c1       	rjmp	.+714    	; 0x62b4 <__fp_round>

00005fea <__cmpsf2>:
    5fea:	dc d0       	rcall	.+440    	; 0x61a4 <__fp_cmp>
    5fec:	08 f4       	brcc	.+2      	; 0x5ff0 <__cmpsf2+0x6>
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	08 95       	ret

00005ff2 <cos>:
    5ff2:	39 d1       	rcall	.+626    	; 0x6266 <__fp_rempio2>
    5ff4:	e3 95       	inc	r30
    5ff6:	6f c1       	rjmp	.+734    	; 0x62d6 <__fp_sinus>

00005ff8 <__divsf3>:
    5ff8:	0c d0       	rcall	.+24     	; 0x6012 <__divsf3x>
    5ffa:	5c c1       	rjmp	.+696    	; 0x62b4 <__fp_round>
    5ffc:	2c d1       	rcall	.+600    	; 0x6256 <__fp_pscB>
    5ffe:	40 f0       	brcs	.+16     	; 0x6010 <__divsf3+0x18>
    6000:	23 d1       	rcall	.+582    	; 0x6248 <__fp_pscA>
    6002:	30 f0       	brcs	.+12     	; 0x6010 <__divsf3+0x18>
    6004:	21 f4       	brne	.+8      	; 0x600e <__divsf3+0x16>
    6006:	5f 3f       	cpi	r21, 0xFF	; 255
    6008:	19 f0       	breq	.+6      	; 0x6010 <__divsf3+0x18>
    600a:	f0 c0       	rjmp	.+480    	; 0x61ec <__fp_inf>
    600c:	51 11       	cpse	r21, r1
    600e:	97 c1       	rjmp	.+814    	; 0x633e <__fp_szero>
    6010:	f3 c0       	rjmp	.+486    	; 0x61f8 <__fp_nan>

00006012 <__divsf3x>:
    6012:	72 d1       	rcall	.+740    	; 0x62f8 <__fp_split3>
    6014:	98 f3       	brcs	.-26     	; 0x5ffc <__divsf3+0x4>

00006016 <__divsf3_pse>:
    6016:	99 23       	and	r25, r25
    6018:	c9 f3       	breq	.-14     	; 0x600c <__divsf3+0x14>
    601a:	55 23       	and	r21, r21
    601c:	b1 f3       	breq	.-20     	; 0x600a <__divsf3+0x12>
    601e:	95 1b       	sub	r25, r21
    6020:	55 0b       	sbc	r21, r21
    6022:	bb 27       	eor	r27, r27
    6024:	aa 27       	eor	r26, r26
    6026:	62 17       	cp	r22, r18
    6028:	73 07       	cpc	r23, r19
    602a:	84 07       	cpc	r24, r20
    602c:	38 f0       	brcs	.+14     	; 0x603c <__divsf3_pse+0x26>
    602e:	9f 5f       	subi	r25, 0xFF	; 255
    6030:	5f 4f       	sbci	r21, 0xFF	; 255
    6032:	22 0f       	add	r18, r18
    6034:	33 1f       	adc	r19, r19
    6036:	44 1f       	adc	r20, r20
    6038:	aa 1f       	adc	r26, r26
    603a:	a9 f3       	breq	.-22     	; 0x6026 <__divsf3_pse+0x10>
    603c:	33 d0       	rcall	.+102    	; 0x60a4 <__divsf3_pse+0x8e>
    603e:	0e 2e       	mov	r0, r30
    6040:	3a f0       	brmi	.+14     	; 0x6050 <__divsf3_pse+0x3a>
    6042:	e0 e8       	ldi	r30, 0x80	; 128
    6044:	30 d0       	rcall	.+96     	; 0x60a6 <__divsf3_pse+0x90>
    6046:	91 50       	subi	r25, 0x01	; 1
    6048:	50 40       	sbci	r21, 0x00	; 0
    604a:	e6 95       	lsr	r30
    604c:	00 1c       	adc	r0, r0
    604e:	ca f7       	brpl	.-14     	; 0x6042 <__divsf3_pse+0x2c>
    6050:	29 d0       	rcall	.+82     	; 0x60a4 <__divsf3_pse+0x8e>
    6052:	fe 2f       	mov	r31, r30
    6054:	27 d0       	rcall	.+78     	; 0x60a4 <__divsf3_pse+0x8e>
    6056:	66 0f       	add	r22, r22
    6058:	77 1f       	adc	r23, r23
    605a:	88 1f       	adc	r24, r24
    605c:	bb 1f       	adc	r27, r27
    605e:	26 17       	cp	r18, r22
    6060:	37 07       	cpc	r19, r23
    6062:	48 07       	cpc	r20, r24
    6064:	ab 07       	cpc	r26, r27
    6066:	b0 e8       	ldi	r27, 0x80	; 128
    6068:	09 f0       	breq	.+2      	; 0x606c <__divsf3_pse+0x56>
    606a:	bb 0b       	sbc	r27, r27
    606c:	80 2d       	mov	r24, r0
    606e:	bf 01       	movw	r22, r30
    6070:	ff 27       	eor	r31, r31
    6072:	93 58       	subi	r25, 0x83	; 131
    6074:	5f 4f       	sbci	r21, 0xFF	; 255
    6076:	2a f0       	brmi	.+10     	; 0x6082 <__divsf3_pse+0x6c>
    6078:	9e 3f       	cpi	r25, 0xFE	; 254
    607a:	51 05       	cpc	r21, r1
    607c:	68 f0       	brcs	.+26     	; 0x6098 <__divsf3_pse+0x82>
    607e:	b6 c0       	rjmp	.+364    	; 0x61ec <__fp_inf>
    6080:	5e c1       	rjmp	.+700    	; 0x633e <__fp_szero>
    6082:	5f 3f       	cpi	r21, 0xFF	; 255
    6084:	ec f3       	brlt	.-6      	; 0x6080 <__divsf3_pse+0x6a>
    6086:	98 3e       	cpi	r25, 0xE8	; 232
    6088:	dc f3       	brlt	.-10     	; 0x6080 <__divsf3_pse+0x6a>
    608a:	86 95       	lsr	r24
    608c:	77 95       	ror	r23
    608e:	67 95       	ror	r22
    6090:	b7 95       	ror	r27
    6092:	f7 95       	ror	r31
    6094:	9f 5f       	subi	r25, 0xFF	; 255
    6096:	c9 f7       	brne	.-14     	; 0x608a <__divsf3_pse+0x74>
    6098:	88 0f       	add	r24, r24
    609a:	91 1d       	adc	r25, r1
    609c:	96 95       	lsr	r25
    609e:	87 95       	ror	r24
    60a0:	97 f9       	bld	r25, 7
    60a2:	08 95       	ret
    60a4:	e1 e0       	ldi	r30, 0x01	; 1
    60a6:	66 0f       	add	r22, r22
    60a8:	77 1f       	adc	r23, r23
    60aa:	88 1f       	adc	r24, r24
    60ac:	bb 1f       	adc	r27, r27
    60ae:	62 17       	cp	r22, r18
    60b0:	73 07       	cpc	r23, r19
    60b2:	84 07       	cpc	r24, r20
    60b4:	ba 07       	cpc	r27, r26
    60b6:	20 f0       	brcs	.+8      	; 0x60c0 <__divsf3_pse+0xaa>
    60b8:	62 1b       	sub	r22, r18
    60ba:	73 0b       	sbc	r23, r19
    60bc:	84 0b       	sbc	r24, r20
    60be:	ba 0b       	sbc	r27, r26
    60c0:	ee 1f       	adc	r30, r30
    60c2:	88 f7       	brcc	.-30     	; 0x60a6 <__divsf3_pse+0x90>
    60c4:	e0 95       	com	r30
    60c6:	08 95       	ret

000060c8 <__fixsfsi>:
    60c8:	04 d0       	rcall	.+8      	; 0x60d2 <__fixunssfsi>
    60ca:	68 94       	set
    60cc:	b1 11       	cpse	r27, r1
    60ce:	37 c1       	rjmp	.+622    	; 0x633e <__fp_szero>
    60d0:	08 95       	ret

000060d2 <__fixunssfsi>:
    60d2:	1a d1       	rcall	.+564    	; 0x6308 <__fp_splitA>
    60d4:	88 f0       	brcs	.+34     	; 0x60f8 <__fixunssfsi+0x26>
    60d6:	9f 57       	subi	r25, 0x7F	; 127
    60d8:	90 f0       	brcs	.+36     	; 0x60fe <__fixunssfsi+0x2c>
    60da:	b9 2f       	mov	r27, r25
    60dc:	99 27       	eor	r25, r25
    60de:	b7 51       	subi	r27, 0x17	; 23
    60e0:	a0 f0       	brcs	.+40     	; 0x610a <__fixunssfsi+0x38>
    60e2:	d1 f0       	breq	.+52     	; 0x6118 <__fixunssfsi+0x46>
    60e4:	66 0f       	add	r22, r22
    60e6:	77 1f       	adc	r23, r23
    60e8:	88 1f       	adc	r24, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	1a f0       	brmi	.+6      	; 0x60f4 <__fixunssfsi+0x22>
    60ee:	ba 95       	dec	r27
    60f0:	c9 f7       	brne	.-14     	; 0x60e4 <__fixunssfsi+0x12>
    60f2:	12 c0       	rjmp	.+36     	; 0x6118 <__fixunssfsi+0x46>
    60f4:	b1 30       	cpi	r27, 0x01	; 1
    60f6:	81 f0       	breq	.+32     	; 0x6118 <__fixunssfsi+0x46>
    60f8:	21 d1       	rcall	.+578    	; 0x633c <__fp_zero>
    60fa:	b1 e0       	ldi	r27, 0x01	; 1
    60fc:	08 95       	ret
    60fe:	1e c1       	rjmp	.+572    	; 0x633c <__fp_zero>
    6100:	67 2f       	mov	r22, r23
    6102:	78 2f       	mov	r23, r24
    6104:	88 27       	eor	r24, r24
    6106:	b8 5f       	subi	r27, 0xF8	; 248
    6108:	39 f0       	breq	.+14     	; 0x6118 <__fixunssfsi+0x46>
    610a:	b9 3f       	cpi	r27, 0xF9	; 249
    610c:	cc f3       	brlt	.-14     	; 0x6100 <__fixunssfsi+0x2e>
    610e:	86 95       	lsr	r24
    6110:	77 95       	ror	r23
    6112:	67 95       	ror	r22
    6114:	b3 95       	inc	r27
    6116:	d9 f7       	brne	.-10     	; 0x610e <__fixunssfsi+0x3c>
    6118:	3e f4       	brtc	.+14     	; 0x6128 <__fixunssfsi+0x56>
    611a:	90 95       	com	r25
    611c:	80 95       	com	r24
    611e:	70 95       	com	r23
    6120:	61 95       	neg	r22
    6122:	7f 4f       	sbci	r23, 0xFF	; 255
    6124:	8f 4f       	sbci	r24, 0xFF	; 255
    6126:	9f 4f       	sbci	r25, 0xFF	; 255
    6128:	08 95       	ret

0000612a <__floatunsisf>:
    612a:	e8 94       	clt
    612c:	09 c0       	rjmp	.+18     	; 0x6140 <__floatsisf+0x12>

0000612e <__floatsisf>:
    612e:	97 fb       	bst	r25, 7
    6130:	3e f4       	brtc	.+14     	; 0x6140 <__floatsisf+0x12>
    6132:	90 95       	com	r25
    6134:	80 95       	com	r24
    6136:	70 95       	com	r23
    6138:	61 95       	neg	r22
    613a:	7f 4f       	sbci	r23, 0xFF	; 255
    613c:	8f 4f       	sbci	r24, 0xFF	; 255
    613e:	9f 4f       	sbci	r25, 0xFF	; 255
    6140:	99 23       	and	r25, r25
    6142:	a9 f0       	breq	.+42     	; 0x616e <__floatsisf+0x40>
    6144:	f9 2f       	mov	r31, r25
    6146:	96 e9       	ldi	r25, 0x96	; 150
    6148:	bb 27       	eor	r27, r27
    614a:	93 95       	inc	r25
    614c:	f6 95       	lsr	r31
    614e:	87 95       	ror	r24
    6150:	77 95       	ror	r23
    6152:	67 95       	ror	r22
    6154:	b7 95       	ror	r27
    6156:	f1 11       	cpse	r31, r1
    6158:	f8 cf       	rjmp	.-16     	; 0x614a <__floatsisf+0x1c>
    615a:	fa f4       	brpl	.+62     	; 0x619a <__floatsisf+0x6c>
    615c:	bb 0f       	add	r27, r27
    615e:	11 f4       	brne	.+4      	; 0x6164 <__floatsisf+0x36>
    6160:	60 ff       	sbrs	r22, 0
    6162:	1b c0       	rjmp	.+54     	; 0x619a <__floatsisf+0x6c>
    6164:	6f 5f       	subi	r22, 0xFF	; 255
    6166:	7f 4f       	sbci	r23, 0xFF	; 255
    6168:	8f 4f       	sbci	r24, 0xFF	; 255
    616a:	9f 4f       	sbci	r25, 0xFF	; 255
    616c:	16 c0       	rjmp	.+44     	; 0x619a <__floatsisf+0x6c>
    616e:	88 23       	and	r24, r24
    6170:	11 f0       	breq	.+4      	; 0x6176 <__floatsisf+0x48>
    6172:	96 e9       	ldi	r25, 0x96	; 150
    6174:	11 c0       	rjmp	.+34     	; 0x6198 <__floatsisf+0x6a>
    6176:	77 23       	and	r23, r23
    6178:	21 f0       	breq	.+8      	; 0x6182 <__floatsisf+0x54>
    617a:	9e e8       	ldi	r25, 0x8E	; 142
    617c:	87 2f       	mov	r24, r23
    617e:	76 2f       	mov	r23, r22
    6180:	05 c0       	rjmp	.+10     	; 0x618c <__floatsisf+0x5e>
    6182:	66 23       	and	r22, r22
    6184:	71 f0       	breq	.+28     	; 0x61a2 <__floatsisf+0x74>
    6186:	96 e8       	ldi	r25, 0x86	; 134
    6188:	86 2f       	mov	r24, r22
    618a:	70 e0       	ldi	r23, 0x00	; 0
    618c:	60 e0       	ldi	r22, 0x00	; 0
    618e:	2a f0       	brmi	.+10     	; 0x619a <__floatsisf+0x6c>
    6190:	9a 95       	dec	r25
    6192:	66 0f       	add	r22, r22
    6194:	77 1f       	adc	r23, r23
    6196:	88 1f       	adc	r24, r24
    6198:	da f7       	brpl	.-10     	; 0x6190 <__floatsisf+0x62>
    619a:	88 0f       	add	r24, r24
    619c:	96 95       	lsr	r25
    619e:	87 95       	ror	r24
    61a0:	97 f9       	bld	r25, 7
    61a2:	08 95       	ret

000061a4 <__fp_cmp>:
    61a4:	99 0f       	add	r25, r25
    61a6:	00 08       	sbc	r0, r0
    61a8:	55 0f       	add	r21, r21
    61aa:	aa 0b       	sbc	r26, r26
    61ac:	e0 e8       	ldi	r30, 0x80	; 128
    61ae:	fe ef       	ldi	r31, 0xFE	; 254
    61b0:	16 16       	cp	r1, r22
    61b2:	17 06       	cpc	r1, r23
    61b4:	e8 07       	cpc	r30, r24
    61b6:	f9 07       	cpc	r31, r25
    61b8:	c0 f0       	brcs	.+48     	; 0x61ea <__fp_cmp+0x46>
    61ba:	12 16       	cp	r1, r18
    61bc:	13 06       	cpc	r1, r19
    61be:	e4 07       	cpc	r30, r20
    61c0:	f5 07       	cpc	r31, r21
    61c2:	98 f0       	brcs	.+38     	; 0x61ea <__fp_cmp+0x46>
    61c4:	62 1b       	sub	r22, r18
    61c6:	73 0b       	sbc	r23, r19
    61c8:	84 0b       	sbc	r24, r20
    61ca:	95 0b       	sbc	r25, r21
    61cc:	39 f4       	brne	.+14     	; 0x61dc <__fp_cmp+0x38>
    61ce:	0a 26       	eor	r0, r26
    61d0:	61 f0       	breq	.+24     	; 0x61ea <__fp_cmp+0x46>
    61d2:	23 2b       	or	r18, r19
    61d4:	24 2b       	or	r18, r20
    61d6:	25 2b       	or	r18, r21
    61d8:	21 f4       	brne	.+8      	; 0x61e2 <__fp_cmp+0x3e>
    61da:	08 95       	ret
    61dc:	0a 26       	eor	r0, r26
    61de:	09 f4       	brne	.+2      	; 0x61e2 <__fp_cmp+0x3e>
    61e0:	a1 40       	sbci	r26, 0x01	; 1
    61e2:	a6 95       	lsr	r26
    61e4:	8f ef       	ldi	r24, 0xFF	; 255
    61e6:	81 1d       	adc	r24, r1
    61e8:	81 1d       	adc	r24, r1
    61ea:	08 95       	ret

000061ec <__fp_inf>:
    61ec:	97 f9       	bld	r25, 7
    61ee:	9f 67       	ori	r25, 0x7F	; 127
    61f0:	80 e8       	ldi	r24, 0x80	; 128
    61f2:	70 e0       	ldi	r23, 0x00	; 0
    61f4:	60 e0       	ldi	r22, 0x00	; 0
    61f6:	08 95       	ret

000061f8 <__fp_nan>:
    61f8:	9f ef       	ldi	r25, 0xFF	; 255
    61fa:	80 ec       	ldi	r24, 0xC0	; 192
    61fc:	08 95       	ret

000061fe <__fp_powser>:
    61fe:	df 93       	push	r29
    6200:	cf 93       	push	r28
    6202:	1f 93       	push	r17
    6204:	0f 93       	push	r16
    6206:	ff 92       	push	r15
    6208:	ef 92       	push	r14
    620a:	df 92       	push	r13
    620c:	7b 01       	movw	r14, r22
    620e:	8c 01       	movw	r16, r24
    6210:	68 94       	set
    6212:	05 c0       	rjmp	.+10     	; 0x621e <__fp_powser+0x20>
    6214:	da 2e       	mov	r13, r26
    6216:	ef 01       	movw	r28, r30
    6218:	af d0       	rcall	.+350    	; 0x6378 <__mulsf3x>
    621a:	fe 01       	movw	r30, r28
    621c:	e8 94       	clt
    621e:	a5 91       	lpm	r26, Z+
    6220:	25 91       	lpm	r18, Z+
    6222:	35 91       	lpm	r19, Z+
    6224:	45 91       	lpm	r20, Z+
    6226:	55 91       	lpm	r21, Z+
    6228:	ae f3       	brts	.-22     	; 0x6214 <__fp_powser+0x16>
    622a:	ef 01       	movw	r28, r30
    622c:	29 de       	rcall	.-942    	; 0x5e80 <__addsf3x>
    622e:	fe 01       	movw	r30, r28
    6230:	97 01       	movw	r18, r14
    6232:	a8 01       	movw	r20, r16
    6234:	da 94       	dec	r13
    6236:	79 f7       	brne	.-34     	; 0x6216 <__fp_powser+0x18>
    6238:	df 90       	pop	r13
    623a:	ef 90       	pop	r14
    623c:	ff 90       	pop	r15
    623e:	0f 91       	pop	r16
    6240:	1f 91       	pop	r17
    6242:	cf 91       	pop	r28
    6244:	df 91       	pop	r29
    6246:	08 95       	ret

00006248 <__fp_pscA>:
    6248:	00 24       	eor	r0, r0
    624a:	0a 94       	dec	r0
    624c:	16 16       	cp	r1, r22
    624e:	17 06       	cpc	r1, r23
    6250:	18 06       	cpc	r1, r24
    6252:	09 06       	cpc	r0, r25
    6254:	08 95       	ret

00006256 <__fp_pscB>:
    6256:	00 24       	eor	r0, r0
    6258:	0a 94       	dec	r0
    625a:	12 16       	cp	r1, r18
    625c:	13 06       	cpc	r1, r19
    625e:	14 06       	cpc	r1, r20
    6260:	05 06       	cpc	r0, r21
    6262:	08 95       	ret
    6264:	c9 cf       	rjmp	.-110    	; 0x61f8 <__fp_nan>

00006266 <__fp_rempio2>:
    6266:	50 d0       	rcall	.+160    	; 0x6308 <__fp_splitA>
    6268:	e8 f3       	brcs	.-6      	; 0x6264 <__fp_pscB+0xe>
    626a:	e8 94       	clt
    626c:	e0 e0       	ldi	r30, 0x00	; 0
    626e:	bb 27       	eor	r27, r27
    6270:	9f 57       	subi	r25, 0x7F	; 127
    6272:	f0 f0       	brcs	.+60     	; 0x62b0 <__fp_rempio2+0x4a>
    6274:	2a ed       	ldi	r18, 0xDA	; 218
    6276:	3f e0       	ldi	r19, 0x0F	; 15
    6278:	49 ec       	ldi	r20, 0xC9	; 201
    627a:	06 c0       	rjmp	.+12     	; 0x6288 <__fp_rempio2+0x22>
    627c:	ee 0f       	add	r30, r30
    627e:	bb 0f       	add	r27, r27
    6280:	66 1f       	adc	r22, r22
    6282:	77 1f       	adc	r23, r23
    6284:	88 1f       	adc	r24, r24
    6286:	28 f0       	brcs	.+10     	; 0x6292 <__fp_rempio2+0x2c>
    6288:	b2 3a       	cpi	r27, 0xA2	; 162
    628a:	62 07       	cpc	r22, r18
    628c:	73 07       	cpc	r23, r19
    628e:	84 07       	cpc	r24, r20
    6290:	28 f0       	brcs	.+10     	; 0x629c <__fp_rempio2+0x36>
    6292:	b2 5a       	subi	r27, 0xA2	; 162
    6294:	62 0b       	sbc	r22, r18
    6296:	73 0b       	sbc	r23, r19
    6298:	84 0b       	sbc	r24, r20
    629a:	e3 95       	inc	r30
    629c:	9a 95       	dec	r25
    629e:	72 f7       	brpl	.-36     	; 0x627c <__fp_rempio2+0x16>
    62a0:	80 38       	cpi	r24, 0x80	; 128
    62a2:	30 f4       	brcc	.+12     	; 0x62b0 <__fp_rempio2+0x4a>
    62a4:	9a 95       	dec	r25
    62a6:	bb 0f       	add	r27, r27
    62a8:	66 1f       	adc	r22, r22
    62aa:	77 1f       	adc	r23, r23
    62ac:	88 1f       	adc	r24, r24
    62ae:	d2 f7       	brpl	.-12     	; 0x62a4 <__fp_rempio2+0x3e>
    62b0:	90 48       	sbci	r25, 0x80	; 128
    62b2:	06 c1       	rjmp	.+524    	; 0x64c0 <__fp_mpack_finite>

000062b4 <__fp_round>:
    62b4:	09 2e       	mov	r0, r25
    62b6:	03 94       	inc	r0
    62b8:	00 0c       	add	r0, r0
    62ba:	11 f4       	brne	.+4      	; 0x62c0 <__fp_round+0xc>
    62bc:	88 23       	and	r24, r24
    62be:	52 f0       	brmi	.+20     	; 0x62d4 <__fp_round+0x20>
    62c0:	bb 0f       	add	r27, r27
    62c2:	40 f4       	brcc	.+16     	; 0x62d4 <__fp_round+0x20>
    62c4:	bf 2b       	or	r27, r31
    62c6:	11 f4       	brne	.+4      	; 0x62cc <__fp_round+0x18>
    62c8:	60 ff       	sbrs	r22, 0
    62ca:	04 c0       	rjmp	.+8      	; 0x62d4 <__fp_round+0x20>
    62cc:	6f 5f       	subi	r22, 0xFF	; 255
    62ce:	7f 4f       	sbci	r23, 0xFF	; 255
    62d0:	8f 4f       	sbci	r24, 0xFF	; 255
    62d2:	9f 4f       	sbci	r25, 0xFF	; 255
    62d4:	08 95       	ret

000062d6 <__fp_sinus>:
    62d6:	ef 93       	push	r30
    62d8:	e0 ff       	sbrs	r30, 0
    62da:	06 c0       	rjmp	.+12     	; 0x62e8 <__fp_sinus+0x12>
    62dc:	a2 ea       	ldi	r26, 0xA2	; 162
    62de:	2a ed       	ldi	r18, 0xDA	; 218
    62e0:	3f e0       	ldi	r19, 0x0F	; 15
    62e2:	49 ec       	ldi	r20, 0xC9	; 201
    62e4:	5f eb       	ldi	r21, 0xBF	; 191
    62e6:	cc dd       	rcall	.-1128   	; 0x5e80 <__addsf3x>
    62e8:	e5 df       	rcall	.-54     	; 0x62b4 <__fp_round>
    62ea:	0f 90       	pop	r0
    62ec:	03 94       	inc	r0
    62ee:	01 fc       	sbrc	r0, 1
    62f0:	90 58       	subi	r25, 0x80	; 128
    62f2:	e1 e1       	ldi	r30, 0x11	; 17
    62f4:	f1 e0       	ldi	r31, 0x01	; 1
    62f6:	f7 c0       	rjmp	.+494    	; 0x64e6 <__fp_powsodd>

000062f8 <__fp_split3>:
    62f8:	57 fd       	sbrc	r21, 7
    62fa:	90 58       	subi	r25, 0x80	; 128
    62fc:	44 0f       	add	r20, r20
    62fe:	55 1f       	adc	r21, r21
    6300:	59 f0       	breq	.+22     	; 0x6318 <__fp_splitA+0x10>
    6302:	5f 3f       	cpi	r21, 0xFF	; 255
    6304:	71 f0       	breq	.+28     	; 0x6322 <__fp_splitA+0x1a>
    6306:	47 95       	ror	r20

00006308 <__fp_splitA>:
    6308:	88 0f       	add	r24, r24
    630a:	97 fb       	bst	r25, 7
    630c:	99 1f       	adc	r25, r25
    630e:	61 f0       	breq	.+24     	; 0x6328 <__fp_splitA+0x20>
    6310:	9f 3f       	cpi	r25, 0xFF	; 255
    6312:	79 f0       	breq	.+30     	; 0x6332 <__fp_splitA+0x2a>
    6314:	87 95       	ror	r24
    6316:	08 95       	ret
    6318:	12 16       	cp	r1, r18
    631a:	13 06       	cpc	r1, r19
    631c:	14 06       	cpc	r1, r20
    631e:	55 1f       	adc	r21, r21
    6320:	f2 cf       	rjmp	.-28     	; 0x6306 <__fp_split3+0xe>
    6322:	46 95       	lsr	r20
    6324:	f1 df       	rcall	.-30     	; 0x6308 <__fp_splitA>
    6326:	08 c0       	rjmp	.+16     	; 0x6338 <__fp_splitA+0x30>
    6328:	16 16       	cp	r1, r22
    632a:	17 06       	cpc	r1, r23
    632c:	18 06       	cpc	r1, r24
    632e:	99 1f       	adc	r25, r25
    6330:	f1 cf       	rjmp	.-30     	; 0x6314 <__fp_splitA+0xc>
    6332:	86 95       	lsr	r24
    6334:	71 05       	cpc	r23, r1
    6336:	61 05       	cpc	r22, r1
    6338:	08 94       	sec
    633a:	08 95       	ret

0000633c <__fp_zero>:
    633c:	e8 94       	clt

0000633e <__fp_szero>:
    633e:	bb 27       	eor	r27, r27
    6340:	66 27       	eor	r22, r22
    6342:	77 27       	eor	r23, r23
    6344:	cb 01       	movw	r24, r22
    6346:	97 f9       	bld	r25, 7
    6348:	08 95       	ret

0000634a <__gesf2>:
    634a:	2c df       	rcall	.-424    	; 0x61a4 <__fp_cmp>
    634c:	08 f4       	brcc	.+2      	; 0x6350 <__gesf2+0x6>
    634e:	8f ef       	ldi	r24, 0xFF	; 255
    6350:	08 95       	ret

00006352 <inverse>:
    6352:	9b 01       	movw	r18, r22
    6354:	ac 01       	movw	r20, r24
    6356:	60 e0       	ldi	r22, 0x00	; 0
    6358:	70 e0       	ldi	r23, 0x00	; 0
    635a:	80 e8       	ldi	r24, 0x80	; 128
    635c:	9f e3       	ldi	r25, 0x3F	; 63
    635e:	4c ce       	rjmp	.-872    	; 0x5ff8 <__divsf3>

00006360 <__mulsf3>:
    6360:	0b d0       	rcall	.+22     	; 0x6378 <__mulsf3x>
    6362:	a8 cf       	rjmp	.-176    	; 0x62b4 <__fp_round>
    6364:	71 df       	rcall	.-286    	; 0x6248 <__fp_pscA>
    6366:	28 f0       	brcs	.+10     	; 0x6372 <__mulsf3+0x12>
    6368:	76 df       	rcall	.-276    	; 0x6256 <__fp_pscB>
    636a:	18 f0       	brcs	.+6      	; 0x6372 <__mulsf3+0x12>
    636c:	95 23       	and	r25, r21
    636e:	09 f0       	breq	.+2      	; 0x6372 <__mulsf3+0x12>
    6370:	3d cf       	rjmp	.-390    	; 0x61ec <__fp_inf>
    6372:	42 cf       	rjmp	.-380    	; 0x61f8 <__fp_nan>
    6374:	11 24       	eor	r1, r1
    6376:	e3 cf       	rjmp	.-58     	; 0x633e <__fp_szero>

00006378 <__mulsf3x>:
    6378:	bf df       	rcall	.-130    	; 0x62f8 <__fp_split3>
    637a:	a0 f3       	brcs	.-24     	; 0x6364 <__mulsf3+0x4>

0000637c <__mulsf3_pse>:
    637c:	95 9f       	mul	r25, r21
    637e:	d1 f3       	breq	.-12     	; 0x6374 <__mulsf3+0x14>
    6380:	95 0f       	add	r25, r21
    6382:	50 e0       	ldi	r21, 0x00	; 0
    6384:	55 1f       	adc	r21, r21
    6386:	62 9f       	mul	r22, r18
    6388:	f0 01       	movw	r30, r0
    638a:	72 9f       	mul	r23, r18
    638c:	bb 27       	eor	r27, r27
    638e:	f0 0d       	add	r31, r0
    6390:	b1 1d       	adc	r27, r1
    6392:	63 9f       	mul	r22, r19
    6394:	aa 27       	eor	r26, r26
    6396:	f0 0d       	add	r31, r0
    6398:	b1 1d       	adc	r27, r1
    639a:	aa 1f       	adc	r26, r26
    639c:	64 9f       	mul	r22, r20
    639e:	66 27       	eor	r22, r22
    63a0:	b0 0d       	add	r27, r0
    63a2:	a1 1d       	adc	r26, r1
    63a4:	66 1f       	adc	r22, r22
    63a6:	82 9f       	mul	r24, r18
    63a8:	22 27       	eor	r18, r18
    63aa:	b0 0d       	add	r27, r0
    63ac:	a1 1d       	adc	r26, r1
    63ae:	62 1f       	adc	r22, r18
    63b0:	73 9f       	mul	r23, r19
    63b2:	b0 0d       	add	r27, r0
    63b4:	a1 1d       	adc	r26, r1
    63b6:	62 1f       	adc	r22, r18
    63b8:	83 9f       	mul	r24, r19
    63ba:	a0 0d       	add	r26, r0
    63bc:	61 1d       	adc	r22, r1
    63be:	22 1f       	adc	r18, r18
    63c0:	74 9f       	mul	r23, r20
    63c2:	33 27       	eor	r19, r19
    63c4:	a0 0d       	add	r26, r0
    63c6:	61 1d       	adc	r22, r1
    63c8:	23 1f       	adc	r18, r19
    63ca:	84 9f       	mul	r24, r20
    63cc:	60 0d       	add	r22, r0
    63ce:	21 1d       	adc	r18, r1
    63d0:	82 2f       	mov	r24, r18
    63d2:	76 2f       	mov	r23, r22
    63d4:	6a 2f       	mov	r22, r26
    63d6:	11 24       	eor	r1, r1
    63d8:	9f 57       	subi	r25, 0x7F	; 127
    63da:	50 40       	sbci	r21, 0x00	; 0
    63dc:	8a f0       	brmi	.+34     	; 0x6400 <__mulsf3_pse+0x84>
    63de:	e1 f0       	breq	.+56     	; 0x6418 <__mulsf3_pse+0x9c>
    63e0:	88 23       	and	r24, r24
    63e2:	4a f0       	brmi	.+18     	; 0x63f6 <__mulsf3_pse+0x7a>
    63e4:	ee 0f       	add	r30, r30
    63e6:	ff 1f       	adc	r31, r31
    63e8:	bb 1f       	adc	r27, r27
    63ea:	66 1f       	adc	r22, r22
    63ec:	77 1f       	adc	r23, r23
    63ee:	88 1f       	adc	r24, r24
    63f0:	91 50       	subi	r25, 0x01	; 1
    63f2:	50 40       	sbci	r21, 0x00	; 0
    63f4:	a9 f7       	brne	.-22     	; 0x63e0 <__mulsf3_pse+0x64>
    63f6:	9e 3f       	cpi	r25, 0xFE	; 254
    63f8:	51 05       	cpc	r21, r1
    63fa:	70 f0       	brcs	.+28     	; 0x6418 <__mulsf3_pse+0x9c>
    63fc:	f7 ce       	rjmp	.-530    	; 0x61ec <__fp_inf>
    63fe:	9f cf       	rjmp	.-194    	; 0x633e <__fp_szero>
    6400:	5f 3f       	cpi	r21, 0xFF	; 255
    6402:	ec f3       	brlt	.-6      	; 0x63fe <__mulsf3_pse+0x82>
    6404:	98 3e       	cpi	r25, 0xE8	; 232
    6406:	dc f3       	brlt	.-10     	; 0x63fe <__mulsf3_pse+0x82>
    6408:	86 95       	lsr	r24
    640a:	77 95       	ror	r23
    640c:	67 95       	ror	r22
    640e:	b7 95       	ror	r27
    6410:	f7 95       	ror	r31
    6412:	e7 95       	ror	r30
    6414:	9f 5f       	subi	r25, 0xFF	; 255
    6416:	c1 f7       	brne	.-16     	; 0x6408 <__mulsf3_pse+0x8c>
    6418:	fe 2b       	or	r31, r30
    641a:	88 0f       	add	r24, r24
    641c:	91 1d       	adc	r25, r1
    641e:	96 95       	lsr	r25
    6420:	87 95       	ror	r24
    6422:	97 f9       	bld	r25, 7
    6424:	08 95       	ret

00006426 <sin>:
    6426:	9f 93       	push	r25
    6428:	1e df       	rcall	.-452    	; 0x6266 <__fp_rempio2>
    642a:	0f 90       	pop	r0
    642c:	07 fc       	sbrc	r0, 7
    642e:	ee 5f       	subi	r30, 0xFE	; 254
    6430:	52 cf       	rjmp	.-348    	; 0x62d6 <__fp_sinus>
    6432:	11 f4       	brne	.+4      	; 0x6438 <sin+0x12>
    6434:	0e f4       	brtc	.+2      	; 0x6438 <sin+0x12>
    6436:	e0 ce       	rjmp	.-576    	; 0x61f8 <__fp_nan>
    6438:	41 c0       	rjmp	.+130    	; 0x64bc <__fp_mpack>

0000643a <sqrt>:
    643a:	66 df       	rcall	.-308    	; 0x6308 <__fp_splitA>
    643c:	d0 f3       	brcs	.-12     	; 0x6432 <sin+0xc>
    643e:	99 23       	and	r25, r25
    6440:	d9 f3       	breq	.-10     	; 0x6438 <sin+0x12>
    6442:	ce f3       	brts	.-14     	; 0x6436 <sin+0x10>
    6444:	9f 57       	subi	r25, 0x7F	; 127
    6446:	55 0b       	sbc	r21, r21
    6448:	87 ff       	sbrs	r24, 7
    644a:	46 d0       	rcall	.+140    	; 0x64d8 <__fp_norm2>
    644c:	00 24       	eor	r0, r0
    644e:	a0 e6       	ldi	r26, 0x60	; 96
    6450:	40 ea       	ldi	r20, 0xA0	; 160
    6452:	90 01       	movw	r18, r0
    6454:	80 58       	subi	r24, 0x80	; 128
    6456:	56 95       	lsr	r21
    6458:	97 95       	ror	r25
    645a:	28 f4       	brcc	.+10     	; 0x6466 <sqrt+0x2c>
    645c:	80 5c       	subi	r24, 0xC0	; 192
    645e:	66 0f       	add	r22, r22
    6460:	77 1f       	adc	r23, r23
    6462:	88 1f       	adc	r24, r24
    6464:	20 f0       	brcs	.+8      	; 0x646e <sqrt+0x34>
    6466:	26 17       	cp	r18, r22
    6468:	37 07       	cpc	r19, r23
    646a:	48 07       	cpc	r20, r24
    646c:	30 f4       	brcc	.+12     	; 0x647a <sqrt+0x40>
    646e:	62 1b       	sub	r22, r18
    6470:	73 0b       	sbc	r23, r19
    6472:	84 0b       	sbc	r24, r20
    6474:	20 29       	or	r18, r0
    6476:	31 29       	or	r19, r1
    6478:	4a 2b       	or	r20, r26
    647a:	a6 95       	lsr	r26
    647c:	17 94       	ror	r1
    647e:	07 94       	ror	r0
    6480:	20 25       	eor	r18, r0
    6482:	31 25       	eor	r19, r1
    6484:	4a 27       	eor	r20, r26
    6486:	58 f7       	brcc	.-42     	; 0x645e <sqrt+0x24>
    6488:	66 0f       	add	r22, r22
    648a:	77 1f       	adc	r23, r23
    648c:	88 1f       	adc	r24, r24
    648e:	20 f0       	brcs	.+8      	; 0x6498 <sqrt+0x5e>
    6490:	26 17       	cp	r18, r22
    6492:	37 07       	cpc	r19, r23
    6494:	48 07       	cpc	r20, r24
    6496:	30 f4       	brcc	.+12     	; 0x64a4 <sqrt+0x6a>
    6498:	62 0b       	sbc	r22, r18
    649a:	73 0b       	sbc	r23, r19
    649c:	84 0b       	sbc	r24, r20
    649e:	20 0d       	add	r18, r0
    64a0:	31 1d       	adc	r19, r1
    64a2:	41 1d       	adc	r20, r1
    64a4:	a0 95       	com	r26
    64a6:	81 f7       	brne	.-32     	; 0x6488 <sqrt+0x4e>
    64a8:	b9 01       	movw	r22, r18
    64aa:	84 2f       	mov	r24, r20
    64ac:	91 58       	subi	r25, 0x81	; 129
    64ae:	88 0f       	add	r24, r24
    64b0:	96 95       	lsr	r25
    64b2:	87 95       	ror	r24
    64b4:	08 95       	ret

000064b6 <square>:
    64b6:	9b 01       	movw	r18, r22
    64b8:	ac 01       	movw	r20, r24
    64ba:	52 cf       	rjmp	.-348    	; 0x6360 <__mulsf3>

000064bc <__fp_mpack>:
    64bc:	9f 3f       	cpi	r25, 0xFF	; 255
    64be:	31 f0       	breq	.+12     	; 0x64cc <__fp_mpack_finite+0xc>

000064c0 <__fp_mpack_finite>:
    64c0:	91 50       	subi	r25, 0x01	; 1
    64c2:	20 f4       	brcc	.+8      	; 0x64cc <__fp_mpack_finite+0xc>
    64c4:	87 95       	ror	r24
    64c6:	77 95       	ror	r23
    64c8:	67 95       	ror	r22
    64ca:	b7 95       	ror	r27
    64cc:	88 0f       	add	r24, r24
    64ce:	91 1d       	adc	r25, r1
    64d0:	96 95       	lsr	r25
    64d2:	87 95       	ror	r24
    64d4:	97 f9       	bld	r25, 7
    64d6:	08 95       	ret

000064d8 <__fp_norm2>:
    64d8:	91 50       	subi	r25, 0x01	; 1
    64da:	50 40       	sbci	r21, 0x00	; 0
    64dc:	66 0f       	add	r22, r22
    64de:	77 1f       	adc	r23, r23
    64e0:	88 1f       	adc	r24, r24
    64e2:	d2 f7       	brpl	.-12     	; 0x64d8 <__fp_norm2>
    64e4:	08 95       	ret

000064e6 <__fp_powsodd>:
    64e6:	9f 93       	push	r25
    64e8:	8f 93       	push	r24
    64ea:	7f 93       	push	r23
    64ec:	6f 93       	push	r22
    64ee:	ff 93       	push	r31
    64f0:	ef 93       	push	r30
    64f2:	9b 01       	movw	r18, r22
    64f4:	ac 01       	movw	r20, r24
    64f6:	34 df       	rcall	.-408    	; 0x6360 <__mulsf3>
    64f8:	ef 91       	pop	r30
    64fa:	ff 91       	pop	r31
    64fc:	80 de       	rcall	.-768    	; 0x61fe <__fp_powser>
    64fe:	2f 91       	pop	r18
    6500:	3f 91       	pop	r19
    6502:	4f 91       	pop	r20
    6504:	5f 91       	pop	r21
    6506:	2c cf       	rjmp	.-424    	; 0x6360 <__mulsf3>

00006508 <vfprintf>:
    6508:	2f 92       	push	r2
    650a:	3f 92       	push	r3
    650c:	4f 92       	push	r4
    650e:	5f 92       	push	r5
    6510:	6f 92       	push	r6
    6512:	7f 92       	push	r7
    6514:	8f 92       	push	r8
    6516:	9f 92       	push	r9
    6518:	af 92       	push	r10
    651a:	bf 92       	push	r11
    651c:	cf 92       	push	r12
    651e:	df 92       	push	r13
    6520:	ef 92       	push	r14
    6522:	ff 92       	push	r15
    6524:	0f 93       	push	r16
    6526:	1f 93       	push	r17
    6528:	cf 93       	push	r28
    652a:	df 93       	push	r29
    652c:	cd b7       	in	r28, 0x3d	; 61
    652e:	de b7       	in	r29, 0x3e	; 62
    6530:	60 97       	sbiw	r28, 0x10	; 16
    6532:	0f b6       	in	r0, 0x3f	; 63
    6534:	f8 94       	cli
    6536:	de bf       	out	0x3e, r29	; 62
    6538:	0f be       	out	0x3f, r0	; 63
    653a:	cd bf       	out	0x3d, r28	; 61
    653c:	7c 01       	movw	r14, r24
    653e:	1b 01       	movw	r2, r22
    6540:	6a 01       	movw	r12, r20
    6542:	fc 01       	movw	r30, r24
    6544:	17 82       	std	Z+7, r1	; 0x07
    6546:	16 82       	std	Z+6, r1	; 0x06
    6548:	83 81       	ldd	r24, Z+3	; 0x03
    654a:	81 ff       	sbrs	r24, 1
    654c:	2a c3       	rjmp	.+1620   	; 0x6ba2 <vfprintf+0x69a>
    654e:	9e 01       	movw	r18, r28
    6550:	2f 5f       	subi	r18, 0xFF	; 255
    6552:	3f 4f       	sbci	r19, 0xFF	; 255
    6554:	39 01       	movw	r6, r18
    6556:	f7 01       	movw	r30, r14
    6558:	93 81       	ldd	r25, Z+3	; 0x03
    655a:	f1 01       	movw	r30, r2
    655c:	93 fd       	sbrc	r25, 3
    655e:	85 91       	lpm	r24, Z+
    6560:	93 ff       	sbrs	r25, 3
    6562:	81 91       	ld	r24, Z+
    6564:	1f 01       	movw	r2, r30
    6566:	88 23       	and	r24, r24
    6568:	09 f4       	brne	.+2      	; 0x656c <vfprintf+0x64>
    656a:	17 c3       	rjmp	.+1582   	; 0x6b9a <vfprintf+0x692>
    656c:	85 32       	cpi	r24, 0x25	; 37
    656e:	39 f4       	brne	.+14     	; 0x657e <vfprintf+0x76>
    6570:	93 fd       	sbrc	r25, 3
    6572:	85 91       	lpm	r24, Z+
    6574:	93 ff       	sbrs	r25, 3
    6576:	81 91       	ld	r24, Z+
    6578:	1f 01       	movw	r2, r30
    657a:	85 32       	cpi	r24, 0x25	; 37
    657c:	31 f4       	brne	.+12     	; 0x658a <vfprintf+0x82>
    657e:	b7 01       	movw	r22, r14
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	78 d4       	rcall	.+2288   	; 0x6e74 <fputc>
    6584:	56 01       	movw	r10, r12
    6586:	65 01       	movw	r12, r10
    6588:	e6 cf       	rjmp	.-52     	; 0x6556 <vfprintf+0x4e>
    658a:	10 e0       	ldi	r17, 0x00	; 0
    658c:	51 2c       	mov	r5, r1
    658e:	91 2c       	mov	r9, r1
    6590:	ff e1       	ldi	r31, 0x1F	; 31
    6592:	f9 15       	cp	r31, r9
    6594:	d8 f0       	brcs	.+54     	; 0x65cc <vfprintf+0xc4>
    6596:	8b 32       	cpi	r24, 0x2B	; 43
    6598:	79 f0       	breq	.+30     	; 0x65b8 <vfprintf+0xb0>
    659a:	38 f4       	brcc	.+14     	; 0x65aa <vfprintf+0xa2>
    659c:	80 32       	cpi	r24, 0x20	; 32
    659e:	79 f0       	breq	.+30     	; 0x65be <vfprintf+0xb6>
    65a0:	83 32       	cpi	r24, 0x23	; 35
    65a2:	a1 f4       	brne	.+40     	; 0x65cc <vfprintf+0xc4>
    65a4:	f9 2d       	mov	r31, r9
    65a6:	f0 61       	ori	r31, 0x10	; 16
    65a8:	2e c0       	rjmp	.+92     	; 0x6606 <vfprintf+0xfe>
    65aa:	8d 32       	cpi	r24, 0x2D	; 45
    65ac:	61 f0       	breq	.+24     	; 0x65c6 <vfprintf+0xbe>
    65ae:	80 33       	cpi	r24, 0x30	; 48
    65b0:	69 f4       	brne	.+26     	; 0x65cc <vfprintf+0xc4>
    65b2:	29 2d       	mov	r18, r9
    65b4:	21 60       	ori	r18, 0x01	; 1
    65b6:	2d c0       	rjmp	.+90     	; 0x6612 <vfprintf+0x10a>
    65b8:	39 2d       	mov	r19, r9
    65ba:	32 60       	ori	r19, 0x02	; 2
    65bc:	93 2e       	mov	r9, r19
    65be:	89 2d       	mov	r24, r9
    65c0:	84 60       	ori	r24, 0x04	; 4
    65c2:	98 2e       	mov	r9, r24
    65c4:	2a c0       	rjmp	.+84     	; 0x661a <vfprintf+0x112>
    65c6:	e9 2d       	mov	r30, r9
    65c8:	e8 60       	ori	r30, 0x08	; 8
    65ca:	15 c0       	rjmp	.+42     	; 0x65f6 <vfprintf+0xee>
    65cc:	97 fc       	sbrc	r9, 7
    65ce:	2d c0       	rjmp	.+90     	; 0x662a <vfprintf+0x122>
    65d0:	20 ed       	ldi	r18, 0xD0	; 208
    65d2:	28 0f       	add	r18, r24
    65d4:	2a 30       	cpi	r18, 0x0A	; 10
    65d6:	88 f4       	brcc	.+34     	; 0x65fa <vfprintf+0xf2>
    65d8:	96 fe       	sbrs	r9, 6
    65da:	06 c0       	rjmp	.+12     	; 0x65e8 <vfprintf+0xe0>
    65dc:	3a e0       	ldi	r19, 0x0A	; 10
    65de:	13 9f       	mul	r17, r19
    65e0:	20 0d       	add	r18, r0
    65e2:	11 24       	eor	r1, r1
    65e4:	12 2f       	mov	r17, r18
    65e6:	19 c0       	rjmp	.+50     	; 0x661a <vfprintf+0x112>
    65e8:	8a e0       	ldi	r24, 0x0A	; 10
    65ea:	58 9e       	mul	r5, r24
    65ec:	20 0d       	add	r18, r0
    65ee:	11 24       	eor	r1, r1
    65f0:	52 2e       	mov	r5, r18
    65f2:	e9 2d       	mov	r30, r9
    65f4:	e0 62       	ori	r30, 0x20	; 32
    65f6:	9e 2e       	mov	r9, r30
    65f8:	10 c0       	rjmp	.+32     	; 0x661a <vfprintf+0x112>
    65fa:	8e 32       	cpi	r24, 0x2E	; 46
    65fc:	31 f4       	brne	.+12     	; 0x660a <vfprintf+0x102>
    65fe:	96 fc       	sbrc	r9, 6
    6600:	cc c2       	rjmp	.+1432   	; 0x6b9a <vfprintf+0x692>
    6602:	f9 2d       	mov	r31, r9
    6604:	f0 64       	ori	r31, 0x40	; 64
    6606:	9f 2e       	mov	r9, r31
    6608:	08 c0       	rjmp	.+16     	; 0x661a <vfprintf+0x112>
    660a:	8c 36       	cpi	r24, 0x6C	; 108
    660c:	21 f4       	brne	.+8      	; 0x6616 <vfprintf+0x10e>
    660e:	29 2d       	mov	r18, r9
    6610:	20 68       	ori	r18, 0x80	; 128
    6612:	92 2e       	mov	r9, r18
    6614:	02 c0       	rjmp	.+4      	; 0x661a <vfprintf+0x112>
    6616:	88 36       	cpi	r24, 0x68	; 104
    6618:	41 f4       	brne	.+16     	; 0x662a <vfprintf+0x122>
    661a:	f1 01       	movw	r30, r2
    661c:	93 fd       	sbrc	r25, 3
    661e:	85 91       	lpm	r24, Z+
    6620:	93 ff       	sbrs	r25, 3
    6622:	81 91       	ld	r24, Z+
    6624:	1f 01       	movw	r2, r30
    6626:	81 11       	cpse	r24, r1
    6628:	b3 cf       	rjmp	.-154    	; 0x6590 <vfprintf+0x88>
    662a:	9b eb       	ldi	r25, 0xBB	; 187
    662c:	98 0f       	add	r25, r24
    662e:	93 30       	cpi	r25, 0x03	; 3
    6630:	20 f4       	brcc	.+8      	; 0x663a <vfprintf+0x132>
    6632:	99 2d       	mov	r25, r9
    6634:	90 61       	ori	r25, 0x10	; 16
    6636:	80 5e       	subi	r24, 0xE0	; 224
    6638:	07 c0       	rjmp	.+14     	; 0x6648 <vfprintf+0x140>
    663a:	9b e9       	ldi	r25, 0x9B	; 155
    663c:	98 0f       	add	r25, r24
    663e:	93 30       	cpi	r25, 0x03	; 3
    6640:	08 f0       	brcs	.+2      	; 0x6644 <vfprintf+0x13c>
    6642:	59 c1       	rjmp	.+690    	; 0x68f6 <vfprintf+0x3ee>
    6644:	99 2d       	mov	r25, r9
    6646:	9f 7e       	andi	r25, 0xEF	; 239
    6648:	96 ff       	sbrs	r25, 6
    664a:	16 e0       	ldi	r17, 0x06	; 6
    664c:	9f 73       	andi	r25, 0x3F	; 63
    664e:	99 2e       	mov	r9, r25
    6650:	85 36       	cpi	r24, 0x65	; 101
    6652:	19 f4       	brne	.+6      	; 0x665a <vfprintf+0x152>
    6654:	90 64       	ori	r25, 0x40	; 64
    6656:	99 2e       	mov	r9, r25
    6658:	08 c0       	rjmp	.+16     	; 0x666a <vfprintf+0x162>
    665a:	86 36       	cpi	r24, 0x66	; 102
    665c:	21 f4       	brne	.+8      	; 0x6666 <vfprintf+0x15e>
    665e:	39 2f       	mov	r19, r25
    6660:	30 68       	ori	r19, 0x80	; 128
    6662:	93 2e       	mov	r9, r19
    6664:	02 c0       	rjmp	.+4      	; 0x666a <vfprintf+0x162>
    6666:	11 11       	cpse	r17, r1
    6668:	11 50       	subi	r17, 0x01	; 1
    666a:	97 fe       	sbrs	r9, 7
    666c:	07 c0       	rjmp	.+14     	; 0x667c <vfprintf+0x174>
    666e:	1c 33       	cpi	r17, 0x3C	; 60
    6670:	50 f4       	brcc	.+20     	; 0x6686 <vfprintf+0x17e>
    6672:	44 24       	eor	r4, r4
    6674:	43 94       	inc	r4
    6676:	41 0e       	add	r4, r17
    6678:	27 e0       	ldi	r18, 0x07	; 7
    667a:	0b c0       	rjmp	.+22     	; 0x6692 <vfprintf+0x18a>
    667c:	18 30       	cpi	r17, 0x08	; 8
    667e:	38 f0       	brcs	.+14     	; 0x668e <vfprintf+0x186>
    6680:	27 e0       	ldi	r18, 0x07	; 7
    6682:	17 e0       	ldi	r17, 0x07	; 7
    6684:	05 c0       	rjmp	.+10     	; 0x6690 <vfprintf+0x188>
    6686:	27 e0       	ldi	r18, 0x07	; 7
    6688:	9c e3       	ldi	r25, 0x3C	; 60
    668a:	49 2e       	mov	r4, r25
    668c:	02 c0       	rjmp	.+4      	; 0x6692 <vfprintf+0x18a>
    668e:	21 2f       	mov	r18, r17
    6690:	41 2c       	mov	r4, r1
    6692:	56 01       	movw	r10, r12
    6694:	84 e0       	ldi	r24, 0x04	; 4
    6696:	a8 0e       	add	r10, r24
    6698:	b1 1c       	adc	r11, r1
    669a:	f6 01       	movw	r30, r12
    669c:	60 81       	ld	r22, Z
    669e:	71 81       	ldd	r23, Z+1	; 0x01
    66a0:	82 81       	ldd	r24, Z+2	; 0x02
    66a2:	93 81       	ldd	r25, Z+3	; 0x03
    66a4:	04 2d       	mov	r16, r4
    66a6:	a3 01       	movw	r20, r6
    66a8:	ee d2       	rcall	.+1500   	; 0x6c86 <__ftoa_engine>
    66aa:	6c 01       	movw	r12, r24
    66ac:	f9 81       	ldd	r31, Y+1	; 0x01
    66ae:	fc 87       	std	Y+12, r31	; 0x0c
    66b0:	f0 ff       	sbrs	r31, 0
    66b2:	02 c0       	rjmp	.+4      	; 0x66b8 <vfprintf+0x1b0>
    66b4:	f3 ff       	sbrs	r31, 3
    66b6:	06 c0       	rjmp	.+12     	; 0x66c4 <vfprintf+0x1bc>
    66b8:	91 fc       	sbrc	r9, 1
    66ba:	06 c0       	rjmp	.+12     	; 0x66c8 <vfprintf+0x1c0>
    66bc:	92 fe       	sbrs	r9, 2
    66be:	06 c0       	rjmp	.+12     	; 0x66cc <vfprintf+0x1c4>
    66c0:	00 e2       	ldi	r16, 0x20	; 32
    66c2:	05 c0       	rjmp	.+10     	; 0x66ce <vfprintf+0x1c6>
    66c4:	0d e2       	ldi	r16, 0x2D	; 45
    66c6:	03 c0       	rjmp	.+6      	; 0x66ce <vfprintf+0x1c6>
    66c8:	0b e2       	ldi	r16, 0x2B	; 43
    66ca:	01 c0       	rjmp	.+2      	; 0x66ce <vfprintf+0x1c6>
    66cc:	00 e0       	ldi	r16, 0x00	; 0
    66ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    66d0:	8c 70       	andi	r24, 0x0C	; 12
    66d2:	19 f0       	breq	.+6      	; 0x66da <vfprintf+0x1d2>
    66d4:	01 11       	cpse	r16, r1
    66d6:	43 c2       	rjmp	.+1158   	; 0x6b5e <vfprintf+0x656>
    66d8:	80 c2       	rjmp	.+1280   	; 0x6bda <vfprintf+0x6d2>
    66da:	97 fe       	sbrs	r9, 7
    66dc:	10 c0       	rjmp	.+32     	; 0x66fe <vfprintf+0x1f6>
    66de:	4c 0c       	add	r4, r12
    66e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    66e2:	f4 ff       	sbrs	r31, 4
    66e4:	04 c0       	rjmp	.+8      	; 0x66ee <vfprintf+0x1e6>
    66e6:	8a 81       	ldd	r24, Y+2	; 0x02
    66e8:	81 33       	cpi	r24, 0x31	; 49
    66ea:	09 f4       	brne	.+2      	; 0x66ee <vfprintf+0x1e6>
    66ec:	4a 94       	dec	r4
    66ee:	14 14       	cp	r1, r4
    66f0:	74 f5       	brge	.+92     	; 0x674e <vfprintf+0x246>
    66f2:	28 e0       	ldi	r18, 0x08	; 8
    66f4:	24 15       	cp	r18, r4
    66f6:	78 f5       	brcc	.+94     	; 0x6756 <vfprintf+0x24e>
    66f8:	88 e0       	ldi	r24, 0x08	; 8
    66fa:	48 2e       	mov	r4, r24
    66fc:	2c c0       	rjmp	.+88     	; 0x6756 <vfprintf+0x24e>
    66fe:	96 fc       	sbrc	r9, 6
    6700:	2a c0       	rjmp	.+84     	; 0x6756 <vfprintf+0x24e>
    6702:	81 2f       	mov	r24, r17
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	8c 15       	cp	r24, r12
    6708:	9d 05       	cpc	r25, r13
    670a:	9c f0       	brlt	.+38     	; 0x6732 <vfprintf+0x22a>
    670c:	3c ef       	ldi	r19, 0xFC	; 252
    670e:	c3 16       	cp	r12, r19
    6710:	3f ef       	ldi	r19, 0xFF	; 255
    6712:	d3 06       	cpc	r13, r19
    6714:	74 f0       	brlt	.+28     	; 0x6732 <vfprintf+0x22a>
    6716:	89 2d       	mov	r24, r9
    6718:	80 68       	ori	r24, 0x80	; 128
    671a:	98 2e       	mov	r9, r24
    671c:	0a c0       	rjmp	.+20     	; 0x6732 <vfprintf+0x22a>
    671e:	e2 e0       	ldi	r30, 0x02	; 2
    6720:	f0 e0       	ldi	r31, 0x00	; 0
    6722:	ec 0f       	add	r30, r28
    6724:	fd 1f       	adc	r31, r29
    6726:	e1 0f       	add	r30, r17
    6728:	f1 1d       	adc	r31, r1
    672a:	80 81       	ld	r24, Z
    672c:	80 33       	cpi	r24, 0x30	; 48
    672e:	19 f4       	brne	.+6      	; 0x6736 <vfprintf+0x22e>
    6730:	11 50       	subi	r17, 0x01	; 1
    6732:	11 11       	cpse	r17, r1
    6734:	f4 cf       	rjmp	.-24     	; 0x671e <vfprintf+0x216>
    6736:	97 fe       	sbrs	r9, 7
    6738:	0e c0       	rjmp	.+28     	; 0x6756 <vfprintf+0x24e>
    673a:	44 24       	eor	r4, r4
    673c:	43 94       	inc	r4
    673e:	41 0e       	add	r4, r17
    6740:	81 2f       	mov	r24, r17
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	c8 16       	cp	r12, r24
    6746:	d9 06       	cpc	r13, r25
    6748:	2c f4       	brge	.+10     	; 0x6754 <vfprintf+0x24c>
    674a:	1c 19       	sub	r17, r12
    674c:	04 c0       	rjmp	.+8      	; 0x6756 <vfprintf+0x24e>
    674e:	44 24       	eor	r4, r4
    6750:	43 94       	inc	r4
    6752:	01 c0       	rjmp	.+2      	; 0x6756 <vfprintf+0x24e>
    6754:	10 e0       	ldi	r17, 0x00	; 0
    6756:	97 fe       	sbrs	r9, 7
    6758:	06 c0       	rjmp	.+12     	; 0x6766 <vfprintf+0x25e>
    675a:	1c 14       	cp	r1, r12
    675c:	1d 04       	cpc	r1, r13
    675e:	34 f4       	brge	.+12     	; 0x676c <vfprintf+0x264>
    6760:	c6 01       	movw	r24, r12
    6762:	01 96       	adiw	r24, 0x01	; 1
    6764:	05 c0       	rjmp	.+10     	; 0x6770 <vfprintf+0x268>
    6766:	85 e0       	ldi	r24, 0x05	; 5
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	02 c0       	rjmp	.+4      	; 0x6770 <vfprintf+0x268>
    676c:	81 e0       	ldi	r24, 0x01	; 1
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	01 11       	cpse	r16, r1
    6772:	01 96       	adiw	r24, 0x01	; 1
    6774:	11 23       	and	r17, r17
    6776:	31 f0       	breq	.+12     	; 0x6784 <vfprintf+0x27c>
    6778:	21 2f       	mov	r18, r17
    677a:	30 e0       	ldi	r19, 0x00	; 0
    677c:	2f 5f       	subi	r18, 0xFF	; 255
    677e:	3f 4f       	sbci	r19, 0xFF	; 255
    6780:	82 0f       	add	r24, r18
    6782:	93 1f       	adc	r25, r19
    6784:	25 2d       	mov	r18, r5
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	82 17       	cp	r24, r18
    678a:	93 07       	cpc	r25, r19
    678c:	14 f4       	brge	.+4      	; 0x6792 <vfprintf+0x28a>
    678e:	58 1a       	sub	r5, r24
    6790:	01 c0       	rjmp	.+2      	; 0x6794 <vfprintf+0x28c>
    6792:	51 2c       	mov	r5, r1
    6794:	89 2d       	mov	r24, r9
    6796:	89 70       	andi	r24, 0x09	; 9
    6798:	41 f4       	brne	.+16     	; 0x67aa <vfprintf+0x2a2>
    679a:	55 20       	and	r5, r5
    679c:	31 f0       	breq	.+12     	; 0x67aa <vfprintf+0x2a2>
    679e:	b7 01       	movw	r22, r14
    67a0:	80 e2       	ldi	r24, 0x20	; 32
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	67 d3       	rcall	.+1742   	; 0x6e74 <fputc>
    67a6:	5a 94       	dec	r5
    67a8:	f8 cf       	rjmp	.-16     	; 0x679a <vfprintf+0x292>
    67aa:	00 23       	and	r16, r16
    67ac:	21 f0       	breq	.+8      	; 0x67b6 <vfprintf+0x2ae>
    67ae:	b7 01       	movw	r22, r14
    67b0:	80 2f       	mov	r24, r16
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	5f d3       	rcall	.+1726   	; 0x6e74 <fputc>
    67b6:	93 fc       	sbrc	r9, 3
    67b8:	08 c0       	rjmp	.+16     	; 0x67ca <vfprintf+0x2c2>
    67ba:	55 20       	and	r5, r5
    67bc:	31 f0       	breq	.+12     	; 0x67ca <vfprintf+0x2c2>
    67be:	b7 01       	movw	r22, r14
    67c0:	80 e3       	ldi	r24, 0x30	; 48
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	57 d3       	rcall	.+1710   	; 0x6e74 <fputc>
    67c6:	5a 94       	dec	r5
    67c8:	f8 cf       	rjmp	.-16     	; 0x67ba <vfprintf+0x2b2>
    67ca:	97 fe       	sbrs	r9, 7
    67cc:	4a c0       	rjmp	.+148    	; 0x6862 <vfprintf+0x35a>
    67ce:	46 01       	movw	r8, r12
    67d0:	d7 fe       	sbrs	r13, 7
    67d2:	02 c0       	rjmp	.+4      	; 0x67d8 <vfprintf+0x2d0>
    67d4:	81 2c       	mov	r8, r1
    67d6:	91 2c       	mov	r9, r1
    67d8:	c6 01       	movw	r24, r12
    67da:	88 19       	sub	r24, r8
    67dc:	99 09       	sbc	r25, r9
    67de:	f3 01       	movw	r30, r6
    67e0:	e8 0f       	add	r30, r24
    67e2:	f9 1f       	adc	r31, r25
    67e4:	fe 87       	std	Y+14, r31	; 0x0e
    67e6:	ed 87       	std	Y+13, r30	; 0x0d
    67e8:	96 01       	movw	r18, r12
    67ea:	24 19       	sub	r18, r4
    67ec:	31 09       	sbc	r19, r1
    67ee:	38 8b       	std	Y+16, r19	; 0x10
    67f0:	2f 87       	std	Y+15, r18	; 0x0f
    67f2:	01 2f       	mov	r16, r17
    67f4:	10 e0       	ldi	r17, 0x00	; 0
    67f6:	11 95       	neg	r17
    67f8:	01 95       	neg	r16
    67fa:	11 09       	sbc	r17, r1
    67fc:	3f ef       	ldi	r19, 0xFF	; 255
    67fe:	83 16       	cp	r8, r19
    6800:	93 06       	cpc	r9, r19
    6802:	21 f4       	brne	.+8      	; 0x680c <vfprintf+0x304>
    6804:	b7 01       	movw	r22, r14
    6806:	8e e2       	ldi	r24, 0x2E	; 46
    6808:	90 e0       	ldi	r25, 0x00	; 0
    680a:	34 d3       	rcall	.+1640   	; 0x6e74 <fputc>
    680c:	c8 14       	cp	r12, r8
    680e:	d9 04       	cpc	r13, r9
    6810:	4c f0       	brlt	.+18     	; 0x6824 <vfprintf+0x31c>
    6812:	8f 85       	ldd	r24, Y+15	; 0x0f
    6814:	98 89       	ldd	r25, Y+16	; 0x10
    6816:	88 15       	cp	r24, r8
    6818:	99 05       	cpc	r25, r9
    681a:	24 f4       	brge	.+8      	; 0x6824 <vfprintf+0x31c>
    681c:	ed 85       	ldd	r30, Y+13	; 0x0d
    681e:	fe 85       	ldd	r31, Y+14	; 0x0e
    6820:	81 81       	ldd	r24, Z+1	; 0x01
    6822:	01 c0       	rjmp	.+2      	; 0x6826 <vfprintf+0x31e>
    6824:	80 e3       	ldi	r24, 0x30	; 48
    6826:	f1 e0       	ldi	r31, 0x01	; 1
    6828:	8f 1a       	sub	r8, r31
    682a:	91 08       	sbc	r9, r1
    682c:	2d 85       	ldd	r18, Y+13	; 0x0d
    682e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6830:	2f 5f       	subi	r18, 0xFF	; 255
    6832:	3f 4f       	sbci	r19, 0xFF	; 255
    6834:	3e 87       	std	Y+14, r19	; 0x0e
    6836:	2d 87       	std	Y+13, r18	; 0x0d
    6838:	80 16       	cp	r8, r16
    683a:	91 06       	cpc	r9, r17
    683c:	24 f0       	brlt	.+8      	; 0x6846 <vfprintf+0x33e>
    683e:	b7 01       	movw	r22, r14
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	18 d3       	rcall	.+1584   	; 0x6e74 <fputc>
    6844:	db cf       	rjmp	.-74     	; 0x67fc <vfprintf+0x2f4>
    6846:	c8 14       	cp	r12, r8
    6848:	d9 04       	cpc	r13, r9
    684a:	41 f4       	brne	.+16     	; 0x685c <vfprintf+0x354>
    684c:	9a 81       	ldd	r25, Y+2	; 0x02
    684e:	96 33       	cpi	r25, 0x36	; 54
    6850:	20 f4       	brcc	.+8      	; 0x685a <vfprintf+0x352>
    6852:	95 33       	cpi	r25, 0x35	; 53
    6854:	19 f4       	brne	.+6      	; 0x685c <vfprintf+0x354>
    6856:	3c 85       	ldd	r19, Y+12	; 0x0c
    6858:	34 ff       	sbrs	r19, 4
    685a:	81 e3       	ldi	r24, 0x31	; 49
    685c:	b7 01       	movw	r22, r14
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	48 c0       	rjmp	.+144    	; 0x68f2 <vfprintf+0x3ea>
    6862:	8a 81       	ldd	r24, Y+2	; 0x02
    6864:	81 33       	cpi	r24, 0x31	; 49
    6866:	19 f0       	breq	.+6      	; 0x686e <vfprintf+0x366>
    6868:	9c 85       	ldd	r25, Y+12	; 0x0c
    686a:	9f 7e       	andi	r25, 0xEF	; 239
    686c:	9c 87       	std	Y+12, r25	; 0x0c
    686e:	b7 01       	movw	r22, r14
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	00 d3       	rcall	.+1536   	; 0x6e74 <fputc>
    6874:	11 11       	cpse	r17, r1
    6876:	05 c0       	rjmp	.+10     	; 0x6882 <vfprintf+0x37a>
    6878:	94 fc       	sbrc	r9, 4
    687a:	16 c0       	rjmp	.+44     	; 0x68a8 <vfprintf+0x3a0>
    687c:	85 e6       	ldi	r24, 0x65	; 101
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	15 c0       	rjmp	.+42     	; 0x68ac <vfprintf+0x3a4>
    6882:	b7 01       	movw	r22, r14
    6884:	8e e2       	ldi	r24, 0x2E	; 46
    6886:	90 e0       	ldi	r25, 0x00	; 0
    6888:	f5 d2       	rcall	.+1514   	; 0x6e74 <fputc>
    688a:	1e 5f       	subi	r17, 0xFE	; 254
    688c:	82 e0       	ldi	r24, 0x02	; 2
    688e:	01 e0       	ldi	r16, 0x01	; 1
    6890:	08 0f       	add	r16, r24
    6892:	f3 01       	movw	r30, r6
    6894:	e8 0f       	add	r30, r24
    6896:	f1 1d       	adc	r31, r1
    6898:	80 81       	ld	r24, Z
    689a:	b7 01       	movw	r22, r14
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	ea d2       	rcall	.+1492   	; 0x6e74 <fputc>
    68a0:	80 2f       	mov	r24, r16
    68a2:	01 13       	cpse	r16, r17
    68a4:	f4 cf       	rjmp	.-24     	; 0x688e <vfprintf+0x386>
    68a6:	e8 cf       	rjmp	.-48     	; 0x6878 <vfprintf+0x370>
    68a8:	85 e4       	ldi	r24, 0x45	; 69
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	b7 01       	movw	r22, r14
    68ae:	e2 d2       	rcall	.+1476   	; 0x6e74 <fputc>
    68b0:	d7 fc       	sbrc	r13, 7
    68b2:	06 c0       	rjmp	.+12     	; 0x68c0 <vfprintf+0x3b8>
    68b4:	c1 14       	cp	r12, r1
    68b6:	d1 04       	cpc	r13, r1
    68b8:	41 f4       	brne	.+16     	; 0x68ca <vfprintf+0x3c2>
    68ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    68bc:	e4 ff       	sbrs	r30, 4
    68be:	05 c0       	rjmp	.+10     	; 0x68ca <vfprintf+0x3c2>
    68c0:	d1 94       	neg	r13
    68c2:	c1 94       	neg	r12
    68c4:	d1 08       	sbc	r13, r1
    68c6:	8d e2       	ldi	r24, 0x2D	; 45
    68c8:	01 c0       	rjmp	.+2      	; 0x68cc <vfprintf+0x3c4>
    68ca:	8b e2       	ldi	r24, 0x2B	; 43
    68cc:	b7 01       	movw	r22, r14
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	d1 d2       	rcall	.+1442   	; 0x6e74 <fputc>
    68d2:	80 e3       	ldi	r24, 0x30	; 48
    68d4:	2a e0       	ldi	r18, 0x0A	; 10
    68d6:	c2 16       	cp	r12, r18
    68d8:	d1 04       	cpc	r13, r1
    68da:	2c f0       	brlt	.+10     	; 0x68e6 <vfprintf+0x3de>
    68dc:	8f 5f       	subi	r24, 0xFF	; 255
    68de:	fa e0       	ldi	r31, 0x0A	; 10
    68e0:	cf 1a       	sub	r12, r31
    68e2:	d1 08       	sbc	r13, r1
    68e4:	f7 cf       	rjmp	.-18     	; 0x68d4 <vfprintf+0x3cc>
    68e6:	b7 01       	movw	r22, r14
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	c4 d2       	rcall	.+1416   	; 0x6e74 <fputc>
    68ec:	b7 01       	movw	r22, r14
    68ee:	c6 01       	movw	r24, r12
    68f0:	c0 96       	adiw	r24, 0x30	; 48
    68f2:	c0 d2       	rcall	.+1408   	; 0x6e74 <fputc>
    68f4:	49 c1       	rjmp	.+658    	; 0x6b88 <vfprintf+0x680>
    68f6:	83 36       	cpi	r24, 0x63	; 99
    68f8:	31 f0       	breq	.+12     	; 0x6906 <vfprintf+0x3fe>
    68fa:	83 37       	cpi	r24, 0x73	; 115
    68fc:	79 f0       	breq	.+30     	; 0x691c <vfprintf+0x414>
    68fe:	83 35       	cpi	r24, 0x53	; 83
    6900:	09 f0       	breq	.+2      	; 0x6904 <vfprintf+0x3fc>
    6902:	52 c0       	rjmp	.+164    	; 0x69a8 <vfprintf+0x4a0>
    6904:	1f c0       	rjmp	.+62     	; 0x6944 <vfprintf+0x43c>
    6906:	56 01       	movw	r10, r12
    6908:	32 e0       	ldi	r19, 0x02	; 2
    690a:	a3 0e       	add	r10, r19
    690c:	b1 1c       	adc	r11, r1
    690e:	f6 01       	movw	r30, r12
    6910:	80 81       	ld	r24, Z
    6912:	89 83       	std	Y+1, r24	; 0x01
    6914:	01 e0       	ldi	r16, 0x01	; 1
    6916:	10 e0       	ldi	r17, 0x00	; 0
    6918:	63 01       	movw	r12, r6
    691a:	11 c0       	rjmp	.+34     	; 0x693e <vfprintf+0x436>
    691c:	56 01       	movw	r10, r12
    691e:	f2 e0       	ldi	r31, 0x02	; 2
    6920:	af 0e       	add	r10, r31
    6922:	b1 1c       	adc	r11, r1
    6924:	f6 01       	movw	r30, r12
    6926:	c0 80       	ld	r12, Z
    6928:	d1 80       	ldd	r13, Z+1	; 0x01
    692a:	96 fe       	sbrs	r9, 6
    692c:	03 c0       	rjmp	.+6      	; 0x6934 <vfprintf+0x42c>
    692e:	61 2f       	mov	r22, r17
    6930:	70 e0       	ldi	r23, 0x00	; 0
    6932:	02 c0       	rjmp	.+4      	; 0x6938 <vfprintf+0x430>
    6934:	6f ef       	ldi	r22, 0xFF	; 255
    6936:	7f ef       	ldi	r23, 0xFF	; 255
    6938:	c6 01       	movw	r24, r12
    693a:	91 d2       	rcall	.+1314   	; 0x6e5e <strnlen>
    693c:	8c 01       	movw	r16, r24
    693e:	f9 2d       	mov	r31, r9
    6940:	ff 77       	andi	r31, 0x7F	; 127
    6942:	13 c0       	rjmp	.+38     	; 0x696a <vfprintf+0x462>
    6944:	56 01       	movw	r10, r12
    6946:	22 e0       	ldi	r18, 0x02	; 2
    6948:	a2 0e       	add	r10, r18
    694a:	b1 1c       	adc	r11, r1
    694c:	f6 01       	movw	r30, r12
    694e:	c0 80       	ld	r12, Z
    6950:	d1 80       	ldd	r13, Z+1	; 0x01
    6952:	96 fe       	sbrs	r9, 6
    6954:	03 c0       	rjmp	.+6      	; 0x695c <vfprintf+0x454>
    6956:	61 2f       	mov	r22, r17
    6958:	70 e0       	ldi	r23, 0x00	; 0
    695a:	02 c0       	rjmp	.+4      	; 0x6960 <vfprintf+0x458>
    695c:	6f ef       	ldi	r22, 0xFF	; 255
    695e:	7f ef       	ldi	r23, 0xFF	; 255
    6960:	c6 01       	movw	r24, r12
    6962:	69 d2       	rcall	.+1234   	; 0x6e36 <strnlen_P>
    6964:	8c 01       	movw	r16, r24
    6966:	f9 2d       	mov	r31, r9
    6968:	f0 68       	ori	r31, 0x80	; 128
    696a:	9f 2e       	mov	r9, r31
    696c:	f3 fd       	sbrc	r31, 3
    696e:	18 c0       	rjmp	.+48     	; 0x69a0 <vfprintf+0x498>
    6970:	85 2d       	mov	r24, r5
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	08 17       	cp	r16, r24
    6976:	19 07       	cpc	r17, r25
    6978:	98 f4       	brcc	.+38     	; 0x69a0 <vfprintf+0x498>
    697a:	b7 01       	movw	r22, r14
    697c:	80 e2       	ldi	r24, 0x20	; 32
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	79 d2       	rcall	.+1266   	; 0x6e74 <fputc>
    6982:	5a 94       	dec	r5
    6984:	f5 cf       	rjmp	.-22     	; 0x6970 <vfprintf+0x468>
    6986:	f6 01       	movw	r30, r12
    6988:	97 fc       	sbrc	r9, 7
    698a:	85 91       	lpm	r24, Z+
    698c:	97 fe       	sbrs	r9, 7
    698e:	81 91       	ld	r24, Z+
    6990:	6f 01       	movw	r12, r30
    6992:	b7 01       	movw	r22, r14
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	6e d2       	rcall	.+1244   	; 0x6e74 <fputc>
    6998:	51 10       	cpse	r5, r1
    699a:	5a 94       	dec	r5
    699c:	01 50       	subi	r16, 0x01	; 1
    699e:	11 09       	sbc	r17, r1
    69a0:	01 15       	cp	r16, r1
    69a2:	11 05       	cpc	r17, r1
    69a4:	81 f7       	brne	.-32     	; 0x6986 <vfprintf+0x47e>
    69a6:	f0 c0       	rjmp	.+480    	; 0x6b88 <vfprintf+0x680>
    69a8:	84 36       	cpi	r24, 0x64	; 100
    69aa:	11 f0       	breq	.+4      	; 0x69b0 <vfprintf+0x4a8>
    69ac:	89 36       	cpi	r24, 0x69	; 105
    69ae:	59 f5       	brne	.+86     	; 0x6a06 <vfprintf+0x4fe>
    69b0:	56 01       	movw	r10, r12
    69b2:	97 fe       	sbrs	r9, 7
    69b4:	09 c0       	rjmp	.+18     	; 0x69c8 <vfprintf+0x4c0>
    69b6:	24 e0       	ldi	r18, 0x04	; 4
    69b8:	a2 0e       	add	r10, r18
    69ba:	b1 1c       	adc	r11, r1
    69bc:	f6 01       	movw	r30, r12
    69be:	60 81       	ld	r22, Z
    69c0:	71 81       	ldd	r23, Z+1	; 0x01
    69c2:	82 81       	ldd	r24, Z+2	; 0x02
    69c4:	93 81       	ldd	r25, Z+3	; 0x03
    69c6:	0a c0       	rjmp	.+20     	; 0x69dc <vfprintf+0x4d4>
    69c8:	f2 e0       	ldi	r31, 0x02	; 2
    69ca:	af 0e       	add	r10, r31
    69cc:	b1 1c       	adc	r11, r1
    69ce:	f6 01       	movw	r30, r12
    69d0:	60 81       	ld	r22, Z
    69d2:	71 81       	ldd	r23, Z+1	; 0x01
    69d4:	07 2e       	mov	r0, r23
    69d6:	00 0c       	add	r0, r0
    69d8:	88 0b       	sbc	r24, r24
    69da:	99 0b       	sbc	r25, r25
    69dc:	f9 2d       	mov	r31, r9
    69de:	ff 76       	andi	r31, 0x6F	; 111
    69e0:	9f 2e       	mov	r9, r31
    69e2:	97 ff       	sbrs	r25, 7
    69e4:	09 c0       	rjmp	.+18     	; 0x69f8 <vfprintf+0x4f0>
    69e6:	90 95       	com	r25
    69e8:	80 95       	com	r24
    69ea:	70 95       	com	r23
    69ec:	61 95       	neg	r22
    69ee:	7f 4f       	sbci	r23, 0xFF	; 255
    69f0:	8f 4f       	sbci	r24, 0xFF	; 255
    69f2:	9f 4f       	sbci	r25, 0xFF	; 255
    69f4:	f0 68       	ori	r31, 0x80	; 128
    69f6:	9f 2e       	mov	r9, r31
    69f8:	2a e0       	ldi	r18, 0x0A	; 10
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	a3 01       	movw	r20, r6
    69fe:	9e d2       	rcall	.+1340   	; 0x6f3c <__ultoa_invert>
    6a00:	c8 2e       	mov	r12, r24
    6a02:	c6 18       	sub	r12, r6
    6a04:	3e c0       	rjmp	.+124    	; 0x6a82 <vfprintf+0x57a>
    6a06:	09 2d       	mov	r16, r9
    6a08:	85 37       	cpi	r24, 0x75	; 117
    6a0a:	21 f4       	brne	.+8      	; 0x6a14 <vfprintf+0x50c>
    6a0c:	0f 7e       	andi	r16, 0xEF	; 239
    6a0e:	2a e0       	ldi	r18, 0x0A	; 10
    6a10:	30 e0       	ldi	r19, 0x00	; 0
    6a12:	1d c0       	rjmp	.+58     	; 0x6a4e <vfprintf+0x546>
    6a14:	09 7f       	andi	r16, 0xF9	; 249
    6a16:	8f 36       	cpi	r24, 0x6F	; 111
    6a18:	91 f0       	breq	.+36     	; 0x6a3e <vfprintf+0x536>
    6a1a:	18 f4       	brcc	.+6      	; 0x6a22 <vfprintf+0x51a>
    6a1c:	88 35       	cpi	r24, 0x58	; 88
    6a1e:	59 f0       	breq	.+22     	; 0x6a36 <vfprintf+0x52e>
    6a20:	bc c0       	rjmp	.+376    	; 0x6b9a <vfprintf+0x692>
    6a22:	80 37       	cpi	r24, 0x70	; 112
    6a24:	19 f0       	breq	.+6      	; 0x6a2c <vfprintf+0x524>
    6a26:	88 37       	cpi	r24, 0x78	; 120
    6a28:	11 f0       	breq	.+4      	; 0x6a2e <vfprintf+0x526>
    6a2a:	b7 c0       	rjmp	.+366    	; 0x6b9a <vfprintf+0x692>
    6a2c:	00 61       	ori	r16, 0x10	; 16
    6a2e:	04 ff       	sbrs	r16, 4
    6a30:	09 c0       	rjmp	.+18     	; 0x6a44 <vfprintf+0x53c>
    6a32:	04 60       	ori	r16, 0x04	; 4
    6a34:	07 c0       	rjmp	.+14     	; 0x6a44 <vfprintf+0x53c>
    6a36:	94 fe       	sbrs	r9, 4
    6a38:	08 c0       	rjmp	.+16     	; 0x6a4a <vfprintf+0x542>
    6a3a:	06 60       	ori	r16, 0x06	; 6
    6a3c:	06 c0       	rjmp	.+12     	; 0x6a4a <vfprintf+0x542>
    6a3e:	28 e0       	ldi	r18, 0x08	; 8
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	05 c0       	rjmp	.+10     	; 0x6a4e <vfprintf+0x546>
    6a44:	20 e1       	ldi	r18, 0x10	; 16
    6a46:	30 e0       	ldi	r19, 0x00	; 0
    6a48:	02 c0       	rjmp	.+4      	; 0x6a4e <vfprintf+0x546>
    6a4a:	20 e1       	ldi	r18, 0x10	; 16
    6a4c:	32 e0       	ldi	r19, 0x02	; 2
    6a4e:	56 01       	movw	r10, r12
    6a50:	07 ff       	sbrs	r16, 7
    6a52:	09 c0       	rjmp	.+18     	; 0x6a66 <vfprintf+0x55e>
    6a54:	84 e0       	ldi	r24, 0x04	; 4
    6a56:	a8 0e       	add	r10, r24
    6a58:	b1 1c       	adc	r11, r1
    6a5a:	f6 01       	movw	r30, r12
    6a5c:	60 81       	ld	r22, Z
    6a5e:	71 81       	ldd	r23, Z+1	; 0x01
    6a60:	82 81       	ldd	r24, Z+2	; 0x02
    6a62:	93 81       	ldd	r25, Z+3	; 0x03
    6a64:	08 c0       	rjmp	.+16     	; 0x6a76 <vfprintf+0x56e>
    6a66:	f2 e0       	ldi	r31, 0x02	; 2
    6a68:	af 0e       	add	r10, r31
    6a6a:	b1 1c       	adc	r11, r1
    6a6c:	f6 01       	movw	r30, r12
    6a6e:	60 81       	ld	r22, Z
    6a70:	71 81       	ldd	r23, Z+1	; 0x01
    6a72:	80 e0       	ldi	r24, 0x00	; 0
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	a3 01       	movw	r20, r6
    6a78:	61 d2       	rcall	.+1218   	; 0x6f3c <__ultoa_invert>
    6a7a:	c8 2e       	mov	r12, r24
    6a7c:	c6 18       	sub	r12, r6
    6a7e:	0f 77       	andi	r16, 0x7F	; 127
    6a80:	90 2e       	mov	r9, r16
    6a82:	96 fe       	sbrs	r9, 6
    6a84:	0b c0       	rjmp	.+22     	; 0x6a9c <vfprintf+0x594>
    6a86:	09 2d       	mov	r16, r9
    6a88:	0e 7f       	andi	r16, 0xFE	; 254
    6a8a:	c1 16       	cp	r12, r17
    6a8c:	50 f4       	brcc	.+20     	; 0x6aa2 <vfprintf+0x59a>
    6a8e:	94 fe       	sbrs	r9, 4
    6a90:	0a c0       	rjmp	.+20     	; 0x6aa6 <vfprintf+0x59e>
    6a92:	92 fc       	sbrc	r9, 2
    6a94:	08 c0       	rjmp	.+16     	; 0x6aa6 <vfprintf+0x59e>
    6a96:	09 2d       	mov	r16, r9
    6a98:	0e 7e       	andi	r16, 0xEE	; 238
    6a9a:	05 c0       	rjmp	.+10     	; 0x6aa6 <vfprintf+0x59e>
    6a9c:	dc 2c       	mov	r13, r12
    6a9e:	09 2d       	mov	r16, r9
    6aa0:	03 c0       	rjmp	.+6      	; 0x6aa8 <vfprintf+0x5a0>
    6aa2:	dc 2c       	mov	r13, r12
    6aa4:	01 c0       	rjmp	.+2      	; 0x6aa8 <vfprintf+0x5a0>
    6aa6:	d1 2e       	mov	r13, r17
    6aa8:	04 ff       	sbrs	r16, 4
    6aaa:	0d c0       	rjmp	.+26     	; 0x6ac6 <vfprintf+0x5be>
    6aac:	fe 01       	movw	r30, r28
    6aae:	ec 0d       	add	r30, r12
    6ab0:	f1 1d       	adc	r31, r1
    6ab2:	80 81       	ld	r24, Z
    6ab4:	80 33       	cpi	r24, 0x30	; 48
    6ab6:	11 f4       	brne	.+4      	; 0x6abc <vfprintf+0x5b4>
    6ab8:	09 7e       	andi	r16, 0xE9	; 233
    6aba:	09 c0       	rjmp	.+18     	; 0x6ace <vfprintf+0x5c6>
    6abc:	02 ff       	sbrs	r16, 2
    6abe:	06 c0       	rjmp	.+12     	; 0x6acc <vfprintf+0x5c4>
    6ac0:	d3 94       	inc	r13
    6ac2:	d3 94       	inc	r13
    6ac4:	04 c0       	rjmp	.+8      	; 0x6ace <vfprintf+0x5c6>
    6ac6:	80 2f       	mov	r24, r16
    6ac8:	86 78       	andi	r24, 0x86	; 134
    6aca:	09 f0       	breq	.+2      	; 0x6ace <vfprintf+0x5c6>
    6acc:	d3 94       	inc	r13
    6ace:	03 fd       	sbrc	r16, 3
    6ad0:	10 c0       	rjmp	.+32     	; 0x6af2 <vfprintf+0x5ea>
    6ad2:	00 ff       	sbrs	r16, 0
    6ad4:	06 c0       	rjmp	.+12     	; 0x6ae2 <vfprintf+0x5da>
    6ad6:	1c 2d       	mov	r17, r12
    6ad8:	d5 14       	cp	r13, r5
    6ada:	78 f4       	brcc	.+30     	; 0x6afa <vfprintf+0x5f2>
    6adc:	15 0d       	add	r17, r5
    6ade:	1d 19       	sub	r17, r13
    6ae0:	0c c0       	rjmp	.+24     	; 0x6afa <vfprintf+0x5f2>
    6ae2:	d5 14       	cp	r13, r5
    6ae4:	50 f4       	brcc	.+20     	; 0x6afa <vfprintf+0x5f2>
    6ae6:	b7 01       	movw	r22, r14
    6ae8:	80 e2       	ldi	r24, 0x20	; 32
    6aea:	90 e0       	ldi	r25, 0x00	; 0
    6aec:	c3 d1       	rcall	.+902    	; 0x6e74 <fputc>
    6aee:	d3 94       	inc	r13
    6af0:	f8 cf       	rjmp	.-16     	; 0x6ae2 <vfprintf+0x5da>
    6af2:	d5 14       	cp	r13, r5
    6af4:	10 f4       	brcc	.+4      	; 0x6afa <vfprintf+0x5f2>
    6af6:	5d 18       	sub	r5, r13
    6af8:	01 c0       	rjmp	.+2      	; 0x6afc <vfprintf+0x5f4>
    6afa:	51 2c       	mov	r5, r1
    6afc:	04 ff       	sbrs	r16, 4
    6afe:	0f c0       	rjmp	.+30     	; 0x6b1e <vfprintf+0x616>
    6b00:	b7 01       	movw	r22, r14
    6b02:	80 e3       	ldi	r24, 0x30	; 48
    6b04:	90 e0       	ldi	r25, 0x00	; 0
    6b06:	b6 d1       	rcall	.+876    	; 0x6e74 <fputc>
    6b08:	02 ff       	sbrs	r16, 2
    6b0a:	16 c0       	rjmp	.+44     	; 0x6b38 <vfprintf+0x630>
    6b0c:	01 fd       	sbrc	r16, 1
    6b0e:	03 c0       	rjmp	.+6      	; 0x6b16 <vfprintf+0x60e>
    6b10:	88 e7       	ldi	r24, 0x78	; 120
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	02 c0       	rjmp	.+4      	; 0x6b1a <vfprintf+0x612>
    6b16:	88 e5       	ldi	r24, 0x58	; 88
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	b7 01       	movw	r22, r14
    6b1c:	0c c0       	rjmp	.+24     	; 0x6b36 <vfprintf+0x62e>
    6b1e:	80 2f       	mov	r24, r16
    6b20:	86 78       	andi	r24, 0x86	; 134
    6b22:	51 f0       	breq	.+20     	; 0x6b38 <vfprintf+0x630>
    6b24:	01 ff       	sbrs	r16, 1
    6b26:	02 c0       	rjmp	.+4      	; 0x6b2c <vfprintf+0x624>
    6b28:	8b e2       	ldi	r24, 0x2B	; 43
    6b2a:	01 c0       	rjmp	.+2      	; 0x6b2e <vfprintf+0x626>
    6b2c:	80 e2       	ldi	r24, 0x20	; 32
    6b2e:	07 fd       	sbrc	r16, 7
    6b30:	8d e2       	ldi	r24, 0x2D	; 45
    6b32:	b7 01       	movw	r22, r14
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	9e d1       	rcall	.+828    	; 0x6e74 <fputc>
    6b38:	c1 16       	cp	r12, r17
    6b3a:	30 f4       	brcc	.+12     	; 0x6b48 <vfprintf+0x640>
    6b3c:	b7 01       	movw	r22, r14
    6b3e:	80 e3       	ldi	r24, 0x30	; 48
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	98 d1       	rcall	.+816    	; 0x6e74 <fputc>
    6b44:	11 50       	subi	r17, 0x01	; 1
    6b46:	f8 cf       	rjmp	.-16     	; 0x6b38 <vfprintf+0x630>
    6b48:	ca 94       	dec	r12
    6b4a:	f3 01       	movw	r30, r6
    6b4c:	ec 0d       	add	r30, r12
    6b4e:	f1 1d       	adc	r31, r1
    6b50:	80 81       	ld	r24, Z
    6b52:	b7 01       	movw	r22, r14
    6b54:	90 e0       	ldi	r25, 0x00	; 0
    6b56:	8e d1       	rcall	.+796    	; 0x6e74 <fputc>
    6b58:	c1 10       	cpse	r12, r1
    6b5a:	f6 cf       	rjmp	.-20     	; 0x6b48 <vfprintf+0x640>
    6b5c:	15 c0       	rjmp	.+42     	; 0x6b88 <vfprintf+0x680>
    6b5e:	f4 e0       	ldi	r31, 0x04	; 4
    6b60:	f5 15       	cp	r31, r5
    6b62:	50 f5       	brcc	.+84     	; 0x6bb8 <vfprintf+0x6b0>
    6b64:	84 e0       	ldi	r24, 0x04	; 4
    6b66:	58 1a       	sub	r5, r24
    6b68:	93 fe       	sbrs	r9, 3
    6b6a:	1e c0       	rjmp	.+60     	; 0x6ba8 <vfprintf+0x6a0>
    6b6c:	01 11       	cpse	r16, r1
    6b6e:	25 c0       	rjmp	.+74     	; 0x6bba <vfprintf+0x6b2>
    6b70:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b72:	23 ff       	sbrs	r18, 3
    6b74:	27 c0       	rjmp	.+78     	; 0x6bc4 <vfprintf+0x6bc>
    6b76:	00 e3       	ldi	r16, 0x30	; 48
    6b78:	11 e0       	ldi	r17, 0x01	; 1
    6b7a:	39 2d       	mov	r19, r9
    6b7c:	30 71       	andi	r19, 0x10	; 16
    6b7e:	93 2e       	mov	r9, r19
    6b80:	f8 01       	movw	r30, r16
    6b82:	84 91       	lpm	r24, Z
    6b84:	81 11       	cpse	r24, r1
    6b86:	21 c0       	rjmp	.+66     	; 0x6bca <vfprintf+0x6c2>
    6b88:	55 20       	and	r5, r5
    6b8a:	09 f4       	brne	.+2      	; 0x6b8e <vfprintf+0x686>
    6b8c:	fc cc       	rjmp	.-1544   	; 0x6586 <vfprintf+0x7e>
    6b8e:	b7 01       	movw	r22, r14
    6b90:	80 e2       	ldi	r24, 0x20	; 32
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	6f d1       	rcall	.+734    	; 0x6e74 <fputc>
    6b96:	5a 94       	dec	r5
    6b98:	f7 cf       	rjmp	.-18     	; 0x6b88 <vfprintf+0x680>
    6b9a:	f7 01       	movw	r30, r14
    6b9c:	86 81       	ldd	r24, Z+6	; 0x06
    6b9e:	97 81       	ldd	r25, Z+7	; 0x07
    6ba0:	23 c0       	rjmp	.+70     	; 0x6be8 <vfprintf+0x6e0>
    6ba2:	8f ef       	ldi	r24, 0xFF	; 255
    6ba4:	9f ef       	ldi	r25, 0xFF	; 255
    6ba6:	20 c0       	rjmp	.+64     	; 0x6be8 <vfprintf+0x6e0>
    6ba8:	b7 01       	movw	r22, r14
    6baa:	80 e2       	ldi	r24, 0x20	; 32
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	62 d1       	rcall	.+708    	; 0x6e74 <fputc>
    6bb0:	5a 94       	dec	r5
    6bb2:	51 10       	cpse	r5, r1
    6bb4:	f9 cf       	rjmp	.-14     	; 0x6ba8 <vfprintf+0x6a0>
    6bb6:	da cf       	rjmp	.-76     	; 0x6b6c <vfprintf+0x664>
    6bb8:	51 2c       	mov	r5, r1
    6bba:	b7 01       	movw	r22, r14
    6bbc:	80 2f       	mov	r24, r16
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	59 d1       	rcall	.+690    	; 0x6e74 <fputc>
    6bc2:	d6 cf       	rjmp	.-84     	; 0x6b70 <vfprintf+0x668>
    6bc4:	04 e3       	ldi	r16, 0x34	; 52
    6bc6:	11 e0       	ldi	r17, 0x01	; 1
    6bc8:	d8 cf       	rjmp	.-80     	; 0x6b7a <vfprintf+0x672>
    6bca:	91 10       	cpse	r9, r1
    6bcc:	80 52       	subi	r24, 0x20	; 32
    6bce:	b7 01       	movw	r22, r14
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	50 d1       	rcall	.+672    	; 0x6e74 <fputc>
    6bd4:	0f 5f       	subi	r16, 0xFF	; 255
    6bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd8:	d3 cf       	rjmp	.-90     	; 0x6b80 <vfprintf+0x678>
    6bda:	23 e0       	ldi	r18, 0x03	; 3
    6bdc:	25 15       	cp	r18, r5
    6bde:	10 f4       	brcc	.+4      	; 0x6be4 <vfprintf+0x6dc>
    6be0:	83 e0       	ldi	r24, 0x03	; 3
    6be2:	c1 cf       	rjmp	.-126    	; 0x6b66 <vfprintf+0x65e>
    6be4:	51 2c       	mov	r5, r1
    6be6:	c4 cf       	rjmp	.-120    	; 0x6b70 <vfprintf+0x668>
    6be8:	60 96       	adiw	r28, 0x10	; 16
    6bea:	0f b6       	in	r0, 0x3f	; 63
    6bec:	f8 94       	cli
    6bee:	de bf       	out	0x3e, r29	; 62
    6bf0:	0f be       	out	0x3f, r0	; 63
    6bf2:	cd bf       	out	0x3d, r28	; 61
    6bf4:	df 91       	pop	r29
    6bf6:	cf 91       	pop	r28
    6bf8:	1f 91       	pop	r17
    6bfa:	0f 91       	pop	r16
    6bfc:	ff 90       	pop	r15
    6bfe:	ef 90       	pop	r14
    6c00:	df 90       	pop	r13
    6c02:	cf 90       	pop	r12
    6c04:	bf 90       	pop	r11
    6c06:	af 90       	pop	r10
    6c08:	9f 90       	pop	r9
    6c0a:	8f 90       	pop	r8
    6c0c:	7f 90       	pop	r7
    6c0e:	6f 90       	pop	r6
    6c10:	5f 90       	pop	r5
    6c12:	4f 90       	pop	r4
    6c14:	3f 90       	pop	r3
    6c16:	2f 90       	pop	r2
    6c18:	08 95       	ret

00006c1a <__divmodhi4>:
    6c1a:	97 fb       	bst	r25, 7
    6c1c:	07 2e       	mov	r0, r23
    6c1e:	16 f4       	brtc	.+4      	; 0x6c24 <__divmodhi4+0xa>
    6c20:	00 94       	com	r0
    6c22:	06 d0       	rcall	.+12     	; 0x6c30 <__divmodhi4_neg1>
    6c24:	77 fd       	sbrc	r23, 7
    6c26:	08 d0       	rcall	.+16     	; 0x6c38 <__divmodhi4_neg2>
    6c28:	1a d0       	rcall	.+52     	; 0x6c5e <__udivmodhi4>
    6c2a:	07 fc       	sbrc	r0, 7
    6c2c:	05 d0       	rcall	.+10     	; 0x6c38 <__divmodhi4_neg2>
    6c2e:	3e f4       	brtc	.+14     	; 0x6c3e <__divmodhi4_exit>

00006c30 <__divmodhi4_neg1>:
    6c30:	90 95       	com	r25
    6c32:	81 95       	neg	r24
    6c34:	9f 4f       	sbci	r25, 0xFF	; 255
    6c36:	08 95       	ret

00006c38 <__divmodhi4_neg2>:
    6c38:	70 95       	com	r23
    6c3a:	61 95       	neg	r22
    6c3c:	7f 4f       	sbci	r23, 0xFF	; 255

00006c3e <__divmodhi4_exit>:
    6c3e:	08 95       	ret

00006c40 <__umulhisi3>:
    6c40:	a2 9f       	mul	r26, r18
    6c42:	b0 01       	movw	r22, r0
    6c44:	b3 9f       	mul	r27, r19
    6c46:	c0 01       	movw	r24, r0
    6c48:	a3 9f       	mul	r26, r19
    6c4a:	70 0d       	add	r23, r0
    6c4c:	81 1d       	adc	r24, r1
    6c4e:	11 24       	eor	r1, r1
    6c50:	91 1d       	adc	r25, r1
    6c52:	b2 9f       	mul	r27, r18
    6c54:	70 0d       	add	r23, r0
    6c56:	81 1d       	adc	r24, r1
    6c58:	11 24       	eor	r1, r1
    6c5a:	91 1d       	adc	r25, r1
    6c5c:	08 95       	ret

00006c5e <__udivmodhi4>:
    6c5e:	aa 1b       	sub	r26, r26
    6c60:	bb 1b       	sub	r27, r27
    6c62:	51 e1       	ldi	r21, 0x11	; 17
    6c64:	07 c0       	rjmp	.+14     	; 0x6c74 <__udivmodhi4_ep>

00006c66 <__udivmodhi4_loop>:
    6c66:	aa 1f       	adc	r26, r26
    6c68:	bb 1f       	adc	r27, r27
    6c6a:	a6 17       	cp	r26, r22
    6c6c:	b7 07       	cpc	r27, r23
    6c6e:	10 f0       	brcs	.+4      	; 0x6c74 <__udivmodhi4_ep>
    6c70:	a6 1b       	sub	r26, r22
    6c72:	b7 0b       	sbc	r27, r23

00006c74 <__udivmodhi4_ep>:
    6c74:	88 1f       	adc	r24, r24
    6c76:	99 1f       	adc	r25, r25
    6c78:	5a 95       	dec	r21
    6c7a:	a9 f7       	brne	.-22     	; 0x6c66 <__udivmodhi4_loop>
    6c7c:	80 95       	com	r24
    6c7e:	90 95       	com	r25
    6c80:	bc 01       	movw	r22, r24
    6c82:	cd 01       	movw	r24, r26
    6c84:	08 95       	ret

00006c86 <__ftoa_engine>:
    6c86:	28 30       	cpi	r18, 0x08	; 8
    6c88:	08 f0       	brcs	.+2      	; 0x6c8c <__ftoa_engine+0x6>
    6c8a:	27 e0       	ldi	r18, 0x07	; 7
    6c8c:	33 27       	eor	r19, r19
    6c8e:	da 01       	movw	r26, r20
    6c90:	99 0f       	add	r25, r25
    6c92:	31 1d       	adc	r19, r1
    6c94:	87 fd       	sbrc	r24, 7
    6c96:	91 60       	ori	r25, 0x01	; 1
    6c98:	00 96       	adiw	r24, 0x00	; 0
    6c9a:	61 05       	cpc	r22, r1
    6c9c:	71 05       	cpc	r23, r1
    6c9e:	39 f4       	brne	.+14     	; 0x6cae <__ftoa_engine+0x28>
    6ca0:	32 60       	ori	r19, 0x02	; 2
    6ca2:	2e 5f       	subi	r18, 0xFE	; 254
    6ca4:	3d 93       	st	X+, r19
    6ca6:	30 e3       	ldi	r19, 0x30	; 48
    6ca8:	2a 95       	dec	r18
    6caa:	e1 f7       	brne	.-8      	; 0x6ca4 <__ftoa_engine+0x1e>
    6cac:	08 95       	ret
    6cae:	9f 3f       	cpi	r25, 0xFF	; 255
    6cb0:	30 f0       	brcs	.+12     	; 0x6cbe <__ftoa_engine+0x38>
    6cb2:	80 38       	cpi	r24, 0x80	; 128
    6cb4:	71 05       	cpc	r23, r1
    6cb6:	61 05       	cpc	r22, r1
    6cb8:	09 f0       	breq	.+2      	; 0x6cbc <__ftoa_engine+0x36>
    6cba:	3c 5f       	subi	r19, 0xFC	; 252
    6cbc:	3c 5f       	subi	r19, 0xFC	; 252
    6cbe:	3d 93       	st	X+, r19
    6cc0:	91 30       	cpi	r25, 0x01	; 1
    6cc2:	08 f0       	brcs	.+2      	; 0x6cc6 <__ftoa_engine+0x40>
    6cc4:	80 68       	ori	r24, 0x80	; 128
    6cc6:	91 1d       	adc	r25, r1
    6cc8:	df 93       	push	r29
    6cca:	cf 93       	push	r28
    6ccc:	1f 93       	push	r17
    6cce:	0f 93       	push	r16
    6cd0:	ff 92       	push	r15
    6cd2:	ef 92       	push	r14
    6cd4:	19 2f       	mov	r17, r25
    6cd6:	98 7f       	andi	r25, 0xF8	; 248
    6cd8:	96 95       	lsr	r25
    6cda:	e9 2f       	mov	r30, r25
    6cdc:	96 95       	lsr	r25
    6cde:	96 95       	lsr	r25
    6ce0:	e9 0f       	add	r30, r25
    6ce2:	ff 27       	eor	r31, r31
    6ce4:	ee 56       	subi	r30, 0x6E	; 110
    6ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ce8:	99 27       	eor	r25, r25
    6cea:	33 27       	eor	r19, r19
    6cec:	ee 24       	eor	r14, r14
    6cee:	ff 24       	eor	r15, r15
    6cf0:	a7 01       	movw	r20, r14
    6cf2:	e7 01       	movw	r28, r14
    6cf4:	05 90       	lpm	r0, Z+
    6cf6:	08 94       	sec
    6cf8:	07 94       	ror	r0
    6cfa:	28 f4       	brcc	.+10     	; 0x6d06 <__ftoa_engine+0x80>
    6cfc:	36 0f       	add	r19, r22
    6cfe:	e7 1e       	adc	r14, r23
    6d00:	f8 1e       	adc	r15, r24
    6d02:	49 1f       	adc	r20, r25
    6d04:	51 1d       	adc	r21, r1
    6d06:	66 0f       	add	r22, r22
    6d08:	77 1f       	adc	r23, r23
    6d0a:	88 1f       	adc	r24, r24
    6d0c:	99 1f       	adc	r25, r25
    6d0e:	06 94       	lsr	r0
    6d10:	a1 f7       	brne	.-24     	; 0x6cfa <__ftoa_engine+0x74>
    6d12:	05 90       	lpm	r0, Z+
    6d14:	07 94       	ror	r0
    6d16:	28 f4       	brcc	.+10     	; 0x6d22 <__ftoa_engine+0x9c>
    6d18:	e7 0e       	add	r14, r23
    6d1a:	f8 1e       	adc	r15, r24
    6d1c:	49 1f       	adc	r20, r25
    6d1e:	56 1f       	adc	r21, r22
    6d20:	c1 1d       	adc	r28, r1
    6d22:	77 0f       	add	r23, r23
    6d24:	88 1f       	adc	r24, r24
    6d26:	99 1f       	adc	r25, r25
    6d28:	66 1f       	adc	r22, r22
    6d2a:	06 94       	lsr	r0
    6d2c:	a1 f7       	brne	.-24     	; 0x6d16 <__ftoa_engine+0x90>
    6d2e:	05 90       	lpm	r0, Z+
    6d30:	07 94       	ror	r0
    6d32:	28 f4       	brcc	.+10     	; 0x6d3e <__ftoa_engine+0xb8>
    6d34:	f8 0e       	add	r15, r24
    6d36:	49 1f       	adc	r20, r25
    6d38:	56 1f       	adc	r21, r22
    6d3a:	c7 1f       	adc	r28, r23
    6d3c:	d1 1d       	adc	r29, r1
    6d3e:	88 0f       	add	r24, r24
    6d40:	99 1f       	adc	r25, r25
    6d42:	66 1f       	adc	r22, r22
    6d44:	77 1f       	adc	r23, r23
    6d46:	06 94       	lsr	r0
    6d48:	a1 f7       	brne	.-24     	; 0x6d32 <__ftoa_engine+0xac>
    6d4a:	05 90       	lpm	r0, Z+
    6d4c:	07 94       	ror	r0
    6d4e:	20 f4       	brcc	.+8      	; 0x6d58 <__ftoa_engine+0xd2>
    6d50:	49 0f       	add	r20, r25
    6d52:	56 1f       	adc	r21, r22
    6d54:	c7 1f       	adc	r28, r23
    6d56:	d8 1f       	adc	r29, r24
    6d58:	99 0f       	add	r25, r25
    6d5a:	66 1f       	adc	r22, r22
    6d5c:	77 1f       	adc	r23, r23
    6d5e:	88 1f       	adc	r24, r24
    6d60:	06 94       	lsr	r0
    6d62:	a9 f7       	brne	.-22     	; 0x6d4e <__ftoa_engine+0xc8>
    6d64:	84 91       	lpm	r24, Z
    6d66:	10 95       	com	r17
    6d68:	17 70       	andi	r17, 0x07	; 7
    6d6a:	41 f0       	breq	.+16     	; 0x6d7c <__ftoa_engine+0xf6>
    6d6c:	d6 95       	lsr	r29
    6d6e:	c7 95       	ror	r28
    6d70:	57 95       	ror	r21
    6d72:	47 95       	ror	r20
    6d74:	f7 94       	ror	r15
    6d76:	e7 94       	ror	r14
    6d78:	1a 95       	dec	r17
    6d7a:	c1 f7       	brne	.-16     	; 0x6d6c <__ftoa_engine+0xe6>
    6d7c:	e8 e3       	ldi	r30, 0x38	; 56
    6d7e:	f1 e0       	ldi	r31, 0x01	; 1
    6d80:	68 94       	set
    6d82:	15 90       	lpm	r1, Z+
    6d84:	15 91       	lpm	r17, Z+
    6d86:	35 91       	lpm	r19, Z+
    6d88:	65 91       	lpm	r22, Z+
    6d8a:	95 91       	lpm	r25, Z+
    6d8c:	05 90       	lpm	r0, Z+
    6d8e:	7f e2       	ldi	r23, 0x2F	; 47
    6d90:	73 95       	inc	r23
    6d92:	e1 18       	sub	r14, r1
    6d94:	f1 0a       	sbc	r15, r17
    6d96:	43 0b       	sbc	r20, r19
    6d98:	56 0b       	sbc	r21, r22
    6d9a:	c9 0b       	sbc	r28, r25
    6d9c:	d0 09       	sbc	r29, r0
    6d9e:	c0 f7       	brcc	.-16     	; 0x6d90 <__ftoa_engine+0x10a>
    6da0:	e1 0c       	add	r14, r1
    6da2:	f1 1e       	adc	r15, r17
    6da4:	43 1f       	adc	r20, r19
    6da6:	56 1f       	adc	r21, r22
    6da8:	c9 1f       	adc	r28, r25
    6daa:	d0 1d       	adc	r29, r0
    6dac:	7e f4       	brtc	.+30     	; 0x6dcc <__ftoa_engine+0x146>
    6dae:	70 33       	cpi	r23, 0x30	; 48
    6db0:	11 f4       	brne	.+4      	; 0x6db6 <__ftoa_engine+0x130>
    6db2:	8a 95       	dec	r24
    6db4:	e6 cf       	rjmp	.-52     	; 0x6d82 <__ftoa_engine+0xfc>
    6db6:	e8 94       	clt
    6db8:	01 50       	subi	r16, 0x01	; 1
    6dba:	30 f0       	brcs	.+12     	; 0x6dc8 <__ftoa_engine+0x142>
    6dbc:	08 0f       	add	r16, r24
    6dbe:	0a f4       	brpl	.+2      	; 0x6dc2 <__ftoa_engine+0x13c>
    6dc0:	00 27       	eor	r16, r16
    6dc2:	02 17       	cp	r16, r18
    6dc4:	08 f4       	brcc	.+2      	; 0x6dc8 <__ftoa_engine+0x142>
    6dc6:	20 2f       	mov	r18, r16
    6dc8:	23 95       	inc	r18
    6dca:	02 2f       	mov	r16, r18
    6dcc:	7a 33       	cpi	r23, 0x3A	; 58
    6dce:	28 f0       	brcs	.+10     	; 0x6dda <__ftoa_engine+0x154>
    6dd0:	79 e3       	ldi	r23, 0x39	; 57
    6dd2:	7d 93       	st	X+, r23
    6dd4:	2a 95       	dec	r18
    6dd6:	e9 f7       	brne	.-6      	; 0x6dd2 <__ftoa_engine+0x14c>
    6dd8:	10 c0       	rjmp	.+32     	; 0x6dfa <__ftoa_engine+0x174>
    6dda:	7d 93       	st	X+, r23
    6ddc:	2a 95       	dec	r18
    6dde:	89 f6       	brne	.-94     	; 0x6d82 <__ftoa_engine+0xfc>
    6de0:	06 94       	lsr	r0
    6de2:	97 95       	ror	r25
    6de4:	67 95       	ror	r22
    6de6:	37 95       	ror	r19
    6de8:	17 95       	ror	r17
    6dea:	17 94       	ror	r1
    6dec:	e1 18       	sub	r14, r1
    6dee:	f1 0a       	sbc	r15, r17
    6df0:	43 0b       	sbc	r20, r19
    6df2:	56 0b       	sbc	r21, r22
    6df4:	c9 0b       	sbc	r28, r25
    6df6:	d0 09       	sbc	r29, r0
    6df8:	98 f0       	brcs	.+38     	; 0x6e20 <__ftoa_engine+0x19a>
    6dfa:	23 95       	inc	r18
    6dfc:	7e 91       	ld	r23, -X
    6dfe:	73 95       	inc	r23
    6e00:	7a 33       	cpi	r23, 0x3A	; 58
    6e02:	08 f0       	brcs	.+2      	; 0x6e06 <__ftoa_engine+0x180>
    6e04:	70 e3       	ldi	r23, 0x30	; 48
    6e06:	7c 93       	st	X, r23
    6e08:	20 13       	cpse	r18, r16
    6e0a:	b8 f7       	brcc	.-18     	; 0x6dfa <__ftoa_engine+0x174>
    6e0c:	7e 91       	ld	r23, -X
    6e0e:	70 61       	ori	r23, 0x10	; 16
    6e10:	7d 93       	st	X+, r23
    6e12:	30 f0       	brcs	.+12     	; 0x6e20 <__ftoa_engine+0x19a>
    6e14:	83 95       	inc	r24
    6e16:	71 e3       	ldi	r23, 0x31	; 49
    6e18:	7d 93       	st	X+, r23
    6e1a:	70 e3       	ldi	r23, 0x30	; 48
    6e1c:	2a 95       	dec	r18
    6e1e:	e1 f7       	brne	.-8      	; 0x6e18 <__ftoa_engine+0x192>
    6e20:	11 24       	eor	r1, r1
    6e22:	ef 90       	pop	r14
    6e24:	ff 90       	pop	r15
    6e26:	0f 91       	pop	r16
    6e28:	1f 91       	pop	r17
    6e2a:	cf 91       	pop	r28
    6e2c:	df 91       	pop	r29
    6e2e:	99 27       	eor	r25, r25
    6e30:	87 fd       	sbrc	r24, 7
    6e32:	90 95       	com	r25
    6e34:	08 95       	ret

00006e36 <strnlen_P>:
    6e36:	fc 01       	movw	r30, r24
    6e38:	05 90       	lpm	r0, Z+
    6e3a:	61 50       	subi	r22, 0x01	; 1
    6e3c:	70 40       	sbci	r23, 0x00	; 0
    6e3e:	01 10       	cpse	r0, r1
    6e40:	d8 f7       	brcc	.-10     	; 0x6e38 <strnlen_P+0x2>
    6e42:	80 95       	com	r24
    6e44:	90 95       	com	r25
    6e46:	8e 0f       	add	r24, r30
    6e48:	9f 1f       	adc	r25, r31
    6e4a:	08 95       	ret

00006e4c <memcpy>:
    6e4c:	fb 01       	movw	r30, r22
    6e4e:	dc 01       	movw	r26, r24
    6e50:	02 c0       	rjmp	.+4      	; 0x6e56 <memcpy+0xa>
    6e52:	01 90       	ld	r0, Z+
    6e54:	0d 92       	st	X+, r0
    6e56:	41 50       	subi	r20, 0x01	; 1
    6e58:	50 40       	sbci	r21, 0x00	; 0
    6e5a:	d8 f7       	brcc	.-10     	; 0x6e52 <memcpy+0x6>
    6e5c:	08 95       	ret

00006e5e <strnlen>:
    6e5e:	fc 01       	movw	r30, r24
    6e60:	61 50       	subi	r22, 0x01	; 1
    6e62:	70 40       	sbci	r23, 0x00	; 0
    6e64:	01 90       	ld	r0, Z+
    6e66:	01 10       	cpse	r0, r1
    6e68:	d8 f7       	brcc	.-10     	; 0x6e60 <strnlen+0x2>
    6e6a:	80 95       	com	r24
    6e6c:	90 95       	com	r25
    6e6e:	8e 0f       	add	r24, r30
    6e70:	9f 1f       	adc	r25, r31
    6e72:	08 95       	ret

00006e74 <fputc>:
    6e74:	0f 93       	push	r16
    6e76:	1f 93       	push	r17
    6e78:	cf 93       	push	r28
    6e7a:	df 93       	push	r29
    6e7c:	fb 01       	movw	r30, r22
    6e7e:	23 81       	ldd	r18, Z+3	; 0x03
    6e80:	21 fd       	sbrc	r18, 1
    6e82:	03 c0       	rjmp	.+6      	; 0x6e8a <fputc+0x16>
    6e84:	8f ef       	ldi	r24, 0xFF	; 255
    6e86:	9f ef       	ldi	r25, 0xFF	; 255
    6e88:	2c c0       	rjmp	.+88     	; 0x6ee2 <fputc+0x6e>
    6e8a:	22 ff       	sbrs	r18, 2
    6e8c:	16 c0       	rjmp	.+44     	; 0x6eba <fputc+0x46>
    6e8e:	46 81       	ldd	r20, Z+6	; 0x06
    6e90:	57 81       	ldd	r21, Z+7	; 0x07
    6e92:	24 81       	ldd	r18, Z+4	; 0x04
    6e94:	35 81       	ldd	r19, Z+5	; 0x05
    6e96:	42 17       	cp	r20, r18
    6e98:	53 07       	cpc	r21, r19
    6e9a:	44 f4       	brge	.+16     	; 0x6eac <fputc+0x38>
    6e9c:	a0 81       	ld	r26, Z
    6e9e:	b1 81       	ldd	r27, Z+1	; 0x01
    6ea0:	9d 01       	movw	r18, r26
    6ea2:	2f 5f       	subi	r18, 0xFF	; 255
    6ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea6:	31 83       	std	Z+1, r19	; 0x01
    6ea8:	20 83       	st	Z, r18
    6eaa:	8c 93       	st	X, r24
    6eac:	26 81       	ldd	r18, Z+6	; 0x06
    6eae:	37 81       	ldd	r19, Z+7	; 0x07
    6eb0:	2f 5f       	subi	r18, 0xFF	; 255
    6eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    6eb4:	37 83       	std	Z+7, r19	; 0x07
    6eb6:	26 83       	std	Z+6, r18	; 0x06
    6eb8:	14 c0       	rjmp	.+40     	; 0x6ee2 <fputc+0x6e>
    6eba:	8b 01       	movw	r16, r22
    6ebc:	ec 01       	movw	r28, r24
    6ebe:	fb 01       	movw	r30, r22
    6ec0:	00 84       	ldd	r0, Z+8	; 0x08
    6ec2:	f1 85       	ldd	r31, Z+9	; 0x09
    6ec4:	e0 2d       	mov	r30, r0
    6ec6:	19 95       	eicall
    6ec8:	89 2b       	or	r24, r25
    6eca:	e1 f6       	brne	.-72     	; 0x6e84 <fputc+0x10>
    6ecc:	d8 01       	movw	r26, r16
    6ece:	16 96       	adiw	r26, 0x06	; 6
    6ed0:	8d 91       	ld	r24, X+
    6ed2:	9c 91       	ld	r25, X
    6ed4:	17 97       	sbiw	r26, 0x07	; 7
    6ed6:	01 96       	adiw	r24, 0x01	; 1
    6ed8:	17 96       	adiw	r26, 0x07	; 7
    6eda:	9c 93       	st	X, r25
    6edc:	8e 93       	st	-X, r24
    6ede:	16 97       	sbiw	r26, 0x06	; 6
    6ee0:	ce 01       	movw	r24, r28
    6ee2:	df 91       	pop	r29
    6ee4:	cf 91       	pop	r28
    6ee6:	1f 91       	pop	r17
    6ee8:	0f 91       	pop	r16
    6eea:	08 95       	ret

00006eec <vsprintf>:
    6eec:	0f 93       	push	r16
    6eee:	1f 93       	push	r17
    6ef0:	cf 93       	push	r28
    6ef2:	df 93       	push	r29
    6ef4:	cd b7       	in	r28, 0x3d	; 61
    6ef6:	de b7       	in	r29, 0x3e	; 62
    6ef8:	2e 97       	sbiw	r28, 0x0e	; 14
    6efa:	0f b6       	in	r0, 0x3f	; 63
    6efc:	f8 94       	cli
    6efe:	de bf       	out	0x3e, r29	; 62
    6f00:	0f be       	out	0x3f, r0	; 63
    6f02:	cd bf       	out	0x3d, r28	; 61
    6f04:	8c 01       	movw	r16, r24
    6f06:	86 e0       	ldi	r24, 0x06	; 6
    6f08:	8c 83       	std	Y+4, r24	; 0x04
    6f0a:	1a 83       	std	Y+2, r17	; 0x02
    6f0c:	09 83       	std	Y+1, r16	; 0x01
    6f0e:	8f ef       	ldi	r24, 0xFF	; 255
    6f10:	9f e7       	ldi	r25, 0x7F	; 127
    6f12:	9e 83       	std	Y+6, r25	; 0x06
    6f14:	8d 83       	std	Y+5, r24	; 0x05
    6f16:	ce 01       	movw	r24, r28
    6f18:	01 96       	adiw	r24, 0x01	; 1
    6f1a:	f6 da       	rcall	.-2580   	; 0x6508 <vfprintf>
    6f1c:	ef 81       	ldd	r30, Y+7	; 0x07
    6f1e:	f8 85       	ldd	r31, Y+8	; 0x08
    6f20:	e0 0f       	add	r30, r16
    6f22:	f1 1f       	adc	r31, r17
    6f24:	10 82       	st	Z, r1
    6f26:	2e 96       	adiw	r28, 0x0e	; 14
    6f28:	0f b6       	in	r0, 0x3f	; 63
    6f2a:	f8 94       	cli
    6f2c:	de bf       	out	0x3e, r29	; 62
    6f2e:	0f be       	out	0x3f, r0	; 63
    6f30:	cd bf       	out	0x3d, r28	; 61
    6f32:	df 91       	pop	r29
    6f34:	cf 91       	pop	r28
    6f36:	1f 91       	pop	r17
    6f38:	0f 91       	pop	r16
    6f3a:	08 95       	ret

00006f3c <__ultoa_invert>:
    6f3c:	fa 01       	movw	r30, r20
    6f3e:	aa 27       	eor	r26, r26
    6f40:	28 30       	cpi	r18, 0x08	; 8
    6f42:	51 f1       	breq	.+84     	; 0x6f98 <__ultoa_invert+0x5c>
    6f44:	20 31       	cpi	r18, 0x10	; 16
    6f46:	81 f1       	breq	.+96     	; 0x6fa8 <__ultoa_invert+0x6c>
    6f48:	e8 94       	clt
    6f4a:	6f 93       	push	r22
    6f4c:	6e 7f       	andi	r22, 0xFE	; 254
    6f4e:	6e 5f       	subi	r22, 0xFE	; 254
    6f50:	7f 4f       	sbci	r23, 0xFF	; 255
    6f52:	8f 4f       	sbci	r24, 0xFF	; 255
    6f54:	9f 4f       	sbci	r25, 0xFF	; 255
    6f56:	af 4f       	sbci	r26, 0xFF	; 255
    6f58:	b1 e0       	ldi	r27, 0x01	; 1
    6f5a:	3e d0       	rcall	.+124    	; 0x6fd8 <__ultoa_invert+0x9c>
    6f5c:	b4 e0       	ldi	r27, 0x04	; 4
    6f5e:	3c d0       	rcall	.+120    	; 0x6fd8 <__ultoa_invert+0x9c>
    6f60:	67 0f       	add	r22, r23
    6f62:	78 1f       	adc	r23, r24
    6f64:	89 1f       	adc	r24, r25
    6f66:	9a 1f       	adc	r25, r26
    6f68:	a1 1d       	adc	r26, r1
    6f6a:	68 0f       	add	r22, r24
    6f6c:	79 1f       	adc	r23, r25
    6f6e:	8a 1f       	adc	r24, r26
    6f70:	91 1d       	adc	r25, r1
    6f72:	a1 1d       	adc	r26, r1
    6f74:	6a 0f       	add	r22, r26
    6f76:	71 1d       	adc	r23, r1
    6f78:	81 1d       	adc	r24, r1
    6f7a:	91 1d       	adc	r25, r1
    6f7c:	a1 1d       	adc	r26, r1
    6f7e:	20 d0       	rcall	.+64     	; 0x6fc0 <__ultoa_invert+0x84>
    6f80:	09 f4       	brne	.+2      	; 0x6f84 <__ultoa_invert+0x48>
    6f82:	68 94       	set
    6f84:	3f 91       	pop	r19
    6f86:	2a e0       	ldi	r18, 0x0A	; 10
    6f88:	26 9f       	mul	r18, r22
    6f8a:	11 24       	eor	r1, r1
    6f8c:	30 19       	sub	r19, r0
    6f8e:	30 5d       	subi	r19, 0xD0	; 208
    6f90:	31 93       	st	Z+, r19
    6f92:	de f6       	brtc	.-74     	; 0x6f4a <__ultoa_invert+0xe>
    6f94:	cf 01       	movw	r24, r30
    6f96:	08 95       	ret
    6f98:	46 2f       	mov	r20, r22
    6f9a:	47 70       	andi	r20, 0x07	; 7
    6f9c:	40 5d       	subi	r20, 0xD0	; 208
    6f9e:	41 93       	st	Z+, r20
    6fa0:	b3 e0       	ldi	r27, 0x03	; 3
    6fa2:	0f d0       	rcall	.+30     	; 0x6fc2 <__ultoa_invert+0x86>
    6fa4:	c9 f7       	brne	.-14     	; 0x6f98 <__ultoa_invert+0x5c>
    6fa6:	f6 cf       	rjmp	.-20     	; 0x6f94 <__ultoa_invert+0x58>
    6fa8:	46 2f       	mov	r20, r22
    6faa:	4f 70       	andi	r20, 0x0F	; 15
    6fac:	40 5d       	subi	r20, 0xD0	; 208
    6fae:	4a 33       	cpi	r20, 0x3A	; 58
    6fb0:	18 f0       	brcs	.+6      	; 0x6fb8 <__ultoa_invert+0x7c>
    6fb2:	49 5d       	subi	r20, 0xD9	; 217
    6fb4:	31 fd       	sbrc	r19, 1
    6fb6:	40 52       	subi	r20, 0x20	; 32
    6fb8:	41 93       	st	Z+, r20
    6fba:	02 d0       	rcall	.+4      	; 0x6fc0 <__ultoa_invert+0x84>
    6fbc:	a9 f7       	brne	.-22     	; 0x6fa8 <__ultoa_invert+0x6c>
    6fbe:	ea cf       	rjmp	.-44     	; 0x6f94 <__ultoa_invert+0x58>
    6fc0:	b4 e0       	ldi	r27, 0x04	; 4
    6fc2:	a6 95       	lsr	r26
    6fc4:	97 95       	ror	r25
    6fc6:	87 95       	ror	r24
    6fc8:	77 95       	ror	r23
    6fca:	67 95       	ror	r22
    6fcc:	ba 95       	dec	r27
    6fce:	c9 f7       	brne	.-14     	; 0x6fc2 <__ultoa_invert+0x86>
    6fd0:	00 97       	sbiw	r24, 0x00	; 0
    6fd2:	61 05       	cpc	r22, r1
    6fd4:	71 05       	cpc	r23, r1
    6fd6:	08 95       	ret
    6fd8:	9b 01       	movw	r18, r22
    6fda:	ac 01       	movw	r20, r24
    6fdc:	0a 2e       	mov	r0, r26
    6fde:	06 94       	lsr	r0
    6fe0:	57 95       	ror	r21
    6fe2:	47 95       	ror	r20
    6fe4:	37 95       	ror	r19
    6fe6:	27 95       	ror	r18
    6fe8:	ba 95       	dec	r27
    6fea:	c9 f7       	brne	.-14     	; 0x6fde <__ultoa_invert+0xa2>
    6fec:	62 0f       	add	r22, r18
    6fee:	73 1f       	adc	r23, r19
    6ff0:	84 1f       	adc	r24, r20
    6ff2:	95 1f       	adc	r25, r21
    6ff4:	a0 1d       	adc	r26, r0
    6ff6:	08 95       	ret

00006ff8 <_exit>:
    6ff8:	f8 94       	cli

00006ffa <__stop_program>:
    6ffa:	ff cf       	rjmp	.-2      	; 0x6ffa <__stop_program>
