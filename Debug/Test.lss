
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000540  00800200  00006f98  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000014c6  00800740  00800740  0000756c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000756c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000075c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00007608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a7d0  00000000  00000000  00007d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021d9  00000000  00000000  00012568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005ff3  00000000  00000000  00014741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001958  00000000  00000000  0001a734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f25  00000000  00000000  0001c08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000add6  00000000  00000000  0001efb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000870  00000000  00000000  00029d87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	20 c1       	rjmp	.+576    	; 0x242 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__vector_3>
      10:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__vector_4>
      14:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_5>
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c1       	rjmp	.+582    	; 0x284 <__bad_interrupt>
      3e:	00 00       	nop
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_32>
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ed c0       	rjmp	.+474    	; 0x284 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__vector_51>
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	6e 61       	ori	r22, 0x1E	; 30
     132:	6e 00       	.word	0x006e	; ????

00000134 <__c.2332>:
     134:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     144:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     154:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     164:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     174:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     184:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     194:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     204:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     214:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     224:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000232 <prvIdleTask>:
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     232:	c3 e9       	ldi	r28, 0x93	; 147
     234:	da e1       	ldi	r29, 0x1A	; 26
     236:	88 81       	ld	r24, Y
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	f0 f3       	brcs	.-4      	; 0x238 <prvIdleTask+0x6>
     23c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
     240:	fa cf       	rjmp	.-12     	; 0x236 <prvIdleTask+0x4>

00000242 <__ctors_end>:
     242:	11 24       	eor	r1, r1
     244:	1f be       	out	0x3f, r1	; 63
     246:	cf ef       	ldi	r28, 0xFF	; 255
     248:	d1 e2       	ldi	r29, 0x21	; 33
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	0c bf       	out	0x3c, r16	; 60

00000252 <__do_copy_data>:
     252:	17 e0       	ldi	r17, 0x07	; 7
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b2 e0       	ldi	r27, 0x02	; 2
     258:	e8 e9       	ldi	r30, 0x98	; 152
     25a:	ff e6       	ldi	r31, 0x6F	; 111
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	0b bf       	out	0x3b, r16	; 59
     260:	02 c0       	rjmp	.+4      	; 0x266 <__do_copy_data+0x14>
     262:	07 90       	elpm	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	a0 34       	cpi	r26, 0x40	; 64
     268:	b1 07       	cpc	r27, r17
     26a:	d9 f7       	brne	.-10     	; 0x262 <__do_copy_data+0x10>

0000026c <__do_clear_bss>:
     26c:	2c e1       	ldi	r18, 0x1C	; 28
     26e:	a0 e4       	ldi	r26, 0x40	; 64
     270:	b7 e0       	ldi	r27, 0x07	; 7
     272:	01 c0       	rjmp	.+2      	; 0x276 <.do_clear_bss_start>

00000274 <.do_clear_bss_loop>:
     274:	1d 92       	st	X+, r1

00000276 <.do_clear_bss_start>:
     276:	a6 30       	cpi	r26, 0x06	; 6
     278:	b2 07       	cpc	r27, r18
     27a:	e1 f7       	brne	.-8      	; 0x274 <.do_clear_bss_loop>
     27c:	0e 94 bc 13 	call	0x2778	; 0x2778 <main>
     280:	0c 94 ca 37 	jmp	0x6f94	; 0x6f94 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <arq_init>:
  return len;
}

uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	6b e3       	ldi	r22, 0x3B	; 59
     28c:	74 e0       	ldi	r23, 0x04	; 4
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <network_set_callback>
     294:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <__data_end+0x1>
     298:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <__data_end>
     29c:	c2 e4       	ldi	r28, 0x42	; 66
     29e:	d7 e0       	ldi	r29, 0x07	; 7
     2a0:	8d e8       	ldi	r24, 0x8D	; 141
     2a2:	fe 01       	movw	r30, r28
     2a4:	11 92       	st	Z+, r1
     2a6:	8a 95       	dec	r24
     2a8:	e9 f7       	brne	.-6      	; 0x2a4 <arq_init+0x1e>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 81 18 	call	0x3102	; 0x3102 <xQueueCreateMutex>
     2b0:	90 93 cc 07 	sts	0x07CC, r25	; 0x8007cc <connections+0x8a>
     2b4:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <connections+0x89>
     2b8:	18 82       	st	Y, r1
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <arq_new_connection>:
     2c0:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     2c4:	81 11       	cpse	r24, r1
     2c6:	16 c0       	rjmp	.+44     	; 0x2f4 <arq_new_connection+0x34>
     2c8:	e2 e4       	ldi	r30, 0x42	; 66
     2ca:	f7 e0       	ldi	r31, 0x07	; 7
     2cc:	16 8e       	std	Z+30, r1	; 0x1e
     2ce:	15 8e       	std	Z+29, r1	; 0x1d
     2d0:	16 8a       	std	Z+22, r1	; 0x16
     2d2:	15 8a       	std	Z+21, r1	; 0x15
     2d4:	14 a2       	std	Z+36, r1	; 0x24
     2d6:	13 a2       	std	Z+35, r1	; 0x23
     2d8:	12 a2       	std	Z+34, r1	; 0x22
     2da:	11 a2       	std	Z+33, r1	; 0x21
     2dc:	17 8e       	std	Z+31, r1	; 0x1f
     2de:	14 8e       	std	Z+28, r1	; 0x1c
     2e0:	12 8e       	std	Z+26, r1	; 0x1a
     2e2:	11 8e       	std	Z+25, r1	; 0x19
     2e4:	13 8e       	std	Z+27, r1	; 0x1b
     2e6:	10 92 ce 07 	sts	0x07CE, r1	; 0x8007ce <connections+0x8c>
     2ea:	10 92 cd 07 	sts	0x07CD, r1	; 0x8007cd <connections+0x8b>
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 83       	st	Z, r25
     2f2:	08 95       	ret
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <arq_connect>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	69 01       	movw	r12, r18
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
     314:	9d e8       	ldi	r25, 0x8D	; 141
     316:	89 9f       	mul	r24, r25
     318:	80 01       	movw	r16, r0
     31a:	11 24       	eor	r1, r1
     31c:	0e 5b       	subi	r16, 0xBE	; 190
     31e:	18 4f       	sbci	r17, 0xF8	; 248
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	f8 01       	movw	r30, r16
     324:	80 83       	st	Z, r24
     326:	50 8f       	std	Z+24, r21	; 0x18
     328:	47 8b       	std	Z+23, r20	; 0x17
     32a:	60 a3       	std	Z+32, r22	; 0x20
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	0e 94 3d 2a 	call	0x547a	; 0x547a <xTaskGetCurrentTaskHandle>
     334:	f8 01       	movw	r30, r16
     336:	e5 57       	subi	r30, 0x75	; 117
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <xTaskNotifyStateClear>
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	4f 5f       	subi	r20, 0xFF	; 255
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	f8 01       	movw	r30, r16
     350:	80 a1       	ldd	r24, Z+32	; 0x20
     352:	0e 94 28 16 	call	0x2c50	; 0x2c50 <network_send>
     356:	b6 01       	movw	r22, r12
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <ulTaskNotifyTake>
     35e:	67 2b       	or	r22, r23
     360:	68 2b       	or	r22, r24
     362:	69 2b       	or	r22, r25
     364:	61 f4       	brne	.+24     	; 0x37e <arq_connect+0x86>
     366:	8d e8       	ldi	r24, 0x8D	; 141
     368:	8e 9d       	mul	r24, r14
     36a:	f0 01       	movw	r30, r0
     36c:	8f 9d       	mul	r24, r15
     36e:	f0 0d       	add	r31, r0
     370:	11 24       	eor	r1, r1
     372:	ee 5b       	subi	r30, 0xBE	; 190
     374:	f8 4f       	sbci	r31, 0xF8	; 248
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	2e c0       	rjmp	.+92     	; 0x3da <arq_connect+0xe2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	65 d6       	rcall	.+3274   	; 0x104e <pvPortMalloc>
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	31 f1       	breq	.+76     	; 0x3d4 <arq_connect+0xdc>
     388:	4d e8       	ldi	r20, 0x8D	; 141
     38a:	4e 9d       	mul	r20, r14
     38c:	90 01       	movw	r18, r0
     38e:	4f 9d       	mul	r20, r15
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	51 e0       	ldi	r21, 0x01	; 1
     398:	bc 01       	movw	r22, r24
     39a:	c9 01       	movw	r24, r18
     39c:	8d 5b       	subi	r24, 0xBD	; 189
     39e:	98 4f       	sbci	r25, 0xF8	; 248
     3a0:	5b d3       	rcall	.+1718   	; 0xa58 <buffer_init>
     3a2:	84 e1       	ldi	r24, 0x14	; 20
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	53 d6       	rcall	.+3238   	; 0x104e <pvPortMalloc>
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	b1 f0       	breq	.+44     	; 0x3d8 <arq_connect+0xe0>
     3ac:	2d e8       	ldi	r18, 0x8D	; 141
     3ae:	2e 9d       	mul	r18, r14
     3b0:	80 01       	movw	r16, r0
     3b2:	2f 9d       	mul	r18, r15
     3b4:	10 0d       	add	r17, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	44 e1       	ldi	r20, 0x14	; 20
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	c8 01       	movw	r24, r16
     3c0:	83 5b       	subi	r24, 0xB3	; 179
     3c2:	98 4f       	sbci	r25, 0xF8	; 248
     3c4:	49 d3       	rcall	.+1682   	; 0xa58 <buffer_init>
     3c6:	f8 01       	movw	r30, r16
     3c8:	ee 5b       	subi	r30, 0xBE	; 190
     3ca:	f8 4f       	sbci	r31, 0xF8	; 248
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 83       	st	Z, r24
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <arq_connect+0xe2>
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <arq_connect+0xe2>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <arq_close_connection>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	81 11       	cpse	r24, r1
     3f4:	34 c0       	rjmp	.+104    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	4f ef       	ldi	r20, 0xFF	; 255
     3fa:	5f ef       	ldi	r21, 0xFF	; 255
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     404:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     408:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
     40c:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     410:	82 30       	cpi	r24, 0x02	; 2
     412:	51 f0       	breq	.+20     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     41c:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     420:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	1c c0       	rjmp	.+56     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     428:	c2 e4       	ldi	r28, 0x42	; 66
     42a:	d7 e0       	ldi	r29, 0x07	; 7
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	18 d7       	rcall	.+3632   	; 0x1262 <vPortFree>
     432:	8b 85       	ldd	r24, Y+11	; 0x0b
     434:	9c 85       	ldd	r25, Y+12	; 0x0c
     436:	15 d7       	rcall	.+3626   	; 0x1262 <vPortFree>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	88 83       	st	Y, r24
     43c:	ef 89       	ldd	r30, Y+23	; 0x17
     43e:	f8 8d       	ldd	r31, Y+24	; 0x18
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	19 95       	eicall
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     452:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     456:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <arq_send>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	00 d0       	rcall	.+0      	; 0x474 <arq_send+0xe>
     474:	1f 92       	push	r1
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	5c 83       	std	Y+4, r21	; 0x04
     47c:	4b 83       	std	Y+3, r20	; 0x03
     47e:	81 11       	cpse	r24, r1
     480:	7b c0       	rjmp	.+246    	; 0x578 <arq_send+0x112>
     482:	7b 01       	movw	r14, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	4f ef       	ldi	r20, 0xFF	; 255
     488:	5f ef       	ldi	r21, 0xFF	; 255
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     492:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     496:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
     49a:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	51 f4       	brne	.+20     	; 0x4b6 <arq_send+0x50>
     4a2:	e1 14       	cp	r14, r1
     4a4:	f1 04       	cpc	r15, r1
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <arq_send+0x50>
     4a8:	0b 81       	ldd	r16, Y+3	; 0x03
     4aa:	1c 81       	ldd	r17, Y+4	; 0x04
     4ac:	c8 01       	movw	r24, r16
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	84 36       	cpi	r24, 0x64	; 100
     4b2:	91 05       	cpc	r25, r1
     4b4:	50 f0       	brcs	.+20     	; 0x4ca <arq_send+0x64>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     4be:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     4c2:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	58 c0       	rjmp	.+176    	; 0x57a <arq_send+0x114>
     4ca:	0e 5f       	subi	r16, 0xFE	; 254
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	20 91 4b 07 	lds	r18, 0x074B	; 0x80074b <connections+0x9>
     4d2:	30 91 4c 07 	lds	r19, 0x074C	; 0x80074c <connections+0xa>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	82 1b       	sub	r24, r18
     4dc:	93 0b       	sbc	r25, r19
     4de:	08 17       	cp	r16, r24
     4e0:	19 07       	cpc	r17, r25
     4e2:	08 f0       	brcs	.+2      	; 0x4e6 <arq_send+0x80>
     4e4:	3f c0       	rjmp	.+126    	; 0x564 <arq_send+0xfe>
     4e6:	20 91 55 07 	lds	r18, 0x0755	; 0x800755 <connections+0x13>
     4ea:	30 91 56 07 	lds	r19, 0x0756	; 0x800756 <connections+0x14>
     4ee:	84 e1       	ldi	r24, 0x14	; 20
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	82 1b       	sub	r24, r18
     4f4:	93 0b       	sbc	r25, r19
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	a8 f1       	brcs	.+106    	; 0x564 <arq_send+0xfe>
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	be 01       	movw	r22, r28
     508:	6d 5f       	subi	r22, 0xFD	; 253
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	83 e4       	ldi	r24, 0x43	; 67
     50e:	97 e0       	ldi	r25, 0x07	; 7
     510:	b5 d2       	rcall	.+1386   	; 0xa7c <buffer_append>
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	b7 01       	movw	r22, r14
     518:	83 e4       	ldi	r24, 0x43	; 67
     51a:	97 e0       	ldi	r25, 0x07	; 7
     51c:	af d2       	rcall	.+1374   	; 0xa7c <buffer_append>
     51e:	01 15       	cp	r16, r1
     520:	11 05       	cpc	r17, r1
     522:	b1 f0       	breq	.+44     	; 0x550 <arq_send+0xea>
     524:	90 2f       	mov	r25, r16
     526:	81 2f       	mov	r24, r17
     528:	0b 32       	cpi	r16, 0x2B	; 43
     52a:	11 05       	cpc	r17, r1
     52c:	10 f0       	brcs	.+4      	; 0x532 <arq_send+0xcc>
     52e:	9a e2       	ldi	r25, 0x2A	; 42
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	99 83       	std	Y+1, r25	; 0x01
     534:	8a 83       	std	Y+2, r24	; 0x02
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	8d e4       	ldi	r24, 0x4D	; 77
     542:	97 e0       	ldi	r25, 0x07	; 7
     544:	9b d2       	rcall	.+1334   	; 0xa7c <buffer_append>
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	08 1b       	sub	r16, r24
     54c:	19 0b       	sbc	r17, r25
     54e:	51 f7       	brne	.-44     	; 0x524 <arq_send+0xbe>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     558:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     55c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	0b c0       	rjmp	.+22     	; 0x57a <arq_send+0x114>
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     56c:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     570:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	01 c0       	rjmp	.+2      	; 0x57a <arq_send+0x114>
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <arq_send_ack>:

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	1f 92       	push	r1
     596:	1f 92       	push	r1
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
  if(id >= MAX_CONNECTIONS) return 0;
     59c:	81 11       	cpse	r24, r1
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <arq_send_ack+0x38>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
     5a0:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	91 f4       	brne	.+36     	; 0x5cc <arq_send_ack+0x3c>
     5a8:	66 23       	and	r22, r22
     5aa:	94 f0       	brlt	.+36     	; 0x5d0 <arq_send_ack+0x40>
    return 0;
  }
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	89 83       	std	Y+1, r24	; 0x01
  data[1] = sequence_number;
     5b0:	6a 83       	std	Y+2, r22	; 0x02
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
     5b2:	22 e0       	ldi	r18, 0x02	; 2
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	ae 01       	movw	r20, r28
     5b8:	4f 5f       	subi	r20, 0xFF	; 255
     5ba:	5f 4f       	sbci	r21, 0xFF	; 255
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <connections+0x20>
     5c2:	0e 94 28 16 	call	0x2c50	; 0x2c50 <network_send>
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <arq_send_ack+0x42>
uint8_t arq_send_string(arq_connection id, char *str) {
  return arq_send(id, (uint8_t*) str, strlen(str));
}

uint8_t arq_send_ack(arq_connection id, uint8_t sequence_number) {
  if(id >= MAX_CONNECTIONS) return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <arq_send_ack+0x42>
  arq_connection_t *con = &connections[id];
  
  if(con->status != STATUS_CONNECTED || sequence_number > 127) {
    return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <arq_send_ack+0x42>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
  
  uint8_t data[2];
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <sender>:
/  When the transmit window has available space, it removes segments from the send buffer 
/  and sends them. It also increments a retransmit timer and timeout timer. When the retransmit timer
/  expires the function resends all the segments in the transmit window. On timeout the connection is
/  closed. 
*/
void sender(arq_connection id) { 
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ae 97       	sbiw	r28, 0x2e	; 46
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
  if(id >= MAX_CONNECTIONS) return;
     600:	81 11       	cpse	r24, r1
     602:	db c0       	rjmp	.+438    	; 0x7ba <sender+0x1de>
  arq_connection_t *con = &connections[id];
  if(con->status == STATUS_NONE) return;
     604:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <sender+0x32>
     60c:	d6 c0       	rjmp	.+428    	; 0x7ba <sender+0x1de>
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	4f ef       	ldi	r20, 0xFF	; 255
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     61c:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     620:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
  
  if(con->status != STATUS_CONNECTED) {
     624:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <connections>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	49 f0       	breq	.+18     	; 0x63e <sender+0x62>
    xSemaphoreGive(con->mutex);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     634:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     638:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
    return;
     63c:	be c0       	rjmp	.+380    	; 0x7ba <sender+0x1de>
  }

  if(con->timer_started) {
     63e:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <connections+0x1f>
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <sender+0x6c>
     646:	62 c0       	rjmp	.+196    	; 0x70c <sender+0x130>
    con->timeout += 10;
     648:	e2 e4       	ldi	r30, 0x42	; 66
     64a:	f7 e0       	ldi	r31, 0x07	; 7
     64c:	85 8d       	ldd	r24, Z+29	; 0x1d
     64e:	96 8d       	ldd	r25, Z+30	; 0x1e
     650:	0a 96       	adiw	r24, 0x0a	; 10
     652:	96 8f       	std	Z+30, r25	; 0x1e
     654:	85 8f       	std	Z+29, r24	; 0x1d
    con->timer += 10;
     656:	24 8d       	ldd	r18, Z+28	; 0x1c
     658:	26 5f       	subi	r18, 0xF6	; 246
     65a:	24 8f       	std	Z+28, r18	; 0x1c
    if(con->timeout > LOST_CONNECTION_TIMEOUT_MS) { 
     65c:	89 3e       	cpi	r24, 0xE9	; 233
     65e:	93 40       	sbci	r25, 0x03	; 3
     660:	58 f0       	brcs	.+22     	; 0x678 <sender+0x9c>
      xSemaphoreGive(con->mutex);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     66a:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     66e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
      arq_close_connection(id);
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	bc de       	rcall	.-648    	; 0x3ee <arq_close_connection>
      return;
     676:	a1 c0       	rjmp	.+322    	; 0x7ba <sender+0x1de>
    }
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
     678:	29 3c       	cpi	r18, 0xC9	; 201
     67a:	08 f4       	brcc	.+2      	; 0x67e <sender+0xa2>
     67c:	47 c0       	rjmp	.+142    	; 0x70c <sender+0x130>
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
     67e:	e2 e4       	ldi	r30, 0x42	; 66
     680:	f7 e0       	ldi	r31, 0x07	; 7
     682:	07 81       	ldd	r16, Z+7	; 0x07
     684:	10 85       	ldd	r17, Z+8	; 0x08
      uint16_t len = 0;
     686:	1e a6       	std	Y+46, r1	; 0x2e
     688:	1d a6       	std	Y+45, r1	; 0x2d
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
     68a:	a1 8c       	ldd	r10, Z+25	; 0x19
     68c:	83 8d       	ldd	r24, Z+27	; 0x1b
     68e:	a8 1a       	sub	r10, r24
     690:	8a 2d       	mov	r24, r10
     692:	8f 77       	andi	r24, 0x7F	; 127
     694:	a8 2e       	mov	r10, r24
      while(i < resend_count) {
     696:	c1 f1       	breq	.+112    	; 0x708 <sender+0x12c>
     698:	c1 2c       	mov	r12, r1
     69a:	d1 2c       	mov	r13, r1
     69c:	b1 2c       	mov	r11, r1
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
        data[1] = (con->sequence_base+i) & 127; 
     69e:	7f 01       	movw	r14, r30
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
        uint8_t data[MAX_PAYLOAD_SIZE];
        data[0] = TYPE_DATA;
     6a0:	19 82       	std	Y+1, r1	; 0x01
        data[1] = (con->sequence_base+i) & 127; 
     6a2:	f7 01       	movw	r30, r14
     6a4:	83 8d       	ldd	r24, Z+27	; 0x1b
     6a6:	8b 0d       	add	r24, r11
     6a8:	8f 77       	andi	r24, 0x7F	; 127
     6aa:	8a 83       	std	Y+2, r24	; 0x02
        buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*i, 2);
     6ac:	41 89       	ldd	r20, Z+17	; 0x11
     6ae:	52 89       	ldd	r21, Z+18	; 0x12
     6b0:	4c 0d       	add	r20, r12
     6b2:	5d 1d       	adc	r21, r13
     6b4:	22 e0       	ldi	r18, 0x02	; 2
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	be 01       	movw	r22, r28
     6ba:	63 5d       	subi	r22, 0xD3	; 211
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	8d e4       	ldi	r24, 0x4D	; 77
     6c0:	97 e0       	ldi	r25, 0x07	; 7
     6c2:	8b d2       	rcall	.+1302   	; 0xbda <buffer_read>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
     6c4:	2d a5       	ldd	r18, Y+45	; 0x2d
     6c6:	3e a5       	ldd	r19, Y+46	; 0x2e
     6c8:	a8 01       	movw	r20, r16
     6ca:	be 01       	movw	r22, r28
     6cc:	6d 5f       	subi	r22, 0xFD	; 253
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	83 e4       	ldi	r24, 0x43	; 67
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	82 d2       	rcall	.+1284   	; 0xbda <buffer_read>
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
     6d6:	2d a5       	ldd	r18, Y+45	; 0x2d
     6d8:	3e a5       	ldd	r19, Y+46	; 0x2e
     6da:	02 0f       	add	r16, r18
     6dc:	13 1f       	adc	r17, r19
     6de:	f7 01       	movw	r30, r14
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	94 81       	ldd	r25, Z+4	; 0x04
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	08 23       	and	r16, r24
     6e8:	19 23       	and	r17, r25
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	ae 01       	movw	r20, r28
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	80 a1       	ldd	r24, Z+32	; 0x20
     6f8:	0e 94 28 16 	call	0x2c50	; 0x2c50 <network_send>
        ++i;
     6fc:	b3 94       	inc	r11
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	cf 0e       	add	r12, r31
     702:	d1 1c       	adc	r13, r1
    if(con->timer > RETRANSMISSION_TIMEOUT_MS) {
      uint8_t i=0;
      uint16_t read_pos = con->send_buffer.tail;
      uint16_t len = 0;
      uint8_t resend_count = (con->sequence_number-con->sequence_base) & 127;
      while(i < resend_count) {
     704:	ab 10       	cpse	r10, r11
     706:	cc cf       	rjmp	.-104    	; 0x6a0 <sender+0xc4>
        buffer_read(&con->send_buffer, data+2, read_pos, len);
        read_pos = (read_pos + len) & (con->send_buffer.capacity-1);
        network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
        ++i;
      }
      con->timer = 0;
     708:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <connections+0x1c>
    }
  }
  if( ((con->sequence_number-con->sequence_base) & 127) < WINDOW_SIZE && con->send_buffer.head != con->send_buffer_window_end) {
     70c:	e2 e4       	ldi	r30, 0x42	; 66
     70e:	f7 e0       	ldi	r31, 0x07	; 7
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	48 2f       	mov	r20, r24
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	93 8d       	ldd	r25, Z+27	; 0x1b
     718:	49 1b       	sub	r20, r25
     71a:	51 09       	sbc	r21, r1
     71c:	4f 77       	andi	r20, 0x7F	; 127
     71e:	55 27       	eor	r21, r21
     720:	44 30       	cpi	r20, 0x04	; 4
     722:	51 05       	cpc	r21, r1
     724:	0c f0       	brlt	.+2      	; 0x728 <sender+0x14c>
     726:	41 c0       	rjmp	.+130    	; 0x7aa <sender+0x1ce>
     728:	65 81       	ldd	r22, Z+5	; 0x05
     72a:	76 81       	ldd	r23, Z+6	; 0x06
     72c:	25 89       	ldd	r18, Z+21	; 0x15
     72e:	36 89       	ldd	r19, Z+22	; 0x16
     730:	62 17       	cp	r22, r18
     732:	73 07       	cpc	r23, r19
     734:	d1 f1       	breq	.+116    	; 0x7aa <sender+0x1ce>
    uint8_t data[MAX_PAYLOAD_SIZE];
    uint16_t len;
    data[0] = TYPE_DATA;
     736:	19 82       	std	Y+1, r1	; 0x01
    data[1] = con->sequence_number;
     738:	8a 83       	std	Y+2, r24	; 0x02
    buffer_read(&con->segment_lengths, (uint8_t*) &len, con->segment_lengths.tail+2*((con->sequence_number-con->sequence_base) & 127), 2);
     73a:	8f 01       	movw	r16, r30
     73c:	44 0f       	add	r20, r20
     73e:	55 1f       	adc	r21, r21
     740:	81 89       	ldd	r24, Z+17	; 0x11
     742:	92 89       	ldd	r25, Z+18	; 0x12
     744:	48 0f       	add	r20, r24
     746:	59 1f       	adc	r21, r25
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	be 01       	movw	r22, r28
     74e:	63 5d       	subi	r22, 0xD3	; 211
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	8d e4       	ldi	r24, 0x4D	; 77
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	41 d2       	rcall	.+1154   	; 0xbda <buffer_read>
    buffer_read(&con->send_buffer, &data[2], con->send_buffer_window_end, len);
     758:	2d a5       	ldd	r18, Y+45	; 0x2d
     75a:	3e a5       	ldd	r19, Y+46	; 0x2e
     75c:	f8 01       	movw	r30, r16
     75e:	45 89       	ldd	r20, Z+21	; 0x15
     760:	56 89       	ldd	r21, Z+22	; 0x16
     762:	be 01       	movw	r22, r28
     764:	6d 5f       	subi	r22, 0xFD	; 253
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	83 e4       	ldi	r24, 0x43	; 67
     76a:	97 e0       	ldi	r25, 0x07	; 7
     76c:	36 d2       	rcall	.+1132   	; 0xbda <buffer_read>
    con->send_buffer_window_end = (con->send_buffer_window_end+len) & (con->send_buffer.capacity-1);
     76e:	2d a5       	ldd	r18, Y+45	; 0x2d
     770:	3e a5       	ldd	r19, Y+46	; 0x2e
     772:	f8 01       	movw	r30, r16
     774:	85 89       	ldd	r24, Z+21	; 0x15
     776:	96 89       	ldd	r25, Z+22	; 0x16
     778:	a9 01       	movw	r20, r18
     77a:	48 0f       	add	r20, r24
     77c:	59 1f       	adc	r21, r25
     77e:	83 81       	ldd	r24, Z+3	; 0x03
     780:	94 81       	ldd	r25, Z+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	84 23       	and	r24, r20
     786:	95 23       	and	r25, r21
     788:	96 8b       	std	Z+22, r25	; 0x16
     78a:	85 8b       	std	Z+21, r24	; 0x15
    con->timer_started = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	87 8f       	std	Z+31, r24	; 0x1f
    con->sequence_number = (con->sequence_number+1) & 127;
     790:	81 8d       	ldd	r24, Z+25	; 0x19
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	81 8f       	std	Z+25, r24	; 0x19
    network_send(con->remote_address, PROTOCOL_ARQ, data, len+2);
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ae 01       	movw	r20, r28
     79e:	4f 5f       	subi	r20, 0xFF	; 255
     7a0:	5f 4f       	sbci	r21, 0xFF	; 255
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 a1       	ldd	r24, Z+32	; 0x20
     7a6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <network_send>
  } 
  
  xSemaphoreGive(con->mutex);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <connections+0x89>
     7b2:	90 91 cc 07 	lds	r25, 0x07CC	; 0x8007cc <connections+0x8a>
     7b6:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
}
     7ba:	ae 96       	adiw	r28, 0x2e	; 46
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <arq_reassembly>:

void arq_reassembly(arq_connection id, uint8_t *data, uint16_t len) { 
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ea 01       	movw	r28, r20
  if(id >= MAX_CONNECTIONS) return;
     7e6:	81 11       	cpse	r24, r1
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <arq_reassembly+0x90>
  
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
     7ea:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <connections+0x23>
     7ee:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <connections+0x24>
     7f2:	89 2b       	or	r24, r25
     7f4:	99 f4       	brne	.+38     	; 0x81c <arq_reassembly+0x40>
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
     7f6:	db 01       	movw	r26, r22
     7f8:	11 96       	adiw	r26, 0x01	; 1
     7fa:	8c 91       	ld	r24, X
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	98 2f       	mov	r25, r24
     802:	88 27       	eor	r24, r24
     804:	2c 91       	ld	r18, X
     806:	82 2b       	or	r24, r18
     808:	90 93 66 07 	sts	0x0766, r25	; 0x800766 <connections+0x24>
     80c:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <connections+0x23>
    len-=2; // Remove the header from the length, left with the length of the payload
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
     810:	85 36       	cpi	r24, 0x65	; 101
     812:	91 05       	cpc	r25, r1
     814:	58 f5       	brcc	.+86     	; 0x86c <arq_reassembly+0x90>
  arq_connection_t *con = &connections[id];
  // Dont need to take the mutex because this funcion is only called from receiver, and at that point the task already holds the mutex. Could use a recursive mutex, but it is not necessary
  
  if(con->receive_message_length == 0) { // Not in the midle of receiving, so this is the start of a message
    con->receive_message_length = data[0] | (data[1] << 8); //First two bytes of messsage is length
    len-=2; // Remove the header from the length, left with the length of the payload
     816:	22 97       	sbiw	r28, 0x02	; 2
    data+=2; // Move the pointer to skip past the length bytes and point to the actual data
     818:	6e 5f       	subi	r22, 0xFE	; 254
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
    
    if(con->receive_message_length > MAX_MESSAGE_SIZE) {
      return;
    }
  } 
  memcpy(con->message+con->num_received_bytes, data, len);
     81c:	02 e4       	ldi	r16, 0x42	; 66
     81e:	17 e0       	ldi	r17, 0x07	; 7
     820:	f8 01       	movw	r30, r16
     822:	81 a1       	ldd	r24, Z+33	; 0x21
     824:	92 a1       	ldd	r25, Z+34	; 0x22
     826:	ae 01       	movw	r20, r28
     828:	89 59       	subi	r24, 0x99	; 153
     82a:	98 4f       	sbci	r25, 0xF8	; 248
     82c:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  con->num_received_bytes += len;
     830:	d8 01       	movw	r26, r16
     832:	91 96       	adiw	r26, 0x21	; 33
     834:	6d 91       	ld	r22, X+
     836:	7c 91       	ld	r23, X
     838:	92 97       	sbiw	r26, 0x22	; 34
     83a:	6c 0f       	add	r22, r28
     83c:	7d 1f       	adc	r23, r29
     83e:	92 96       	adiw	r26, 0x22	; 34
     840:	7c 93       	st	X, r23
     842:	6e 93       	st	-X, r22
     844:	91 97       	sbiw	r26, 0x21	; 33
  
  if(con->num_received_bytes == con->receive_message_length) {
     846:	93 96       	adiw	r26, 0x23	; 35
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	94 97       	sbiw	r26, 0x24	; 36
     84e:	68 17       	cp	r22, r24
     850:	79 07       	cpc	r23, r25
     852:	61 f4       	brne	.+24     	; 0x86c <arq_reassembly+0x90>
    con->callback_data_received(con->message, con->num_received_bytes);
     854:	57 96       	adiw	r26, 0x17	; 23
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	58 97       	sbiw	r26, 0x18	; 24
     85c:	87 e6       	ldi	r24, 0x67	; 103
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	19 95       	eicall
    con->num_received_bytes = con->receive_message_length = 0;
     862:	f8 01       	movw	r30, r16
     864:	14 a2       	std	Z+36, r1	; 0x24
     866:	13 a2       	std	Z+35, r1	; 0x23
     868:	12 a2       	std	Z+34, r1	; 0x22
     86a:	11 a2       	std	Z+33, r1	; 0x21
  }
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <receiver>:
  data[0] = TYPE_ACK;
  data[1] = sequence_number;
  return network_send(con->remote_address, PROTOCOL_ARQ, data, 2);
}

void receiver(uint8_t address, uint8_t *data, uint16_t len) {
     876:	9f 92       	push	r9
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	8b 01       	movw	r16, r22
     894:	5a 01       	movw	r10, r20
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
     896:	90 91 62 07 	lds	r25, 0x0762	; 0x800762 <connections+0x20>
     89a:	98 13       	cpse	r25, r24
     89c:	b8 c0       	rjmp	.+368    	; 0xa0e <receiver+0x198>
     89e:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <connections>
     8a2:	99 23       	and	r25, r25
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <receiver+0x32>
     8a6:	b3 c0       	rjmp	.+358    	; 0xa0e <receiver+0x198>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     8a8:	fb 01       	movw	r30, r22
     8aa:	d0 80       	ld	r13, Z
  arq_connection_t *con = NULL;
  uint8_t id;
  uint8_t i;
  for(i=0;i<MAX_CONNECTIONS;i++) {
    if(connections[i].remote_address == address && connections[i].status != STATUS_NONE) {
      con = &connections[i];
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f2 e4       	ldi	r31, 0x42	; 66
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <receiver+0x6a>
    }
  }
  uint8_t type = data[0];
  
  if(con == NULL && type != TYPE_SYN) return;
  if(con == NULL && type == TYPE_SYN && listening_task != NULL) {
     8ba:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <__data_end>
     8be:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <__data_end+0x1>
     8c2:	30 97       	sbiw	r30, 0x00	; 0
     8c4:	59 f0       	breq	.+22     	; 0x8dc <receiver+0x66>
    xTaskNotify(listening_task, address, eSetValueWithOverwrite);
     8c6:	48 2f       	mov	r20, r24
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <xTaskGenericNotify>
    return;
     8da:	aa c0       	rjmp	.+340    	; 0xa30 <receiver+0x1ba>
     8dc:	e1 2c       	mov	r14, r1
     8de:	f1 2c       	mov	r15, r1
  }
  xSemaphoreTake(con->mutex, portMAX_DELAY);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	5f ef       	ldi	r21, 0xFF	; 255
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	f7 01       	movw	r30, r14
     8ec:	e7 57       	subi	r30, 0x77	; 119
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
  
  if(con->status == STATUS_CLOSED || con->status == STATUS_NONE || len == 0 || data == NULL) {
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	30 f0       	brcs	.+12     	; 0x90c <receiver+0x96>
     900:	a1 14       	cp	r10, r1
     902:	b1 04       	cpc	r11, r1
     904:	19 f0       	breq	.+6      	; 0x90c <receiver+0x96>
     906:	01 15       	cp	r16, r1
     908:	11 05       	cpc	r17, r1
     90a:	51 f4       	brne	.+20     	; 0x920 <receiver+0xaa>
    xSemaphoreGive(con->mutex);
     90c:	f7 01       	movw	r30, r14
     90e:	e7 57       	subi	r30, 0x77	; 119
     910:	ff 4f       	sbci	r31, 0xFF	; 255
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
    return;
     91e:	88 c0       	rjmp	.+272    	; 0xa30 <receiver+0x1ba>
  }
  
  if(con->status == STATUS_CONNECTING && type == TYPE_SYNACK) {
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f5       	brne	.+72     	; 0x96c <receiver+0xf6>
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 12       	cpse	r13, r31
     928:	21 c0       	rjmp	.+66     	; 0x96c <receiver+0xf6>
    if(con->blocked_task != NULL) {
     92a:	f7 01       	movw	r30, r14
     92c:	e5 57       	subi	r30, 0x75	; 117
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	81 f0       	breq	.+32     	; 0x958 <receiver+0xe2>
      xTaskNotifyGive(con->blocked_task);
     938:	00 e0       	ldi	r16, 0x00	; 0
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <xTaskGenericNotify>
      con->blocked_task = NULL;
     948:	f7 01       	movw	r30, r14
     94a:	e5 57       	subi	r30, 0x75	; 117
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
      arq_send_ack(id, 0x00);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1c de       	rcall	.-968    	; 0x590 <arq_send_ack>
    }
    
    xSemaphoreGive(con->mutex);
     958:	f7 01       	movw	r30, r14
     95a:	e7 57       	subi	r30, 0x77	; 119
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
    return;
     96a:	62 c0       	rjmp	.+196    	; 0xa30 <receiver+0x1ba>
  }
  
  uint8_t sequence = data[1];
     96c:	f8 01       	movw	r30, r16
     96e:	c1 80       	ldd	r12, Z+1	; 0x01
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
     970:	dd 20       	and	r13, r13
     972:	09 f4       	brne	.+2      	; 0x976 <receiver+0x100>
     974:	52 c0       	rjmp	.+164    	; 0xa1a <receiver+0x1a4>
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	df 12       	cpse	r13, r31
     97a:	13 c0       	rjmp	.+38     	; 0x9a2 <receiver+0x12c>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <receiver+0x1ae>
    if(sequence == con->request_number) {
      if(type == TYPE_DATA) arq_reassembly(id, &data[2], len-2);
     97e:	a5 01       	movw	r20, r10
     980:	42 50       	subi	r20, 0x02	; 2
     982:	51 09       	sbc	r21, r1
     984:	b8 01       	movw	r22, r16
     986:	6e 5f       	subi	r22, 0xFE	; 254
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 df       	rcall	.-434    	; 0x7dc <arq_reassembly>
      con->request_number = (con->request_number+1) & 127;
     98e:	f7 01       	movw	r30, r14
     990:	82 8d       	ldd	r24, Z+26	; 0x1a
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	8f 77       	andi	r24, 0x7F	; 127
     996:	82 8f       	std	Z+26, r24	; 0x1a
    }
    arq_send_ack(id, con->request_number);
     998:	f7 01       	movw	r30, r14
     99a:	62 8d       	ldd	r22, Z+26	; 0x1a
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	f8 dd       	rcall	.-1040   	; 0x590 <arq_send_ack>
     9a0:	2c c0       	rjmp	.+88     	; 0x9fa <receiver+0x184>
  } else if(type == TYPE_ACK) {
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	df 12       	cpse	r13, r31
     9a6:	29 c0       	rjmp	.+82     	; 0x9fa <receiver+0x184>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
     9a8:	f7 01       	movw	r30, r14
     9aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     9ac:	fc 2d       	mov	r31, r12
     9ae:	f8 1b       	sub	r31, r24
     9b0:	8f 2f       	mov	r24, r31
     9b2:	8f 77       	andi	r24, 0x7F	; 127
     9b4:	98 2e       	mov	r9, r24
    if(count != 0) {
     9b6:	09 f1       	breq	.+66     	; 0x9fa <receiver+0x184>
     9b8:	d1 2c       	mov	r13, r1
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9ba:	57 01       	movw	r10, r14
     9bc:	8b e0       	ldi	r24, 0x0B	; 11
     9be:	a8 0e       	add	r10, r24
     9c0:	b1 1c       	adc	r11, r1
        buffer_remove(&con->send_buffer, NULL, len);
     9c2:	87 01       	movw	r16, r14
     9c4:	0f 5f       	subi	r16, 0xFF	; 255
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
        buffer_remove(&con->segment_lengths, &len, 2);
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	be 01       	movw	r22, r28
     9ce:	6f 5f       	subi	r22, 0xFF	; 255
     9d0:	7f 4f       	sbci	r23, 0xFF	; 255
     9d2:	c5 01       	movw	r24, r10
     9d4:	50 d1       	rcall	.+672    	; 0xc76 <buffer_remove>
        buffer_remove(&con->send_buffer, NULL, len);
     9d6:	49 81       	ldd	r20, Y+1	; 0x01
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	c8 01       	movw	r24, r16
     9e0:	4a d1       	rcall	.+660    	; 0xc76 <buffer_remove>
    uint8_t i;
    uint8_t count;
    count = (sequence-con->sequence_base) & 127;
    if(count != 0) {
      uint8_t len;
      for(i=0;i<count;i++) {
     9e2:	d3 94       	inc	r13
     9e4:	9d 10       	cpse	r9, r13
     9e6:	f0 cf       	rjmp	.-32     	; 0x9c8 <receiver+0x152>
        buffer_remove(&con->segment_lengths, &len, 2);
        buffer_remove(&con->send_buffer, NULL, len);
      }
      con->sequence_base = sequence;
     9e8:	f7 01       	movw	r30, r14
     9ea:	c3 8e       	std	Z+27, r12	; 0x1b

      con->timer = 0;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
      con->timeout = 0;
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
      if(con->sequence_base == con->sequence_number) con->timer_started = 0; // No more un-acked packets
     9f2:	81 8d       	ldd	r24, Z+25	; 0x19
     9f4:	c8 12       	cpse	r12, r24
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <receiver+0x184>
     9f8:	17 8e       	std	Z+31, r1	; 0x1f
    }
  }
  
  xSemaphoreGive(con->mutex);
     9fa:	f7 01       	movw	r30, r14
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
     a0c:	11 c0       	rjmp	.+34     	; 0xa30 <receiver+0x1ba>
      con = &connections[i];
      id = i;
      break;
    }
  }
  uint8_t type = data[0];
     a0e:	f8 01       	movw	r30, r16
     a10:	d0 80       	ld	r13, Z
  
  if(con == NULL && type != TYPE_SYN) return;
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	df 12       	cpse	r13, r31
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <receiver+0x1ba>
     a18:	50 cf       	rjmp	.-352    	; 0x8ba <receiver+0x44>
    return;
  }
  
  uint8_t sequence = data[1];
  if(type == TYPE_DATA || type == TYPE_ALIVE_TEST) {
    if(sequence == con->request_number) {
     a1a:	f7 01       	movw	r30, r14
     a1c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a1e:	c8 12       	cpse	r12, r24
     a20:	bb cf       	rjmp	.-138    	; 0x998 <receiver+0x122>
     a22:	ad cf       	rjmp	.-166    	; 0x97e <receiver+0x108>
     a24:	f7 01       	movw	r30, r14
     a26:	82 8d       	ldd	r24, Z+26	; 0x1a
     a28:	c8 16       	cp	r12, r24
     a2a:	09 f4       	brne	.+2      	; 0xa2e <receiver+0x1b8>
     a2c:	b0 cf       	rjmp	.-160    	; 0x98e <receiver+0x118>
     a2e:	b4 cf       	rjmp	.-152    	; 0x998 <receiver+0x122>
    }
  }
  
  xSemaphoreGive(con->mutex);
  
}
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	08 95       	ret

00000a4a <vARQTask>:
void vARQTask(void *pvParamters) {
  uint8_t i;
  
  while(1) {
    for(i=0;i<MAX_CONNECTIONS;i++) {
		sender(i);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	c7 dd       	rcall	.-1138   	; 0x5dc <sender>
    }
    vTaskDelay(10 / portTICK_PERIOD_MS);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 53 24 	call	0x48a6	; 0x48a6 <vTaskDelay>
     a56:	f9 cf       	rjmp	.-14     	; 0xa4a <vARQTask>

00000a58 <buffer_init>:
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
     a58:	fc 01       	movw	r30, r24
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a5a:	61 15       	cp	r22, r1
     a5c:	71 05       	cpc	r23, r1
     a5e:	61 f0       	breq	.+24     	; 0xa78 <buffer_init+0x20>
  b->buf = buf;
     a60:	71 83       	std	Z+1, r23	; 0x01
     a62:	60 83       	st	Z, r22
  b->capacity = size;
     a64:	53 83       	std	Z+3, r21	; 0x03
     a66:	42 83       	std	Z+2, r20	; 0x02
  b->head = b->tail = b->len = 0;
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
     a6c:	17 82       	std	Z+7, r1	; 0x07
     a6e:	16 82       	std	Z+6, r1	; 0x06
     a70:	15 82       	std	Z+5, r1	; 0x05
     a72:	14 82       	std	Z+4, r1	; 0x04
  return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
#include "buffer.h"
#include "string.h"

uint8_t buffer_init(buffer_t *b, uint8_t *buf, uint16_t size) {
  if(buf == NULL) return 0; // Make sure the memory is allocated
     a78:	80 e0       	ldi	r24, 0x00	; 0
  b->buf = buf;
  b->capacity = size;
  b->head = b->tail = b->len = 0;
  return 1;
}
     a7a:	08 95       	ret

00000a7c <buffer_append>:

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     a8a:	2a 81       	ldd	r18, Y+2	; 0x02
     a8c:	3b 81       	ldd	r19, Y+3	; 0x03
     a8e:	88 85       	ldd	r24, Y+8	; 0x08
     a90:	99 85       	ldd	r25, Y+9	; 0x09
     a92:	f9 01       	movw	r30, r18
     a94:	e8 1b       	sub	r30, r24
     a96:	f9 0b       	sbc	r31, r25
     a98:	e4 17       	cp	r30, r20
     a9a:	f5 07       	cpc	r31, r21
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <buffer_append+0x24>
     a9e:	49 c0       	rjmp	.+146    	; 0xb32 <buffer_append+0xb6>
     aa0:	8a 01       	movw	r16, r20
     aa2:	7b 01       	movw	r14, r22
  if(len < b->capacity - b->head) {
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	a9 01       	movw	r20, r18
     aaa:	48 1b       	sub	r20, r24
     aac:	59 0b       	sbc	r21, r25
     aae:	04 17       	cp	r16, r20
     ab0:	15 07       	cpc	r17, r21
     ab2:	a8 f4       	brcc	.+42     	; 0xade <buffer_append+0x62>
    memcpy(b->buf+b->head, data, len);
     ab4:	28 81       	ld	r18, Y
     ab6:	39 81       	ldd	r19, Y+1	; 0x01
     ab8:	a8 01       	movw	r20, r16
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    b->head += len;
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	80 0f       	add	r24, r16
     ac8:	91 1f       	adc	r25, r17
     aca:	9d 83       	std	Y+5, r25	; 0x05
     acc:	8c 83       	std	Y+4, r24	; 0x04
    if(b->head == b->capacity) b->head = 0;
     ace:	2a 81       	ldd	r18, Y+2	; 0x02
     ad0:	3b 81       	ldd	r19, Y+3	; 0x03
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	21 f5       	brne	.+72     	; 0xb20 <buffer_append+0xa4>
     ad8:	1d 82       	std	Y+5, r1	; 0x05
     ada:	1c 82       	std	Y+4, r1	; 0x04
     adc:	21 c0       	rjmp	.+66     	; 0xb20 <buffer_append+0xa4>
  } else {
    memcpy(b->buf+b->head, data, (b->capacity - b->head) );
     ade:	28 81       	ld	r18, Y
     ae0:	39 81       	ldd	r19, Y+1	; 0x01
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	6a 81       	ldd	r22, Y+2	; 0x02
     af0:	7b 81       	ldd	r23, Y+3	; 0x03
     af2:	ac 01       	movw	r20, r24
     af4:	46 1b       	sub	r20, r22
     af6:	57 0b       	sbc	r21, r23
     af8:	40 0f       	add	r20, r16
     afa:	51 1f       	adc	r21, r17
     afc:	68 1b       	sub	r22, r24
     afe:	79 0b       	sbc	r23, r25
     b00:	6e 0d       	add	r22, r14
     b02:	7f 1d       	adc	r23, r15
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    b->head = len-(b->capacity - b->head);
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	2a 81       	ldd	r18, Y+2	; 0x02
     b12:	3b 81       	ldd	r19, Y+3	; 0x03
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	80 0f       	add	r24, r16
     b1a:	91 1f       	adc	r25, r17
     b1c:	9d 83       	std	Y+5, r25	; 0x05
     b1e:	8c 83       	std	Y+4, r24	; 0x04
  }
  b->len += len;
     b20:	48 85       	ldd	r20, Y+8	; 0x08
     b22:	59 85       	ldd	r21, Y+9	; 0x09
     b24:	04 0f       	add	r16, r20
     b26:	15 1f       	adc	r17, r21
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	08 87       	std	Y+8, r16	; 0x08
  return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <buffer_append+0xba>
  b->head = b->tail = b->len = 0;
  return 1;
}

uint16_t buffer_append(buffer_t *b, uint8_t *data, uint16_t len) {
  if(len > b->capacity - b->len) return 0; //Not enough room in the buffer
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
    memcpy(b->buf, data + (b->capacity - b->head), len-(b->capacity - b->head));
    b->head = len-(b->capacity - b->head);
  }
  b->len += len;
  return 1;
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	08 95       	ret

00000b44 <buffer_remove_token>:

//This reads bytes from the buffer until token is found, or nbytes is reached
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     b4e:	21 15       	cp	r18, r1
     b50:	31 05       	cpc	r19, r1
     b52:	c9 f1       	breq	.+114    	; 0xbc6 <buffer_remove_token+0x82>
    if( b->tail != b->head ){ //see if any data is available
     b54:	a6 81       	ldd	r26, Z+6	; 0x06
     b56:	b7 81       	ldd	r27, Z+7	; 0x07
     b58:	84 81       	ldd	r24, Z+4	; 0x04
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	a8 17       	cp	r26, r24
     b5e:	b9 07       	cpc	r27, r25
     b60:	a9 f1       	breq	.+106    	; 0xbcc <buffer_remove_token+0x88>
     b62:	c6 2f       	mov	r28, r22
     b64:	d7 2f       	mov	r29, r23
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <buffer_remove_token+0x36>
     b6c:	a6 81       	ldd	r26, Z+6	; 0x06
     b6e:	b7 81       	ldd	r27, Z+7	; 0x07
     b70:	64 81       	ldd	r22, Z+4	; 0x04
     b72:	75 81       	ldd	r23, Z+5	; 0x05
     b74:	a6 17       	cp	r26, r22
     b76:	b7 07       	cpc	r27, r23
     b78:	59 f1       	breq	.+86     	; 0xbd0 <buffer_remove_token+0x8c>
      *p++ = b->buf[b->tail];  //grab a byte from the buffer
     b7a:	60 81       	ld	r22, Z
     b7c:	71 81       	ldd	r23, Z+1	; 0x01
     b7e:	a6 0f       	add	r26, r22
     b80:	b7 1f       	adc	r27, r23
     b82:	5c 91       	ld	r21, X
     b84:	8e 01       	movw	r16, r28
     b86:	58 83       	st	Y, r21
      b->tail++;  //increment the tail
     b88:	66 81       	ldd	r22, Z+6	; 0x06
     b8a:	77 81       	ldd	r23, Z+7	; 0x07
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	77 83       	std	Z+7, r23	; 0x07
     b92:	66 83       	std	Z+6, r22	; 0x06
      b->len--;
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	a0 87       	std	Z+8, r26	; 0x08
      if( b->tail == b->capacity ){  //check for wrap-around
     b9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ba0:	b3 81       	ldd	r27, Z+3	; 0x03
     ba2:	6a 17       	cp	r22, r26
     ba4:	7b 07       	cpc	r23, r27
     ba6:	11 f4       	brne	.+4      	; 0xbac <buffer_remove_token+0x68>
        b->tail = 0;
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	21 96       	adiw	r28, 0x01	; 1
      }
      if(*(p-1) == token) return i+1;
     bae:	d8 01       	movw	r26, r16
     bb0:	5c 91       	ld	r21, X
     bb2:	54 13       	cpse	r21, r20
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <buffer_remove_token+0x76>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	a9 f6       	brne	.-86     	; 0xb6c <buffer_remove_token+0x28>
      if(*(p-1) == token) return i+1;
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
     bc2:	c9 01       	movw	r24, r18
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <buffer_remove_token+0x8c>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <buffer_remove_token+0x8c>
//The number of bytes read is returned
uint16_t buffer_remove_token(buffer_t *b, uint8_t* data, uint8_t token, uint16_t nbytes){
  uint16_t i;
  uint8_t * p;
  p = data;
  for(i=0; i < nbytes; i++){
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
    } else {
      return i; //number of bytes read
    }
  }
  return nbytes;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <buffer_read>:
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	7c 01       	movw	r14, r24
     bec:	6b 01       	movw	r12, r22
     bee:	ea 01       	movw	r28, r20
     bf0:	89 01       	movw	r16, r18
  if(data == NULL) return 0;
     bf2:	67 2b       	or	r22, r23
     bf4:	a9 f1       	breq	.+106    	; 0xc60 <buffer_read+0x86>
  if(idx >= b->capacity) idx -= b->capacity;
     bf6:	fc 01       	movw	r30, r24
     bf8:	42 81       	ldd	r20, Z+2	; 0x02
     bfa:	53 81       	ldd	r21, Z+3	; 0x03
     bfc:	c4 17       	cp	r28, r20
     bfe:	d5 07       	cpc	r29, r21
     c00:	10 f0       	brcs	.+4      	; 0xc06 <buffer_read+0x2c>
     c02:	c4 1b       	sub	r28, r20
     c04:	d5 0b       	sbc	r29, r21
  if(b->capacity - idx >= len) {
     c06:	4c 1b       	sub	r20, r28
     c08:	5d 0b       	sbc	r21, r29
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	60 f0       	brcs	.+24     	; 0xc28 <buffer_read+0x4e>
    memcpy(data, b->buf+idx, len);
     c10:	f7 01       	movw	r30, r14
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	6c 0f       	add	r22, r28
     c18:	7d 1f       	adc	r23, r29
     c1a:	a8 01       	movw	r20, r16
     c1c:	c6 01       	movw	r24, r12
     c1e:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
     c22:	80 2f       	mov	r24, r16
     c24:	91 2f       	mov	r25, r17
     c26:	1e c0       	rjmp	.+60     	; 0xc64 <buffer_read+0x8a>
  if(data == NULL) return 0;
  if(idx >= b->capacity) idx -= b->capacity;
  if(b->capacity - idx >= len) {
    memcpy(data, b->buf+idx, len);
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
     c28:	f7 01       	movw	r30, r14
     c2a:	60 81       	ld	r22, Z
     c2c:	71 81       	ldd	r23, Z+1	; 0x01
     c2e:	6c 0f       	add	r22, r28
     c30:	7d 1f       	adc	r23, r29
     c32:	c6 01       	movw	r24, r12
     c34:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
     c38:	f7 01       	movw	r30, r14
     c3a:	22 81       	ldd	r18, Z+2	; 0x02
     c3c:	33 81       	ldd	r19, Z+3	; 0x03
     c3e:	c9 01       	movw	r24, r18
     c40:	8c 1b       	sub	r24, r28
     c42:	9d 0b       	sbc	r25, r29
     c44:	a8 01       	movw	r20, r16
     c46:	42 1b       	sub	r20, r18
     c48:	53 0b       	sbc	r21, r19
     c4a:	4c 0f       	add	r20, r28
     c4c:	5d 1f       	adc	r21, r29
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	8c 0d       	add	r24, r12
     c54:	9d 1d       	adc	r25, r13
     c56:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  }
  return len;
     c5a:	80 2f       	mov	r24, r16
     c5c:	91 2f       	mov	r25, r17
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <buffer_read+0x8a>
  }
  return nbytes;
}
//Read, but dont remove from the buffer, 'len' bytes starting at idx
uint16_t buffer_read(buffer_t *b, uint8_t *data, uint16_t idx, uint16_t len) {
  if(data == NULL) return 0;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    memcpy(data, b->buf+idx, b->capacity - idx);
    memcpy(data + (b->capacity - idx), b->buf, len - (b->capacity - idx) );
  }
  return len;
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <buffer_remove>:

//Remove 'len' bytes from the buffer and add them to 'data'
uint16_t buffer_remove(buffer_t *b, uint8_t *data, uint16_t len) {
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24
     c84:	7b 01       	movw	r14, r22
  if(len > b->len) len = b->len;
     c86:	08 85       	ldd	r16, Y+8	; 0x08
     c88:	19 85       	ldd	r17, Y+9	; 0x09
     c8a:	40 17       	cp	r20, r16
     c8c:	51 07       	cpc	r21, r17
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <buffer_remove+0x1c>
     c90:	8a 01       	movw	r16, r20
  if(b->capacity - b->tail >= len) {
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	4a 81       	ldd	r20, Y+2	; 0x02
     c98:	5b 81       	ldd	r21, Y+3	; 0x03
     c9a:	48 1b       	sub	r20, r24
     c9c:	59 0b       	sbc	r21, r25
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <buffer_remove+0x60>
    if(data != NULL) memcpy(data, b->buf+b->tail, len);
     ca4:	e1 14       	cp	r14, r1
     ca6:	f1 04       	cpc	r15, r1
     ca8:	41 f0       	breq	.+16     	; 0xcba <buffer_remove+0x44>
     caa:	68 81       	ld	r22, Y
     cac:	79 81       	ldd	r23, Y+1	; 0x01
     cae:	68 0f       	add	r22, r24
     cb0:	79 1f       	adc	r23, r25
     cb2:	a8 01       	movw	r20, r16
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    b->tail = b->tail + len;
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	9f 81       	ldd	r25, Y+7	; 0x07
     cbe:	80 0f       	add	r24, r16
     cc0:	91 1f       	adc	r25, r17
     cc2:	9f 83       	std	Y+7, r25	; 0x07
     cc4:	8e 83       	std	Y+6, r24	; 0x06
    if(b->tail == b->capacity) b->tail = 0;
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	41 f5       	brne	.+80     	; 0xd20 <buffer_remove+0xaa>
     cd0:	1f 82       	std	Y+7, r1	; 0x07
     cd2:	1e 82       	std	Y+6, r1	; 0x06
     cd4:	25 c0       	rjmp	.+74     	; 0xd20 <buffer_remove+0xaa>
  } else {
    if(data != NULL) {
     cd6:	e1 14       	cp	r14, r1
     cd8:	f1 04       	cpc	r15, r1
     cda:	c1 f0       	breq	.+48     	; 0xd0c <buffer_remove+0x96>
      memcpy(data, b->buf+b->tail, b->capacity - b->tail);
     cdc:	68 81       	ld	r22, Y
     cde:	79 81       	ldd	r23, Y+1	; 0x01
     ce0:	68 0f       	add	r22, r24
     ce2:	79 1f       	adc	r23, r25
     ce4:	c7 01       	movw	r24, r14
     ce6:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
      memcpy(data + (b->capacity - b->tail), b->buf, len - (b->capacity - b->tail) );
     cea:	4e 81       	ldd	r20, Y+6	; 0x06
     cec:	5f 81       	ldd	r21, Y+7	; 0x07
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	c9 01       	movw	r24, r18
     cf4:	84 1b       	sub	r24, r20
     cf6:	95 0b       	sbc	r25, r21
     cf8:	42 1b       	sub	r20, r18
     cfa:	53 0b       	sbc	r21, r19
     cfc:	40 0f       	add	r20, r16
     cfe:	51 1f       	adc	r21, r17
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8e 0d       	add	r24, r14
     d06:	9f 1d       	adc	r25, r15
     d08:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    }
    b->tail = len - (b->capacity - b->tail);
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	3b 81       	ldd	r19, Y+3	; 0x03
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	80 0f       	add	r24, r16
     d1a:	91 1f       	adc	r25, r17
     d1c:	9f 83       	std	Y+7, r25	; 0x07
     d1e:	8e 83       	std	Y+6, r24	; 0x06
  }
  b->len -= len;
     d20:	88 85       	ldd	r24, Y+8	; 0x08
     d22:	99 85       	ldd	r25, Y+9	; 0x09
     d24:	80 1b       	sub	r24, r16
     d26:	91 0b       	sbc	r25, r17
     d28:	99 87       	std	Y+9, r25	; 0x09
     d2a:	88 87       	std	Y+8, r24	; 0x08
  return len;
     d2c:	c8 01       	movw	r24, r16
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <cobs_encode>:
/*****************************************************************************
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	7c 01       	movw	r14, r24
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     d4a:	68 0f       	add	r22, r24
     d4c:	79 1f       	adc	r23, r25
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
     d4e:	fc 01       	movw	r30, r24
     d50:	31 96       	adiw	r30, 0x01	; 1
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <cobs_encode+0x20>
     d56:	41 15       	cp	r20, r1
     d58:	51 05       	cpc	r21, r1
     d5a:	21 f4       	brne	.+8      	; 0xd64 <cobs_encode+0x28>
    {
        result.status = COBS_ENCODE_NULL_POINTER;
        return result;
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	4b c0       	rjmp	.+150    	; 0xdfa <cobs_encode+0xbe>
    }

    if (src_len != 0)
     d64:	21 15       	cp	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	59 f1       	breq	.+86     	; 0xdc0 <cobs_encode+0x84>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d6a:	e6 17       	cp	r30, r22
     d6c:	f7 07       	cpc	r31, r23
     d6e:	60 f5       	brcc	.+88     	; 0xdc8 <cobs_encode+0x8c>
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     d70:	8a 01       	movw	r16, r20
     d72:	02 0f       	add	r16, r18
     d74:	13 1f       	adc	r17, r19
     d76:	da 01       	movw	r26, r20
     d78:	ec 01       	movw	r28, r24
     d7a:	91 e0       	ldi	r25, 0x01	; 1
                }
                if (search_len == 0xFF)
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <cobs_encode+0x4c>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     d80:	fa 01       	movw	r30, r20
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     d82:	e6 17       	cp	r30, r22
     d84:	f7 07       	cpc	r31, r23
     d86:	20 f5       	brcc	.+72     	; 0xdd0 <cobs_encode+0x94>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
                break;
            }

            src_byte = *src_ptr++;
     d88:	3d 91       	ld	r19, X+
            if (src_byte == 0)
     d8a:	31 11       	cpse	r19, r1
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <cobs_encode+0x66>
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
     d8e:	98 83       	st	Y, r25
                dst_code_write_ptr = dst_write_ptr++;
     d90:	cf 01       	movw	r24, r30
     d92:	01 96       	adiw	r24, 0x01	; 1
                search_len = 1;
                if (src_ptr >= src_end_ptr)
     d94:	a0 17       	cp	r26, r16
     d96:	b1 07       	cpc	r27, r17
     d98:	e8 f4       	brcc	.+58     	; 0xdd4 <cobs_encode+0x98>
     d9a:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     d9c:	fc 01       	movw	r30, r24
                search_len = 1;
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	f0 cf       	rjmp	.-32     	; 0xd82 <cobs_encode+0x46>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     da2:	af 01       	movw	r20, r30
     da4:	4f 5f       	subi	r20, 0xFF	; 255
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	30 83       	st	Z, r19
                search_len++;
     daa:	9f 5f       	subi	r25, 0xFF	; 255
                if (src_ptr >= src_end_ptr)
     dac:	a0 17       	cp	r26, r16
     dae:	b1 07       	cpc	r27, r17
     db0:	b0 f4       	brcc	.+44     	; 0xdde <cobs_encode+0xa2>
                {
                    break;
                }
                if (search_len == 0xFF)
     db2:	9f 3f       	cpi	r25, 0xFF	; 255
     db4:	29 f7       	brne	.-54     	; 0xd80 <cobs_encode+0x44>
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
     db6:	28 83       	st	Y, r18
                    dst_code_write_ptr = dst_write_ptr++;
     db8:	32 96       	adiw	r30, 0x02	; 2
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dba:	ea 01       	movw	r28, r20
                {
                    /* We have a long string of non-zero bytes, so we need
                     * to write out a length code of 0xFF. */
                    *dst_code_write_ptr = search_len;
                    dst_code_write_ptr = dst_write_ptr++;
                    search_len = 1;
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	e1 cf       	rjmp	.-62     	; 0xd82 <cobs_encode+0x46>
cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
     dc0:	ec 01       	movw	r28, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dc2:	80 e0       	ldi	r24, 0x00	; 0
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_code_write_ptr  = dst_buf_ptr;
    uint8_t *           dst_write_ptr       = dst_code_write_ptr + 1;
    uint8_t             src_byte            = 0;
    uint8_t             search_len          = 1;
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <cobs_encode+0xa6>
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dc8:	ec 01       	movw	r28, r24
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dca:	82 e0       	ldi	r24, 0x02	; 2
    {
        /* Iterate over the source bytes */
        for (;;)
        {
            /* Check for running out of output buffer space */
            if (dst_write_ptr >= dst_buf_end_ptr)
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <cobs_encode+0xa6>
            {
                result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <cobs_encode+0xa6>
     dd4:	ef 01       	movw	r28, r30
            src_byte = *src_ptr++;
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
     dd6:	fc 01       	movw	r30, r24
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     dd8:	80 e0       	ldi	r24, 0x00	; 0
            if (src_byte == 0)
            {
                /* We found a zero byte */
                *dst_code_write_ptr = search_len;
                dst_code_write_ptr = dst_write_ptr++;
                search_len = 1;
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <cobs_encode+0xa6>
                }
            }
            else
            {
                /* Copy the non-zero byte to the destination buffer */
                *dst_write_ptr++ = src_byte;
     dde:	fa 01       	movw	r30, r20
 * Functions
 ****************************************************************************/

cobs_encode_result cobs_encode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_encode_result  result              = { 0, COBS_ENCODE_OK };
     de0:	80 e0       	ldi	r24, 0x00	; 0

    /* We've reached the end of the source data (or possibly run out of output buffer)
     * Finalise the remaining output. In particular, write the code (length) byte.
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
     de2:	c6 17       	cp	r28, r22
     de4:	d7 07       	cpc	r29, r23
     de6:	18 f4       	brcc	.+6      	; 0xdee <cobs_encode+0xb2>
        dst_write_ptr = dst_buf_end_ptr;
    }
    else
    {
        /* Write the last code (length) byte. */
        *dst_code_write_ptr = search_len;
     de8:	98 83       	st	Y, r25
     dea:	bf 01       	movw	r22, r30
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <cobs_encode+0xb4>
     * Update the pointer to calculate the final output length.
     */
    if (dst_code_write_ptr >= dst_buf_end_ptr)
    {
        /* We've run out of output buffer to write the code byte. */
        result.status |= COBS_ENCODE_OUT_BUFFER_OVERFLOW;
     dee:	82 e0       	ldi	r24, 0x02	; 2
    }

    /* Calculate the output length, from the value of dst_code_write_ptr */
    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     df0:	9b 01       	movw	r18, r22
     df2:	2e 19       	sub	r18, r14
     df4:	3f 09       	sbc	r19, r15
     df6:	62 2f       	mov	r22, r18
     df8:	73 2f       	mov	r23, r19
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <cobs_decode>:


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	7c 01       	movw	r14, r24
     e1e:	da 01       	movw	r26, r20
    uint8_t             i;
    uint8_t             len_code;


    /* First, do a NULL pointer check and return immediately if it fails. */
    if ((dst_buf_ptr == NULL) || (src_ptr == NULL))
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	11 f0       	breq	.+4      	; 0xe28 <cobs_decode+0x20>
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	21 f4       	brne	.+8      	; 0xe30 <cobs_decode+0x28>
    {
        result.status = COBS_DECODE_NULL_POINTER;
        return result;
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	5f c0       	rjmp	.+190    	; 0xeee <cobs_decode+0xe6>
    }

    if (src_len != 0)
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <cobs_decode+0x30>
     e36:	4b c0       	rjmp	.+150    	; 0xece <cobs_decode+0xc6>


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
     e38:	6a 01       	movw	r12, r20
     e3a:	c2 0e       	add	r12, r18
     e3c:	d3 1e       	adc	r13, r19
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
     e3e:	5c 01       	movw	r10, r24
     e40:	a6 0e       	add	r10, r22
     e42:	b7 1e       	adc	r11, r23
     e44:	8c 01       	movw	r16, r24
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <cobs_decode+0x44>
                src_byte = *src_ptr++;
                if (src_byte == 0)
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
     e4a:	8f 01       	movw	r16, r30

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     e4c:	ed 01       	movw	r28, r26
     e4e:	21 96       	adiw	r28, 0x01	; 1
     e50:	7c 91       	ld	r23, X
            if (len_code == 0)
     e52:	71 11       	cpse	r23, r1
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <cobs_decode+0x54>
            {
                result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e56:	54 60       	ori	r21, 0x04	; 4
                break;
     e58:	f8 01       	movw	r30, r16
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <cobs_decode+0xce>
            }
            len_code--;
     e5c:	71 50       	subi	r23, 0x01	; 1

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
     e5e:	c6 01       	movw	r24, r12
     e60:	8c 1b       	sub	r24, r28
     e62:	9d 0b       	sbc	r25, r29
            if (len_code > remaining_bytes)
     e64:	27 2f       	mov	r18, r23
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	10 f4       	brcc	.+4      	; 0xe72 <cobs_decode+0x6a>
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
                len_code = remaining_bytes;
     e6e:	78 2f       	mov	r23, r24

            /* Check length code against remaining input bytes */
            remaining_bytes = src_end_ptr - src_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_INPUT_TOO_SHORT;
     e70:	58 60       	ori	r21, 0x08	; 8
                len_code = remaining_bytes;
            }

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
     e72:	c5 01       	movw	r24, r10
     e74:	80 1b       	sub	r24, r16
     e76:	91 0b       	sbc	r25, r17
            if (len_code > remaining_bytes)
     e78:	27 2f       	mov	r18, r23
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	82 17       	cp	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	10 f4       	brcc	.+4      	; 0xe86 <cobs_decode+0x7e>
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
     e82:	78 2f       	mov	r23, r24

            /* Check length code against remaining output buffer space */
            remaining_bytes = dst_buf_end_ptr - dst_write_ptr;
            if (len_code > remaining_bytes)
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     e84:	52 60       	ori	r21, 0x02	; 2
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e86:	77 23       	and	r23, r23
     e88:	61 f1       	breq	.+88     	; 0xee2 <cobs_decode+0xda>
     e8a:	de 01       	movw	r26, r28
     e8c:	f8 01       	movw	r30, r16
     e8e:	97 2f       	mov	r25, r23
            {
                src_byte = *src_ptr++;
     e90:	3d 91       	ld	r19, X+
                if (src_byte == 0)
     e92:	31 11       	cpse	r19, r1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <cobs_decode+0x90>
                {
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
     e96:	54 60       	ori	r21, 0x04	; 4
                }
                *dst_write_ptr++ = src_byte;
     e98:	31 93       	st	Z+, r19
            {
                result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
                len_code = remaining_bytes;
            }

            for (i = len_code; i != 0; i--)
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <cobs_decode+0x88>
     e9e:	ef ef       	ldi	r30, 0xFF	; 255
     ea0:	e7 0f       	add	r30, r23
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	31 96       	adiw	r30, 0x01	; 1
     ea6:	de 01       	movw	r26, r28
     ea8:	ae 0f       	add	r26, r30
     eaa:	bf 1f       	adc	r27, r31
     eac:	e0 0f       	add	r30, r16
     eae:	f1 1f       	adc	r31, r17
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     eb0:	ac 15       	cp	r26, r12
     eb2:	bd 05       	cpc	r27, r13
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <cobs_decode+0xce>
            {
                break;
            }

            /* Add a zero to the end */
            if (len_code != 0xFE)
     eb6:	7e 3f       	cpi	r23, 0xFE	; 254
     eb8:	41 f2       	breq	.-112    	; 0xe4a <cobs_decode+0x42>
            {
                if (dst_write_ptr >= dst_buf_end_ptr)
     eba:	ea 15       	cp	r30, r10
     ebc:	fb 05       	cpc	r31, r11
     ebe:	10 f0       	brcs	.+4      	; 0xec4 <cobs_decode+0xbc>
                {
                    result.status |= COBS_DECODE_OUT_BUFFER_OVERFLOW;
     ec0:	52 60       	ori	r21, 0x02	; 2
                    break;
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <cobs_decode+0xce>
                }
                *dst_write_ptr++ = 0;
     ec4:	8f 01       	movw	r16, r30
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	10 82       	st	Z, r1
     ecc:	bf cf       	rjmp	.-130    	; 0xe4c <cobs_decode+0x44>
cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
    const uint8_t *     src_end_ptr         = src_ptr + src_len;
    uint8_t *           dst_buf_end_ptr     = dst_buf_ptr + dst_buf_len;
    uint8_t *           dst_write_ptr       = dst_buf_ptr;
     ece:	fc 01       	movw	r30, r24
}


cobs_decode_result cobs_decode(uint8_t *dst_buf_ptr, size_t dst_buf_len, const uint8_t * src_ptr, size_t src_len)
{
    cobs_decode_result  result              = { 0, COBS_DECODE_OK };
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <cobs_decode+0xce>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ed4:	f8 01       	movw	r30, r16
        }
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
     ed6:	ee 19       	sub	r30, r14
     ed8:	ff 09       	sbc	r31, r15
     eda:	6e 2f       	mov	r22, r30
     edc:	7f 2f       	mov	r23, r31
     ede:	85 2f       	mov	r24, r21
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <cobs_decode+0xe6>
                    result.status |= COBS_DECODE_ZERO_BYTE_IN_INPUT;
                }
                *dst_write_ptr++ = src_byte;
            }

            if (src_ptr >= src_end_ptr)
     ee2:	cc 15       	cp	r28, r12
     ee4:	dd 05       	cpc	r29, r13
     ee6:	b0 f7       	brcc	.-20     	; 0xed4 <cobs_decode+0xcc>
     ee8:	f8 01       	movw	r30, r16

    if (src_len != 0)
    {
        for (;;)
        {
            len_code = *src_ptr++;
     eea:	de 01       	movw	r26, r28
     eec:	e6 cf       	rjmp	.-52     	; 0xeba <cobs_decode+0xb2>
    }

    result.out_len = dst_write_ptr - dst_buf_ptr;

    return result;
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	08 95       	ret

00000f04 <crc_ibutton_update>:
  return crc;
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
     f04:	86 27       	eor	r24, r22
     f06:	98 e0       	ldi	r25, 0x08	; 8
  for (i = 0; i < 8; i++) {
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
     f08:	2c e8       	ldi	r18, 0x8C	; 140
     f0a:	80 ff       	sbrs	r24, 0
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <crc_ibutton_update+0x10>
     f0e:	86 95       	lsr	r24
     f10:	82 27       	eor	r24, r18
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <crc_ibutton_update+0x12>
    else crc >>= 1;
     f14:	86 95       	lsr	r24
     f16:	91 50       	subi	r25, 0x01	; 1
}

char crc_ibutton_update(char crc, char data) {
  char i;
  crc = crc ^ data;
  for (i = 0; i < 8; i++) {
     f18:	c1 f7       	brne	.-16     	; 0xf0a <crc_ibutton_update+0x6>
    if (crc & 0x01) crc = (crc >> 1) ^ 0x8C;
    else crc >>= 1;
  }
  return crc;
     f1a:	08 95       	ret

00000f1c <calculate_crc>:

#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f24:	66 23       	and	r22, r22
     f26:	59 f0       	breq	.+22     	; 0xf3e <calculate_crc+0x22>
     f28:	8c 01       	movw	r16, r24
     f2a:	ec 01       	movw	r28, r24
     f2c:	06 0f       	add	r16, r22
     f2e:	11 1d       	adc	r17, r1
     f30:	80 e0       	ldi	r24, 0x00	; 0
    crc = crc_ibutton_update(crc, data[i]);
     f32:	69 91       	ld	r22, Y+
     f34:	e7 df       	rcall	.-50     	; 0xf04 <crc_ibutton_update>
char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
  int i;
  for(i=0;i<len;i++) {
     f36:	0c 17       	cp	r16, r28
     f38:	1d 07       	cpc	r17, r29
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <calculate_crc+0x16>
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <calculate_crc+0x24>
#include "crc.h"

char crc_ibutton_update(char crc, char data);

char calculate_crc(char *data, char len) {
  char crc = 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
  int i;
  for(i=0;i<len;i++) {
    crc = crc_ibutton_update(crc, data[i]);
  }
  return crc;
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <vDistSens_init>:
};

/* Initialize distance sensors and ADC */
void vDistSens_init(){
    /* Initialize sensor pins as input */
    distSensReg &= ~((1<<distSensFwd) & (1<<distSensLeft) & (1<<distSensRear) & (1<<distSensRight));
     f4a:	80 b3       	in	r24, 0x10	; 16
     f4c:	80 bb       	out	0x10, r24	; 16
    
    /* Internal 2.56V VREG with external capacitor at AREF pin */
    /* Datasheet p281 table 26-3 */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f4e:	ec e7       	ldi	r30, 0x7C	; 124
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 6c       	ori	r24, 0xC0	; 192
     f56:	80 83       	st	Z, r24
    
    /* ADC enable */
    ADCSRA |= (1<<ADEN);
     f58:	ea e7       	ldi	r30, 0x7A	; 122
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
    
    /* ADC prescaler setting (div. factor = 16) */
    /* Datasheet p257 table 21-5 */
    ADCSRA |= (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
     f62:	80 81       	ld	r24, Z
     f64:	84 60       	ori	r24, 0x04	; 4
     f66:	80 83       	st	Z, r24
     f68:	08 95       	ret

00000f6a <ui8DistSens_readCM>:
uint8_t ui8DistSens_readCM(uint8_t sensorDirection){
    
    uint8_t ui8_analogValue;
    
    /* Choose channel */
    ADMUX = sensorDirection;
     f6a:	ec e7       	ldi	r30, 0x7C	; 124
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 83       	st	Z, r24
    
    /* Enable internal 2,54V AREF */
    ADMUX |= (1<<REFS1) | (1<<REFS0);
     f70:	90 81       	ld	r25, Z
     f72:	90 6c       	ori	r25, 0xC0	; 192
     f74:	90 83       	st	Z, r25
    
    /* Start conversion */
    ADCSRA |= (1<<ADSC);
     f76:	ea e7       	ldi	r30, 0x7A	; 122
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	90 81       	ld	r25, Z
     f7c:	90 64       	ori	r25, 0x40	; 64
     f7e:	90 83       	st	Z, r25
    loop_until_bit_is_clear(ADCSRA, ADSC); // Macro from <avr/io.h>, wait until bit bit in IO register is set.
     f80:	90 81       	ld	r25, Z
     f82:	96 fd       	sbrc	r25, 6
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <ui8DistSens_readCM+0x16>

    /* Return the 8 most significant bits from the 10 bit register */
    ui8_analogValue = (ADCL >> 2) | (ADCH << 6);
     f86:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     f8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
    
    // Returns corresponding distance in CM
    return ui8_analogToCM[sensorDirection-1][ui8_analogValue];
     f8e:	e8 2f       	mov	r30, r24
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	26 95       	lsr	r18
     f94:	26 95       	lsr	r18
     f96:	30 e4       	ldi	r19, 0x40	; 64
     f98:	93 9f       	mul	r25, r19
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	82 2b       	or	r24, r18
     fa0:	fe 2f       	mov	r31, r30
     fa2:	ee 27       	eor	r30, r30
     fa4:	e0 50       	subi	r30, 0x00	; 0
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e8 0f       	add	r30, r24
     faa:	f1 1d       	adc	r31, r1
}
     fac:	80 81       	ld	r24, Z
     fae:	08 95       	ret

00000fb0 <vFunc_Inf2pi>:
#include <string.h>
#include <math.h>
#include <stdlib.h>

/* Take any angle and put it inside -pi,pi */
void vFunc_Inf2pi(float *angle_in_radians){
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
    do{
        if (*angle_in_radians > M_PI) *angle_in_radians -= 2*M_PI;
     fbe:	c8 80       	ld	r12, Y
     fc0:	d9 80       	ldd	r13, Y+1	; 0x01
     fc2:	ea 80       	ldd	r14, Y+2	; 0x02
     fc4:	fb 80       	ldd	r15, Y+3	; 0x03
     fc6:	2b ed       	ldi	r18, 0xDB	; 219
     fc8:	3f e0       	ldi	r19, 0x0F	; 15
     fca:	49 e4       	ldi	r20, 0x49	; 73
     fcc:	50 e4       	ldi	r21, 0x40	; 64
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	6c f4       	brge	.+26     	; 0xff4 <vFunc_Inf2pi+0x44>
     fda:	2b ed       	ldi	r18, 0xDB	; 219
     fdc:	3f e0       	ldi	r19, 0x0F	; 15
     fde:	49 ec       	ldi	r20, 0xC9	; 201
     fe0:	50 e4       	ldi	r21, 0x40	; 64
     fe2:	c7 01       	movw	r24, r14
     fe4:	b6 01       	movw	r22, r12
     fe6:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
     fea:	68 83       	st	Y, r22
     fec:	79 83       	std	Y+1, r23	; 0x01
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <vFunc_Inf2pi+0x70>
        else if (*angle_in_radians < -M_PI) *angle_in_radians += 2*M_PI;
     ff4:	2b ed       	ldi	r18, 0xDB	; 219
     ff6:	3f e0       	ldi	r19, 0x0F	; 15
     ff8:	49 e4       	ldi	r20, 0x49	; 73
     ffa:	50 ec       	ldi	r21, 0xC0	; 192
     ffc:	c7 01       	movw	r24, r14
     ffe:	b6 01       	movw	r22, r12
    1000:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__cmpsf2>
    1004:	88 23       	and	r24, r24
    1006:	64 f4       	brge	.+24     	; 0x1020 <vFunc_Inf2pi+0x70>
    1008:	2b ed       	ldi	r18, 0xDB	; 219
    100a:	3f e0       	ldi	r19, 0x0F	; 15
    100c:	49 ec       	ldi	r20, 0xC9	; 201
    100e:	50 e4       	ldi	r21, 0x40	; 64
    1010:	c7 01       	movw	r24, r14
    1012:	b6 01       	movw	r22, r12
    1014:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    1018:	68 83       	st	Y, r22
    101a:	79 83       	std	Y+1, r23	; 0x01
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    } while (fabs(*angle_in_radians) > M_PI);
    1020:	88 81       	ld	r24, Y
    1022:	99 81       	ldd	r25, Y+1	; 0x01
    1024:	aa 81       	ldd	r26, Y+2	; 0x02
    1026:	bb 81       	ldd	r27, Y+3	; 0x03
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	9f 77       	andi	r25, 0x7F	; 127
    102e:	2b ed       	ldi	r18, 0xDB	; 219
    1030:	3f e0       	ldi	r19, 0x0F	; 15
    1032:	49 e4       	ldi	r20, 0x49	; 73
    1034:	50 e4       	ldi	r21, 0x40	; 64
    1036:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <vFunc_Inf2pi+0x90>
    103e:	bf cf       	rjmp	.-130    	; 0xfbe <vFunc_Inf2pi+0xe>
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	08 95       	ret

0000104e <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    105c:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    1060:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <pxEnd>
    1064:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <pxEnd+0x1>
    1068:	89 2b       	or	r24, r25
    106a:	41 f5       	brne	.+80     	; 0x10bc <pvPortMalloc+0x6e>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    106c:	e7 ed       	ldi	r30, 0xD7	; 215
    106e:	f7 e0       	ldi	r31, 0x07	; 7
    1070:	ab ed       	ldi	r26, 0xDB	; 219
    1072:	b7 e0       	ldi	r27, 0x07	; 7
    1074:	b1 83       	std	Z+1, r27	; 0x01
    1076:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    107c:	e7 ed       	ldi	r30, 0xD7	; 215
    107e:	f9 e1       	ldi	r31, 0x19	; 25
    1080:	f0 93 d6 07 	sts	0x07D6, r31	; 0x8007d6 <pxEnd+0x1>
    1084:	e0 93 d5 07 	sts	0x07D5, r30	; 0x8007d5 <pxEnd>
	pxEnd->xBlockSize = 0;
    1088:	13 82       	std	Z+3, r1	; 0x03
    108a:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1090:	8c ef       	ldi	r24, 0xFC	; 252
    1092:	91 e1       	ldi	r25, 0x11	; 17
    1094:	13 96       	adiw	r26, 0x03	; 3
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    109c:	ed 93       	st	X+, r30
    109e:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a0:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <xMinimumEverFreeBytesRemaining+0x1>
    10a4:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10a8:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <xFreeBytesRemaining+0x1>
    10ac:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e8       	ldi	r25, 0x80	; 128
    10b4:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <xBlockAllocatedBit+0x1>
    10b8:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    10bc:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <xBlockAllocatedBit>
    10c0:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <xBlockAllocatedBit+0x1>
    10c4:	8c 23       	and	r24, r28
    10c6:	9d 23       	and	r25, r29
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f0       	breq	.+2      	; 0x10ce <pvPortMalloc+0x80>
    10cc:	b2 c0       	rjmp	.+356    	; 0x1232 <pvPortMalloc+0x1e4>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    10ce:	20 97       	sbiw	r28, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <pvPortMalloc+0x86>
    10d2:	b2 c0       	rjmp	.+356    	; 0x1238 <pvPortMalloc+0x1ea>
			{
				xWantedSize += xHeapStructSize;
    10d4:	ae 01       	movw	r20, r28
    10d6:	4c 5f       	subi	r20, 0xFC	; 252
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    10da:	09 f4       	brne	.+2      	; 0x10de <pvPortMalloc+0x90>
    10dc:	b0 c0       	rjmp	.+352    	; 0x123e <pvPortMalloc+0x1f0>
    10de:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <xFreeBytesRemaining>
    10e2:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <xFreeBytesRemaining+0x1>
    10e6:	84 17       	cp	r24, r20
    10e8:	95 07       	cpc	r25, r21
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <pvPortMalloc+0xa0>
    10ec:	ab c0       	rjmp	.+342    	; 0x1244 <pvPortMalloc+0x1f6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    10ee:	e0 91 d7 07 	lds	r30, 0x07D7	; 0x8007d7 <xStart>
    10f2:	f0 91 d8 07 	lds	r31, 0x07D8	; 0x8007d8 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    10f6:	a7 ed       	ldi	r26, 0xD7	; 215
    10f8:	b7 e0       	ldi	r27, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <pvPortMalloc+0xb2>
    10fc:	df 01       	movw	r26, r30
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
    10fe:	f9 01       	movw	r30, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1100:	22 81       	ldd	r18, Z+2	; 0x02
    1102:	33 81       	ldd	r19, Z+3	; 0x03
    1104:	24 17       	cp	r18, r20
    1106:	35 07       	cpc	r19, r21
    1108:	28 f4       	brcc	.+10     	; 0x1114 <pvPortMalloc+0xc6>
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	21 15       	cp	r18, r1
    1110:	31 05       	cpc	r19, r1
    1112:	a1 f7       	brne	.-24     	; 0x10fc <pvPortMalloc+0xae>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    1114:	60 91 d5 07 	lds	r22, 0x07D5	; 0x8007d5 <pxEnd>
    1118:	70 91 d6 07 	lds	r23, 0x07D6	; 0x8007d6 <pxEnd+0x1>
    111c:	e6 17       	cp	r30, r22
    111e:	f7 07       	cpc	r31, r23
    1120:	09 f4       	brne	.+2      	; 0x1124 <pvPortMalloc+0xd6>
    1122:	93 c0       	rjmp	.+294    	; 0x124a <pvPortMalloc+0x1fc>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    1124:	cd 91       	ld	r28, X+
    1126:	dc 91       	ld	r29, X
    1128:	11 97       	sbiw	r26, 0x01	; 1
    112a:	7e 01       	movw	r14, r28
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	e8 0e       	add	r14, r24
    1130:	f1 1c       	adc	r15, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	8d 93       	st	X+, r24
    1138:	9c 93       	st	X, r25

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	84 1b       	sub	r24, r20
    1140:	95 0b       	sbc	r25, r21
    1142:	89 30       	cpi	r24, 0x09	; 9
    1144:	91 05       	cpc	r25, r1
    1146:	08 f4       	brcc	.+2      	; 0x114a <pvPortMalloc+0xfc>
    1148:	52 c0       	rjmp	.+164    	; 0x11ee <pvPortMalloc+0x1a0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    114a:	9f 01       	movw	r18, r30
    114c:	24 0f       	add	r18, r20
    114e:	35 1f       	adc	r19, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1150:	d9 01       	movw	r26, r18
    1152:	13 96       	adiw	r26, 0x03	; 3
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	12 97       	sbiw	r26, 0x02	; 2
						pxBlock->xBlockSize = xWantedSize;
    115a:	53 83       	std	Z+3, r21	; 0x03
    115c:	42 83       	std	Z+2, r20	; 0x02
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    115e:	a7 ed       	ldi	r26, 0xD7	; 215
    1160:	b7 e0       	ldi	r27, 0x07	; 7
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <pvPortMalloc+0x118>
    1164:	dc 01       	movw	r26, r24
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	11 97       	sbiw	r26, 0x01	; 1
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	c8 f3       	brcs	.-14     	; 0x1164 <pvPortMalloc+0x116>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	4d 91       	ld	r20, X+
    1176:	5c 91       	ld	r21, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	8d 01       	movw	r16, r26
    117c:	04 0f       	add	r16, r20
    117e:	15 1f       	adc	r17, r21
    1180:	20 17       	cp	r18, r16
    1182:	31 07       	cpc	r19, r17
    1184:	51 f4       	brne	.+20     	; 0x119a <pvPortMalloc+0x14c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1186:	e9 01       	movw	r28, r18
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	3b 81       	ldd	r19, Y+3	; 0x03
    118c:	42 0f       	add	r20, r18
    118e:	53 1f       	adc	r21, r19
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	5c 93       	st	X, r21
    1194:	4e 93       	st	-X, r20
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	9d 01       	movw	r18, r26
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    119a:	e9 01       	movw	r28, r18
    119c:	4a 81       	ldd	r20, Y+2	; 0x02
    119e:	5b 81       	ldd	r21, Y+3	; 0x03
    11a0:	89 01       	movw	r16, r18
    11a2:	04 0f       	add	r16, r20
    11a4:	15 1f       	adc	r17, r21
    11a6:	80 17       	cp	r24, r16
    11a8:	91 07       	cpc	r25, r17
    11aa:	c9 f4       	brne	.+50     	; 0x11de <pvPortMalloc+0x190>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    11ac:	60 17       	cp	r22, r16
    11ae:	71 07       	cpc	r23, r17
    11b0:	91 f0       	breq	.+36     	; 0x11d6 <pvPortMalloc+0x188>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11b2:	e8 01       	movw	r28, r16
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	9b 81       	ldd	r25, Y+3	; 0x03
    11b8:	48 0f       	add	r20, r24
    11ba:	59 1f       	adc	r21, r25
    11bc:	e9 01       	movw	r28, r18
    11be:	5b 83       	std	Y+3, r21	; 0x03
    11c0:	4a 83       	std	Y+2, r20	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	ec 01       	movw	r28, r24
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	e9 01       	movw	r28, r18
    11d0:	99 83       	std	Y+1, r25	; 0x01
    11d2:	88 83       	st	Y, r24
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <pvPortMalloc+0x196>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    11d6:	e9 01       	movw	r28, r18
    11d8:	79 83       	std	Y+1, r23	; 0x01
    11da:	68 83       	st	Y, r22
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <pvPortMalloc+0x196>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    11de:	e9 01       	movw	r28, r18
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    11e4:	a2 17       	cp	r26, r18
    11e6:	b3 07       	cpc	r27, r19
    11e8:	11 f0       	breq	.+4      	; 0x11ee <pvPortMalloc+0x1a0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    11ea:	2d 93       	st	X+, r18
    11ec:	3c 93       	st	X, r19
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    11ee:	22 81       	ldd	r18, Z+2	; 0x02
    11f0:	33 81       	ldd	r19, Z+3	; 0x03
    11f2:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <xFreeBytesRemaining>
    11f6:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <xFreeBytesRemaining+0x1>
    11fa:	82 1b       	sub	r24, r18
    11fc:	93 0b       	sbc	r25, r19
    11fe:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <xFreeBytesRemaining+0x1>
    1202:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    1206:	40 91 d1 07 	lds	r20, 0x07D1	; 0x8007d1 <xMinimumEverFreeBytesRemaining>
    120a:	50 91 d2 07 	lds	r21, 0x07D2	; 0x8007d2 <xMinimumEverFreeBytesRemaining+0x1>
    120e:	84 17       	cp	r24, r20
    1210:	95 07       	cpc	r25, r21
    1212:	20 f4       	brcc	.+8      	; 0x121c <pvPortMalloc+0x1ce>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    1214:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <xMinimumEverFreeBytesRemaining+0x1>
    1218:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    121c:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <xBlockAllocatedBit>
    1220:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <xBlockAllocatedBit+0x1>
    1224:	28 2b       	or	r18, r24
    1226:	39 2b       	or	r19, r25
    1228:	33 83       	std	Z+3, r19	; 0x03
    122a:	22 83       	std	Z+2, r18	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	0e c0       	rjmp	.+28     	; 0x124e <pvPortMalloc+0x200>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    1232:	e1 2c       	mov	r14, r1
    1234:	f1 2c       	mov	r15, r1
    1236:	0b c0       	rjmp	.+22     	; 0x124e <pvPortMalloc+0x200>
    1238:	e1 2c       	mov	r14, r1
    123a:	f1 2c       	mov	r15, r1
    123c:	08 c0       	rjmp	.+16     	; 0x124e <pvPortMalloc+0x200>
    123e:	e1 2c       	mov	r14, r1
    1240:	f1 2c       	mov	r15, r1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <pvPortMalloc+0x200>
    1244:	e1 2c       	mov	r14, r1
    1246:	f1 2c       	mov	r15, r1
    1248:	02 c0       	rjmp	.+4      	; 0x124e <pvPortMalloc+0x200>
    124a:	e1 2c       	mov	r14, r1
    124c:	f1 2c       	mov	r15, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    124e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
    1252:	c7 01       	movw	r24, r14
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	09 f4       	brne	.+2      	; 0x126c <vPortFree+0xa>
    126a:	68 c0       	rjmp	.+208    	; 0x133c <vPortFree+0xda>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    126c:	fc 01       	movw	r30, r24
    126e:	34 97       	sbiw	r30, 0x04	; 4
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	33 81       	ldd	r19, Z+3	; 0x03
    1274:	40 91 cf 07 	lds	r20, 0x07CF	; 0x8007cf <xBlockAllocatedBit>
    1278:	50 91 d0 07 	lds	r21, 0x07D0	; 0x8007d0 <xBlockAllocatedBit+0x1>
    127c:	b9 01       	movw	r22, r18
    127e:	64 23       	and	r22, r20
    1280:	75 23       	and	r23, r21
    1282:	67 2b       	or	r22, r23
    1284:	09 f4       	brne	.+2      	; 0x1288 <vPortFree+0x26>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <vPortFree+0xda>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	67 2b       	or	r22, r23
    128e:	09 f0       	breq	.+2      	; 0x1292 <vPortFree+0x30>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <vPortFree+0xda>

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    1292:	ef 01       	movw	r28, r30
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    1294:	40 95       	com	r20
    1296:	50 95       	com	r21
    1298:	24 23       	and	r18, r20
    129a:	35 23       	and	r19, r21
    129c:	33 83       	std	Z+3, r19	; 0x03
    129e:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
    12a0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    12a4:	4a 81       	ldd	r20, Y+2	; 0x02
    12a6:	5b 81       	ldd	r21, Y+3	; 0x03
    12a8:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <xFreeBytesRemaining>
    12ac:	90 91 d4 07 	lds	r25, 0x07D4	; 0x8007d4 <xFreeBytesRemaining+0x1>
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	90 93 d4 07 	sts	0x07D4, r25	; 0x8007d4 <xFreeBytesRemaining+0x1>
    12b8:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <xFreeBytesRemaining>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    12bc:	e7 ed       	ldi	r30, 0xD7	; 215
    12be:	f7 e0       	ldi	r31, 0x07	; 7
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <vPortFree+0x62>
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	8c 17       	cp	r24, r28
    12ca:	9d 07       	cpc	r25, r29
    12cc:	d0 f3       	brcs	.-12     	; 0x12c2 <vPortFree+0x60>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    12ce:	22 81       	ldd	r18, Z+2	; 0x02
    12d0:	33 81       	ldd	r19, Z+3	; 0x03
    12d2:	bf 01       	movw	r22, r30
    12d4:	62 0f       	add	r22, r18
    12d6:	73 1f       	adc	r23, r19
    12d8:	c6 17       	cp	r28, r22
    12da:	d7 07       	cpc	r29, r23
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <vPortFree+0x86>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    12de:	24 0f       	add	r18, r20
    12e0:	35 1f       	adc	r19, r21
    12e2:	33 83       	std	Z+3, r19	; 0x03
    12e4:	22 83       	std	Z+2, r18	; 0x02
    12e6:	ef 01       	movw	r28, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    12e8:	2a 81       	ldd	r18, Y+2	; 0x02
    12ea:	3b 81       	ldd	r19, Y+3	; 0x03
    12ec:	de 01       	movw	r26, r28
    12ee:	a2 0f       	add	r26, r18
    12f0:	b3 1f       	adc	r27, r19
    12f2:	8a 17       	cp	r24, r26
    12f4:	9b 07       	cpc	r25, r27
    12f6:	c9 f4       	brne	.+50     	; 0x132a <vPortFree+0xc8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    12f8:	80 91 d5 07 	lds	r24, 0x07D5	; 0x8007d5 <pxEnd>
    12fc:	90 91 d6 07 	lds	r25, 0x07D6	; 0x8007d6 <pxEnd+0x1>
    1300:	a8 17       	cp	r26, r24
    1302:	b9 07       	cpc	r27, r25
    1304:	79 f0       	breq	.+30     	; 0x1324 <vPortFree+0xc2>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	28 0f       	add	r18, r24
    1310:	39 1f       	adc	r19, r25
    1312:	3b 83       	std	Y+3, r19	; 0x03
    1314:	2a 83       	std	Y+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1316:	a0 81       	ld	r26, Z
    1318:	b1 81       	ldd	r27, Z+1	; 0x01
    131a:	8d 91       	ld	r24, X+
    131c:	9c 91       	ld	r25, X
    131e:	99 83       	std	Y+1, r25	; 0x01
    1320:	88 83       	st	Y, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <vPortFree+0xcc>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1324:	b9 83       	std	Y+1, r27	; 0x01
    1326:	a8 83       	st	Y, r26
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vPortFree+0xcc>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    132e:	ec 17       	cp	r30, r28
    1330:	fd 07       	cpc	r31, r29
    1332:	11 f0       	breq	.+4      	; 0x1338 <vPortFree+0xd6>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1334:	d1 83       	std	Z+1, r29	; 0x01
    1336:	c0 83       	st	Z, r28
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
    1338:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <sIMU_readRegisterRegion>:
}
float fIMU_readFloatGyroY( void ){
    
    float output = fIMU_calcGyro(i16IMU_readRawGyroY());
    return output;
}
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
    1350:	e4 2e       	mov	r14, r20
    1352:	28 98       	cbi	0x05, 0	; 5
    1354:	86 2f       	mov	r24, r22
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    135c:	ee 20       	and	r14, r14
    135e:	b1 f0       	breq	.+44     	; 0x138c <sIMU_readRegisterRegion+0x4a>
    1360:	0f ef       	ldi	r16, 0xFF	; 255
    1362:	0e 0d       	add	r16, r14
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	0c 0f       	add	r16, r28
    136c:	1d 1f       	adc	r17, r29
    136e:	f1 2c       	mov	r15, r1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <sIMU_readRegisterRegion+0x3a>
    137a:	f3 94       	inc	r15
    137c:	89 93       	st	Y+, r24
    137e:	0c 17       	cp	r16, r28
    1380:	1d 07       	cpc	r17, r29
    1382:	b1 f7       	brne	.-20     	; 0x1370 <sIMU_readRegisterRegion+0x2e>
    1384:	fe 10       	cpse	r15, r14
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <sIMU_readRegisterRegion+0x4e>
    1388:	85 e0       	ldi	r24, 0x05	; 5
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    138c:	85 e0       	ldi	r24, 0x05	; 5
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <sIMU_readRegisterRegion+0x50>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	28 9a       	sbi	0x05, 0	; 5
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	08 95       	ret

000013a2 <sIMU_readRegister>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	28 98       	cbi	0x05, 0	; 5
    13aa:	86 2f       	mov	r24, r22
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    13b8:	28 9a       	sbi	0x05, 0	; 5
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <sIMU_readRegister+0x20>
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <sIMU_readRegister+0x22>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	88 83       	st	Y, r24
    13c6:	89 2f       	mov	r24, r25
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <sIMU_Init>:
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	1f 92       	push	r1
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	e3 e3       	ldi	r30, 0x33	; 51
    13dc:	fb e1       	ldi	r31, 0x1B	; 27
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 83       	st	Z, r24
    13e2:	24 ef       	ldi	r18, 0xF4	; 244
    13e4:	31 e0       	ldi	r19, 0x01	; 1
    13e6:	32 83       	std	Z+2, r19	; 0x02
    13e8:	21 83       	std	Z+1, r18	; 0x01
    13ea:	22 e8       	ldi	r18, 0x82	; 130
    13ec:	36 e0       	ldi	r19, 0x06	; 6
    13ee:	34 83       	std	Z+4, r19	; 0x04
    13f0:	23 83       	std	Z+3, r18	; 0x03
    13f2:	20 e9       	ldi	r18, 0x90	; 144
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	36 83       	std	Z+6, r19	; 0x06
    13f8:	25 83       	std	Z+5, r18	; 0x05
    13fa:	17 82       	std	Z+7, r1	; 0x07
    13fc:	10 86       	std	Z+8, r1	; 0x08
    13fe:	81 87       	std	Z+9, r24	; 0x09
    1400:	82 87       	std	Z+10, r24	; 0x0a
    1402:	20 e1       	ldi	r18, 0x10	; 16
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	34 87       	std	Z+12, r19	; 0x0c
    1408:	23 87       	std	Z+11, r18	; 0x0b
    140a:	2d e0       	ldi	r18, 0x0D	; 13
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	36 87       	std	Z+14, r19	; 0x0e
    1410:	25 87       	std	Z+13, r18	; 0x0d
    1412:	22 e3       	ldi	r18, 0x32	; 50
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	30 8b       	std	Z+16, r19	; 0x10
    1418:	27 87       	std	Z+15, r18	; 0x0f
    141a:	11 8a       	std	Z+17, r1	; 0x11
    141c:	12 8a       	std	Z+18, r1	; 0x12
    141e:	83 8b       	std	Z+19, r24	; 0x13
    1420:	84 8b       	std	Z+20, r24	; 0x14
    1422:	88 eb       	ldi	r24, 0xB8	; 184
    1424:	9b e0       	ldi	r25, 0x0B	; 11
    1426:	96 8b       	std	Z+22, r25	; 0x16
    1428:	85 8b       	std	Z+21, r24	; 0x15
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 8f       	std	Z+24, r25	; 0x18
    1430:	87 8b       	std	Z+23, r24	; 0x17
    1432:	11 8e       	std	Z+25, r1	; 0x19
    1434:	10 92 4e 1b 	sts	0x1B4E, r1	; 0x801b4e <allOnesCounter+0x1>
    1438:	10 92 4d 1b 	sts	0x1B4D, r1	; 0x801b4d <allOnesCounter>
    143c:	10 92 50 1b 	sts	0x1B50, r1	; 0x801b50 <nonSuccessCounter+0x1>
    1440:	10 92 4f 1b 	sts	0x1B4F, r1	; 0x801b4f <nonSuccessCounter>
    1444:	0e 94 87 21 	call	0x430e	; 0x430e <vSPI_MasterInit>
    1448:	20 9a       	sbi	0x04, 0	; 4
    144a:	28 9a       	sbi	0x05, 0	; 5
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	20 e1       	ldi	r18, 0x10	; 16
    1450:	37 e2       	ldi	r19, 0x27	; 39
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	8f 5f       	subi	r24, 0xFF	; 255
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	31 09       	sbc	r19, r1
    145c:	d1 f7       	brne	.-12     	; 0x1452 <sIMU_Init+0x84>
    145e:	6f e0       	ldi	r22, 0x0F	; 15
    1460:	ce 01       	movw	r24, r28
    1462:	02 96       	adiw	r24, 0x02	; 2
    1464:	9e df       	rcall	.-196    	; 0x13a2 <sIMU_readRegister>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	89 36       	cpi	r24, 0x69	; 105
    146a:	c9 f7       	brne	.-14     	; 0x145e <sIMU_Init+0x90>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <sIMU_readRegisterInt16>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	1f 92       	push	r1
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8c 01       	movw	r16, r24
    148a:	42 e0       	ldi	r20, 0x02	; 2
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	58 df       	rcall	.-336    	; 0x1342 <sIMU_readRegisterRegion>
    1492:	2a 81       	ldd	r18, Y+2	; 0x02
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	32 2f       	mov	r19, r18
    1498:	22 27       	eor	r18, r18
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	29 2b       	or	r18, r25
    149e:	f8 01       	movw	r30, r16
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <sIMU_writeRegister>:
    14b2:	cf 93       	push	r28
    14b4:	c6 2f       	mov	r28, r22
    14b6:	28 98       	cbi	0x05, 0	; 5
    14b8:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 95 21 	call	0x432a	; 0x432a <ui8SPI_MasterTransmit>
    14c2:	28 9a       	sbi	0x05, 0	; 5
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <sIMU_begin>:
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	1f 92       	push	r1
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	19 82       	std	Y+1, r1	; 0x01
    14da:	79 df       	rcall	.-270    	; 0x13ce <sIMU_Init>
    14dc:	18 2f       	mov	r17, r24
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	80 91 3c 1b 	lds	r24, 0x1B3C	; 0x801b3c <settings+0x9>
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <sIMU_begin+0x20>
    14e8:	83 c0       	rjmp	.+262    	; 0x15f0 <sIMU_begin+0x126>
    14ea:	80 91 42 1b 	lds	r24, 0x1B42	; 0x801b42 <settings+0xf>
    14ee:	90 91 43 1b 	lds	r25, 0x1B43	; 0x801b43 <settings+0x10>
    14f2:	84 36       	cpi	r24, 0x64	; 100
    14f4:	91 05       	cpc	r25, r1
    14f6:	41 f0       	breq	.+16     	; 0x1508 <sIMU_begin+0x3e>
    14f8:	88 3c       	cpi	r24, 0xC8	; 200
    14fa:	91 05       	cpc	r25, r1
    14fc:	41 f0       	breq	.+16     	; 0x150e <sIMU_begin+0x44>
    14fe:	c2 97       	sbiw	r24, 0x32	; 50
    1500:	41 f4       	brne	.+16     	; 0x1512 <sIMU_begin+0x48>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <sIMU_begin+0x48>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <sIMU_begin+0x48>
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	80 91 3e 1b 	lds	r24, 0x1B3E	; 0x801b3e <settings+0xb>
    1516:	90 91 3f 1b 	lds	r25, 0x1B3F	; 0x801b3f <settings+0xc>
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	91 05       	cpc	r25, r1
    151e:	31 f0       	breq	.+12     	; 0x152c <sIMU_begin+0x62>
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	91 05       	cpc	r25, r1
    1524:	39 f0       	breq	.+14     	; 0x1534 <sIMU_begin+0x6a>
    1526:	02 97       	sbiw	r24, 0x02	; 2
    1528:	49 f4       	brne	.+18     	; 0x153c <sIMU_begin+0x72>
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <sIMU_begin+0x78>
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	88 60       	ori	r24, 0x08	; 8
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	07 c0       	rjmp	.+14     	; 0x1542 <sIMU_begin+0x78>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8c 60       	ori	r24, 0x0C	; 12
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <sIMU_begin+0x78>
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	80 91 40 1b 	lds	r24, 0x1B40	; 0x801b40 <settings+0xd>
    1546:	90 91 41 1b 	lds	r25, 0x1B41	; 0x801b41 <settings+0xe>
    154a:	80 3a       	cpi	r24, 0xA0	; 160
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	92 07       	cpc	r25, r18
    1550:	c1 f1       	breq	.+112    	; 0x15c2 <sIMU_begin+0xf8>
    1552:	70 f4       	brcc	.+28     	; 0x1570 <sIMU_begin+0xa6>
    1554:	8a 31       	cpi	r24, 0x1A	; 26
    1556:	91 05       	cpc	r25, r1
    1558:	21 f1       	breq	.+72     	; 0x15a2 <sIMU_begin+0xd8>
    155a:	18 f4       	brcc	.+6      	; 0x1562 <sIMU_begin+0x98>
    155c:	0d 97       	sbiw	r24, 0x0d	; 13
    155e:	e9 f0       	breq	.+58     	; 0x159a <sIMU_begin+0xd0>
    1560:	28 c0       	rjmp	.+80     	; 0x15b2 <sIMU_begin+0xe8>
    1562:	84 33       	cpi	r24, 0x34	; 52
    1564:	91 05       	cpc	r25, r1
    1566:	09 f1       	breq	.+66     	; 0x15aa <sIMU_begin+0xe0>
    1568:	80 3d       	cpi	r24, 0xD0	; 208
    156a:	91 05       	cpc	r25, r1
    156c:	31 f1       	breq	.+76     	; 0x15ba <sIMU_begin+0xf0>
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <sIMU_begin+0xe8>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	2d e0       	ldi	r18, 0x0D	; 13
    1574:	92 07       	cpc	r25, r18
    1576:	89 f1       	breq	.+98     	; 0x15da <sIMU_begin+0x110>
    1578:	40 f4       	brcc	.+16     	; 0x158a <sIMU_begin+0xc0>
    157a:	81 34       	cpi	r24, 0x41	; 65
    157c:	23 e0       	ldi	r18, 0x03	; 3
    157e:	92 07       	cpc	r25, r18
    1580:	21 f1       	breq	.+72     	; 0x15ca <sIMU_begin+0x100>
    1582:	8c 37       	cpi	r24, 0x7C	; 124
    1584:	96 40       	sbci	r25, 0x06	; 6
    1586:	29 f1       	breq	.+74     	; 0x15d2 <sIMU_begin+0x108>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <sIMU_begin+0xe8>
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	2a e1       	ldi	r18, 0x1A	; 26
    158e:	92 07       	cpc	r25, r18
    1590:	41 f1       	breq	.+80     	; 0x15e2 <sIMU_begin+0x118>
    1592:	82 31       	cpi	r24, 0x12	; 18
    1594:	94 43       	sbci	r25, 0x34	; 52
    1596:	49 f1       	breq	.+82     	; 0x15ea <sIMU_begin+0x120>
    1598:	0c c0       	rjmp	.+24     	; 0x15b2 <sIMU_begin+0xe8>
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <sIMU_begin+0x126>
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <sIMU_begin+0x126>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	80 63       	ori	r24, 0x30	; 48
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <sIMU_begin+0x126>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 64       	ori	r24, 0x40	; 64
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	1b c0       	rjmp	.+54     	; 0x15f0 <sIMU_begin+0x126>
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	80 65       	ori	r24, 0x50	; 80
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	17 c0       	rjmp	.+46     	; 0x15f0 <sIMU_begin+0x126>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 66       	ori	r24, 0x60	; 96
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <sIMU_begin+0x126>
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 67       	ori	r24, 0x70	; 112
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <sIMU_begin+0x126>
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <sIMU_begin+0x126>
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	80 69       	ori	r24, 0x90	; 144
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <sIMU_begin+0x126>
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 6a       	ori	r24, 0xA0	; 160
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <sIMU_begin+0x126>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	80 6b       	ori	r24, 0xB0	; 176
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	69 81       	ldd	r22, Y+1	; 0x01
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	5e df       	rcall	.-324    	; 0x14b2 <sIMU_writeRegister>
    15f6:	63 e1       	ldi	r22, 0x13	; 19
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	d2 de       	rcall	.-604    	; 0x13a2 <sIMU_readRegister>
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	90 91 3d 1b 	lds	r25, 0x1B3D	; 0x801b3d <settings+0xa>
    1608:	91 30       	cpi	r25, 0x01	; 1
    160a:	11 f4       	brne	.+4      	; 0x1610 <sIMU_begin+0x146>
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	69 81       	ldd	r22, Y+1	; 0x01
    1612:	83 e1       	ldi	r24, 0x13	; 19
    1614:	4e df       	rcall	.-356    	; 0x14b2 <sIMU_writeRegister>
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	80 91 33 1b 	lds	r24, 0x1B33	; 0x801b33 <settings>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <sIMU_begin+0x158>
    1620:	5b c0       	rjmp	.+182    	; 0x16d8 <sIMU_begin+0x20e>
    1622:	80 91 34 1b 	lds	r24, 0x1B34	; 0x801b34 <settings+0x1>
    1626:	90 91 35 1b 	lds	r25, 0x1B35	; 0x801b35 <settings+0x2>
    162a:	85 3f       	cpi	r24, 0xF5	; 245
    162c:	91 05       	cpc	r25, r1
    162e:	c1 f0       	breq	.+48     	; 0x1660 <sIMU_begin+0x196>
    1630:	20 f4       	brcc	.+8      	; 0x163a <sIMU_begin+0x170>
    1632:	8d 37       	cpi	r24, 0x7D	; 125
    1634:	91 05       	cpc	r25, r1
    1636:	49 f0       	breq	.+18     	; 0x164a <sIMU_begin+0x180>
    1638:	11 c0       	rjmp	.+34     	; 0x165c <sIMU_begin+0x192>
    163a:	84 3f       	cpi	r24, 0xF4	; 244
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	92 07       	cpc	r25, r18
    1640:	39 f0       	breq	.+14     	; 0x1650 <sIMU_begin+0x186>
    1642:	88 3e       	cpi	r24, 0xE8	; 232
    1644:	93 40       	sbci	r25, 0x03	; 3
    1646:	39 f0       	breq	.+14     	; 0x1656 <sIMU_begin+0x18c>
    1648:	09 c0       	rjmp	.+18     	; 0x165c <sIMU_begin+0x192>
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <sIMU_begin+0x196>
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <sIMU_begin+0x196>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <sIMU_begin+0x196>
    165c:	8c e0       	ldi	r24, 0x0C	; 12
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	80 91 36 1b 	lds	r24, 0x1B36	; 0x801b36 <settings+0x3>
    1664:	90 91 37 1b 	lds	r25, 0x1B37	; 0x801b37 <settings+0x4>
    1668:	80 3d       	cpi	r24, 0xD0	; 208
    166a:	91 05       	cpc	r25, r1
    166c:	31 f1       	breq	.+76     	; 0x16ba <sIMU_begin+0x1f0>
    166e:	48 f4       	brcc	.+18     	; 0x1682 <sIMU_begin+0x1b8>
    1670:	8a 31       	cpi	r24, 0x1A	; 26
    1672:	91 05       	cpc	r25, r1
    1674:	b1 f0       	breq	.+44     	; 0x16a2 <sIMU_begin+0x1d8>
    1676:	84 33       	cpi	r24, 0x34	; 52
    1678:	91 05       	cpc	r25, r1
    167a:	b9 f0       	breq	.+46     	; 0x16aa <sIMU_begin+0x1e0>
    167c:	0d 97       	sbiw	r24, 0x0d	; 13
    167e:	c9 f4       	brne	.+50     	; 0x16b2 <sIMU_begin+0x1e8>
    1680:	0c c0       	rjmp	.+24     	; 0x169a <sIMU_begin+0x1d0>
    1682:	81 34       	cpi	r24, 0x41	; 65
    1684:	23 e0       	ldi	r18, 0x03	; 3
    1686:	92 07       	cpc	r25, r18
    1688:	01 f1       	breq	.+64     	; 0x16ca <sIMU_begin+0x200>
    168a:	8c 37       	cpi	r24, 0x7C	; 124
    168c:	26 e0       	ldi	r18, 0x06	; 6
    168e:	92 07       	cpc	r25, r18
    1690:	01 f1       	breq	.+64     	; 0x16d2 <sIMU_begin+0x208>
    1692:	80 3a       	cpi	r24, 0xA0	; 160
    1694:	91 40       	sbci	r25, 0x01	; 1
    1696:	69 f4       	brne	.+26     	; 0x16b2 <sIMU_begin+0x1e8>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <sIMU_begin+0x1f8>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	80 61       	ori	r24, 0x10	; 16
    169e:	89 83       	std	Y+1, r24	; 0x01
    16a0:	1b c0       	rjmp	.+54     	; 0x16d8 <sIMU_begin+0x20e>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <sIMU_begin+0x20e>
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	80 63       	ori	r24, 0x30	; 48
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	13 c0       	rjmp	.+38     	; 0x16d8 <sIMU_begin+0x20e>
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 64       	ori	r24, 0x40	; 64
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <sIMU_begin+0x20e>
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	80 65       	ori	r24, 0x50	; 80
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <sIMU_begin+0x20e>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 66       	ori	r24, 0x60	; 96
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <sIMU_begin+0x20e>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	80 67       	ori	r24, 0x70	; 112
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <sIMU_begin+0x20e>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	ea de       	rcall	.-556    	; 0x14b2 <sIMU_writeRegister>
    16de:	6f e0       	ldi	r22, 0x0F	; 15
    16e0:	ce 01       	movw	r24, r28
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	5e de       	rcall	.-836    	; 0x13a2 <sIMU_readRegister>
    16e6:	81 2f       	mov	r24, r17
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	08 95       	ret

000016f4 <i16IMU_readRawGyroZ>:
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	1f 92       	push	r1
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	66 e2       	ldi	r22, 0x26	; 38
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	b8 de       	rcall	.-656    	; 0x1478 <sIMU_readRegisterInt16>
    1708:	88 23       	and	r24, r24
    170a:	a9 f0       	breq	.+42     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    170c:	85 30       	cpi	r24, 0x05	; 5
    170e:	51 f4       	brne	.+20     	; 0x1724 <i16IMU_readRawGyroZ+0x30>
    1710:	80 91 4d 1b 	lds	r24, 0x1B4D	; 0x801b4d <allOnesCounter>
    1714:	90 91 4e 1b 	lds	r25, 0x1B4E	; 0x801b4e <allOnesCounter+0x1>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	90 93 4e 1b 	sts	0x1B4E, r25	; 0x801b4e <allOnesCounter+0x1>
    171e:	80 93 4d 1b 	sts	0x1B4D, r24	; 0x801b4d <allOnesCounter>
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <i16IMU_readRawGyroZ+0x42>
    1724:	80 91 4f 1b 	lds	r24, 0x1B4F	; 0x801b4f <nonSuccessCounter>
    1728:	90 91 50 1b 	lds	r25, 0x1B50	; 0x801b50 <nonSuccessCounter+0x1>
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	90 93 50 1b 	sts	0x1B50, r25	; 0x801b50 <nonSuccessCounter+0x1>
    1732:	80 93 4f 1b 	sts	0x1B4F, r24	; 0x801b4f <nonSuccessCounter>
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	9a 81       	ldd	r25, Y+2	; 0x02
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <fIMU_calcGyro>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	cf 93       	push	r28
    174e:	fc 01       	movw	r30, r24
    1750:	40 91 34 1b 	lds	r20, 0x1B34	; 0x801b34 <settings+0x1>
    1754:	50 91 35 1b 	lds	r21, 0x1B35	; 0x801b35 <settings+0x2>
    1758:	45 3f       	cpi	r20, 0xF5	; 245
    175a:	51 05       	cpc	r21, r1
    175c:	b1 f0       	breq	.+44     	; 0x178a <fIMU_calcGyro+0x46>
    175e:	9a 01       	movw	r18, r20
    1760:	a5 e2       	ldi	r26, 0x25	; 37
    1762:	b6 e0       	ldi	r27, 0x06	; 6
    1764:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <__umulhisi3>
    1768:	48 1b       	sub	r20, r24
    176a:	59 0b       	sbc	r21, r25
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	00 24       	eor	r0, r0
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	00 1c       	adc	r0, r0
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	00 1c       	adc	r0, r0
    1782:	89 2f       	mov	r24, r25
    1784:	90 2d       	mov	r25, r0
    1786:	c8 2f       	mov	r28, r24
    1788:	01 c0       	rjmp	.+2      	; 0x178c <fIMU_calcGyro+0x48>
    178a:	c2 e0       	ldi	r28, 0x02	; 2
    178c:	bf 01       	movw	r22, r30
    178e:	ff 0f       	add	r31, r31
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4c e8       	ldi	r20, 0x8C	; 140
    179e:	50 e4       	ldi	r21, 0x40	; 64
    17a0:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	6c 2f       	mov	r22, r28
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
    17b8:	c7 01       	movw	r24, r14
    17ba:	b6 01       	movw	r22, r12
    17bc:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4a e7       	ldi	r20, 0x7A	; 122
    17c6:	54 e4       	ldi	r21, 0x44	; 68
    17c8:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    17cc:	cf 91       	pop	r28
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	08 95       	ret

000017d8 <fIMU_readFloatGyroZ>:
    }
    
    return output;
}
float fIMU_readFloatGyroZ(){
    float output = fIMU_calcGyro(i16IMU_readRawGyroZ());
    17d8:	8d df       	rcall	.-230    	; 0x16f4 <i16IMU_readRawGyroZ>
    17da:	b4 cf       	rjmp	.-152    	; 0x1744 <fIMU_calcGyro>
    
    return output;
}
    17dc:	08 95       	ret

000017de <vLED_init>:
/*  Custom includes    */
#include "LED.h"

/* Initialize LEDport pins as output */
void vLED_init(){
	ledReg |= (1<<ledGREEN) | (1<<ledYELLOW) | (1<<ledRED);
    17de:	ea e0       	ldi	r30, 0x0A	; 10
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 81       	ld	r24, Z
    17e4:	87 60       	ori	r24, 0x07	; 7
    17e6:	80 83       	st	Z, r24
    17e8:	08 95       	ret

000017ea <vLED_singleHigh>:
}

/* Set a specific, single LED high */
void vLED_singleHigh(int ledCOLOR){
	if (ledCOLOR == ledGREEN)			ledPORT |= (1<<ledGREEN);
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	31 f4       	brne	.+12     	; 0x17fc <vLED_singleHigh+0x12>
    17f0:	eb e0       	ldi	r30, 0x0B	; 11
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	80 83       	st	Z, r24
    17fa:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)		ledPORT |= (1<<ledYELLOW);
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	31 f4       	brne	.+12     	; 0x180e <vLED_singleHigh+0x24>
    1802:	eb e0       	ldi	r30, 0x0B	; 11
    1804:	f1 e0       	ldi	r31, 0x01	; 1
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	80 83       	st	Z, r24
    180c:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT |= (1<<ledRED);
    180e:	89 2b       	or	r24, r25
    1810:	29 f4       	brne	.+10     	; 0x181c <vLED_singleHigh+0x32>
    1812:	eb e0       	ldi	r30, 0x0B	; 11
    1814:	f1 e0       	ldi	r31, 0x01	; 1
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	08 95       	ret

0000181e <vLED_singleLow>:
}

/* Set a specific, single LED low */
void vLED_singleLow(int ledCOLOR){
    if (ledCOLOR == ledGREEN)			ledPORT &= ~(1<<ledGREEN);
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	31 f4       	brne	.+12     	; 0x1830 <vLED_singleLow+0x12>
    1824:	eb e0       	ldi	r30, 0x0B	; 11
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	80 83       	st	Z, r24
    182e:	08 95       	ret
    else if (ledCOLOR == ledYELLOW)		ledPORT &= ~(1<<ledYELLOW);
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	31 f4       	brne	.+12     	; 0x1842 <vLED_singleLow+0x24>
    1836:	eb e0       	ldi	r30, 0x0B	; 11
    1838:	f1 e0       	ldi	r31, 0x01	; 1
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	80 83       	st	Z, r24
    1840:	08 95       	ret
    else if (ledCOLOR == ledRED)		ledPORT &= ~(1<<ledRED);
    1842:	89 2b       	or	r24, r25
    1844:	29 f4       	brne	.+10     	; 0x1850 <vLED_singleLow+0x32>
    1846:	eb e0       	ldi	r30, 0x0B	; 11
    1848:	f1 e0       	ldi	r31, 0x01	; 1
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	80 83       	st	Z, r24
    1850:	08 95       	ret

00001852 <vLED_toggle>:
}

/* Toggle a single LED */
void vLED_toggle(int ledCOLOR){
	if (ledCOLOR == ledGREEN)		ledPORT ^= (1<<ledGREEN);
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	91 05       	cpc	r25, r1
    1856:	39 f4       	brne	.+14     	; 0x1866 <vLED_toggle+0x14>
    1858:	eb e0       	ldi	r30, 0x0B	; 11
    185a:	f1 e0       	ldi	r31, 0x01	; 1
    185c:	90 81       	ld	r25, Z
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	89 27       	eor	r24, r25
    1862:	80 83       	st	Z, r24
    1864:	08 95       	ret
	else if (ledCOLOR == ledYELLOW)	ledPORT ^= (1<<ledYELLOW);
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	39 f4       	brne	.+14     	; 0x187a <vLED_toggle+0x28>
    186c:	eb e0       	ldi	r30, 0x0B	; 11
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	90 81       	ld	r25, Z
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 27       	eor	r24, r25
    1876:	80 83       	st	Z, r24
    1878:	08 95       	ret
	else if (ledCOLOR == ledRED)		ledPORT ^= (1<<ledRED);
    187a:	89 2b       	or	r24, r25
    187c:	31 f4       	brne	.+12     	; 0x188a <vLED_toggle+0x38>
    187e:	eb e0       	ldi	r30, 0x0B	; 11
    1880:	f1 e0       	ldi	r31, 0x01	; 1
    1882:	90 81       	ld	r25, Z
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 27       	eor	r24, r25
    1888:	80 83       	st	Z, r24
    188a:	08 95       	ret

0000188c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    188c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    188e:	03 96       	adiw	r24, 0x03	; 3
    1890:	92 83       	std	Z+2, r25	; 0x02
    1892:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	3f ef       	ldi	r19, 0xFF	; 255
    1898:	34 83       	std	Z+4, r19	; 0x04
    189a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    189c:	96 83       	std	Z+6, r25	; 0x06
    189e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18a0:	90 87       	std	Z+8, r25	; 0x08
    18a2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    18a4:	10 82       	st	Z, r1
    18a6:	08 95       	ret

000018a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    18a8:	fc 01       	movw	r30, r24
    18aa:	11 86       	std	Z+9, r1	; 0x09
    18ac:	10 86       	std	Z+8, r1	; 0x08
    18ae:	08 95       	ret

000018b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	9c 01       	movw	r18, r24
    18b6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    18b8:	dc 01       	movw	r26, r24
    18ba:	11 96       	adiw	r26, 0x01	; 1
    18bc:	cd 91       	ld	r28, X+
    18be:	dc 91       	ld	r29, X
    18c0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    18c2:	d3 83       	std	Z+3, r29	; 0x03
    18c4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	95 83       	std	Z+5, r25	; 0x05
    18cc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	dc 01       	movw	r26, r24
    18d4:	13 96       	adiw	r26, 0x03	; 3
    18d6:	7c 93       	st	X, r23
    18d8:	6e 93       	st	-X, r22
    18da:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
    18dc:	7d 83       	std	Y+5, r23	; 0x05
    18de:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    18e0:	31 87       	std	Z+9, r19	; 0x09
    18e2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    18e4:	f9 01       	movw	r30, r18
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 83       	st	Z, r24
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    18f8:	48 81       	ld	r20, Y
    18fa:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    18fc:	4f 3f       	cpi	r20, 0xFF	; 255
    18fe:	2f ef       	ldi	r18, 0xFF	; 255
    1900:	52 07       	cpc	r21, r18
    1902:	21 f4       	brne	.+8      	; 0x190c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1904:	fc 01       	movw	r30, r24
    1906:	a7 81       	ldd	r26, Z+7	; 0x07
    1908:	b0 85       	ldd	r27, Z+8	; 0x08
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    190c:	dc 01       	movw	r26, r24
    190e:	13 96       	adiw	r26, 0x03	; 3
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <vListInsert+0x22>
    1912:	df 01       	movw	r26, r30
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	13 97       	sbiw	r26, 0x03	; 3
    191c:	20 81       	ld	r18, Z
    191e:	31 81       	ldd	r19, Z+1	; 0x01
    1920:	42 17       	cp	r20, r18
    1922:	53 07       	cpc	r21, r19
    1924:	b0 f7       	brcc	.-20     	; 0x1912 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1926:	12 96       	adiw	r26, 0x02	; 2
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	13 97       	sbiw	r26, 0x03	; 3
    192e:	fb 83       	std	Y+3, r31	; 0x03
    1930:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1932:	d5 83       	std	Z+5, r29	; 0x05
    1934:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1936:	bd 83       	std	Y+5, r27	; 0x05
    1938:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    193a:	13 96       	adiw	r26, 0x03	; 3
    193c:	dc 93       	st	X, r29
    193e:	ce 93       	st	-X, r28
    1940:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1942:	99 87       	std	Y+9, r25	; 0x09
    1944:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1946:	fc 01       	movw	r30, r24
    1948:	20 81       	ld	r18, Z
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	20 83       	st	Z, r18
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    195a:	a0 85       	ldd	r26, Z+8	; 0x08
    195c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    195e:	c2 81       	ldd	r28, Z+2	; 0x02
    1960:	d3 81       	ldd	r29, Z+3	; 0x03
    1962:	84 81       	ldd	r24, Z+4	; 0x04
    1964:	95 81       	ldd	r25, Z+5	; 0x05
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    196a:	c4 81       	ldd	r28, Z+4	; 0x04
    196c:	d5 81       	ldd	r29, Z+5	; 0x05
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	12 97       	sbiw	r26, 0x02	; 2
    197e:	e8 17       	cp	r30, r24
    1980:	f9 07       	cpc	r31, r25
    1982:	31 f4       	brne	.+12     	; 0x1990 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1984:	84 81       	ldd	r24, Z+4	; 0x04
    1986:	95 81       	ldd	r25, Z+5	; 0x05
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	9c 93       	st	X, r25
    198c:	8e 93       	st	-X, r24
    198e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1994:	8c 91       	ld	r24, X
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <vMainCommunicationTask>:
char printToTerminal[0] = " ";
*/

/*  Communication task */
/*  Communication task */
void vMainCommunicationTask( void *pvParameters ){
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	a0 97       	sbiw	r28, 0x20	; 32
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
	// Setup for the communication task
	struct sPoint Setpoint = {0}; // Struct for setpoints from server
    19b4:	fe 01       	movw	r30, r28
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	88 e0       	ldi	r24, 0x08	; 8
    19ba:	df 01       	movw	r26, r30
    19bc:	1d 92       	st	X+, r1
    19be:	8a 95       	dec	r24
    19c0:	e9 f7       	brne	.-6      	; 0x19bc <vMainCommunicationTask+0x1c>

	message_t command_in; // Buffer for recieved messages

	server_communication_init();
    19c2:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <server_communication_init>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
    19c6:	a1 2c       	mov	r10, r1
    19c8:	b1 2c       	mov	r11, r1
    19ca:	c1 2c       	mov	r12, r1
    19cc:	d1 2c       	mov	r13, r1
    19ce:	e1 2c       	mov	r14, r1
    19d0:	f1 2c       	mov	r15, r1
    19d2:	03 e0       	ldi	r16, 0x03	; 3
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	48 ec       	ldi	r20, 0xC8	; 200
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	6b e0       	ldi	r22, 0x0B	; 11
    19de:	76 e0       	ldi	r23, 0x06	; 6
    19e0:	85 e2       	ldi	r24, 0x25	; 37
    19e2:	95 e0       	ldi	r25, 0x05	; 5
    19e4:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <vMainCommunicationTask+0x52>
		vLED_singleHigh(ledRED);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc de       	rcall	.-520    	; 0x17ea <vLED_singleHigh>
	}
	uint8_t success = 0;
	
	while(!success) {
		success = server_connect();
    19f2:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <server_connect>
    19f6:	18 2f       	mov	r17, r24
		vTaskDelay(1000 / portTICK_PERIOD_MS);
    19f8:	88 ee       	ldi	r24, 0xE8	; 232
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	0e 94 53 24 	call	0x48a6	; 0x48a6 <vTaskDelay>
		vLED_toggle(ledGREEN);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	26 df       	rcall	.-436    	; 0x1852 <vLED_toggle>
	if(xTaskCreate(vARQTask, "ARQ", 200, NULL, 3, NULL) != pdPASS) {
		vLED_singleHigh(ledRED);
	}
	uint8_t success = 0;
	
	while(!success) {
    1a06:	11 23       	and	r17, r17
    1a08:	a1 f3       	breq	.-24     	; 0x19f2 <vMainCommunicationTask+0x52>
		success = server_connect();
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		vLED_toggle(ledGREEN);
	}
	
	send_handshake();
    1a0a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <send_handshake>
		
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
			taskENTER_CRITICAL();
			command_in = message_in;
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	fd e5       	ldi	r31, 0x5D	; 93
    1a12:	ef 2e       	mov	r14, r31
    1a14:	fb e1       	ldi	r31, 0x1B	; 27
    1a16:	ff 2e       	mov	r15, r31
    1a18:	f0 2d       	mov	r31, r0
			taskEXIT_CRITICAL();
			xTaskResumeAll ();      // Enable context switching
			switch(command_in.type){
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
					gHandshook = TRUE; // Set start flag true
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
	
	send_handshake();
	
	while(1){
		
		char in_comm_task[] = "In communication task! ";
    1a1c:	88 e1       	ldi	r24, 0x18	; 24
    1a1e:	ef e0       	ldi	r30, 0x0F	; 15
    1a20:	f6 e0       	ldi	r31, 0x06	; 6
    1a22:	de 01       	movw	r26, r28
    1a24:	19 96       	adiw	r26, 0x09	; 9
    1a26:	01 90       	ld	r0, Z+
    1a28:	0d 92       	st	X+, r0
    1a2a:	8a 95       	dec	r24
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <vMainCommunicationTask+0x86>
		USART_putstring_test(in_comm_task);
    1a2e:	ce 01       	movw	r24, r28
    1a30:	09 96       	adiw	r24, 0x09	; 9
    1a32:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <USART_putstring_test>
		
		if (xSemaphoreTake(xCommandReadyBSem, portMAX_DELAY) == pdTRUE){
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	4f ef       	ldi	r20, 0xFF	; 255
    1a3a:	5f ef       	ldi	r21, 0xFF	; 255
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <xCommandReadyBSem>
    1a44:	90 91 5a 1b 	lds	r25, 0x1B5A	; 0x801b5a <xCommandReadyBSem+0x1>
    1a48:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <vMainCommunicationTask+0xb2>
    1a50:	90 c0       	rjmp	.+288    	; 0x1b72 <vMainCommunicationTask+0x1d2>
			// We have a new command from the server, copy it to the memory
			vTaskSuspendAll ();       // Temporarily disable context switching
    1a52:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
			taskENTER_CRITICAL();
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	0f 92       	push	r0
			command_in = message_in;
    1a5c:	f7 01       	movw	r30, r14
    1a5e:	10 81       	ld	r17, Z
    1a60:	a1 80       	ldd	r10, Z+1	; 0x01
    1a62:	b2 80       	ldd	r11, Z+2	; 0x02
    1a64:	c3 80       	ldd	r12, Z+3	; 0x03
    1a66:	d4 80       	ldd	r13, Z+4	; 0x04
			taskEXIT_CRITICAL();
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
			xTaskResumeAll ();      // Enable context switching
    1a6c:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
			switch(command_in.type){
    1a70:	15 30       	cpi	r17, 0x05	; 5
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vMainCommunicationTask+0xd6>
    1a74:	6f c0       	rjmp	.+222    	; 0x1b54 <vMainCommunicationTask+0x1b4>
    1a76:	30 f4       	brcc	.+12     	; 0x1a84 <vMainCommunicationTask+0xe4>
    1a78:	12 30       	cpi	r17, 0x02	; 2
    1a7a:	b1 f0       	breq	.+44     	; 0x1aa8 <vMainCommunicationTask+0x108>
    1a7c:	14 30       	cpi	r17, 0x04	; 4
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <vMainCommunicationTask+0xe2>
    1a80:	4d c0       	rjmp	.+154    	; 0x1b1c <vMainCommunicationTask+0x17c>
    1a82:	77 c0       	rjmp	.+238    	; 0x1b72 <vMainCommunicationTask+0x1d2>
    1a84:	17 30       	cpi	r17, 0x07	; 7
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <vMainCommunicationTask+0xea>
    1a88:	6d c0       	rjmp	.+218    	; 0x1b64 <vMainCommunicationTask+0x1c4>
    1a8a:	18 f0       	brcs	.+6      	; 0x1a92 <vMainCommunicationTask+0xf2>
    1a8c:	18 30       	cpi	r17, 0x08	; 8
    1a8e:	49 f0       	breq	.+18     	; 0x1aa2 <vMainCommunicationTask+0x102>
    1a90:	70 c0       	rjmp	.+224    	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_CONFIRM:
					taskENTER_CRITICAL();
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	0f 92       	push	r0
					gHandshook = TRUE; // Set start flag true
    1a98:	00 93 e8 19 	sts	0x19E8, r16	; 0x8019e8 <gHandshook>
					taskEXIT_CRITICAL();
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
					//char print_handshake[] = "Handshake ";
					//USART_putstring_test(print_handshake);
					break;
    1aa0:	68 c0       	rjmp	.+208    	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_PING:
					send_ping_response();
    1aa2:	0e 94 3f 20 	call	0x407e	; 0x407e <send_ping_response>
					//char print_ping[] = "Ping sent ";
					//USART_putstring_test(print_ping);
					break;
    1aa6:	65 c0       	rjmp	.+202    	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_ORDER:
					vLED_singleHigh(ledRED);
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9e de       	rcall	.-708    	; 0x17ea <vLED_singleHigh>
					Setpoint.x = command_in.message.order.x*10;
    1aae:	b5 01       	movw	r22, r10
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	aa 0c       	add	r10, r10
    1ab6:	bb 1c       	adc	r11, r11
    1ab8:	aa 0c       	add	r10, r10
    1aba:	bb 1c       	adc	r11, r11
    1abc:	aa 0c       	add	r10, r10
    1abe:	bb 1c       	adc	r11, r11
    1ac0:	6a 0d       	add	r22, r10
    1ac2:	7b 1d       	adc	r23, r11
    1ac4:	07 2e       	mov	r0, r23
    1ac6:	00 0c       	add	r0, r0
    1ac8:	88 0b       	sbc	r24, r24
    1aca:	99 0b       	sbc	r25, r25
    1acc:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1ad0:	69 83       	std	Y+1, r22	; 0x01
    1ad2:	7a 83       	std	Y+2, r23	; 0x02
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
					Setpoint.y = command_in.message.order.y*10;
    1ad8:	b6 01       	movw	r22, r12
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	cc 0c       	add	r12, r12
    1ae0:	dd 1c       	adc	r13, r13
    1ae2:	cc 0c       	add	r12, r12
    1ae4:	dd 1c       	adc	r13, r13
    1ae6:	cc 0c       	add	r12, r12
    1ae8:	dd 1c       	adc	r13, r13
    1aea:	6c 0d       	add	r22, r12
    1aec:	7d 1d       	adc	r23, r13
    1aee:	07 2e       	mov	r0, r23
    1af0:	00 0c       	add	r0, r0
    1af2:	88 0b       	sbc	r24, r24
    1af4:	99 0b       	sbc	r25, r25
    1af6:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1afa:	6d 83       	std	Y+5, r22	; 0x05
    1afc:	7e 83       	std	Y+6, r23	; 0x06
    1afe:	8f 83       	std	Y+7, r24	; 0x07
    1b00:	98 87       	std	Y+8, r25	; 0x08
					vFunc_Inf2pi(&Setpoint.heading);
					*/
					
				
					/* Relay new coordinates to position controller */
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	44 e6       	ldi	r20, 0x64	; 100
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	be 01       	movw	r22, r28
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <poseControllerQ>
    1b12:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <poseControllerQ+0x1>
    1b16:	0e 94 03 1a 	call	0x3406	; 0x3406 <xQueueGenericSend>
					break;
    1b1a:	2b c0       	rjmp	.+86     	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_PAUSE:
					// Stop sending update messages
					taskENTER_CRITICAL();
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	0f 92       	push	r0
					gPaused = TRUE;
    1b22:	00 93 e7 19 	sts	0x19E7, r16	; 0x8019e7 <gPaused>
					taskEXIT_CRITICAL();
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
					// Stop controller
					Setpoint.x = 0;
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	1a 82       	std	Y+2, r1	; 0x02
    1b2e:	1b 82       	std	Y+3, r1	; 0x03
    1b30:	1c 82       	std	Y+4, r1	; 0x04
					Setpoint.y = 0;
    1b32:	1d 82       	std	Y+5, r1	; 0x05
    1b34:	1e 82       	std	Y+6, r1	; 0x06
    1b36:	1f 82       	std	Y+7, r1	; 0x07
    1b38:	18 86       	std	Y+8, r1	; 0x08
					/*
					Setpoint.distance = 0;
					Setpoint.heading = 0;
					*/
					xQueueSend(poseControllerQ, &Setpoint, 100);
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	44 e6       	ldi	r20, 0x64	; 100
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	be 01       	movw	r22, r28
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <poseControllerQ>
    1b4a:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <poseControllerQ+0x1>
    1b4e:	0e 94 03 1a 	call	0x3406	; 0x3406 <xQueueGenericSend>
					break;
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_UNPAUSE:
					taskENTER_CRITICAL();
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	0f 92       	push	r0
					gPaused = FALSE;
    1b5a:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <gPaused>
					taskEXIT_CRITICAL();
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
					break;
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <vMainCommunicationTask+0x1d2>
				case TYPE_FINISH:
					taskENTER_CRITICAL();
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	0f 92       	push	r0
					gHandshook = FALSE;
    1b6a:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <gHandshook>
					taskEXIT_CRITICAL();
    1b6e:	0f 90       	pop	r0
					break;
			}
			// Command is processed
		}
		vLED_singleLow(ledRED); // if (xCommandReady) end
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	53 de       	rcall	.-858    	; 0x181e <vLED_singleLow>
	}// While(1) end
    1b78:	51 cf       	rjmp	.-350    	; 0x1a1c <vMainCommunicationTask+0x7c>

00001b7a <vMainMovementTask>:
    } // While(1) end
}

/* Handles request from position controller and sets motor pins. */
/* Frequency set by PERIOD_MOTOR_MS in defines.h */
void vMainMovementTask( void *pvParameters ){
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	1f 92       	push	r1
    1b80:	1f 92       	push	r1
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    
    
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    1b86:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <xTaskGetTickCount>
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    const TickType_t xDelay = PERIOD_MOTOR_MS;
    
    while(1){
		
		
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    1b8e:	64 e1       	ldi	r22, 0x14	; 20
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	0e 94 b0 22 	call	0x4560	; 0x4560 <vTaskDelayUntil>
    1b9a:	f9 cf       	rjmp	.-14     	; 0x1b8e <vMainMovementTask+0x14>

00001b9c <vMainSensorTowerTask>:
		vLED_singleLow(ledRED); // if (xCommandReady) end
	}// While(1) end
}// vMainComtask end

/*  Sensor tower task */
void vMainSensorTowerTask( void *pvParameters){
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	6f 97       	sbiw	r28, 0x1f	; 31
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    uint8_t robotMovement = moveStop;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
    
    uint8_t idleCounter = 0;
    1bb2:	f1 2c       	mov	r15, r1
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    uint8_t servoResolution = 1;
    1bb4:	33 24       	eor	r3, r3
    1bb6:	33 94       	inc	r3
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    uint8_t servoStep = 0;
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
        
    float thetahat = 0;
    int16_t xhat = 0;
    int16_t yhat = 0;
    
    uint8_t rotationDirection = moveCounterClockwise;
    1bba:	68 94       	set
    1bbc:	dd 24       	eor	r13, r13
    1bbe:	d2 f8       	bld	r13, 2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1bc0:	68 94       	set
    1bc2:	22 24       	eor	r2, r2
    1bc4:	22 f8       	bld	r2, 2
    // Initialize the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    
    while(1){
        // Loop
		char in_sensor_task[] = "sensor task! ";
    1bc6:	8e e0       	ldi	r24, 0x0E	; 14
    1bc8:	e7 e2       	ldi	r30, 0x27	; 39
    1bca:	f6 e0       	ldi	r31, 0x06	; 6
    1bcc:	de 01       	movw	r26, r28
    1bce:	14 96       	adiw	r26, 0x04	; 4
    1bd0:	01 90       	ld	r0, Z+
    1bd2:	0d 92       	st	X+, r0
    1bd4:	8a 95       	dec	r24
    1bd6:	e1 f7       	brne	.-8      	; 0x1bd0 <vMainSensorTowerTask+0x34>
		USART_putstring_test(in_sensor_task);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	04 96       	adiw	r24, 0x04	; 4
    1bdc:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <USART_putstring_test>
        if ((gHandshook == TRUE) && (gPaused == FALSE)){
    1be0:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <gHandshook>
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	09 f0       	breq	.+2      	; 0x1bea <vMainSensorTowerTask+0x4e>
    1be8:	08 c1       	rjmp	.+528    	; 0x1dfa <vMainSensorTowerTask+0x25e>
    1bea:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <gPaused>
    1bee:	81 11       	cpse	r24, r1
    1bf0:	04 c1       	rjmp	.+520    	; 0x1dfa <vMainSensorTowerTask+0x25e>
            // xLastWakeTime variable with the current time.
            xLastWakeTime = xTaskGetTickCount();
    1bf2:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <xTaskGetTickCount>
    1bf6:	9b 83       	std	Y+3, r25	; 0x03
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
            // Set scanning resolution depending on which movement the robot is executing.
            if (xQueueReceive(scanStatusQ, &robotMovement,150 / portTICK_PERIOD_MS) == pdTRUE){
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	46 e9       	ldi	r20, 0x96	; 150
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	be 01       	movw	r22, r28
    1c02:	6f 5f       	subi	r22, 0xFF	; 255
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <scanStatusQ>
    1c0a:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <scanStatusQ+0x1>
    1c0e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	d9 f4       	brne	.+54     	; 0x1c4c <vMainSensorTowerTask+0xb0>
                // Set servo step length according to movement, 
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	88 23       	and	r24, r24
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <vMainSensorTowerTask+0x86>
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	a8 f4       	brcc	.+42     	; 0x1c4a <vMainSensorTowerTask+0xae>
    1c20:	08 c0       	rjmp	.+16     	; 0x1c32 <vMainSensorTowerTask+0x96>
                {
                    case moveStop:
                        servoStep *= servoResolution;
    1c22:	13 9d       	mul	r17, r3
    1c24:	10 2d       	mov	r17, r0
    1c26:	11 24       	eor	r1, r1
                        servoResolution = 1;
                        idleCounter = 1;
    1c28:	ff 24       	eor	r15, r15
    1c2a:	f3 94       	inc	r15
                // Note that the iterations are skipped while robot is rotating (see further downbelow)
                switch (robotMovement)
                {
                    case moveStop:
                        servoStep *= servoResolution;
                        servoResolution = 1;
    1c2c:	33 24       	eor	r3, r3
    1c2e:	33 94       	inc	r3
                        idleCounter = 1;
						break;
    1c30:	0d c0       	rjmp	.+26     	; 0x1c4c <vMainSensorTowerTask+0xb0>
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
                        servoStep /= servoResolution;
    1c32:	8d ec       	ldi	r24, 0xCD	; 205
    1c34:	18 9f       	mul	r17, r24
    1c36:	11 2d       	mov	r17, r1
    1c38:	11 24       	eor	r1, r1
    1c3a:	16 95       	lsr	r17
    1c3c:	16 95       	lsr	r17
                        idleCounter = 0;
    1c3e:	f1 2c       	mov	r15, r1
                        servoResolution = 1;
                        idleCounter = 1;
						break;
                    case moveForward:
                    case moveBackward:
                        servoResolution = 5;
    1c40:	0f 2e       	mov	r0, r31
    1c42:	f5 e0       	ldi	r31, 0x05	; 5
    1c44:	3f 2e       	mov	r3, r31
    1c46:	f0 2d       	mov	r31, r0
                        servoStep /= servoResolution;
                        idleCounter = 0;
						break;
    1c48:	01 c0       	rjmp	.+2      	; 0x1c4c <vMainSensorTowerTask+0xb0>
                    case moveClockwise:
                    case moveCounterClockwise:
                        // Iterations are frozen while rotating, see further down
                        idleCounter = 0;
    1c4a:	f1 2c       	mov	r15, r1
                    default:
                        idleCounter = 0;
						break;
                }
            }
            vServo_setAngle(servoStep*servoResolution);
    1c4c:	13 9d       	mul	r17, r3
    1c4e:	80 2d       	mov	r24, r0
    1c50:	11 24       	eor	r1, r1
    1c52:	0e 94 63 20 	call	0x40c6	; 0x40c6 <vServo_setAngle>
            vTaskDelayUntil(&xLastWakeTime, 200 / portTICK_PERIOD_MS); // Wait total of 200 ms for servo to reach set point					ENDRET FRA 200 TIL 100 FOR TEST!!!!
    1c56:	68 ec       	ldi	r22, 0xC8	; 200
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	02 96       	adiw	r24, 0x02	; 2
    1c5e:	0e 94 b0 22 	call	0x4560	; 0x4560 <vTaskDelayUntil>
            
            uint8_t forwardSensor = ui8DistSens_readCM(distSensFwd);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	82 d9       	rcall	.-3324   	; 0xf6a <ui8DistSens_readCM>
    1c66:	8e 8f       	std	Y+30, r24	; 0x1e
            uint8_t leftSensor = ui8DistSens_readCM(distSensLeft);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	7f d9       	rcall	.-3330   	; 0xf6a <ui8DistSens_readCM>
    1c6c:	e8 2e       	mov	r14, r24
            uint8_t rearSensor = ui8DistSens_readCM(distSensRear);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	7c d9       	rcall	.-3336   	; 0xf6a <ui8DistSens_readCM>
    1c72:	c8 2e       	mov	r12, r24
            uint8_t rightSensor = ui8DistSens_readCM(distSensRight);
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	79 d9       	rcall	.-3342   	; 0xf6a <ui8DistSens_readCM>
    1c78:	8f 8f       	std	Y+31, r24	; 0x1f
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
            
            xSemaphoreTake(xPoseMutex,40 / portTICK_PERIOD_MS);
    1c7c:	48 e2       	ldi	r20, 0x28	; 40
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    1c88:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    1c8c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
    1c90:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <gTheta_hat>
                thetahat = gTheta_hat;
    1c94:	90 91 e4 19 	lds	r25, 0x19E4	; 0x8019e4 <gTheta_hat+0x1>
    1c98:	a0 91 e5 19 	lds	r26, 0x19E5	; 0x8019e5 <gTheta_hat+0x2>
    1c9c:	b0 91 e6 19 	lds	r27, 0x19E6	; 0x8019e6 <gTheta_hat+0x3>
    1ca0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ca2:	9b 8f       	std	Y+27, r25	; 0x1b
    1ca4:	ac 8f       	std	Y+28, r26	; 0x1c
    1ca6:	bd 8f       	std	Y+29, r27	; 0x1d
    1ca8:	a0 90 e1 19 	lds	r10, 0x19E1	; 0x8019e1 <gX_hat>
                xhat = gX_hat;
    1cac:	b0 90 e2 19 	lds	r11, 0x19E2	; 0x8019e2 <gX_hat+0x1>
    1cb0:	60 90 df 19 	lds	r6, 0x19DF	; 0x8019df <gY_hat>
                yhat = gY_hat;
    1cb4:	70 90 e0 19 	lds	r7, 0x19E0	; 0x8019e0 <gY_hat+0x1>
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
            xSemaphoreGive(xPoseMutex);
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    1cc0:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    1cc4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
    1cc8:	9a e0       	ldi	r25, 0x0A	; 10
            
            // Experimental
            if ((idleCounter > 10) && (robotMovement == moveStop)){
    1cca:	9f 15       	cp	r25, r15
    1ccc:	40 f4       	brcc	.+16     	; 0x1cde <vMainSensorTowerTask+0x142>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	05 c0       	rjmp	.+10     	; 0x1cde <vMainSensorTowerTask+0x142>
    1cd4:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <send_idle>
                // If the robot stands idle for 1 second, send 'status:idle' in case the server missed it.
                send_idle();
    1cd8:	ff 24       	eor	r15, r15
                idleCounter = 1;
    1cda:	f3 94       	inc	r15
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vMainSensorTowerTask+0x14e>
    1cde:	ff 20       	and	r15, r15
            }
            else if ((idleCounter >= 1) && (robotMovement == moveStop)){
    1ce0:	21 f0       	breq	.+8      	; 0x1cea <vMainSensorTowerTask+0x14e>
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	01 c0       	rjmp	.+2      	; 0x1cea <vMainSensorTowerTask+0x14e>
    1ce8:	f3 94       	inc	r15
                idleCounter++;
    1cea:	43 2c       	mov	r4, r3
            }             

            // Send updates to server
			
			//[Commented out to decrease messages, ]
            send_update(xhat/10,yhat/10,thetahat*RAD2DEG,servoStep*servoResolution,forwardSensor,leftSensor,rearSensor,rightSensor);
    1cec:	51 2c       	mov	r5, r1
    1cee:	14 9d       	mul	r17, r4
    1cf0:	40 01       	movw	r8, r0
    1cf2:	15 9d       	mul	r17, r5
    1cf4:	90 0c       	add	r9, r0
    1cf6:	11 24       	eor	r1, r1
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	44 e3       	ldi	r20, 0x34	; 52
    1cfe:	53 e4       	ldi	r21, 0x43	; 67
    1d00:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d02:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d08:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    1d0c:	2b ed       	ldi	r18, 0xDB	; 219
    1d0e:	3f e0       	ldi	r19, 0x0F	; 15
    1d10:	49 e4       	ldi	r20, 0x49	; 73
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    1d18:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    1d1c:	6a 8f       	std	Y+26, r22	; 0x1a
    1d1e:	7b 8f       	std	Y+27, r23	; 0x1b
    1d20:	8c 8f       	std	Y+28, r24	; 0x1c
    1d22:	9d 8f       	std	Y+29, r25	; 0x1d
    1d24:	c3 01       	movw	r24, r6
    1d26:	6a e0       	ldi	r22, 0x0A	; 10
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <__divmodhi4>
    1d2e:	fb 01       	movw	r30, r22
    1d30:	c5 01       	movw	r24, r10
    1d32:	6a e0       	ldi	r22, 0x0A	; 10
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <__divmodhi4>
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	af 8c       	ldd	r10, Y+31	; 0x1f
    1d3e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1d40:	94 01       	movw	r18, r8
    1d42:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1d44:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1d46:	bf 01       	movw	r22, r30
    1d48:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <send_update>
    1d4c:	af e1       	ldi	r26, 0x1F	; 31
            
            
            // Low level anti collision
            uint8_t objectX;
            if ((servoStep*servoResolution) <= 30) objectX = forwardSensor;// * cos(servoStep*5);
    1d4e:	8a 16       	cp	r8, r26
    1d50:	91 04       	cpc	r9, r1
    1d52:	34 f0       	brlt	.+12     	; 0x1d60 <vMainSensorTowerTask+0x1c4>
    1d54:	bc e3       	ldi	r27, 0x3C	; 60
            else if((servoStep*servoResolution) >= 60) objectX = rightSensor;// * cos(270 + servoStep*5);
    1d56:	8b 16       	cp	r8, r27
    1d58:	91 04       	cpc	r9, r1
    1d5a:	e4 f0       	brlt	.+56     	; 0x1d94 <vMainSensorTowerTask+0x1f8>
    1d5c:	af 8c       	ldd	r10, Y+31	; 0x1f
    1d5e:	ae 8e       	std	Y+30, r10	; 0x1e
    1d60:	8e 8d       	ldd	r24, Y+30	; 0x1e
            else objectX = 0;
            

			
            if ((objectX > 0) && (objectX < 20)){
    1d62:	81 50       	subi	r24, 0x01	; 1
    1d64:	83 31       	cpi	r24, 0x13	; 19
    1d66:	b0 f4       	brcc	.+44     	; 0x1d94 <vMainSensorTowerTask+0x1f8>
    1d68:	1a 8a       	std	Y+18, r1	; 0x12
                // Stop controller
                struct sPoint Setpoint = {0, 0};
    1d6a:	1b 8a       	std	Y+19, r1	; 0x13
    1d6c:	1c 8a       	std	Y+20, r1	; 0x14
    1d6e:	1d 8a       	std	Y+21, r1	; 0x15
    1d70:	1e 8a       	std	Y+22, r1	; 0x16
    1d72:	1f 8a       	std	Y+23, r1	; 0x17
    1d74:	18 8e       	std	Y+24, r1	; 0x18
    1d76:	19 8e       	std	Y+25, r1	; 0x19
    1d78:	20 e0       	ldi	r18, 0x00	; 0
                xQueueSend(poseControllerQ, &Setpoint, 100);
    1d7a:	44 e6       	ldi	r20, 0x64	; 100
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	be 01       	movw	r22, r28
    1d80:	6e 5e       	subi	r22, 0xEE	; 238
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <poseControllerQ>
    1d88:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <poseControllerQ+0x1>
    1d8c:	0e 94 03 1a 	call	0x3406	; 0x3406 <xQueueGenericSend>
    1d90:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <send_idle>
				send_idle();
    1d94:	8b e5       	ldi	r24, 0x5B	; 91
				
            }
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
    1d96:	88 16       	cp	r8, r24
    1d98:	91 04       	cpc	r9, r1
    1d9a:	94 f4       	brge	.+36     	; 0x1dc0 <vMainSensorTowerTask+0x224>
    1d9c:	94 e0       	ldi	r25, 0x04	; 4
    1d9e:	d9 12       	cpse	r13, r25
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <vMainSensorTowerTask+0x224>
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <vMainSensorTowerTask+0x20e>
    1da8:	4d c0       	rjmp	.+154    	; 0x1e44 <vMainSensorTowerTask+0x2a8>
    1daa:	1f 5f       	subi	r17, 0xFF	; 255
                servoStep++;
    1dac:	14 9d       	mul	r17, r4
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1dae:	40 01       	movw	r8, r0
    1db0:	15 9d       	mul	r17, r5
    1db2:	90 0c       	add	r9, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	aa e5       	ldi	r26, 0x5A	; 90
    1db8:	8a 16       	cp	r8, r26
    1dba:	91 04       	cpc	r9, r1
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <vMainSensorTowerTask+0x274>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <vMainSensorTowerTask+0x24c>
    1dc0:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1dc2:	19 04       	cpc	r1, r9
    1dc4:	a4 f5       	brge	.+104    	; 0x1e2e <vMainSensorTowerTask+0x292>
    1dc6:	b3 e0       	ldi	r27, 0x03	; 3
    1dc8:	db 12       	cpse	r13, r27
    1dca:	36 c0       	rjmp	.+108    	; 0x1e38 <vMainSensorTowerTask+0x29c>
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	08 f0       	brcs	.+2      	; 0x1dd4 <vMainSensorTowerTask+0x238>
    1dd2:	f9 ce       	rjmp	.-526    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1dd4:	11 50       	subi	r17, 0x01	; 1
                servoStep --;
    1dd6:	14 9d       	mul	r17, r4
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1dd8:	40 01       	movw	r8, r0
    1dda:	15 9d       	mul	r17, r5
    1ddc:	90 0c       	add	r9, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	03 c0       	rjmp	.+6      	; 0x1de8 <vMainSensorTowerTask+0x24c>
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	d8 16       	cp	r13, r24
    1de6:	c9 f0       	breq	.+50     	; 0x1e1a <vMainSensorTowerTask+0x27e>
    1de8:	18 14       	cp	r1, r8
                rotationDirection = moveClockwise;
            }
            else if ((servoStep*servoResolution <= 0) && (rotationDirection == moveClockwise)){
    1dea:	19 04       	cpc	r1, r9
    1dec:	0c f4       	brge	.+2      	; 0x1df0 <vMainSensorTowerTask+0x254>
    1dee:	eb ce       	rjmp	.-554    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	d9 12       	cpse	r13, r25
    1df4:	e8 ce       	rjmp	.-560    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1df6:	d2 2c       	mov	r13, r2
                rotationDirection = moveCounterClockwise;
    1df8:	e6 ce       	rjmp	.-564    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
            }    
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
    1dfc:	0e 94 63 20 	call	0x40c6	; 0x40c6 <vServo_setAngle>
    1e00:	84 e6       	ldi	r24, 0x64	; 100
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
            vTaskDelay(100/portTICK_PERIOD_MS);
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 53 24 	call	0x48a6	; 0x48a6 <vTaskDelay>
    1e08:	f1 2c       	mov	r15, r1
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
            idleCounter = 0;
    1e0a:	10 e0       	ldi	r17, 0x00	; 0
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
            servoStep = 0;
    1e0c:	d2 2c       	mov	r13, r2
        }
		
        else{ // Disconnected or unconfirmed
            vServo_setAngle(0);
            // Reset servo incrementation
            rotationDirection = moveCounterClockwise;
    1e0e:	db ce       	rjmp	.-586    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1e10:	0f 2e       	mov	r0, r31
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
                rotationDirection = moveClockwise;
    1e12:	f3 e0       	ldi	r31, 0x03	; 3
    1e14:	df 2e       	mov	r13, r31
    1e16:	f0 2d       	mov	r31, r0
    1e18:	d6 ce       	rjmp	.-596    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1e1a:	0f 2e       	mov	r0, r31
    1e1c:	f3 e0       	ldi	r31, 0x03	; 3
    1e1e:	df 2e       	mov	r13, r31
    1e20:	f0 2d       	mov	r31, r0
    1e22:	d1 ce       	rjmp	.-606    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1e24:	0f 2e       	mov	r0, r31
    1e26:	f3 e0       	ldi	r31, 0x03	; 3
    1e28:	df 2e       	mov	r13, r31
    1e2a:	f0 2d       	mov	r31, r0
    1e2c:	cc ce       	rjmp	.-616    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1e2e:	aa e5       	ldi	r26, 0x5A	; 90
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e30:	8a 16       	cp	r8, r26
    1e32:	91 04       	cpc	r9, r1
    1e34:	ec f2       	brlt	.-70     	; 0x1df0 <vMainSensorTowerTask+0x254>
    1e36:	0a c0       	rjmp	.+20     	; 0x1e4c <vMainSensorTowerTask+0x2b0>
    1e38:	ba e5       	ldi	r27, 0x5A	; 90
    1e3a:	8b 16       	cp	r8, r27
    1e3c:	91 04       	cpc	r9, r1
    1e3e:	0c f4       	brge	.+2      	; 0x1e42 <vMainSensorTowerTask+0x2a6>
    1e40:	c2 ce       	rjmp	.-636    	; 0x1bc6 <vMainSensorTowerTask+0x2a>
    1e42:	cf cf       	rjmp	.-98     	; 0x1de2 <vMainSensorTowerTask+0x246>
    1e44:	18 14       	cp	r1, r8
            
            // Iterate in a increasing/decreasing manner and depending on the robots movement
            if ((servoStep*servoResolution <= 90) && (rotationDirection == moveCounterClockwise) && (robotMovement < moveClockwise)){
                servoStep++;
            }
            else if ((servoStep*servoResolution > 0) && (rotationDirection == moveClockwise) && (robotMovement < moveClockwise)){
    1e46:	19 04       	cpc	r1, r9
    1e48:	bc f3       	brlt	.-18     	; 0x1e38 <vMainSensorTowerTask+0x29c>
    1e4a:	f1 cf       	rjmp	.-30     	; 0x1e2e <vMainSensorTowerTask+0x292>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
                servoStep --;
            }
            
            if ((servoStep*servoResolution >= 90) && (rotationDirection == moveCounterClockwise)){
    1e4e:	d8 16       	cp	r13, r24
    1e50:	49 f3       	breq	.-46     	; 0x1e24 <vMainSensorTowerTask+0x288>
    1e52:	ce cf       	rjmp	.-100    	; 0x1df0 <vMainSensorTowerTask+0x254>

00001e54 <vMainPoseControllerTask>:
    1e54:	cf 93       	push	r28
        }
    }// While end
}

/*  Calculates new settings for the movement task */
void vMainPoseControllerTask( void *pvParameters ){
    1e56:	df 93       	push	r29
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	a3 97       	sbiw	r28, 0x23	; 35
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
        printf("PoseController OK\n");
        uint8_t tellar = 0;
    #endif
	
    /* Task init */    
    struct sPoint Setpoint = {0}; // Updates from server
    1e68:	fe 01       	movw	r30, r28
    1e6a:	31 96       	adiw	r30, 0x01	; 1
    1e6c:	88 e0       	ldi	r24, 0x08	; 8
    1e6e:	df 01       	movw	r26, r30
    1e70:	1d 92       	st	X+, r1
    1e72:	8a 95       	dec	r24
    1e74:	e9 f7       	brne	.-6      	; 0x1e70 <vMainPoseControllerTask+0x1c>
    //struct sCartesian Error = {0}; // Error values
    struct sPoint oldVal = {0};
    struct sPoint referenceModel = {0};
	float radiusEpsilon = 5; //[mm]The acceptable radius from goal for completion
	uint8_t lastMovement = 0;
    1e76:	19 86       	std	Y+9, r1	; 0x09
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
	
	
	int16_t leftWheelTicks = 0;
    1e78:	1b 86       	std	Y+11, r1	; 0x0b
    1e7a:	1a 86       	std	Y+10, r1	; 0x0a
	int16_t rightWheelTicks = 0;
    1e7c:	1d 86       	std	Y+13, r1	; 0x0d
    1e7e:	1c 86       	std	Y+12, r1	; 0x0c
	
	uint8_t leftEncoderVal = 0;
	uint8_t rightEncoderVal = 0;
	
	uint8_t gLeftWheelDirection = 0;
    1e80:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t gRightWheelDirection = 0;
    1e82:	1f 86       	std	Y+15, r1	; 0x0f
	
	uint8_t idleSendt = FALSE;
    1e84:	00 e0       	ldi	r16, 0x00	; 0
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
	
	uint8_t doneTurning = TRUE;
    1e86:	22 24       	eor	r2, r2
    1e88:	23 94       	inc	r2
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
	float rightIntError = 0;
    1e8a:	18 a2       	std	Y+32, r1	; 0x20
    1e8c:	19 a2       	std	Y+33, r1	; 0x21
    1e8e:	1a a2       	std	Y+34, r1	; 0x22
    1e90:	1b a2       	std	Y+35, r1	; 0x23
	float xTargt = 0;
	float yTargt = 0;
	
	float prevLeftActuation = 0;
	float prevRightActtion = 0;
	float leftIntError = 0;
    1e92:	1c 8e       	std	Y+28, r1	; 0x1c
    1e94:	1d 8e       	std	Y+29, r1	; 0x1d
    1e96:	1e 8e       	std	Y+30, r1	; 0x1e
    1e98:	1f 8e       	std	Y+31, r1	; 0x1f
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gLeftWheelDirection = motorLeftForward;
    1e9a:	68 94       	set
    1e9c:	33 24       	eor	r3, r3
    1e9e:	32 f8       	bld	r3, 2
	
	uint8_t idleSendt = FALSE;
	     
	while(1){
		// Checking if server is ready
		if (gHandshook){
    1ea0:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <gHandshook>
    1ea4:	88 23       	and	r24, r24
    1ea6:	e1 f3       	breq	.-8      	; 0x1ea0 <vMainPoseControllerTask+0x4c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ea8:	f8 94       	cli
			
			
			
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				leftEncoderVal = gISR_leftWheelTicks;
    1eaa:	40 91 e9 19 	lds	r20, 0x19E9	; 0x8019e9 <gISR_leftWheelTicks>
				gISR_leftWheelTicks = 0;
    1eae:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <gISR_leftWheelTicks>
				rightEncoderVal = gISR_rightWheelTicks;
    1eb2:	10 91 ea 19 	lds	r17, 0x19EA	; 0x8019ea <gISR_rightWheelTicks>
				gISR_rightWheelTicks = 0;
    1eb6:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <gISR_rightWheelTicks>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1eba:	78 94       	sei
			
			
			
			
			
			vMotorEncoderLeftTickFromISR(gLeftWheelDirection, &leftWheelTicks, leftEncoderVal);
    1ebc:	be 01       	movw	r22, r28
    1ebe:	66 5f       	subi	r22, 0xF6	; 246
    1ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec4:	30 d6       	rcall	.+3168   	; 0x2b26 <vMotorEncoderLeftTickFromISR>
			vMotorEncoderRightTickFromISR(gRightWheelDirection, &rightWheelTicks, rightEncoderVal);
    1ec6:	41 2f       	mov	r20, r17
    1ec8:	be 01       	movw	r22, r28
    1eca:	64 5f       	subi	r22, 0xF4	; 244
    1ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed0:	41 d6       	rcall	.+3202   	; 0x2b54 <vMotorEncoderRightTickFromISR>
			
			xSemaphoreTake(xTickMutex,1 / portTICK_PERIOD_MS);
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	80 91 55 1b 	lds	r24, 0x1B55	; 0x801b55 <xTickMutex>
    1ee0:	90 91 56 1b 	lds	r25, 0x1B56	; 0x801b56 <xTickMutex+0x1>
    1ee4:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
			gLeftWheelTicks = leftWheelTicks;
    1ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eec:	90 93 dc 19 	sts	0x19DC, r25	; 0x8019dc <gLeftWheelTicks+0x1>
    1ef0:	80 93 db 19 	sts	0x19DB, r24	; 0x8019db <gLeftWheelTicks>
			gRightWheelTicks = rightWheelTicks;
    1ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ef6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ef8:	90 93 de 19 	sts	0x19DE, r25	; 0x8019de <gRightWheelTicks+0x1>
    1efc:	80 93 dd 19 	sts	0x19DD, r24	; 0x8019dd <gRightWheelTicks>
			xSemaphoreGive(xTickMutex);
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	80 91 55 1b 	lds	r24, 0x1B55	; 0x801b55 <xTickMutex>
    1f08:	90 91 56 1b 	lds	r25, 0x1B56	; 0x801b56 <xTickMutex+0x1>
    1f0c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
			
			
			
			
			
			if (xSemaphoreTake(xControllerBSem, portMAX_DELAY) == pdTRUE){    // Wait for synchronization from estimator
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	4f ef       	ldi	r20, 0xFF	; 255
    1f14:	5f ef       	ldi	r21, 0xFF	; 255
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	80 91 53 1b 	lds	r24, 0x1B53	; 0x801b53 <xControllerBSem>
    1f1e:	90 91 54 1b 	lds	r25, 0x1B54	; 0x801b54 <xControllerBSem+0x1>
    1f22:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <vMainPoseControllerTask+0xd8>
    1f2a:	ba cf       	rjmp	.-140    	; 0x1ea0 <vMainPoseControllerTask+0x4c>
				// Get robot pose
				xSemaphoreTake(xPoseMutex,portMAX_DELAY);
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	4f ef       	ldi	r20, 0xFF	; 255
    1f30:	5f ef       	ldi	r21, 0xFF	; 255
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    1f3a:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    1f3e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
					thetahat = gTheta_hat;
    1f42:	40 90 e3 19 	lds	r4, 0x19E3	; 0x8019e3 <gTheta_hat>
    1f46:	50 90 e4 19 	lds	r5, 0x19E4	; 0x8019e4 <gTheta_hat+0x1>
    1f4a:	60 90 e5 19 	lds	r6, 0x19E5	; 0x8019e5 <gTheta_hat+0x2>
    1f4e:	70 90 e6 19 	lds	r7, 0x19E6	; 0x8019e6 <gTheta_hat+0x3>
					xhat = gX_hat;
    1f52:	c0 90 e1 19 	lds	r12, 0x19E1	; 0x8019e1 <gX_hat>
    1f56:	d0 90 e2 19 	lds	r13, 0x19E2	; 0x8019e2 <gX_hat+0x1>
					yhat = gY_hat;
    1f5a:	e0 90 df 19 	lds	r14, 0x19DF	; 0x8019df <gY_hat>
    1f5e:	f0 90 e0 19 	lds	r15, 0x19E0	; 0x8019e0 <gY_hat+0x1>
				xSemaphoreGive(xPoseMutex);
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    1f6a:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    1f6e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
				
				// Check if a new update is received
				if (xQueueReceive(poseControllerQ, &Setpoint, 0) == pdTRUE){
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	be 01       	movw	r22, r28
    1f7a:	6f 5f       	subi	r22, 0xFF	; 255
    1f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7e:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <poseControllerQ>
    1f82:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <poseControllerQ+0x1>
    1f86:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	c9 f4       	brne	.+50     	; 0x1fc0 <vMainPoseControllerTask+0x16c>
					xQueueReceive(poseControllerQ, &Setpoint, 20 / portTICK_PERIOD_MS); // Receive theta and radius set points from com task, wait for 20ms if necessary
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	44 e1       	ldi	r20, 0x14	; 20
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	be 01       	movw	r22, r28
    1f96:	6f 5f       	subi	r22, 0xFF	; 255
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <poseControllerQ>
    1f9e:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <poseControllerQ+0x1>
    1fa2:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
					xTargt = Setpoint.x;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	ab 81       	ldd	r26, Y+3	; 0x03
    1fac:	bc 81       	ldd	r27, Y+4	; 0x04
    1fae:	8c 8b       	std	Y+20, r24	; 0x14
    1fb0:	9d 8b       	std	Y+21, r25	; 0x15
    1fb2:	ae 8b       	std	Y+22, r26	; 0x16
    1fb4:	bf 8b       	std	Y+23, r27	; 0x17
					yTargt = Setpoint.y;
    1fb6:	8d 80       	ldd	r8, Y+5	; 0x05
    1fb8:	9e 80       	ldd	r9, Y+6	; 0x06
    1fba:	af 80       	ldd	r10, Y+7	; 0x07
    1fbc:	b8 84       	ldd	r11, Y+8	; 0x08
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <vMainPoseControllerTask+0x194>
				} else {
					xTargt = xhat;
    1fc0:	b6 01       	movw	r22, r12
    1fc2:	0d 2c       	mov	r0, r13
    1fc4:	00 0c       	add	r0, r0
    1fc6:	88 0b       	sbc	r24, r24
    1fc8:	99 0b       	sbc	r25, r25
    1fca:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1fce:	6c 8b       	std	Y+20, r22	; 0x14
    1fd0:	7d 8b       	std	Y+21, r23	; 0x15
    1fd2:	8e 8b       	std	Y+22, r24	; 0x16
    1fd4:	9f 8b       	std	Y+23, r25	; 0x17
					yTargt = yhat;
    1fd6:	b7 01       	movw	r22, r14
    1fd8:	0f 2c       	mov	r0, r15
    1fda:	00 0c       	add	r0, r0
    1fdc:	88 0b       	sbc	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1fe4:	4b 01       	movw	r8, r22
    1fe6:	5c 01       	movw	r10, r24
				}
				
				distance = (float)sqrt((xTargt-xhat)*(xTargt-xhat) + (yTargt-yhat)*(yTargt-yhat));
    1fe8:	b6 01       	movw	r22, r12
    1fea:	dd 0c       	add	r13, r13
    1fec:	88 0b       	sbc	r24, r24
    1fee:	99 0b       	sbc	r25, r25
    1ff0:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	6c 89       	ldd	r22, Y+20	; 0x14
    1ffa:	7d 89       	ldd	r23, Y+21	; 0x15
    1ffc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ffe:	9f 89       	ldd	r25, Y+23	; 0x17
    2000:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2004:	6c 8b       	std	Y+20, r22	; 0x14
    2006:	7d 8b       	std	Y+21, r23	; 0x15
    2008:	8e 8b       	std	Y+22, r24	; 0x16
    200a:	9f 8b       	std	Y+23, r25	; 0x17
    200c:	b7 01       	movw	r22, r14
    200e:	ff 0c       	add	r15, r15
    2010:	88 0b       	sbc	r24, r24
    2012:	99 0b       	sbc	r25, r25
    2014:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
    201c:	c5 01       	movw	r24, r10
    201e:	b4 01       	movw	r22, r8
    2020:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2024:	6b 01       	movw	r12, r22
    2026:	7c 01       	movw	r14, r24
    2028:	2c 89       	ldd	r18, Y+20	; 0x14
    202a:	3d 89       	ldd	r19, Y+21	; 0x15
    202c:	4e 89       	ldd	r20, Y+22	; 0x16
    202e:	5f 89       	ldd	r21, Y+23	; 0x17
    2030:	ca 01       	movw	r24, r20
    2032:	b9 01       	movw	r22, r18
    2034:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2038:	4b 01       	movw	r8, r22
    203a:	5c 01       	movw	r10, r24
    203c:	a7 01       	movw	r20, r14
    203e:	96 01       	movw	r18, r12
    2040:	c7 01       	movw	r24, r14
    2042:	b6 01       	movw	r22, r12
    2044:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2048:	68 8f       	std	Y+24, r22	; 0x18
    204a:	79 8f       	std	Y+25, r23	; 0x19
    204c:	8a 8f       	std	Y+26, r24	; 0x1a
    204e:	9b 8f       	std	Y+27, r25	; 0x1b
    2050:	28 8d       	ldd	r18, Y+24	; 0x18
    2052:	39 8d       	ldd	r19, Y+25	; 0x19
    2054:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2056:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2058:	c5 01       	movw	r24, r10
    205a:	b4 01       	movw	r22, r8
    205c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2060:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <sqrt>
    2064:	4b 01       	movw	r8, r22
    2066:	5c 01       	movw	r10, r24
				
				//Simple speed controller as the robot nears the target
				if (distance < speedDecreaseThreshold){
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	46 e9       	ldi	r20, 0x96	; 150
    206e:	53 e4       	ldi	r21, 0x43	; 67
    2070:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__cmpsf2>
    2074:	88 23       	and	r24, r24
    2076:	c4 f4       	brge	.+48     	; 0x20a8 <vMainPoseControllerTask+0x254>
					currentDriveActuation = (maxDriveActuation - 0.32*maxDriveActuation)*distance/speedDecreaseThreshold + 0.32*maxDriveActuation; //Reverse proportional + a constant so it reaches. 
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4c e4       	ldi	r20, 0x4C	; 76
    207e:	52 e4       	ldi	r21, 0x42	; 66
    2080:	c5 01       	movw	r24, r10
    2082:	b4 01       	movw	r22, r8
    2084:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	46 e9       	ldi	r20, 0x96	; 150
    208e:	53 e4       	ldi	r21, 0x43	; 67
    2090:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 ec       	ldi	r20, 0xC0	; 192
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    20a0:	0e 94 37 30 	call	0x606e	; 0x606e <__fixunssfsi>
    20a4:	16 2f       	mov	r17, r22
    20a6:	01 c0       	rjmp	.+2      	; 0x20aa <vMainPoseControllerTask+0x256>
				}else{
					currentDriveActuation = maxDriveActuation;
    20a8:	1b e4       	ldi	r17, 0x4B	; 75
				}
				
				
				
				if(distance > radiusEpsilon){//Not close enough to target
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 ea       	ldi	r20, 0xA0	; 160
    20b0:	50 e4       	ldi	r21, 0x40	; 64
    20b2:	c5 01       	movw	r24, r10
    20b4:	b4 01       	movw	r22, r8
    20b6:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <vMainPoseControllerTask+0x26c>
    20be:	4b c1       	rjmp	.+662    	; 0x2356 <__stack+0x157>
					
					idleSendt = FALSE;
					
					float xdiff = xTargt - xhat;
					float ydiff = yTargt - yhat;
					float thetaTargt = atan2(ydiff,xdiff); //atan() returns radians
    20c0:	2c 89       	ldd	r18, Y+20	; 0x14
    20c2:	3d 89       	ldd	r19, Y+21	; 0x15
    20c4:	4e 89       	ldd	r20, Y+22	; 0x16
    20c6:	5f 89       	ldd	r21, Y+23	; 0x17
    20c8:	c7 01       	movw	r24, r14
    20ca:	b6 01       	movw	r22, r12
    20cc:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <atan2>
					float thetaDiff = thetaTargt-thetahat; //Might be outside pi to -pi degrees
    20d0:	a3 01       	movw	r20, r6
    20d2:	92 01       	movw	r18, r4
    20d4:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    20d8:	68 8b       	std	Y+16, r22	; 0x10
    20da:	79 8b       	std	Y+17, r23	; 0x11
    20dc:	8a 8b       	std	Y+18, r24	; 0x12
    20de:	9b 8b       	std	Y+19, r25	; 0x13
					vFunc_Inf2pi(&thetaDiff);
    20e0:	ce 01       	movw	r24, r28
    20e2:	40 96       	adiw	r24, 0x10	; 16
    20e4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
					
					
					
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
    20e8:	88 88       	ldd	r8, Y+16	; 0x10
    20ea:	99 88       	ldd	r9, Y+17	; 0x11
    20ec:	aa 88       	ldd	r10, Y+18	; 0x12
    20ee:	bb 88       	ldd	r11, Y+19	; 0x13
    20f0:	75 01       	movw	r14, r10
    20f2:	64 01       	movw	r12, r8
    20f4:	e8 94       	clt
    20f6:	f7 f8       	bld	r15, 7
    20f8:	29 e1       	ldi	r18, 0x19	; 25
    20fa:	34 e0       	ldi	r19, 0x04	; 4
    20fc:	46 e0       	ldi	r20, 0x06	; 6
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	c7 01       	movw	r24, r14
    2102:	b6 01       	movw	r22, r12
    2104:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
    2108:	18 16       	cp	r1, r24
    210a:	0c f4       	brge	.+2      	; 0x210e <vMainPoseControllerTask+0x2ba>
    210c:	ab c0       	rjmp	.+342    	; 0x2264 <__stack+0x65>
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
    210e:	22 e7       	ldi	r18, 0x72	; 114
    2110:	3a e8       	ldi	r19, 0x8A	; 138
    2112:	4e e8       	ldi	r20, 0x8E	; 142
    2114:	5c e3       	ldi	r21, 0x3C	; 60
    2116:	c7 01       	movw	r24, r14
    2118:	b6 01       	movw	r22, r12
    211a:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__cmpsf2>
    211e:	88 23       	and	r24, r24
    2120:	1c f0       	brlt	.+6      	; 0x2128 <vMainPoseControllerTask+0x2d4>
					}
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
    2122:	21 10       	cpse	r2, r1
    2124:	03 c0       	rjmp	.+6      	; 0x212c <vMainPoseControllerTask+0x2d8>
    2126:	9e c0       	rjmp	.+316    	; 0x2264 <__stack+0x65>
					//Hysteresis mechanics
					if (fabs(thetaDiff) > rotateThreshold){
						doneTurning = FALSE;
						
					}else if (fabs(thetaDiff) < driveThreshold){
						doneTurning = TRUE;
    2128:	22 24       	eor	r2, r2
    212a:	23 94       	inc	r2
					
					int16_t LSpeed = 0;
					int16_t RSpeed = 0;
					
					if (doneTurning){//Start forward movement
						if (thetaDiff >= 0){//Moving left
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a9 01       	movw	r20, r18
    2132:	c5 01       	movw	r24, r10
    2134:	b4 01       	movw	r22, r8
    2136:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
    213a:	88 23       	and	r24, r24
    213c:	c4 f1       	brlt	.+112    	; 0x21ae <vMainPoseControllerTask+0x35a>
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
    213e:	01 2f       	mov	r16, r17
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	b8 01       	movw	r22, r16
    2144:	01 2e       	mov	r0, r17
    2146:	00 0c       	add	r0, r0
    2148:	88 0b       	sbc	r24, r24
    214a:	99 0b       	sbc	r25, r25
    214c:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    2150:	2b 01       	movw	r4, r22
    2152:	3c 01       	movw	r6, r24
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	46 e1       	ldi	r20, 0x16	; 22
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	c7 01       	movw	r24, r14
    215e:	b6 01       	movw	r22, r12
    2160:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	c3 01       	movw	r24, r6
    216a:	b2 01       	movw	r22, r4
    216c:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2170:	6b 01       	movw	r12, r22
    2172:	7c 01       	movw	r14, r24
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    217e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2180:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2182:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2184:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	c7 01       	movw	r24, r14
    218e:	b6 01       	movw	r22, r12
    2190:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2194:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
							
							//Saturation
							if (LSpeed > currentDriveActuation){
    2198:	06 17       	cp	r16, r22
    219a:	17 07       	cpc	r17, r23
    219c:	0c f4       	brge	.+2      	; 0x21a0 <vMainPoseControllerTask+0x34c>
    219e:	41 c0       	rjmp	.+130    	; 0x2222 <__stack+0x23>
    21a0:	3b 01       	movw	r6, r22
    21a2:	77 23       	and	r23, r23
    21a4:	0c f0       	brlt	.+2      	; 0x21a8 <vMainPoseControllerTask+0x354>
    21a6:	40 c0       	rjmp	.+128    	; 0x2228 <__stack+0x29>
    21a8:	61 2c       	mov	r6, r1
    21aa:	71 2c       	mov	r7, r1
    21ac:	3d c0       	rjmp	.+122    	; 0x2228 <__stack+0x29>
							
							RSpeed = currentDriveActuation;
							
							
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
    21ae:	61 2e       	mov	r6, r17
    21b0:	71 2c       	mov	r7, r1
    21b2:	b3 01       	movw	r22, r6
    21b4:	07 2c       	mov	r0, r7
    21b6:	00 0c       	add	r0, r0
    21b8:	88 0b       	sbc	r24, r24
    21ba:	99 0b       	sbc	r25, r25
    21bc:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    21c0:	6c 8b       	std	Y+20, r22	; 0x14
    21c2:	7d 8b       	std	Y+21, r23	; 0x15
    21c4:	8e 8b       	std	Y+22, r24	; 0x16
    21c6:	9f 8b       	std	Y+23, r25	; 0x17
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	46 e1       	ldi	r20, 0x16	; 22
    21ce:	54 e4       	ldi	r21, 0x44	; 68
    21d0:	c7 01       	movw	r24, r14
    21d2:	b6 01       	movw	r22, r12
    21d4:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    21d8:	9b 01       	movw	r18, r22
    21da:	ac 01       	movw	r20, r24
    21dc:	6c 89       	ldd	r22, Y+20	; 0x14
    21de:	7d 89       	ldd	r23, Y+21	; 0x15
    21e0:	8e 89       	ldd	r24, Y+22	; 0x16
    21e2:	9f 89       	ldd	r25, Y+23	; 0x17
    21e4:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    21e8:	6b 01       	movw	r12, r22
    21ea:	7c 01       	movw	r14, r24
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	68 a1       	ldd	r22, Y+32	; 0x20
    21f6:	79 a1       	ldd	r23, Y+33	; 0x21
    21f8:	8a a1       	ldd	r24, Y+34	; 0x22
    21fa:	9b a1       	ldd	r25, Y+35	; 0x23
    21fc:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	c7 01       	movw	r24, r14
    2206:	b6 01       	movw	r22, r12
    2208:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    220c:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
							
							//Saturation
							if (RSpeed > currentDriveActuation){
    2210:	66 16       	cp	r6, r22
    2212:	77 06       	cpc	r7, r23
    2214:	44 f0       	brlt	.+16     	; 0x2226 <__stack+0x27>
    2216:	8b 01       	movw	r16, r22
    2218:	77 23       	and	r23, r23
    221a:	34 f4       	brge	.+12     	; 0x2228 <__stack+0x29>
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <__stack+0x29>
						if (thetaDiff >= 0){//Moving left
							LSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*leftIntError; //Simple PI controller for theta 
							
							//Saturation
							if (LSpeed > currentDriveActuation){
								LSpeed = currentDriveActuation;
    2222:	38 01       	movw	r6, r16
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <__stack+0x29>
						}else{//Moving right
							RSpeed = currentDriveActuation - driveKp*fabs(thetaDiff) - driveKi*rightIntError; //Simple PI controller for theta
							
							//Saturation
							if (RSpeed > currentDriveActuation){
								RSpeed = currentDriveActuation;
    2226:	83 01       	movw	r16, r6
							LSpeed = currentDriveActuation;
							
							
						}
						
						leftIntError += thetaDiff;
    2228:	a5 01       	movw	r20, r10
    222a:	94 01       	movw	r18, r8
    222c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    222e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2230:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2232:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2234:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2238:	6c 8f       	std	Y+28, r22	; 0x1c
    223a:	7d 8f       	std	Y+29, r23	; 0x1d
    223c:	8e 8f       	std	Y+30, r24	; 0x1e
    223e:	9f 8f       	std	Y+31, r25	; 0x1f
						rightIntError -= thetaDiff;
    2240:	a5 01       	movw	r20, r10
    2242:	94 01       	movw	r18, r8
    2244:	68 a1       	ldd	r22, Y+32	; 0x20
    2246:	79 a1       	ldd	r23, Y+33	; 0x21
    2248:	8a a1       	ldd	r24, Y+34	; 0x22
    224a:	9b a1       	ldd	r25, Y+35	; 0x23
    224c:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2250:	68 a3       	std	Y+32, r22	; 0x20
    2252:	79 a3       	std	Y+33, r23	; 0x21
    2254:	8a a3       	std	Y+34, r24	; 0x22
    2256:	9b a3       	std	Y+35, r25	; 0x23
						
						
						gRightWheelDirection = motorRightForward;
    2258:	96 e0       	ldi	r25, 0x06	; 6
    225a:	9f 87       	std	Y+15, r25	; 0x0f
						gLeftWheelDirection = motorLeftForward;
    225c:	3e 86       	std	Y+14, r3	; 0x0e
						lastMovement = moveForward;
    225e:	a1 e0       	ldi	r26, 0x01	; 1
    2260:	a9 87       	std	Y+9, r26	; 0x09
    2262:	6e c0       	rjmp	.+220    	; 0x2340 <__stack+0x141>
						
						
						
					}else{ //Turn within 1 degree of target
						if (thetaDiff >= 0){//Rotating left
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	a9 01       	movw	r20, r18
    226a:	c5 01       	movw	r24, r10
    226c:	b4 01       	movw	r22, r8
    226e:	0e 94 73 31 	call	0x62e6	; 0x62e6 <__gesf2>
    2272:	88 23       	and	r24, r24
    2274:	9c f1       	brlt	.+102    	; 0x22dc <__stack+0xdd>
							LSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2276:	2e ea       	ldi	r18, 0xAE	; 174
    2278:	37 e4       	ldi	r19, 0x47	; 71
    227a:	41 e6       	ldi	r20, 0x61	; 97
    227c:	5e e3       	ldi	r21, 0x3E	; 62
    227e:	c7 01       	movw	r24, r14
    2280:	b6 01       	movw	r22, r12
    2282:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2286:	2a e9       	ldi	r18, 0x9A	; 154
    2288:	39 e9       	ldi	r19, 0x99	; 153
    228a:	49 e9       	ldi	r20, 0x99	; 153
    228c:	5e e3       	ldi	r21, 0x3E	; 62
    228e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2292:	6b 01       	movw	r12, r22
    2294:	7c 01       	movw	r14, r24
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	52 ec       	ldi	r21, 0xC2	; 194
    229e:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    22a2:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    22a6:	3b 01       	movw	r6, r22
							gLeftWheelDirection = motorLeftBackward;
    22a8:	b5 e0       	ldi	r27, 0x05	; 5
    22aa:	be 87       	std	Y+14, r27	; 0x0e
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	52 e4       	ldi	r21, 0x42	; 66
    22b4:	c7 01       	movw	r24, r14
    22b6:	b6 01       	movw	r22, r12
    22b8:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    22bc:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    22c0:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightForward;
    22c2:	86 e0       	ldi	r24, 0x06	; 6
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
							lastMovement = moveCounterClockwise;
    22c6:	39 86       	std	Y+9, r3	; 0x09
    22c8:	21 2c       	mov	r2, r1
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
						rightIntError = 0;
    22ca:	18 a2       	std	Y+32, r1	; 0x20
    22cc:	19 a2       	std	Y+33, r1	; 0x21
    22ce:	1a a2       	std	Y+34, r1	; 0x22
    22d0:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    22d2:	1c 8e       	std	Y+28, r1	; 0x1c
    22d4:	1d 8e       	std	Y+29, r1	; 0x1d
    22d6:	1e 8e       	std	Y+30, r1	; 0x1e
    22d8:	1f 8e       	std	Y+31, r1	; 0x1f
    22da:	32 c0       	rjmp	.+100    	; 0x2340 <__stack+0x141>
							gLeftWheelDirection = motorLeftBackward;
							RSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightForward;
							lastMovement = moveCounterClockwise;
						}else{//Rotating right
							LSpeed = maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    22dc:	2e ea       	ldi	r18, 0xAE	; 174
    22de:	37 e4       	ldi	r19, 0x47	; 71
    22e0:	41 e6       	ldi	r20, 0x61	; 97
    22e2:	5e e3       	ldi	r21, 0x3E	; 62
    22e4:	c7 01       	movw	r24, r14
    22e6:	b6 01       	movw	r22, r12
    22e8:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    22ec:	2a e9       	ldi	r18, 0x9A	; 154
    22ee:	39 e9       	ldi	r19, 0x99	; 153
    22f0:	49 e9       	ldi	r20, 0x99	; 153
    22f2:	5e e3       	ldi	r21, 0x3E	; 62
    22f4:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    22f8:	6b 01       	movw	r12, r22
    22fa:	7c 01       	movw	r14, r24
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	52 e4       	ldi	r21, 0x42	; 66
    2304:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2308:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    230c:	3b 01       	movw	r6, r22
							gLeftWheelDirection = motorLeftForward;
    230e:	3e 86       	std	Y+14, r3	; 0x0e
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	52 ec       	ldi	r21, 0xC2	; 194
    2318:	c7 01       	movw	r24, r14
    231a:	b6 01       	movw	r22, r12
    231c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2320:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    2324:	8b 01       	movw	r16, r22
							gRightWheelDirection = motorRightBackward;
    2326:	95 e0       	ldi	r25, 0x05	; 5
    2328:	9f 87       	std	Y+15, r25	; 0x0f
							lastMovement = moveClockwise;
    232a:	a3 e0       	ldi	r26, 0x03	; 3
    232c:	a9 87       	std	Y+9, r26	; 0x09
    232e:	21 2c       	mov	r2, r1
						}
						
						leftIntError = 0;
						rightIntError = 0;
    2330:	18 a2       	std	Y+32, r1	; 0x20
    2332:	19 a2       	std	Y+33, r1	; 0x21
    2334:	1a a2       	std	Y+34, r1	; 0x22
    2336:	1b a2       	std	Y+35, r1	; 0x23
							RSpeed = -maxRotateActuation*(0.3 + 0.22*(fabs(thetaDiff)));
							gRightWheelDirection = motorRightBackward;
							lastMovement = moveClockwise;
						}
						
						leftIntError = 0;
    2338:	1c 8e       	std	Y+28, r1	; 0x1c
    233a:	1d 8e       	std	Y+29, r1	; 0x1d
    233c:	1e 8e       	std	Y+30, r1	; 0x1e
    233e:	1f 8e       	std	Y+31, r1	; 0x1f
						rightIntError = 0;
						
					}
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
    2340:	9e 01       	movw	r18, r28
    2342:	21 5f       	subi	r18, 0xF1	; 241
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	ae 01       	movw	r20, r28
    2348:	42 5f       	subi	r20, 0xF2	; 242
    234a:	5f 4f       	sbci	r21, 0xFF	; 255
    234c:	b8 01       	movw	r22, r16
    234e:	c3 01       	movw	r24, r6
    2350:	c3 d3       	rcall	.+1926   	; 0x2ad8 <vMotorMovementSwitch>
				
				
				if(distance > radiusEpsilon){//Not close enough to target
					
					
					idleSendt = FALSE;
    2352:	00 e0       	ldi	r16, 0x00	; 0
    2354:	08 c0       	rjmp	.+16     	; 0x2366 <__stack+0x167>
					
					vMotorMovementSwitch(LSpeed,RSpeed, &gLeftWheelDirection, &gRightWheelDirection);
			
				}else{
					
					if (idleSendt == FALSE){
    2356:	01 11       	cpse	r16, r1
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <__stack+0x161>
						send_idle();
    235a:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <send_idle>
						idleSendt = TRUE;
					}
					vMotorBrakeLeft();
    235e:	01 e0       	ldi	r16, 0x01	; 1
    2360:	a7 d3       	rcall	.+1870   	; 0x2ab0 <vMotorBrakeLeft>
					vMotorBrakeRight();
    2362:	ab d3       	rcall	.+1878   	; 0x2aba <vMotorBrakeRight>
    2364:	19 86       	std	Y+9, r1	; 0x09
					lastMovement = moveStop;
    2366:	20 e0       	ldi	r18, 0x00	; 0
				}
				
				xQueueSend(scanStatusQ, &lastMovement, 0); // Send the current movement to the scan task
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	be 01       	movw	r22, r28
    236e:	67 5f       	subi	r22, 0xF7	; 247
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <scanStatusQ>
    2376:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <scanStatusQ+0x1>
    237a:	0e 94 03 1a 	call	0x3406	; 0x3406 <xQueueGenericSend>
    237e:	90 cd       	rjmp	.-1248   	; 0x1ea0 <vMainPoseControllerTask+0x4c>

00002380 <vMainPoseEstimatorTask>:
    2380:	cf 93       	push	r28
	} 
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    2382:	df 93       	push	r29
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	a2 97       	sbiw	r28, 0x22	; 34
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    const TickType_t xDelay = PERIOD_ESTIMATOR_MS;
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    2394:	19 82       	std	Y+1, r1	; 0x01
    2396:	1a 82       	std	Y+2, r1	; 0x02
    2398:	1b 82       	std	Y+3, r1	; 0x03
    239a:	1c 82       	std	Y+4, r1	; 0x04
        uint8_t printerTellar = 0;     
    #endif
    
    // Initialise the xLastWakeTime variable with the current time.
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    239c:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <xTaskGetTickCount>
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    
    float variance_gyro = 0.0482f; // [rad] calculated offline, see report
    float variance_encoder = (2.0f * WHEEL_FACTOR_MM) / (WHEELBASE_MM / 2.0f); // approximation, 0.0257 [rad]
    
    float variance_gyro_encoder = (variance_gyro + variance_encoder) * period_in_S; // (Var gyro + var encoder) * timestep
    float covariance_filter_predicted = 0;
    23a4:	1e 8e       	std	Y+30, r1	; 0x1e
    23a6:	1f 8e       	std	Y+31, r1	; 0x1f
    23a8:	18 a2       	std	Y+32, r1	; 0x20
    23aa:	19 a2       	std	Y+33, r1	; 0x21
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    
    float gyroOffset = 0.0;
    23ac:	1b 8a       	std	Y+19, r1	; 0x13
    23ae:	1c 8a       	std	Y+20, r1	; 0x14
    23b0:	1d 8a       	std	Y+21, r1	; 0x15
    23b2:	1e 8a       	std	Y+22, r1	; 0x16
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    float predictedY = 0.0;
    23b4:	1f 86       	std	Y+15, r1	; 0x0f
    23b6:	18 8a       	std	Y+16, r1	; 0x10
    23b8:	19 8a       	std	Y+17, r1	; 0x11
    23ba:	1a 8a       	std	Y+18, r1	; 0x12
    float period_in_S = PERIOD_ESTIMATOR_MS / 1000.0f;
    
    float kalmanGain = 0.5;
    
    float predictedTheta = 0.0;
    float predictedX = 0.0;
    23bc:	1b 86       	std	Y+11, r1	; 0x0b
    23be:	1c 86       	std	Y+12, r1	; 0x0c
    23c0:	1d 86       	std	Y+13, r1	; 0x0d
    23c2:	1e 86       	std	Y+14, r1	; 0x0e


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    int16_t previous_ticksRight = 0;  
    23c4:	e1 2c       	mov	r14, r1
    23c6:	f1 2c       	mov	r15, r1
}


/* Pose estimator task */
void vMainPoseEstimatorTask( void *pvParameters ){
    int16_t previous_ticksLeft = 0;
    23c8:	81 2c       	mov	r8, r1
    23ca:	91 2c       	mov	r9, r1
    23cc:	41 2c       	mov	r4, r1
    23ce:	31 2c       	mov	r3, r1
    23d0:	21 2c       	mov	r2, r1
    23d2:	51 2c       	mov	r5, r1
    TickType_t xLastWakeTime;
    xLastWakeTime = xTaskGetTickCount();
    
    while(1){
        // Loop
        vTaskDelayUntil(&xLastWakeTime, xDelay / portTICK_PERIOD_MS );  
    23d4:	68 e2       	ldi	r22, 0x28	; 40
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	ce 01       	movw	r24, r28
    23da:	05 96       	adiw	r24, 0x05	; 5
    23dc:	0e 94 b0 22 	call	0x4560	; 0x4560 <vTaskDelayUntil>
        if (gHandshook){ // Check if we are ready    
    23e0:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <gHandshook>
    23e4:	88 23       	and	r24, r24
    23e6:	09 f4       	brne	.+2      	; 0x23ea <vMainPoseEstimatorTask+0x6a>
    23e8:	8d c1       	rjmp	.+794    	; 0x2704 <vMainPoseEstimatorTask+0x384>
            int16_t leftWheelTicks = 0;
            int16_t rightWheelTicks = 0;
            
            // Get encoder data, protect the global tick variables
            xSemaphoreTake(xTickMutex, 15 / portTICK_PERIOD_MS);
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	4f e0       	ldi	r20, 0x0F	; 15
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	80 91 55 1b 	lds	r24, 0x1B55	; 0x801b55 <xTickMutex>
    23f8:	90 91 56 1b 	lds	r25, 0x1B56	; 0x801b56 <xTickMutex+0x1>
    23fc:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
                leftWheelTicks = gLeftWheelTicks;
    2400:	60 90 db 19 	lds	r6, 0x19DB	; 0x8019db <gLeftWheelTicks>
    2404:	70 90 dc 19 	lds	r7, 0x19DC	; 0x8019dc <gLeftWheelTicks+0x1>
                rightWheelTicks = gRightWheelTicks;
    2408:	00 91 dd 19 	lds	r16, 0x19DD	; 0x8019dd <gRightWheelTicks>
    240c:	10 91 de 19 	lds	r17, 0x19DE	; 0x8019de <gRightWheelTicks+0x1>
            xSemaphoreGive(xTickMutex);
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	80 91 55 1b 	lds	r24, 0x1B55	; 0x801b55 <xTickMutex>
    2418:	90 91 56 1b 	lds	r25, 0x1B56	; 0x801b56 <xTickMutex+0x1>
    241c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
    2420:	b3 01       	movw	r22, r6
    2422:	68 19       	sub	r22, r8
    2424:	79 09       	sbc	r23, r9
    2426:	07 2e       	mov	r0, r23
    2428:	00 0c       	add	r0, r0
    242a:	88 0b       	sbc	r24, r24
    242c:	99 0b       	sbc	r25, r25
    242e:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    2432:	28 ef       	ldi	r18, 0xF8	; 248
    2434:	33 e5       	ldi	r19, 0x53	; 83
    2436:	43 e2       	ldi	r20, 0x23	; 35
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    243e:	4b 01       	movw	r8, r22
    2440:	5c 01       	movw	r10, r24
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
    2442:	b8 01       	movw	r22, r16
    2444:	6e 19       	sub	r22, r14
    2446:	7f 09       	sbc	r23, r15
    2448:	07 2e       	mov	r0, r23
    244a:	00 0c       	add	r0, r0
    244c:	88 0b       	sbc	r24, r24
    244e:	99 0b       	sbc	r25, r25
    2450:	0e 94 65 30 	call	0x60ca	; 0x60ca <__floatsisf>
    2454:	28 ef       	ldi	r18, 0xF8	; 248
    2456:	33 e5       	ldi	r19, 0x53	; 83
    2458:	43 e2       	ldi	r20, 0x23	; 35
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2460:	6b 01       	movw	r12, r22
    2462:	7c 01       	movw	r14, r24
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
            				   
					   
            float dRobot = (dLeft + dRight) / 2;           
    2464:	9b 01       	movw	r18, r22
    2466:	ac 01       	movw	r20, r24
    2468:	c5 01       	movw	r24, r10
    246a:	b4 01       	movw	r22, r8
    246c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    247c:	6f 8b       	std	Y+23, r22	; 0x17
    247e:	78 8f       	std	Y+24, r23	; 0x18
    2480:	89 8f       	std	Y+25, r24	; 0x19
    2482:	9a 8f       	std	Y+26, r25	; 0x1a
            float dTheta = (dRight - dLeft) / WHEELBASE_MM; // Get angle from encoders, dervied from arch of circles formula
    2484:	a5 01       	movw	r20, r10
    2486:	94 01       	movw	r18, r8
    2488:	c7 01       	movw	r24, r14
    248a:	b6 01       	movw	r22, r12
    248c:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	43 e1       	ldi	r20, 0x13	; 19
    2496:	53 e4       	ldi	r21, 0x43	; 67
    2498:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    249c:	4b 01       	movw	r8, r22
    249e:	5c 01       	movw	r10, r24
            
  
            /* PREDICT */
            // Get gyro data:
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
    24a0:	9b d9       	rcall	.-3274   	; 0x17d8 <fIMU_readFloatGyroZ>
    24a2:	2b 89       	ldd	r18, Y+19	; 0x13
    24a4:	3c 89       	ldd	r19, Y+20	; 0x14
    24a6:	4d 89       	ldd	r20, Y+21	; 0x15
    24a8:	5e 89       	ldd	r21, Y+22	; 0x16
    24aa:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    24ae:	6b 01       	movw	r12, r22
    24b0:	7c 01       	movw	r14, r24
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
    24b2:	9f 77       	andi	r25, 0x7F	; 127
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__cmpsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	4c f0       	brlt	.+18     	; 0x24d6 <vMainPoseEstimatorTask+0x156>
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
                }
            else {
                robot_is_turning = TRUE;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	8a a3       	std	Y+34, r24	; 0x22
                gyroWeight = 0.75; // Found by experiment, after 20x90 degree turns, gyro seems 85% more accurate than encoders  UPDATE: ENDRET I GEIRS KODE TIL 0.75
    24c8:	1f 82       	std	Y+7, r1	; 0x07
    24ca:	1b 8e       	std	Y+27, r1	; 0x1b
    24cc:	80 e4       	ldi	r24, 0x40	; 64
    24ce:	8c 8f       	std	Y+28, r24	; 0x1c
    24d0:	8f e3       	ldi	r24, 0x3F	; 63
    24d2:	8d 8f       	std	Y+29, r24	; 0x1d
    24d4:	05 c0       	rjmp	.+10     	; 0x24e0 <vMainPoseEstimatorTask+0x160>
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
                robot_is_turning = FALSE; // Don't update angle estimates
    24d6:	1a a2       	std	Y+34, r1	; 0x22
            float gyrZ = (fIMU_readFloatGyroZ() - gyroOffset);
            //dTheta = gyrZ * period_in_S * DEG2RAD; [COMMENT]I believe this line is not supposed to be here. Residual from broken encoders?
            
            // If the robot is not really rotating we don't include the gyro measurements, to avoid the trouble with drift while driving in a straight line
            if(fabs(gyrZ) < 10){ 
                gyroWeight = 0; // Disregard gyro while driving in a straight line
    24d8:	4f 82       	std	Y+7, r4	; 0x07
    24da:	3b 8e       	std	Y+27, r3	; 0x1b
    24dc:	2c 8e       	std	Y+28, r2	; 0x1c
    24de:	5d 8e       	std	Y+29, r5	; 0x1d
            
            gyrZ *= period_in_S * DEG2RAD; // Scale gyro measurement      
           		
			
            // Fuse heading from sensors to predict heading:
            dTheta =  (1 - gyroWeight) * dTheta + gyroWeight * gyrZ;
    24e0:	2f 81       	ldd	r18, Y+7	; 0x07
    24e2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    24e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    24e6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	80 e8       	ldi	r24, 0x80	; 128
    24ee:	9f e3       	ldi	r25, 0x3F	; 63
    24f0:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    24f4:	a5 01       	movw	r20, r10
    24f6:	94 01       	movw	r18, r8
    24f8:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    24fc:	4b 01       	movw	r8, r22
    24fe:	5c 01       	movw	r10, r24
    2500:	24 ed       	ldi	r18, 0xD4	; 212
    2502:	32 e0       	ldi	r19, 0x02	; 2
    2504:	47 e3       	ldi	r20, 0x37	; 55
    2506:	5a e3       	ldi	r21, 0x3A	; 58
    2508:	c7 01       	movw	r24, r14
    250a:	b6 01       	movw	r22, r12
    250c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2510:	2f 81       	ldd	r18, Y+7	; 0x07
    2512:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2514:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2516:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2518:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    251c:	a5 01       	movw	r20, r10
    251e:	94 01       	movw	r18, r8
    2520:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2524:	4b 01       	movw	r8, r22
    2526:	5c 01       	movw	r10, r24
            
            
            // Estimate global X and Y pos
            // Todo; Include accelerator measurements to estimate position and handle wheel slippage
            predictedX = predictedX + (dRobot * cos(predictedTheta + 0.5 * dTheta)); 
    2528:	c9 80       	ldd	r12, Y+1	; 0x01
    252a:	da 80       	ldd	r13, Y+2	; 0x02
    252c:	eb 80       	ldd	r14, Y+3	; 0x03
    252e:	fc 80       	ldd	r15, Y+4	; 0x04
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    253c:	a7 01       	movw	r20, r14
    253e:	96 01       	movw	r18, r12
    2540:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2544:	6f 83       	std	Y+7, r22	; 0x07
    2546:	78 87       	std	Y+8, r23	; 0x08
    2548:	89 87       	std	Y+9, r24	; 0x09
    254a:	9a 87       	std	Y+10, r25	; 0x0a
    254c:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <cos>
    2550:	9b 01       	movw	r18, r22
    2552:	ac 01       	movw	r20, r24
    2554:	6f 89       	ldd	r22, Y+23	; 0x17
    2556:	78 8d       	ldd	r23, Y+24	; 0x18
    2558:	89 8d       	ldd	r24, Y+25	; 0x19
    255a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    255c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2570:	6b 87       	std	Y+11, r22	; 0x0b
    2572:	7c 87       	std	Y+12, r23	; 0x0c
    2574:	8d 87       	std	Y+13, r24	; 0x0d
    2576:	9e 87       	std	Y+14, r25	; 0x0e
            predictedY = predictedY + (dRobot * sin(predictedTheta + 0.5 * dTheta));
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <sin>
    2584:	9b 01       	movw	r18, r22
    2586:	ac 01       	movw	r20, r24
    2588:	6f 89       	ldd	r22, Y+23	; 0x17
    258a:	78 8d       	ldd	r23, Y+24	; 0x18
    258c:	89 8d       	ldd	r24, Y+25	; 0x19
    258e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2590:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2594:	9b 01       	movw	r18, r22
    2596:	ac 01       	movw	r20, r24
    2598:	6f 85       	ldd	r22, Y+15	; 0x0f
    259a:	78 89       	ldd	r23, Y+16	; 0x10
    259c:	89 89       	ldd	r24, Y+17	; 0x11
    259e:	9a 89       	ldd	r25, Y+18	; 0x12
    25a0:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    25a4:	6f 87       	std	Y+15, r22	; 0x0f
    25a6:	78 8b       	std	Y+16, r23	; 0x10
    25a8:	89 8b       	std	Y+17, r24	; 0x11
    25aa:	9a 8b       	std	Y+18, r25	; 0x12

            // Predicted (a priori) state estimate for theta
            predictedTheta += dTheta;
    25ac:	a7 01       	movw	r20, r14
    25ae:	96 01       	movw	r18, r12
    25b0:	c5 01       	movw	r24, r10
    25b2:	b4 01       	movw	r22, r8
    25b4:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    25b8:	69 83       	std	Y+1, r22	; 0x01
    25ba:	7a 83       	std	Y+2, r23	; 0x02
    25bc:	8b 83       	std	Y+3, r24	; 0x03
    25be:	9c 83       	std	Y+4, r25	; 0x04
                  
            // Predicted (a priori) estimate covariance
            covariance_filter_predicted += variance_gyro_encoder;
    25c0:	2f ee       	ldi	r18, 0xEF	; 239
    25c2:	3c ed       	ldi	r19, 0xDC	; 220
    25c4:	4b e2       	ldi	r20, 0x2B	; 43
    25c6:	5b e3       	ldi	r21, 0x3B	; 59
    25c8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    25ca:	7f 8d       	ldd	r23, Y+31	; 0x1f
    25cc:	88 a1       	ldd	r24, Y+32	; 0x20
    25ce:	99 a1       	ldd	r25, Y+33	; 0x21
    25d0:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    25d4:	6b 01       	movw	r12, r22
    25d6:	7c 01       	movw	r14, r24
	            // If we have a reading over this, we can safely ignore the compass
	            // Ignore compass while driving in a straight line
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
            }
            else if ((robot_is_turning == FALSE) && (dRobot == 0)){
    25d8:	8a a1       	ldd	r24, Y+34	; 0x22
    25da:	81 11       	cpse	r24, r1
    25dc:	22 c0       	rjmp	.+68     	; 0x2622 <vMainPoseEstimatorTask+0x2a2>
    25de:	24 2d       	mov	r18, r4
    25e0:	33 2d       	mov	r19, r3
    25e2:	42 2d       	mov	r20, r2
    25e4:	55 2d       	mov	r21, r5
    25e6:	6f 89       	ldd	r22, Y+23	; 0x17
    25e8:	78 8d       	ldd	r23, Y+24	; 0x18
    25ea:	89 8d       	ldd	r24, Y+25	; 0x19
    25ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25ee:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <__cmpsf2>
    25f2:	81 11       	cpse	r24, r1
    25f4:	16 c0       	rjmp	.+44     	; 0x2622 <vMainPoseEstimatorTask+0x2a2>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
    25f6:	24 2d       	mov	r18, r4
    25f8:	33 2d       	mov	r19, r3
    25fa:	42 2d       	mov	r20, r2
    25fc:	55 2d       	mov	r21, r5
    25fe:	c7 01       	movw	r24, r14
    2600:	b6 01       	movw	r22, r12
    2602:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2606:	9b 01       	movw	r18, r22
    2608:	ac 01       	movw	r20, r24
    260a:	c7 01       	movw	r24, r14
    260c:	b6 01       	movw	r22, r12
    260e:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    2612:	b6 2e       	mov	r11, r22
    2614:	a7 2e       	mov	r10, r23
    2616:	98 2e       	mov	r9, r24
    2618:	89 2e       	mov	r8, r25
	            vLED_singleHigh(ledYELLOW);
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	e5 d8       	rcall	.-3638   	; 0x17ea <vLED_singleHigh>
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <vMainPoseEstimatorTask+0x2b0>
            }
            else{
	            kalmanGain = 0;
	            vLED_singleLow(ledYELLOW);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	fb d8       	rcall	.-3594   	; 0x181e <vLED_singleLow>
	            // Updated (a posteriori) state estimate
	            kalmanGain = covariance_filter_predicted / (covariance_filter_predicted + CONST_VARIANCE_COMPASS);
	            vLED_singleHigh(ledYELLOW);
            }
            else{
	            kalmanGain = 0;
    2628:	b4 2c       	mov	r11, r4
    262a:	a3 2c       	mov	r10, r3
    262c:	92 2c       	mov	r9, r2
    262e:	85 2c       	mov	r8, r5
	            vLED_singleLow(ledYELLOW);
            }         
            //*/
           
            predictedTheta  += kalmanGain*(error);
    2630:	24 2d       	mov	r18, r4
    2632:	33 2d       	mov	r19, r3
    2634:	42 2d       	mov	r20, r2
    2636:	55 2d       	mov	r21, r5
    2638:	6b 2d       	mov	r22, r11
    263a:	7a 2d       	mov	r23, r10
    263c:	89 2d       	mov	r24, r9
    263e:	98 2d       	mov	r25, r8
    2640:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2644:	9b 01       	movw	r18, r22
    2646:	ac 01       	movw	r20, r24
    2648:	69 81       	ldd	r22, Y+1	; 0x01
    264a:	7a 81       	ldd	r23, Y+2	; 0x02
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2654:	69 83       	std	Y+1, r22	; 0x01
    2656:	7a 83       	std	Y+2, r23	; 0x02
    2658:	8b 83       	std	Y+3, r24	; 0x03
    265a:	9c 83       	std	Y+4, r25	; 0x04
			vFunc_Inf2pi(&predictedTheta);            
    265c:	ce 01       	movw	r24, r28
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vFunc_Inf2pi>
            
            // Updated (a posteriori) estimate covariance
            covariance_filter_predicted = (1 - kalmanGain) * covariance_filter_predicted;  
    2664:	2b 2d       	mov	r18, r11
    2666:	3a 2d       	mov	r19, r10
    2668:	49 2d       	mov	r20, r9
    266a:	58 2d       	mov	r21, r8
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	80 e8       	ldi	r24, 0x80	; 128
    2672:	9f e3       	ldi	r25, 0x3F	; 63
    2674:	0e 94 fc 2e 	call	0x5df8	; 0x5df8 <__subsf3>
    2678:	a7 01       	movw	r20, r14
    267a:	96 01       	movw	r18, r12
    267c:	0e 94 7e 31 	call	0x62fc	; 0x62fc <__mulsf3>
    2680:	6e 8f       	std	Y+30, r22	; 0x1e
    2682:	7f 8f       	std	Y+31, r23	; 0x1f
    2684:	88 a3       	std	Y+32, r24	; 0x20
    2686:	99 a3       	std	Y+33, r25	; 0x21

			

            // Update pose
            xSemaphoreTake(xPoseMutex, 15 / portTICK_PERIOD_MS);
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	4f e0       	ldi	r20, 0x0F	; 15
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    2696:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    269a:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
                gTheta_hat = predictedTheta;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	ab 81       	ldd	r26, Y+3	; 0x03
    26a4:	bc 81       	ldd	r27, Y+4	; 0x04
    26a6:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <gTheta_hat>
    26aa:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <gTheta_hat+0x1>
    26ae:	a0 93 e5 19 	sts	0x19E5, r26	; 0x8019e5 <gTheta_hat+0x2>
    26b2:	b0 93 e6 19 	sts	0x19E6, r27	; 0x8019e6 <gTheta_hat+0x3>
                gX_hat = predictedX;
    26b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    26bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26be:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    26c2:	70 93 e2 19 	sts	0x19E2, r23	; 0x8019e2 <gX_hat+0x1>
    26c6:	60 93 e1 19 	sts	0x19E1, r22	; 0x8019e1 <gX_hat>
                gY_hat = predictedY;
    26ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    26cc:	78 89       	ldd	r23, Y+16	; 0x10
    26ce:	89 89       	ldd	r24, Y+17	; 0x11
    26d0:	9a 89       	ldd	r25, Y+18	; 0x12
    26d2:	0e 94 32 30 	call	0x6064	; 0x6064 <__fixsfsi>
    26d6:	70 93 e0 19 	sts	0x19E0, r23	; 0x8019e0 <gY_hat+0x1>
    26da:	60 93 df 19 	sts	0x19DF, r22	; 0x8019df <gY_hat>
            xSemaphoreGive(xPoseMutex);
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	80 91 5b 1b 	lds	r24, 0x1B5B	; 0x801b5b <xPoseMutex>
    26e6:	90 91 5c 1b 	lds	r25, 0x1B5C	; 0x801b5c <xPoseMutex+0x1>
    26ea:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
            // Send semaphore to controller
            xSemaphoreGive(xControllerBSem);
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	80 91 53 1b 	lds	r24, 0x1B53	; 0x801b53 <xControllerBSem>
    26f6:	90 91 54 1b 	lds	r25, 0x1B54	; 0x801b54 <xControllerBSem+0x1>
    26fa:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
            previous_ticksRight = rightWheelTicks;
    26fe:	78 01       	movw	r14, r16
                rightWheelTicks = gRightWheelTicks;
            xSemaphoreGive(xTickMutex);
            
            float dLeft = (float)(leftWheelTicks - previous_ticksLeft) * WHEEL_FACTOR_MM; // Distance left wheel has traveled since last sample
            float dRight =(float)(rightWheelTicks - previous_ticksRight) * WHEEL_FACTOR_MM; // Distance right wheel has traveled since last sample
            previous_ticksLeft = leftWheelTicks;
    2700:	43 01       	movw	r8, r6
    2702:	68 ce       	rjmp	.-816    	; 0x23d4 <vMainPoseEstimatorTask+0x54>
    2704:	05 e6       	ldi	r16, 0x65	; 101
    2706:	10 e0       	ldi	r17, 0x00	; 0
    2708:	a4 2c       	mov	r10, r4
    270a:	b3 2c       	mov	r11, r3
    270c:	c2 2c       	mov	r12, r2
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
                gyro+= fIMU_readFloatGyroZ();
    270e:	d5 2c       	mov	r13, r5
    2710:	63 d8       	rcall	.-3898   	; 0x17d8 <fIMU_readFloatGyroZ>
    2712:	9b 01       	movw	r18, r22
    2714:	ac 01       	movw	r20, r24
    2716:	6a 2d       	mov	r22, r10
    2718:	7b 2d       	mov	r23, r11
    271a:	8c 2d       	mov	r24, r12
    271c:	9d 2d       	mov	r25, r13
    271e:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <__addsf3>
    2722:	a6 2e       	mov	r10, r22
    2724:	b7 2e       	mov	r11, r23
    2726:	c8 2e       	mov	r12, r24
    2728:	d9 2e       	mov	r13, r25
    272a:	01 50       	subi	r16, 0x01	; 1
    272c:	11 09       	sbc	r17, r1
        else{
            // Not connected, getting heading and gyro bias
            uint16_t i;
            uint16_t samples = 100;
            float gyro = 0;
            for (i = 0; i<=samples; i++){
    272e:	81 f7       	brne	.-32     	; 0x2710 <vMainPoseEstimatorTask+0x390>
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
            predictedTheta = 0;
    2730:	84 2d       	mov	r24, r4
    2732:	93 2d       	mov	r25, r3
    2734:	a2 2d       	mov	r26, r2
    2736:	b5 2d       	mov	r27, r5
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	ab 83       	std	Y+3, r26	; 0x03
    273e:	bc 83       	std	Y+4, r27	; 0x04
            gyroOffset = gyro / (float)i;       
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a ec       	ldi	r20, 0xCA	; 202
    2746:	52 e4       	ldi	r21, 0x42	; 66
    2748:	6a 2d       	mov	r22, r10
    274a:	7b 2d       	mov	r23, r11
    274c:	8c 2d       	mov	r24, r12
    274e:	9d 2d       	mov	r25, r13
    2750:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__divsf3>
    2754:	6b 8b       	std	Y+19, r22	; 0x13
    2756:	7c 8b       	std	Y+20, r23	; 0x14
    2758:	8d 8b       	std	Y+21, r24	; 0x15
    275a:	9e 8b       	std	Y+22, r25	; 0x16
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
            predictedY = 0;
    275c:	4f 86       	std	Y+15, r4	; 0x0f
    275e:	38 8a       	std	Y+16, r3	; 0x10
    2760:	29 8a       	std	Y+17, r2	; 0x11
    2762:	5a 8a       	std	Y+18, r5	; 0x12
                gyro+= fIMU_readFloatGyroZ();
			}
            
            
            // Initialize pose to 0 and reset offset variables
            predictedX = 0;
    2764:	4b 86       	std	Y+11, r4	; 0x0b
    2766:	3c 86       	std	Y+12, r3	; 0x0c
    2768:	2d 86       	std	Y+13, r2	; 0x0d
    276a:	5e 86       	std	Y+14, r5	; 0x0e
    276c:	33 ce       	rjmp	.-922    	; 0x23d4 <vMainPoseEstimatorTask+0x54>

0000276e <vApplicationStackOverflowHook>:
}
#endif
*/
/*  In case of stack overflow, disable all interrupts and handle it  */
void vApplicationStackOverflowHook(TaskHandle_t *pxTask, signed char *pcTaskName){
    cli();
    276e:	f8 94       	cli
    /*  Handle overflow */
    #ifdef DEBUG
       debug("Overflow\n");
    #endif
    while(1){
        vLED_toggle(ledRED);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	6e d8       	rcall	.-3876   	; 0x1852 <vLED_toggle>
    2776:	fc cf       	rjmp	.-8      	; 0x2770 <vApplicationStackOverflowHook+0x2>

00002778 <main>:

/*  Main function   */
int main(void){
    /* Setup - Initialize all settings before tasks  */
    /* Initialize LED, pins defined in LED.h   */
    vLED_init();
    2778:	32 d8       	rcall	.-3996   	; 0x17de <vLED_init>
    vLED_singleHigh(ledRED); // Set red LED on to indicate INIT is ongoing
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	35 d8       	rcall	.-3990   	; 0x17ea <vLED_singleHigh>
    /* Initialize USART driver, NB! baud is dependent on nRF51 dongle */
    vUSART_init();
    2780:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <vUSART_init>
    network_init();
    2784:	55 d2       	rcall	.+1194   	; 0x2c30 <network_init>
    arq_init();
    2786:	0e 94 43 01 	call	0x286	; 0x286 <arq_init>
    simple_p_init(server_receiver);
    278a:	8f e0       	ldi	r24, 0x0F	; 15
    278c:	9f e1       	ldi	r25, 0x1F	; 31
    278e:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <simple_p_init>
        debug("tictoc!\n");
        tic;
    #endif
    
    /* Initialize servo for sensor tower to zero degrees */
    vServo_init(0);
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	0e 94 73 20 	call	0x40e6	; 0x40e6 <vServo_init>
    /* Initialize sensors */
    vDistSens_init();
    2798:	0e 94 a5 07 	call	0xf4a	; 0xf4a <vDistSens_init>
    vMotor_init();
    /* Initialize Inertial Measurement Unit (IMU) and SPI  */
    #ifdef DEBUG
        debug("IMU init..\n");
    #endif
	vLED_singleHigh(ledGREEN);
    279c:	06 d1       	rcall	.+524    	; 0x29aa <vMotor_init>
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    sIMU_begin(); 
    27a2:	23 d8       	rcall	.-4026   	; 0x17ea <vLED_singleHigh>
    27a4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <sIMU_begin>
   vLED_singleLow(ledGREEN);
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	90 e0       	ldi	r25, 0x00	; 0
   vLED_singleLow(ledRED);
    27ac:	38 d8       	rcall	.-3984   	; 0x181e <vLED_singleLow>
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	35 d8       	rcall	.-3990   	; 0x181e <vLED_singleLow>
	
	/* ************************************* TESTING **************************************/
	
	
	/* Initialize RTOS utilities  */
    movementQ = xQueueCreate(2,sizeof(uint8_t)); // For sending movements to vMainMovementTask
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	51 d4       	rcall	.+2210   	; 0x305e <xQueueGenericCreate>
    27bc:	90 93 f2 19 	sts	0x19F2, r25	; 0x8019f2 <movementQ+0x1>
    27c0:	80 93 f1 19 	sts	0x19F1, r24	; 0x8019f1 <movementQ>
    poseControllerQ = xQueueCreate(1, sizeof(struct sPoint)); // For setpoints to controller
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	68 e0       	ldi	r22, 0x08	; 8
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	49 d4       	rcall	.+2194   	; 0x305e <xQueueGenericCreate>
    27cc:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <poseControllerQ+0x1>
    27d0:	80 93 ef 19 	sts	0x19EF, r24	; 0x8019ef <poseControllerQ>
    scanStatusQ = xQueueCreate(1,sizeof(uint8_t)); // For robot status
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	61 e0       	ldi	r22, 0x01	; 1
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	41 d4       	rcall	.+2178   	; 0x305e <xQueueGenericCreate>
    27dc:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <scanStatusQ+0x1>
    27e0:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <scanStatusQ>
    actuationQ = xQueueCreate(2,sizeof(uint8_t)); // To send variable actuation to motors
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	61 e0       	ldi	r22, 0x01	; 1
    27e8:	82 e0       	ldi	r24, 0x02	; 2
    27ea:	39 d4       	rcall	.+2162   	; 0x305e <xQueueGenericCreate>
    27ec:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <actuationQ+0x1>
    27f0:	80 93 eb 19 	sts	0x19EB, r24	; 0x8019eb <actuationQ>
    
    xPoseMutex = xSemaphoreCreateMutex(); // Global variables for robot pose. Only updated from estimator, accessed from many
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	85 d4       	rcall	.+2314   	; 0x3102 <xQueueCreateMutex>
    27f8:	90 93 5c 1b 	sts	0x1B5C, r25	; 0x801b5c <xPoseMutex+0x1>
    27fc:	80 93 5b 1b 	sts	0x1B5B, r24	; 0x801b5b <xPoseMutex>
    xUartMutex = xSemaphoreCreateMutex(); // Protected printf with a mutex, may cause fragmented bytes if higher priority task want to print as well
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	7f d4       	rcall	.+2302   	; 0x3102 <xQueueCreateMutex>
    2804:	90 93 58 1b 	sts	0x1B58, r25	; 0x801b58 <xUartMutex+0x1>
    2808:	80 93 57 1b 	sts	0x1B57, r24	; 0x801b57 <xUartMutex>
    xTickMutex = xSemaphoreCreateMutex(); // Global variable to hold robot tick values
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	79 d4       	rcall	.+2290   	; 0x3102 <xQueueCreateMutex>
    2810:	90 93 56 1b 	sts	0x1B56, r25	; 0x801b56 <xTickMutex+0x1>
    2814:	80 93 55 1b 	sts	0x1B55, r24	; 0x801b55 <xTickMutex>
    
    xControllerBSem = xSemaphoreCreateBinary(); // Estimator to Controller synchronization
    2818:	43 e0       	ldi	r20, 0x03	; 3
    281a:	60 e0       	ldi	r22, 0x00	; 0
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	1f d4       	rcall	.+2110   	; 0x305e <xQueueGenericCreate>
    2820:	90 93 54 1b 	sts	0x1B54, r25	; 0x801b54 <xControllerBSem+0x1>
    2824:	80 93 53 1b 	sts	0x1B53, r24	; 0x801b53 <xControllerBSem>
    xCommandReadyBSem = xSemaphoreCreateBinary(); // uart ISR to comm task sync
    2828:	43 e0       	ldi	r20, 0x03	; 3
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	17 d4       	rcall	.+2094   	; 0x305e <xQueueGenericCreate>
    2830:	90 93 5a 1b 	sts	0x1B5A, r25	; 0x801b5a <xCommandReadyBSem+0x1>
    2834:	80 93 59 1b 	sts	0x1B59, r24	; 0x801b59 <xCommandReadyBSem>
    2838:	a1 2c       	mov	r10, r1
    
    // Todo: Check return variable to ensure RTOS utilities were successfully initialized before continue
    xTaskCreate(vMainMovementTask, "Movement", 300, NULL, 4, NULL); // Independent task, uses ticks from ISR
    283a:	b1 2c       	mov	r11, r1
    283c:	c1 2c       	mov	r12, r1
    283e:	d1 2c       	mov	r13, r1
    2840:	e1 2c       	mov	r14, r1
    2842:	f1 2c       	mov	r15, r1
    2844:	04 e0       	ldi	r16, 0x04	; 4
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	4c e2       	ldi	r20, 0x2C	; 44
    284c:	51 e0       	ldi	r21, 0x01	; 1
    284e:	65 e3       	ldi	r22, 0x35	; 53
    2850:	76 e0       	ldi	r23, 0x06	; 6
    2852:	8d eb       	ldi	r24, 0xBD	; 189
    2854:	9d e0       	ldi	r25, 0x0D	; 13
    2856:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    285a:	03 e0       	ldi	r16, 0x03	; 3
    xTaskCreate(vMainCommunicationTask, "Comm", 300, NULL, 3, NULL); // Dependant on ISR from UART, sends instructions to other tasks
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4c e2       	ldi	r20, 0x2C	; 44
    2862:	51 e0       	ldi	r21, 0x01	; 1
    2864:	6e e3       	ldi	r22, 0x3E	; 62
    2866:	76 e0       	ldi	r23, 0x06	; 6
    2868:	80 ed       	ldi	r24, 0xD0	; 208
    286a:	9c e0       	ldi	r25, 0x0C	; 12
    286c:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    2870:	02 e0       	ldi	r16, 0x02	; 2
    
    #ifndef COMPASS_CALIBRATE // If compass calibration task is running dont use these tasks
        xTaskCreate(vMainPoseControllerTask, "PoseCon", 300, NULL, 2, NULL); // Dependant on estimator, sends instructions to movement task
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4c e2       	ldi	r20, 0x2C	; 44
    2878:	51 e0       	ldi	r21, 0x01	; 1
    287a:	63 e4       	ldi	r22, 0x43	; 67
    287c:	76 e0       	ldi	r23, 0x06	; 6
    287e:	8a e2       	ldi	r24, 0x2A	; 42
    2880:	9f e0       	ldi	r25, 0x0F	; 15
    2882:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    2886:	05 e0       	ldi	r16, 0x05	; 5
        xTaskCreate(vMainPoseEstimatorTask, "PoseEst", 300, NULL, 5, NULL); // Independent task, uses ticks from ISR
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4c e2       	ldi	r20, 0x2C	; 44
    288e:	51 e0       	ldi	r21, 0x01	; 1
    2890:	6b e4       	ldi	r22, 0x4B	; 75
    2892:	76 e0       	ldi	r23, 0x06	; 6
    2894:	80 ec       	ldi	r24, 0xC0	; 192
    2896:	91 e1       	ldi	r25, 0x11	; 17
    2898:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    289c:	01 e0       	ldi	r16, 0x01	; 1
        xTaskCreate(vMainSensorTowerTask,"Tower",300, NULL, 1, NULL); // Independent task, but use pose updates from estimator
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4c e2       	ldi	r20, 0x2C	; 44
    28a4:	51 e0       	ldi	r21, 0x01	; 1
    28a6:	63 e5       	ldi	r22, 0x53	; 83
    28a8:	76 e0       	ldi	r23, 0x06	; 6
    28aa:	8e ec       	ldi	r24, 0xCE	; 206
    28ac:	9d e0       	ldi	r25, 0x0D	; 13
    28ae:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
    28b2:	78 94       	sei
        xTaskCreate(compassTask, "compasscal", 3500, NULL, 3, NULL); // Task used for compass calibration, dependant on communication and movement task
    #endif
    
    

    sei();
    28b4:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <vTaskStartScheduler>
    //vLED_singleLow(ledRED);
    #ifdef DEBUG
    debug("Starting scheduler ....\n");
    #endif
    //  Start scheduler 
    vTaskStartScheduler();
    28b8:	c9 e5       	ldi	r28, 0x59	; 89

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
        debug("RAM fail\n");
    28ba:	d6 e0       	ldi	r29, 0x06	; 6
    28bc:	f8 94       	cli
    //  Start scheduler 
    vTaskStartScheduler();

    //  MCU is out of RAM if the program comes here 
    while(1){
        cli();
    28be:	df 93       	push	r29
        debug("RAM fail\n");
    28c0:	cf 93       	push	r28
    28c2:	0e 94 02 20 	call	0x4004	; 0x4004 <debug>
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	f8 cf       	rjmp	.-16     	; 0x28bc <main+0x144>

000028cc <__vector_4>:
    28cc:	1f 92       	push	r1

/* Handle tick from left wheel encoder */
// If ticks generate overly many interrupts, you can 
// connect to T0 and T5 pins and set up  hardware timer overflow to 
// prescale the ticks
ISR(leftWheelCount){
    28ce:	0f 92       	push	r0
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	0f 92       	push	r0
    28d4:	11 24       	eor	r1, r1
    28d6:	8f 93       	push	r24
    gISR_leftWheelTicks++;
    28d8:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <gISR_leftWheelTicks>
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <gISR_leftWheelTicks>
}
    28e2:	8f 91       	pop	r24
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <__vector_3>:

/* Handle tick from right wheel encoder */
ISR(rightWheelCount){
    28ee:	1f 92       	push	r1
    28f0:	0f 92       	push	r0
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	8f 93       	push	r24
    gISR_rightWheelTicks++;
    28fa:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <gISR_rightWheelTicks>
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <gISR_rightWheelTicks>
}
    2904:	8f 91       	pop	r24
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_5>:

/* Handle change of connection status */
ISR(nRF51_status){
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	0b b6       	in	r0, 0x3b	; 59
    291c:	0f 92       	push	r0
    291e:	2f 93       	push	r18
    2920:	3f 93       	push	r19
    2922:	4f 93       	push	r20
    2924:	5f 93       	push	r21
    2926:	6f 93       	push	r22
    2928:	7f 93       	push	r23
    292a:	8f 93       	push	r24
    292c:	9f 93       	push	r25
    292e:	af 93       	push	r26
    2930:	bf 93       	push	r27
    2932:	ef 93       	push	r30
    2934:	ff 93       	push	r31
    if (nRFconnected){
    2936:	64 99       	sbic	0x0c, 4	; 12
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <__vector_5+0x34>
        // indicate we are connected
        vLED_singleHigh(ledGREEN);
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <vLED_singleHigh>
    2942:	18 c0       	rjmp	.+48     	; 0x2974 <__vector_5+0x64>
        
    }
    else{
        // We are not connected or lost connection, reset handshake flag
        gHandshook = FALSE;
    2944:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <gHandshook>
        gPaused = FALSE;
    2948:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <gPaused>
        vLED_singleLow(ledGREEN);
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledYELLOW);
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        vLED_singleLow(ledRED);
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 0f 0c 	call	0x181e	; 0x181e <vLED_singleLow>
        xSemaphoreGiveFromISR(xCommandReadyBSem,0); // Let uart parser reset if needed
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <xCommandReadyBSem>
    296c:	90 91 5a 1b 	lds	r25, 0x1B5A	; 0x801b5a <xCommandReadyBSem+0x1>
    2970:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <xQueueGiveFromISR>
    }
    xSemaphoreGiveFromISR(xControllerBSem,0); // let the controller reset if needed    
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	80 91 53 1b 	lds	r24, 0x1B53	; 0x801b53 <xControllerBSem>
    297c:	90 91 54 1b 	lds	r25, 0x1B54	; 0x801b54 <xControllerBSem+0x1>
    2980:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <xQueueGiveFromISR>
}
    2984:	ff 91       	pop	r31
    2986:	ef 91       	pop	r30
    2988:	bf 91       	pop	r27
    298a:	af 91       	pop	r26
    298c:	9f 91       	pop	r25
    298e:	8f 91       	pop	r24
    2990:	7f 91       	pop	r23
    2992:	6f 91       	pop	r22
    2994:	5f 91       	pop	r21
    2996:	4f 91       	pop	r20
    2998:	3f 91       	pop	r19
    299a:	2f 91       	pop	r18
    299c:	0f 90       	pop	r0
    299e:	0b be       	out	0x3b, r0	; 59
    29a0:	0f 90       	pop	r0
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	0f 90       	pop	r0
    29a6:	1f 90       	pop	r1
    29a8:	18 95       	reti

000029aa <vMotor_init>:

void vMotorGlideRight(){
    motorRightPWM = 0;
    //PORTH &= ~(1<<motorRightOn);
    PORTH &= ~(1<<motorRightForward);
    PORTH &= ~(1<<motorRightBackward);
    29aa:	27 9a       	sbi	0x04, 7	; 4
    29ac:	84 b1       	in	r24, 0x04	; 4
    29ae:	80 63       	ori	r24, 0x30	; 48
    29b0:	84 b9       	out	0x04, r24	; 4
    29b2:	26 9a       	sbi	0x04, 6	; 4
    29b4:	e1 e0       	ldi	r30, 0x01	; 1
    29b6:	f1 e0       	ldi	r31, 0x01	; 1
    29b8:	80 81       	ld	r24, Z
    29ba:	80 66       	ori	r24, 0x60	; 96
    29bc:	80 83       	st	Z, r24
    29be:	2f 98       	cbi	0x05, 7	; 5
    29c0:	2e 98       	cbi	0x05, 6	; 5
    29c2:	e2 e0       	ldi	r30, 0x02	; 2
    29c4:	f1 e0       	ldi	r31, 0x01	; 1
    29c6:	80 81       	ld	r24, Z
    29c8:	8f 79       	andi	r24, 0x9F	; 159
    29ca:	80 83       	st	Z, r24
    29cc:	85 b1       	in	r24, 0x05	; 5
    29ce:	8f 7c       	andi	r24, 0xCF	; 207
    29d0:	85 b9       	out	0x05, r24	; 5
    29d2:	8a b1       	in	r24, 0x0a	; 10
    29d4:	8a b9       	out	0x0a, r24	; 10
    29d6:	8b b1       	in	r24, 0x0b	; 11
    29d8:	8c 60       	ori	r24, 0x0C	; 12
    29da:	8b b9       	out	0x0b, r24	; 11
    29dc:	6c 98       	cbi	0x0d, 4	; 13
    29de:	8d b3       	in	r24, 0x1d	; 29
    29e0:	8d bb       	out	0x1d, r24	; 29
    29e2:	e9 e6       	ldi	r30, 0x69	; 105
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 6f       	ori	r24, 0xF0	; 240
    29ea:	80 83       	st	Z, r24
    29ec:	ea e6       	ldi	r30, 0x6A	; 106
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	81 60       	ori	r24, 0x01	; 1
    29f4:	80 83       	st	Z, r24
    29f6:	8c e1       	ldi	r24, 0x1C	; 28
    29f8:	8c bb       	out	0x1c, r24	; 28
    29fa:	8d b3       	in	r24, 0x1d	; 29
    29fc:	8c 61       	ori	r24, 0x1C	; 28
    29fe:	8d bb       	out	0x1d, r24	; 29
    2a00:	84 b5       	in	r24, 0x24	; 36
    2a02:	80 68       	ori	r24, 0x80	; 128
    2a04:	84 bd       	out	0x24, r24	; 36
    2a06:	e0 e8       	ldi	r30, 0x80	; 128
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	80 62       	ori	r24, 0x20	; 32
    2a0e:	80 83       	st	Z, r24
    2a10:	85 b5       	in	r24, 0x25	; 37
    2a12:	85 bd       	out	0x25, r24	; 37
    2a14:	84 b5       	in	r24, 0x24	; 36
    2a16:	83 60       	ori	r24, 0x03	; 3
    2a18:	84 bd       	out	0x24, r24	; 36
    2a1a:	a1 e8       	ldi	r26, 0x81	; 129
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	8c 91       	ld	r24, X
    2a20:	88 60       	ori	r24, 0x08	; 8
    2a22:	8c 93       	st	X, r24
    2a24:	80 81       	ld	r24, Z
    2a26:	81 60       	ori	r24, 0x01	; 1
    2a28:	80 83       	st	Z, r24
    2a2a:	85 b5       	in	r24, 0x25	; 37
    2a2c:	82 60       	ori	r24, 0x02	; 2
    2a2e:	85 bd       	out	0x25, r24	; 37
    2a30:	8c 91       	ld	r24, X
    2a32:	82 60       	ori	r24, 0x02	; 2
    2a34:	8c 93       	st	X, r24
    2a36:	80 81       	ld	r24, Z
    2a38:	80 83       	st	Z, r24
    2a3a:	e0 eb       	ldi	r30, 0xB0	; 176
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 83       	st	Z, r24
    2a42:	80 81       	ld	r24, Z
    2a44:	80 83       	st	Z, r24
    2a46:	e0 ea       	ldi	r30, 0xA0	; 160
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 83       	st	Z, r24
    2a4e:	08 95       	ret

00002a50 <vMotorMoveLeftForward>:
    2a50:	87 bd       	out	0x27, r24	; 39
    2a52:	2c 9a       	sbi	0x05, 4	; 5
    2a54:	2d 98       	cbi	0x05, 5	; 5
    2a56:	84 e0       	ldi	r24, 0x04	; 4
    2a58:	fb 01       	movw	r30, r22
    2a5a:	80 83       	st	Z, r24
    2a5c:	08 95       	ret

00002a5e <vMotorMoveRightForward>:
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2a64:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2a68:	e2 e0       	ldi	r30, 0x02	; 2
    2a6a:	f1 e0       	ldi	r31, 0x01	; 1
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 64       	ori	r24, 0x40	; 64
    2a70:	80 83       	st	Z, r24
    2a72:	80 81       	ld	r24, Z
    2a74:	8f 7d       	andi	r24, 0xDF	; 223
    2a76:	80 83       	st	Z, r24
    2a78:	86 e0       	ldi	r24, 0x06	; 6
    2a7a:	fb 01       	movw	r30, r22
    2a7c:	80 83       	st	Z, r24
    2a7e:	08 95       	ret

00002a80 <vMotorMoveLeftBackward>:
    2a80:	87 bd       	out	0x27, r24	; 39
    2a82:	2c 98       	cbi	0x05, 4	; 5
    2a84:	2d 9a       	sbi	0x05, 5	; 5
    2a86:	85 e0       	ldi	r24, 0x05	; 5
    2a88:	fb 01       	movw	r30, r22
    2a8a:	80 83       	st	Z, r24
    2a8c:	08 95       	ret

00002a8e <vMotorMoveRightBackward>:
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2a94:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2a98:	e2 e0       	ldi	r30, 0x02	; 2
    2a9a:	f1 e0       	ldi	r31, 0x01	; 1
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 7b       	andi	r24, 0xBF	; 191
    2aa0:	80 83       	st	Z, r24
    2aa2:	80 81       	ld	r24, Z
    2aa4:	80 62       	ori	r24, 0x20	; 32
    2aa6:	80 83       	st	Z, r24
    2aa8:	85 e0       	ldi	r24, 0x05	; 5
    2aaa:	fb 01       	movw	r30, r22
    2aac:	80 83       	st	Z, r24
    2aae:	08 95       	ret

00002ab0 <vMotorBrakeLeft>:
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	87 bd       	out	0x27, r24	; 39
    2ab4:	2c 98       	cbi	0x05, 4	; 5
    2ab6:	2d 98       	cbi	0x05, 5	; 5
    2ab8:	08 95       	ret

00002aba <vMotorBrakeRight>:
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    2ac2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
    2ac6:	e2 e0       	ldi	r30, 0x02	; 2
    2ac8:	f1 e0       	ldi	r31, 0x01	; 1
    2aca:	80 81       	ld	r24, Z
    2acc:	8f 7b       	andi	r24, 0xBF	; 191
    2ace:	80 83       	st	Z, r24
    2ad0:	80 81       	ld	r24, Z
    2ad2:	8f 7d       	andi	r24, 0xDF	; 223
    2ad4:	80 83       	st	Z, r24
    2ad6:	08 95       	ret

00002ad8 <vMotorMovementSwitch>:
}

/* Switch for robot movement to abstract the logic away from main */

void vMotorMovementSwitch(int16_t leftSpeed, int16_t rightSpeed, uint8_t *leftWheelDirection, uint8_t *rightWheelDirection){
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	eb 01       	movw	r28, r22
    2ae2:	89 01       	movw	r16, r18
    if (leftSpeed > 0){
    2ae4:	18 16       	cp	r1, r24
    2ae6:	19 06       	cpc	r1, r25
    2ae8:	1c f4       	brge	.+6      	; 0x2af0 <vMotorMovementSwitch+0x18>
		vMotorMoveLeftForward(leftSpeed, leftWheelDirection);
    2aea:	ba 01       	movw	r22, r20
    2aec:	b1 df       	rcall	.-158    	; 0x2a50 <vMotorMoveLeftForward>
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <vMotorMovementSwitch+0x26>
    }else if(leftSpeed < 0){
    2af0:	99 23       	and	r25, r25
    2af2:	24 f4       	brge	.+8      	; 0x2afc <vMotorMovementSwitch+0x24>
		vMotorMoveLeftBackward(-leftSpeed,leftWheelDirection);
    2af4:	ba 01       	movw	r22, r20
    2af6:	81 95       	neg	r24
    2af8:	c3 df       	rcall	.-122    	; 0x2a80 <vMotorMoveLeftBackward>
    }else{
		vMotorBrakeLeft();
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <vMotorMovementSwitch+0x26>
    2afc:	d9 df       	rcall	.-78     	; 0x2ab0 <vMotorBrakeLeft>
	}
	
	if (rightSpeed > 0) {
    2afe:	1c 16       	cp	r1, r28
    2b00:	1d 06       	cpc	r1, r29
		vMotorMoveRightForward(rightSpeed,rightWheelDirection);
    2b02:	24 f4       	brge	.+8      	; 0x2b0c <vMotorMovementSwitch+0x34>
    2b04:	b8 01       	movw	r22, r16
    2b06:	8c 2f       	mov	r24, r28
    2b08:	aa df       	rcall	.-172    	; 0x2a5e <vMotorMoveRightForward>
    2b0a:	08 c0       	rjmp	.+16     	; 0x2b1c <vMotorMovementSwitch+0x44>
	}else if (rightSpeed < 0) {
    2b0c:	dd 23       	and	r29, r29
		vMotorMoveRightBackward(-rightSpeed,rightWheelDirection);
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <vMotorMovementSwitch+0x42>
    2b10:	b8 01       	movw	r22, r16
    2b12:	8c 2f       	mov	r24, r28
    2b14:	81 95       	neg	r24
    2b16:	bb df       	rcall	.-138    	; 0x2a8e <vMotorMoveRightBackward>
	}else {
		vMotorBrakeRight();
    2b18:	01 c0       	rjmp	.+2      	; 0x2b1c <vMotorMovementSwitch+0x44>
    2b1a:	cf df       	rcall	.-98     	; 0x2aba <vMotorBrakeRight>
	
	
	
	

}
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	08 95       	ret

00002b26 <vMotorEncoderLeftTickFromISR>:

/* Handle ISR ticks from encoder, Please note that we are losing accuracy here due to division */
void vMotorEncoderLeftTickFromISR(uint8_t wheelDirection, int16_t *leftWheelTicks, uint8_t leftEncoderTicks){
    switch (wheelDirection){
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	19 f0       	breq	.+6      	; 0x2b30 <vMotorEncoderLeftTickFromISR+0xa>
    2b2a:	85 30       	cpi	r24, 0x05	; 5
    2b2c:	51 f0       	breq	.+20     	; 0x2b42 <vMotorEncoderLeftTickFromISR+0x1c>
    2b2e:	08 95       	ret
        case motorLeftForward:{
            *leftWheelTicks += leftEncoderTicks / 2;
    2b30:	46 95       	lsr	r20
    2b32:	fb 01       	movw	r30, r22
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	84 0f       	add	r24, r20
    2b3a:	91 1d       	adc	r25, r1
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	80 83       	st	Z, r24
            break;
    2b40:	08 95       	ret
        }
        case  motorLeftBackward:{
            *leftWheelTicks -= leftEncoderTicks / 2;
    2b42:	46 95       	lsr	r20
    2b44:	fb 01       	movw	r30, r22
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	84 1b       	sub	r24, r20
    2b4c:	91 09       	sbc	r25, r1
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	08 95       	ret

00002b54 <vMotorEncoderRightTickFromISR>:
        // We have a count when the robot is supposedly not moving.
        break;
    }
}
void vMotorEncoderRightTickFromISR(uint8_t wheelDirection, int16_t *rightWheelTicks, uint8_t rightEncoderTicks){
    switch (wheelDirection){
    2b54:	85 30       	cpi	r24, 0x05	; 5
    2b56:	59 f0       	breq	.+22     	; 0x2b6e <vMotorEncoderRightTickFromISR+0x1a>
    2b58:	86 30       	cpi	r24, 0x06	; 6
    2b5a:	89 f4       	brne	.+34     	; 0x2b7e <vMotorEncoderRightTickFromISR+0x2a>
        case motorRightForward:{
            *rightWheelTicks += rightEncoderTicks / 2;
    2b5c:	46 95       	lsr	r20
    2b5e:	fb 01       	movw	r30, r22
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	84 0f       	add	r24, r20
    2b66:	91 1d       	adc	r25, r1
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
            break;
    2b6c:	08 95       	ret
        }
        case  motorRightBackward:{
            *rightWheelTicks -= rightEncoderTicks / 2;
    2b6e:	46 95       	lsr	r20
    2b70:	fb 01       	movw	r30, r22
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	84 1b       	sub	r24, r20
    2b78:	91 09       	sbc	r25, r1
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	08 95       	ret

00002b80 <network_receive>:

uint8_t network_get_address(void) {
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	7c 01       	movw	r14, r24
    2b8e:	8b 01       	movw	r16, r22
   uint8_t *decoded_data = pvPortMalloc(len);
    2b90:	cb 01       	movw	r24, r22
    2b92:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2b96:	ec 01       	movw	r28, r24
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2b98:	98 01       	movw	r18, r16
    2b9a:	21 50       	subi	r18, 0x01	; 1
    2b9c:	31 09       	sbc	r19, r1
    2b9e:	a7 01       	movw	r20, r14
    2ba0:	b8 01       	movw	r22, r16
    2ba2:	0e 94 04 07 	call	0xe08	; 0xe08 <cobs_decode>
   static uint8_t cobs = 0;
   static uint8_t crc = 0;
   if(result.status != COBS_DECODE_OK) {
    2ba6:	88 23       	and	r24, r24
    2ba8:	49 f0       	breq	.+18     	; 0x2bbc <network_receive+0x3c>
	   ++cobs;
    2baa:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <cobs.2028>
    2bae:	8f 5f       	subi	r24, 0xFF	; 255
    2bb0:	80 93 f4 19 	sts	0x19F4, r24	; 0x8019f4 <cobs.2028>
	   vPortFree(decoded_data);
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bba:	33 c0       	rjmp	.+102    	; 0x2c22 <network_receive+0xa2>
  return ADDRESS;
}

void network_receive(uint8_t *frame, uint16_t len) {
   uint8_t *decoded_data = pvPortMalloc(len);
   cobs_decode_result result = cobs_decode(decoded_data, len, frame, len-1);
    2bbc:	86 2f       	mov	r24, r22
    2bbe:	97 2f       	mov	r25, r23
    2bc0:	8c 01       	movw	r16, r24
   if(result.status != COBS_DECODE_OK) {
	   ++cobs;
	   vPortFree(decoded_data);
	   return;
   }
   if(decoded_data[result.out_len-1] != calculate_crc(decoded_data, result.out_len-1) ) {
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e8 0f       	add	r30, r24
    2bc6:	f9 1f       	adc	r31, r25
    2bc8:	31 97       	sbiw	r30, 0x01	; 1
    2bca:	f0 80       	ld	r15, Z
    2bcc:	6f ef       	ldi	r22, 0xFF	; 255
    2bce:	68 0f       	add	r22, r24
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2bd6:	f8 16       	cp	r15, r24
    2bd8:	49 f0       	breq	.+18     	; 0x2bec <network_receive+0x6c>
	   ++crc;
    2bda:	80 91 f3 19 	lds	r24, 0x19F3	; 0x8019f3 <crc.2029>
    2bde:	8f 5f       	subi	r24, 0xFF	; 255
    2be0:	80 93 f3 19 	sts	0x19F3, r24	; 0x8019f3 <crc.2029>
	   vPortFree(decoded_data);
    2be4:	ce 01       	movw	r24, r28
    2be6:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bea:	1b c0       	rjmp	.+54     	; 0x2c22 <network_receive+0xa2>
   }
   uint8_t receiver = decoded_data[0];
   uint8_t sender = decoded_data[1];
   uint8_t protocol = decoded_data[2];
   if(receiver != ADDRESS) {
    2bec:	88 81       	ld	r24, Y
    2bee:	83 30       	cpi	r24, 0x03	; 3
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <network_receive+0x7a>
	   vPortFree(decoded_data);
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
	   return;
    2bf8:	14 c0       	rjmp	.+40     	; 0x2c22 <network_receive+0xa2>
   }
   receive_callbacks[protocol](sender, decoded_data+3, result.out_len-4);
    2bfa:	a8 01       	movw	r20, r16
    2bfc:	44 50       	subi	r20, 0x04	; 4
    2bfe:	51 09       	sbc	r21, r1
    2c00:	be 01       	movw	r22, r28
    2c02:	6d 5f       	subi	r22, 0xFD	; 253
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	ea 81       	ldd	r30, Y+2	; 0x02
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	e5 58       	subi	r30, 0x85	; 133
    2c10:	f4 4e       	sbci	r31, 0xE4	; 228
    2c12:	01 90       	ld	r0, Z+
    2c14:	f0 81       	ld	r31, Z
    2c16:	e0 2d       	mov	r30, r0
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	19 95       	eicall
   vPortFree(decoded_data);
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
}
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	08 95       	ret

00002c30 <network_init>:
void network_receive(uint8_t *frame, uint16_t len);

void (*receive_callbacks[10])(uint8_t, uint8_t*, uint16_t);

void network_init(void) {
  vUSART_set_receive_callback(network_receive);
    2c30:	80 ec       	ldi	r24, 0xC0	; 192
    2c32:	95 e1       	ldi	r25, 0x15	; 21
    2c34:	0c 94 8b 2e 	jmp	0x5d16	; 0x5d16 <vUSART_set_receive_callback>
    2c38:	08 95       	ret

00002c3a <network_set_callback>:
}

void network_set_callback(uint8_t protocol, void (*cb)(uint8_t, uint8_t*, uint16_t)) {
  if(protocol == PROTOCOL_ARQ || protocol == PROTOCOL_SIMPLE) receive_callbacks[protocol] = cb;
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	40 f4       	brcc	.+16     	; 0x2c4e <network_set_callback+0x14>
    2c3e:	e8 2f       	mov	r30, r24
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	e5 58       	subi	r30, 0x85	; 133
    2c48:	f4 4e       	sbci	r31, 0xE4	; 228
    2c4a:	71 83       	std	Z+1, r23	; 0x01
    2c4c:	60 83       	st	Z, r22
    2c4e:	08 95       	ret

00002c50 <network_send>:
}
    
uint8_t network_send(uint8_t remote_address, uint8_t protocol, uint8_t *data, uint16_t len) {
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	88 2e       	mov	r8, r24
    2c6a:	96 2e       	mov	r9, r22
    2c6c:	5a 01       	movw	r10, r20
    2c6e:	89 01       	movw	r16, r18
  uint8_t *packet = pvPortMalloc(len+4);
    2c70:	69 01       	movw	r12, r18
    2c72:	84 e0       	ldi	r24, 0x04	; 4
    2c74:	c8 0e       	add	r12, r24
    2c76:	d1 1c       	adc	r13, r1
    2c78:	c6 01       	movw	r24, r12
    2c7a:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2c7e:	ec 01       	movw	r28, r24
  uint8_t *encoded_data = pvPortMalloc(len+6);
    2c80:	c8 01       	movw	r24, r16
    2c82:	06 96       	adiw	r24, 0x06	; 6
    2c84:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    2c88:	7c 01       	movw	r14, r24
  if(packet == NULL || encoded_data == NULL) {
    2c8a:	20 97       	sbiw	r28, 0x00	; 0
    2c8c:	11 f0       	breq	.+4      	; 0x2c92 <network_send+0x42>
    2c8e:	89 2b       	or	r24, r25
    2c90:	41 f4       	brne	.+16     	; 0x2ca2 <network_send+0x52>
    vPortFree(packet);
    2c92:	ce 01       	movw	r24, r28
    2c94:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2c98:	c7 01       	movw	r24, r14
    2c9a:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	3c c0       	rjmp	.+120    	; 0x2d1a <network_send+0xca>
  }
  packet[0] = remote_address;
    2ca2:	88 82       	st	Y, r8
  packet[1] = ADDRESS;
    2ca4:	83 e0       	ldi	r24, 0x03	; 3
    2ca6:	89 83       	std	Y+1, r24	; 0x01
  packet[2] = protocol;
    2ca8:	9a 82       	std	Y+2, r9	; 0x02
  memcpy(packet+3, data, len);
    2caa:	a8 01       	movw	r20, r16
    2cac:	b5 01       	movw	r22, r10
    2cae:	ce 01       	movw	r24, r28
    2cb0:	03 96       	adiw	r24, 0x03	; 3
    2cb2:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  packet[3+len] = calculate_crc(packet, 3+len);
    2cb6:	58 01       	movw	r10, r16
    2cb8:	e3 e0       	ldi	r30, 0x03	; 3
    2cba:	ae 0e       	add	r10, r30
    2cbc:	b1 1c       	adc	r11, r1
    2cbe:	ac 0e       	add	r10, r28
    2cc0:	bd 1e       	adc	r11, r29
    2cc2:	63 e0       	ldi	r22, 0x03	; 3
    2cc4:	60 0f       	add	r22, r16
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <calculate_crc>
    2ccc:	f5 01       	movw	r30, r10
    2cce:	80 83       	st	Z, r24
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2cd0:	b8 01       	movw	r22, r16
    2cd2:	6b 5f       	subi	r22, 0xFB	; 251
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	96 01       	movw	r18, r12
    2cd8:	ae 01       	movw	r20, r28
    2cda:	c7 01       	movw	r24, r14
    2cdc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <cobs_encode>
  if(result.status != COBS_ENCODE_OK) {
    2ce0:	88 23       	and	r24, r24
    2ce2:	41 f0       	breq	.+16     	; 0x2cf4 <network_send+0xa4>
    vPortFree(packet);
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    vPortFree(encoded_data);
    2cea:	c7 01       	movw	r24, r14
    2cec:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    return 0;
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	13 c0       	rjmp	.+38     	; 0x2d1a <network_send+0xca>
  packet[0] = remote_address;
  packet[1] = ADDRESS;
  packet[2] = protocol;
  memcpy(packet+3, data, len);
  packet[3+len] = calculate_crc(packet, 3+len);
  cobs_encode_result result = cobs_encode(encoded_data, len+5, packet, len+4);
    2cf4:	86 2f       	mov	r24, r22
    2cf6:	97 2f       	mov	r25, r23
  if(result.status != COBS_ENCODE_OK) {
    vPortFree(packet);
    vPortFree(encoded_data);
    return 0;
  }
  encoded_data[result.out_len] = 0x00;
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	e8 0f       	add	r30, r24
    2cfc:	f9 1f       	adc	r31, r25
    2cfe:	10 82       	st	Z, r1
  vUSART_send(encoded_data, result.out_len+1);
    2d00:	bc 01       	movw	r22, r24
    2d02:	6f 5f       	subi	r22, 0xFF	; 255
    2d04:	7f 4f       	sbci	r23, 0xFF	; 255
    2d06:	c7 01       	movw	r24, r14
    2d08:	0e 94 67 2e 	call	0x5cce	; 0x5cce <vUSART_send>
  vPortFree(packet);
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  vPortFree(encoded_data);
    2d12:	c7 01       	movw	r24, r14
    2d14:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
}
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	bf 90       	pop	r11
    2d2c:	af 90       	pop	r10
    2d2e:	9f 90       	pop	r9
    2d30:	8f 90       	pop	r8
    2d32:	08 95       	ret

00002d34 <pxPortInitialiseStack>:
#elif defined( portUSE_TIMER2 )
	portTIMSK &= ~( _BV(OCIE2B)|_BV(OCIE2A)|_BV(TOIE2) );	// disable all Timer2 interrupts
    ASSR = 0x00;              								// set Timer/Counter2 to be off

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts
    2d34:	31 e1       	ldi	r19, 0x11	; 17
    2d36:	fc 01       	movw	r30, r24
    2d38:	30 83       	st	Z, r19
    2d3a:	31 97       	sbiw	r30, 0x01	; 1
    2d3c:	22 e2       	ldi	r18, 0x22	; 34
    2d3e:	20 83       	st	Z, r18
    2d40:	31 97       	sbiw	r30, 0x01	; 1
    2d42:	a3 e3       	ldi	r26, 0x33	; 51
    2d44:	a0 83       	st	Z, r26
    2d46:	31 97       	sbiw	r30, 0x01	; 1
    2d48:	60 83       	st	Z, r22
    2d4a:	31 97       	sbiw	r30, 0x01	; 1
    2d4c:	70 83       	st	Z, r23
    2d4e:	31 97       	sbiw	r30, 0x01	; 1
    2d50:	10 82       	st	Z, r1
    2d52:	31 97       	sbiw	r30, 0x01	; 1
    2d54:	10 82       	st	Z, r1
    2d56:	31 97       	sbiw	r30, 0x01	; 1
    2d58:	60 e8       	ldi	r22, 0x80	; 128
    2d5a:	60 83       	st	Z, r22
    2d5c:	31 97       	sbiw	r30, 0x01	; 1
    2d5e:	10 82       	st	Z, r1
    2d60:	31 97       	sbiw	r30, 0x01	; 1
    2d62:	10 82       	st	Z, r1
    2d64:	31 97       	sbiw	r30, 0x01	; 1
    2d66:	10 82       	st	Z, r1
    2d68:	31 97       	sbiw	r30, 0x01	; 1
    2d6a:	62 e0       	ldi	r22, 0x02	; 2
    2d6c:	60 83       	st	Z, r22
    2d6e:	31 97       	sbiw	r30, 0x01	; 1
    2d70:	63 e0       	ldi	r22, 0x03	; 3
    2d72:	60 83       	st	Z, r22
    2d74:	31 97       	sbiw	r30, 0x01	; 1
    2d76:	64 e0       	ldi	r22, 0x04	; 4
    2d78:	60 83       	st	Z, r22
    2d7a:	31 97       	sbiw	r30, 0x01	; 1
    2d7c:	65 e0       	ldi	r22, 0x05	; 5
    2d7e:	60 83       	st	Z, r22
    2d80:	31 97       	sbiw	r30, 0x01	; 1
    2d82:	66 e0       	ldi	r22, 0x06	; 6
    2d84:	60 83       	st	Z, r22
    2d86:	31 97       	sbiw	r30, 0x01	; 1
    2d88:	67 e0       	ldi	r22, 0x07	; 7
    2d8a:	60 83       	st	Z, r22
    2d8c:	31 97       	sbiw	r30, 0x01	; 1
    2d8e:	68 e0       	ldi	r22, 0x08	; 8
    2d90:	60 83       	st	Z, r22
    2d92:	31 97       	sbiw	r30, 0x01	; 1
    2d94:	69 e0       	ldi	r22, 0x09	; 9
    2d96:	60 83       	st	Z, r22
    2d98:	31 97       	sbiw	r30, 0x01	; 1
    2d9a:	60 e1       	ldi	r22, 0x10	; 16
    2d9c:	60 83       	st	Z, r22
    2d9e:	31 97       	sbiw	r30, 0x01	; 1
    2da0:	30 83       	st	Z, r19
    2da2:	31 97       	sbiw	r30, 0x01	; 1
    2da4:	32 e1       	ldi	r19, 0x12	; 18
    2da6:	30 83       	st	Z, r19
    2da8:	31 97       	sbiw	r30, 0x01	; 1
    2daa:	33 e1       	ldi	r19, 0x13	; 19
    2dac:	30 83       	st	Z, r19
    2dae:	31 97       	sbiw	r30, 0x01	; 1
    2db0:	34 e1       	ldi	r19, 0x14	; 20
    2db2:	30 83       	st	Z, r19
    2db4:	31 97       	sbiw	r30, 0x01	; 1
    2db6:	35 e1       	ldi	r19, 0x15	; 21
    2db8:	30 83       	st	Z, r19
    2dba:	31 97       	sbiw	r30, 0x01	; 1
    2dbc:	36 e1       	ldi	r19, 0x16	; 22
    2dbe:	30 83       	st	Z, r19
    2dc0:	31 97       	sbiw	r30, 0x01	; 1
    2dc2:	37 e1       	ldi	r19, 0x17	; 23
    2dc4:	30 83       	st	Z, r19
    2dc6:	31 97       	sbiw	r30, 0x01	; 1
    2dc8:	38 e1       	ldi	r19, 0x18	; 24
    2dca:	30 83       	st	Z, r19
    2dcc:	31 97       	sbiw	r30, 0x01	; 1
    2dce:	39 e1       	ldi	r19, 0x19	; 25
    2dd0:	30 83       	st	Z, r19
    2dd2:	31 97       	sbiw	r30, 0x01	; 1
    2dd4:	30 e2       	ldi	r19, 0x20	; 32
    2dd6:	30 83       	st	Z, r19
    2dd8:	31 97       	sbiw	r30, 0x01	; 1
    2dda:	31 e2       	ldi	r19, 0x21	; 33
    2ddc:	30 83       	st	Z, r19
    2dde:	31 97       	sbiw	r30, 0x01	; 1
    2de0:	20 83       	st	Z, r18
    2de2:	31 97       	sbiw	r30, 0x01	; 1
    2de4:	23 e2       	ldi	r18, 0x23	; 35
    2de6:	20 83       	st	Z, r18
    2de8:	31 97       	sbiw	r30, 0x01	; 1
    2dea:	40 83       	st	Z, r20
    2dec:	31 97       	sbiw	r30, 0x01	; 1
    2dee:	50 83       	st	Z, r21
    2df0:	31 97       	sbiw	r30, 0x01	; 1
    2df2:	26 e2       	ldi	r18, 0x26	; 38
    2df4:	20 83       	st	Z, r18
    2df6:	31 97       	sbiw	r30, 0x01	; 1
    2df8:	27 e2       	ldi	r18, 0x27	; 39
    2dfa:	20 83       	st	Z, r18
    2dfc:	31 97       	sbiw	r30, 0x01	; 1
    2dfe:	28 e2       	ldi	r18, 0x28	; 40
    2e00:	20 83       	st	Z, r18
    2e02:	31 97       	sbiw	r30, 0x01	; 1
    2e04:	29 e2       	ldi	r18, 0x29	; 41
    2e06:	20 83       	st	Z, r18
    2e08:	31 97       	sbiw	r30, 0x01	; 1
    2e0a:	20 e3       	ldi	r18, 0x30	; 48
    2e0c:	20 83       	st	Z, r18
    2e0e:	31 97       	sbiw	r30, 0x01	; 1
    2e10:	21 e3       	ldi	r18, 0x31	; 49
    2e12:	20 83       	st	Z, r18
    2e14:	89 97       	sbiw	r24, 0x29	; 41
    2e16:	08 95       	ret

00002e18 <xPortStartScheduler>:
    2e18:	88 ee       	ldi	r24, 0xE8	; 232
    2e1a:	93 e0       	ldi	r25, 0x03	; 3
    2e1c:	90 93 90 1b 	sts	0x1B90, r25	; 0x801b90 <portTickRateHz+0x1>
    2e20:	80 93 8f 1b 	sts	0x1B8F, r24	; 0x801b8f <portTickRateHz>
    2e24:	90 93 92 1b 	sts	0x1B92, r25	; 0x801b92 <ticksRemainingInSec+0x1>
    2e28:	80 93 91 1b 	sts	0x1B91, r24	; 0x801b91 <ticksRemainingInSec>
    2e2c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2e30:	89 ef       	ldi	r24, 0xF9	; 249
    2e32:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
    2e36:	8b e0       	ldi	r24, 0x0B	; 11
    2e38:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2e3c:	e1 e7       	ldi	r30, 0x71	; 113
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	82 60       	ori	r24, 0x02	; 2
    2e44:	80 83       	st	Z, r24
    2e46:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    2e4a:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    2e4e:	cd 91       	ld	r28, X+
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	dd 91       	ld	r29, X+
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	ff 91       	pop	r31
    2e58:	ef 91       	pop	r30
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	bf 91       	pop	r27
    2e60:	af 91       	pop	r26
    2e62:	9f 91       	pop	r25
    2e64:	8f 91       	pop	r24
    2e66:	7f 91       	pop	r23
    2e68:	6f 91       	pop	r22
    2e6a:	5f 91       	pop	r21
    2e6c:	4f 91       	pop	r20
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	bf 90       	pop	r11
    2e80:	af 90       	pop	r10
    2e82:	9f 90       	pop	r9
    2e84:	8f 90       	pop	r8
    2e86:	7f 90       	pop	r7
    2e88:	6f 90       	pop	r6
    2e8a:	5f 90       	pop	r5
    2e8c:	4f 90       	pop	r4
    2e8e:	3f 90       	pop	r3
    2e90:	2f 90       	pop	r2
    2e92:	1f 90       	pop	r1
    2e94:	0f 90       	pop	r0
    2e96:	0c be       	out	0x3c, r0	; 60
    2e98:	0f 90       	pop	r0
    2e9a:	0b be       	out	0x3b, r0	; 59
    2e9c:	0f 90       	pop	r0
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	0f 90       	pop	r0
    2ea2:	08 95       	ret
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	08 95       	ret

00002ea8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2ea8:	0f 92       	push	r0
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	0f 92       	push	r0
    2eb0:	0b b6       	in	r0, 0x3b	; 59
    2eb2:	0f 92       	push	r0
    2eb4:	0c b6       	in	r0, 0x3c	; 60
    2eb6:	0f 92       	push	r0
    2eb8:	1f 92       	push	r1
    2eba:	11 24       	eor	r1, r1
    2ebc:	2f 92       	push	r2
    2ebe:	3f 92       	push	r3
    2ec0:	4f 92       	push	r4
    2ec2:	5f 92       	push	r5
    2ec4:	6f 92       	push	r6
    2ec6:	7f 92       	push	r7
    2ec8:	8f 92       	push	r8
    2eca:	9f 92       	push	r9
    2ecc:	af 92       	push	r10
    2ece:	bf 92       	push	r11
    2ed0:	cf 92       	push	r12
    2ed2:	df 92       	push	r13
    2ed4:	ef 92       	push	r14
    2ed6:	ff 92       	push	r15
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	2f 93       	push	r18
    2ede:	3f 93       	push	r19
    2ee0:	4f 93       	push	r20
    2ee2:	5f 93       	push	r21
    2ee4:	6f 93       	push	r22
    2ee6:	7f 93       	push	r23
    2ee8:	8f 93       	push	r24
    2eea:	9f 93       	push	r25
    2eec:	af 93       	push	r26
    2eee:	bf 93       	push	r27
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	ef 93       	push	r30
    2ef6:	ff 93       	push	r31
    2ef8:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    2efc:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    2f00:	0d b6       	in	r0, 0x3d	; 61
    2f02:	0d 92       	st	X+, r0
    2f04:	0e b6       	in	r0, 0x3e	; 62
    2f06:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2f08:	0e 94 c8 28 	call	0x5190	; 0x5190 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2f0c:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    2f10:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    2f14:	cd 91       	ld	r28, X+
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	dd 91       	ld	r29, X+
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	ff 91       	pop	r31
    2f1e:	ef 91       	pop	r30
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	bf 91       	pop	r27
    2f26:	af 91       	pop	r26
    2f28:	9f 91       	pop	r25
    2f2a:	8f 91       	pop	r24
    2f2c:	7f 91       	pop	r23
    2f2e:	6f 91       	pop	r22
    2f30:	5f 91       	pop	r21
    2f32:	4f 91       	pop	r20
    2f34:	3f 91       	pop	r19
    2f36:	2f 91       	pop	r18
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	9f 90       	pop	r9
    2f4a:	8f 90       	pop	r8
    2f4c:	7f 90       	pop	r7
    2f4e:	6f 90       	pop	r6
    2f50:	5f 90       	pop	r5
    2f52:	4f 90       	pop	r4
    2f54:	3f 90       	pop	r3
    2f56:	2f 90       	pop	r2
    2f58:	1f 90       	pop	r1
    2f5a:	0f 90       	pop	r0
    2f5c:	0c be       	out	0x3c, r0	; 60
    2f5e:	0f 90       	pop	r0
    2f60:	0b be       	out	0x3b, r0	; 59
    2f62:	0f 90       	pop	r0
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    2f68:	08 95       	ret

00002f6a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	0f 92       	push	r0
    2f72:	0b b6       	in	r0, 0x3b	; 59
    2f74:	0f 92       	push	r0
    2f76:	0c b6       	in	r0, 0x3c	; 60
    2f78:	0f 92       	push	r0
    2f7a:	1f 92       	push	r1
    2f7c:	11 24       	eor	r1, r1
    2f7e:	2f 92       	push	r2
    2f80:	3f 92       	push	r3
    2f82:	4f 92       	push	r4
    2f84:	5f 92       	push	r5
    2f86:	6f 92       	push	r6
    2f88:	7f 92       	push	r7
    2f8a:	8f 92       	push	r8
    2f8c:	9f 92       	push	r9
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	2f 93       	push	r18
    2fa0:	3f 93       	push	r19
    2fa2:	4f 93       	push	r20
    2fa4:	5f 93       	push	r21
    2fa6:	6f 93       	push	r22
    2fa8:	7f 93       	push	r23
    2faa:	8f 93       	push	r24
    2fac:	9f 93       	push	r25
    2fae:	af 93       	push	r26
    2fb0:	bf 93       	push	r27
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	ef 93       	push	r30
    2fb8:	ff 93       	push	r31
    2fba:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    2fbe:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    2fc2:	0d b6       	in	r0, 0x3d	; 61
    2fc4:	0d 92       	st	X+, r0
    2fc6:	0e b6       	in	r0, 0x3e	; 62
    2fc8:	0d 92       	st	X+, r0

	sleep_reset();		//	 reset the sleep_mode() faster than sleep_disable();
    2fca:	13 be       	out	0x33, r1	; 51
	// start mark - check for start of interrupt - for debugging only
	PORTD |=  _BV(PORTD7);				// Ping IO line.
#endif

#if !defined(portUSE_TIMER2_RTC)
	if (--ticksRemainingInSec == 0)
    2fcc:	80 91 91 1b 	lds	r24, 0x1B91	; 0x801b91 <ticksRemainingInSec>
    2fd0:	90 91 92 1b 	lds	r25, 0x1B92	; 0x801b92 <ticksRemainingInSec+0x1>
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	90 93 92 1b 	sts	0x1B92, r25	; 0x801b92 <ticksRemainingInSec+0x1>
    2fda:	80 93 91 1b 	sts	0x1B91, r24	; 0x801b91 <ticksRemainingInSec>
    2fde:	89 2b       	or	r24, r25
    2fe0:	41 f4       	brne	.+16     	; 0x2ff2 <vPortYieldFromTick+0x88>
	{
		//system_tick();
		ticksRemainingInSec = portTickRateHz;
    2fe2:	80 91 8f 1b 	lds	r24, 0x1B8F	; 0x801b8f <portTickRateHz>
    2fe6:	90 91 90 1b 	lds	r25, 0x1B90	; 0x801b90 <portTickRateHz+0x1>
    2fea:	90 93 92 1b 	sts	0x1B92, r25	; 0x801b92 <ticksRemainingInSec+0x1>
    2fee:	80 93 91 1b 	sts	0x1B91, r24	; 0x801b91 <ticksRemainingInSec>
	}
#endif

	if( xTaskIncrementTick() != pdFALSE )
    2ff2:	0e 94 07 28 	call	0x500e	; 0x500e <xTaskIncrementTick>
    2ff6:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    2ff8:	0e 94 c8 28 	call	0x5190	; 0x5190 <vTaskSwitchContext>
#if defined(DEBUG_PING)
	// end mark - check for end of interrupt - for debugging only
	PORTD &= ~_BV(PORTD7);
#endif

	portRESTORE_CONTEXT();
    2ffc:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    3000:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    3004:	cd 91       	ld	r28, X+
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	dd 91       	ld	r29, X+
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	ff 91       	pop	r31
    300e:	ef 91       	pop	r30
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	bf 91       	pop	r27
    3016:	af 91       	pop	r26
    3018:	9f 91       	pop	r25
    301a:	8f 91       	pop	r24
    301c:	7f 91       	pop	r23
    301e:	6f 91       	pop	r22
    3020:	5f 91       	pop	r21
    3022:	4f 91       	pop	r20
    3024:	3f 91       	pop	r19
    3026:	2f 91       	pop	r18
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	df 90       	pop	r13
    3032:	cf 90       	pop	r12
    3034:	bf 90       	pop	r11
    3036:	af 90       	pop	r10
    3038:	9f 90       	pop	r9
    303a:	8f 90       	pop	r8
    303c:	7f 90       	pop	r7
    303e:	6f 90       	pop	r6
    3040:	5f 90       	pop	r5
    3042:	4f 90       	pop	r4
    3044:	3f 90       	pop	r3
    3046:	2f 90       	pop	r2
    3048:	1f 90       	pop	r1
    304a:	0f 90       	pop	r0
    304c:	0c be       	out	0x3c, r0	; 60
    304e:	0f 90       	pop	r0
    3050:	0b be       	out	0x3b, r0	; 59
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
    3058:	08 95       	ret

0000305a <__vector_32>:
	 */
//	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
	ISR(portSCHEDULER_ISR)
	{
		vPortYieldFromTick();
    305a:	87 df       	rcall	.-242    	; 0x2f6a <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
    305c:	18 95       	reti

0000305e <xQueueGenericCreate>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	08 2f       	mov	r16, r24
    3068:	16 2f       	mov	r17, r22
    306a:	66 23       	and	r22, r22
    306c:	09 f4       	brne	.+2      	; 0x3070 <xQueueGenericCreate+0x12>
    306e:	3b c0       	rjmp	.+118    	; 0x30e6 <xQueueGenericCreate+0x88>
    3070:	86 9f       	mul	r24, r22
    3072:	c0 01       	movw	r24, r0
    3074:	11 24       	eor	r1, r1
    3076:	80 96       	adiw	r24, 0x20	; 32
    3078:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    307c:	ec 01       	movw	r28, r24
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	21 f4       	brne	.+8      	; 0x308a <xQueueGenericCreate+0x2c>
    3082:	39 c0       	rjmp	.+114    	; 0x30f6 <xQueueGenericCreate+0x98>
    3084:	d9 83       	std	Y+1, r29	; 0x01
    3086:	c8 83       	st	Y, r28
    3088:	03 c0       	rjmp	.+6      	; 0x3090 <xQueueGenericCreate+0x32>
    308a:	4f 96       	adiw	r24, 0x1f	; 31
    308c:	99 83       	std	Y+1, r25	; 0x01
    308e:	88 83       	st	Y, r24
    3090:	0b 8f       	std	Y+27, r16	; 0x1b
    3092:	1c 8f       	std	Y+28, r17	; 0x1c
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	0f 92       	push	r0
    309a:	48 81       	ld	r20, Y
    309c:	59 81       	ldd	r21, Y+1	; 0x01
    309e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    30a4:	62 9f       	mul	r22, r18
    30a6:	c0 01       	movw	r24, r0
    30a8:	63 9f       	mul	r22, r19
    30aa:	90 0d       	add	r25, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	ba 01       	movw	r22, r20
    30b0:	68 0f       	add	r22, r24
    30b2:	79 1f       	adc	r23, r25
    30b4:	7b 83       	std	Y+3, r23	; 0x03
    30b6:	6a 83       	std	Y+2, r22	; 0x02
    30b8:	1a 8e       	std	Y+26, r1	; 0x1a
    30ba:	5d 83       	std	Y+5, r21	; 0x05
    30bc:	4c 83       	std	Y+4, r20	; 0x04
    30be:	82 1b       	sub	r24, r18
    30c0:	93 0b       	sbc	r25, r19
    30c2:	84 0f       	add	r24, r20
    30c4:	95 1f       	adc	r25, r21
    30c6:	9f 83       	std	Y+7, r25	; 0x07
    30c8:	8e 83       	std	Y+6, r24	; 0x06
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
    30cc:	8d 8f       	std	Y+29, r24	; 0x1d
    30ce:	8e 8f       	std	Y+30, r24	; 0x1e
    30d0:	ce 01       	movw	r24, r28
    30d2:	08 96       	adiw	r24, 0x08	; 8
    30d4:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    30d8:	ce 01       	movw	r24, r28
    30da:	41 96       	adiw	r24, 0x11	; 17
    30dc:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    30e0:	0f 90       	pop	r0
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <xQueueGenericCreate+0x98>
    30e6:	8f e1       	ldi	r24, 0x1F	; 31
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    30ee:	ec 01       	movw	r28, r24
    30f0:	89 2b       	or	r24, r25
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <xQueueGenericCreate+0x98>
    30f4:	c7 cf       	rjmp	.-114    	; 0x3084 <xQueueGenericCreate+0x26>
    30f6:	ce 01       	movw	r24, r28
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	08 95       	ret

00003102 <xQueueCreateMutex>:
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	00 d0       	rcall	.+0      	; 0x311a <xQueueCreateMutex+0x18>
    311a:	1f 92       	push	r1
    311c:	1f 92       	push	r1
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	8f e1       	ldi	r24, 0x1F	; 31
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    312a:	8c 01       	movw	r16, r24
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	09 f4       	brne	.+2      	; 0x3132 <xQueueCreateMutex+0x30>
    3130:	58 c1       	rjmp	.+688    	; 0x33e2 <xQueueCreateMutex+0x2e0>
    3132:	fc 01       	movw	r30, r24
    3134:	13 82       	std	Z+3, r1	; 0x03
    3136:	12 82       	std	Z+2, r1	; 0x02
    3138:	11 82       	std	Z+1, r1	; 0x01
    313a:	10 82       	st	Z, r1
    313c:	15 82       	std	Z+5, r1	; 0x05
    313e:	14 82       	std	Z+4, r1	; 0x04
    3140:	17 82       	std	Z+7, r1	; 0x07
    3142:	16 82       	std	Z+6, r1	; 0x06
    3144:	12 8e       	std	Z+26, r1	; 0x1a
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	83 8f       	std	Z+27, r24	; 0x1b
    314a:	14 8e       	std	Z+28, r1	; 0x1c
    314c:	8f ef       	ldi	r24, 0xFF	; 255
    314e:	85 8f       	std	Z+29, r24	; 0x1d
    3150:	86 8f       	std	Z+30, r24	; 0x1e
    3152:	78 01       	movw	r14, r16
    3154:	f8 e0       	ldi	r31, 0x08	; 8
    3156:	ef 0e       	add	r14, r31
    3158:	f1 1c       	adc	r15, r1
    315a:	c7 01       	movw	r24, r14
    315c:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    3160:	68 01       	movw	r12, r16
    3162:	81 e1       	ldi	r24, 0x11	; 17
    3164:	c8 0e       	add	r12, r24
    3166:	d1 1c       	adc	r13, r1
    3168:	c6 01       	movw	r24, r12
    316a:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    316e:	1d 82       	std	Y+5, r1	; 0x05
    3170:	1c 82       	std	Y+4, r1	; 0x04
    3172:	a1 2c       	mov	r10, r1
    3174:	99 24       	eor	r9, r9
    3176:	93 94       	inc	r9
    3178:	bb 24       	eor	r11, r11
    317a:	ba 94       	dec	r11
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	0f 92       	push	r0
    3182:	f8 01       	movw	r30, r16
    3184:	92 8d       	ldd	r25, Z+26	; 0x1a
    3186:	83 8d       	ldd	r24, Z+27	; 0x1b
    3188:	98 17       	cp	r25, r24
    318a:	f0 f4       	brcc	.+60     	; 0x31c8 <xQueueCreateMutex+0xc6>
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	89 2b       	or	r24, r25
    3192:	09 f0       	breq	.+2      	; 0x3196 <xQueueCreateMutex+0x94>
    3194:	1d c1       	rjmp	.+570    	; 0x33d0 <xQueueCreateMutex+0x2ce>
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	0e 94 a4 2a 	call	0x5548	; 0x5548 <xTaskPriorityDisinherit>
    319e:	f8 01       	movw	r30, r16
    31a0:	13 82       	std	Z+3, r1	; 0x03
    31a2:	12 82       	std	Z+2, r1	; 0x02
    31a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    31a6:	9f 5f       	subi	r25, 0xFF	; 255
    31a8:	92 8f       	std	Z+26, r25	; 0x1a
    31aa:	91 89       	ldd	r25, Z+17	; 0x11
    31ac:	99 23       	and	r25, r25
    31ae:	39 f0       	breq	.+14     	; 0x31be <xQueueCreateMutex+0xbc>
    31b0:	c6 01       	movw	r24, r12
    31b2:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	21 f4       	brne	.+8      	; 0x31c2 <xQueueCreateMutex+0xc0>
    31ba:	76 de       	rcall	.-788    	; 0x2ea8 <vPortYield>
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <xQueueCreateMutex+0xc0>
    31be:	81 11       	cpse	r24, r1
    31c0:	73 de       	rcall	.-794    	; 0x2ea8 <vPortYield>
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0d c1       	rjmp	.+538    	; 0x33e2 <xQueueCreateMutex+0x2e0>
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ca:	9d 81       	ldd	r25, Y+5	; 0x05
    31cc:	89 2b       	or	r24, r25
    31ce:	19 f4       	brne	.+6      	; 0x31d6 <xQueueCreateMutex+0xd4>
    31d0:	0f 90       	pop	r0
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	06 c1       	rjmp	.+524    	; 0x33e2 <xQueueCreateMutex+0x2e0>
    31d6:	a1 10       	cpse	r10, r1
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <xQueueCreateMutex+0xe2>
    31da:	ce 01       	movw	r24, r28
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <vTaskSetTimeOutState>
    31e2:	a9 2c       	mov	r10, r9
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	0f 92       	push	r0
    31f2:	f8 01       	movw	r30, r16
    31f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    31f6:	8f 3f       	cpi	r24, 0xFF	; 255
    31f8:	09 f4       	brne	.+2      	; 0x31fc <xQueueCreateMutex+0xfa>
    31fa:	15 8e       	std	Z+29, r1	; 0x1d
    31fc:	f8 01       	movw	r30, r16
    31fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3200:	8f 3f       	cpi	r24, 0xFF	; 255
    3202:	09 f4       	brne	.+2      	; 0x3206 <xQueueCreateMutex+0x104>
    3204:	16 8e       	std	Z+30, r1	; 0x1e
    3206:	0f 90       	pop	r0
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	be 01       	movw	r22, r28
    320c:	6c 5f       	subi	r22, 0xFC	; 252
    320e:	7f 4f       	sbci	r23, 0xFF	; 255
    3210:	ce 01       	movw	r24, r28
    3212:	01 96       	adiw	r24, 0x01	; 1
    3214:	0e 94 fe 29 	call	0x53fc	; 0x53fc <xTaskCheckForTimeOut>
    3218:	81 11       	cpse	r24, r1
    321a:	96 c0       	rjmp	.+300    	; 0x3348 <xQueueCreateMutex+0x246>
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	0f 92       	push	r0
    3222:	f8 01       	movw	r30, r16
    3224:	92 8d       	ldd	r25, Z+26	; 0x1a
    3226:	83 8d       	ldd	r24, Z+27	; 0x1b
    3228:	0f 90       	pop	r0
    322a:	0f be       	out	0x3f, r0	; 63
    322c:	98 13       	cpse	r25, r24
    322e:	4a c0       	rjmp	.+148    	; 0x32c4 <xQueueCreateMutex+0x1c2>
    3230:	6c 81       	ldd	r22, Y+4	; 0x04
    3232:	7d 81       	ldd	r23, Y+5	; 0x05
    3234:	c7 01       	movw	r24, r14
    3236:	0e 94 50 29 	call	0x52a0	; 0x52a0 <vTaskPlaceOnEventList>
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	0f 92       	push	r0
    3240:	f8 01       	movw	r30, r16
    3242:	86 8d       	ldd	r24, Z+30	; 0x1e
    3244:	18 16       	cp	r1, r24
    3246:	ac f4       	brge	.+42     	; 0x3272 <xQueueCreateMutex+0x170>
    3248:	81 89       	ldd	r24, Z+17	; 0x11
    324a:	81 11       	cpse	r24, r1
    324c:	05 c0       	rjmp	.+10     	; 0x3258 <xQueueCreateMutex+0x156>
    324e:	11 c0       	rjmp	.+34     	; 0x3272 <xQueueCreateMutex+0x170>
    3250:	f8 01       	movw	r30, r16
    3252:	81 89       	ldd	r24, Z+17	; 0x11
    3254:	88 23       	and	r24, r24
    3256:	69 f0       	breq	.+26     	; 0x3272 <xQueueCreateMutex+0x170>
    3258:	c6 01       	movw	r24, r12
    325a:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    325e:	81 11       	cpse	r24, r1
    3260:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    3264:	f8 01       	movw	r30, r16
    3266:	86 8d       	ldd	r24, Z+30	; 0x1e
    3268:	81 50       	subi	r24, 0x01	; 1
    326a:	86 8f       	std	Z+30, r24	; 0x1e
    326c:	86 8d       	ldd	r24, Z+30	; 0x1e
    326e:	18 16       	cp	r1, r24
    3270:	7c f3       	brlt	.-34     	; 0x3250 <xQueueCreateMutex+0x14e>
    3272:	f8 01       	movw	r30, r16
    3274:	b6 8e       	std	Z+30, r11	; 0x1e
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	0f 92       	push	r0
    3280:	85 8d       	ldd	r24, Z+29	; 0x1d
    3282:	18 16       	cp	r1, r24
    3284:	ac f4       	brge	.+42     	; 0x32b0 <xQueueCreateMutex+0x1ae>
    3286:	80 85       	ldd	r24, Z+8	; 0x08
    3288:	81 11       	cpse	r24, r1
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <xQueueCreateMutex+0x194>
    328c:	11 c0       	rjmp	.+34     	; 0x32b0 <xQueueCreateMutex+0x1ae>
    328e:	f8 01       	movw	r30, r16
    3290:	80 85       	ldd	r24, Z+8	; 0x08
    3292:	88 23       	and	r24, r24
    3294:	69 f0       	breq	.+26     	; 0x32b0 <xQueueCreateMutex+0x1ae>
    3296:	c7 01       	movw	r24, r14
    3298:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    329c:	81 11       	cpse	r24, r1
    329e:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    32a2:	f8 01       	movw	r30, r16
    32a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    32a6:	81 50       	subi	r24, 0x01	; 1
    32a8:	85 8f       	std	Z+29, r24	; 0x1d
    32aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    32ac:	18 16       	cp	r1, r24
    32ae:	7c f3       	brlt	.-34     	; 0x328e <xQueueCreateMutex+0x18c>
    32b0:	f8 01       	movw	r30, r16
    32b2:	b5 8e       	std	Z+29, r11	; 0x1d
    32b4:	0f 90       	pop	r0
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    32bc:	81 11       	cpse	r24, r1
    32be:	5e cf       	rjmp	.-324    	; 0x317c <xQueueCreateMutex+0x7a>
    32c0:	f3 dd       	rcall	.-1050   	; 0x2ea8 <vPortYield>
    32c2:	5c cf       	rjmp	.-328    	; 0x317c <xQueueCreateMutex+0x7a>
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	0f 92       	push	r0
    32ca:	f8 01       	movw	r30, r16
    32cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    32ce:	18 16       	cp	r1, r24
    32d0:	ac f4       	brge	.+42     	; 0x32fc <xQueueCreateMutex+0x1fa>
    32d2:	81 89       	ldd	r24, Z+17	; 0x11
    32d4:	81 11       	cpse	r24, r1
    32d6:	05 c0       	rjmp	.+10     	; 0x32e2 <xQueueCreateMutex+0x1e0>
    32d8:	11 c0       	rjmp	.+34     	; 0x32fc <xQueueCreateMutex+0x1fa>
    32da:	f8 01       	movw	r30, r16
    32dc:	81 89       	ldd	r24, Z+17	; 0x11
    32de:	88 23       	and	r24, r24
    32e0:	69 f0       	breq	.+26     	; 0x32fc <xQueueCreateMutex+0x1fa>
    32e2:	c6 01       	movw	r24, r12
    32e4:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    32e8:	81 11       	cpse	r24, r1
    32ea:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    32ee:	f8 01       	movw	r30, r16
    32f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    32f2:	81 50       	subi	r24, 0x01	; 1
    32f4:	86 8f       	std	Z+30, r24	; 0x1e
    32f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    32f8:	18 16       	cp	r1, r24
    32fa:	7c f3       	brlt	.-34     	; 0x32da <xQueueCreateMutex+0x1d8>
    32fc:	f8 01       	movw	r30, r16
    32fe:	b6 8e       	std	Z+30, r11	; 0x1e
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	0f b6       	in	r0, 0x3f	; 63
    3306:	f8 94       	cli
    3308:	0f 92       	push	r0
    330a:	85 8d       	ldd	r24, Z+29	; 0x1d
    330c:	18 16       	cp	r1, r24
    330e:	ac f4       	brge	.+42     	; 0x333a <xQueueCreateMutex+0x238>
    3310:	80 85       	ldd	r24, Z+8	; 0x08
    3312:	81 11       	cpse	r24, r1
    3314:	05 c0       	rjmp	.+10     	; 0x3320 <xQueueCreateMutex+0x21e>
    3316:	11 c0       	rjmp	.+34     	; 0x333a <xQueueCreateMutex+0x238>
    3318:	f8 01       	movw	r30, r16
    331a:	80 85       	ldd	r24, Z+8	; 0x08
    331c:	88 23       	and	r24, r24
    331e:	69 f0       	breq	.+26     	; 0x333a <xQueueCreateMutex+0x238>
    3320:	c7 01       	movw	r24, r14
    3322:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3326:	81 11       	cpse	r24, r1
    3328:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    332c:	f8 01       	movw	r30, r16
    332e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3330:	81 50       	subi	r24, 0x01	; 1
    3332:	85 8f       	std	Z+29, r24	; 0x1d
    3334:	85 8d       	ldd	r24, Z+29	; 0x1d
    3336:	18 16       	cp	r1, r24
    3338:	7c f3       	brlt	.-34     	; 0x3318 <xQueueCreateMutex+0x216>
    333a:	f8 01       	movw	r30, r16
    333c:	b5 8e       	std	Z+29, r11	; 0x1d
    333e:	0f 90       	pop	r0
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    3346:	1a cf       	rjmp	.-460    	; 0x317c <xQueueCreateMutex+0x7a>
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	0f 92       	push	r0
    334e:	f8 01       	movw	r30, r16
    3350:	86 8d       	ldd	r24, Z+30	; 0x1e
    3352:	18 16       	cp	r1, r24
    3354:	ac f4       	brge	.+42     	; 0x3380 <xQueueCreateMutex+0x27e>
    3356:	81 89       	ldd	r24, Z+17	; 0x11
    3358:	81 11       	cpse	r24, r1
    335a:	05 c0       	rjmp	.+10     	; 0x3366 <xQueueCreateMutex+0x264>
    335c:	11 c0       	rjmp	.+34     	; 0x3380 <xQueueCreateMutex+0x27e>
    335e:	f8 01       	movw	r30, r16
    3360:	81 89       	ldd	r24, Z+17	; 0x11
    3362:	88 23       	and	r24, r24
    3364:	69 f0       	breq	.+26     	; 0x3380 <xQueueCreateMutex+0x27e>
    3366:	c6 01       	movw	r24, r12
    3368:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    336c:	81 11       	cpse	r24, r1
    336e:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    3372:	f8 01       	movw	r30, r16
    3374:	86 8d       	ldd	r24, Z+30	; 0x1e
    3376:	81 50       	subi	r24, 0x01	; 1
    3378:	86 8f       	std	Z+30, r24	; 0x1e
    337a:	86 8d       	ldd	r24, Z+30	; 0x1e
    337c:	18 16       	cp	r1, r24
    337e:	7c f3       	brlt	.-34     	; 0x335e <xQueueCreateMutex+0x25c>
    3380:	8f ef       	ldi	r24, 0xFF	; 255
    3382:	f8 01       	movw	r30, r16
    3384:	86 8f       	std	Z+30, r24	; 0x1e
    3386:	0f 90       	pop	r0
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	0f 92       	push	r0
    3390:	85 8d       	ldd	r24, Z+29	; 0x1d
    3392:	18 16       	cp	r1, r24
    3394:	ac f4       	brge	.+42     	; 0x33c0 <xQueueCreateMutex+0x2be>
    3396:	80 85       	ldd	r24, Z+8	; 0x08
    3398:	81 11       	cpse	r24, r1
    339a:	05 c0       	rjmp	.+10     	; 0x33a6 <xQueueCreateMutex+0x2a4>
    339c:	11 c0       	rjmp	.+34     	; 0x33c0 <xQueueCreateMutex+0x2be>
    339e:	f8 01       	movw	r30, r16
    33a0:	80 85       	ldd	r24, Z+8	; 0x08
    33a2:	88 23       	and	r24, r24
    33a4:	69 f0       	breq	.+26     	; 0x33c0 <xQueueCreateMutex+0x2be>
    33a6:	c7 01       	movw	r24, r14
    33a8:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    33ac:	81 11       	cpse	r24, r1
    33ae:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    33b2:	f8 01       	movw	r30, r16
    33b4:	85 8d       	ldd	r24, Z+29	; 0x1d
    33b6:	81 50       	subi	r24, 0x01	; 1
    33b8:	85 8f       	std	Z+29, r24	; 0x1d
    33ba:	85 8d       	ldd	r24, Z+29	; 0x1d
    33bc:	18 16       	cp	r1, r24
    33be:	7c f3       	brlt	.-34     	; 0x339e <xQueueCreateMutex+0x29c>
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	f8 01       	movw	r30, r16
    33c4:	85 8f       	std	Z+29, r24	; 0x1d
    33c6:	0f 90       	pop	r0
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    33ce:	09 c0       	rjmp	.+18     	; 0x33e2 <xQueueCreateMutex+0x2e0>
    33d0:	f8 01       	movw	r30, r16
    33d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    33d4:	8f 5f       	subi	r24, 0xFF	; 255
    33d6:	82 8f       	std	Z+26, r24	; 0x1a
    33d8:	81 89       	ldd	r24, Z+17	; 0x11
    33da:	88 23       	and	r24, r24
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <xQueueCreateMutex+0x2de>
    33de:	f1 ce       	rjmp	.-542    	; 0x31c2 <xQueueCreateMutex+0xc0>
    33e0:	e7 ce       	rjmp	.-562    	; 0x31b0 <xQueueCreateMutex+0xae>
    33e2:	c8 01       	movw	r24, r16
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	ff 90       	pop	r15
    33f8:	ef 90       	pop	r14
    33fa:	df 90       	pop	r13
    33fc:	cf 90       	pop	r12
    33fe:	bf 90       	pop	r11
    3400:	af 90       	pop	r10
    3402:	9f 90       	pop	r9
    3404:	08 95       	ret

00003406 <xQueueGenericSend>:
    3406:	6f 92       	push	r6
    3408:	7f 92       	push	r7
    340a:	8f 92       	push	r8
    340c:	9f 92       	push	r9
    340e:	af 92       	push	r10
    3410:	bf 92       	push	r11
    3412:	cf 92       	push	r12
    3414:	df 92       	push	r13
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	00 d0       	rcall	.+0      	; 0x3424 <xQueueGenericSend+0x1e>
    3424:	1f 92       	push	r1
    3426:	1f 92       	push	r1
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	8c 01       	movw	r16, r24
    342e:	5b 01       	movw	r10, r22
    3430:	5d 83       	std	Y+5, r21	; 0x05
    3432:	4c 83       	std	Y+4, r20	; 0x04
    3434:	72 2e       	mov	r7, r18
    3436:	81 2c       	mov	r8, r1
    3438:	66 24       	eor	r6, r6
    343a:	63 94       	inc	r6
    343c:	99 24       	eor	r9, r9
    343e:	9a 94       	dec	r9
    3440:	7c 01       	movw	r14, r24
    3442:	88 e0       	ldi	r24, 0x08	; 8
    3444:	e8 0e       	add	r14, r24
    3446:	f1 1c       	adc	r15, r1
    3448:	68 01       	movw	r12, r16
    344a:	e1 e1       	ldi	r30, 0x11	; 17
    344c:	ce 0e       	add	r12, r30
    344e:	d1 1c       	adc	r13, r1
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	0f 92       	push	r0
    3456:	f8 01       	movw	r30, r16
    3458:	92 8d       	ldd	r25, Z+26	; 0x1a
    345a:	83 8d       	ldd	r24, Z+27	; 0x1b
    345c:	98 17       	cp	r25, r24
    345e:	20 f0       	brcs	.+8      	; 0x3468 <xQueueGenericSend+0x62>
    3460:	f2 e0       	ldi	r31, 0x02	; 2
    3462:	7f 12       	cpse	r7, r31
    3464:	6e c0       	rjmp	.+220    	; 0x3542 <xQueueGenericSend+0x13c>
    3466:	7d c1       	rjmp	.+762    	; 0x3762 <xQueueGenericSend+0x35c>
    3468:	f8 01       	movw	r30, r16
    346a:	44 8d       	ldd	r20, Z+28	; 0x1c
    346c:	41 11       	cpse	r20, r1
    346e:	15 c0       	rjmp	.+42     	; 0x349a <xQueueGenericSend+0x94>
    3470:	f8 01       	movw	r30, r16
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	89 2b       	or	r24, r25
    3478:	09 f0       	breq	.+2      	; 0x347c <xQueueGenericSend+0x76>
    347a:	79 c1       	rjmp	.+754    	; 0x376e <xQueueGenericSend+0x368>
    347c:	82 81       	ldd	r24, Z+2	; 0x02
    347e:	93 81       	ldd	r25, Z+3	; 0x03
    3480:	0e 94 a4 2a 	call	0x5548	; 0x5548 <xTaskPriorityDisinherit>
    3484:	f8 01       	movw	r30, r16
    3486:	13 82       	std	Z+3, r1	; 0x03
    3488:	12 82       	std	Z+2, r1	; 0x02
    348a:	92 8d       	ldd	r25, Z+26	; 0x1a
    348c:	9f 5f       	subi	r25, 0xFF	; 255
    348e:	92 8f       	std	Z+26, r25	; 0x1a
    3490:	91 89       	ldd	r25, Z+17	; 0x11
    3492:	99 23       	and	r25, r25
    3494:	09 f4       	brne	.+2      	; 0x3498 <xQueueGenericSend+0x92>
    3496:	4f c0       	rjmp	.+158    	; 0x3536 <xQueueGenericSend+0x130>
    3498:	46 c0       	rjmp	.+140    	; 0x3526 <xQueueGenericSend+0x120>
    349a:	71 10       	cpse	r7, r1
    349c:	1a c0       	rjmp	.+52     	; 0x34d2 <xQueueGenericSend+0xcc>
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	b5 01       	movw	r22, r10
    34a2:	f8 01       	movw	r30, r16
    34a4:	84 81       	ldd	r24, Z+4	; 0x04
    34a6:	95 81       	ldd	r25, Z+5	; 0x05
    34a8:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    34ac:	f8 01       	movw	r30, r16
    34ae:	24 8d       	ldd	r18, Z+28	; 0x1c
    34b0:	84 81       	ldd	r24, Z+4	; 0x04
    34b2:	95 81       	ldd	r25, Z+5	; 0x05
    34b4:	82 0f       	add	r24, r18
    34b6:	91 1d       	adc	r25, r1
    34b8:	95 83       	std	Z+5, r25	; 0x05
    34ba:	84 83       	std	Z+4, r24	; 0x04
    34bc:	22 81       	ldd	r18, Z+2	; 0x02
    34be:	33 81       	ldd	r19, Z+3	; 0x03
    34c0:	82 17       	cp	r24, r18
    34c2:	93 07       	cpc	r25, r19
    34c4:	08 f4       	brcc	.+2      	; 0x34c8 <xQueueGenericSend+0xc2>
    34c6:	53 c1       	rjmp	.+678    	; 0x376e <xQueueGenericSend+0x368>
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	95 83       	std	Z+5, r25	; 0x05
    34ce:	84 83       	std	Z+4, r24	; 0x04
    34d0:	4e c1       	rjmp	.+668    	; 0x376e <xQueueGenericSend+0x368>
    34d2:	50 e0       	ldi	r21, 0x00	; 0
    34d4:	b5 01       	movw	r22, r10
    34d6:	f8 01       	movw	r30, r16
    34d8:	86 81       	ldd	r24, Z+6	; 0x06
    34da:	97 81       	ldd	r25, Z+7	; 0x07
    34dc:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    34e0:	f8 01       	movw	r30, r16
    34e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	91 95       	neg	r25
    34e8:	81 95       	neg	r24
    34ea:	91 09       	sbc	r25, r1
    34ec:	26 81       	ldd	r18, Z+6	; 0x06
    34ee:	37 81       	ldd	r19, Z+7	; 0x07
    34f0:	28 0f       	add	r18, r24
    34f2:	39 1f       	adc	r19, r25
    34f4:	37 83       	std	Z+7, r19	; 0x07
    34f6:	26 83       	std	Z+6, r18	; 0x06
    34f8:	40 81       	ld	r20, Z
    34fa:	51 81       	ldd	r21, Z+1	; 0x01
    34fc:	24 17       	cp	r18, r20
    34fe:	35 07       	cpc	r19, r21
    3500:	30 f4       	brcc	.+12     	; 0x350e <xQueueGenericSend+0x108>
    3502:	22 81       	ldd	r18, Z+2	; 0x02
    3504:	33 81       	ldd	r19, Z+3	; 0x03
    3506:	82 0f       	add	r24, r18
    3508:	93 1f       	adc	r25, r19
    350a:	97 83       	std	Z+7, r25	; 0x07
    350c:	86 83       	std	Z+6, r24	; 0x06
    350e:	f2 e0       	ldi	r31, 0x02	; 2
    3510:	7f 12       	cpse	r7, r31
    3512:	2d c1       	rjmp	.+602    	; 0x376e <xQueueGenericSend+0x368>
    3514:	f8 01       	movw	r30, r16
    3516:	82 8d       	ldd	r24, Z+26	; 0x1a
    3518:	88 23       	and	r24, r24
    351a:	09 f4       	brne	.+2      	; 0x351e <xQueueGenericSend+0x118>
    351c:	28 c1       	rjmp	.+592    	; 0x376e <xQueueGenericSend+0x368>
    351e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3520:	81 50       	subi	r24, 0x01	; 1
    3522:	82 8f       	std	Z+26, r24	; 0x1a
    3524:	24 c1       	rjmp	.+584    	; 0x376e <xQueueGenericSend+0x368>
    3526:	c8 01       	movw	r24, r16
    3528:	41 96       	adiw	r24, 0x11	; 17
    352a:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	21 f4       	brne	.+8      	; 0x353a <xQueueGenericSend+0x134>
    3532:	ba dc       	rcall	.-1676   	; 0x2ea8 <vPortYield>
    3534:	02 c0       	rjmp	.+4      	; 0x353a <xQueueGenericSend+0x134>
    3536:	81 11       	cpse	r24, r1
    3538:	b7 dc       	rcall	.-1682   	; 0x2ea8 <vPortYield>
    353a:	0f 90       	pop	r0
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	1e c1       	rjmp	.+572    	; 0x377e <xQueueGenericSend+0x378>
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	9d 81       	ldd	r25, Y+5	; 0x05
    3546:	89 2b       	or	r24, r25
    3548:	21 f4       	brne	.+8      	; 0x3552 <xQueueGenericSend+0x14c>
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	16 c1       	rjmp	.+556    	; 0x377e <xQueueGenericSend+0x378>
    3552:	81 10       	cpse	r8, r1
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <xQueueGenericSend+0x15a>
    3556:	ce 01       	movw	r24, r28
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <vTaskSetTimeOutState>
    355e:	86 2c       	mov	r8, r6
    3560:	0f 90       	pop	r0
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	0f 92       	push	r0
    356e:	f8 01       	movw	r30, r16
    3570:	85 8d       	ldd	r24, Z+29	; 0x1d
    3572:	8f 3f       	cpi	r24, 0xFF	; 255
    3574:	09 f4       	brne	.+2      	; 0x3578 <xQueueGenericSend+0x172>
    3576:	15 8e       	std	Z+29, r1	; 0x1d
    3578:	f8 01       	movw	r30, r16
    357a:	86 8d       	ldd	r24, Z+30	; 0x1e
    357c:	8f 3f       	cpi	r24, 0xFF	; 255
    357e:	09 f4       	brne	.+2      	; 0x3582 <xQueueGenericSend+0x17c>
    3580:	16 8e       	std	Z+30, r1	; 0x1e
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	be 01       	movw	r22, r28
    3588:	6c 5f       	subi	r22, 0xFC	; 252
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	ce 01       	movw	r24, r28
    358e:	01 96       	adiw	r24, 0x01	; 1
    3590:	0e 94 fe 29 	call	0x53fc	; 0x53fc <xTaskCheckForTimeOut>
    3594:	81 11       	cpse	r24, r1
    3596:	96 c0       	rjmp	.+300    	; 0x36c4 <xQueueGenericSend+0x2be>
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	0f 92       	push	r0
    359e:	f8 01       	movw	r30, r16
    35a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    35a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    35a4:	0f 90       	pop	r0
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	98 13       	cpse	r25, r24
    35aa:	4a c0       	rjmp	.+148    	; 0x3640 <xQueueGenericSend+0x23a>
    35ac:	6c 81       	ldd	r22, Y+4	; 0x04
    35ae:	7d 81       	ldd	r23, Y+5	; 0x05
    35b0:	c7 01       	movw	r24, r14
    35b2:	0e 94 50 29 	call	0x52a0	; 0x52a0 <vTaskPlaceOnEventList>
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	0f 92       	push	r0
    35bc:	f8 01       	movw	r30, r16
    35be:	86 8d       	ldd	r24, Z+30	; 0x1e
    35c0:	18 16       	cp	r1, r24
    35c2:	ac f4       	brge	.+42     	; 0x35ee <xQueueGenericSend+0x1e8>
    35c4:	81 89       	ldd	r24, Z+17	; 0x11
    35c6:	81 11       	cpse	r24, r1
    35c8:	05 c0       	rjmp	.+10     	; 0x35d4 <xQueueGenericSend+0x1ce>
    35ca:	11 c0       	rjmp	.+34     	; 0x35ee <xQueueGenericSend+0x1e8>
    35cc:	f8 01       	movw	r30, r16
    35ce:	81 89       	ldd	r24, Z+17	; 0x11
    35d0:	88 23       	and	r24, r24
    35d2:	69 f0       	breq	.+26     	; 0x35ee <xQueueGenericSend+0x1e8>
    35d4:	c6 01       	movw	r24, r12
    35d6:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    35da:	81 11       	cpse	r24, r1
    35dc:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    35e0:	f8 01       	movw	r30, r16
    35e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    35e4:	81 50       	subi	r24, 0x01	; 1
    35e6:	86 8f       	std	Z+30, r24	; 0x1e
    35e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    35ea:	18 16       	cp	r1, r24
    35ec:	7c f3       	brlt	.-34     	; 0x35cc <xQueueGenericSend+0x1c6>
    35ee:	f8 01       	movw	r30, r16
    35f0:	96 8e       	std	Z+30, r9	; 0x1e
    35f2:	0f 90       	pop	r0
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	0f 92       	push	r0
    35fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    35fe:	18 16       	cp	r1, r24
    3600:	ac f4       	brge	.+42     	; 0x362c <xQueueGenericSend+0x226>
    3602:	80 85       	ldd	r24, Z+8	; 0x08
    3604:	81 11       	cpse	r24, r1
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <xQueueGenericSend+0x20c>
    3608:	11 c0       	rjmp	.+34     	; 0x362c <xQueueGenericSend+0x226>
    360a:	f8 01       	movw	r30, r16
    360c:	80 85       	ldd	r24, Z+8	; 0x08
    360e:	88 23       	and	r24, r24
    3610:	69 f0       	breq	.+26     	; 0x362c <xQueueGenericSend+0x226>
    3612:	c7 01       	movw	r24, r14
    3614:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3618:	81 11       	cpse	r24, r1
    361a:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    361e:	f8 01       	movw	r30, r16
    3620:	85 8d       	ldd	r24, Z+29	; 0x1d
    3622:	81 50       	subi	r24, 0x01	; 1
    3624:	85 8f       	std	Z+29, r24	; 0x1d
    3626:	85 8d       	ldd	r24, Z+29	; 0x1d
    3628:	18 16       	cp	r1, r24
    362a:	7c f3       	brlt	.-34     	; 0x360a <xQueueGenericSend+0x204>
    362c:	f8 01       	movw	r30, r16
    362e:	95 8e       	std	Z+29, r9	; 0x1d
    3630:	0f 90       	pop	r0
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    3638:	81 11       	cpse	r24, r1
    363a:	0a cf       	rjmp	.-492    	; 0x3450 <xQueueGenericSend+0x4a>
    363c:	35 dc       	rcall	.-1942   	; 0x2ea8 <vPortYield>
    363e:	08 cf       	rjmp	.-496    	; 0x3450 <xQueueGenericSend+0x4a>
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	0f 92       	push	r0
    3646:	f8 01       	movw	r30, r16
    3648:	86 8d       	ldd	r24, Z+30	; 0x1e
    364a:	18 16       	cp	r1, r24
    364c:	ac f4       	brge	.+42     	; 0x3678 <xQueueGenericSend+0x272>
    364e:	81 89       	ldd	r24, Z+17	; 0x11
    3650:	81 11       	cpse	r24, r1
    3652:	05 c0       	rjmp	.+10     	; 0x365e <xQueueGenericSend+0x258>
    3654:	11 c0       	rjmp	.+34     	; 0x3678 <xQueueGenericSend+0x272>
    3656:	f8 01       	movw	r30, r16
    3658:	81 89       	ldd	r24, Z+17	; 0x11
    365a:	88 23       	and	r24, r24
    365c:	69 f0       	breq	.+26     	; 0x3678 <xQueueGenericSend+0x272>
    365e:	c6 01       	movw	r24, r12
    3660:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3664:	81 11       	cpse	r24, r1
    3666:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    366a:	f8 01       	movw	r30, r16
    366c:	86 8d       	ldd	r24, Z+30	; 0x1e
    366e:	81 50       	subi	r24, 0x01	; 1
    3670:	86 8f       	std	Z+30, r24	; 0x1e
    3672:	86 8d       	ldd	r24, Z+30	; 0x1e
    3674:	18 16       	cp	r1, r24
    3676:	7c f3       	brlt	.-34     	; 0x3656 <xQueueGenericSend+0x250>
    3678:	f8 01       	movw	r30, r16
    367a:	96 8e       	std	Z+30, r9	; 0x1e
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	0f b6       	in	r0, 0x3f	; 63
    3682:	f8 94       	cli
    3684:	0f 92       	push	r0
    3686:	85 8d       	ldd	r24, Z+29	; 0x1d
    3688:	18 16       	cp	r1, r24
    368a:	ac f4       	brge	.+42     	; 0x36b6 <xQueueGenericSend+0x2b0>
    368c:	80 85       	ldd	r24, Z+8	; 0x08
    368e:	81 11       	cpse	r24, r1
    3690:	05 c0       	rjmp	.+10     	; 0x369c <xQueueGenericSend+0x296>
    3692:	11 c0       	rjmp	.+34     	; 0x36b6 <xQueueGenericSend+0x2b0>
    3694:	f8 01       	movw	r30, r16
    3696:	80 85       	ldd	r24, Z+8	; 0x08
    3698:	88 23       	and	r24, r24
    369a:	69 f0       	breq	.+26     	; 0x36b6 <xQueueGenericSend+0x2b0>
    369c:	c7 01       	movw	r24, r14
    369e:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    36a2:	81 11       	cpse	r24, r1
    36a4:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    36a8:	f8 01       	movw	r30, r16
    36aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    36ac:	81 50       	subi	r24, 0x01	; 1
    36ae:	85 8f       	std	Z+29, r24	; 0x1d
    36b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    36b2:	18 16       	cp	r1, r24
    36b4:	7c f3       	brlt	.-34     	; 0x3694 <xQueueGenericSend+0x28e>
    36b6:	f8 01       	movw	r30, r16
    36b8:	95 8e       	std	Z+29, r9	; 0x1d
    36ba:	0f 90       	pop	r0
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    36c2:	c6 ce       	rjmp	.-628    	; 0x3450 <xQueueGenericSend+0x4a>
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	0f 92       	push	r0
    36ca:	f8 01       	movw	r30, r16
    36cc:	86 8d       	ldd	r24, Z+30	; 0x1e
    36ce:	18 16       	cp	r1, r24
    36d0:	d4 f4       	brge	.+52     	; 0x3706 <xQueueGenericSend+0x300>
    36d2:	81 89       	ldd	r24, Z+17	; 0x11
    36d4:	81 11       	cpse	r24, r1
    36d6:	06 c0       	rjmp	.+12     	; 0x36e4 <xQueueGenericSend+0x2de>
    36d8:	16 c0       	rjmp	.+44     	; 0x3706 <xQueueGenericSend+0x300>
    36da:	f8 01       	movw	r30, r16
    36dc:	81 89       	ldd	r24, Z+17	; 0x11
    36de:	81 11       	cpse	r24, r1
    36e0:	05 c0       	rjmp	.+10     	; 0x36ec <xQueueGenericSend+0x2e6>
    36e2:	11 c0       	rjmp	.+34     	; 0x3706 <xQueueGenericSend+0x300>
    36e4:	78 01       	movw	r14, r16
    36e6:	f1 e1       	ldi	r31, 0x11	; 17
    36e8:	ef 0e       	add	r14, r31
    36ea:	f1 1c       	adc	r15, r1
    36ec:	c7 01       	movw	r24, r14
    36ee:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    36f2:	81 11       	cpse	r24, r1
    36f4:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    36f8:	f8 01       	movw	r30, r16
    36fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    36fc:	81 50       	subi	r24, 0x01	; 1
    36fe:	86 8f       	std	Z+30, r24	; 0x1e
    3700:	86 8d       	ldd	r24, Z+30	; 0x1e
    3702:	18 16       	cp	r1, r24
    3704:	54 f3       	brlt	.-44     	; 0x36da <xQueueGenericSend+0x2d4>
    3706:	8f ef       	ldi	r24, 0xFF	; 255
    3708:	f8 01       	movw	r30, r16
    370a:	86 8f       	std	Z+30, r24	; 0x1e
    370c:	0f 90       	pop	r0
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	0f 92       	push	r0
    3716:	85 8d       	ldd	r24, Z+29	; 0x1d
    3718:	18 16       	cp	r1, r24
    371a:	d4 f4       	brge	.+52     	; 0x3750 <xQueueGenericSend+0x34a>
    371c:	80 85       	ldd	r24, Z+8	; 0x08
    371e:	81 11       	cpse	r24, r1
    3720:	06 c0       	rjmp	.+12     	; 0x372e <xQueueGenericSend+0x328>
    3722:	16 c0       	rjmp	.+44     	; 0x3750 <xQueueGenericSend+0x34a>
    3724:	f8 01       	movw	r30, r16
    3726:	80 85       	ldd	r24, Z+8	; 0x08
    3728:	81 11       	cpse	r24, r1
    372a:	05 c0       	rjmp	.+10     	; 0x3736 <xQueueGenericSend+0x330>
    372c:	11 c0       	rjmp	.+34     	; 0x3750 <xQueueGenericSend+0x34a>
    372e:	78 01       	movw	r14, r16
    3730:	f8 e0       	ldi	r31, 0x08	; 8
    3732:	ef 0e       	add	r14, r31
    3734:	f1 1c       	adc	r15, r1
    3736:	c7 01       	movw	r24, r14
    3738:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    373c:	81 11       	cpse	r24, r1
    373e:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    3742:	f8 01       	movw	r30, r16
    3744:	85 8d       	ldd	r24, Z+29	; 0x1d
    3746:	81 50       	subi	r24, 0x01	; 1
    3748:	85 8f       	std	Z+29, r24	; 0x1d
    374a:	85 8d       	ldd	r24, Z+29	; 0x1d
    374c:	18 16       	cp	r1, r24
    374e:	54 f3       	brlt	.-44     	; 0x3724 <xQueueGenericSend+0x31e>
    3750:	8f ef       	ldi	r24, 0xFF	; 255
    3752:	f8 01       	movw	r30, r16
    3754:	85 8f       	std	Z+29, r24	; 0x1d
    3756:	0f 90       	pop	r0
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	0e c0       	rjmp	.+28     	; 0x377e <xQueueGenericSend+0x378>
    3762:	f8 01       	movw	r30, r16
    3764:	44 8d       	ldd	r20, Z+28	; 0x1c
    3766:	44 23       	and	r20, r20
    3768:	09 f4       	brne	.+2      	; 0x376c <xQueueGenericSend+0x366>
    376a:	82 ce       	rjmp	.-764    	; 0x3470 <xQueueGenericSend+0x6a>
    376c:	b2 ce       	rjmp	.-668    	; 0x34d2 <xQueueGenericSend+0xcc>
    376e:	f8 01       	movw	r30, r16
    3770:	82 8d       	ldd	r24, Z+26	; 0x1a
    3772:	8f 5f       	subi	r24, 0xFF	; 255
    3774:	82 8f       	std	Z+26, r24	; 0x1a
    3776:	81 89       	ldd	r24, Z+17	; 0x11
    3778:	81 11       	cpse	r24, r1
    377a:	d5 ce       	rjmp	.-598    	; 0x3526 <xQueueGenericSend+0x120>
    377c:	de ce       	rjmp	.-580    	; 0x353a <xQueueGenericSend+0x134>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	0f 90       	pop	r0
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	bf 90       	pop	r11
    379a:	af 90       	pop	r10
    379c:	9f 90       	pop	r9
    379e:	8f 90       	pop	r8
    37a0:	7f 90       	pop	r7
    37a2:	6f 90       	pop	r6
    37a4:	08 95       	ret

000037a6 <xQueueGive>:
    37a6:	9f 92       	push	r9
    37a8:	af 92       	push	r10
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	00 d0       	rcall	.+0      	; 0x37be <xQueueGive+0x18>
    37be:	1f 92       	push	r1
    37c0:	1f 92       	push	r1
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	8c 01       	movw	r16, r24
    37c8:	7d 83       	std	Y+5, r23	; 0x05
    37ca:	6c 83       	std	Y+4, r22	; 0x04
    37cc:	a1 2c       	mov	r10, r1
    37ce:	99 24       	eor	r9, r9
    37d0:	93 94       	inc	r9
    37d2:	bb 24       	eor	r11, r11
    37d4:	ba 94       	dec	r11
    37d6:	7c 01       	movw	r14, r24
    37d8:	88 e0       	ldi	r24, 0x08	; 8
    37da:	e8 0e       	add	r14, r24
    37dc:	f1 1c       	adc	r15, r1
    37de:	68 01       	movw	r12, r16
    37e0:	e1 e1       	ldi	r30, 0x11	; 17
    37e2:	ce 0e       	add	r12, r30
    37e4:	d1 1c       	adc	r13, r1
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	0f 92       	push	r0
    37ec:	f8 01       	movw	r30, r16
    37ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    37f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    37f2:	98 17       	cp	r25, r24
    37f4:	00 f5       	brcc	.+64     	; 0x3836 <xQueueGive+0x90>
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	89 2b       	or	r24, r25
    37fc:	09 f0       	breq	.+2      	; 0x3800 <xQueueGive+0x5a>
    37fe:	2b c1       	rjmp	.+598    	; 0x3a56 <xQueueGive+0x2b0>
    3800:	82 81       	ldd	r24, Z+2	; 0x02
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	0e 94 a4 2a 	call	0x5548	; 0x5548 <xTaskPriorityDisinherit>
    3808:	f8 01       	movw	r30, r16
    380a:	13 82       	std	Z+3, r1	; 0x03
    380c:	12 82       	std	Z+2, r1	; 0x02
    380e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3810:	9f 5f       	subi	r25, 0xFF	; 255
    3812:	92 8f       	std	Z+26, r25	; 0x1a
    3814:	91 89       	ldd	r25, Z+17	; 0x11
    3816:	99 23       	and	r25, r25
    3818:	41 f0       	breq	.+16     	; 0x382a <xQueueGive+0x84>
    381a:	c8 01       	movw	r24, r16
    381c:	41 96       	adiw	r24, 0x11	; 17
    381e:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	21 f4       	brne	.+8      	; 0x382e <xQueueGive+0x88>
    3826:	40 db       	rcall	.-2432   	; 0x2ea8 <vPortYield>
    3828:	02 c0       	rjmp	.+4      	; 0x382e <xQueueGive+0x88>
    382a:	81 11       	cpse	r24, r1
    382c:	3d db       	rcall	.-2438   	; 0x2ea8 <vPortYield>
    382e:	0f 90       	pop	r0
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	18 c1       	rjmp	.+560    	; 0x3a66 <xQueueGive+0x2c0>
    3836:	8c 81       	ldd	r24, Y+4	; 0x04
    3838:	9d 81       	ldd	r25, Y+5	; 0x05
    383a:	89 2b       	or	r24, r25
    383c:	21 f4       	brne	.+8      	; 0x3846 <xQueueGive+0xa0>
    383e:	0f 90       	pop	r0
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	10 c1       	rjmp	.+544    	; 0x3a66 <xQueueGive+0x2c0>
    3846:	a1 10       	cpse	r10, r1
    3848:	05 c0       	rjmp	.+10     	; 0x3854 <xQueueGive+0xae>
    384a:	ce 01       	movw	r24, r28
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <vTaskSetTimeOutState>
    3852:	a9 2c       	mov	r10, r9
    3854:	0f 90       	pop	r0
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
    385c:	0f b6       	in	r0, 0x3f	; 63
    385e:	f8 94       	cli
    3860:	0f 92       	push	r0
    3862:	f8 01       	movw	r30, r16
    3864:	85 8d       	ldd	r24, Z+29	; 0x1d
    3866:	8f 3f       	cpi	r24, 0xFF	; 255
    3868:	09 f4       	brne	.+2      	; 0x386c <xQueueGive+0xc6>
    386a:	15 8e       	std	Z+29, r1	; 0x1d
    386c:	f8 01       	movw	r30, r16
    386e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3870:	8f 3f       	cpi	r24, 0xFF	; 255
    3872:	09 f4       	brne	.+2      	; 0x3876 <xQueueGive+0xd0>
    3874:	16 8e       	std	Z+30, r1	; 0x1e
    3876:	0f 90       	pop	r0
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	be 01       	movw	r22, r28
    387c:	6c 5f       	subi	r22, 0xFC	; 252
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	ce 01       	movw	r24, r28
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	0e 94 fe 29 	call	0x53fc	; 0x53fc <xTaskCheckForTimeOut>
    3888:	81 11       	cpse	r24, r1
    388a:	96 c0       	rjmp	.+300    	; 0x39b8 <xQueueGive+0x212>
    388c:	0f b6       	in	r0, 0x3f	; 63
    388e:	f8 94       	cli
    3890:	0f 92       	push	r0
    3892:	f8 01       	movw	r30, r16
    3894:	92 8d       	ldd	r25, Z+26	; 0x1a
    3896:	83 8d       	ldd	r24, Z+27	; 0x1b
    3898:	0f 90       	pop	r0
    389a:	0f be       	out	0x3f, r0	; 63
    389c:	98 13       	cpse	r25, r24
    389e:	4a c0       	rjmp	.+148    	; 0x3934 <xQueueGive+0x18e>
    38a0:	6c 81       	ldd	r22, Y+4	; 0x04
    38a2:	7d 81       	ldd	r23, Y+5	; 0x05
    38a4:	c7 01       	movw	r24, r14
    38a6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <vTaskPlaceOnEventList>
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	0f 92       	push	r0
    38b0:	f8 01       	movw	r30, r16
    38b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    38b4:	18 16       	cp	r1, r24
    38b6:	ac f4       	brge	.+42     	; 0x38e2 <xQueueGive+0x13c>
    38b8:	81 89       	ldd	r24, Z+17	; 0x11
    38ba:	81 11       	cpse	r24, r1
    38bc:	05 c0       	rjmp	.+10     	; 0x38c8 <xQueueGive+0x122>
    38be:	11 c0       	rjmp	.+34     	; 0x38e2 <xQueueGive+0x13c>
    38c0:	f8 01       	movw	r30, r16
    38c2:	81 89       	ldd	r24, Z+17	; 0x11
    38c4:	88 23       	and	r24, r24
    38c6:	69 f0       	breq	.+26     	; 0x38e2 <xQueueGive+0x13c>
    38c8:	c6 01       	movw	r24, r12
    38ca:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    38ce:	81 11       	cpse	r24, r1
    38d0:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    38d4:	f8 01       	movw	r30, r16
    38d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    38d8:	81 50       	subi	r24, 0x01	; 1
    38da:	86 8f       	std	Z+30, r24	; 0x1e
    38dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    38de:	18 16       	cp	r1, r24
    38e0:	7c f3       	brlt	.-34     	; 0x38c0 <xQueueGive+0x11a>
    38e2:	f8 01       	movw	r30, r16
    38e4:	b6 8e       	std	Z+30, r11	; 0x1e
    38e6:	0f 90       	pop	r0
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	0f 92       	push	r0
    38f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    38f2:	18 16       	cp	r1, r24
    38f4:	ac f4       	brge	.+42     	; 0x3920 <xQueueGive+0x17a>
    38f6:	80 85       	ldd	r24, Z+8	; 0x08
    38f8:	81 11       	cpse	r24, r1
    38fa:	05 c0       	rjmp	.+10     	; 0x3906 <xQueueGive+0x160>
    38fc:	11 c0       	rjmp	.+34     	; 0x3920 <xQueueGive+0x17a>
    38fe:	f8 01       	movw	r30, r16
    3900:	80 85       	ldd	r24, Z+8	; 0x08
    3902:	88 23       	and	r24, r24
    3904:	69 f0       	breq	.+26     	; 0x3920 <xQueueGive+0x17a>
    3906:	c7 01       	movw	r24, r14
    3908:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    390c:	81 11       	cpse	r24, r1
    390e:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    3912:	f8 01       	movw	r30, r16
    3914:	85 8d       	ldd	r24, Z+29	; 0x1d
    3916:	81 50       	subi	r24, 0x01	; 1
    3918:	85 8f       	std	Z+29, r24	; 0x1d
    391a:	85 8d       	ldd	r24, Z+29	; 0x1d
    391c:	18 16       	cp	r1, r24
    391e:	7c f3       	brlt	.-34     	; 0x38fe <xQueueGive+0x158>
    3920:	f8 01       	movw	r30, r16
    3922:	b5 8e       	std	Z+29, r11	; 0x1d
    3924:	0f 90       	pop	r0
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    392c:	81 11       	cpse	r24, r1
    392e:	5b cf       	rjmp	.-330    	; 0x37e6 <xQueueGive+0x40>
    3930:	bb da       	rcall	.-2698   	; 0x2ea8 <vPortYield>
    3932:	59 cf       	rjmp	.-334    	; 0x37e6 <xQueueGive+0x40>
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	0f 92       	push	r0
    393a:	f8 01       	movw	r30, r16
    393c:	86 8d       	ldd	r24, Z+30	; 0x1e
    393e:	18 16       	cp	r1, r24
    3940:	ac f4       	brge	.+42     	; 0x396c <xQueueGive+0x1c6>
    3942:	81 89       	ldd	r24, Z+17	; 0x11
    3944:	81 11       	cpse	r24, r1
    3946:	05 c0       	rjmp	.+10     	; 0x3952 <xQueueGive+0x1ac>
    3948:	11 c0       	rjmp	.+34     	; 0x396c <xQueueGive+0x1c6>
    394a:	f8 01       	movw	r30, r16
    394c:	81 89       	ldd	r24, Z+17	; 0x11
    394e:	88 23       	and	r24, r24
    3950:	69 f0       	breq	.+26     	; 0x396c <xQueueGive+0x1c6>
    3952:	c6 01       	movw	r24, r12
    3954:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3958:	81 11       	cpse	r24, r1
    395a:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    395e:	f8 01       	movw	r30, r16
    3960:	86 8d       	ldd	r24, Z+30	; 0x1e
    3962:	81 50       	subi	r24, 0x01	; 1
    3964:	86 8f       	std	Z+30, r24	; 0x1e
    3966:	86 8d       	ldd	r24, Z+30	; 0x1e
    3968:	18 16       	cp	r1, r24
    396a:	7c f3       	brlt	.-34     	; 0x394a <xQueueGive+0x1a4>
    396c:	f8 01       	movw	r30, r16
    396e:	b6 8e       	std	Z+30, r11	; 0x1e
    3970:	0f 90       	pop	r0
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	0f 92       	push	r0
    397a:	85 8d       	ldd	r24, Z+29	; 0x1d
    397c:	18 16       	cp	r1, r24
    397e:	ac f4       	brge	.+42     	; 0x39aa <xQueueGive+0x204>
    3980:	80 85       	ldd	r24, Z+8	; 0x08
    3982:	81 11       	cpse	r24, r1
    3984:	05 c0       	rjmp	.+10     	; 0x3990 <xQueueGive+0x1ea>
    3986:	11 c0       	rjmp	.+34     	; 0x39aa <xQueueGive+0x204>
    3988:	f8 01       	movw	r30, r16
    398a:	80 85       	ldd	r24, Z+8	; 0x08
    398c:	88 23       	and	r24, r24
    398e:	69 f0       	breq	.+26     	; 0x39aa <xQueueGive+0x204>
    3990:	c7 01       	movw	r24, r14
    3992:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3996:	81 11       	cpse	r24, r1
    3998:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    399c:	f8 01       	movw	r30, r16
    399e:	85 8d       	ldd	r24, Z+29	; 0x1d
    39a0:	81 50       	subi	r24, 0x01	; 1
    39a2:	85 8f       	std	Z+29, r24	; 0x1d
    39a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    39a6:	18 16       	cp	r1, r24
    39a8:	7c f3       	brlt	.-34     	; 0x3988 <xQueueGive+0x1e2>
    39aa:	f8 01       	movw	r30, r16
    39ac:	b5 8e       	std	Z+29, r11	; 0x1d
    39ae:	0f 90       	pop	r0
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    39b6:	17 cf       	rjmp	.-466    	; 0x37e6 <xQueueGive+0x40>
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	0f 92       	push	r0
    39be:	f8 01       	movw	r30, r16
    39c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    39c2:	18 16       	cp	r1, r24
    39c4:	d4 f4       	brge	.+52     	; 0x39fa <xQueueGive+0x254>
    39c6:	81 89       	ldd	r24, Z+17	; 0x11
    39c8:	81 11       	cpse	r24, r1
    39ca:	06 c0       	rjmp	.+12     	; 0x39d8 <xQueueGive+0x232>
    39cc:	16 c0       	rjmp	.+44     	; 0x39fa <xQueueGive+0x254>
    39ce:	f8 01       	movw	r30, r16
    39d0:	81 89       	ldd	r24, Z+17	; 0x11
    39d2:	81 11       	cpse	r24, r1
    39d4:	05 c0       	rjmp	.+10     	; 0x39e0 <xQueueGive+0x23a>
    39d6:	11 c0       	rjmp	.+34     	; 0x39fa <xQueueGive+0x254>
    39d8:	78 01       	movw	r14, r16
    39da:	f1 e1       	ldi	r31, 0x11	; 17
    39dc:	ef 0e       	add	r14, r31
    39de:	f1 1c       	adc	r15, r1
    39e0:	c7 01       	movw	r24, r14
    39e2:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    39e6:	81 11       	cpse	r24, r1
    39e8:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    39ec:	f8 01       	movw	r30, r16
    39ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    39f0:	81 50       	subi	r24, 0x01	; 1
    39f2:	86 8f       	std	Z+30, r24	; 0x1e
    39f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    39f6:	18 16       	cp	r1, r24
    39f8:	54 f3       	brlt	.-44     	; 0x39ce <xQueueGive+0x228>
    39fa:	8f ef       	ldi	r24, 0xFF	; 255
    39fc:	f8 01       	movw	r30, r16
    39fe:	86 8f       	std	Z+30, r24	; 0x1e
    3a00:	0f 90       	pop	r0
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	0f 92       	push	r0
    3a0a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a0c:	18 16       	cp	r1, r24
    3a0e:	d4 f4       	brge	.+52     	; 0x3a44 <xQueueGive+0x29e>
    3a10:	80 85       	ldd	r24, Z+8	; 0x08
    3a12:	81 11       	cpse	r24, r1
    3a14:	06 c0       	rjmp	.+12     	; 0x3a22 <xQueueGive+0x27c>
    3a16:	16 c0       	rjmp	.+44     	; 0x3a44 <xQueueGive+0x29e>
    3a18:	f8 01       	movw	r30, r16
    3a1a:	80 85       	ldd	r24, Z+8	; 0x08
    3a1c:	81 11       	cpse	r24, r1
    3a1e:	05 c0       	rjmp	.+10     	; 0x3a2a <xQueueGive+0x284>
    3a20:	11 c0       	rjmp	.+34     	; 0x3a44 <xQueueGive+0x29e>
    3a22:	78 01       	movw	r14, r16
    3a24:	f8 e0       	ldi	r31, 0x08	; 8
    3a26:	ef 0e       	add	r14, r31
    3a28:	f1 1c       	adc	r15, r1
    3a2a:	c7 01       	movw	r24, r14
    3a2c:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3a30:	81 11       	cpse	r24, r1
    3a32:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
    3a36:	f8 01       	movw	r30, r16
    3a38:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a3a:	81 50       	subi	r24, 0x01	; 1
    3a3c:	85 8f       	std	Z+29, r24	; 0x1d
    3a3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a40:	18 16       	cp	r1, r24
    3a42:	54 f3       	brlt	.-44     	; 0x3a18 <xQueueGive+0x272>
    3a44:	8f ef       	ldi	r24, 0xFF	; 255
    3a46:	f8 01       	movw	r30, r16
    3a48:	85 8f       	std	Z+29, r24	; 0x1d
    3a4a:	0f 90       	pop	r0
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	08 c0       	rjmp	.+16     	; 0x3a66 <xQueueGive+0x2c0>
    3a56:	f8 01       	movw	r30, r16
    3a58:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a5a:	8f 5f       	subi	r24, 0xFF	; 255
    3a5c:	82 8f       	std	Z+26, r24	; 0x1a
    3a5e:	81 89       	ldd	r24, Z+17	; 0x11
    3a60:	81 11       	cpse	r24, r1
    3a62:	db ce       	rjmp	.-586    	; 0x381a <xQueueGive+0x74>
    3a64:	e4 ce       	rjmp	.-568    	; 0x382e <xQueueGive+0x88>
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	ff 90       	pop	r15
    3a7a:	ef 90       	pop	r14
    3a7c:	df 90       	pop	r13
    3a7e:	cf 90       	pop	r12
    3a80:	bf 90       	pop	r11
    3a82:	af 90       	pop	r10
    3a84:	9f 90       	pop	r9
    3a86:	08 95       	ret

00003a88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	fc 01       	movw	r30, r24
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3a8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a90:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a92:	98 17       	cp	r25, r24
    3a94:	d0 f4       	brcc	.+52     	; 0x3aca <xQueueGiveFromISR+0x42>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    3a96:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3a9c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa0:	79 f4       	brne	.+30     	; 0x3ac0 <xQueueGiveFromISR+0x38>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3aa2:	81 89       	ldd	r24, Z+17	; 0x11
    3aa4:	88 23       	and	r24, r24
    3aa6:	99 f0       	breq	.+38     	; 0x3ace <xQueueGiveFromISR+0x46>
    3aa8:	eb 01       	movw	r28, r22
    3aaa:	cf 01       	movw	r24, r30
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3aac:	41 96       	adiw	r24, 0x11	; 17
    3aae:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3ab2:	88 23       	and	r24, r24
    3ab4:	71 f0       	breq	.+28     	; 0x3ad2 <xQueueGiveFromISR+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3ab6:	20 97       	sbiw	r28, 0x00	; 0
    3ab8:	71 f0       	breq	.+28     	; 0x3ad6 <xQueueGiveFromISR+0x4e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	88 83       	st	Y, r24
    3abe:	0c c0       	rjmp	.+24     	; 0x3ad8 <xQueueGiveFromISR+0x50>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3ac0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ac2:	8f 5f       	subi	r24, 0xFF	; 255
    3ac4:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	07 c0       	rjmp	.+14     	; 0x3ad8 <xQueueGiveFromISR+0x50>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	03 c0       	rjmp	.+6      	; 0x3ad8 <xQueueGiveFromISR+0x50>
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <xQueueGiveFromISR+0x50>
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	08 95       	ret

00003ade <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3ade:	6f 92       	push	r6
    3ae0:	7f 92       	push	r7
    3ae2:	8f 92       	push	r8
    3ae4:	9f 92       	push	r9
    3ae6:	af 92       	push	r10
    3ae8:	bf 92       	push	r11
    3aea:	cf 92       	push	r12
    3aec:	df 92       	push	r13
    3aee:	ef 92       	push	r14
    3af0:	ff 92       	push	r15
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <xQueueGenericReceive+0x1e>
    3afc:	1f 92       	push	r1
    3afe:	1f 92       	push	r1
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	8c 01       	movw	r16, r24
    3b06:	5b 01       	movw	r10, r22
    3b08:	5d 83       	std	Y+5, r21	; 0x05
    3b0a:	4c 83       	std	Y+4, r20	; 0x04
    3b0c:	62 2e       	mov	r6, r18
BaseType_t xEntryTimeSet = pdFALSE;
    3b0e:	81 2c       	mov	r8, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    3b10:	77 24       	eor	r7, r7
    3b12:	73 94       	inc	r7
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3b14:	99 24       	eor	r9, r9
    3b16:	9a 94       	dec	r9
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3b18:	6c 01       	movw	r12, r24
    3b1a:	88 e0       	ldi	r24, 0x08	; 8
    3b1c:	c8 0e       	add	r12, r24
    3b1e:	d1 1c       	adc	r13, r1
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3b20:	78 01       	movw	r14, r16
    3b22:	e1 e1       	ldi	r30, 0x11	; 17
    3b24:	ee 0e       	add	r14, r30
    3b26:	f1 1c       	adc	r15, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	f8 94       	cli
    3b2c:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3b2e:	f8 01       	movw	r30, r16
    3b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b32:	88 23       	and	r24, r24
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <xQueueGenericReceive+0x5a>
    3b36:	45 c0       	rjmp	.+138    	; 0x3bc2 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3b38:	e6 80       	ldd	r14, Z+6	; 0x06
    3b3a:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3b3c:	44 8d       	ldd	r20, Z+28	; 0x1c
    3b3e:	44 23       	and	r20, r20
    3b40:	a9 f0       	breq	.+42     	; 0x3b6c <xQueueGenericReceive+0x8e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3b42:	50 e0       	ldi	r21, 0x00	; 0
    3b44:	c7 01       	movw	r24, r14
    3b46:	84 0f       	add	r24, r20
    3b48:	95 1f       	adc	r25, r21
    3b4a:	97 83       	std	Z+7, r25	; 0x07
    3b4c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3b4e:	22 81       	ldd	r18, Z+2	; 0x02
    3b50:	33 81       	ldd	r19, Z+3	; 0x03
    3b52:	82 17       	cp	r24, r18
    3b54:	93 07       	cpc	r25, r19
    3b56:	20 f0       	brcs	.+8      	; 0x3b60 <xQueueGenericReceive+0x82>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3b58:	80 81       	ld	r24, Z
    3b5a:	91 81       	ldd	r25, Z+1	; 0x01
    3b5c:	97 83       	std	Z+7, r25	; 0x07
    3b5e:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3b60:	f8 01       	movw	r30, r16
    3b62:	66 81       	ldd	r22, Z+6	; 0x06
    3b64:	77 81       	ldd	r23, Z+7	; 0x07
    3b66:	c5 01       	movw	r24, r10
    3b68:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3b6c:	61 10       	cpse	r6, r1
    3b6e:	19 c0       	rjmp	.+50     	; 0x3ba2 <xQueueGenericReceive+0xc4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3b70:	f8 01       	movw	r30, r16
    3b72:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b74:	81 50       	subi	r24, 0x01	; 1
    3b76:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	89 2b       	or	r24, r25
    3b7e:	29 f4       	brne	.+10     	; 0x3b8a <xQueueGenericReceive+0xac>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3b80:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <pvTaskIncrementMutexHeldCount>
    3b84:	f8 01       	movw	r30, r16
    3b86:	93 83       	std	Z+3, r25	; 0x03
    3b88:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	80 85       	ldd	r24, Z+8	; 0x08
    3b8e:	88 23       	and	r24, r24
    3b90:	a1 f0       	breq	.+40     	; 0x3bba <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3b92:	c8 01       	movw	r24, r16
    3b94:	08 96       	adiw	r24, 0x08	; 8
    3b96:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3b9a:	81 30       	cpi	r24, 0x01	; 1
    3b9c:	71 f4       	brne	.+28     	; 0x3bba <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3b9e:	84 d9       	rcall	.-3320   	; 0x2ea8 <vPortYield>
    3ba0:	0c c0       	rjmp	.+24     	; 0x3bba <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	f7 82       	std	Z+7, r15	; 0x07
    3ba6:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ba8:	81 89       	ldd	r24, Z+17	; 0x11
    3baa:	88 23       	and	r24, r24
    3bac:	31 f0       	breq	.+12     	; 0x3bba <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3bae:	c8 01       	movw	r24, r16
    3bb0:	41 96       	adiw	r24, 0x11	; 17
    3bb2:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3bb6:	81 11       	cpse	r24, r1
    3bb8:	77 d9       	rcall	.-3346   	; 0x2ea8 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3bba:	0f 90       	pop	r0
    3bbc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	1a c1       	rjmp	.+564    	; 0x3df6 <xQueueGenericReceive+0x318>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc6:	89 2b       	or	r24, r25
    3bc8:	21 f4       	brne	.+8      	; 0x3bd2 <xQueueGenericReceive+0xf4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3bca:	0f 90       	pop	r0
    3bcc:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	12 c1       	rjmp	.+548    	; 0x3df6 <xQueueGenericReceive+0x318>
				}
				else if( xEntryTimeSet == pdFALSE )
    3bd2:	81 10       	cpse	r8, r1
    3bd4:	05 c0       	rjmp	.+10     	; 0x3be0 <xQueueGenericReceive+0x102>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3bde:	87 2c       	mov	r8, r7
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3be0:	0f 90       	pop	r0
    3be2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3be4:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	0f 92       	push	r0
    3bee:	f8 01       	movw	r30, r16
    3bf0:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    3bf4:	09 f4       	brne	.+2      	; 0x3bf8 <xQueueGenericReceive+0x11a>
    3bf6:	15 8e       	std	Z+29, r1	; 0x1d
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	86 8d       	ldd	r24, Z+30	; 0x1e
    3bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    3bfe:	09 f4       	brne	.+2      	; 0x3c02 <xQueueGenericReceive+0x124>
    3c00:	16 8e       	std	Z+30, r1	; 0x1e
    3c02:	0f 90       	pop	r0
    3c04:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3c06:	be 01       	movw	r22, r28
    3c08:	6c 5f       	subi	r22, 0xFC	; 252
    3c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	0e 94 fe 29 	call	0x53fc	; 0x53fc <xTaskCheckForTimeOut>
    3c14:	81 11       	cpse	r24, r1
    3c16:	a2 c0       	rjmp	.+324    	; 0x3d5c <xQueueGenericReceive+0x27e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3c1e:	f8 01       	movw	r30, r16
    3c20:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3c22:	0f 90       	pop	r0
    3c24:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3c26:	81 11       	cpse	r24, r1
    3c28:	57 c0       	rjmp	.+174    	; 0x3cd8 <xQueueGenericReceive+0x1fa>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	89 2b       	or	r24, r25
    3c30:	49 f4       	brne	.+18     	; 0x3c44 <xQueueGenericReceive+0x166>
					{
						taskENTER_CRITICAL();
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3c38:	82 81       	ldd	r24, Z+2	; 0x02
    3c3a:	93 81       	ldd	r25, Z+3	; 0x03
    3c3c:	0e 94 42 2a 	call	0x5484	; 0x5484 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3c40:	0f 90       	pop	r0
    3c42:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3c44:	6c 81       	ldd	r22, Y+4	; 0x04
    3c46:	7d 81       	ldd	r23, Y+5	; 0x05
    3c48:	c7 01       	movw	r24, r14
    3c4a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <vTaskPlaceOnEventList>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3c54:	f8 01       	movw	r30, r16
    3c56:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c58:	18 16       	cp	r1, r24
    3c5a:	ac f4       	brge	.+42     	; 0x3c86 <xQueueGenericReceive+0x1a8>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c5c:	81 89       	ldd	r24, Z+17	; 0x11
    3c5e:	81 11       	cpse	r24, r1
    3c60:	05 c0       	rjmp	.+10     	; 0x3c6c <xQueueGenericReceive+0x18e>
    3c62:	11 c0       	rjmp	.+34     	; 0x3c86 <xQueueGenericReceive+0x1a8>
    3c64:	f8 01       	movw	r30, r16
    3c66:	81 89       	ldd	r24, Z+17	; 0x11
    3c68:	88 23       	and	r24, r24
    3c6a:	69 f0       	breq	.+26     	; 0x3c86 <xQueueGenericReceive+0x1a8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3c72:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3c74:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3c78:	f8 01       	movw	r30, r16
    3c7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c7c:	81 50       	subi	r24, 0x01	; 1
    3c7e:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3c80:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c82:	18 16       	cp	r1, r24
    3c84:	7c f3       	brlt	.-34     	; 0x3c64 <xQueueGenericReceive+0x186>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3c86:	f8 01       	movw	r30, r16
    3c88:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3c8a:	0f 90       	pop	r0
    3c8c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3c94:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c96:	18 16       	cp	r1, r24
    3c98:	ac f4       	brge	.+42     	; 0x3cc4 <xQueueGenericReceive+0x1e6>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3c9a:	80 85       	ldd	r24, Z+8	; 0x08
    3c9c:	81 11       	cpse	r24, r1
    3c9e:	05 c0       	rjmp	.+10     	; 0x3caa <xQueueGenericReceive+0x1cc>
    3ca0:	11 c0       	rjmp	.+34     	; 0x3cc4 <xQueueGenericReceive+0x1e6>
    3ca2:	f8 01       	movw	r30, r16
    3ca4:	80 85       	ldd	r24, Z+8	; 0x08
    3ca6:	88 23       	and	r24, r24
    3ca8:	69 f0       	breq	.+26     	; 0x3cc4 <xQueueGenericReceive+0x1e6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3caa:	c6 01       	movw	r24, r12
    3cac:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3cb0:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3cb2:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cba:	81 50       	subi	r24, 0x01	; 1
    3cbc:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3cbe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cc0:	18 16       	cp	r1, r24
    3cc2:	7c f3       	brlt	.-34     	; 0x3ca2 <xQueueGenericReceive+0x1c4>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3cc8:	0f 90       	pop	r0
    3cca:	0f be       	out	0x3f, r0	; 63
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
    3ccc:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    3cd0:	81 11       	cpse	r24, r1
				{
					portYIELD_WITHIN_API();
    3cd2:	2a cf       	rjmp	.-428    	; 0x3b28 <xQueueGenericReceive+0x4a>
    3cd4:	e9 d8       	rcall	.-3630   	; 0x2ea8 <vPortYield>
    3cd6:	28 cf       	rjmp	.-432    	; 0x3b28 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cde:	f8 01       	movw	r30, r16
    3ce0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ce2:	18 16       	cp	r1, r24
    3ce4:	ac f4       	brge	.+42     	; 0x3d10 <xQueueGenericReceive+0x232>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ce6:	81 89       	ldd	r24, Z+17	; 0x11
    3ce8:	81 11       	cpse	r24, r1
    3cea:	05 c0       	rjmp	.+10     	; 0x3cf6 <xQueueGenericReceive+0x218>
    3cec:	11 c0       	rjmp	.+34     	; 0x3d10 <xQueueGenericReceive+0x232>
    3cee:	f8 01       	movw	r30, r16
    3cf0:	81 89       	ldd	r24, Z+17	; 0x11
    3cf2:	88 23       	and	r24, r24
    3cf4:	69 f0       	breq	.+26     	; 0x3d10 <xQueueGenericReceive+0x232>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cf6:	c7 01       	movw	r24, r14
    3cf8:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3cfc:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3cfe:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d02:	f8 01       	movw	r30, r16
    3d04:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d06:	81 50       	subi	r24, 0x01	; 1
    3d08:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d0c:	18 16       	cp	r1, r24
    3d0e:	7c f3       	brlt	.-34     	; 0x3cee <xQueueGenericReceive+0x210>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d10:	f8 01       	movw	r30, r16
    3d12:	96 8e       	std	Z+30, r9	; 0x1e
	}
	taskEXIT_CRITICAL();
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d20:	18 16       	cp	r1, r24
    3d22:	ac f4       	brge	.+42     	; 0x3d4e <xQueueGenericReceive+0x270>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d24:	80 85       	ldd	r24, Z+8	; 0x08
    3d26:	81 11       	cpse	r24, r1
    3d28:	05 c0       	rjmp	.+10     	; 0x3d34 <xQueueGenericReceive+0x256>
    3d2a:	11 c0       	rjmp	.+34     	; 0x3d4e <xQueueGenericReceive+0x270>
    3d2c:	f8 01       	movw	r30, r16
    3d2e:	80 85       	ldd	r24, Z+8	; 0x08
    3d30:	88 23       	and	r24, r24
    3d32:	69 f0       	breq	.+26     	; 0x3d4e <xQueueGenericReceive+0x270>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d34:	c6 01       	movw	r24, r12
    3d36:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3d3a:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3d3c:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3d40:	f8 01       	movw	r30, r16
    3d42:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d44:	81 50       	subi	r24, 0x01	; 1
    3d46:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d48:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d4a:	18 16       	cp	r1, r24
    3d4c:	7c f3       	brlt	.-34     	; 0x3d2c <xQueueGenericReceive+0x24e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d4e:	f8 01       	movw	r30, r16
    3d50:	95 8e       	std	Z+29, r9	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d52:	0f 90       	pop	r0
    3d54:	0f be       	out	0x3f, r0	; 63
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3d56:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <xTaskResumeAll>
    3d5a:	e6 ce       	rjmp	.-564    	; 0x3b28 <xQueueGenericReceive+0x4a>

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d62:	f8 01       	movw	r30, r16
    3d64:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d66:	18 16       	cp	r1, r24
    3d68:	d4 f4       	brge	.+52     	; 0x3d9e <xQueueGenericReceive+0x2c0>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3d6a:	81 89       	ldd	r24, Z+17	; 0x11
    3d6c:	81 11       	cpse	r24, r1
    3d6e:	06 c0       	rjmp	.+12     	; 0x3d7c <xQueueGenericReceive+0x29e>
    3d70:	16 c0       	rjmp	.+44     	; 0x3d9e <xQueueGenericReceive+0x2c0>
    3d72:	f8 01       	movw	r30, r16
    3d74:	81 89       	ldd	r24, Z+17	; 0x11
    3d76:	81 11       	cpse	r24, r1
    3d78:	05 c0       	rjmp	.+10     	; 0x3d84 <xQueueGenericReceive+0x2a6>
    3d7a:	11 c0       	rjmp	.+34     	; 0x3d9e <xQueueGenericReceive+0x2c0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3d7c:	78 01       	movw	r14, r16
    3d7e:	f1 e1       	ldi	r31, 0x11	; 17
    3d80:	ef 0e       	add	r14, r31
    3d82:	f1 1c       	adc	r15, r1
    3d84:	c7 01       	movw	r24, r14
    3d86:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3d8a:	81 11       	cpse	r24, r1
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    3d8c:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    3d90:	f8 01       	movw	r30, r16
    3d92:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d94:	81 50       	subi	r24, 0x01	; 1
    3d96:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3d98:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d9a:	18 16       	cp	r1, r24
    3d9c:	54 f3       	brlt	.-44     	; 0x3d72 <xQueueGenericReceive+0x294>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3d9e:	8f ef       	ldi	r24, 0xFF	; 255
    3da0:	f8 01       	movw	r30, r16
    3da2:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3da4:	0f 90       	pop	r0
    3da6:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	f8 94       	cli
    3dac:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3dae:	85 8d       	ldd	r24, Z+29	; 0x1d
    3db0:	18 16       	cp	r1, r24
    3db2:	d4 f4       	brge	.+52     	; 0x3de8 <xQueueGenericReceive+0x30a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3db4:	80 85       	ldd	r24, Z+8	; 0x08
    3db6:	81 11       	cpse	r24, r1
    3db8:	06 c0       	rjmp	.+12     	; 0x3dc6 <xQueueGenericReceive+0x2e8>
    3dba:	16 c0       	rjmp	.+44     	; 0x3de8 <xQueueGenericReceive+0x30a>
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	80 85       	ldd	r24, Z+8	; 0x08
    3dc0:	81 11       	cpse	r24, r1
    3dc2:	05 c0       	rjmp	.+10     	; 0x3dce <xQueueGenericReceive+0x2f0>
    3dc4:	11 c0       	rjmp	.+34     	; 0x3de8 <xQueueGenericReceive+0x30a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3dc6:	78 01       	movw	r14, r16
    3dc8:	f8 e0       	ldi	r31, 0x08	; 8
    3dca:	ef 0e       	add	r14, r31
    3dcc:	f1 1c       	adc	r15, r1
    3dce:	c7 01       	movw	r24, r14
    3dd0:	0e 94 ab 29 	call	0x5356	; 0x5356 <xTaskRemoveFromEventList>
    3dd4:	81 11       	cpse	r24, r1
				{
					vTaskMissedYield();
    3dd6:	0e 94 39 2a 	call	0x5472	; 0x5472 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3dda:	f8 01       	movw	r30, r16
    3ddc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3dde:	81 50       	subi	r24, 0x01	; 1
    3de0:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3de2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3de4:	18 16       	cp	r1, r24
    3de6:	54 f3       	brlt	.-44     	; 0x3dbc <xQueueGenericReceive+0x2de>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3de8:	8f ef       	ldi	r24, 0xFF	; 255
    3dea:	f8 01       	movw	r30, r16
	}
	taskEXIT_CRITICAL();
    3dec:	85 8f       	std	Z+29, r24	; 0x1d
    3dee:	0f 90       	pop	r0
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	c8 d7       	rcall	.+3984   	; 0x4d84 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3df4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	ff 90       	pop	r15
    3e0a:	ef 90       	pop	r14
    3e0c:	df 90       	pop	r13
    3e0e:	cf 90       	pop	r12
    3e10:	bf 90       	pop	r11
    3e12:	af 90       	pop	r10
    3e14:	9f 90       	pop	r9
    3e16:	8f 90       	pop	r8
    3e18:	7f 90       	pop	r7
    3e1a:	6f 90       	pop	r6
    3e1c:	08 95       	ret

00003e1e <server_receiver>:
  uint8_t status = TYPE_PING_RESPONSE;
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
  else simple_p_send(SERVER_ADDRESS, &status, 1);
}

void server_receiver(uint8_t *data, uint16_t len) {
    3e1e:	ab 01       	movw	r20, r22
  if(data == NULL) { // ARQ passes NULL to the callback when connection is lost
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	11 f4       	brne	.+4      	; 0x3e28 <server_receiver+0xa>
      gHandshook = 0;
    3e24:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <gHandshook>
  }
  memcpy(&message_in, data, len);
    3e28:	bc 01       	movw	r22, r24
    3e2a:	8d e5       	ldi	r24, 0x5D	; 93
    3e2c:	9b e1       	ldi	r25, 0x1B	; 27
    3e2e:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  xSemaphoreGive(xCommandReadyBSem);
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	80 91 59 1b 	lds	r24, 0x1B59	; 0x801b59 <xCommandReadyBSem>
    3e3a:	90 91 5a 1b 	lds	r25, 0x1B5A	; 0x801b5a <xCommandReadyBSem+0x1>
    3e3e:	b3 cc       	rjmp	.-1690   	; 0x37a6 <xQueueGive>
    3e40:	08 95       	ret

00003e42 <server_communication_init>:
#define TYPE_PING           8
#define TYPE_PING_RESPONSE  9
#define TYPE_DEBUG          10

void server_communication_init(void) {
  if(connected) return;
    3e42:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <connected>
    3e46:	81 11       	cpse	r24, r1
    3e48:	04 c0       	rjmp	.+8      	; 0x3e52 <server_communication_init+0x10>
  server_connection = arq_new_connection();
    3e4a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <arq_new_connection>
    3e4e:	80 93 93 1b 	sts	0x1B93, r24	; 0x801b93 <server_connection>
    3e52:	08 95       	ret

00003e54 <server_connect>:
}

uint8_t server_connect(void) {
  connected = arq_connect(server_connection, SERVER_ADDRESS, server_receiver, 1000);
    3e54:	28 ee       	ldi	r18, 0xE8	; 232
    3e56:	33 e0       	ldi	r19, 0x03	; 3
    3e58:	4f e0       	ldi	r20, 0x0F	; 15
    3e5a:	5f e1       	ldi	r21, 0x1F	; 31
    3e5c:	60 e0       	ldi	r22, 0x00	; 0
    3e5e:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    3e62:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <arq_connect>
    3e66:	80 93 f5 19 	sts	0x19F5, r24	; 0x8019f5 <connected>
  return connected;
}
    3e6a:	08 95       	ret

00003e6c <send_handshake>:

uint8_t send_handshake(void) {
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	ec 97       	sbiw	r28, 0x3c	; 60
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return 0;
    3e80:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <connected>
    3e84:	88 23       	and	r24, r24
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <send_handshake+0x1e>
    3e88:	4e c0       	rjmp	.+156    	; 0x3f26 <send_handshake+0xba>
  message_t msg;
  msg.type = TYPE_HANDSHAKE;
    3e8a:	19 82       	std	Y+1, r1	; 0x01
  msg.message.handshake.name_length = ROBOT_NAME_LENGTH;
    3e8c:	87 e0       	ldi	r24, 0x07	; 7
    3e8e:	8a 83       	std	Y+2, r24	; 0x02
  strcpy((char*)msg.message.handshake.name, ROBOT_NAME);
    3e90:	88 e0       	ldi	r24, 0x08	; 8
    3e92:	e3 e6       	ldi	r30, 0x63	; 99
    3e94:	f6 e0       	ldi	r31, 0x06	; 6
    3e96:	de 01       	movw	r26, r28
    3e98:	13 96       	adiw	r26, 0x03	; 3
    3e9a:	01 90       	ld	r0, Z+
    3e9c:	0d 92       	st	X+, r0
    3e9e:	8a 95       	dec	r24
    3ea0:	e1 f7       	brne	.-8      	; 0x3e9a <send_handshake+0x2e>
  msg.message.handshake.width = ROBOT_TOTAL_WIDTH_MM;
    3ea2:	24 eb       	ldi	r18, 0xB4	; 180
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	3b 87       	std	Y+11, r19	; 0x0b
    3ea8:	2a 87       	std	Y+10, r18	; 0x0a
  msg.message.handshake.length = ROBOT_TOTAL_LENGTH_MM;
    3eaa:	85 ef       	ldi	r24, 0xF5	; 245
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	9d 87       	std	Y+13, r25	; 0x0d
    3eb0:	8c 87       	std	Y+12, r24	; 0x0c
  msg.message.handshake.axel_offset = ROBOT_AXEL_OFFSET_MM;
    3eb2:	88 e3       	ldi	r24, 0x38	; 56
    3eb4:	88 8b       	std	Y+16, r24	; 0x10
  msg.message.handshake.tower_offset_x = SENSOR_TOWER_OFFSET_X_MM;
    3eb6:	8e 87       	std	Y+14, r24	; 0x0e
  msg.message.handshake.tower_offset_y = SENSOR_TOWER_OFFSET_Y_MM;
    3eb8:	1f 86       	std	Y+15, r1	; 0x0f
  msg.message.handshake.sensor_offset1 = SENSOR_OFFSET_RADIUS_MM;
    3eba:	85 e1       	ldi	r24, 0x15	; 21
    3ebc:	89 8b       	std	Y+17, r24	; 0x11
  msg.message.handshake.sensor_offset2 = SENSOR_OFFSET_RADIUS_MM;
    3ebe:	8a 8b       	std	Y+18, r24	; 0x12
  msg.message.handshake.sensor_offset3 = SENSOR_OFFSET_RADIUS_MM;
    3ec0:	8b 8b       	std	Y+19, r24	; 0x13
  msg.message.handshake.sensor_offset4 = SENSOR_OFFSET_RADIUS_MM;
    3ec2:	8c 8b       	std	Y+20, r24	; 0x14
  msg.message.handshake.sensor_heading1 = SENSOR1_HEADING_DEG;
    3ec4:	1e 8a       	std	Y+22, r1	; 0x16
    3ec6:	1d 8a       	std	Y+21, r1	; 0x15
  msg.message.handshake.sensor_heading2 = SENSOR2_HEADING_DEG;
    3ec8:	8a e5       	ldi	r24, 0x5A	; 90
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	98 8f       	std	Y+24, r25	; 0x18
    3ece:	8f 8b       	std	Y+23, r24	; 0x17
  msg.message.handshake.sensor_heading3 = SENSOR3_HEADING_DEG;
    3ed0:	3a 8f       	std	Y+26, r19	; 0x1a
    3ed2:	29 8f       	std	Y+25, r18	; 0x19
  msg.message.handshake.sensor_heading4 = SENSOR4_HEADING_DEG;
    3ed4:	8e e0       	ldi	r24, 0x0E	; 14
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	9c 8f       	std	Y+28, r25	; 0x1c
    3eda:	8b 8f       	std	Y+27, r24	; 0x1b
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
    3edc:	88 ec       	ldi	r24, 0xC8	; 200
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ee2:	8d 8f       	std	Y+29, r24	; 0x1d
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3ee4:	8e e1       	ldi	r24, 0x1E	; 30
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	31 96       	adiw	r30, 0x01	; 1
    3eea:	de 01       	movw	r26, r28
    3eec:	5f 96       	adiw	r26, 0x1f	; 31
    3eee:	01 90       	ld	r0, Z+
    3ef0:	0d 92       	st	X+, r0
    3ef2:	8a 95       	dec	r24
    3ef4:	e1 f7       	brne	.-8      	; 0x3eee <send_handshake+0x82>
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
    3ef6:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <use_arq>
    3efa:	88 23       	and	r24, r24
    3efc:	59 f0       	breq	.+22     	; 0x3f14 <send_handshake+0xa8>
    3efe:	4e e1       	ldi	r20, 0x1E	; 30
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	be 01       	movw	r22, r28
    3f04:	61 5e       	subi	r22, 0xE1	; 225
    3f06:	7f 4f       	sbci	r23, 0xFF	; 255
    3f08:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    3f0c:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
  else simple_p_send(server_connection, data, sizeof(data));
  return 1;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	09 c0       	rjmp	.+18     	; 0x3f26 <send_handshake+0xba>
  msg.message.handshake.deadline = ROBOT_DEADLINE_MS;
  
  uint8_t data[sizeof(handshake_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
  if(use_arq[TYPE_HANDSHAKE]) arq_send(server_connection, data, sizeof(data));
  else simple_p_send(server_connection, data, sizeof(data));
    3f14:	4e e1       	ldi	r20, 0x1E	; 30
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	be 01       	movw	r22, r28
    3f1a:	61 5e       	subi	r22, 0xE1	; 225
    3f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1e:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    3f22:	76 d1       	rcall	.+748    	; 0x4210 <simple_p_send>
  return 1;
    3f24:	81 e0       	ldi	r24, 0x01	; 1
}
    3f26:	ec 96       	adiw	r28, 0x3c	; 60
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	08 95       	ret

00003f38 <send_update>:

void send_update(int16_t x_cm, int16_t y_cm, int16_t heading_deg, int16_t towerAngle_deg, uint8_t S1_cm, uint8_t S2_cm, uint8_t S3_cm, uint8_t S4_cm){
    3f38:	af 92       	push	r10
    3f3a:	cf 92       	push	r12
    3f3c:	ef 92       	push	r14
    3f3e:	0f 93       	push	r16
    3f40:	cf 93       	push	r28
    3f42:	df 93       	push	r29
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	2d 97       	sbiw	r28, 0x0d	; 13
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
  if(!connected) return;
    3f54:	e0 91 f5 19 	lds	r30, 0x19F5	; 0x8019f5 <connected>
    3f58:	ee 23       	and	r30, r30
    3f5a:	19 f1       	breq	.+70     	; 0x3fa2 <send_update+0x6a>
  msg.message.update.sensor1 = S1_cm;
  msg.message.update.sensor2 = S2_cm;
  msg.message.update.sensor3 = S3_cm;
  msg.message.update.sensor4 = S4_cm;
  uint8_t data[sizeof(update_message_t)+1];
  memcpy(data, (uint8_t*) &msg, sizeof(data));
    3f5c:	e1 e0       	ldi	r30, 0x01	; 1
    3f5e:	e9 83       	std	Y+1, r30	; 0x01
    3f60:	9b 83       	std	Y+3, r25	; 0x03
    3f62:	8a 83       	std	Y+2, r24	; 0x02
    3f64:	7d 83       	std	Y+5, r23	; 0x05
    3f66:	6c 83       	std	Y+4, r22	; 0x04
    3f68:	5f 83       	std	Y+7, r21	; 0x07
    3f6a:	4e 83       	std	Y+6, r20	; 0x06
    3f6c:	39 87       	std	Y+9, r19	; 0x09
    3f6e:	28 87       	std	Y+8, r18	; 0x08
    3f70:	0a 87       	std	Y+10, r16	; 0x0a
    3f72:	eb 86       	std	Y+11, r14	; 0x0b
    3f74:	cc 86       	std	Y+12, r12	; 0x0c
    3f76:	ad 86       	std	Y+13, r10	; 0x0d
  if(use_arq[TYPE_UPDATE]) arq_send(server_connection, data, sizeof(data));
    3f78:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <use_arq+0x1>
    3f7c:	88 23       	and	r24, r24
    3f7e:	51 f0       	breq	.+20     	; 0x3f94 <send_update+0x5c>
    3f80:	4d e0       	ldi	r20, 0x0D	; 13
    3f82:	50 e0       	ldi	r21, 0x00	; 0
    3f84:	be 01       	movw	r22, r28
    3f86:	6f 5f       	subi	r22, 0xFF	; 255
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    3f8e:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    3f92:	07 c0       	rjmp	.+14     	; 0x3fa2 <send_update+0x6a>
  else simple_p_send(SERVER_ADDRESS, data, sizeof(data));
    3f94:	4d e0       	ldi	r20, 0x0D	; 13
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	be 01       	movw	r22, r28
    3f9a:	6f 5f       	subi	r22, 0xFF	; 255
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	37 d1       	rcall	.+622    	; 0x4210 <simple_p_send>
}
    3fa2:	2d 96       	adiw	r28, 0x0d	; 13
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	0f 91       	pop	r16
    3fb4:	ef 90       	pop	r14
    3fb6:	cf 90       	pop	r12
    3fb8:	af 90       	pop	r10
    3fba:	08 95       	ret

00003fbc <send_idle>:

void send_idle(void) {
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	1f 92       	push	r1
    3fc2:	cd b7       	in	r28, 0x3d	; 61
    3fc4:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    3fc6:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <connected>
    3fca:	88 23       	and	r24, r24
    3fcc:	b9 f0       	breq	.+46     	; 0x3ffc <send_idle+0x40>
  uint8_t status = TYPE_IDLE;
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_IDLE]) arq_send(server_connection, &status, 1);
    3fd2:	80 91 03 06 	lds	r24, 0x0603	; 0x800603 <use_arq+0x3>
    3fd6:	88 23       	and	r24, r24
    3fd8:	51 f0       	breq	.+20     	; 0x3fee <send_idle+0x32>
    3fda:	41 e0       	ldi	r20, 0x01	; 1
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	be 01       	movw	r22, r28
    3fe0:	6f 5f       	subi	r22, 0xFF	; 255
    3fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe4:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    3fe8:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    3fec:	07 c0       	rjmp	.+14     	; 0x3ffc <send_idle+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	50 e0       	ldi	r21, 0x00	; 0
    3ff2:	be 01       	movw	r22, r28
    3ff4:	6f 5f       	subi	r22, 0xFF	; 255
    3ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	0a d1       	rcall	.+532    	; 0x4210 <simple_p_send>
}
    3ffc:	0f 90       	pop	r0
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	08 95       	ret

00004004 <debug>:
void debug(const char *fmt, ...) {
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	c4 56       	subi	r28, 0x64	; 100
    400e:	d1 09       	sbc	r29, r1
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	ae 01       	movw	r20, r28
    401c:	46 59       	subi	r20, 0x96	; 150
    401e:	5f 4f       	sbci	r21, 0xFF	; 255
    4020:	fa 01       	movw	r30, r20
    4022:	61 91       	ld	r22, Z+
    4024:	71 91       	ld	r23, Z+
    4026:	af 01       	movw	r20, r30
	uint8_t buf[100];
	va_list ap;
	buf[0] = TYPE_DEBUG;
    4028:	8a e0       	ldi	r24, 0x0A	; 10
    402a:	89 83       	std	Y+1, r24	; 0x01
	va_start(ap, fmt);
	uint8_t ret = vsprintf((char*)buf+1, fmt, ap);
    402c:	ce 01       	movw	r24, r28
    402e:	02 96       	adiw	r24, 0x02	; 2
    4030:	0e 94 44 37 	call	0x6e88	; 0x6e88 <vsprintf>
	va_end(ap);
	if (ret > 0) {
    4034:	88 23       	and	r24, r24
    4036:	c9 f0       	breq	.+50     	; 0x406a <debug+0x66>
		if(use_arq[TYPE_DEBUG]) arq_send(server_connection, buf, ret+1);
    4038:	20 91 0a 06 	lds	r18, 0x060A	; 0x80060a <use_arq+0xa>
    403c:	22 23       	and	r18, r18
    403e:	61 f0       	breq	.+24     	; 0x4058 <debug+0x54>
    4040:	99 27       	eor	r25, r25
    4042:	ac 01       	movw	r20, r24
    4044:	4f 5f       	subi	r20, 0xFF	; 255
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	be 01       	movw	r22, r28
    404a:	6f 5f       	subi	r22, 0xFF	; 255
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    4052:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    4056:	09 c0       	rjmp	.+18     	; 0x406a <debug+0x66>
		else simple_p_send(SERVER_ADDRESS, buf, ret+1);
    4058:	99 27       	eor	r25, r25
    405a:	ac 01       	movw	r20, r24
    405c:	4f 5f       	subi	r20, 0xFF	; 255
    405e:	5f 4f       	sbci	r21, 0xFF	; 255
    4060:	be 01       	movw	r22, r28
    4062:	6f 5f       	subi	r22, 0xFF	; 255
    4064:	7f 4f       	sbci	r23, 0xFF	; 255
    4066:	80 e0       	ldi	r24, 0x00	; 0
    4068:	d3 d0       	rcall	.+422    	; 0x4210 <simple_p_send>
	}
}
    406a:	cc 59       	subi	r28, 0x9C	; 156
    406c:	df 4f       	sbci	r29, 0xFF	; 255
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	08 95       	ret

0000407e <send_ping_response>:

void send_ping_response(void) {
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	1f 92       	push	r1
    4084:	cd b7       	in	r28, 0x3d	; 61
    4086:	de b7       	in	r29, 0x3e	; 62
  if(!connected) return;
    4088:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <connected>
    408c:	88 23       	and	r24, r24
    408e:	b9 f0       	breq	.+46     	; 0x40be <send_ping_response+0x40>
  uint8_t status = TYPE_PING_RESPONSE;
    4090:	89 e0       	ldi	r24, 0x09	; 9
    4092:	89 83       	std	Y+1, r24	; 0x01
  if(use_arq[TYPE_PING_RESPONSE]) arq_send(server_connection, &status, 1);
    4094:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <use_arq+0x9>
    4098:	88 23       	and	r24, r24
    409a:	51 f0       	breq	.+20     	; 0x40b0 <send_ping_response+0x32>
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	50 e0       	ldi	r21, 0x00	; 0
    40a0:	be 01       	movw	r22, r28
    40a2:	6f 5f       	subi	r22, 0xFF	; 255
    40a4:	7f 4f       	sbci	r23, 0xFF	; 255
    40a6:	80 91 93 1b 	lds	r24, 0x1B93	; 0x801b93 <server_connection>
    40aa:	0e 94 33 02 	call	0x466	; 0x466 <arq_send>
    40ae:	07 c0       	rjmp	.+14     	; 0x40be <send_ping_response+0x40>
  else simple_p_send(SERVER_ADDRESS, &status, 1);
    40b0:	41 e0       	ldi	r20, 0x01	; 1
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	be 01       	movw	r22, r28
    40b6:	6f 5f       	subi	r22, 0xFF	; 255
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	a9 d0       	rcall	.+338    	; 0x4210 <simple_p_send>
}
    40be:	0f 90       	pop	r0
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	08 95       	ret

000040c6 <vServo_setAngle>:
}

/* Sets servo angle to a specific degree */
void vServo_setAngle(uint8_t ServoAngleDeg){
    /* Ensure feasible values */
    if (ServoAngleDeg >= 90){
    40c6:	8a 35       	cpi	r24, 0x5A	; 90
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <vServo_setAngle+0x6>
        ServoAngleDeg = 90;
    40ca:	8a e5       	ldi	r24, 0x5A	; 90
    }
    else if(ServoAngleDeg <= 0){
        ServoAngleDeg = 0;
    }
    /* Fetch pulse width from array and set to output */
    servoOCR = DEG_TO_PWM[ServoAngleDeg];
    40cc:	e8 2f       	mov	r30, r24
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	ee 0f       	add	r30, r30
    40d2:	ff 1f       	adc	r31, r31
    40d4:	e5 59       	subi	r30, 0x95	; 149
    40d6:	f9 4f       	sbci	r31, 0xF9	; 249
    40d8:	80 81       	ld	r24, Z
    40da:	91 81       	ldd	r25, Z+1	; 0x01
    40dc:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    40e0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
    40e4:	08 95       	ret

000040e6 <vServo_init>:
/************************************************************************/
void vServo_init(uint8_t servoAngleDeg){
    /* Clear OCnA/OCnB on Compare Match, set */
    /* OCnA/OCnB at BOTTOM (non-inverting mode) */
    /* Datasheet p.155 Table 17-4 */
    TCCR4A |= (1<<COM4B1) | (0<<COM4B0);
    40e6:	a0 ea       	ldi	r26, 0xA0	; 160
    40e8:	b0 e0       	ldi	r27, 0x00	; 0
    40ea:	9c 91       	ld	r25, X
    40ec:	90 62       	ori	r25, 0x20	; 32
    40ee:	9c 93       	st	X, r25
    
    /* Waveform generation mode 14: Fast PWM */
    /* top: ICRn, Update bottom, flag set on top */
    /* Datasheet p.145 Table 17-2 */
	
    TCCR4B |= (1<<WGM43) | (1<<WGM42);                                             
    40f0:	e1 ea       	ldi	r30, 0xA1	; 161
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	90 81       	ld	r25, Z
    40f6:	98 61       	ori	r25, 0x18	; 24
    40f8:	90 83       	st	Z, r25
    TCCR4A |= (1<<WGM41) | (0<<WGM40);
    40fa:	9c 91       	ld	r25, X
    40fc:	92 60       	ori	r25, 0x02	; 2
    40fe:	9c 93       	st	X, r25

    /* Clock select bit description: */
    /* clkI/O/8 (From prescaler) - Datasheet p.157 Table 17-6*/

     TCCR4B |= (0<<CS42) | (1<<CS41) | (0<<CS40);                                           
    4100:	90 81       	ld	r25, Z
    4102:	92 60       	ori	r25, 0x02	; 2
    4104:	90 83       	st	Z, r25
    
    /* 50Hz 20ms period => 16Mhz/(8clk*50Hz) - 1 = ICR1] */
    /* Datasheet p.125 */
    ICR4 = 39999; // 49999 for 20mhz, 39 999 for 16Mhz                                      
    4106:	2f e3       	ldi	r18, 0x3F	; 63
    4108:	3c e9       	ldi	r19, 0x9C	; 156
    410a:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    410e:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    
    /*Port H Pin 7 as servo PWM Output (OC4B)*/
    servoReg |= (1<<servoPin);
    4112:	e1 e0       	ldi	r30, 0x01	; 1
    4114:	f1 e0       	ldi	r31, 0x01	; 1
    4116:	90 81       	ld	r25, Z
    4118:	90 61       	ori	r25, 0x10	; 16
    411a:	90 83       	st	Z, r25
    
    /*  Set angle to desired start angle (usually 0)*/
    vServo_setAngle(servoAngleDeg);
    411c:	d4 cf       	rjmp	.-88     	; 0x40c6 <vServo_setAngle>
    411e:	08 95       	ret

00004120 <simple_p_reassembly>:
  vPortFree(part);
  return 1;
}


void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length) {
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
  uint8_t i;
  uint8_t id = 0xFF;
  uint8_t free = 0xFF;
  for(i=0;i<MAX_MESSAGES;i++) {
    if(messages[i].address == 0xFF && free == 0xFF) free = i;
    412c:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <messages+0x1>
    4130:	9f 3f       	cpi	r25, 0xFF	; 255
    4132:	11 f0       	breq	.+4      	; 0x4138 <simple_p_reassembly+0x18>
    else if(messages[i].address == sender) {
    4134:	98 13       	cpse	r25, r24
    4136:	58 c0       	rjmp	.+176    	; 0x41e8 <simple_p_reassembly+0xc8>
  if(id == 0xFF && free == 0xFF) return; // Not room for any more messages, and none is stored for this address
  else if(id == 0xFF && free != 0xFF) { // Did not find any part messages from this sender, but there is room to store a new one
    id = free; 
  }
    
  if(data[0] == 0) { // First part of a new message
    4138:	fb 01       	movw	r30, r22
    413a:	80 81       	ld	r24, Z
    413c:	81 11       	cpse	r24, r1
    413e:	05 c0       	rjmp	.+10     	; 0x414a <simple_p_reassembly+0x2a>
    messages[id].num_received_bytes = 0;
    4140:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <messages+0x3>
    4144:	10 92 f8 19 	sts	0x19F8, r1	; 0x8019f8 <messages+0x2>
    4148:	0c c0       	rjmp	.+24     	; 0x4162 <simple_p_reassembly+0x42>
  } else if(data[0] != messages[id].next_part) {
    414a:	90 91 fa 19 	lds	r25, 0x19FA	; 0x8019fa <messages+0x4>
    414e:	89 17       	cp	r24, r25
    4150:	41 f0       	breq	.+16     	; 0x4162 <simple_p_reassembly+0x42>
    messages[id].next_part = 0;
    4152:	e6 ef       	ldi	r30, 0xF6	; 246
    4154:	f9 e1       	ldi	r31, 0x19	; 25
    4156:	14 82       	std	Z+4, r1	; 0x04
    messages[id].num_received_bytes = 0;
    4158:	13 82       	std	Z+3, r1	; 0x03
    415a:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    415c:	8f ef       	ldi	r24, 0xFF	; 255
    415e:	81 83       	std	Z+1, r24	; 0x01
    return;
    4160:	43 c0       	rjmp	.+134    	; 0x41e8 <simple_p_reassembly+0xc8>
  }

  if(messages[id].num_received_bytes + (length-2) > MAX_MESSAGE_SIZE) { // Message is larger than what can be handled, discard it
    4162:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <messages+0x2>
    4166:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <messages+0x3>
    416a:	9c 01       	movw	r18, r24
    416c:	22 50       	subi	r18, 0x02	; 2
    416e:	31 09       	sbc	r19, r1
    4170:	24 0f       	add	r18, r20
    4172:	35 1f       	adc	r19, r21
    4174:	25 36       	cpi	r18, 0x65	; 101
    4176:	31 05       	cpc	r19, r1
    4178:	40 f0       	brcs	.+16     	; 0x418a <simple_p_reassembly+0x6a>
    messages[id].num_received_bytes = 0;
    417a:	e6 ef       	ldi	r30, 0xF6	; 246
    417c:	f9 e1       	ldi	r31, 0x19	; 25
    417e:	13 82       	std	Z+3, r1	; 0x03
    4180:	12 82       	std	Z+2, r1	; 0x02
    messages[id].next_part = 0;
    4182:	14 82       	std	Z+4, r1	; 0x04
    messages[id].address = 0xFF;
    4184:	8f ef       	ldi	r24, 0xFF	; 255
    4186:	81 83       	std	Z+1, r24	; 0x01
    return;
    4188:	2f c0       	rjmp	.+94     	; 0x41e8 <simple_p_reassembly+0xc8>
    418a:	8a 01       	movw	r16, r20
    418c:	eb 01       	movw	r28, r22
  }
  
  messages[id].next_part++;
    418e:	0f 2e       	mov	r0, r31
    4190:	f6 ef       	ldi	r31, 0xF6	; 246
    4192:	ef 2e       	mov	r14, r31
    4194:	f9 e1       	ldi	r31, 0x19	; 25
    4196:	ff 2e       	mov	r15, r31
    4198:	f0 2d       	mov	r31, r0
    419a:	f7 01       	movw	r30, r14
    419c:	24 81       	ldd	r18, Z+4	; 0x04
    419e:	2f 5f       	subi	r18, 0xFF	; 255
    41a0:	24 83       	std	Z+4, r18	; 0x04
  memcpy(messages[id].message+messages[id].num_received_bytes, data+2, length-2);
    41a2:	42 50       	subi	r20, 0x02	; 2
    41a4:	51 09       	sbc	r21, r1
    41a6:	6e 5f       	subi	r22, 0xFE	; 254
    41a8:	7f 4f       	sbci	r23, 0xFF	; 255
    41aa:	85 50       	subi	r24, 0x05	; 5
    41ac:	96 4e       	sbci	r25, 0xE6	; 230
    41ae:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
  messages[id].num_received_bytes += (length-2);
    41b2:	f7 01       	movw	r30, r14
    41b4:	42 81       	ldd	r20, Z+2	; 0x02
    41b6:	53 81       	ldd	r21, Z+3	; 0x03
    41b8:	42 50       	subi	r20, 0x02	; 2
    41ba:	51 09       	sbc	r21, r1
    41bc:	ba 01       	movw	r22, r20
    41be:	60 0f       	add	r22, r16
    41c0:	71 1f       	adc	r23, r17
    41c2:	73 83       	std	Z+3, r23	; 0x03
    41c4:	62 83       	std	Z+2, r22	; 0x02
  
  if(data[0] == data[1]) {
    41c6:	98 81       	ld	r25, Y
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	98 13       	cpse	r25, r24
    41cc:	0d c0       	rjmp	.+26     	; 0x41e8 <simple_p_reassembly+0xc8>
    callback_data_received(messages[id].message, messages[id].num_received_bytes);
    41ce:	e0 91 94 1b 	lds	r30, 0x1B94	; 0x801b94 <callback_data_received>
    41d2:	f0 91 95 1b 	lds	r31, 0x1B95	; 0x801b95 <callback_data_received+0x1>
    41d6:	8b ef       	ldi	r24, 0xFB	; 251
    41d8:	99 e1       	ldi	r25, 0x19	; 25
    41da:	19 95       	eicall
    messages[id].num_received_bytes = messages[id].next_part = 0;
    41dc:	f7 01       	movw	r30, r14
    41de:	14 82       	std	Z+4, r1	; 0x04
    41e0:	13 82       	std	Z+3, r1	; 0x03
    41e2:	12 82       	std	Z+2, r1	; 0x02
    messages[id].address = 0xFF;
    41e4:	8f ef       	ldi	r24, 0xFF	; 255
    41e6:	81 83       	std	Z+1, r24	; 0x01
  }
    41e8:	df 91       	pop	r29
    41ea:	cf 91       	pop	r28
    41ec:	1f 91       	pop	r17
    41ee:	0f 91       	pop	r16
    41f0:	ff 90       	pop	r15
    41f2:	ef 90       	pop	r14
    41f4:	08 95       	ret

000041f6 <simple_p_init>:
void (*callback_data_received)(uint8_t*, uint16_t); 

void simple_p_reassembly(uint8_t sender, uint8_t *data, uint16_t length);

void simple_p_init(void (*cb)(uint8_t*, uint16_t)) {
  callback_data_received = cb;
    41f6:	90 93 95 1b 	sts	0x1B95, r25	; 0x801b95 <callback_data_received+0x1>
    41fa:	80 93 94 1b 	sts	0x1B94, r24	; 0x801b94 <callback_data_received>
  uint8_t i;
  network_set_callback(PROTOCOL_SIMPLE, simple_p_reassembly);
    41fe:	60 e9       	ldi	r22, 0x90	; 144
    4200:	70 e2       	ldi	r23, 0x20	; 32
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <network_set_callback>
  for(i=0;i<MAX_MESSAGES;i++) {
    messages[i].address = 0xFF;
    4208:	8f ef       	ldi	r24, 0xFF	; 255
    420a:	80 93 f7 19 	sts	0x19F7, r24	; 0x8019f7 <messages+0x1>
    420e:	08 95       	ret

00004210 <simple_p_send>:
  }
}

uint8_t simple_p_send(uint8_t address, uint8_t *data, uint16_t length) {  
    4210:	5f 92       	push	r5
    4212:	6f 92       	push	r6
    4214:	7f 92       	push	r7
    4216:	8f 92       	push	r8
    4218:	9f 92       	push	r9
    421a:	af 92       	push	r10
    421c:	bf 92       	push	r11
    421e:	cf 92       	push	r12
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	58 2e       	mov	r5, r24
    4230:	5b 01       	movw	r10, r22
    4232:	8a 01       	movw	r16, r20
  uint16_t tmp;
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
    4234:	8c e2       	ldi	r24, 0x2C	; 44
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    423c:	7c 01       	movw	r14, r24
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
    423e:	98 01       	movw	r18, r16
    4240:	36 95       	lsr	r19
    4242:	27 95       	ror	r18
    4244:	ad e0       	ldi	r26, 0x0D	; 13
    4246:	b3 ec       	ldi	r27, 0xC3	; 195
    4248:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <__umulhisi3>
    424c:	92 95       	swap	r25
    424e:	82 95       	swap	r24
    4250:	8f 70       	andi	r24, 0x0F	; 15
    4252:	89 27       	eor	r24, r25
    4254:	9f 70       	andi	r25, 0x0F	; 15
    4256:	89 27       	eor	r24, r25
    4258:	4a e2       	ldi	r20, 0x2A	; 42
    425a:	48 9f       	mul	r20, r24
    425c:	90 01       	movw	r18, r0
    425e:	49 9f       	mul	r20, r25
    4260:	30 0d       	add	r19, r0
    4262:	11 24       	eor	r1, r1
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	02 17       	cp	r16, r18
    4268:	13 07       	cpc	r17, r19
    426a:	09 f4       	brne	.+2      	; 0x426e <simple_p_send+0x5e>
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	98 01       	movw	r18, r16
    4270:	36 95       	lsr	r19
    4272:	27 95       	ror	r18
    4274:	ad e0       	ldi	r26, 0x0D	; 13
    4276:	b3 ec       	ldi	r27, 0xC3	; 195
    4278:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <__umulhisi3>
    427c:	92 95       	swap	r25
    427e:	82 95       	swap	r24
    4280:	8f 70       	andi	r24, 0x0F	; 15
    4282:	89 27       	eor	r24, r25
    4284:	9f 70       	andi	r25, 0x0F	; 15
    4286:	89 27       	eor	r24, r25
    4288:	84 0f       	add	r24, r20
  while(remaining > 0) {
    428a:	01 15       	cp	r16, r1
    428c:	11 05       	cpc	r17, r1
    428e:	59 f1       	breq	.+86     	; 0x42e6 <simple_p_send+0xd6>
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	c1 2c       	mov	r12, r1
    4294:	d1 2c       	mov	r13, r1
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    part[1] = number_of_parts-1;
    4296:	66 24       	eor	r6, r6
    4298:	6a 94       	dec	r6
    429a:	68 0e       	add	r6, r24
    memcpy(part+2, data+offset, tmp);
    429c:	47 01       	movw	r8, r14
    429e:	82 e0       	ldi	r24, 0x02	; 2
    42a0:	88 0e       	add	r8, r24
    42a2:	91 1c       	adc	r9, r1
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    42a4:	e8 01       	movw	r28, r16
    42a6:	0b 32       	cpi	r16, 0x2B	; 43
    42a8:	11 05       	cpc	r17, r1
    42aa:	10 f0       	brcs	.+4      	; 0x42b0 <simple_p_send+0xa0>
    42ac:	ca e2       	ldi	r28, 0x2A	; 42
    42ae:	d0 e0       	ldi	r29, 0x00	; 0
    part[0] = part_number++;
    42b0:	77 24       	eor	r7, r7
    42b2:	73 94       	inc	r7
    42b4:	79 0e       	add	r7, r25
    42b6:	f7 01       	movw	r30, r14
    42b8:	90 83       	st	Z, r25
    part[1] = number_of_parts-1;
    42ba:	61 82       	std	Z+1, r6	; 0x01
    memcpy(part+2, data+offset, tmp);
    42bc:	b5 01       	movw	r22, r10
    42be:	6c 0d       	add	r22, r12
    42c0:	7d 1d       	adc	r23, r13
    42c2:	ae 01       	movw	r20, r28
    42c4:	c4 01       	movw	r24, r8
    42c6:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    42ca:	9e 01       	movw	r18, r28
    42cc:	2e 5f       	subi	r18, 0xFE	; 254
    42ce:	3f 4f       	sbci	r19, 0xFF	; 255
    42d0:	a7 01       	movw	r20, r14
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	85 2d       	mov	r24, r5
    42d6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <network_send>
    offset += tmp;
    42da:	cc 0e       	add	r12, r28
    42dc:	dd 1e       	adc	r13, r29
    remaining -= tmp;
    42de:	0c 1b       	sub	r16, r28
    42e0:	1d 0b       	sbc	r17, r29
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    tmp = remaining < (MAX_PAYLOAD_SIZE-2) ? remaining : (MAX_PAYLOAD_SIZE-2);
    part[0] = part_number++;
    42e2:	97 2d       	mov	r25, r7
  uint16_t remaining = length;
  uint16_t offset = 0;
  uint8_t *part = pvPortMalloc(MAX_PAYLOAD_SIZE);
  uint8_t part_number=0;
  uint8_t number_of_parts = (length/(MAX_PAYLOAD_SIZE-2)) + (length % (MAX_PAYLOAD_SIZE-2) != 0);
  while(remaining > 0) {
    42e4:	f9 f6       	brne	.-66     	; 0x42a4 <simple_p_send+0x94>
    memcpy(part+2, data+offset, tmp);
    network_send(address, PROTOCOL_SIMPLE, part, tmp+2);
    offset += tmp;
    remaining -= tmp;
  }
  vPortFree(part);
    42e6:	c7 01       	movw	r24, r14
    42e8:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
  return 1;
}
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	df 90       	pop	r13
    42fc:	cf 90       	pop	r12
    42fe:	bf 90       	pop	r11
    4300:	af 90       	pop	r10
    4302:	9f 90       	pop	r9
    4304:	8f 90       	pop	r8
    4306:	7f 90       	pop	r7
    4308:	6f 90       	pop	r6
    430a:	5f 90       	pop	r5
    430c:	08 95       	ret

0000430e <vSPI_MasterInit>:

#include "defines.h"

void vSPI_MasterInit(){
    /* Set MOSI SCK and slave select pin as output */
    DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<IMU_SS);
    430e:	84 b1       	in	r24, 0x04	; 4
    4310:	87 60       	ori	r24, 0x07	; 7
    4312:	84 b9       	out	0x04, r24	; 4
    DDR_SPI &= ~(1 << DD_MISO); // Set MISO as input
    4314:	23 98       	cbi	0x04, 3	; 4
    
    /* Enable SPI, master, set clockrate at fck/128, MSB first */
    /* Max frequency for LSM6DS3 is 10Mhz, we use 156 250Hz */
    // Data is captured on rising edge of clock (CPHA = 0)
    // Base value of the clock is HIGH (CPOL = 1)
    SPCR |= (1<<SPI2X) | (0<<SPR1) | (0<<SPR0);
    4316:	8c b5       	in	r24, 0x2c	; 44
    4318:	81 60       	ori	r24, 0x01	; 1
    431a:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    431c:	8c b5       	in	r24, 0x2c	; 44
    431e:	8c 65       	ori	r24, 0x5C	; 92
    4320:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~(1<<DORD); // MSB first
    4322:	8c b5       	in	r24, 0x2c	; 44
    4324:	8f 7d       	andi	r24, 0xDF	; 223
    4326:	8c bd       	out	0x2c, r24	; 44
    4328:	08 95       	ret

0000432a <ui8SPI_MasterTransmit>:
}

uint8_t ui8SPI_MasterTransmit(char cData){
    /* Start transmission */
    SPDR = cData;
    432a:	8e bd       	out	0x2e, r24	; 46
    /* Wait for transmission complete */
    asm volatile("nop");
    432c:	00 00       	nop
    while(!(SPSR & (1<<SPIF)));
    432e:	0d b4       	in	r0, 0x2d	; 45
    4330:	07 fe       	sbrs	r0, 7
    4332:	fd cf       	rjmp	.-6      	; 0x432e <ui8SPI_MasterTransmit+0x4>
    /* Return anything recieved */
    return SPDR;
    4334:	8e b5       	in	r24, 0x2e	; 46
}
    4336:	08 95       	ret

00004338 <xTaskGenericCreate>:
    4338:	4f 92       	push	r4
    433a:	5f 92       	push	r5
    433c:	6f 92       	push	r6
    433e:	7f 92       	push	r7
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	3c 01       	movw	r6, r24
    435a:	5b 01       	movw	r10, r22
    435c:	4a 01       	movw	r8, r20
    435e:	29 01       	movw	r4, r18
    4360:	c1 14       	cp	r12, r1
    4362:	d1 04       	cpc	r13, r1
    4364:	39 f4       	brne	.+14     	; 0x4374 <xTaskGenericCreate+0x3c>
    4366:	ca 01       	movw	r24, r20
    4368:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    436c:	6c 01       	movw	r12, r24
    436e:	89 2b       	or	r24, r25
    4370:	09 f4       	brne	.+2      	; 0x4374 <xTaskGenericCreate+0x3c>
    4372:	e4 c0       	rjmp	.+456    	; 0x453c <xTaskGenericCreate+0x204>
    4374:	88 e2       	ldi	r24, 0x28	; 40
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    437c:	ec 01       	movw	r28, r24
    437e:	89 2b       	or	r24, r25
    4380:	71 f0       	breq	.+28     	; 0x439e <xTaskGenericCreate+0x66>
    4382:	d8 8e       	std	Y+24, r13	; 0x18
    4384:	cf 8a       	std	Y+23, r12	; 0x17
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	88 1a       	sub	r8, r24
    438a:	91 08       	sbc	r9, r1
    438c:	c8 0c       	add	r12, r8
    438e:	d9 1c       	adc	r13, r9
    4390:	d5 01       	movw	r26, r10
    4392:	8c 91       	ld	r24, X
    4394:	89 8f       	std	Y+25, r24	; 0x19
    4396:	8c 91       	ld	r24, X
    4398:	81 11       	cpse	r24, r1
    439a:	05 c0       	rjmp	.+10     	; 0x43a6 <xTaskGenericCreate+0x6e>
    439c:	18 c0       	rjmp	.+48     	; 0x43ce <xTaskGenericCreate+0x96>
    439e:	c6 01       	movw	r24, r12
    43a0:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    43a4:	cb c0       	rjmp	.+406    	; 0x453c <xTaskGenericCreate+0x204>
    43a6:	ae 01       	movw	r20, r28
    43a8:	46 5e       	subi	r20, 0xE6	; 230
    43aa:	5f 4f       	sbci	r21, 0xFF	; 255
    43ac:	f5 01       	movw	r30, r10
    43ae:	31 96       	adiw	r30, 0x01	; 1
    43b0:	b8 e0       	ldi	r27, 0x08	; 8
    43b2:	ab 0e       	add	r10, r27
    43b4:	b1 1c       	adc	r11, r1
    43b6:	cf 01       	movw	r24, r30
    43b8:	21 91       	ld	r18, Z+
    43ba:	da 01       	movw	r26, r20
    43bc:	2d 93       	st	X+, r18
    43be:	ad 01       	movw	r20, r26
    43c0:	dc 01       	movw	r26, r24
    43c2:	8c 91       	ld	r24, X
    43c4:	88 23       	and	r24, r24
    43c6:	19 f0       	breq	.+6      	; 0x43ce <xTaskGenericCreate+0x96>
    43c8:	ae 16       	cp	r10, r30
    43ca:	bf 06       	cpc	r11, r31
    43cc:	a1 f7       	brne	.-24     	; 0x43b6 <xTaskGenericCreate+0x7e>
    43ce:	18 a2       	std	Y+32, r1	; 0x20
    43d0:	10 2f       	mov	r17, r16
    43d2:	06 30       	cpi	r16, 0x06	; 6
    43d4:	08 f0       	brcs	.+2      	; 0x43d8 <xTaskGenericCreate+0xa0>
    43d6:	15 e0       	ldi	r17, 0x05	; 5
    43d8:	1e 8b       	std	Y+22, r17	; 0x16
    43da:	19 a3       	std	Y+33, r17	; 0x21
    43dc:	1a a2       	std	Y+34, r1	; 0x22
    43de:	5e 01       	movw	r10, r28
    43e0:	b2 e0       	ldi	r27, 0x02	; 2
    43e2:	ab 0e       	add	r10, r27
    43e4:	b1 1c       	adc	r11, r1
    43e6:	c5 01       	movw	r24, r10
    43e8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    43ec:	ce 01       	movw	r24, r28
    43ee:	0c 96       	adiw	r24, 0x0c	; 12
    43f0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    43f4:	d9 87       	std	Y+9, r29	; 0x09
    43f6:	c8 87       	std	Y+8, r28	; 0x08
    43f8:	86 e0       	ldi	r24, 0x06	; 6
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	81 1b       	sub	r24, r17
    43fe:	91 09       	sbc	r25, r1
    4400:	9d 87       	std	Y+13, r25	; 0x0d
    4402:	8c 87       	std	Y+12, r24	; 0x0c
    4404:	db 8b       	std	Y+19, r29	; 0x13
    4406:	ca 8b       	std	Y+18, r28	; 0x12
    4408:	1b a2       	std	Y+35, r1	; 0x23
    440a:	1c a2       	std	Y+36, r1	; 0x24
    440c:	1d a2       	std	Y+37, r1	; 0x25
    440e:	1e a2       	std	Y+38, r1	; 0x26
    4410:	1f a2       	std	Y+39, r1	; 0x27
    4412:	a2 01       	movw	r20, r4
    4414:	b3 01       	movw	r22, r6
    4416:	c6 01       	movw	r24, r12
    4418:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <pxPortInitialiseStack>
    441c:	99 83       	std	Y+1, r25	; 0x01
    441e:	88 83       	st	Y, r24
    4420:	e1 14       	cp	r14, r1
    4422:	f1 04       	cpc	r15, r1
    4424:	19 f0       	breq	.+6      	; 0x442c <xTaskGenericCreate+0xf4>
    4426:	f7 01       	movw	r30, r14
    4428:	d1 83       	std	Z+1, r29	; 0x01
    442a:	c0 83       	st	Z, r28
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	f8 94       	cli
    4430:	0f 92       	push	r0
    4432:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4436:	8f 5f       	subi	r24, 0xFF	; 255
    4438:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <uxCurrentNumberOfTasks>
    443c:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4440:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4444:	89 2b       	or	r24, r25
    4446:	d9 f5       	brne	.+118    	; 0x44be <xTaskGenericCreate+0x186>
    4448:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <pxCurrentTCB+0x1>
    444c:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <pxCurrentTCB>
    4450:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	09 f0       	breq	.+2      	; 0x445a <xTaskGenericCreate+0x122>
    4458:	41 c0       	rjmp	.+130    	; 0x44dc <xTaskGenericCreate+0x1a4>
    445a:	0f 2e       	mov	r0, r31
    445c:	f3 e9       	ldi	r31, 0x93	; 147
    445e:	ef 2e       	mov	r14, r31
    4460:	fa e1       	ldi	r31, 0x1A	; 26
    4462:	ff 2e       	mov	r15, r31
    4464:	f0 2d       	mov	r31, r0
    4466:	0f 2e       	mov	r0, r31
    4468:	f9 ec       	ldi	r31, 0xC9	; 201
    446a:	cf 2e       	mov	r12, r31
    446c:	fa e1       	ldi	r31, 0x1A	; 26
    446e:	df 2e       	mov	r13, r31
    4470:	f0 2d       	mov	r31, r0
    4472:	c7 01       	movw	r24, r14
    4474:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4478:	f9 e0       	ldi	r31, 0x09	; 9
    447a:	ef 0e       	add	r14, r31
    447c:	f1 1c       	adc	r15, r1
    447e:	ec 14       	cp	r14, r12
    4480:	fd 04       	cpc	r15, r13
    4482:	b9 f7       	brne	.-18     	; 0x4472 <xTaskGenericCreate+0x13a>
    4484:	8a e8       	ldi	r24, 0x8A	; 138
    4486:	9a e1       	ldi	r25, 0x1A	; 26
    4488:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    448c:	81 e8       	ldi	r24, 0x81	; 129
    448e:	9a e1       	ldi	r25, 0x1A	; 26
    4490:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4494:	84 e7       	ldi	r24, 0x74	; 116
    4496:	9a e1       	ldi	r25, 0x1A	; 26
    4498:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    449c:	8b e6       	ldi	r24, 0x6B	; 107
    449e:	9a e1       	ldi	r25, 0x1A	; 26
    44a0:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    44a4:	8a e8       	ldi	r24, 0x8A	; 138
    44a6:	9a e1       	ldi	r25, 0x1A	; 26
    44a8:	90 93 80 1a 	sts	0x1A80, r25	; 0x801a80 <pxDelayedTaskList+0x1>
    44ac:	80 93 7f 1a 	sts	0x1A7F, r24	; 0x801a7f <pxDelayedTaskList>
    44b0:	81 e8       	ldi	r24, 0x81	; 129
    44b2:	9a e1       	ldi	r25, 0x1A	; 26
    44b4:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    44b8:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <xTaskGenericCreate+0x1a4>
    44be:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <xSchedulerRunning>
    44c2:	81 11       	cpse	r24, r1
    44c4:	0b c0       	rjmp	.+22     	; 0x44dc <xTaskGenericCreate+0x1a4>
    44c6:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    44ca:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    44ce:	86 89       	ldd	r24, Z+22	; 0x16
    44d0:	08 17       	cp	r16, r24
    44d2:	20 f0       	brcs	.+8      	; 0x44dc <xTaskGenericCreate+0x1a4>
    44d4:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <pxCurrentTCB+0x1>
    44d8:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <pxCurrentTCB>
    44dc:	80 91 62 1a 	lds	r24, 0x1A62	; 0x801a62 <uxTaskNumber>
    44e0:	8f 5f       	subi	r24, 0xFF	; 255
    44e2:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <uxTaskNumber>
    44e6:	8e 89       	ldd	r24, Y+22	; 0x16
    44e8:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    44ec:	98 17       	cp	r25, r24
    44ee:	10 f4       	brcc	.+4      	; 0x44f4 <xTaskGenericCreate+0x1bc>
    44f0:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9c 01       	movw	r18, r24
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	22 0f       	add	r18, r18
    44fe:	33 1f       	adc	r19, r19
    4500:	22 0f       	add	r18, r18
    4502:	33 1f       	adc	r19, r19
    4504:	82 0f       	add	r24, r18
    4506:	93 1f       	adc	r25, r19
    4508:	b5 01       	movw	r22, r10
    450a:	8d 56       	subi	r24, 0x6D	; 109
    450c:	95 4e       	sbci	r25, 0xE5	; 229
    450e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4512:	0f 90       	pop	r0
    4514:	0f be       	out	0x3f, r0	; 63
    4516:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <xSchedulerRunning>
    451a:	88 23       	and	r24, r24
    451c:	59 f0       	breq	.+22     	; 0x4534 <xTaskGenericCreate+0x1fc>
    451e:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4522:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4526:	86 89       	ldd	r24, Z+22	; 0x16
    4528:	80 17       	cp	r24, r16
    452a:	30 f4       	brcc	.+12     	; 0x4538 <xTaskGenericCreate+0x200>
    452c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	05 c0       	rjmp	.+10     	; 0x453e <xTaskGenericCreate+0x206>
    4534:	81 e0       	ldi	r24, 0x01	; 1
    4536:	03 c0       	rjmp	.+6      	; 0x453e <xTaskGenericCreate+0x206>
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	01 c0       	rjmp	.+2      	; 0x453e <xTaskGenericCreate+0x206>
    453c:	8f ef       	ldi	r24, 0xFF	; 255
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	ff 90       	pop	r15
    4548:	ef 90       	pop	r14
    454a:	df 90       	pop	r13
    454c:	cf 90       	pop	r12
    454e:	bf 90       	pop	r11
    4550:	af 90       	pop	r10
    4552:	9f 90       	pop	r9
    4554:	8f 90       	pop	r8
    4556:	7f 90       	pop	r7
    4558:	6f 90       	pop	r6
    455a:	5f 90       	pop	r5
    455c:	4f 90       	pop	r4
    455e:	08 95       	ret

00004560 <vTaskDelayUntil>:
    4560:	9f 92       	push	r9
    4562:	af 92       	push	r10
    4564:	bf 92       	push	r11
    4566:	cf 92       	push	r12
    4568:	df 92       	push	r13
    456a:	ef 92       	push	r14
    456c:	ff 92       	push	r15
    456e:	0f 93       	push	r16
    4570:	1f 93       	push	r17
    4572:	cf 93       	push	r28
    4574:	df 93       	push	r29
    4576:	fc 01       	movw	r30, r24
    4578:	90 91 5f 1a 	lds	r25, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    457c:	9f 5f       	subi	r25, 0xFF	; 255
    457e:	90 93 5f 1a 	sts	0x1A5F, r25	; 0x801a5f <uxSchedulerSuspended>
    4582:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    4586:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    458a:	20 81       	ld	r18, Z
    458c:	31 81       	ldd	r19, Z+1	; 0x01
    458e:	e9 01       	movw	r28, r18
    4590:	c6 0f       	add	r28, r22
    4592:	d7 1f       	adc	r29, r23
    4594:	82 17       	cp	r24, r18
    4596:	93 07       	cpc	r25, r19
    4598:	58 f4       	brcc	.+22     	; 0x45b0 <vTaskDelayUntil+0x50>
    459a:	c2 17       	cp	r28, r18
    459c:	d3 07       	cpc	r29, r19
    459e:	08 f0       	brcs	.+2      	; 0x45a2 <vTaskDelayUntil+0x42>
    45a0:	6e c1       	rjmp	.+732    	; 0x487e <vTaskDelayUntil+0x31e>
    45a2:	d1 83       	std	Z+1, r29	; 0x01
    45a4:	c0 83       	st	Z, r28
    45a6:	8c 17       	cp	r24, r28
    45a8:	9d 07       	cpc	r25, r29
    45aa:	08 f0       	brcs	.+2      	; 0x45ae <vTaskDelayUntil+0x4e>
    45ac:	42 c0       	rjmp	.+132    	; 0x4632 <vTaskDelayUntil+0xd2>
    45ae:	09 c0       	rjmp	.+18     	; 0x45c2 <vTaskDelayUntil+0x62>
    45b0:	c2 17       	cp	r28, r18
    45b2:	d3 07       	cpc	r29, r19
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <vTaskDelayUntil+0x58>
    45b6:	60 c1       	rjmp	.+704    	; 0x4878 <vTaskDelayUntil+0x318>
    45b8:	8c 17       	cp	r24, r28
    45ba:	9d 07       	cpc	r25, r29
    45bc:	08 f4       	brcc	.+2      	; 0x45c0 <vTaskDelayUntil+0x60>
    45be:	5c c1       	rjmp	.+696    	; 0x4878 <vTaskDelayUntil+0x318>
    45c0:	5e c1       	rjmp	.+700    	; 0x487e <vTaskDelayUntil+0x31e>
    45c2:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    45c6:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    45ca:	02 96       	adiw	r24, 0x02	; 2
    45cc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    45d0:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    45d4:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    45d8:	d3 83       	std	Z+3, r29	; 0x03
    45da:	c2 83       	std	Z+2, r28	; 0x02
    45dc:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    45e0:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    45e4:	c8 17       	cp	r28, r24
    45e6:	d9 07       	cpc	r29, r25
    45e8:	68 f4       	brcc	.+26     	; 0x4604 <vTaskDelayUntil+0xa4>
    45ea:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    45ee:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    45f2:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    45f6:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    45fa:	6e 5f       	subi	r22, 0xFE	; 254
    45fc:	7f 4f       	sbci	r23, 0xFF	; 255
    45fe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4602:	17 c0       	rjmp	.+46     	; 0x4632 <vTaskDelayUntil+0xd2>
    4604:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4608:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    460c:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4610:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4614:	6e 5f       	subi	r22, 0xFE	; 254
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    461c:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    4620:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4624:	c8 17       	cp	r28, r24
    4626:	d9 07       	cpc	r29, r25
    4628:	20 f4       	brcc	.+8      	; 0x4632 <vTaskDelayUntil+0xd2>
    462a:	d0 93 61 1a 	sts	0x1A61, r29	; 0x801a61 <xNextTaskUnblockTime+0x1>
    462e:	c0 93 60 1a 	sts	0x1A60, r28	; 0x801a60 <xNextTaskUnblockTime>
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	0f 92       	push	r0
    4638:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    463c:	81 50       	subi	r24, 0x01	; 1
    463e:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <uxSchedulerSuspended>
    4642:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4646:	81 11       	cpse	r24, r1
    4648:	0d c1       	rjmp	.+538    	; 0x4864 <vTaskDelayUntil+0x304>
    464a:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    464e:	81 11       	cpse	r24, r1
    4650:	33 c0       	rjmp	.+102    	; 0x46b8 <vTaskDelayUntil+0x158>
    4652:	0b c1       	rjmp	.+534    	; 0x486a <vTaskDelayUntil+0x30a>
    4654:	d7 01       	movw	r26, r14
    4656:	15 96       	adiw	r26, 0x05	; 5
    4658:	ed 91       	ld	r30, X+
    465a:	fc 91       	ld	r31, X
    465c:	16 97       	sbiw	r26, 0x06	; 6
    465e:	c6 81       	ldd	r28, Z+6	; 0x06
    4660:	d7 81       	ldd	r29, Z+7	; 0x07
    4662:	ce 01       	movw	r24, r28
    4664:	0c 96       	adiw	r24, 0x0c	; 12
    4666:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    466a:	8e 01       	movw	r16, r28
    466c:	0e 5f       	subi	r16, 0xFE	; 254
    466e:	1f 4f       	sbci	r17, 0xFF	; 255
    4670:	c8 01       	movw	r24, r16
    4672:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4676:	8e 89       	ldd	r24, Y+22	; 0x16
    4678:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    467c:	98 17       	cp	r25, r24
    467e:	10 f4       	brcc	.+4      	; 0x4684 <vTaskDelayUntil+0x124>
    4680:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	9c 01       	movw	r18, r24
    4688:	22 0f       	add	r18, r18
    468a:	33 1f       	adc	r19, r19
    468c:	22 0f       	add	r18, r18
    468e:	33 1f       	adc	r19, r19
    4690:	22 0f       	add	r18, r18
    4692:	33 1f       	adc	r19, r19
    4694:	82 0f       	add	r24, r18
    4696:	93 1f       	adc	r25, r19
    4698:	b8 01       	movw	r22, r16
    469a:	8d 56       	subi	r24, 0x6D	; 109
    469c:	95 4e       	sbci	r25, 0xE5	; 229
    469e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    46a2:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    46a6:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    46aa:	9e 89       	ldd	r25, Y+22	; 0x16
    46ac:	86 89       	ldd	r24, Z+22	; 0x16
    46ae:	98 17       	cp	r25, r24
    46b0:	58 f0       	brcs	.+22     	; 0x46c8 <vTaskDelayUntil+0x168>
    46b2:	d0 92 64 1a 	sts	0x1A64, r13	; 0x801a64 <xYieldPending>
    46b6:	08 c0       	rjmp	.+16     	; 0x46c8 <vTaskDelayUntil+0x168>
    46b8:	0f 2e       	mov	r0, r31
    46ba:	f4 e7       	ldi	r31, 0x74	; 116
    46bc:	ef 2e       	mov	r14, r31
    46be:	fa e1       	ldi	r31, 0x1A	; 26
    46c0:	ff 2e       	mov	r15, r31
    46c2:	f0 2d       	mov	r31, r0
    46c4:	dd 24       	eor	r13, r13
    46c6:	d3 94       	inc	r13
    46c8:	f7 01       	movw	r30, r14
    46ca:	80 81       	ld	r24, Z
    46cc:	81 11       	cpse	r24, r1
    46ce:	c2 cf       	rjmp	.-124    	; 0x4654 <vTaskDelayUntil+0xf4>
    46d0:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    46d4:	88 23       	and	r24, r24
    46d6:	09 f4       	brne	.+2      	; 0x46da <vTaskDelayUntil+0x17a>
    46d8:	bd c0       	rjmp	.+378    	; 0x4854 <vTaskDelayUntil+0x2f4>
    46da:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    46de:	88 23       	and	r24, r24
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <vTaskDelayUntil+0x184>
    46e2:	b8 c0       	rjmp	.+368    	; 0x4854 <vTaskDelayUntil+0x2f4>
    46e4:	91 2c       	mov	r9, r1
    46e6:	bb 24       	eor	r11, r11
    46e8:	b3 94       	inc	r11
    46ea:	cc 24       	eor	r12, r12
    46ec:	ca 94       	dec	r12
    46ee:	dc 2c       	mov	r13, r12
    46f0:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    46f4:	81 11       	cpse	r24, r1
    46f6:	98 c0       	rjmp	.+304    	; 0x4828 <vTaskDelayUntil+0x2c8>
    46f8:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    46fc:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4700:	01 96       	adiw	r24, 0x01	; 1
    4702:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <xTickCount+0x1>
    4706:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <xTickCount>
    470a:	e0 90 68 1a 	lds	r14, 0x1A68	; 0x801a68 <xTickCount>
    470e:	f0 90 69 1a 	lds	r15, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4712:	e1 14       	cp	r14, r1
    4714:	f1 04       	cpc	r15, r1
    4716:	89 f5       	brne	.+98     	; 0x477a <vTaskDelayUntil+0x21a>
    4718:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    471c:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4720:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    4724:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4728:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <pxDelayedTaskList+0x1>
    472c:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <pxDelayedTaskList>
    4730:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4734:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    4738:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNumOfOverflows>
    473c:	8f 5f       	subi	r24, 0xFF	; 255
    473e:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNumOfOverflows>
    4742:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4746:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    474a:	80 81       	ld	r24, Z
    474c:	81 11       	cpse	r24, r1
    474e:	05 c0       	rjmp	.+10     	; 0x475a <vTaskDelayUntil+0x1fa>
    4750:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4754:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    4758:	10 c0       	rjmp	.+32     	; 0x477a <vTaskDelayUntil+0x21a>
    475a:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    475e:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4762:	05 80       	ldd	r0, Z+5	; 0x05
    4764:	f6 81       	ldd	r31, Z+6	; 0x06
    4766:	e0 2d       	mov	r30, r0
    4768:	06 80       	ldd	r0, Z+6	; 0x06
    476a:	f7 81       	ldd	r31, Z+7	; 0x07
    476c:	e0 2d       	mov	r30, r0
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	93 81       	ldd	r25, Z+3	; 0x03
    4772:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4776:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    477a:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    477e:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4782:	e8 16       	cp	r14, r24
    4784:	f9 06       	cpc	r15, r25
    4786:	08 f4       	brcc	.+2      	; 0x478a <vTaskDelayUntil+0x22a>
    4788:	7d c0       	rjmp	.+250    	; 0x4884 <vTaskDelayUntil+0x324>
    478a:	a9 2c       	mov	r10, r9
    478c:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4790:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4794:	80 81       	ld	r24, Z
    4796:	81 11       	cpse	r24, r1
    4798:	05 c0       	rjmp	.+10     	; 0x47a4 <vTaskDelayUntil+0x244>
    479a:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    479e:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    47a2:	48 c0       	rjmp	.+144    	; 0x4834 <vTaskDelayUntil+0x2d4>
    47a4:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    47a8:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    47ac:	05 80       	ldd	r0, Z+5	; 0x05
    47ae:	f6 81       	ldd	r31, Z+6	; 0x06
    47b0:	e0 2d       	mov	r30, r0
    47b2:	c6 81       	ldd	r28, Z+6	; 0x06
    47b4:	d7 81       	ldd	r29, Z+7	; 0x07
    47b6:	8a 81       	ldd	r24, Y+2	; 0x02
    47b8:	9b 81       	ldd	r25, Y+3	; 0x03
    47ba:	e8 16       	cp	r14, r24
    47bc:	f9 06       	cpc	r15, r25
    47be:	28 f4       	brcc	.+10     	; 0x47ca <vTaskDelayUntil+0x26a>
    47c0:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    47c4:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    47c8:	35 c0       	rjmp	.+106    	; 0x4834 <vTaskDelayUntil+0x2d4>
    47ca:	8e 01       	movw	r16, r28
    47cc:	0e 5f       	subi	r16, 0xFE	; 254
    47ce:	1f 4f       	sbci	r17, 0xFF	; 255
    47d0:	c8 01       	movw	r24, r16
    47d2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    47d6:	8c 89       	ldd	r24, Y+20	; 0x14
    47d8:	9d 89       	ldd	r25, Y+21	; 0x15
    47da:	89 2b       	or	r24, r25
    47dc:	21 f0       	breq	.+8      	; 0x47e6 <vTaskDelayUntil+0x286>
    47de:	ce 01       	movw	r24, r28
    47e0:	0c 96       	adiw	r24, 0x0c	; 12
    47e2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    47e6:	8e 89       	ldd	r24, Y+22	; 0x16
    47e8:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    47ec:	98 17       	cp	r25, r24
    47ee:	10 f4       	brcc	.+4      	; 0x47f4 <vTaskDelayUntil+0x294>
    47f0:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	9c 01       	movw	r18, r24
    47f8:	22 0f       	add	r18, r18
    47fa:	33 1f       	adc	r19, r19
    47fc:	22 0f       	add	r18, r18
    47fe:	33 1f       	adc	r19, r19
    4800:	22 0f       	add	r18, r18
    4802:	33 1f       	adc	r19, r19
    4804:	82 0f       	add	r24, r18
    4806:	93 1f       	adc	r25, r19
    4808:	b8 01       	movw	r22, r16
    480a:	8d 56       	subi	r24, 0x6D	; 109
    480c:	95 4e       	sbci	r25, 0xE5	; 229
    480e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4812:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4816:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    481a:	9e 89       	ldd	r25, Y+22	; 0x16
    481c:	86 89       	ldd	r24, Z+22	; 0x16
    481e:	98 17       	cp	r25, r24
    4820:	08 f4       	brcc	.+2      	; 0x4824 <vTaskDelayUntil+0x2c4>
    4822:	b4 cf       	rjmp	.-152    	; 0x478c <vTaskDelayUntil+0x22c>
    4824:	ab 2c       	mov	r10, r11
    4826:	b2 cf       	rjmp	.-156    	; 0x478c <vTaskDelayUntil+0x22c>
    4828:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    482c:	8f 5f       	subi	r24, 0xFF	; 255
    482e:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    4832:	28 c0       	rjmp	.+80     	; 0x4884 <vTaskDelayUntil+0x324>
    4834:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4838:	81 11       	cpse	r24, r1
    483a:	01 c0       	rjmp	.+2      	; 0x483e <vTaskDelayUntil+0x2de>
    483c:	a1 10       	cpse	r10, r1
    483e:	b0 92 64 1a 	sts	0x1A64, r11	; 0x801a64 <xYieldPending>
    4842:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4846:	81 50       	subi	r24, 0x01	; 1
    4848:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    484c:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4850:	81 11       	cpse	r24, r1
    4852:	4e cf       	rjmp	.-356    	; 0x46f0 <vTaskDelayUntil+0x190>
    4854:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4858:	81 30       	cpi	r24, 0x01	; 1
    485a:	31 f4       	brne	.+12     	; 0x4868 <vTaskDelayUntil+0x308>
    485c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	03 c0       	rjmp	.+6      	; 0x486a <vTaskDelayUntil+0x30a>
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	01 c0       	rjmp	.+2      	; 0x486a <vTaskDelayUntil+0x30a>
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	0f 90       	pop	r0
    486c:	0f be       	out	0x3f, r0	; 63
    486e:	81 11       	cpse	r24, r1
    4870:	0e c0       	rjmp	.+28     	; 0x488e <vTaskDelayUntil+0x32e>
    4872:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4876:	0b c0       	rjmp	.+22     	; 0x488e <vTaskDelayUntil+0x32e>
    4878:	d1 83       	std	Z+1, r29	; 0x01
    487a:	c0 83       	st	Z, r28
    487c:	a2 ce       	rjmp	.-700    	; 0x45c2 <vTaskDelayUntil+0x62>
    487e:	d1 83       	std	Z+1, r29	; 0x01
    4880:	c0 83       	st	Z, r28
    4882:	d7 ce       	rjmp	.-594    	; 0x4632 <vTaskDelayUntil+0xd2>
    4884:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4888:	81 11       	cpse	r24, r1
    488a:	d9 cf       	rjmp	.-78     	; 0x483e <vTaskDelayUntil+0x2de>
    488c:	da cf       	rjmp	.-76     	; 0x4842 <vTaskDelayUntil+0x2e2>
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	df 90       	pop	r13
    489c:	cf 90       	pop	r12
    489e:	bf 90       	pop	r11
    48a0:	af 90       	pop	r10
    48a2:	9f 90       	pop	r9
    48a4:	08 95       	ret

000048a6 <vTaskDelay>:
    48a6:	9f 92       	push	r9
    48a8:	af 92       	push	r10
    48aa:	bf 92       	push	r11
    48ac:	cf 92       	push	r12
    48ae:	df 92       	push	r13
    48b0:	ef 92       	push	r14
    48b2:	ff 92       	push	r15
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	00 97       	sbiw	r24, 0x00	; 0
    48be:	09 f4       	brne	.+2      	; 0x48c2 <vTaskDelay+0x1c>
    48c0:	63 c1       	rjmp	.+710    	; 0x4b88 <vTaskDelay+0x2e2>
    48c2:	20 91 5f 1a 	lds	r18, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    48c6:	2f 5f       	subi	r18, 0xFF	; 255
    48c8:	20 93 5f 1a 	sts	0x1A5F, r18	; 0x801a5f <uxSchedulerSuspended>
    48cc:	c0 91 68 1a 	lds	r28, 0x1A68	; 0x801a68 <xTickCount>
    48d0:	d0 91 69 1a 	lds	r29, 0x1A69	; 0x801a69 <xTickCount+0x1>
    48d4:	c8 0f       	add	r28, r24
    48d6:	d9 1f       	adc	r29, r25
    48d8:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    48dc:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    48e0:	02 96       	adiw	r24, 0x02	; 2
    48e2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    48e6:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    48ea:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    48ee:	d3 83       	std	Z+3, r29	; 0x03
    48f0:	c2 83       	std	Z+2, r28	; 0x02
    48f2:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    48f6:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    48fa:	c8 17       	cp	r28, r24
    48fc:	d9 07       	cpc	r29, r25
    48fe:	68 f4       	brcc	.+26     	; 0x491a <vTaskDelay+0x74>
    4900:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4904:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4908:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    490c:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4910:	6e 5f       	subi	r22, 0xFE	; 254
    4912:	7f 4f       	sbci	r23, 0xFF	; 255
    4914:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4918:	17 c0       	rjmp	.+46     	; 0x4948 <vTaskDelay+0xa2>
    491a:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    491e:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4922:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4926:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    492a:	6e 5f       	subi	r22, 0xFE	; 254
    492c:	7f 4f       	sbci	r23, 0xFF	; 255
    492e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    4932:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    4936:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    493a:	c8 17       	cp	r28, r24
    493c:	d9 07       	cpc	r29, r25
    493e:	20 f4       	brcc	.+8      	; 0x4948 <vTaskDelay+0xa2>
    4940:	d0 93 61 1a 	sts	0x1A61, r29	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4944:	c0 93 60 1a 	sts	0x1A60, r28	; 0x801a60 <xNextTaskUnblockTime>
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	0f 92       	push	r0
    494e:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4952:	81 50       	subi	r24, 0x01	; 1
    4954:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <uxSchedulerSuspended>
    4958:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    495c:	81 11       	cpse	r24, r1
    495e:	0d c1       	rjmp	.+538    	; 0x4b7a <vTaskDelay+0x2d4>
    4960:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4964:	81 11       	cpse	r24, r1
    4966:	33 c0       	rjmp	.+102    	; 0x49ce <vTaskDelay+0x128>
    4968:	0b c1       	rjmp	.+534    	; 0x4b80 <vTaskDelay+0x2da>
    496a:	d7 01       	movw	r26, r14
    496c:	15 96       	adiw	r26, 0x05	; 5
    496e:	ed 91       	ld	r30, X+
    4970:	fc 91       	ld	r31, X
    4972:	16 97       	sbiw	r26, 0x06	; 6
    4974:	c6 81       	ldd	r28, Z+6	; 0x06
    4976:	d7 81       	ldd	r29, Z+7	; 0x07
    4978:	ce 01       	movw	r24, r28
    497a:	0c 96       	adiw	r24, 0x0c	; 12
    497c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4980:	8e 01       	movw	r16, r28
    4982:	0e 5f       	subi	r16, 0xFE	; 254
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	c8 01       	movw	r24, r16
    4988:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    498c:	8e 89       	ldd	r24, Y+22	; 0x16
    498e:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    4992:	98 17       	cp	r25, r24
    4994:	10 f4       	brcc	.+4      	; 0x499a <vTaskDelay+0xf4>
    4996:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	9c 01       	movw	r18, r24
    499e:	22 0f       	add	r18, r18
    49a0:	33 1f       	adc	r19, r19
    49a2:	22 0f       	add	r18, r18
    49a4:	33 1f       	adc	r19, r19
    49a6:	22 0f       	add	r18, r18
    49a8:	33 1f       	adc	r19, r19
    49aa:	82 0f       	add	r24, r18
    49ac:	93 1f       	adc	r25, r19
    49ae:	b8 01       	movw	r22, r16
    49b0:	8d 56       	subi	r24, 0x6D	; 109
    49b2:	95 4e       	sbci	r25, 0xE5	; 229
    49b4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    49b8:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    49bc:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    49c0:	9e 89       	ldd	r25, Y+22	; 0x16
    49c2:	86 89       	ldd	r24, Z+22	; 0x16
    49c4:	98 17       	cp	r25, r24
    49c6:	58 f0       	brcs	.+22     	; 0x49de <vTaskDelay+0x138>
    49c8:	d0 92 64 1a 	sts	0x1A64, r13	; 0x801a64 <xYieldPending>
    49cc:	08 c0       	rjmp	.+16     	; 0x49de <vTaskDelay+0x138>
    49ce:	0f 2e       	mov	r0, r31
    49d0:	f4 e7       	ldi	r31, 0x74	; 116
    49d2:	ef 2e       	mov	r14, r31
    49d4:	fa e1       	ldi	r31, 0x1A	; 26
    49d6:	ff 2e       	mov	r15, r31
    49d8:	f0 2d       	mov	r31, r0
    49da:	dd 24       	eor	r13, r13
    49dc:	d3 94       	inc	r13
    49de:	f7 01       	movw	r30, r14
    49e0:	80 81       	ld	r24, Z
    49e2:	81 11       	cpse	r24, r1
    49e4:	c2 cf       	rjmp	.-124    	; 0x496a <vTaskDelay+0xc4>
    49e6:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    49ea:	88 23       	and	r24, r24
    49ec:	09 f4       	brne	.+2      	; 0x49f0 <vTaskDelay+0x14a>
    49ee:	bd c0       	rjmp	.+378    	; 0x4b6a <vTaskDelay+0x2c4>
    49f0:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    49f4:	88 23       	and	r24, r24
    49f6:	09 f4       	brne	.+2      	; 0x49fa <vTaskDelay+0x154>
    49f8:	b8 c0       	rjmp	.+368    	; 0x4b6a <vTaskDelay+0x2c4>
    49fa:	91 2c       	mov	r9, r1
    49fc:	bb 24       	eor	r11, r11
    49fe:	b3 94       	inc	r11
    4a00:	cc 24       	eor	r12, r12
    4a02:	ca 94       	dec	r12
    4a04:	dc 2c       	mov	r13, r12
    4a06:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4a0a:	81 11       	cpse	r24, r1
    4a0c:	98 c0       	rjmp	.+304    	; 0x4b3e <vTaskDelay+0x298>
    4a0e:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    4a12:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4a16:	01 96       	adiw	r24, 0x01	; 1
    4a18:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <xTickCount+0x1>
    4a1c:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <xTickCount>
    4a20:	e0 90 68 1a 	lds	r14, 0x1A68	; 0x801a68 <xTickCount>
    4a24:	f0 90 69 1a 	lds	r15, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4a28:	e1 14       	cp	r14, r1
    4a2a:	f1 04       	cpc	r15, r1
    4a2c:	89 f5       	brne	.+98     	; 0x4a90 <vTaskDelay+0x1ea>
    4a2e:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4a32:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4a36:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    4a3a:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4a3e:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <pxDelayedTaskList+0x1>
    4a42:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <pxDelayedTaskList>
    4a46:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4a4a:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    4a4e:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNumOfOverflows>
    4a52:	8f 5f       	subi	r24, 0xFF	; 255
    4a54:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNumOfOverflows>
    4a58:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4a5c:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4a60:	80 81       	ld	r24, Z
    4a62:	81 11       	cpse	r24, r1
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <vTaskDelay+0x1ca>
    4a66:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4a6a:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    4a6e:	10 c0       	rjmp	.+32     	; 0x4a90 <vTaskDelay+0x1ea>
    4a70:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4a74:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4a78:	05 80       	ldd	r0, Z+5	; 0x05
    4a7a:	f6 81       	ldd	r31, Z+6	; 0x06
    4a7c:	e0 2d       	mov	r30, r0
    4a7e:	06 80       	ldd	r0, Z+6	; 0x06
    4a80:	f7 81       	ldd	r31, Z+7	; 0x07
    4a82:	e0 2d       	mov	r30, r0
    4a84:	82 81       	ldd	r24, Z+2	; 0x02
    4a86:	93 81       	ldd	r25, Z+3	; 0x03
    4a88:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4a8c:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    4a90:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    4a94:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4a98:	e8 16       	cp	r14, r24
    4a9a:	f9 06       	cpc	r15, r25
    4a9c:	08 f4       	brcc	.+2      	; 0x4aa0 <vTaskDelay+0x1fa>
    4a9e:	77 c0       	rjmp	.+238    	; 0x4b8e <vTaskDelay+0x2e8>
    4aa0:	a9 2c       	mov	r10, r9
    4aa2:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4aa6:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4aaa:	80 81       	ld	r24, Z
    4aac:	81 11       	cpse	r24, r1
    4aae:	05 c0       	rjmp	.+10     	; 0x4aba <vTaskDelay+0x214>
    4ab0:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4ab4:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    4ab8:	48 c0       	rjmp	.+144    	; 0x4b4a <vTaskDelay+0x2a4>
    4aba:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4abe:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4ac2:	05 80       	ldd	r0, Z+5	; 0x05
    4ac4:	f6 81       	ldd	r31, Z+6	; 0x06
    4ac6:	e0 2d       	mov	r30, r0
    4ac8:	c6 81       	ldd	r28, Z+6	; 0x06
    4aca:	d7 81       	ldd	r29, Z+7	; 0x07
    4acc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ace:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad0:	e8 16       	cp	r14, r24
    4ad2:	f9 06       	cpc	r15, r25
    4ad4:	28 f4       	brcc	.+10     	; 0x4ae0 <vTaskDelay+0x23a>
    4ad6:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4ada:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    4ade:	35 c0       	rjmp	.+106    	; 0x4b4a <vTaskDelay+0x2a4>
    4ae0:	8e 01       	movw	r16, r28
    4ae2:	0e 5f       	subi	r16, 0xFE	; 254
    4ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae6:	c8 01       	movw	r24, r16
    4ae8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4aec:	8c 89       	ldd	r24, Y+20	; 0x14
    4aee:	9d 89       	ldd	r25, Y+21	; 0x15
    4af0:	89 2b       	or	r24, r25
    4af2:	21 f0       	breq	.+8      	; 0x4afc <vTaskDelay+0x256>
    4af4:	ce 01       	movw	r24, r28
    4af6:	0c 96       	adiw	r24, 0x0c	; 12
    4af8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4afc:	8e 89       	ldd	r24, Y+22	; 0x16
    4afe:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    4b02:	98 17       	cp	r25, r24
    4b04:	10 f4       	brcc	.+4      	; 0x4b0a <vTaskDelay+0x264>
    4b06:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	9c 01       	movw	r18, r24
    4b0e:	22 0f       	add	r18, r18
    4b10:	33 1f       	adc	r19, r19
    4b12:	22 0f       	add	r18, r18
    4b14:	33 1f       	adc	r19, r19
    4b16:	22 0f       	add	r18, r18
    4b18:	33 1f       	adc	r19, r19
    4b1a:	82 0f       	add	r24, r18
    4b1c:	93 1f       	adc	r25, r19
    4b1e:	b8 01       	movw	r22, r16
    4b20:	8d 56       	subi	r24, 0x6D	; 109
    4b22:	95 4e       	sbci	r25, 0xE5	; 229
    4b24:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4b28:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4b2c:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4b30:	9e 89       	ldd	r25, Y+22	; 0x16
    4b32:	86 89       	ldd	r24, Z+22	; 0x16
    4b34:	98 17       	cp	r25, r24
    4b36:	08 f4       	brcc	.+2      	; 0x4b3a <vTaskDelay+0x294>
    4b38:	b4 cf       	rjmp	.-152    	; 0x4aa2 <vTaskDelay+0x1fc>
    4b3a:	ab 2c       	mov	r10, r11
    4b3c:	b2 cf       	rjmp	.-156    	; 0x4aa2 <vTaskDelay+0x1fc>
    4b3e:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4b42:	8f 5f       	subi	r24, 0xFF	; 255
    4b44:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    4b48:	22 c0       	rjmp	.+68     	; 0x4b8e <vTaskDelay+0x2e8>
    4b4a:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4b4e:	81 11       	cpse	r24, r1
    4b50:	01 c0       	rjmp	.+2      	; 0x4b54 <vTaskDelay+0x2ae>
    4b52:	a1 10       	cpse	r10, r1
    4b54:	b0 92 64 1a 	sts	0x1A64, r11	; 0x801a64 <xYieldPending>
    4b58:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4b5c:	81 50       	subi	r24, 0x01	; 1
    4b5e:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    4b62:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4b66:	81 11       	cpse	r24, r1
    4b68:	4e cf       	rjmp	.-356    	; 0x4a06 <vTaskDelay+0x160>
    4b6a:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4b6e:	81 30       	cpi	r24, 0x01	; 1
    4b70:	31 f4       	brne	.+12     	; 0x4b7e <vTaskDelay+0x2d8>
    4b72:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	03 c0       	rjmp	.+6      	; 0x4b80 <vTaskDelay+0x2da>
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <vTaskDelay+0x2da>
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	0f 90       	pop	r0
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	81 11       	cpse	r24, r1
    4b86:	08 c0       	rjmp	.+16     	; 0x4b98 <vTaskDelay+0x2f2>
    4b88:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4b8c:	05 c0       	rjmp	.+10     	; 0x4b98 <vTaskDelay+0x2f2>
    4b8e:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4b92:	81 11       	cpse	r24, r1
    4b94:	df cf       	rjmp	.-66     	; 0x4b54 <vTaskDelay+0x2ae>
    4b96:	e0 cf       	rjmp	.-64     	; 0x4b58 <vTaskDelay+0x2b2>
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	1f 91       	pop	r17
    4b9e:	0f 91       	pop	r16
    4ba0:	ff 90       	pop	r15
    4ba2:	ef 90       	pop	r14
    4ba4:	df 90       	pop	r13
    4ba6:	cf 90       	pop	r12
    4ba8:	bf 90       	pop	r11
    4baa:	af 90       	pop	r10
    4bac:	9f 90       	pop	r9
    4bae:	08 95       	ret

00004bb0 <vTaskStartScheduler>:
    4bb0:	cf 92       	push	r12
    4bb2:	df 92       	push	r13
    4bb4:	ef 92       	push	r14
    4bb6:	ff 92       	push	r15
    4bb8:	0f 93       	push	r16
    4bba:	1f 93       	push	r17
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	85 e5       	ldi	r24, 0x55	; 85
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4bc8:	8c 01       	movw	r16, r24
    4bca:	89 2b       	or	r24, r25
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <vTaskStartScheduler+0x20>
    4bce:	cb c0       	rjmp	.+406    	; 0x4d66 <vTaskStartScheduler+0x1b6>
    4bd0:	88 e2       	ldi	r24, 0x28	; 40
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
    4bd8:	ec 01       	movw	r28, r24
    4bda:	89 2b       	or	r24, r25
    4bdc:	69 f0       	breq	.+26     	; 0x4bf8 <vTaskStartScheduler+0x48>
    4bde:	18 8f       	std	Y+24, r17	; 0x18
    4be0:	0f 8b       	std	Y+23, r16	; 0x17
    4be2:	0c 5a       	subi	r16, 0xAC	; 172
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
    4be6:	89 e4       	ldi	r24, 0x49	; 73
    4be8:	89 8f       	std	Y+25, r24	; 0x19
    4bea:	e2 e2       	ldi	r30, 0x22	; 34
    4bec:	f7 e0       	ldi	r31, 0x07	; 7
    4bee:	de 01       	movw	r26, r28
    4bf0:	5a 96       	adiw	r26, 0x1a	; 26
    4bf2:	29 e2       	ldi	r18, 0x29	; 41
    4bf4:	37 e0       	ldi	r19, 0x07	; 7
    4bf6:	04 c0       	rjmp	.+8      	; 0x4c00 <vTaskStartScheduler+0x50>
    4bf8:	c8 01       	movw	r24, r16
    4bfa:	0e 94 31 09 	call	0x1262	; 0x1262 <vPortFree>
    4bfe:	b3 c0       	rjmp	.+358    	; 0x4d66 <vTaskStartScheduler+0x1b6>
    4c00:	91 91       	ld	r25, Z+
    4c02:	9d 93       	st	X+, r25
    4c04:	99 23       	and	r25, r25
    4c06:	19 f0       	breq	.+6      	; 0x4c0e <vTaskStartScheduler+0x5e>
    4c08:	2e 17       	cp	r18, r30
    4c0a:	3f 07       	cpc	r19, r31
    4c0c:	c9 f7       	brne	.-14     	; 0x4c00 <vTaskStartScheduler+0x50>
    4c0e:	18 a2       	std	Y+32, r1	; 0x20
    4c10:	1e 8a       	std	Y+22, r1	; 0x16
    4c12:	19 a2       	std	Y+33, r1	; 0x21
    4c14:	1a a2       	std	Y+34, r1	; 0x22
    4c16:	7e 01       	movw	r14, r28
    4c18:	82 e0       	ldi	r24, 0x02	; 2
    4c1a:	e8 0e       	add	r14, r24
    4c1c:	f1 1c       	adc	r15, r1
    4c1e:	c7 01       	movw	r24, r14
    4c20:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c24:	ce 01       	movw	r24, r28
    4c26:	0c 96       	adiw	r24, 0x0c	; 12
    4c28:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vListInitialiseItem>
    4c2c:	d9 87       	std	Y+9, r29	; 0x09
    4c2e:	c8 87       	std	Y+8, r28	; 0x08
    4c30:	86 e0       	ldi	r24, 0x06	; 6
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	9d 87       	std	Y+13, r25	; 0x0d
    4c36:	8c 87       	std	Y+12, r24	; 0x0c
    4c38:	db 8b       	std	Y+19, r29	; 0x13
    4c3a:	ca 8b       	std	Y+18, r28	; 0x12
    4c3c:	1b a2       	std	Y+35, r1	; 0x23
    4c3e:	1c a2       	std	Y+36, r1	; 0x24
    4c40:	1d a2       	std	Y+37, r1	; 0x25
    4c42:	1e a2       	std	Y+38, r1	; 0x26
    4c44:	1f a2       	std	Y+39, r1	; 0x27
    4c46:	40 e0       	ldi	r20, 0x00	; 0
    4c48:	50 e0       	ldi	r21, 0x00	; 0
    4c4a:	69 e1       	ldi	r22, 0x19	; 25
    4c4c:	71 e0       	ldi	r23, 0x01	; 1
    4c4e:	c8 01       	movw	r24, r16
    4c50:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <pxPortInitialiseStack>
    4c54:	99 83       	std	Y+1, r25	; 0x01
    4c56:	88 83       	st	Y, r24
    4c58:	0f b6       	in	r0, 0x3f	; 63
    4c5a:	f8 94       	cli
    4c5c:	0f 92       	push	r0
    4c5e:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4c62:	8f 5f       	subi	r24, 0xFF	; 255
    4c64:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <uxCurrentNumberOfTasks>
    4c68:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4c6c:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4c70:	89 2b       	or	r24, r25
    4c72:	a9 f5       	brne	.+106    	; 0x4cde <vTaskStartScheduler+0x12e>
    4c74:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <pxCurrentTCB+0x1>
    4c78:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <pxCurrentTCB>
    4c7c:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4c80:	81 30       	cpi	r24, 0x01	; 1
    4c82:	e1 f5       	brne	.+120    	; 0x4cfc <vTaskStartScheduler+0x14c>
    4c84:	03 e9       	ldi	r16, 0x93	; 147
    4c86:	1a e1       	ldi	r17, 0x1A	; 26
    4c88:	0f 2e       	mov	r0, r31
    4c8a:	f9 ec       	ldi	r31, 0xC9	; 201
    4c8c:	cf 2e       	mov	r12, r31
    4c8e:	fa e1       	ldi	r31, 0x1A	; 26
    4c90:	df 2e       	mov	r13, r31
    4c92:	f0 2d       	mov	r31, r0
    4c94:	c8 01       	movw	r24, r16
    4c96:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4c9a:	07 5f       	subi	r16, 0xF7	; 247
    4c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c9e:	0c 15       	cp	r16, r12
    4ca0:	1d 05       	cpc	r17, r13
    4ca2:	c1 f7       	brne	.-16     	; 0x4c94 <vTaskStartScheduler+0xe4>
    4ca4:	8a e8       	ldi	r24, 0x8A	; 138
    4ca6:	9a e1       	ldi	r25, 0x1A	; 26
    4ca8:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4cac:	81 e8       	ldi	r24, 0x81	; 129
    4cae:	9a e1       	ldi	r25, 0x1A	; 26
    4cb0:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4cb4:	84 e7       	ldi	r24, 0x74	; 116
    4cb6:	9a e1       	ldi	r25, 0x1A	; 26
    4cb8:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4cbc:	8b e6       	ldi	r24, 0x6B	; 107
    4cbe:	9a e1       	ldi	r25, 0x1A	; 26
    4cc0:	0e 94 46 0c 	call	0x188c	; 0x188c <vListInitialise>
    4cc4:	8a e8       	ldi	r24, 0x8A	; 138
    4cc6:	9a e1       	ldi	r25, 0x1A	; 26
    4cc8:	90 93 80 1a 	sts	0x1A80, r25	; 0x801a80 <pxDelayedTaskList+0x1>
    4ccc:	80 93 7f 1a 	sts	0x1A7F, r24	; 0x801a7f <pxDelayedTaskList>
    4cd0:	81 e8       	ldi	r24, 0x81	; 129
    4cd2:	9a e1       	ldi	r25, 0x1A	; 26
    4cd4:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4cd8:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    4cdc:	0f c0       	rjmp	.+30     	; 0x4cfc <vTaskStartScheduler+0x14c>
    4cde:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <xSchedulerRunning>
    4ce2:	81 11       	cpse	r24, r1
    4ce4:	0b c0       	rjmp	.+22     	; 0x4cfc <vTaskStartScheduler+0x14c>
    4ce6:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4cea:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4cee:	86 89       	ldd	r24, Z+22	; 0x16
    4cf0:	81 11       	cpse	r24, r1
    4cf2:	04 c0       	rjmp	.+8      	; 0x4cfc <vTaskStartScheduler+0x14c>
    4cf4:	d0 93 ca 1a 	sts	0x1ACA, r29	; 0x801aca <pxCurrentTCB+0x1>
    4cf8:	c0 93 c9 1a 	sts	0x1AC9, r28	; 0x801ac9 <pxCurrentTCB>
    4cfc:	80 91 62 1a 	lds	r24, 0x1A62	; 0x801a62 <uxTaskNumber>
    4d00:	8f 5f       	subi	r24, 0xFF	; 255
    4d02:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <uxTaskNumber>
    4d06:	8e 89       	ldd	r24, Y+22	; 0x16
    4d08:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    4d0c:	98 17       	cp	r25, r24
    4d0e:	10 f4       	brcc	.+4      	; 0x4d14 <vTaskStartScheduler+0x164>
    4d10:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	9c 01       	movw	r18, r24
    4d18:	22 0f       	add	r18, r18
    4d1a:	33 1f       	adc	r19, r19
    4d1c:	22 0f       	add	r18, r18
    4d1e:	33 1f       	adc	r19, r19
    4d20:	22 0f       	add	r18, r18
    4d22:	33 1f       	adc	r19, r19
    4d24:	82 0f       	add	r24, r18
    4d26:	93 1f       	adc	r25, r19
    4d28:	b7 01       	movw	r22, r14
    4d2a:	8d 56       	subi	r24, 0x6D	; 109
    4d2c:	95 4e       	sbci	r25, 0xE5	; 229
    4d2e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4d32:	0f 90       	pop	r0
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	80 91 66 1a 	lds	r24, 0x1A66	; 0x801a66 <xSchedulerRunning>
    4d3a:	88 23       	and	r24, r24
    4d3c:	21 f0       	breq	.+8      	; 0x4d46 <vTaskStartScheduler+0x196>
    4d3e:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4d42:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4d46:	f8 94       	cli
    4d48:	8f ef       	ldi	r24, 0xFF	; 255
    4d4a:	9f ef       	ldi	r25, 0xFF	; 255
    4d4c:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4d50:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	80 93 66 1a 	sts	0x1A66, r24	; 0x801a66 <xSchedulerRunning>
    4d5a:	10 92 69 1a 	sts	0x1A69, r1	; 0x801a69 <xTickCount+0x1>
    4d5e:	10 92 68 1a 	sts	0x1A68, r1	; 0x801a68 <xTickCount>
    4d62:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <xPortStartScheduler>
    4d66:	df 91       	pop	r29
    4d68:	cf 91       	pop	r28
    4d6a:	1f 91       	pop	r17
    4d6c:	0f 91       	pop	r16
    4d6e:	ff 90       	pop	r15
    4d70:	ef 90       	pop	r14
    4d72:	df 90       	pop	r13
    4d74:	cf 90       	pop	r12
    4d76:	08 95       	ret

00004d78 <vTaskSuspendAll>:
    4d78:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4d7c:	8f 5f       	subi	r24, 0xFF	; 255
    4d7e:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <uxSchedulerSuspended>
    4d82:	08 95       	ret

00004d84 <xTaskResumeAll>:
    4d84:	9f 92       	push	r9
    4d86:	af 92       	push	r10
    4d88:	bf 92       	push	r11
    4d8a:	cf 92       	push	r12
    4d8c:	df 92       	push	r13
    4d8e:	ef 92       	push	r14
    4d90:	ff 92       	push	r15
    4d92:	0f 93       	push	r16
    4d94:	1f 93       	push	r17
    4d96:	cf 93       	push	r28
    4d98:	df 93       	push	r29
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	f8 94       	cli
    4d9e:	0f 92       	push	r0
    4da0:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4da4:	81 50       	subi	r24, 0x01	; 1
    4da6:	80 93 5f 1a 	sts	0x1A5F, r24	; 0x801a5f <uxSchedulerSuspended>
    4daa:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4dae:	81 11       	cpse	r24, r1
    4db0:	0d c1       	rjmp	.+538    	; 0x4fcc <xTaskResumeAll+0x248>
    4db2:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <uxCurrentNumberOfTasks>
    4db6:	81 11       	cpse	r24, r1
    4db8:	33 c0       	rjmp	.+102    	; 0x4e20 <xTaskResumeAll+0x9c>
    4dba:	0b c1       	rjmp	.+534    	; 0x4fd2 <xTaskResumeAll+0x24e>
    4dbc:	d7 01       	movw	r26, r14
    4dbe:	15 96       	adiw	r26, 0x05	; 5
    4dc0:	ed 91       	ld	r30, X+
    4dc2:	fc 91       	ld	r31, X
    4dc4:	16 97       	sbiw	r26, 0x06	; 6
    4dc6:	c6 81       	ldd	r28, Z+6	; 0x06
    4dc8:	d7 81       	ldd	r29, Z+7	; 0x07
    4dca:	ce 01       	movw	r24, r28
    4dcc:	0c 96       	adiw	r24, 0x0c	; 12
    4dce:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4dd2:	8e 01       	movw	r16, r28
    4dd4:	0e 5f       	subi	r16, 0xFE	; 254
    4dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4dd8:	c8 01       	movw	r24, r16
    4dda:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4dde:	8e 89       	ldd	r24, Y+22	; 0x16
    4de0:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    4de4:	98 17       	cp	r25, r24
    4de6:	10 f4       	brcc	.+4      	; 0x4dec <xTaskResumeAll+0x68>
    4de8:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	9c 01       	movw	r18, r24
    4df0:	22 0f       	add	r18, r18
    4df2:	33 1f       	adc	r19, r19
    4df4:	22 0f       	add	r18, r18
    4df6:	33 1f       	adc	r19, r19
    4df8:	22 0f       	add	r18, r18
    4dfa:	33 1f       	adc	r19, r19
    4dfc:	82 0f       	add	r24, r18
    4dfe:	93 1f       	adc	r25, r19
    4e00:	b8 01       	movw	r22, r16
    4e02:	8d 56       	subi	r24, 0x6D	; 109
    4e04:	95 4e       	sbci	r25, 0xE5	; 229
    4e06:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4e0a:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4e0e:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4e12:	9e 89       	ldd	r25, Y+22	; 0x16
    4e14:	86 89       	ldd	r24, Z+22	; 0x16
    4e16:	98 17       	cp	r25, r24
    4e18:	58 f0       	brcs	.+22     	; 0x4e30 <xTaskResumeAll+0xac>
    4e1a:	d0 92 64 1a 	sts	0x1A64, r13	; 0x801a64 <xYieldPending>
    4e1e:	08 c0       	rjmp	.+16     	; 0x4e30 <xTaskResumeAll+0xac>
    4e20:	0f 2e       	mov	r0, r31
    4e22:	f4 e7       	ldi	r31, 0x74	; 116
    4e24:	ef 2e       	mov	r14, r31
    4e26:	fa e1       	ldi	r31, 0x1A	; 26
    4e28:	ff 2e       	mov	r15, r31
    4e2a:	f0 2d       	mov	r31, r0
    4e2c:	dd 24       	eor	r13, r13
    4e2e:	d3 94       	inc	r13
    4e30:	f7 01       	movw	r30, r14
    4e32:	80 81       	ld	r24, Z
    4e34:	81 11       	cpse	r24, r1
    4e36:	c2 cf       	rjmp	.-124    	; 0x4dbc <xTaskResumeAll+0x38>
    4e38:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4e3c:	88 23       	and	r24, r24
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <xTaskResumeAll+0xbe>
    4e40:	bd c0       	rjmp	.+378    	; 0x4fbc <xTaskResumeAll+0x238>
    4e42:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4e46:	88 23       	and	r24, r24
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <xTaskResumeAll+0xc8>
    4e4a:	b8 c0       	rjmp	.+368    	; 0x4fbc <xTaskResumeAll+0x238>
    4e4c:	91 2c       	mov	r9, r1
    4e4e:	bb 24       	eor	r11, r11
    4e50:	b3 94       	inc	r11
    4e52:	cc 24       	eor	r12, r12
    4e54:	ca 94       	dec	r12
    4e56:	dc 2c       	mov	r13, r12
    4e58:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    4e5c:	81 11       	cpse	r24, r1
    4e5e:	98 c0       	rjmp	.+304    	; 0x4f90 <xTaskResumeAll+0x20c>
    4e60:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    4e64:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4e68:	01 96       	adiw	r24, 0x01	; 1
    4e6a:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <xTickCount+0x1>
    4e6e:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <xTickCount>
    4e72:	e0 90 68 1a 	lds	r14, 0x1A68	; 0x801a68 <xTickCount>
    4e76:	f0 90 69 1a 	lds	r15, 0x1A69	; 0x801a69 <xTickCount+0x1>
    4e7a:	e1 14       	cp	r14, r1
    4e7c:	f1 04       	cpc	r15, r1
    4e7e:	89 f5       	brne	.+98     	; 0x4ee2 <xTaskResumeAll+0x15e>
    4e80:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4e84:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4e88:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    4e8c:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4e90:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <pxDelayedTaskList+0x1>
    4e94:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <pxDelayedTaskList>
    4e98:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    4e9c:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    4ea0:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNumOfOverflows>
    4ea4:	8f 5f       	subi	r24, 0xFF	; 255
    4ea6:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNumOfOverflows>
    4eaa:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4eae:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4eb2:	80 81       	ld	r24, Z
    4eb4:	81 11       	cpse	r24, r1
    4eb6:	05 c0       	rjmp	.+10     	; 0x4ec2 <xTaskResumeAll+0x13e>
    4eb8:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4ebc:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    4ec0:	10 c0       	rjmp	.+32     	; 0x4ee2 <xTaskResumeAll+0x15e>
    4ec2:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4ec6:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4eca:	05 80       	ldd	r0, Z+5	; 0x05
    4ecc:	f6 81       	ldd	r31, Z+6	; 0x06
    4ece:	e0 2d       	mov	r30, r0
    4ed0:	06 80       	ldd	r0, Z+6	; 0x06
    4ed2:	f7 81       	ldd	r31, Z+7	; 0x07
    4ed4:	e0 2d       	mov	r30, r0
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4ede:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    4ee2:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    4ee6:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4eea:	e8 16       	cp	r14, r24
    4eec:	f9 06       	cpc	r15, r25
    4eee:	08 f4       	brcc	.+2      	; 0x4ef2 <xTaskResumeAll+0x16e>
    4ef0:	73 c0       	rjmp	.+230    	; 0x4fd8 <xTaskResumeAll+0x254>
    4ef2:	a9 2c       	mov	r10, r9
    4ef4:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4ef8:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4efc:	80 81       	ld	r24, Z
    4efe:	81 11       	cpse	r24, r1
    4f00:	05 c0       	rjmp	.+10     	; 0x4f0c <xTaskResumeAll+0x188>
    4f02:	d0 92 61 1a 	sts	0x1A61, r13	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4f06:	c0 92 60 1a 	sts	0x1A60, r12	; 0x801a60 <xNextTaskUnblockTime>
    4f0a:	48 c0       	rjmp	.+144    	; 0x4f9c <xTaskResumeAll+0x218>
    4f0c:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    4f10:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    4f14:	05 80       	ldd	r0, Z+5	; 0x05
    4f16:	f6 81       	ldd	r31, Z+6	; 0x06
    4f18:	e0 2d       	mov	r30, r0
    4f1a:	c6 81       	ldd	r28, Z+6	; 0x06
    4f1c:	d7 81       	ldd	r29, Z+7	; 0x07
    4f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f20:	9b 81       	ldd	r25, Y+3	; 0x03
    4f22:	e8 16       	cp	r14, r24
    4f24:	f9 06       	cpc	r15, r25
    4f26:	28 f4       	brcc	.+10     	; 0x4f32 <xTaskResumeAll+0x1ae>
    4f28:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    4f2c:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    4f30:	35 c0       	rjmp	.+106    	; 0x4f9c <xTaskResumeAll+0x218>
    4f32:	8e 01       	movw	r16, r28
    4f34:	0e 5f       	subi	r16, 0xFE	; 254
    4f36:	1f 4f       	sbci	r17, 0xFF	; 255
    4f38:	c8 01       	movw	r24, r16
    4f3a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4f3e:	8c 89       	ldd	r24, Y+20	; 0x14
    4f40:	9d 89       	ldd	r25, Y+21	; 0x15
    4f42:	89 2b       	or	r24, r25
    4f44:	21 f0       	breq	.+8      	; 0x4f4e <xTaskResumeAll+0x1ca>
    4f46:	ce 01       	movw	r24, r28
    4f48:	0c 96       	adiw	r24, 0x0c	; 12
    4f4a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    4f4e:	8e 89       	ldd	r24, Y+22	; 0x16
    4f50:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    4f54:	98 17       	cp	r25, r24
    4f56:	10 f4       	brcc	.+4      	; 0x4f5c <xTaskResumeAll+0x1d8>
    4f58:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	9c 01       	movw	r18, r24
    4f60:	22 0f       	add	r18, r18
    4f62:	33 1f       	adc	r19, r19
    4f64:	22 0f       	add	r18, r18
    4f66:	33 1f       	adc	r19, r19
    4f68:	22 0f       	add	r18, r18
    4f6a:	33 1f       	adc	r19, r19
    4f6c:	82 0f       	add	r24, r18
    4f6e:	93 1f       	adc	r25, r19
    4f70:	b8 01       	movw	r22, r16
    4f72:	8d 56       	subi	r24, 0x6D	; 109
    4f74:	95 4e       	sbci	r25, 0xE5	; 229
    4f76:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    4f7a:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    4f7e:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    4f82:	9e 89       	ldd	r25, Y+22	; 0x16
    4f84:	86 89       	ldd	r24, Z+22	; 0x16
    4f86:	98 17       	cp	r25, r24
    4f88:	08 f4       	brcc	.+2      	; 0x4f8c <xTaskResumeAll+0x208>
    4f8a:	b4 cf       	rjmp	.-152    	; 0x4ef4 <xTaskResumeAll+0x170>
    4f8c:	ab 2c       	mov	r10, r11
    4f8e:	b2 cf       	rjmp	.-156    	; 0x4ef4 <xTaskResumeAll+0x170>
    4f90:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4f94:	8f 5f       	subi	r24, 0xFF	; 255
    4f96:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    4f9a:	1e c0       	rjmp	.+60     	; 0x4fd8 <xTaskResumeAll+0x254>
    4f9c:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4fa0:	81 11       	cpse	r24, r1
    4fa2:	01 c0       	rjmp	.+2      	; 0x4fa6 <xTaskResumeAll+0x222>
    4fa4:	a1 10       	cpse	r10, r1
    4fa6:	b0 92 64 1a 	sts	0x1A64, r11	; 0x801a64 <xYieldPending>
    4faa:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4fae:	81 50       	subi	r24, 0x01	; 1
    4fb0:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    4fb4:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    4fb8:	81 11       	cpse	r24, r1
    4fba:	4e cf       	rjmp	.-356    	; 0x4e58 <xTaskResumeAll+0xd4>
    4fbc:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4fc0:	81 30       	cpi	r24, 0x01	; 1
    4fc2:	31 f4       	brne	.+12     	; 0x4fd0 <xTaskResumeAll+0x24c>
    4fc4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	03 c0       	rjmp	.+6      	; 0x4fd2 <xTaskResumeAll+0x24e>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	01 c0       	rjmp	.+2      	; 0x4fd2 <xTaskResumeAll+0x24e>
    4fd0:	80 e0       	ldi	r24, 0x00	; 0
    4fd2:	0f 90       	pop	r0
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	05 c0       	rjmp	.+10     	; 0x4fe2 <xTaskResumeAll+0x25e>
    4fd8:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    4fdc:	81 11       	cpse	r24, r1
    4fde:	e3 cf       	rjmp	.-58     	; 0x4fa6 <xTaskResumeAll+0x222>
    4fe0:	e4 cf       	rjmp	.-56     	; 0x4faa <xTaskResumeAll+0x226>
    4fe2:	df 91       	pop	r29
    4fe4:	cf 91       	pop	r28
    4fe6:	1f 91       	pop	r17
    4fe8:	0f 91       	pop	r16
    4fea:	ff 90       	pop	r15
    4fec:	ef 90       	pop	r14
    4fee:	df 90       	pop	r13
    4ff0:	cf 90       	pop	r12
    4ff2:	bf 90       	pop	r11
    4ff4:	af 90       	pop	r10
    4ff6:	9f 90       	pop	r9
    4ff8:	08 95       	ret

00004ffa <xTaskGetTickCount>:
    4ffa:	0f b6       	in	r0, 0x3f	; 63
    4ffc:	f8 94       	cli
    4ffe:	0f 92       	push	r0
    5000:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    5004:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    5008:	0f 90       	pop	r0
    500a:	0f be       	out	0x3f, r0	; 63
    500c:	08 95       	ret

0000500e <xTaskIncrementTick>:
    500e:	cf 92       	push	r12
    5010:	df 92       	push	r13
    5012:	ef 92       	push	r14
    5014:	ff 92       	push	r15
    5016:	0f 93       	push	r16
    5018:	1f 93       	push	r17
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    5022:	81 11       	cpse	r24, r1
    5024:	9f c0       	rjmp	.+318    	; 0x5164 <xTaskIncrementTick+0x156>
    5026:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    502a:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    502e:	01 96       	adiw	r24, 0x01	; 1
    5030:	90 93 69 1a 	sts	0x1A69, r25	; 0x801a69 <xTickCount+0x1>
    5034:	80 93 68 1a 	sts	0x1A68, r24	; 0x801a68 <xTickCount>
    5038:	e0 90 68 1a 	lds	r14, 0x1A68	; 0x801a68 <xTickCount>
    503c:	f0 90 69 1a 	lds	r15, 0x1A69	; 0x801a69 <xTickCount+0x1>
    5040:	e1 14       	cp	r14, r1
    5042:	f1 04       	cpc	r15, r1
    5044:	99 f5       	brne	.+102    	; 0x50ac <xTaskIncrementTick+0x9e>
    5046:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    504a:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    504e:	20 91 7d 1a 	lds	r18, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    5052:	30 91 7e 1a 	lds	r19, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    5056:	30 93 80 1a 	sts	0x1A80, r19	; 0x801a80 <pxDelayedTaskList+0x1>
    505a:	20 93 7f 1a 	sts	0x1A7F, r18	; 0x801a7f <pxDelayedTaskList>
    505e:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    5062:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <pxOverflowDelayedTaskList>
    5066:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNumOfOverflows>
    506a:	8f 5f       	subi	r24, 0xFF	; 255
    506c:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <xNumOfOverflows>
    5070:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    5074:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    5078:	80 81       	ld	r24, Z
    507a:	81 11       	cpse	r24, r1
    507c:	07 c0       	rjmp	.+14     	; 0x508c <xTaskIncrementTick+0x7e>
    507e:	8f ef       	ldi	r24, 0xFF	; 255
    5080:	9f ef       	ldi	r25, 0xFF	; 255
    5082:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    5086:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    508a:	10 c0       	rjmp	.+32     	; 0x50ac <xTaskIncrementTick+0x9e>
    508c:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    5090:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    5094:	05 80       	ldd	r0, Z+5	; 0x05
    5096:	f6 81       	ldd	r31, Z+6	; 0x06
    5098:	e0 2d       	mov	r30, r0
    509a:	06 80       	ldd	r0, Z+6	; 0x06
    509c:	f7 81       	ldd	r31, Z+7	; 0x07
    509e:	e0 2d       	mov	r30, r0
    50a0:	82 81       	ldd	r24, Z+2	; 0x02
    50a2:	93 81       	ldd	r25, Z+3	; 0x03
    50a4:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    50a8:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    50ac:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    50b0:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    50b4:	e8 16       	cp	r14, r24
    50b6:	f9 06       	cpc	r15, r25
    50b8:	10 f4       	brcc	.+4      	; 0x50be <xTaskIncrementTick+0xb0>
    50ba:	d1 2c       	mov	r13, r1
    50bc:	59 c0       	rjmp	.+178    	; 0x5170 <xTaskIncrementTick+0x162>
    50be:	d1 2c       	mov	r13, r1
    50c0:	cc 24       	eor	r12, r12
    50c2:	c3 94       	inc	r12
    50c4:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    50c8:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    50cc:	80 81       	ld	r24, Z
    50ce:	81 11       	cpse	r24, r1
    50d0:	07 c0       	rjmp	.+14     	; 0x50e0 <xTaskIncrementTick+0xd2>
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	9f ef       	ldi	r25, 0xFF	; 255
    50d6:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    50da:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    50de:	48 c0       	rjmp	.+144    	; 0x5170 <xTaskIncrementTick+0x162>
    50e0:	e0 91 7f 1a 	lds	r30, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    50e4:	f0 91 80 1a 	lds	r31, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    50e8:	05 80       	ldd	r0, Z+5	; 0x05
    50ea:	f6 81       	ldd	r31, Z+6	; 0x06
    50ec:	e0 2d       	mov	r30, r0
    50ee:	c6 81       	ldd	r28, Z+6	; 0x06
    50f0:	d7 81       	ldd	r29, Z+7	; 0x07
    50f2:	8a 81       	ldd	r24, Y+2	; 0x02
    50f4:	9b 81       	ldd	r25, Y+3	; 0x03
    50f6:	e8 16       	cp	r14, r24
    50f8:	f9 06       	cpc	r15, r25
    50fa:	28 f4       	brcc	.+10     	; 0x5106 <xTaskIncrementTick+0xf8>
    50fc:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <xNextTaskUnblockTime+0x1>
    5100:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <xNextTaskUnblockTime>
    5104:	35 c0       	rjmp	.+106    	; 0x5170 <xTaskIncrementTick+0x162>
    5106:	8e 01       	movw	r16, r28
    5108:	0e 5f       	subi	r16, 0xFE	; 254
    510a:	1f 4f       	sbci	r17, 0xFF	; 255
    510c:	c8 01       	movw	r24, r16
    510e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5112:	8c 89       	ldd	r24, Y+20	; 0x14
    5114:	9d 89       	ldd	r25, Y+21	; 0x15
    5116:	89 2b       	or	r24, r25
    5118:	21 f0       	breq	.+8      	; 0x5122 <xTaskIncrementTick+0x114>
    511a:	ce 01       	movw	r24, r28
    511c:	0c 96       	adiw	r24, 0x0c	; 12
    511e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5122:	8e 89       	ldd	r24, Y+22	; 0x16
    5124:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5128:	98 17       	cp	r25, r24
    512a:	10 f4       	brcc	.+4      	; 0x5130 <xTaskIncrementTick+0x122>
    512c:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	9c 01       	movw	r18, r24
    5134:	22 0f       	add	r18, r18
    5136:	33 1f       	adc	r19, r19
    5138:	22 0f       	add	r18, r18
    513a:	33 1f       	adc	r19, r19
    513c:	22 0f       	add	r18, r18
    513e:	33 1f       	adc	r19, r19
    5140:	82 0f       	add	r24, r18
    5142:	93 1f       	adc	r25, r19
    5144:	b8 01       	movw	r22, r16
    5146:	8d 56       	subi	r24, 0x6D	; 109
    5148:	95 4e       	sbci	r25, 0xE5	; 229
    514a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    514e:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5152:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5156:	9e 89       	ldd	r25, Y+22	; 0x16
    5158:	86 89       	ldd	r24, Z+22	; 0x16
    515a:	98 17       	cp	r25, r24
    515c:	08 f4       	brcc	.+2      	; 0x5160 <xTaskIncrementTick+0x152>
    515e:	b2 cf       	rjmp	.-156    	; 0x50c4 <xTaskIncrementTick+0xb6>
    5160:	dc 2c       	mov	r13, r12
    5162:	b0 cf       	rjmp	.-160    	; 0x50c4 <xTaskIncrementTick+0xb6>
    5164:	80 91 65 1a 	lds	r24, 0x1A65	; 0x801a65 <uxPendedTicks>
    5168:	8f 5f       	subi	r24, 0xFF	; 255
    516a:	80 93 65 1a 	sts	0x1A65, r24	; 0x801a65 <uxPendedTicks>
    516e:	d1 2c       	mov	r13, r1
    5170:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <xYieldPending>
    5174:	88 23       	and	r24, r24
    5176:	11 f0       	breq	.+4      	; 0x517c <xTaskIncrementTick+0x16e>
    5178:	dd 24       	eor	r13, r13
    517a:	d3 94       	inc	r13
    517c:	8d 2d       	mov	r24, r13
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	ff 90       	pop	r15
    5188:	ef 90       	pop	r14
    518a:	df 90       	pop	r13
    518c:	cf 90       	pop	r12
    518e:	08 95       	ret

00005190 <vTaskSwitchContext>:
    5190:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    5194:	88 23       	and	r24, r24
    5196:	21 f0       	breq	.+8      	; 0x51a0 <vTaskSwitchContext+0x10>
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	80 93 64 1a 	sts	0x1A64, r24	; 0x801a64 <xYieldPending>
    519e:	08 95       	ret
    51a0:	10 92 64 1a 	sts	0x1A64, r1	; 0x801a64 <xYieldPending>
    51a4:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    51a8:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    51ac:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    51b0:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    51b4:	2d 91       	ld	r18, X+
    51b6:	3c 91       	ld	r19, X
    51b8:	87 89       	ldd	r24, Z+23	; 0x17
    51ba:	90 8d       	ldd	r25, Z+24	; 0x18
    51bc:	82 17       	cp	r24, r18
    51be:	93 07       	cpc	r25, r19
    51c0:	60 f0       	brcs	.+24     	; 0x51da <vTaskSwitchContext+0x4a>
    51c2:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    51c6:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    51ca:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    51ce:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    51d2:	67 5e       	subi	r22, 0xE7	; 231
    51d4:	7f 4f       	sbci	r23, 0xFF	; 255
    51d6:	0e 94 b7 13 	call	0x276e	; 0x276e <vApplicationStackOverflowHook>
    51da:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	fc 01       	movw	r30, r24
    51e2:	ee 0f       	add	r30, r30
    51e4:	ff 1f       	adc	r31, r31
    51e6:	ee 0f       	add	r30, r30
    51e8:	ff 1f       	adc	r31, r31
    51ea:	ee 0f       	add	r30, r30
    51ec:	ff 1f       	adc	r31, r31
    51ee:	8e 0f       	add	r24, r30
    51f0:	9f 1f       	adc	r25, r31
    51f2:	fc 01       	movw	r30, r24
    51f4:	ed 56       	subi	r30, 0x6D	; 109
    51f6:	f5 4e       	sbci	r31, 0xE5	; 229
    51f8:	80 81       	ld	r24, Z
    51fa:	81 11       	cpse	r24, r1
    51fc:	17 c0       	rjmp	.+46     	; 0x522c <vTaskSwitchContext+0x9c>
    51fe:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5202:	81 50       	subi	r24, 0x01	; 1
    5204:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5208:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	fc 01       	movw	r30, r24
    5210:	ee 0f       	add	r30, r30
    5212:	ff 1f       	adc	r31, r31
    5214:	ee 0f       	add	r30, r30
    5216:	ff 1f       	adc	r31, r31
    5218:	ee 0f       	add	r30, r30
    521a:	ff 1f       	adc	r31, r31
    521c:	8e 0f       	add	r24, r30
    521e:	9f 1f       	adc	r25, r31
    5220:	fc 01       	movw	r30, r24
    5222:	ed 56       	subi	r30, 0x6D	; 109
    5224:	f5 4e       	sbci	r31, 0xE5	; 229
    5226:	80 81       	ld	r24, Z
    5228:	88 23       	and	r24, r24
    522a:	49 f3       	breq	.-46     	; 0x51fe <vTaskSwitchContext+0x6e>
    522c:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5230:	90 e0       	ldi	r25, 0x00	; 0
    5232:	9c 01       	movw	r18, r24
    5234:	22 0f       	add	r18, r18
    5236:	33 1f       	adc	r19, r19
    5238:	22 0f       	add	r18, r18
    523a:	33 1f       	adc	r19, r19
    523c:	22 0f       	add	r18, r18
    523e:	33 1f       	adc	r19, r19
    5240:	28 0f       	add	r18, r24
    5242:	39 1f       	adc	r19, r25
    5244:	d9 01       	movw	r26, r18
    5246:	ad 56       	subi	r26, 0x6D	; 109
    5248:	b5 4e       	sbci	r27, 0xE5	; 229
    524a:	11 96       	adiw	r26, 0x01	; 1
    524c:	ed 91       	ld	r30, X+
    524e:	fc 91       	ld	r31, X
    5250:	12 97       	sbiw	r26, 0x02	; 2
    5252:	02 80       	ldd	r0, Z+2	; 0x02
    5254:	f3 81       	ldd	r31, Z+3	; 0x03
    5256:	e0 2d       	mov	r30, r0
    5258:	12 96       	adiw	r26, 0x02	; 2
    525a:	fc 93       	st	X, r31
    525c:	ee 93       	st	-X, r30
    525e:	11 97       	sbiw	r26, 0x01	; 1
    5260:	2a 56       	subi	r18, 0x6A	; 106
    5262:	35 4e       	sbci	r19, 0xE5	; 229
    5264:	e2 17       	cp	r30, r18
    5266:	f3 07       	cpc	r31, r19
    5268:	29 f4       	brne	.+10     	; 0x5274 <vTaskSwitchContext+0xe4>
    526a:	22 81       	ldd	r18, Z+2	; 0x02
    526c:	33 81       	ldd	r19, Z+3	; 0x03
    526e:	fd 01       	movw	r30, r26
    5270:	32 83       	std	Z+2, r19	; 0x02
    5272:	21 83       	std	Z+1, r18	; 0x01
    5274:	fc 01       	movw	r30, r24
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	ee 0f       	add	r30, r30
    527c:	ff 1f       	adc	r31, r31
    527e:	ee 0f       	add	r30, r30
    5280:	ff 1f       	adc	r31, r31
    5282:	8e 0f       	add	r24, r30
    5284:	9f 1f       	adc	r25, r31
    5286:	fc 01       	movw	r30, r24
    5288:	ed 56       	subi	r30, 0x6D	; 109
    528a:	f5 4e       	sbci	r31, 0xE5	; 229
    528c:	01 80       	ldd	r0, Z+1	; 0x01
    528e:	f2 81       	ldd	r31, Z+2	; 0x02
    5290:	e0 2d       	mov	r30, r0
    5292:	86 81       	ldd	r24, Z+6	; 0x06
    5294:	97 81       	ldd	r25, Z+7	; 0x07
    5296:	90 93 ca 1a 	sts	0x1ACA, r25	; 0x801aca <pxCurrentTCB+0x1>
    529a:	80 93 c9 1a 	sts	0x1AC9, r24	; 0x801ac9 <pxCurrentTCB>
    529e:	08 95       	ret

000052a0 <vTaskPlaceOnEventList>:
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	eb 01       	movw	r28, r22
    52a6:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    52aa:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    52ae:	64 5f       	subi	r22, 0xF4	; 244
    52b0:	7f 4f       	sbci	r23, 0xFF	; 255
    52b2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    52b6:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    52ba:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    52be:	02 96       	adiw	r24, 0x02	; 2
    52c0:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    52c4:	cf 3f       	cpi	r28, 0xFF	; 255
    52c6:	8f ef       	ldi	r24, 0xFF	; 255
    52c8:	d8 07       	cpc	r29, r24
    52ca:	59 f4       	brne	.+22     	; 0x52e2 <vTaskPlaceOnEventList+0x42>
    52cc:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    52d0:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    52d4:	6e 5f       	subi	r22, 0xFE	; 254
    52d6:	7f 4f       	sbci	r23, 0xFF	; 255
    52d8:	8b e6       	ldi	r24, 0x6B	; 107
    52da:	9a e1       	ldi	r25, 0x1A	; 26
    52dc:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    52e0:	37 c0       	rjmp	.+110    	; 0x5350 <vTaskPlaceOnEventList+0xb0>
    52e2:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    52e6:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    52ea:	c8 0f       	add	r28, r24
    52ec:	d9 1f       	adc	r29, r25
    52ee:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    52f2:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    52f6:	d3 83       	std	Z+3, r29	; 0x03
    52f8:	c2 83       	std	Z+2, r28	; 0x02
    52fa:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    52fe:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    5302:	c8 17       	cp	r28, r24
    5304:	d9 07       	cpc	r29, r25
    5306:	68 f4       	brcc	.+26     	; 0x5322 <vTaskPlaceOnEventList+0x82>
    5308:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    530c:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5310:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    5314:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    5318:	6e 5f       	subi	r22, 0xFE	; 254
    531a:	7f 4f       	sbci	r23, 0xFF	; 255
    531c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5320:	17 c0       	rjmp	.+46     	; 0x5350 <vTaskPlaceOnEventList+0xb0>
    5322:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5326:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    532a:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    532e:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    5332:	6e 5f       	subi	r22, 0xFE	; 254
    5334:	7f 4f       	sbci	r23, 0xFF	; 255
    5336:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    533a:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    533e:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    5342:	c8 17       	cp	r28, r24
    5344:	d9 07       	cpc	r29, r25
    5346:	20 f4       	brcc	.+8      	; 0x5350 <vTaskPlaceOnEventList+0xb0>
    5348:	d0 93 61 1a 	sts	0x1A61, r29	; 0x801a61 <xNextTaskUnblockTime+0x1>
    534c:	c0 93 60 1a 	sts	0x1A60, r28	; 0x801a60 <xNextTaskUnblockTime>
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	08 95       	ret

00005356 <xTaskRemoveFromEventList>:
    5356:	0f 93       	push	r16
    5358:	1f 93       	push	r17
    535a:	cf 93       	push	r28
    535c:	df 93       	push	r29
    535e:	dc 01       	movw	r26, r24
    5360:	15 96       	adiw	r26, 0x05	; 5
    5362:	ed 91       	ld	r30, X+
    5364:	fc 91       	ld	r31, X
    5366:	16 97       	sbiw	r26, 0x06	; 6
    5368:	c6 81       	ldd	r28, Z+6	; 0x06
    536a:	d7 81       	ldd	r29, Z+7	; 0x07
    536c:	8e 01       	movw	r16, r28
    536e:	04 5f       	subi	r16, 0xF4	; 244
    5370:	1f 4f       	sbci	r17, 0xFF	; 255
    5372:	c8 01       	movw	r24, r16
    5374:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5378:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    537c:	81 11       	cpse	r24, r1
    537e:	1c c0       	rjmp	.+56     	; 0x53b8 <xTaskRemoveFromEventList+0x62>
    5380:	0a 50       	subi	r16, 0x0A	; 10
    5382:	11 09       	sbc	r17, r1
    5384:	c8 01       	movw	r24, r16
    5386:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    538a:	8e 89       	ldd	r24, Y+22	; 0x16
    538c:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5390:	98 17       	cp	r25, r24
    5392:	10 f4       	brcc	.+4      	; 0x5398 <xTaskRemoveFromEventList+0x42>
    5394:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	9c 01       	movw	r18, r24
    539c:	22 0f       	add	r18, r18
    539e:	33 1f       	adc	r19, r19
    53a0:	22 0f       	add	r18, r18
    53a2:	33 1f       	adc	r19, r19
    53a4:	22 0f       	add	r18, r18
    53a6:	33 1f       	adc	r19, r19
    53a8:	82 0f       	add	r24, r18
    53aa:	93 1f       	adc	r25, r19
    53ac:	b8 01       	movw	r22, r16
    53ae:	8d 56       	subi	r24, 0x6D	; 109
    53b0:	95 4e       	sbci	r25, 0xE5	; 229
    53b2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    53b6:	05 c0       	rjmp	.+10     	; 0x53c2 <xTaskRemoveFromEventList+0x6c>
    53b8:	b8 01       	movw	r22, r16
    53ba:	84 e7       	ldi	r24, 0x74	; 116
    53bc:	9a e1       	ldi	r25, 0x1A	; 26
    53be:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    53c2:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    53c6:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    53ca:	9e 89       	ldd	r25, Y+22	; 0x16
    53cc:	86 89       	ldd	r24, Z+22	; 0x16
    53ce:	89 17       	cp	r24, r25
    53d0:	20 f4       	brcc	.+8      	; 0x53da <xTaskRemoveFromEventList+0x84>
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	80 93 64 1a 	sts	0x1A64, r24	; 0x801a64 <xYieldPending>
    53d8:	01 c0       	rjmp	.+2      	; 0x53dc <xTaskRemoveFromEventList+0x86>
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <vTaskSetTimeOutState>:
    53e6:	20 91 63 1a 	lds	r18, 0x1A63	; 0x801a63 <xNumOfOverflows>
    53ea:	fc 01       	movw	r30, r24
    53ec:	20 83       	st	Z, r18
    53ee:	20 91 68 1a 	lds	r18, 0x1A68	; 0x801a68 <xTickCount>
    53f2:	30 91 69 1a 	lds	r19, 0x1A69	; 0x801a69 <xTickCount+0x1>
    53f6:	32 83       	std	Z+2, r19	; 0x02
    53f8:	21 83       	std	Z+1, r18	; 0x01
    53fa:	08 95       	ret

000053fc <xTaskCheckForTimeOut>:
    53fc:	fc 01       	movw	r30, r24
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	f8 94       	cli
    5402:	0f 92       	push	r0
    5404:	20 91 68 1a 	lds	r18, 0x1A68	; 0x801a68 <xTickCount>
    5408:	30 91 69 1a 	lds	r19, 0x1A69	; 0x801a69 <xTickCount+0x1>
    540c:	db 01       	movw	r26, r22
    540e:	8d 91       	ld	r24, X+
    5410:	9c 91       	ld	r25, X
    5412:	8f 3f       	cpi	r24, 0xFF	; 255
    5414:	bf ef       	ldi	r27, 0xFF	; 255
    5416:	9b 07       	cpc	r25, r27
    5418:	21 f1       	breq	.+72     	; 0x5462 <xTaskCheckForTimeOut+0x66>
    541a:	40 91 63 1a 	lds	r20, 0x1A63	; 0x801a63 <xNumOfOverflows>
    541e:	50 81       	ld	r21, Z
    5420:	54 17       	cp	r21, r20
    5422:	29 f0       	breq	.+10     	; 0x542e <xTaskCheckForTimeOut+0x32>
    5424:	41 81       	ldd	r20, Z+1	; 0x01
    5426:	52 81       	ldd	r21, Z+2	; 0x02
    5428:	24 17       	cp	r18, r20
    542a:	35 07       	cpc	r19, r21
    542c:	e0 f4       	brcc	.+56     	; 0x5466 <xTaskCheckForTimeOut+0x6a>
    542e:	41 81       	ldd	r20, Z+1	; 0x01
    5430:	52 81       	ldd	r21, Z+2	; 0x02
    5432:	d9 01       	movw	r26, r18
    5434:	a4 1b       	sub	r26, r20
    5436:	b5 0b       	sbc	r27, r21
    5438:	a8 17       	cp	r26, r24
    543a:	b9 07       	cpc	r27, r25
    543c:	b0 f4       	brcc	.+44     	; 0x546a <xTaskCheckForTimeOut+0x6e>
    543e:	42 1b       	sub	r20, r18
    5440:	53 0b       	sbc	r21, r19
    5442:	84 0f       	add	r24, r20
    5444:	95 1f       	adc	r25, r21
    5446:	db 01       	movw	r26, r22
    5448:	8d 93       	st	X+, r24
    544a:	9c 93       	st	X, r25
    544c:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <xNumOfOverflows>
    5450:	80 83       	st	Z, r24
    5452:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    5456:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    545a:	92 83       	std	Z+2, r25	; 0x02
    545c:	81 83       	std	Z+1, r24	; 0x01
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	05 c0       	rjmp	.+10     	; 0x546c <xTaskCheckForTimeOut+0x70>
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	03 c0       	rjmp	.+6      	; 0x546c <xTaskCheckForTimeOut+0x70>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	01 c0       	rjmp	.+2      	; 0x546c <xTaskCheckForTimeOut+0x70>
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	0f 90       	pop	r0
    546e:	0f be       	out	0x3f, r0	; 63
    5470:	08 95       	ret

00005472 <vTaskMissedYield>:
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	80 93 64 1a 	sts	0x1A64, r24	; 0x801a64 <xYieldPending>
    5478:	08 95       	ret

0000547a <xTaskGetCurrentTaskHandle>:
    547a:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    547e:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5482:	08 95       	ret

00005484 <vTaskPriorityInherit>:
    5484:	0f 93       	push	r16
    5486:	1f 93       	push	r17
    5488:	cf 93       	push	r28
    548a:	df 93       	push	r29
    548c:	fc 01       	movw	r30, r24
    548e:	89 2b       	or	r24, r25
    5490:	09 f4       	brne	.+2      	; 0x5494 <vTaskPriorityInherit+0x10>
    5492:	55 c0       	rjmp	.+170    	; 0x553e <vTaskPriorityInherit+0xba>
    5494:	26 89       	ldd	r18, Z+22	; 0x16
    5496:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    549a:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    549e:	56 96       	adiw	r26, 0x16	; 22
    54a0:	8c 91       	ld	r24, X
    54a2:	28 17       	cp	r18, r24
    54a4:	08 f0       	brcs	.+2      	; 0x54a8 <vTaskPriorityInherit+0x24>
    54a6:	4b c0       	rjmp	.+150    	; 0x553e <vTaskPriorityInherit+0xba>
    54a8:	84 85       	ldd	r24, Z+12	; 0x0c
    54aa:	95 85       	ldd	r25, Z+13	; 0x0d
    54ac:	99 23       	and	r25, r25
    54ae:	64 f0       	brlt	.+24     	; 0x54c8 <vTaskPriorityInherit+0x44>
    54b0:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    54b4:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    54b8:	56 96       	adiw	r26, 0x16	; 22
    54ba:	3c 91       	ld	r19, X
    54bc:	86 e0       	ldi	r24, 0x06	; 6
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	83 1b       	sub	r24, r19
    54c2:	91 09       	sbc	r25, r1
    54c4:	95 87       	std	Z+13, r25	; 0x0d
    54c6:	84 87       	std	Z+12, r24	; 0x0c
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	c9 01       	movw	r24, r18
    54cc:	88 0f       	add	r24, r24
    54ce:	99 1f       	adc	r25, r25
    54d0:	88 0f       	add	r24, r24
    54d2:	99 1f       	adc	r25, r25
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	28 0f       	add	r18, r24
    54da:	39 1f       	adc	r19, r25
    54dc:	2d 56       	subi	r18, 0x6D	; 109
    54de:	35 4e       	sbci	r19, 0xE5	; 229
    54e0:	82 85       	ldd	r24, Z+10	; 0x0a
    54e2:	93 85       	ldd	r25, Z+11	; 0x0b
    54e4:	82 17       	cp	r24, r18
    54e6:	93 07       	cpc	r25, r19
    54e8:	19 f5       	brne	.+70     	; 0x5530 <vTaskPriorityInherit+0xac>
    54ea:	8f 01       	movw	r16, r30
    54ec:	ef 01       	movw	r28, r30
    54ee:	22 96       	adiw	r28, 0x02	; 2
    54f0:	ce 01       	movw	r24, r28
    54f2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    54f6:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    54fa:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    54fe:	86 89       	ldd	r24, Z+22	; 0x16
    5500:	f8 01       	movw	r30, r16
    5502:	86 8b       	std	Z+22, r24	; 0x16
    5504:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5508:	98 17       	cp	r25, r24
    550a:	10 f4       	brcc	.+4      	; 0x5510 <vTaskPriorityInherit+0x8c>
    550c:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	9c 01       	movw	r18, r24
    5514:	22 0f       	add	r18, r18
    5516:	33 1f       	adc	r19, r19
    5518:	22 0f       	add	r18, r18
    551a:	33 1f       	adc	r19, r19
    551c:	22 0f       	add	r18, r18
    551e:	33 1f       	adc	r19, r19
    5520:	82 0f       	add	r24, r18
    5522:	93 1f       	adc	r25, r19
    5524:	be 01       	movw	r22, r28
    5526:	8d 56       	subi	r24, 0x6D	; 109
    5528:	95 4e       	sbci	r25, 0xE5	; 229
    552a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    552e:	07 c0       	rjmp	.+14     	; 0x553e <vTaskPriorityInherit+0xba>
    5530:	a0 91 c9 1a 	lds	r26, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5534:	b0 91 ca 1a 	lds	r27, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5538:	56 96       	adiw	r26, 0x16	; 22
    553a:	8c 91       	ld	r24, X
    553c:	86 8b       	std	Z+22, r24	; 0x16
    553e:	df 91       	pop	r29
    5540:	cf 91       	pop	r28
    5542:	1f 91       	pop	r17
    5544:	0f 91       	pop	r16
    5546:	08 95       	ret

00005548 <xTaskPriorityDisinherit>:
    5548:	0f 93       	push	r16
    554a:	1f 93       	push	r17
    554c:	cf 93       	push	r28
    554e:	df 93       	push	r29
    5550:	fc 01       	movw	r30, r24
    5552:	89 2b       	or	r24, r25
    5554:	79 f1       	breq	.+94     	; 0x55b4 <xTaskPriorityDisinherit+0x6c>
    5556:	82 a1       	ldd	r24, Z+34	; 0x22
    5558:	81 50       	subi	r24, 0x01	; 1
    555a:	82 a3       	std	Z+34, r24	; 0x22
    555c:	26 89       	ldd	r18, Z+22	; 0x16
    555e:	91 a1       	ldd	r25, Z+33	; 0x21
    5560:	29 17       	cp	r18, r25
    5562:	51 f1       	breq	.+84     	; 0x55b8 <xTaskPriorityDisinherit+0x70>
    5564:	81 11       	cpse	r24, r1
    5566:	2a c0       	rjmp	.+84     	; 0x55bc <xTaskPriorityDisinherit+0x74>
    5568:	ef 01       	movw	r28, r30
    556a:	8f 01       	movw	r16, r30
    556c:	0e 5f       	subi	r16, 0xFE	; 254
    556e:	1f 4f       	sbci	r17, 0xFF	; 255
    5570:	c8 01       	movw	r24, r16
    5572:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5576:	89 a1       	ldd	r24, Y+33	; 0x21
    5578:	8e 8b       	std	Y+22, r24	; 0x16
    557a:	26 e0       	ldi	r18, 0x06	; 6
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	28 1b       	sub	r18, r24
    5580:	31 09       	sbc	r19, r1
    5582:	3d 87       	std	Y+13, r19	; 0x0d
    5584:	2c 87       	std	Y+12, r18	; 0x0c
    5586:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    558a:	98 17       	cp	r25, r24
    558c:	10 f4       	brcc	.+4      	; 0x5592 <xTaskPriorityDisinherit+0x4a>
    558e:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	9c 01       	movw	r18, r24
    5596:	22 0f       	add	r18, r18
    5598:	33 1f       	adc	r19, r19
    559a:	22 0f       	add	r18, r18
    559c:	33 1f       	adc	r19, r19
    559e:	22 0f       	add	r18, r18
    55a0:	33 1f       	adc	r19, r19
    55a2:	82 0f       	add	r24, r18
    55a4:	93 1f       	adc	r25, r19
    55a6:	b8 01       	movw	r22, r16
    55a8:	8d 56       	subi	r24, 0x6D	; 109
    55aa:	95 4e       	sbci	r25, 0xE5	; 229
    55ac:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	05 c0       	rjmp	.+10     	; 0x55be <xTaskPriorityDisinherit+0x76>
    55b4:	80 e0       	ldi	r24, 0x00	; 0
    55b6:	03 c0       	rjmp	.+6      	; 0x55be <xTaskPriorityDisinherit+0x76>
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <xTaskPriorityDisinherit+0x76>
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	df 91       	pop	r29
    55c0:	cf 91       	pop	r28
    55c2:	1f 91       	pop	r17
    55c4:	0f 91       	pop	r16
    55c6:	08 95       	ret

000055c8 <pvTaskIncrementMutexHeldCount>:
    55c8:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    55cc:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    55d0:	89 2b       	or	r24, r25
    55d2:	39 f0       	breq	.+14     	; 0x55e2 <pvTaskIncrementMutexHeldCount+0x1a>
    55d4:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    55d8:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    55dc:	82 a1       	ldd	r24, Z+34	; 0x22
    55de:	8f 5f       	subi	r24, 0xFF	; 255
    55e0:	82 a3       	std	Z+34, r24	; 0x22
    55e2:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    55e6:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    55ea:	08 95       	ret

000055ec <ulTaskNotifyTake>:
    55ec:	0f 93       	push	r16
    55ee:	1f 93       	push	r17
    55f0:	cf 93       	push	r28
    55f2:	df 93       	push	r29
    55f4:	18 2f       	mov	r17, r24
    55f6:	eb 01       	movw	r28, r22
    55f8:	0f b6       	in	r0, 0x3f	; 63
    55fa:	f8 94       	cli
    55fc:	0f 92       	push	r0
    55fe:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5602:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5606:	83 a1       	ldd	r24, Z+35	; 0x23
    5608:	94 a1       	ldd	r25, Z+36	; 0x24
    560a:	a5 a1       	ldd	r26, Z+37	; 0x25
    560c:	b6 a1       	ldd	r27, Z+38	; 0x26
    560e:	89 2b       	or	r24, r25
    5610:	8a 2b       	or	r24, r26
    5612:	8b 2b       	or	r24, r27
    5614:	09 f0       	breq	.+2      	; 0x5618 <ulTaskNotifyTake+0x2c>
    5616:	58 c0       	rjmp	.+176    	; 0x56c8 <ulTaskNotifyTake+0xdc>
    5618:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    561c:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5620:	81 e0       	ldi	r24, 0x01	; 1
    5622:	87 a3       	std	Z+39, r24	; 0x27
    5624:	20 97       	sbiw	r28, 0x00	; 0
    5626:	09 f4       	brne	.+2      	; 0x562a <ulTaskNotifyTake+0x3e>
    5628:	4f c0       	rjmp	.+158    	; 0x56c8 <ulTaskNotifyTake+0xdc>
    562a:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    562e:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5632:	02 96       	adiw	r24, 0x02	; 2
    5634:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5638:	cf 3f       	cpi	r28, 0xFF	; 255
    563a:	8f ef       	ldi	r24, 0xFF	; 255
    563c:	d8 07       	cpc	r29, r24
    563e:	59 f4       	brne	.+22     	; 0x5656 <ulTaskNotifyTake+0x6a>
    5640:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5644:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5648:	6e 5f       	subi	r22, 0xFE	; 254
    564a:	7f 4f       	sbci	r23, 0xFF	; 255
    564c:	8b e6       	ldi	r24, 0x6B	; 107
    564e:	9a e1       	ldi	r25, 0x1A	; 26
    5650:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5654:	37 c0       	rjmp	.+110    	; 0x56c4 <ulTaskNotifyTake+0xd8>
    5656:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    565a:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    565e:	c8 0f       	add	r28, r24
    5660:	d9 1f       	adc	r29, r25
    5662:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5666:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    566a:	d3 83       	std	Z+3, r29	; 0x03
    566c:	c2 83       	std	Z+2, r28	; 0x02
    566e:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    5672:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    5676:	c8 17       	cp	r28, r24
    5678:	d9 07       	cpc	r29, r25
    567a:	68 f4       	brcc	.+26     	; 0x5696 <ulTaskNotifyTake+0xaa>
    567c:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5680:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5684:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    5688:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    568c:	6e 5f       	subi	r22, 0xFE	; 254
    568e:	7f 4f       	sbci	r23, 0xFF	; 255
    5690:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5694:	17 c0       	rjmp	.+46     	; 0x56c4 <ulTaskNotifyTake+0xd8>
    5696:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    569a:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    569e:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    56a2:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    56a6:	6e 5f       	subi	r22, 0xFE	; 254
    56a8:	7f 4f       	sbci	r23, 0xFF	; 255
    56aa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    56ae:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    56b2:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    56b6:	c8 17       	cp	r28, r24
    56b8:	d9 07       	cpc	r29, r25
    56ba:	20 f4       	brcc	.+8      	; 0x56c4 <ulTaskNotifyTake+0xd8>
    56bc:	d0 93 61 1a 	sts	0x1A61, r29	; 0x801a61 <xNextTaskUnblockTime+0x1>
    56c0:	c0 93 60 1a 	sts	0x1A60, r28	; 0x801a60 <xNextTaskUnblockTime>
    56c4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    56c8:	0f 90       	pop	r0
    56ca:	0f be       	out	0x3f, r0	; 63
    56cc:	0f b6       	in	r0, 0x3f	; 63
    56ce:	f8 94       	cli
    56d0:	0f 92       	push	r0
    56d2:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    56d6:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    56da:	63 a1       	ldd	r22, Z+35	; 0x23
    56dc:	74 a1       	ldd	r23, Z+36	; 0x24
    56de:	85 a1       	ldd	r24, Z+37	; 0x25
    56e0:	96 a1       	ldd	r25, Z+38	; 0x26
    56e2:	61 15       	cp	r22, r1
    56e4:	71 05       	cpc	r23, r1
    56e6:	81 05       	cpc	r24, r1
    56e8:	91 05       	cpc	r25, r1
    56ea:	d9 f0       	breq	.+54     	; 0x5722 <ulTaskNotifyTake+0x136>
    56ec:	11 23       	and	r17, r17
    56ee:	49 f0       	breq	.+18     	; 0x5702 <ulTaskNotifyTake+0x116>
    56f0:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    56f4:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    56f8:	13 a2       	std	Z+35, r1	; 0x23
    56fa:	14 a2       	std	Z+36, r1	; 0x24
    56fc:	15 a2       	std	Z+37, r1	; 0x25
    56fe:	16 a2       	std	Z+38, r1	; 0x26
    5700:	10 c0       	rjmp	.+32     	; 0x5722 <ulTaskNotifyTake+0x136>
    5702:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5706:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    570a:	03 a1       	ldd	r16, Z+35	; 0x23
    570c:	14 a1       	ldd	r17, Z+36	; 0x24
    570e:	25 a1       	ldd	r18, Z+37	; 0x25
    5710:	36 a1       	ldd	r19, Z+38	; 0x26
    5712:	01 50       	subi	r16, 0x01	; 1
    5714:	11 09       	sbc	r17, r1
    5716:	21 09       	sbc	r18, r1
    5718:	31 09       	sbc	r19, r1
    571a:	03 a3       	std	Z+35, r16	; 0x23
    571c:	14 a3       	std	Z+36, r17	; 0x24
    571e:	25 a3       	std	Z+37, r18	; 0x25
    5720:	36 a3       	std	Z+38, r19	; 0x26
    5722:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5726:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    572a:	17 a2       	std	Z+39, r1	; 0x27
    572c:	0f 90       	pop	r0
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	df 91       	pop	r29
    5732:	cf 91       	pop	r28
    5734:	1f 91       	pop	r17
    5736:	0f 91       	pop	r16
    5738:	08 95       	ret

0000573a <xTaskNotifyWait>:
    573a:	4f 92       	push	r4
    573c:	5f 92       	push	r5
    573e:	6f 92       	push	r6
    5740:	7f 92       	push	r7
    5742:	8f 92       	push	r8
    5744:	9f 92       	push	r9
    5746:	af 92       	push	r10
    5748:	bf 92       	push	r11
    574a:	ef 92       	push	r14
    574c:	ff 92       	push	r15
    574e:	0f 93       	push	r16
    5750:	1f 93       	push	r17
    5752:	49 01       	movw	r8, r18
    5754:	5a 01       	movw	r10, r20
    5756:	0f b6       	in	r0, 0x3f	; 63
    5758:	f8 94       	cli
    575a:	0f 92       	push	r0
    575c:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5760:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5764:	27 a1       	ldd	r18, Z+39	; 0x27
    5766:	22 30       	cpi	r18, 0x02	; 2
    5768:	09 f4       	brne	.+2      	; 0x576c <xTaskNotifyWait+0x32>
    576a:	6f c0       	rjmp	.+222    	; 0x584a <xTaskNotifyWait+0x110>
    576c:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5770:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5774:	43 a0       	ldd	r4, Z+35	; 0x23
    5776:	54 a0       	ldd	r5, Z+36	; 0x24
    5778:	65 a0       	ldd	r6, Z+37	; 0x25
    577a:	76 a0       	ldd	r7, Z+38	; 0x26
    577c:	dc 01       	movw	r26, r24
    577e:	cb 01       	movw	r24, r22
    5780:	80 95       	com	r24
    5782:	90 95       	com	r25
    5784:	a0 95       	com	r26
    5786:	b0 95       	com	r27
    5788:	84 21       	and	r24, r4
    578a:	95 21       	and	r25, r5
    578c:	a6 21       	and	r26, r6
    578e:	b7 21       	and	r27, r7
    5790:	83 a3       	std	Z+35, r24	; 0x23
    5792:	94 a3       	std	Z+36, r25	; 0x24
    5794:	a5 a3       	std	Z+37, r26	; 0x25
    5796:	b6 a3       	std	Z+38, r27	; 0x26
    5798:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    579c:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	87 a3       	std	Z+39, r24	; 0x27
    57a4:	e1 14       	cp	r14, r1
    57a6:	f1 04       	cpc	r15, r1
    57a8:	09 f4       	brne	.+2      	; 0x57ac <xTaskNotifyWait+0x72>
    57aa:	4f c0       	rjmp	.+158    	; 0x584a <xTaskNotifyWait+0x110>
    57ac:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    57b0:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    57b4:	02 96       	adiw	r24, 0x02	; 2
    57b6:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    57ba:	8f ef       	ldi	r24, 0xFF	; 255
    57bc:	e8 16       	cp	r14, r24
    57be:	f8 06       	cpc	r15, r24
    57c0:	59 f4       	brne	.+22     	; 0x57d8 <xTaskNotifyWait+0x9e>
    57c2:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    57c6:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    57ca:	6e 5f       	subi	r22, 0xFE	; 254
    57cc:	7f 4f       	sbci	r23, 0xFF	; 255
    57ce:	8b e6       	ldi	r24, 0x6B	; 107
    57d0:	9a e1       	ldi	r25, 0x1A	; 26
    57d2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    57d6:	37 c0       	rjmp	.+110    	; 0x5846 <xTaskNotifyWait+0x10c>
    57d8:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    57dc:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    57e0:	e8 0e       	add	r14, r24
    57e2:	f9 1e       	adc	r15, r25
    57e4:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    57e8:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    57ec:	f3 82       	std	Z+3, r15	; 0x03
    57ee:	e2 82       	std	Z+2, r14	; 0x02
    57f0:	80 91 68 1a 	lds	r24, 0x1A68	; 0x801a68 <xTickCount>
    57f4:	90 91 69 1a 	lds	r25, 0x1A69	; 0x801a69 <xTickCount+0x1>
    57f8:	e8 16       	cp	r14, r24
    57fa:	f9 06       	cpc	r15, r25
    57fc:	68 f4       	brcc	.+26     	; 0x5818 <xTaskNotifyWait+0xde>
    57fe:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5802:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5806:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <pxOverflowDelayedTaskList>
    580a:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <pxOverflowDelayedTaskList+0x1>
    580e:	6e 5f       	subi	r22, 0xFE	; 254
    5810:	7f 4f       	sbci	r23, 0xFF	; 255
    5812:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5816:	17 c0       	rjmp	.+46     	; 0x5846 <xTaskNotifyWait+0x10c>
    5818:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    581c:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5820:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <pxDelayedTaskList>
    5824:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <pxDelayedTaskList+0x1>
    5828:	6e 5f       	subi	r22, 0xFE	; 254
    582a:	7f 4f       	sbci	r23, 0xFF	; 255
    582c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vListInsert>
    5830:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <xNextTaskUnblockTime>
    5834:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <xNextTaskUnblockTime+0x1>
    5838:	e8 16       	cp	r14, r24
    583a:	f9 06       	cpc	r15, r25
    583c:	20 f4       	brcc	.+8      	; 0x5846 <xTaskNotifyWait+0x10c>
    583e:	f0 92 61 1a 	sts	0x1A61, r15	; 0x801a61 <xNextTaskUnblockTime+0x1>
    5842:	e0 92 60 1a 	sts	0x1A60, r14	; 0x801a60 <xNextTaskUnblockTime>
    5846:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    584a:	0f 90       	pop	r0
    584c:	0f be       	out	0x3f, r0	; 63
    584e:	0f b6       	in	r0, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	0f 92       	push	r0
    5854:	01 15       	cp	r16, r1
    5856:	11 05       	cpc	r17, r1
    5858:	69 f0       	breq	.+26     	; 0x5874 <xTaskNotifyWait+0x13a>
    585a:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    585e:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5862:	83 a1       	ldd	r24, Z+35	; 0x23
    5864:	94 a1       	ldd	r25, Z+36	; 0x24
    5866:	a5 a1       	ldd	r26, Z+37	; 0x25
    5868:	b6 a1       	ldd	r27, Z+38	; 0x26
    586a:	f8 01       	movw	r30, r16
    586c:	80 83       	st	Z, r24
    586e:	91 83       	std	Z+1, r25	; 0x01
    5870:	a2 83       	std	Z+2, r26	; 0x02
    5872:	b3 83       	std	Z+3, r27	; 0x03
    5874:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5878:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    587c:	87 a1       	ldd	r24, Z+39	; 0x27
    587e:	81 30       	cpi	r24, 0x01	; 1
    5880:	b1 f0       	breq	.+44     	; 0x58ae <xTaskNotifyWait+0x174>
    5882:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5886:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    588a:	83 a1       	ldd	r24, Z+35	; 0x23
    588c:	94 a1       	ldd	r25, Z+36	; 0x24
    588e:	a5 a1       	ldd	r26, Z+37	; 0x25
    5890:	b6 a1       	ldd	r27, Z+38	; 0x26
    5892:	80 94       	com	r8
    5894:	90 94       	com	r9
    5896:	a0 94       	com	r10
    5898:	b0 94       	com	r11
    589a:	88 22       	and	r8, r24
    589c:	99 22       	and	r9, r25
    589e:	aa 22       	and	r10, r26
    58a0:	bb 22       	and	r11, r27
    58a2:	83 a2       	std	Z+35, r8	; 0x23
    58a4:	94 a2       	std	Z+36, r9	; 0x24
    58a6:	a5 a2       	std	Z+37, r10	; 0x25
    58a8:	b6 a2       	std	Z+38, r11	; 0x26
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	01 c0       	rjmp	.+2      	; 0x58b0 <xTaskNotifyWait+0x176>
    58ae:	80 e0       	ldi	r24, 0x00	; 0
    58b0:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    58b4:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    58b8:	17 a2       	std	Z+39, r1	; 0x27
    58ba:	0f 90       	pop	r0
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	1f 91       	pop	r17
    58c0:	0f 91       	pop	r16
    58c2:	ff 90       	pop	r15
    58c4:	ef 90       	pop	r14
    58c6:	bf 90       	pop	r11
    58c8:	af 90       	pop	r10
    58ca:	9f 90       	pop	r9
    58cc:	8f 90       	pop	r8
    58ce:	7f 90       	pop	r7
    58d0:	6f 90       	pop	r6
    58d2:	5f 90       	pop	r5
    58d4:	4f 90       	pop	r4
    58d6:	08 95       	ret

000058d8 <xTaskGenericNotify>:
    58d8:	0f 93       	push	r16
    58da:	1f 93       	push	r17
    58dc:	cf 93       	push	r28
    58de:	df 93       	push	r29
    58e0:	fc 01       	movw	r30, r24
    58e2:	0f b6       	in	r0, 0x3f	; 63
    58e4:	f8 94       	cli
    58e6:	0f 92       	push	r0
    58e8:	01 15       	cp	r16, r1
    58ea:	11 05       	cpc	r17, r1
    58ec:	49 f0       	breq	.+18     	; 0x5900 <xTaskGenericNotify+0x28>
    58ee:	83 a1       	ldd	r24, Z+35	; 0x23
    58f0:	94 a1       	ldd	r25, Z+36	; 0x24
    58f2:	a5 a1       	ldd	r26, Z+37	; 0x25
    58f4:	b6 a1       	ldd	r27, Z+38	; 0x26
    58f6:	e8 01       	movw	r28, r16
    58f8:	88 83       	st	Y, r24
    58fa:	99 83       	std	Y+1, r25	; 0x01
    58fc:	aa 83       	std	Y+2, r26	; 0x02
    58fe:	bb 83       	std	Y+3, r27	; 0x03
    5900:	87 a1       	ldd	r24, Z+39	; 0x27
    5902:	92 e0       	ldi	r25, 0x02	; 2
    5904:	97 a3       	std	Z+39, r25	; 0x27
    5906:	22 30       	cpi	r18, 0x02	; 2
    5908:	b1 f0       	breq	.+44     	; 0x5936 <xTaskGenericNotify+0x5e>
    590a:	18 f4       	brcc	.+6      	; 0x5912 <xTaskGenericNotify+0x3a>
    590c:	21 30       	cpi	r18, 0x01	; 1
    590e:	31 f0       	breq	.+12     	; 0x591c <xTaskGenericNotify+0x44>
    5910:	2a c0       	rjmp	.+84     	; 0x5966 <xTaskGenericNotify+0x8e>
    5912:	23 30       	cpi	r18, 0x03	; 3
    5914:	e9 f0       	breq	.+58     	; 0x5950 <xTaskGenericNotify+0x78>
    5916:	24 30       	cpi	r18, 0x04	; 4
    5918:	01 f1       	breq	.+64     	; 0x595a <xTaskGenericNotify+0x82>
    591a:	25 c0       	rjmp	.+74     	; 0x5966 <xTaskGenericNotify+0x8e>
    591c:	03 a1       	ldd	r16, Z+35	; 0x23
    591e:	14 a1       	ldd	r17, Z+36	; 0x24
    5920:	25 a1       	ldd	r18, Z+37	; 0x25
    5922:	36 a1       	ldd	r19, Z+38	; 0x26
    5924:	40 2b       	or	r20, r16
    5926:	51 2b       	or	r21, r17
    5928:	62 2b       	or	r22, r18
    592a:	73 2b       	or	r23, r19
    592c:	43 a3       	std	Z+35, r20	; 0x23
    592e:	54 a3       	std	Z+36, r21	; 0x24
    5930:	65 a3       	std	Z+37, r22	; 0x25
    5932:	76 a3       	std	Z+38, r23	; 0x26
    5934:	18 c0       	rjmp	.+48     	; 0x5966 <xTaskGenericNotify+0x8e>
    5936:	43 a1       	ldd	r20, Z+35	; 0x23
    5938:	54 a1       	ldd	r21, Z+36	; 0x24
    593a:	65 a1       	ldd	r22, Z+37	; 0x25
    593c:	76 a1       	ldd	r23, Z+38	; 0x26
    593e:	4f 5f       	subi	r20, 0xFF	; 255
    5940:	5f 4f       	sbci	r21, 0xFF	; 255
    5942:	6f 4f       	sbci	r22, 0xFF	; 255
    5944:	7f 4f       	sbci	r23, 0xFF	; 255
    5946:	43 a3       	std	Z+35, r20	; 0x23
    5948:	54 a3       	std	Z+36, r21	; 0x24
    594a:	65 a3       	std	Z+37, r22	; 0x25
    594c:	76 a3       	std	Z+38, r23	; 0x26
    594e:	0b c0       	rjmp	.+22     	; 0x5966 <xTaskGenericNotify+0x8e>
    5950:	43 a3       	std	Z+35, r20	; 0x23
    5952:	54 a3       	std	Z+36, r21	; 0x24
    5954:	65 a3       	std	Z+37, r22	; 0x25
    5956:	76 a3       	std	Z+38, r23	; 0x26
    5958:	06 c0       	rjmp	.+12     	; 0x5966 <xTaskGenericNotify+0x8e>
    595a:	82 30       	cpi	r24, 0x02	; 2
    595c:	79 f1       	breq	.+94     	; 0x59bc <xTaskGenericNotify+0xe4>
    595e:	43 a3       	std	Z+35, r20	; 0x23
    5960:	54 a3       	std	Z+36, r21	; 0x24
    5962:	65 a3       	std	Z+37, r22	; 0x25
    5964:	76 a3       	std	Z+38, r23	; 0x26
    5966:	81 30       	cpi	r24, 0x01	; 1
    5968:	59 f5       	brne	.+86     	; 0x59c0 <xTaskGenericNotify+0xe8>
    596a:	ef 01       	movw	r28, r30
    596c:	8f 01       	movw	r16, r30
    596e:	0e 5f       	subi	r16, 0xFE	; 254
    5970:	1f 4f       	sbci	r17, 0xFF	; 255
    5972:	c8 01       	movw	r24, r16
    5974:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5978:	8e 89       	ldd	r24, Y+22	; 0x16
    597a:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    597e:	98 17       	cp	r25, r24
    5980:	10 f4       	brcc	.+4      	; 0x5986 <xTaskGenericNotify+0xae>
    5982:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	9c 01       	movw	r18, r24
    598a:	22 0f       	add	r18, r18
    598c:	33 1f       	adc	r19, r19
    598e:	22 0f       	add	r18, r18
    5990:	33 1f       	adc	r19, r19
    5992:	22 0f       	add	r18, r18
    5994:	33 1f       	adc	r19, r19
    5996:	82 0f       	add	r24, r18
    5998:	93 1f       	adc	r25, r19
    599a:	b8 01       	movw	r22, r16
    599c:	8d 56       	subi	r24, 0x6D	; 109
    599e:	95 4e       	sbci	r25, 0xE5	; 229
    59a0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    59a4:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    59a8:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    59ac:	9e 89       	ldd	r25, Y+22	; 0x16
    59ae:	86 89       	ldd	r24, Z+22	; 0x16
    59b0:	89 17       	cp	r24, r25
    59b2:	40 f4       	brcc	.+16     	; 0x59c4 <xTaskGenericNotify+0xec>
    59b4:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <vPortYield>
    59b8:	81 e0       	ldi	r24, 0x01	; 1
    59ba:	05 c0       	rjmp	.+10     	; 0x59c6 <xTaskGenericNotify+0xee>
    59bc:	80 e0       	ldi	r24, 0x00	; 0
    59be:	03 c0       	rjmp	.+6      	; 0x59c6 <xTaskGenericNotify+0xee>
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	01 c0       	rjmp	.+2      	; 0x59c6 <xTaskGenericNotify+0xee>
    59c4:	81 e0       	ldi	r24, 0x01	; 1
    59c6:	0f 90       	pop	r0
    59c8:	0f be       	out	0x3f, r0	; 63
    59ca:	df 91       	pop	r29
    59cc:	cf 91       	pop	r28
    59ce:	1f 91       	pop	r17
    59d0:	0f 91       	pop	r16
    59d2:	08 95       	ret

000059d4 <xTaskGenericNotifyFromISR>:
    59d4:	ef 92       	push	r14
    59d6:	ff 92       	push	r15
    59d8:	0f 93       	push	r16
    59da:	1f 93       	push	r17
    59dc:	cf 93       	push	r28
    59de:	df 93       	push	r29
    59e0:	fc 01       	movw	r30, r24
    59e2:	01 15       	cp	r16, r1
    59e4:	11 05       	cpc	r17, r1
    59e6:	49 f0       	breq	.+18     	; 0x59fa <xTaskGenericNotifyFromISR+0x26>
    59e8:	83 a1       	ldd	r24, Z+35	; 0x23
    59ea:	94 a1       	ldd	r25, Z+36	; 0x24
    59ec:	a5 a1       	ldd	r26, Z+37	; 0x25
    59ee:	b6 a1       	ldd	r27, Z+38	; 0x26
    59f0:	e8 01       	movw	r28, r16
    59f2:	88 83       	st	Y, r24
    59f4:	99 83       	std	Y+1, r25	; 0x01
    59f6:	aa 83       	std	Y+2, r26	; 0x02
    59f8:	bb 83       	std	Y+3, r27	; 0x03
    59fa:	87 a1       	ldd	r24, Z+39	; 0x27
    59fc:	92 e0       	ldi	r25, 0x02	; 2
    59fe:	97 a3       	std	Z+39, r25	; 0x27
    5a00:	22 30       	cpi	r18, 0x02	; 2
    5a02:	b1 f0       	breq	.+44     	; 0x5a30 <xTaskGenericNotifyFromISR+0x5c>
    5a04:	18 f4       	brcc	.+6      	; 0x5a0c <xTaskGenericNotifyFromISR+0x38>
    5a06:	21 30       	cpi	r18, 0x01	; 1
    5a08:	31 f0       	breq	.+12     	; 0x5a16 <xTaskGenericNotifyFromISR+0x42>
    5a0a:	2a c0       	rjmp	.+84     	; 0x5a60 <xTaskGenericNotifyFromISR+0x8c>
    5a0c:	23 30       	cpi	r18, 0x03	; 3
    5a0e:	e9 f0       	breq	.+58     	; 0x5a4a <xTaskGenericNotifyFromISR+0x76>
    5a10:	24 30       	cpi	r18, 0x04	; 4
    5a12:	01 f1       	breq	.+64     	; 0x5a54 <xTaskGenericNotifyFromISR+0x80>
    5a14:	25 c0       	rjmp	.+74     	; 0x5a60 <xTaskGenericNotifyFromISR+0x8c>
    5a16:	03 a1       	ldd	r16, Z+35	; 0x23
    5a18:	14 a1       	ldd	r17, Z+36	; 0x24
    5a1a:	25 a1       	ldd	r18, Z+37	; 0x25
    5a1c:	36 a1       	ldd	r19, Z+38	; 0x26
    5a1e:	40 2b       	or	r20, r16
    5a20:	51 2b       	or	r21, r17
    5a22:	62 2b       	or	r22, r18
    5a24:	73 2b       	or	r23, r19
    5a26:	43 a3       	std	Z+35, r20	; 0x23
    5a28:	54 a3       	std	Z+36, r21	; 0x24
    5a2a:	65 a3       	std	Z+37, r22	; 0x25
    5a2c:	76 a3       	std	Z+38, r23	; 0x26
    5a2e:	18 c0       	rjmp	.+48     	; 0x5a60 <xTaskGenericNotifyFromISR+0x8c>
    5a30:	43 a1       	ldd	r20, Z+35	; 0x23
    5a32:	54 a1       	ldd	r21, Z+36	; 0x24
    5a34:	65 a1       	ldd	r22, Z+37	; 0x25
    5a36:	76 a1       	ldd	r23, Z+38	; 0x26
    5a38:	4f 5f       	subi	r20, 0xFF	; 255
    5a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a3c:	6f 4f       	sbci	r22, 0xFF	; 255
    5a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a40:	43 a3       	std	Z+35, r20	; 0x23
    5a42:	54 a3       	std	Z+36, r21	; 0x24
    5a44:	65 a3       	std	Z+37, r22	; 0x25
    5a46:	76 a3       	std	Z+38, r23	; 0x26
    5a48:	0b c0       	rjmp	.+22     	; 0x5a60 <xTaskGenericNotifyFromISR+0x8c>
    5a4a:	43 a3       	std	Z+35, r20	; 0x23
    5a4c:	54 a3       	std	Z+36, r21	; 0x24
    5a4e:	65 a3       	std	Z+37, r22	; 0x25
    5a50:	76 a3       	std	Z+38, r23	; 0x26
    5a52:	06 c0       	rjmp	.+12     	; 0x5a60 <xTaskGenericNotifyFromISR+0x8c>
    5a54:	82 30       	cpi	r24, 0x02	; 2
    5a56:	f1 f1       	breq	.+124    	; 0x5ad4 <xTaskGenericNotifyFromISR+0x100>
    5a58:	43 a3       	std	Z+35, r20	; 0x23
    5a5a:	54 a3       	std	Z+36, r21	; 0x24
    5a5c:	65 a3       	std	Z+37, r22	; 0x25
    5a5e:	76 a3       	std	Z+38, r23	; 0x26
    5a60:	81 30       	cpi	r24, 0x01	; 1
    5a62:	d1 f5       	brne	.+116    	; 0x5ad8 <xTaskGenericNotifyFromISR+0x104>
    5a64:	ef 01       	movw	r28, r30
    5a66:	80 91 5f 1a 	lds	r24, 0x1A5F	; 0x801a5f <uxSchedulerSuspended>
    5a6a:	81 11       	cpse	r24, r1
    5a6c:	1d c0       	rjmp	.+58     	; 0x5aa8 <xTaskGenericNotifyFromISR+0xd4>
    5a6e:	8f 01       	movw	r16, r30
    5a70:	0e 5f       	subi	r16, 0xFE	; 254
    5a72:	1f 4f       	sbci	r17, 0xFF	; 255
    5a74:	c8 01       	movw	r24, r16
    5a76:	0e 94 aa 0c 	call	0x1954	; 0x1954 <uxListRemove>
    5a7a:	8e 89       	ldd	r24, Y+22	; 0x16
    5a7c:	90 91 67 1a 	lds	r25, 0x1A67	; 0x801a67 <uxTopReadyPriority>
    5a80:	98 17       	cp	r25, r24
    5a82:	10 f4       	brcc	.+4      	; 0x5a88 <xTaskGenericNotifyFromISR+0xb4>
    5a84:	80 93 67 1a 	sts	0x1A67, r24	; 0x801a67 <uxTopReadyPriority>
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	9c 01       	movw	r18, r24
    5a8c:	22 0f       	add	r18, r18
    5a8e:	33 1f       	adc	r19, r19
    5a90:	22 0f       	add	r18, r18
    5a92:	33 1f       	adc	r19, r19
    5a94:	22 0f       	add	r18, r18
    5a96:	33 1f       	adc	r19, r19
    5a98:	82 0f       	add	r24, r18
    5a9a:	93 1f       	adc	r25, r19
    5a9c:	b8 01       	movw	r22, r16
    5a9e:	8d 56       	subi	r24, 0x6D	; 109
    5aa0:	95 4e       	sbci	r25, 0xE5	; 229
    5aa2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5aa6:	07 c0       	rjmp	.+14     	; 0x5ab6 <xTaskGenericNotifyFromISR+0xe2>
    5aa8:	bf 01       	movw	r22, r30
    5aaa:	64 5f       	subi	r22, 0xF4	; 244
    5aac:	7f 4f       	sbci	r23, 0xFF	; 255
    5aae:	84 e7       	ldi	r24, 0x74	; 116
    5ab0:	9a e1       	ldi	r25, 0x1A	; 26
    5ab2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <vListInsertEnd>
    5ab6:	e0 91 c9 1a 	lds	r30, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5aba:	f0 91 ca 1a 	lds	r31, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>
    5abe:	9e 89       	ldd	r25, Y+22	; 0x16
    5ac0:	86 89       	ldd	r24, Z+22	; 0x16
    5ac2:	89 17       	cp	r24, r25
    5ac4:	58 f4       	brcc	.+22     	; 0x5adc <xTaskGenericNotifyFromISR+0x108>
    5ac6:	e1 14       	cp	r14, r1
    5ac8:	f1 04       	cpc	r15, r1
    5aca:	51 f0       	breq	.+20     	; 0x5ae0 <xTaskGenericNotifyFromISR+0x10c>
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	f7 01       	movw	r30, r14
    5ad0:	80 83       	st	Z, r24
    5ad2:	07 c0       	rjmp	.+14     	; 0x5ae2 <xTaskGenericNotifyFromISR+0x10e>
    5ad4:	80 e0       	ldi	r24, 0x00	; 0
    5ad6:	05 c0       	rjmp	.+10     	; 0x5ae2 <xTaskGenericNotifyFromISR+0x10e>
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
    5ada:	03 c0       	rjmp	.+6      	; 0x5ae2 <xTaskGenericNotifyFromISR+0x10e>
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	01 c0       	rjmp	.+2      	; 0x5ae2 <xTaskGenericNotifyFromISR+0x10e>
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	ff 90       	pop	r15
    5aec:	ef 90       	pop	r14
    5aee:	08 95       	ret

00005af0 <xTaskNotifyStateClear>:

		pxTCB = ( TCB_t * ) xTask;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( pxTCB );
    5af0:	00 97       	sbiw	r24, 0x00	; 0
    5af2:	21 f4       	brne	.+8      	; 0x5afc <xTaskNotifyStateClear+0xc>
    5af4:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <pxCurrentTCB>
    5af8:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <pxCurrentTCB+0x1>

		taskENTER_CRITICAL();
    5afc:	0f b6       	in	r0, 0x3f	; 63
    5afe:	f8 94       	cli
    5b00:	0f 92       	push	r0
		{
			if( pxTCB->eNotifyState == eNotified )
    5b02:	fc 01       	movw	r30, r24
    5b04:	27 a1       	ldd	r18, Z+39	; 0x27
    5b06:	22 30       	cpi	r18, 0x02	; 2
    5b08:	19 f4       	brne	.+6      	; 0x5b10 <xTaskNotifyStateClear+0x20>
			{
				pxTCB->eNotifyState = eNotWaitingNotification;
    5b0a:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	01 c0       	rjmp	.+2      	; 0x5b12 <xTaskNotifyStateClear+0x22>
			}
			else
			{
				xReturn = pdFAIL;
    5b10:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		taskEXIT_CRITICAL();
    5b12:	0f 90       	pop	r0
    5b14:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    5b16:	08 95       	ret

00005b18 <vFrameReaderTask>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
}

void vFrameReaderTask( void *pvParameters ){
    5b18:	cf 93       	push	r28
    5b1a:	df 93       	push	r29
    5b1c:	00 d0       	rcall	.+0      	; 0x5b1e <vFrameReaderTask+0x6>
    5b1e:	1f 92       	push	r1
    5b20:	cd b7       	in	r28, 0x3d	; 61
    5b22:	de b7       	in	r29, 0x3e	; 62
	frame_receiver = xTaskGetCurrentTaskHandle();
    5b24:	aa dc       	rcall	.-1708   	; 0x547a <xTaskGetCurrentTaskHandle>
    5b26:	90 93 32 1b 	sts	0x1B32, r25	; 0x801b32 <frame_receiver+0x1>
    5b2a:	80 93 31 1b 	sts	0x1B31, r24	; 0x801b31 <frame_receiver>
	uint32_t notification_value = 0;
    5b2e:	19 82       	std	Y+1, r1	; 0x01
    5b30:	1a 82       	std	Y+2, r1	; 0x02
    5b32:	1b 82       	std	Y+3, r1	; 0x03
    5b34:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, &notification_value, portMAX_DELAY);
    5b36:	ee 24       	eor	r14, r14
    5b38:	ea 94       	dec	r14
    5b3a:	fe 2c       	mov	r15, r14
    5b3c:	8e 01       	movw	r16, r28
    5b3e:	0f 5f       	subi	r16, 0xFF	; 255
    5b40:	1f 4f       	sbci	r17, 0xFF	; 255
    5b42:	2f ef       	ldi	r18, 0xFF	; 255
    5b44:	3f ef       	ldi	r19, 0xFF	; 255
    5b46:	a9 01       	movw	r20, r18
    5b48:	6f ef       	ldi	r22, 0xFF	; 255
    5b4a:	7f ef       	ldi	r23, 0xFF	; 255
    5b4c:	cb 01       	movw	r24, r22
    5b4e:	f5 dd       	rcall	.-1046   	; 0x573a <xTaskNotifyWait>
		if(receive_callback != NULL) receive_callback(receive_buffer, (uint16_t)notification_value);
    5b50:	e0 91 96 1b 	lds	r30, 0x1B96	; 0x801b96 <receive_callback>
    5b54:	f0 91 97 1b 	lds	r31, 0x1B97	; 0x801b97 <receive_callback+0x1>
    5b58:	30 97       	sbiw	r30, 0x00	; 0
    5b5a:	69 f3       	breq	.-38     	; 0x5b36 <vFrameReaderTask+0x1e>
    5b5c:	69 81       	ldd	r22, Y+1	; 0x01
    5b5e:	7a 81       	ldd	r23, Y+2	; 0x02
    5b60:	88 e9       	ldi	r24, 0x98	; 152
    5b62:	9b e1       	ldi	r25, 0x1B	; 27
    5b64:	19 95       	eicall
    5b66:	e7 cf       	rjmp	.-50     	; 0x5b36 <vFrameReaderTask+0x1e>

00005b68 <vUartSendTask>:
	}
}

void vUartSendTask(void *pvParamters) {
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    5b70:	c4 56       	subi	r28, 0x64	; 100
    5b72:	d1 09       	sbc	r29, r1
    5b74:	0f b6       	in	r0, 0x3f	; 63
    5b76:	f8 94       	cli
    5b78:	de bf       	out	0x3e, r29	; 62
    5b7a:	0f be       	out	0x3f, r0	; 63
    5b7c:	cd bf       	out	0x3d, r28	; 61
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5b7e:	00 ed       	ldi	r16, 0xD0	; 208
    5b80:	10 e0       	ldi	r17, 0x00	; 0
				UDR2 = data[i];
    5b82:	0f 2e       	mov	r0, r31
    5b84:	f6 ed       	ldi	r31, 0xD6	; 214
    5b86:	ef 2e       	mov	r14, r31
    5b88:	f1 2c       	mov	r15, r1
    5b8a:	f0 2d       	mov	r31, r0
void vUartSendTask(void *pvParamters) {
	uint8_t data[100];
	uint16_t num;
	uint16_t i;
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5b8c:	20 e0       	ldi	r18, 0x00	; 0
    5b8e:	4f ef       	ldi	r20, 0xFF	; 255
    5b90:	5f ef       	ldi	r21, 0xFF	; 255
    5b92:	60 e0       	ldi	r22, 0x00	; 0
    5b94:	70 e0       	ldi	r23, 0x00	; 0
    5b96:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <xUartMutex>
    5b9a:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <xUartMutex+0x1>
    5b9e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
    5ba2:	24 e6       	ldi	r18, 0x64	; 100
    5ba4:	30 e0       	ldi	r19, 0x00	; 0
    5ba6:	40 e0       	ldi	r20, 0x00	; 0
    5ba8:	be 01       	movw	r22, r28
    5baa:	6f 5f       	subi	r22, 0xFF	; 255
    5bac:	7f 4f       	sbci	r23, 0xFF	; 255
    5bae:	8c ef       	ldi	r24, 0xFC	; 252
    5bb0:	9b e1       	ldi	r25, 0x1B	; 27
    5bb2:	0e 94 a2 05 	call	0xb44	; 0xb44 <buffer_remove_token>
    5bb6:	6c 01       	movw	r12, r24
		xSemaphoreGive(xUartMutex);
    5bb8:	60 e0       	ldi	r22, 0x00	; 0
    5bba:	70 e0       	ldi	r23, 0x00	; 0
    5bbc:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <xUartMutex>
    5bc0:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <xUartMutex+0x1>
    5bc4:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
		if(num>0) {
    5bc8:	c1 14       	cp	r12, r1
    5bca:	d1 04       	cpc	r13, r1
    5bcc:	79 f0       	breq	.+30     	; 0x5bec <vUartSendTask+0x84>
    5bce:	fe 01       	movw	r30, r28
    5bd0:	31 96       	adiw	r30, 0x01	; 1
    5bd2:	9f 01       	movw	r18, r30
    5bd4:	2c 0d       	add	r18, r12
    5bd6:	3d 1d       	adc	r19, r13
			for(i=0;i<num;i++) {
				while ( !( UCSR2A & (1<<UDRE2)) );
    5bd8:	d8 01       	movw	r26, r16
    5bda:	8c 91       	ld	r24, X
    5bdc:	85 ff       	sbrs	r24, 5
    5bde:	fc cf       	rjmp	.-8      	; 0x5bd8 <vUartSendTask+0x70>
				UDR2 = data[i];
    5be0:	81 91       	ld	r24, Z+
    5be2:	d7 01       	movw	r26, r14
    5be4:	8c 93       	st	X, r24
	while(1){
		xSemaphoreTake(xUartMutex, portMAX_DELAY);
		num = buffer_remove_token(&send_buffer, data, 0x00, 100);
		xSemaphoreGive(xUartMutex);
		if(num>0) {
			for(i=0;i<num;i++) {
    5be6:	2e 17       	cp	r18, r30
    5be8:	3f 07       	cpc	r19, r31
    5bea:	b1 f7       	brne	.-20     	; 0x5bd8 <vUartSendTask+0x70>
				while ( !( UCSR2A & (1<<UDRE2)) );
				UDR2 = data[i];
			}
		}
		vTaskDelay(10*portTICK_PERIOD_MS);
    5bec:	8a e0       	ldi	r24, 0x0A	; 10
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	0e 94 53 24 	call	0x48a6	; 0x48a6 <vTaskDelay>
	}
    5bf4:	cb cf       	rjmp	.-106    	; 0x5b8c <vUartSendTask+0x24>

00005bf6 <vUSART_init>:
/************************************************************************/
//Initialize USART driver, note that RXD0/TXD0 (PD0/PD1) is used
// Note that the nRF51 dongle is limited to send 20 characters
// in each package
/************************************************************************/
void vUSART_init(){
    5bf6:	af 92       	push	r10
    5bf8:	bf 92       	push	r11
    5bfa:	cf 92       	push	r12
    5bfc:	df 92       	push	r13
    5bfe:	ef 92       	push	r14
    5c00:	ff 92       	push	r15
    5c02:	0f 93       	push	r16
    /* Set baud rate, has to match nRF51 dongle! */
    UBRR2H = (unsigned char)(BAUD_PRESCALE>>8);
    5c04:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    UBRR2L = (unsigned char)BAUD_PRESCALE;
    5c08:	89 e1       	ldi	r24, 0x19	; 25
    5c0a:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	UBRR0H = (unsigned char)(BAUD_PRESCALE>>8);
    5c0e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)BAUD_PRESCALE;
    5c12:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>

	UCSR0C = (3 << UCSZ00); /* 8-bit data */
    5c16:	86 e0       	ldi	r24, 0x06	; 6
    5c18:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);   /* Enable RX and TX */
    5c1c:	98 e1       	ldi	r25, 0x18	; 24
    5c1e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

    
    /* RX/TX Complete, data register empty */
    UCSR2A = (1<<RXC2) | (1<<TXC2) | (1<<UDRE2);
    5c22:	90 ee       	ldi	r25, 0xE0	; 224
    5c24:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>

    /* Enable reciever, transmitter, and recieve interrupt enable*/
    UCSR2B = (1<<RXEN2) | (1<<TXEN2) | (1<<RXCIE2);
    5c28:	98 e9       	ldi	r25, 0x98	; 152
    5c2a:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>

    /* Set frame format: 8data, 1 stop bit, no parity */
    UCSR2C = (1<<UCSZ20) | (1<<UCSZ21);
    5c2e:	e2 ed       	ldi	r30, 0xD2	; 210
    5c30:	f0 e0       	ldi	r31, 0x00	; 0
    5c32:	80 83       	st	Z, r24
    UCSR2C &= ~((1<<USBS2) & (1<<UPM21) & (1<<UPM20));
    5c34:	80 81       	ld	r24, Z
    5c36:	80 83       	st	Z, r24

	uint8_t *buf = pvPortMalloc(100);
    5c38:	84 e6       	ldi	r24, 0x64	; 100
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	0e 94 27 08 	call	0x104e	; 0x104e <pvPortMalloc>
	buffer_init(&send_buffer, buf, 100);
    5c40:	44 e6       	ldi	r20, 0x64	; 100
    5c42:	50 e0       	ldi	r21, 0x00	; 0
    5c44:	bc 01       	movw	r22, r24
    5c46:	8c ef       	ldi	r24, 0xFC	; 252
    5c48:	9b e1       	ldi	r25, 0x1B	; 27
    5c4a:	0e 94 2c 05 	call	0xa58	; 0xa58 <buffer_init>
	xTaskCreate(vFrameReaderTask, "FrameReader", 300, NULL, 4, NULL);
    5c4e:	a1 2c       	mov	r10, r1
    5c50:	b1 2c       	mov	r11, r1
    5c52:	c1 2c       	mov	r12, r1
    5c54:	d1 2c       	mov	r13, r1
    5c56:	e1 2c       	mov	r14, r1
    5c58:	f1 2c       	mov	r15, r1
    5c5a:	04 e0       	ldi	r16, 0x04	; 4
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	30 e0       	ldi	r19, 0x00	; 0
    5c60:	4c e2       	ldi	r20, 0x2C	; 44
    5c62:	51 e0       	ldi	r21, 0x01	; 1
    5c64:	66 e2       	ldi	r22, 0x26	; 38
    5c66:	77 e0       	ldi	r23, 0x07	; 7
    5c68:	8c e8       	ldi	r24, 0x8C	; 140
    5c6a:	9d e2       	ldi	r25, 0x2D	; 45
    5c6c:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
	xTaskCreate(vUartSendTask, "UartSendTask", 300, NULL, 4, NULL);
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	4c e2       	ldi	r20, 0x2C	; 44
    5c76:	51 e0       	ldi	r21, 0x01	; 1
    5c78:	62 e3       	ldi	r22, 0x32	; 50
    5c7a:	77 e0       	ldi	r23, 0x07	; 7
    5c7c:	84 eb       	ldi	r24, 0xB4	; 180
    5c7e:	9d e2       	ldi	r25, 0x2D	; 45
    5c80:	0e 94 9c 21 	call	0x4338	; 0x4338 <xTaskGenericCreate>
	
	xUartMutex = xSemaphoreCreateMutex();
    5c84:	81 e0       	ldi	r24, 0x01	; 1
    5c86:	0e 94 81 18 	call	0x3102	; 0x3102 <xQueueCreateMutex>
    5c8a:	90 93 58 1b 	sts	0x1B58, r25	; 0x801b58 <xUartMutex+0x1>
    5c8e:	80 93 57 1b 	sts	0x1B57, r24	; 0x801b57 <xUartMutex>
}
    5c92:	0f 91       	pop	r16
    5c94:	ff 90       	pop	r15
    5c96:	ef 90       	pop	r14
    5c98:	df 90       	pop	r13
    5c9a:	cf 90       	pop	r12
    5c9c:	bf 90       	pop	r11
    5c9e:	af 90       	pop	r10
    5ca0:	08 95       	ret

00005ca2 <USART_send_test>:

void USART_send_test( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
    5ca2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ca4:	f0 e0       	ldi	r31, 0x00	; 0
    5ca6:	90 81       	ld	r25, Z
    5ca8:	95 ff       	sbrs	r25, 5
    5caa:	fd cf       	rjmp	.-6      	; 0x5ca6 <USART_send_test+0x4>
	UDR0 = data;
    5cac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5cb0:	08 95       	ret

00005cb2 <USART_putstring_test>:
	
}

void USART_putstring_test(char* StringPtr){
    5cb2:	cf 93       	push	r28
    5cb4:	df 93       	push	r29
    5cb6:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
    5cb8:	88 81       	ld	r24, Y
    5cba:	88 23       	and	r24, r24
    5cbc:	29 f0       	breq	.+10     	; 0x5cc8 <USART_putstring_test+0x16>
    5cbe:	21 96       	adiw	r28, 0x01	; 1
		USART_send_test(*StringPtr);
    5cc0:	f0 df       	rcall	.-32     	; 0x5ca2 <USART_send_test>
	
}

void USART_putstring_test(char* StringPtr){
	
	while(*StringPtr != 0x00){
    5cc2:	89 91       	ld	r24, Y+
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	fc cf       	rjmp	.-8      	; 0x5cc0 <USART_putstring_test+0xe>
		USART_send_test(*StringPtr);
	StringPtr++;}
	
}
    5cc8:	df 91       	pop	r29
    5cca:	cf 91       	pop	r28
    5ccc:	08 95       	ret

00005cce <vUSART_send>:



void vUSART_send(uint8_t *data, uint16_t len) {
    5cce:	0f 93       	push	r16
    5cd0:	1f 93       	push	r17
    5cd2:	cf 93       	push	r28
    5cd4:	df 93       	push	r29
    5cd6:	ec 01       	movw	r28, r24
    5cd8:	8b 01       	movw	r16, r22
	xSemaphoreTake(xUartMutex, portMAX_DELAY);
    5cda:	20 e0       	ldi	r18, 0x00	; 0
    5cdc:	4f ef       	ldi	r20, 0xFF	; 255
    5cde:	5f ef       	ldi	r21, 0xFF	; 255
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	70 e0       	ldi	r23, 0x00	; 0
    5ce4:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <xUartMutex>
    5ce8:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <xUartMutex+0x1>
    5cec:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <xQueueGenericReceive>
	buffer_append(&send_buffer, data, len);
    5cf0:	a8 01       	movw	r20, r16
    5cf2:	be 01       	movw	r22, r28
    5cf4:	8c ef       	ldi	r24, 0xFC	; 252
    5cf6:	9b e1       	ldi	r25, 0x1B	; 27
    5cf8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <buffer_append>
	xSemaphoreGive(xUartMutex);
    5cfc:	60 e0       	ldi	r22, 0x00	; 0
    5cfe:	70 e0       	ldi	r23, 0x00	; 0
    5d00:	80 91 57 1b 	lds	r24, 0x1B57	; 0x801b57 <xUartMutex>
    5d04:	90 91 58 1b 	lds	r25, 0x1B58	; 0x801b58 <xUartMutex+0x1>
    5d08:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <xQueueGive>
}
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	1f 91       	pop	r17
    5d12:	0f 91       	pop	r16
    5d14:	08 95       	ret

00005d16 <vUSART_set_receive_callback>:

void vUSART_set_receive_callback(void(*cb)(uint8_t*, uint16_t)) {
	receive_callback = cb;
    5d16:	90 93 97 1b 	sts	0x1B97, r25	; 0x801b97 <receive_callback+0x1>
    5d1a:	80 93 96 1b 	sts	0x1B96, r24	; 0x801b96 <receive_callback>
    5d1e:	08 95       	ret

00005d20 <__vector_51>:
		vTaskDelay(10*portTICK_PERIOD_MS);
	}
}


ISR(USART2_RX_vect){
    5d20:	1f 92       	push	r1
    5d22:	0f 92       	push	r0
    5d24:	0f b6       	in	r0, 0x3f	; 63
    5d26:	0f 92       	push	r0
    5d28:	11 24       	eor	r1, r1
    5d2a:	0b b6       	in	r0, 0x3b	; 59
    5d2c:	0f 92       	push	r0
    5d2e:	cf 92       	push	r12
    5d30:	df 92       	push	r13
    5d32:	ef 92       	push	r14
    5d34:	ff 92       	push	r15
    5d36:	0f 93       	push	r16
    5d38:	1f 93       	push	r17
    5d3a:	2f 93       	push	r18
    5d3c:	3f 93       	push	r19
    5d3e:	4f 93       	push	r20
    5d40:	5f 93       	push	r21
    5d42:	6f 93       	push	r22
    5d44:	7f 93       	push	r23
    5d46:	8f 93       	push	r24
    5d48:	9f 93       	push	r25
    5d4a:	af 93       	push	r26
    5d4c:	bf 93       	push	r27
    5d4e:	cf 93       	push	r28
    5d50:	df 93       	push	r29
    5d52:	ef 93       	push	r30
    5d54:	ff 93       	push	r31
	static uint8_t input_buffer[100];
	static uint16_t input_index = 0;
	input_buffer[input_index++] = UDR2;
    5d56:	80 91 2f 1b 	lds	r24, 0x1B2F	; 0x801b2f <input_index.2414>
    5d5a:	90 91 30 1b 	lds	r25, 0x1B30	; 0x801b30 <input_index.2414+0x1>
    5d5e:	ec 01       	movw	r28, r24
    5d60:	21 96       	adiw	r28, 0x01	; 1
    5d62:	d0 93 30 1b 	sts	0x1B30, r29	; 0x801b30 <input_index.2414+0x1>
    5d66:	c0 93 2f 1b 	sts	0x1B2F, r28	; 0x801b2f <input_index.2414>
    5d6a:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5d6e:	fc 01       	movw	r30, r24
    5d70:	e5 53       	subi	r30, 0x35	; 53
    5d72:	f5 4e       	sbci	r31, 0xE5	; 229
    5d74:	20 83       	st	Z, r18
	if(input_buffer[input_index-1] == 0x00) {
    5d76:	21 11       	cpse	r18, r1
    5d78:	1d c0       	rjmp	.+58     	; 0x5db4 <__vector_51+0x94>
		if(frame_receiver != NULL) {
    5d7a:	c0 90 31 1b 	lds	r12, 0x1B31	; 0x801b31 <frame_receiver>
    5d7e:	d0 90 32 1b 	lds	r13, 0x1B32	; 0x801b32 <frame_receiver+0x1>
    5d82:	c1 14       	cp	r12, r1
    5d84:	d1 04       	cpc	r13, r1
    5d86:	89 f0       	breq	.+34     	; 0x5daa <__vector_51+0x8a>
			memcpy(receive_buffer, input_buffer, input_index);
    5d88:	ae 01       	movw	r20, r28
    5d8a:	6b ec       	ldi	r22, 0xCB	; 203
    5d8c:	7a e1       	ldi	r23, 0x1A	; 26
    5d8e:	88 e9       	ldi	r24, 0x98	; 152
    5d90:	9b e1       	ldi	r25, 0x1B	; 27
    5d92:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <memcpy>
			xTaskNotifyFromISR(frame_receiver, input_index, eSetValueWithoutOverwrite, NULL);
    5d96:	ae 01       	movw	r20, r28
    5d98:	60 e0       	ldi	r22, 0x00	; 0
    5d9a:	70 e0       	ldi	r23, 0x00	; 0
    5d9c:	e1 2c       	mov	r14, r1
    5d9e:	f1 2c       	mov	r15, r1
    5da0:	00 e0       	ldi	r16, 0x00	; 0
    5da2:	10 e0       	ldi	r17, 0x00	; 0
    5da4:	24 e0       	ldi	r18, 0x04	; 4
    5da6:	c6 01       	movw	r24, r12
    5da8:	15 de       	rcall	.-982    	; 0x59d4 <xTaskGenericNotifyFromISR>
		}
		input_index = 0;
    5daa:	10 92 30 1b 	sts	0x1B30, r1	; 0x801b30 <input_index.2414+0x1>
    5dae:	10 92 2f 1b 	sts	0x1B2F, r1	; 0x801b2f <input_index.2414>
    5db2:	07 c0       	rjmp	.+14     	; 0x5dc2 <__vector_51+0xa2>
	}
	if(input_index > 100) input_index = 0; // Something went wrong, received too many bytes
    5db4:	c5 36       	cpi	r28, 0x65	; 101
    5db6:	d1 05       	cpc	r29, r1
    5db8:	20 f0       	brcs	.+8      	; 0x5dc2 <__vector_51+0xa2>
    5dba:	10 92 30 1b 	sts	0x1B30, r1	; 0x801b30 <input_index.2414+0x1>
    5dbe:	10 92 2f 1b 	sts	0x1B2F, r1	; 0x801b2f <input_index.2414>
    5dc2:	ff 91       	pop	r31
    5dc4:	ef 91       	pop	r30
    5dc6:	df 91       	pop	r29
    5dc8:	cf 91       	pop	r28
    5dca:	bf 91       	pop	r27
    5dcc:	af 91       	pop	r26
    5dce:	9f 91       	pop	r25
    5dd0:	8f 91       	pop	r24
    5dd2:	7f 91       	pop	r23
    5dd4:	6f 91       	pop	r22
    5dd6:	5f 91       	pop	r21
    5dd8:	4f 91       	pop	r20
    5dda:	3f 91       	pop	r19
    5ddc:	2f 91       	pop	r18
    5dde:	1f 91       	pop	r17
    5de0:	0f 91       	pop	r16
    5de2:	ff 90       	pop	r15
    5de4:	ef 90       	pop	r14
    5de6:	df 90       	pop	r13
    5de8:	cf 90       	pop	r12
    5dea:	0f 90       	pop	r0
    5dec:	0b be       	out	0x3b, r0	; 59
    5dee:	0f 90       	pop	r0
    5df0:	0f be       	out	0x3f, r0	; 63
    5df2:	0f 90       	pop	r0
    5df4:	1f 90       	pop	r1
    5df6:	18 95       	reti

00005df8 <__subsf3>:
    5df8:	50 58       	subi	r21, 0x80	; 128

00005dfa <__addsf3>:
    5dfa:	bb 27       	eor	r27, r27
    5dfc:	aa 27       	eor	r26, r26
    5dfe:	0e d0       	rcall	.+28     	; 0x5e1c <__addsf3x>
    5e00:	27 c2       	rjmp	.+1102   	; 0x6250 <__fp_round>
    5e02:	f0 d1       	rcall	.+992    	; 0x61e4 <__fp_pscA>
    5e04:	30 f0       	brcs	.+12     	; 0x5e12 <__addsf3+0x18>
    5e06:	f5 d1       	rcall	.+1002   	; 0x61f2 <__fp_pscB>
    5e08:	20 f0       	brcs	.+8      	; 0x5e12 <__addsf3+0x18>
    5e0a:	31 f4       	brne	.+12     	; 0x5e18 <__addsf3+0x1e>
    5e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    5e0e:	11 f4       	brne	.+4      	; 0x5e14 <__addsf3+0x1a>
    5e10:	1e f4       	brtc	.+6      	; 0x5e18 <__addsf3+0x1e>
    5e12:	c0 c1       	rjmp	.+896    	; 0x6194 <__fp_nan>
    5e14:	0e f4       	brtc	.+2      	; 0x5e18 <__addsf3+0x1e>
    5e16:	e0 95       	com	r30
    5e18:	e7 fb       	bst	r30, 7
    5e1a:	b6 c1       	rjmp	.+876    	; 0x6188 <__fp_inf>

00005e1c <__addsf3x>:
    5e1c:	e9 2f       	mov	r30, r25
    5e1e:	3a d2       	rcall	.+1140   	; 0x6294 <__fp_split3>
    5e20:	80 f3       	brcs	.-32     	; 0x5e02 <__addsf3+0x8>
    5e22:	ba 17       	cp	r27, r26
    5e24:	62 07       	cpc	r22, r18
    5e26:	73 07       	cpc	r23, r19
    5e28:	84 07       	cpc	r24, r20
    5e2a:	95 07       	cpc	r25, r21
    5e2c:	18 f0       	brcs	.+6      	; 0x5e34 <__addsf3x+0x18>
    5e2e:	71 f4       	brne	.+28     	; 0x5e4c <__addsf3x+0x30>
    5e30:	9e f5       	brtc	.+102    	; 0x5e98 <__addsf3x+0x7c>
    5e32:	52 c2       	rjmp	.+1188   	; 0x62d8 <__fp_zero>
    5e34:	0e f4       	brtc	.+2      	; 0x5e38 <__addsf3x+0x1c>
    5e36:	e0 95       	com	r30
    5e38:	0b 2e       	mov	r0, r27
    5e3a:	ba 2f       	mov	r27, r26
    5e3c:	a0 2d       	mov	r26, r0
    5e3e:	0b 01       	movw	r0, r22
    5e40:	b9 01       	movw	r22, r18
    5e42:	90 01       	movw	r18, r0
    5e44:	0c 01       	movw	r0, r24
    5e46:	ca 01       	movw	r24, r20
    5e48:	a0 01       	movw	r20, r0
    5e4a:	11 24       	eor	r1, r1
    5e4c:	ff 27       	eor	r31, r31
    5e4e:	59 1b       	sub	r21, r25
    5e50:	99 f0       	breq	.+38     	; 0x5e78 <__addsf3x+0x5c>
    5e52:	59 3f       	cpi	r21, 0xF9	; 249
    5e54:	50 f4       	brcc	.+20     	; 0x5e6a <__addsf3x+0x4e>
    5e56:	50 3e       	cpi	r21, 0xE0	; 224
    5e58:	68 f1       	brcs	.+90     	; 0x5eb4 <__addsf3x+0x98>
    5e5a:	1a 16       	cp	r1, r26
    5e5c:	f0 40       	sbci	r31, 0x00	; 0
    5e5e:	a2 2f       	mov	r26, r18
    5e60:	23 2f       	mov	r18, r19
    5e62:	34 2f       	mov	r19, r20
    5e64:	44 27       	eor	r20, r20
    5e66:	58 5f       	subi	r21, 0xF8	; 248
    5e68:	f3 cf       	rjmp	.-26     	; 0x5e50 <__addsf3x+0x34>
    5e6a:	46 95       	lsr	r20
    5e6c:	37 95       	ror	r19
    5e6e:	27 95       	ror	r18
    5e70:	a7 95       	ror	r26
    5e72:	f0 40       	sbci	r31, 0x00	; 0
    5e74:	53 95       	inc	r21
    5e76:	c9 f7       	brne	.-14     	; 0x5e6a <__addsf3x+0x4e>
    5e78:	7e f4       	brtc	.+30     	; 0x5e98 <__addsf3x+0x7c>
    5e7a:	1f 16       	cp	r1, r31
    5e7c:	ba 0b       	sbc	r27, r26
    5e7e:	62 0b       	sbc	r22, r18
    5e80:	73 0b       	sbc	r23, r19
    5e82:	84 0b       	sbc	r24, r20
    5e84:	ba f0       	brmi	.+46     	; 0x5eb4 <__addsf3x+0x98>
    5e86:	91 50       	subi	r25, 0x01	; 1
    5e88:	a1 f0       	breq	.+40     	; 0x5eb2 <__addsf3x+0x96>
    5e8a:	ff 0f       	add	r31, r31
    5e8c:	bb 1f       	adc	r27, r27
    5e8e:	66 1f       	adc	r22, r22
    5e90:	77 1f       	adc	r23, r23
    5e92:	88 1f       	adc	r24, r24
    5e94:	c2 f7       	brpl	.-16     	; 0x5e86 <__addsf3x+0x6a>
    5e96:	0e c0       	rjmp	.+28     	; 0x5eb4 <__addsf3x+0x98>
    5e98:	ba 0f       	add	r27, r26
    5e9a:	62 1f       	adc	r22, r18
    5e9c:	73 1f       	adc	r23, r19
    5e9e:	84 1f       	adc	r24, r20
    5ea0:	48 f4       	brcc	.+18     	; 0x5eb4 <__addsf3x+0x98>
    5ea2:	87 95       	ror	r24
    5ea4:	77 95       	ror	r23
    5ea6:	67 95       	ror	r22
    5ea8:	b7 95       	ror	r27
    5eaa:	f7 95       	ror	r31
    5eac:	9e 3f       	cpi	r25, 0xFE	; 254
    5eae:	08 f0       	brcs	.+2      	; 0x5eb2 <__addsf3x+0x96>
    5eb0:	b3 cf       	rjmp	.-154    	; 0x5e18 <__addsf3+0x1e>
    5eb2:	93 95       	inc	r25
    5eb4:	88 0f       	add	r24, r24
    5eb6:	08 f0       	brcs	.+2      	; 0x5eba <__addsf3x+0x9e>
    5eb8:	99 27       	eor	r25, r25
    5eba:	ee 0f       	add	r30, r30
    5ebc:	97 95       	ror	r25
    5ebe:	87 95       	ror	r24
    5ec0:	08 95       	ret
    5ec2:	90 d1       	rcall	.+800    	; 0x61e4 <__fp_pscA>
    5ec4:	58 f0       	brcs	.+22     	; 0x5edc <__addsf3x+0xc0>
    5ec6:	80 e8       	ldi	r24, 0x80	; 128
    5ec8:	91 e0       	ldi	r25, 0x01	; 1
    5eca:	09 f4       	brne	.+2      	; 0x5ece <__addsf3x+0xb2>
    5ecc:	9e ef       	ldi	r25, 0xFE	; 254
    5ece:	91 d1       	rcall	.+802    	; 0x61f2 <__fp_pscB>
    5ed0:	28 f0       	brcs	.+10     	; 0x5edc <__addsf3x+0xc0>
    5ed2:	40 e8       	ldi	r20, 0x80	; 128
    5ed4:	51 e0       	ldi	r21, 0x01	; 1
    5ed6:	59 f4       	brne	.+22     	; 0x5eee <atan2+0xe>
    5ed8:	5e ef       	ldi	r21, 0xFE	; 254
    5eda:	09 c0       	rjmp	.+18     	; 0x5eee <atan2+0xe>
    5edc:	5b c1       	rjmp	.+694    	; 0x6194 <__fp_nan>
    5ede:	fc c1       	rjmp	.+1016   	; 0x62d8 <__fp_zero>

00005ee0 <atan2>:
    5ee0:	e9 2f       	mov	r30, r25
    5ee2:	e0 78       	andi	r30, 0x80	; 128
    5ee4:	d7 d1       	rcall	.+942    	; 0x6294 <__fp_split3>
    5ee6:	68 f3       	brcs	.-38     	; 0x5ec2 <__addsf3x+0xa6>
    5ee8:	09 2e       	mov	r0, r25
    5eea:	05 2a       	or	r0, r21
    5eec:	c1 f3       	breq	.-16     	; 0x5ede <__addsf3x+0xc2>
    5eee:	26 17       	cp	r18, r22
    5ef0:	37 07       	cpc	r19, r23
    5ef2:	48 07       	cpc	r20, r24
    5ef4:	59 07       	cpc	r21, r25
    5ef6:	38 f0       	brcs	.+14     	; 0x5f06 <atan2+0x26>
    5ef8:	0e 2e       	mov	r0, r30
    5efa:	07 f8       	bld	r0, 7
    5efc:	e0 25       	eor	r30, r0
    5efe:	69 f0       	breq	.+26     	; 0x5f1a <atan2+0x3a>
    5f00:	e0 25       	eor	r30, r0
    5f02:	e0 64       	ori	r30, 0x40	; 64
    5f04:	0a c0       	rjmp	.+20     	; 0x5f1a <atan2+0x3a>
    5f06:	ef 63       	ori	r30, 0x3F	; 63
    5f08:	07 f8       	bld	r0, 7
    5f0a:	00 94       	com	r0
    5f0c:	07 fa       	bst	r0, 7
    5f0e:	db 01       	movw	r26, r22
    5f10:	b9 01       	movw	r22, r18
    5f12:	9d 01       	movw	r18, r26
    5f14:	dc 01       	movw	r26, r24
    5f16:	ca 01       	movw	r24, r20
    5f18:	ad 01       	movw	r20, r26
    5f1a:	ef 93       	push	r30
    5f1c:	4a d0       	rcall	.+148    	; 0x5fb2 <__divsf3_pse>
    5f1e:	98 d1       	rcall	.+816    	; 0x6250 <__fp_round>
    5f20:	0a d0       	rcall	.+20     	; 0x5f36 <atan>
    5f22:	5f 91       	pop	r21
    5f24:	55 23       	and	r21, r21
    5f26:	31 f0       	breq	.+12     	; 0x5f34 <atan2+0x54>
    5f28:	2b ed       	ldi	r18, 0xDB	; 219
    5f2a:	3f e0       	ldi	r19, 0x0F	; 15
    5f2c:	49 e4       	ldi	r20, 0x49	; 73
    5f2e:	50 fd       	sbrc	r21, 0
    5f30:	49 ec       	ldi	r20, 0xC9	; 201
    5f32:	63 cf       	rjmp	.-314    	; 0x5dfa <__addsf3>
    5f34:	08 95       	ret

00005f36 <atan>:
    5f36:	df 93       	push	r29
    5f38:	dd 27       	eor	r29, r29
    5f3a:	b9 2f       	mov	r27, r25
    5f3c:	bf 77       	andi	r27, 0x7F	; 127
    5f3e:	40 e8       	ldi	r20, 0x80	; 128
    5f40:	5f e3       	ldi	r21, 0x3F	; 63
    5f42:	16 16       	cp	r1, r22
    5f44:	17 06       	cpc	r1, r23
    5f46:	48 07       	cpc	r20, r24
    5f48:	5b 07       	cpc	r21, r27
    5f4a:	10 f4       	brcc	.+4      	; 0x5f50 <atan+0x1a>
    5f4c:	d9 2f       	mov	r29, r25
    5f4e:	cf d1       	rcall	.+926    	; 0x62ee <inverse>
    5f50:	9f 93       	push	r25
    5f52:	8f 93       	push	r24
    5f54:	7f 93       	push	r23
    5f56:	6f 93       	push	r22
    5f58:	7c d2       	rcall	.+1272   	; 0x6452 <square>
    5f5a:	e4 ee       	ldi	r30, 0xE4	; 228
    5f5c:	f0 e0       	ldi	r31, 0x00	; 0
    5f5e:	1d d1       	rcall	.+570    	; 0x619a <__fp_powser>
    5f60:	77 d1       	rcall	.+750    	; 0x6250 <__fp_round>
    5f62:	2f 91       	pop	r18
    5f64:	3f 91       	pop	r19
    5f66:	4f 91       	pop	r20
    5f68:	5f 91       	pop	r21
    5f6a:	d4 d1       	rcall	.+936    	; 0x6314 <__mulsf3x>
    5f6c:	dd 23       	and	r29, r29
    5f6e:	49 f0       	breq	.+18     	; 0x5f82 <atan+0x4c>
    5f70:	90 58       	subi	r25, 0x80	; 128
    5f72:	a2 ea       	ldi	r26, 0xA2	; 162
    5f74:	2a ed       	ldi	r18, 0xDA	; 218
    5f76:	3f e0       	ldi	r19, 0x0F	; 15
    5f78:	49 ec       	ldi	r20, 0xC9	; 201
    5f7a:	5f e3       	ldi	r21, 0x3F	; 63
    5f7c:	d0 78       	andi	r29, 0x80	; 128
    5f7e:	5d 27       	eor	r21, r29
    5f80:	4d df       	rcall	.-358    	; 0x5e1c <__addsf3x>
    5f82:	df 91       	pop	r29
    5f84:	65 c1       	rjmp	.+714    	; 0x6250 <__fp_round>

00005f86 <__cmpsf2>:
    5f86:	dc d0       	rcall	.+440    	; 0x6140 <__fp_cmp>
    5f88:	08 f4       	brcc	.+2      	; 0x5f8c <__cmpsf2+0x6>
    5f8a:	81 e0       	ldi	r24, 0x01	; 1
    5f8c:	08 95       	ret

00005f8e <cos>:
    5f8e:	39 d1       	rcall	.+626    	; 0x6202 <__fp_rempio2>
    5f90:	e3 95       	inc	r30
    5f92:	6f c1       	rjmp	.+734    	; 0x6272 <__fp_sinus>

00005f94 <__divsf3>:
    5f94:	0c d0       	rcall	.+24     	; 0x5fae <__divsf3x>
    5f96:	5c c1       	rjmp	.+696    	; 0x6250 <__fp_round>
    5f98:	2c d1       	rcall	.+600    	; 0x61f2 <__fp_pscB>
    5f9a:	40 f0       	brcs	.+16     	; 0x5fac <__divsf3+0x18>
    5f9c:	23 d1       	rcall	.+582    	; 0x61e4 <__fp_pscA>
    5f9e:	30 f0       	brcs	.+12     	; 0x5fac <__divsf3+0x18>
    5fa0:	21 f4       	brne	.+8      	; 0x5faa <__divsf3+0x16>
    5fa2:	5f 3f       	cpi	r21, 0xFF	; 255
    5fa4:	19 f0       	breq	.+6      	; 0x5fac <__divsf3+0x18>
    5fa6:	f0 c0       	rjmp	.+480    	; 0x6188 <__fp_inf>
    5fa8:	51 11       	cpse	r21, r1
    5faa:	97 c1       	rjmp	.+814    	; 0x62da <__fp_szero>
    5fac:	f3 c0       	rjmp	.+486    	; 0x6194 <__fp_nan>

00005fae <__divsf3x>:
    5fae:	72 d1       	rcall	.+740    	; 0x6294 <__fp_split3>
    5fb0:	98 f3       	brcs	.-26     	; 0x5f98 <__divsf3+0x4>

00005fb2 <__divsf3_pse>:
    5fb2:	99 23       	and	r25, r25
    5fb4:	c9 f3       	breq	.-14     	; 0x5fa8 <__divsf3+0x14>
    5fb6:	55 23       	and	r21, r21
    5fb8:	b1 f3       	breq	.-20     	; 0x5fa6 <__divsf3+0x12>
    5fba:	95 1b       	sub	r25, r21
    5fbc:	55 0b       	sbc	r21, r21
    5fbe:	bb 27       	eor	r27, r27
    5fc0:	aa 27       	eor	r26, r26
    5fc2:	62 17       	cp	r22, r18
    5fc4:	73 07       	cpc	r23, r19
    5fc6:	84 07       	cpc	r24, r20
    5fc8:	38 f0       	brcs	.+14     	; 0x5fd8 <__divsf3_pse+0x26>
    5fca:	9f 5f       	subi	r25, 0xFF	; 255
    5fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    5fce:	22 0f       	add	r18, r18
    5fd0:	33 1f       	adc	r19, r19
    5fd2:	44 1f       	adc	r20, r20
    5fd4:	aa 1f       	adc	r26, r26
    5fd6:	a9 f3       	breq	.-22     	; 0x5fc2 <__divsf3_pse+0x10>
    5fd8:	33 d0       	rcall	.+102    	; 0x6040 <__divsf3_pse+0x8e>
    5fda:	0e 2e       	mov	r0, r30
    5fdc:	3a f0       	brmi	.+14     	; 0x5fec <__divsf3_pse+0x3a>
    5fde:	e0 e8       	ldi	r30, 0x80	; 128
    5fe0:	30 d0       	rcall	.+96     	; 0x6042 <__divsf3_pse+0x90>
    5fe2:	91 50       	subi	r25, 0x01	; 1
    5fe4:	50 40       	sbci	r21, 0x00	; 0
    5fe6:	e6 95       	lsr	r30
    5fe8:	00 1c       	adc	r0, r0
    5fea:	ca f7       	brpl	.-14     	; 0x5fde <__divsf3_pse+0x2c>
    5fec:	29 d0       	rcall	.+82     	; 0x6040 <__divsf3_pse+0x8e>
    5fee:	fe 2f       	mov	r31, r30
    5ff0:	27 d0       	rcall	.+78     	; 0x6040 <__divsf3_pse+0x8e>
    5ff2:	66 0f       	add	r22, r22
    5ff4:	77 1f       	adc	r23, r23
    5ff6:	88 1f       	adc	r24, r24
    5ff8:	bb 1f       	adc	r27, r27
    5ffa:	26 17       	cp	r18, r22
    5ffc:	37 07       	cpc	r19, r23
    5ffe:	48 07       	cpc	r20, r24
    6000:	ab 07       	cpc	r26, r27
    6002:	b0 e8       	ldi	r27, 0x80	; 128
    6004:	09 f0       	breq	.+2      	; 0x6008 <__divsf3_pse+0x56>
    6006:	bb 0b       	sbc	r27, r27
    6008:	80 2d       	mov	r24, r0
    600a:	bf 01       	movw	r22, r30
    600c:	ff 27       	eor	r31, r31
    600e:	93 58       	subi	r25, 0x83	; 131
    6010:	5f 4f       	sbci	r21, 0xFF	; 255
    6012:	2a f0       	brmi	.+10     	; 0x601e <__divsf3_pse+0x6c>
    6014:	9e 3f       	cpi	r25, 0xFE	; 254
    6016:	51 05       	cpc	r21, r1
    6018:	68 f0       	brcs	.+26     	; 0x6034 <__divsf3_pse+0x82>
    601a:	b6 c0       	rjmp	.+364    	; 0x6188 <__fp_inf>
    601c:	5e c1       	rjmp	.+700    	; 0x62da <__fp_szero>
    601e:	5f 3f       	cpi	r21, 0xFF	; 255
    6020:	ec f3       	brlt	.-6      	; 0x601c <__divsf3_pse+0x6a>
    6022:	98 3e       	cpi	r25, 0xE8	; 232
    6024:	dc f3       	brlt	.-10     	; 0x601c <__divsf3_pse+0x6a>
    6026:	86 95       	lsr	r24
    6028:	77 95       	ror	r23
    602a:	67 95       	ror	r22
    602c:	b7 95       	ror	r27
    602e:	f7 95       	ror	r31
    6030:	9f 5f       	subi	r25, 0xFF	; 255
    6032:	c9 f7       	brne	.-14     	; 0x6026 <__divsf3_pse+0x74>
    6034:	88 0f       	add	r24, r24
    6036:	91 1d       	adc	r25, r1
    6038:	96 95       	lsr	r25
    603a:	87 95       	ror	r24
    603c:	97 f9       	bld	r25, 7
    603e:	08 95       	ret
    6040:	e1 e0       	ldi	r30, 0x01	; 1
    6042:	66 0f       	add	r22, r22
    6044:	77 1f       	adc	r23, r23
    6046:	88 1f       	adc	r24, r24
    6048:	bb 1f       	adc	r27, r27
    604a:	62 17       	cp	r22, r18
    604c:	73 07       	cpc	r23, r19
    604e:	84 07       	cpc	r24, r20
    6050:	ba 07       	cpc	r27, r26
    6052:	20 f0       	brcs	.+8      	; 0x605c <__divsf3_pse+0xaa>
    6054:	62 1b       	sub	r22, r18
    6056:	73 0b       	sbc	r23, r19
    6058:	84 0b       	sbc	r24, r20
    605a:	ba 0b       	sbc	r27, r26
    605c:	ee 1f       	adc	r30, r30
    605e:	88 f7       	brcc	.-30     	; 0x6042 <__divsf3_pse+0x90>
    6060:	e0 95       	com	r30
    6062:	08 95       	ret

00006064 <__fixsfsi>:
    6064:	04 d0       	rcall	.+8      	; 0x606e <__fixunssfsi>
    6066:	68 94       	set
    6068:	b1 11       	cpse	r27, r1
    606a:	37 c1       	rjmp	.+622    	; 0x62da <__fp_szero>
    606c:	08 95       	ret

0000606e <__fixunssfsi>:
    606e:	1a d1       	rcall	.+564    	; 0x62a4 <__fp_splitA>
    6070:	88 f0       	brcs	.+34     	; 0x6094 <__fixunssfsi+0x26>
    6072:	9f 57       	subi	r25, 0x7F	; 127
    6074:	90 f0       	brcs	.+36     	; 0x609a <__fixunssfsi+0x2c>
    6076:	b9 2f       	mov	r27, r25
    6078:	99 27       	eor	r25, r25
    607a:	b7 51       	subi	r27, 0x17	; 23
    607c:	a0 f0       	brcs	.+40     	; 0x60a6 <__fixunssfsi+0x38>
    607e:	d1 f0       	breq	.+52     	; 0x60b4 <__fixunssfsi+0x46>
    6080:	66 0f       	add	r22, r22
    6082:	77 1f       	adc	r23, r23
    6084:	88 1f       	adc	r24, r24
    6086:	99 1f       	adc	r25, r25
    6088:	1a f0       	brmi	.+6      	; 0x6090 <__fixunssfsi+0x22>
    608a:	ba 95       	dec	r27
    608c:	c9 f7       	brne	.-14     	; 0x6080 <__fixunssfsi+0x12>
    608e:	12 c0       	rjmp	.+36     	; 0x60b4 <__fixunssfsi+0x46>
    6090:	b1 30       	cpi	r27, 0x01	; 1
    6092:	81 f0       	breq	.+32     	; 0x60b4 <__fixunssfsi+0x46>
    6094:	21 d1       	rcall	.+578    	; 0x62d8 <__fp_zero>
    6096:	b1 e0       	ldi	r27, 0x01	; 1
    6098:	08 95       	ret
    609a:	1e c1       	rjmp	.+572    	; 0x62d8 <__fp_zero>
    609c:	67 2f       	mov	r22, r23
    609e:	78 2f       	mov	r23, r24
    60a0:	88 27       	eor	r24, r24
    60a2:	b8 5f       	subi	r27, 0xF8	; 248
    60a4:	39 f0       	breq	.+14     	; 0x60b4 <__fixunssfsi+0x46>
    60a6:	b9 3f       	cpi	r27, 0xF9	; 249
    60a8:	cc f3       	brlt	.-14     	; 0x609c <__fixunssfsi+0x2e>
    60aa:	86 95       	lsr	r24
    60ac:	77 95       	ror	r23
    60ae:	67 95       	ror	r22
    60b0:	b3 95       	inc	r27
    60b2:	d9 f7       	brne	.-10     	; 0x60aa <__fixunssfsi+0x3c>
    60b4:	3e f4       	brtc	.+14     	; 0x60c4 <__fixunssfsi+0x56>
    60b6:	90 95       	com	r25
    60b8:	80 95       	com	r24
    60ba:	70 95       	com	r23
    60bc:	61 95       	neg	r22
    60be:	7f 4f       	sbci	r23, 0xFF	; 255
    60c0:	8f 4f       	sbci	r24, 0xFF	; 255
    60c2:	9f 4f       	sbci	r25, 0xFF	; 255
    60c4:	08 95       	ret

000060c6 <__floatunsisf>:
    60c6:	e8 94       	clt
    60c8:	09 c0       	rjmp	.+18     	; 0x60dc <__floatsisf+0x12>

000060ca <__floatsisf>:
    60ca:	97 fb       	bst	r25, 7
    60cc:	3e f4       	brtc	.+14     	; 0x60dc <__floatsisf+0x12>
    60ce:	90 95       	com	r25
    60d0:	80 95       	com	r24
    60d2:	70 95       	com	r23
    60d4:	61 95       	neg	r22
    60d6:	7f 4f       	sbci	r23, 0xFF	; 255
    60d8:	8f 4f       	sbci	r24, 0xFF	; 255
    60da:	9f 4f       	sbci	r25, 0xFF	; 255
    60dc:	99 23       	and	r25, r25
    60de:	a9 f0       	breq	.+42     	; 0x610a <__floatsisf+0x40>
    60e0:	f9 2f       	mov	r31, r25
    60e2:	96 e9       	ldi	r25, 0x96	; 150
    60e4:	bb 27       	eor	r27, r27
    60e6:	93 95       	inc	r25
    60e8:	f6 95       	lsr	r31
    60ea:	87 95       	ror	r24
    60ec:	77 95       	ror	r23
    60ee:	67 95       	ror	r22
    60f0:	b7 95       	ror	r27
    60f2:	f1 11       	cpse	r31, r1
    60f4:	f8 cf       	rjmp	.-16     	; 0x60e6 <__floatsisf+0x1c>
    60f6:	fa f4       	brpl	.+62     	; 0x6136 <__floatsisf+0x6c>
    60f8:	bb 0f       	add	r27, r27
    60fa:	11 f4       	brne	.+4      	; 0x6100 <__floatsisf+0x36>
    60fc:	60 ff       	sbrs	r22, 0
    60fe:	1b c0       	rjmp	.+54     	; 0x6136 <__floatsisf+0x6c>
    6100:	6f 5f       	subi	r22, 0xFF	; 255
    6102:	7f 4f       	sbci	r23, 0xFF	; 255
    6104:	8f 4f       	sbci	r24, 0xFF	; 255
    6106:	9f 4f       	sbci	r25, 0xFF	; 255
    6108:	16 c0       	rjmp	.+44     	; 0x6136 <__floatsisf+0x6c>
    610a:	88 23       	and	r24, r24
    610c:	11 f0       	breq	.+4      	; 0x6112 <__floatsisf+0x48>
    610e:	96 e9       	ldi	r25, 0x96	; 150
    6110:	11 c0       	rjmp	.+34     	; 0x6134 <__floatsisf+0x6a>
    6112:	77 23       	and	r23, r23
    6114:	21 f0       	breq	.+8      	; 0x611e <__floatsisf+0x54>
    6116:	9e e8       	ldi	r25, 0x8E	; 142
    6118:	87 2f       	mov	r24, r23
    611a:	76 2f       	mov	r23, r22
    611c:	05 c0       	rjmp	.+10     	; 0x6128 <__floatsisf+0x5e>
    611e:	66 23       	and	r22, r22
    6120:	71 f0       	breq	.+28     	; 0x613e <__floatsisf+0x74>
    6122:	96 e8       	ldi	r25, 0x86	; 134
    6124:	86 2f       	mov	r24, r22
    6126:	70 e0       	ldi	r23, 0x00	; 0
    6128:	60 e0       	ldi	r22, 0x00	; 0
    612a:	2a f0       	brmi	.+10     	; 0x6136 <__floatsisf+0x6c>
    612c:	9a 95       	dec	r25
    612e:	66 0f       	add	r22, r22
    6130:	77 1f       	adc	r23, r23
    6132:	88 1f       	adc	r24, r24
    6134:	da f7       	brpl	.-10     	; 0x612c <__floatsisf+0x62>
    6136:	88 0f       	add	r24, r24
    6138:	96 95       	lsr	r25
    613a:	87 95       	ror	r24
    613c:	97 f9       	bld	r25, 7
    613e:	08 95       	ret

00006140 <__fp_cmp>:
    6140:	99 0f       	add	r25, r25
    6142:	00 08       	sbc	r0, r0
    6144:	55 0f       	add	r21, r21
    6146:	aa 0b       	sbc	r26, r26
    6148:	e0 e8       	ldi	r30, 0x80	; 128
    614a:	fe ef       	ldi	r31, 0xFE	; 254
    614c:	16 16       	cp	r1, r22
    614e:	17 06       	cpc	r1, r23
    6150:	e8 07       	cpc	r30, r24
    6152:	f9 07       	cpc	r31, r25
    6154:	c0 f0       	brcs	.+48     	; 0x6186 <__fp_cmp+0x46>
    6156:	12 16       	cp	r1, r18
    6158:	13 06       	cpc	r1, r19
    615a:	e4 07       	cpc	r30, r20
    615c:	f5 07       	cpc	r31, r21
    615e:	98 f0       	brcs	.+38     	; 0x6186 <__fp_cmp+0x46>
    6160:	62 1b       	sub	r22, r18
    6162:	73 0b       	sbc	r23, r19
    6164:	84 0b       	sbc	r24, r20
    6166:	95 0b       	sbc	r25, r21
    6168:	39 f4       	brne	.+14     	; 0x6178 <__fp_cmp+0x38>
    616a:	0a 26       	eor	r0, r26
    616c:	61 f0       	breq	.+24     	; 0x6186 <__fp_cmp+0x46>
    616e:	23 2b       	or	r18, r19
    6170:	24 2b       	or	r18, r20
    6172:	25 2b       	or	r18, r21
    6174:	21 f4       	brne	.+8      	; 0x617e <__fp_cmp+0x3e>
    6176:	08 95       	ret
    6178:	0a 26       	eor	r0, r26
    617a:	09 f4       	brne	.+2      	; 0x617e <__fp_cmp+0x3e>
    617c:	a1 40       	sbci	r26, 0x01	; 1
    617e:	a6 95       	lsr	r26
    6180:	8f ef       	ldi	r24, 0xFF	; 255
    6182:	81 1d       	adc	r24, r1
    6184:	81 1d       	adc	r24, r1
    6186:	08 95       	ret

00006188 <__fp_inf>:
    6188:	97 f9       	bld	r25, 7
    618a:	9f 67       	ori	r25, 0x7F	; 127
    618c:	80 e8       	ldi	r24, 0x80	; 128
    618e:	70 e0       	ldi	r23, 0x00	; 0
    6190:	60 e0       	ldi	r22, 0x00	; 0
    6192:	08 95       	ret

00006194 <__fp_nan>:
    6194:	9f ef       	ldi	r25, 0xFF	; 255
    6196:	80 ec       	ldi	r24, 0xC0	; 192
    6198:	08 95       	ret

0000619a <__fp_powser>:
    619a:	df 93       	push	r29
    619c:	cf 93       	push	r28
    619e:	1f 93       	push	r17
    61a0:	0f 93       	push	r16
    61a2:	ff 92       	push	r15
    61a4:	ef 92       	push	r14
    61a6:	df 92       	push	r13
    61a8:	7b 01       	movw	r14, r22
    61aa:	8c 01       	movw	r16, r24
    61ac:	68 94       	set
    61ae:	05 c0       	rjmp	.+10     	; 0x61ba <__fp_powser+0x20>
    61b0:	da 2e       	mov	r13, r26
    61b2:	ef 01       	movw	r28, r30
    61b4:	af d0       	rcall	.+350    	; 0x6314 <__mulsf3x>
    61b6:	fe 01       	movw	r30, r28
    61b8:	e8 94       	clt
    61ba:	a5 91       	lpm	r26, Z+
    61bc:	25 91       	lpm	r18, Z+
    61be:	35 91       	lpm	r19, Z+
    61c0:	45 91       	lpm	r20, Z+
    61c2:	55 91       	lpm	r21, Z+
    61c4:	ae f3       	brts	.-22     	; 0x61b0 <__fp_powser+0x16>
    61c6:	ef 01       	movw	r28, r30
    61c8:	29 de       	rcall	.-942    	; 0x5e1c <__addsf3x>
    61ca:	fe 01       	movw	r30, r28
    61cc:	97 01       	movw	r18, r14
    61ce:	a8 01       	movw	r20, r16
    61d0:	da 94       	dec	r13
    61d2:	79 f7       	brne	.-34     	; 0x61b2 <__fp_powser+0x18>
    61d4:	df 90       	pop	r13
    61d6:	ef 90       	pop	r14
    61d8:	ff 90       	pop	r15
    61da:	0f 91       	pop	r16
    61dc:	1f 91       	pop	r17
    61de:	cf 91       	pop	r28
    61e0:	df 91       	pop	r29
    61e2:	08 95       	ret

000061e4 <__fp_pscA>:
    61e4:	00 24       	eor	r0, r0
    61e6:	0a 94       	dec	r0
    61e8:	16 16       	cp	r1, r22
    61ea:	17 06       	cpc	r1, r23
    61ec:	18 06       	cpc	r1, r24
    61ee:	09 06       	cpc	r0, r25
    61f0:	08 95       	ret

000061f2 <__fp_pscB>:
    61f2:	00 24       	eor	r0, r0
    61f4:	0a 94       	dec	r0
    61f6:	12 16       	cp	r1, r18
    61f8:	13 06       	cpc	r1, r19
    61fa:	14 06       	cpc	r1, r20
    61fc:	05 06       	cpc	r0, r21
    61fe:	08 95       	ret
    6200:	c9 cf       	rjmp	.-110    	; 0x6194 <__fp_nan>

00006202 <__fp_rempio2>:
    6202:	50 d0       	rcall	.+160    	; 0x62a4 <__fp_splitA>
    6204:	e8 f3       	brcs	.-6      	; 0x6200 <__fp_pscB+0xe>
    6206:	e8 94       	clt
    6208:	e0 e0       	ldi	r30, 0x00	; 0
    620a:	bb 27       	eor	r27, r27
    620c:	9f 57       	subi	r25, 0x7F	; 127
    620e:	f0 f0       	brcs	.+60     	; 0x624c <__fp_rempio2+0x4a>
    6210:	2a ed       	ldi	r18, 0xDA	; 218
    6212:	3f e0       	ldi	r19, 0x0F	; 15
    6214:	49 ec       	ldi	r20, 0xC9	; 201
    6216:	06 c0       	rjmp	.+12     	; 0x6224 <__fp_rempio2+0x22>
    6218:	ee 0f       	add	r30, r30
    621a:	bb 0f       	add	r27, r27
    621c:	66 1f       	adc	r22, r22
    621e:	77 1f       	adc	r23, r23
    6220:	88 1f       	adc	r24, r24
    6222:	28 f0       	brcs	.+10     	; 0x622e <__fp_rempio2+0x2c>
    6224:	b2 3a       	cpi	r27, 0xA2	; 162
    6226:	62 07       	cpc	r22, r18
    6228:	73 07       	cpc	r23, r19
    622a:	84 07       	cpc	r24, r20
    622c:	28 f0       	brcs	.+10     	; 0x6238 <__fp_rempio2+0x36>
    622e:	b2 5a       	subi	r27, 0xA2	; 162
    6230:	62 0b       	sbc	r22, r18
    6232:	73 0b       	sbc	r23, r19
    6234:	84 0b       	sbc	r24, r20
    6236:	e3 95       	inc	r30
    6238:	9a 95       	dec	r25
    623a:	72 f7       	brpl	.-36     	; 0x6218 <__fp_rempio2+0x16>
    623c:	80 38       	cpi	r24, 0x80	; 128
    623e:	30 f4       	brcc	.+12     	; 0x624c <__fp_rempio2+0x4a>
    6240:	9a 95       	dec	r25
    6242:	bb 0f       	add	r27, r27
    6244:	66 1f       	adc	r22, r22
    6246:	77 1f       	adc	r23, r23
    6248:	88 1f       	adc	r24, r24
    624a:	d2 f7       	brpl	.-12     	; 0x6240 <__fp_rempio2+0x3e>
    624c:	90 48       	sbci	r25, 0x80	; 128
    624e:	06 c1       	rjmp	.+524    	; 0x645c <__fp_mpack_finite>

00006250 <__fp_round>:
    6250:	09 2e       	mov	r0, r25
    6252:	03 94       	inc	r0
    6254:	00 0c       	add	r0, r0
    6256:	11 f4       	brne	.+4      	; 0x625c <__fp_round+0xc>
    6258:	88 23       	and	r24, r24
    625a:	52 f0       	brmi	.+20     	; 0x6270 <__fp_round+0x20>
    625c:	bb 0f       	add	r27, r27
    625e:	40 f4       	brcc	.+16     	; 0x6270 <__fp_round+0x20>
    6260:	bf 2b       	or	r27, r31
    6262:	11 f4       	brne	.+4      	; 0x6268 <__fp_round+0x18>
    6264:	60 ff       	sbrs	r22, 0
    6266:	04 c0       	rjmp	.+8      	; 0x6270 <__fp_round+0x20>
    6268:	6f 5f       	subi	r22, 0xFF	; 255
    626a:	7f 4f       	sbci	r23, 0xFF	; 255
    626c:	8f 4f       	sbci	r24, 0xFF	; 255
    626e:	9f 4f       	sbci	r25, 0xFF	; 255
    6270:	08 95       	ret

00006272 <__fp_sinus>:
    6272:	ef 93       	push	r30
    6274:	e0 ff       	sbrs	r30, 0
    6276:	06 c0       	rjmp	.+12     	; 0x6284 <__fp_sinus+0x12>
    6278:	a2 ea       	ldi	r26, 0xA2	; 162
    627a:	2a ed       	ldi	r18, 0xDA	; 218
    627c:	3f e0       	ldi	r19, 0x0F	; 15
    627e:	49 ec       	ldi	r20, 0xC9	; 201
    6280:	5f eb       	ldi	r21, 0xBF	; 191
    6282:	cc dd       	rcall	.-1128   	; 0x5e1c <__addsf3x>
    6284:	e5 df       	rcall	.-54     	; 0x6250 <__fp_round>
    6286:	0f 90       	pop	r0
    6288:	03 94       	inc	r0
    628a:	01 fc       	sbrc	r0, 1
    628c:	90 58       	subi	r25, 0x80	; 128
    628e:	e1 e1       	ldi	r30, 0x11	; 17
    6290:	f1 e0       	ldi	r31, 0x01	; 1
    6292:	f7 c0       	rjmp	.+494    	; 0x6482 <__fp_powsodd>

00006294 <__fp_split3>:
    6294:	57 fd       	sbrc	r21, 7
    6296:	90 58       	subi	r25, 0x80	; 128
    6298:	44 0f       	add	r20, r20
    629a:	55 1f       	adc	r21, r21
    629c:	59 f0       	breq	.+22     	; 0x62b4 <__fp_splitA+0x10>
    629e:	5f 3f       	cpi	r21, 0xFF	; 255
    62a0:	71 f0       	breq	.+28     	; 0x62be <__fp_splitA+0x1a>
    62a2:	47 95       	ror	r20

000062a4 <__fp_splitA>:
    62a4:	88 0f       	add	r24, r24
    62a6:	97 fb       	bst	r25, 7
    62a8:	99 1f       	adc	r25, r25
    62aa:	61 f0       	breq	.+24     	; 0x62c4 <__fp_splitA+0x20>
    62ac:	9f 3f       	cpi	r25, 0xFF	; 255
    62ae:	79 f0       	breq	.+30     	; 0x62ce <__fp_splitA+0x2a>
    62b0:	87 95       	ror	r24
    62b2:	08 95       	ret
    62b4:	12 16       	cp	r1, r18
    62b6:	13 06       	cpc	r1, r19
    62b8:	14 06       	cpc	r1, r20
    62ba:	55 1f       	adc	r21, r21
    62bc:	f2 cf       	rjmp	.-28     	; 0x62a2 <__fp_split3+0xe>
    62be:	46 95       	lsr	r20
    62c0:	f1 df       	rcall	.-30     	; 0x62a4 <__fp_splitA>
    62c2:	08 c0       	rjmp	.+16     	; 0x62d4 <__fp_splitA+0x30>
    62c4:	16 16       	cp	r1, r22
    62c6:	17 06       	cpc	r1, r23
    62c8:	18 06       	cpc	r1, r24
    62ca:	99 1f       	adc	r25, r25
    62cc:	f1 cf       	rjmp	.-30     	; 0x62b0 <__fp_splitA+0xc>
    62ce:	86 95       	lsr	r24
    62d0:	71 05       	cpc	r23, r1
    62d2:	61 05       	cpc	r22, r1
    62d4:	08 94       	sec
    62d6:	08 95       	ret

000062d8 <__fp_zero>:
    62d8:	e8 94       	clt

000062da <__fp_szero>:
    62da:	bb 27       	eor	r27, r27
    62dc:	66 27       	eor	r22, r22
    62de:	77 27       	eor	r23, r23
    62e0:	cb 01       	movw	r24, r22
    62e2:	97 f9       	bld	r25, 7
    62e4:	08 95       	ret

000062e6 <__gesf2>:
    62e6:	2c df       	rcall	.-424    	; 0x6140 <__fp_cmp>
    62e8:	08 f4       	brcc	.+2      	; 0x62ec <__gesf2+0x6>
    62ea:	8f ef       	ldi	r24, 0xFF	; 255
    62ec:	08 95       	ret

000062ee <inverse>:
    62ee:	9b 01       	movw	r18, r22
    62f0:	ac 01       	movw	r20, r24
    62f2:	60 e0       	ldi	r22, 0x00	; 0
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	80 e8       	ldi	r24, 0x80	; 128
    62f8:	9f e3       	ldi	r25, 0x3F	; 63
    62fa:	4c ce       	rjmp	.-872    	; 0x5f94 <__divsf3>

000062fc <__mulsf3>:
    62fc:	0b d0       	rcall	.+22     	; 0x6314 <__mulsf3x>
    62fe:	a8 cf       	rjmp	.-176    	; 0x6250 <__fp_round>
    6300:	71 df       	rcall	.-286    	; 0x61e4 <__fp_pscA>
    6302:	28 f0       	brcs	.+10     	; 0x630e <__mulsf3+0x12>
    6304:	76 df       	rcall	.-276    	; 0x61f2 <__fp_pscB>
    6306:	18 f0       	brcs	.+6      	; 0x630e <__mulsf3+0x12>
    6308:	95 23       	and	r25, r21
    630a:	09 f0       	breq	.+2      	; 0x630e <__mulsf3+0x12>
    630c:	3d cf       	rjmp	.-390    	; 0x6188 <__fp_inf>
    630e:	42 cf       	rjmp	.-380    	; 0x6194 <__fp_nan>
    6310:	11 24       	eor	r1, r1
    6312:	e3 cf       	rjmp	.-58     	; 0x62da <__fp_szero>

00006314 <__mulsf3x>:
    6314:	bf df       	rcall	.-130    	; 0x6294 <__fp_split3>
    6316:	a0 f3       	brcs	.-24     	; 0x6300 <__mulsf3+0x4>

00006318 <__mulsf3_pse>:
    6318:	95 9f       	mul	r25, r21
    631a:	d1 f3       	breq	.-12     	; 0x6310 <__mulsf3+0x14>
    631c:	95 0f       	add	r25, r21
    631e:	50 e0       	ldi	r21, 0x00	; 0
    6320:	55 1f       	adc	r21, r21
    6322:	62 9f       	mul	r22, r18
    6324:	f0 01       	movw	r30, r0
    6326:	72 9f       	mul	r23, r18
    6328:	bb 27       	eor	r27, r27
    632a:	f0 0d       	add	r31, r0
    632c:	b1 1d       	adc	r27, r1
    632e:	63 9f       	mul	r22, r19
    6330:	aa 27       	eor	r26, r26
    6332:	f0 0d       	add	r31, r0
    6334:	b1 1d       	adc	r27, r1
    6336:	aa 1f       	adc	r26, r26
    6338:	64 9f       	mul	r22, r20
    633a:	66 27       	eor	r22, r22
    633c:	b0 0d       	add	r27, r0
    633e:	a1 1d       	adc	r26, r1
    6340:	66 1f       	adc	r22, r22
    6342:	82 9f       	mul	r24, r18
    6344:	22 27       	eor	r18, r18
    6346:	b0 0d       	add	r27, r0
    6348:	a1 1d       	adc	r26, r1
    634a:	62 1f       	adc	r22, r18
    634c:	73 9f       	mul	r23, r19
    634e:	b0 0d       	add	r27, r0
    6350:	a1 1d       	adc	r26, r1
    6352:	62 1f       	adc	r22, r18
    6354:	83 9f       	mul	r24, r19
    6356:	a0 0d       	add	r26, r0
    6358:	61 1d       	adc	r22, r1
    635a:	22 1f       	adc	r18, r18
    635c:	74 9f       	mul	r23, r20
    635e:	33 27       	eor	r19, r19
    6360:	a0 0d       	add	r26, r0
    6362:	61 1d       	adc	r22, r1
    6364:	23 1f       	adc	r18, r19
    6366:	84 9f       	mul	r24, r20
    6368:	60 0d       	add	r22, r0
    636a:	21 1d       	adc	r18, r1
    636c:	82 2f       	mov	r24, r18
    636e:	76 2f       	mov	r23, r22
    6370:	6a 2f       	mov	r22, r26
    6372:	11 24       	eor	r1, r1
    6374:	9f 57       	subi	r25, 0x7F	; 127
    6376:	50 40       	sbci	r21, 0x00	; 0
    6378:	8a f0       	brmi	.+34     	; 0x639c <__mulsf3_pse+0x84>
    637a:	e1 f0       	breq	.+56     	; 0x63b4 <__mulsf3_pse+0x9c>
    637c:	88 23       	and	r24, r24
    637e:	4a f0       	brmi	.+18     	; 0x6392 <__mulsf3_pse+0x7a>
    6380:	ee 0f       	add	r30, r30
    6382:	ff 1f       	adc	r31, r31
    6384:	bb 1f       	adc	r27, r27
    6386:	66 1f       	adc	r22, r22
    6388:	77 1f       	adc	r23, r23
    638a:	88 1f       	adc	r24, r24
    638c:	91 50       	subi	r25, 0x01	; 1
    638e:	50 40       	sbci	r21, 0x00	; 0
    6390:	a9 f7       	brne	.-22     	; 0x637c <__mulsf3_pse+0x64>
    6392:	9e 3f       	cpi	r25, 0xFE	; 254
    6394:	51 05       	cpc	r21, r1
    6396:	70 f0       	brcs	.+28     	; 0x63b4 <__mulsf3_pse+0x9c>
    6398:	f7 ce       	rjmp	.-530    	; 0x6188 <__fp_inf>
    639a:	9f cf       	rjmp	.-194    	; 0x62da <__fp_szero>
    639c:	5f 3f       	cpi	r21, 0xFF	; 255
    639e:	ec f3       	brlt	.-6      	; 0x639a <__mulsf3_pse+0x82>
    63a0:	98 3e       	cpi	r25, 0xE8	; 232
    63a2:	dc f3       	brlt	.-10     	; 0x639a <__mulsf3_pse+0x82>
    63a4:	86 95       	lsr	r24
    63a6:	77 95       	ror	r23
    63a8:	67 95       	ror	r22
    63aa:	b7 95       	ror	r27
    63ac:	f7 95       	ror	r31
    63ae:	e7 95       	ror	r30
    63b0:	9f 5f       	subi	r25, 0xFF	; 255
    63b2:	c1 f7       	brne	.-16     	; 0x63a4 <__mulsf3_pse+0x8c>
    63b4:	fe 2b       	or	r31, r30
    63b6:	88 0f       	add	r24, r24
    63b8:	91 1d       	adc	r25, r1
    63ba:	96 95       	lsr	r25
    63bc:	87 95       	ror	r24
    63be:	97 f9       	bld	r25, 7
    63c0:	08 95       	ret

000063c2 <sin>:
    63c2:	9f 93       	push	r25
    63c4:	1e df       	rcall	.-452    	; 0x6202 <__fp_rempio2>
    63c6:	0f 90       	pop	r0
    63c8:	07 fc       	sbrc	r0, 7
    63ca:	ee 5f       	subi	r30, 0xFE	; 254
    63cc:	52 cf       	rjmp	.-348    	; 0x6272 <__fp_sinus>
    63ce:	11 f4       	brne	.+4      	; 0x63d4 <sin+0x12>
    63d0:	0e f4       	brtc	.+2      	; 0x63d4 <sin+0x12>
    63d2:	e0 ce       	rjmp	.-576    	; 0x6194 <__fp_nan>
    63d4:	41 c0       	rjmp	.+130    	; 0x6458 <__fp_mpack>

000063d6 <sqrt>:
    63d6:	66 df       	rcall	.-308    	; 0x62a4 <__fp_splitA>
    63d8:	d0 f3       	brcs	.-12     	; 0x63ce <sin+0xc>
    63da:	99 23       	and	r25, r25
    63dc:	d9 f3       	breq	.-10     	; 0x63d4 <sin+0x12>
    63de:	ce f3       	brts	.-14     	; 0x63d2 <sin+0x10>
    63e0:	9f 57       	subi	r25, 0x7F	; 127
    63e2:	55 0b       	sbc	r21, r21
    63e4:	87 ff       	sbrs	r24, 7
    63e6:	46 d0       	rcall	.+140    	; 0x6474 <__fp_norm2>
    63e8:	00 24       	eor	r0, r0
    63ea:	a0 e6       	ldi	r26, 0x60	; 96
    63ec:	40 ea       	ldi	r20, 0xA0	; 160
    63ee:	90 01       	movw	r18, r0
    63f0:	80 58       	subi	r24, 0x80	; 128
    63f2:	56 95       	lsr	r21
    63f4:	97 95       	ror	r25
    63f6:	28 f4       	brcc	.+10     	; 0x6402 <sqrt+0x2c>
    63f8:	80 5c       	subi	r24, 0xC0	; 192
    63fa:	66 0f       	add	r22, r22
    63fc:	77 1f       	adc	r23, r23
    63fe:	88 1f       	adc	r24, r24
    6400:	20 f0       	brcs	.+8      	; 0x640a <sqrt+0x34>
    6402:	26 17       	cp	r18, r22
    6404:	37 07       	cpc	r19, r23
    6406:	48 07       	cpc	r20, r24
    6408:	30 f4       	brcc	.+12     	; 0x6416 <sqrt+0x40>
    640a:	62 1b       	sub	r22, r18
    640c:	73 0b       	sbc	r23, r19
    640e:	84 0b       	sbc	r24, r20
    6410:	20 29       	or	r18, r0
    6412:	31 29       	or	r19, r1
    6414:	4a 2b       	or	r20, r26
    6416:	a6 95       	lsr	r26
    6418:	17 94       	ror	r1
    641a:	07 94       	ror	r0
    641c:	20 25       	eor	r18, r0
    641e:	31 25       	eor	r19, r1
    6420:	4a 27       	eor	r20, r26
    6422:	58 f7       	brcc	.-42     	; 0x63fa <sqrt+0x24>
    6424:	66 0f       	add	r22, r22
    6426:	77 1f       	adc	r23, r23
    6428:	88 1f       	adc	r24, r24
    642a:	20 f0       	brcs	.+8      	; 0x6434 <sqrt+0x5e>
    642c:	26 17       	cp	r18, r22
    642e:	37 07       	cpc	r19, r23
    6430:	48 07       	cpc	r20, r24
    6432:	30 f4       	brcc	.+12     	; 0x6440 <sqrt+0x6a>
    6434:	62 0b       	sbc	r22, r18
    6436:	73 0b       	sbc	r23, r19
    6438:	84 0b       	sbc	r24, r20
    643a:	20 0d       	add	r18, r0
    643c:	31 1d       	adc	r19, r1
    643e:	41 1d       	adc	r20, r1
    6440:	a0 95       	com	r26
    6442:	81 f7       	brne	.-32     	; 0x6424 <sqrt+0x4e>
    6444:	b9 01       	movw	r22, r18
    6446:	84 2f       	mov	r24, r20
    6448:	91 58       	subi	r25, 0x81	; 129
    644a:	88 0f       	add	r24, r24
    644c:	96 95       	lsr	r25
    644e:	87 95       	ror	r24
    6450:	08 95       	ret

00006452 <square>:
    6452:	9b 01       	movw	r18, r22
    6454:	ac 01       	movw	r20, r24
    6456:	52 cf       	rjmp	.-348    	; 0x62fc <__mulsf3>

00006458 <__fp_mpack>:
    6458:	9f 3f       	cpi	r25, 0xFF	; 255
    645a:	31 f0       	breq	.+12     	; 0x6468 <__fp_mpack_finite+0xc>

0000645c <__fp_mpack_finite>:
    645c:	91 50       	subi	r25, 0x01	; 1
    645e:	20 f4       	brcc	.+8      	; 0x6468 <__fp_mpack_finite+0xc>
    6460:	87 95       	ror	r24
    6462:	77 95       	ror	r23
    6464:	67 95       	ror	r22
    6466:	b7 95       	ror	r27
    6468:	88 0f       	add	r24, r24
    646a:	91 1d       	adc	r25, r1
    646c:	96 95       	lsr	r25
    646e:	87 95       	ror	r24
    6470:	97 f9       	bld	r25, 7
    6472:	08 95       	ret

00006474 <__fp_norm2>:
    6474:	91 50       	subi	r25, 0x01	; 1
    6476:	50 40       	sbci	r21, 0x00	; 0
    6478:	66 0f       	add	r22, r22
    647a:	77 1f       	adc	r23, r23
    647c:	88 1f       	adc	r24, r24
    647e:	d2 f7       	brpl	.-12     	; 0x6474 <__fp_norm2>
    6480:	08 95       	ret

00006482 <__fp_powsodd>:
    6482:	9f 93       	push	r25
    6484:	8f 93       	push	r24
    6486:	7f 93       	push	r23
    6488:	6f 93       	push	r22
    648a:	ff 93       	push	r31
    648c:	ef 93       	push	r30
    648e:	9b 01       	movw	r18, r22
    6490:	ac 01       	movw	r20, r24
    6492:	34 df       	rcall	.-408    	; 0x62fc <__mulsf3>
    6494:	ef 91       	pop	r30
    6496:	ff 91       	pop	r31
    6498:	80 de       	rcall	.-768    	; 0x619a <__fp_powser>
    649a:	2f 91       	pop	r18
    649c:	3f 91       	pop	r19
    649e:	4f 91       	pop	r20
    64a0:	5f 91       	pop	r21
    64a2:	2c cf       	rjmp	.-424    	; 0x62fc <__mulsf3>

000064a4 <vfprintf>:
    64a4:	2f 92       	push	r2
    64a6:	3f 92       	push	r3
    64a8:	4f 92       	push	r4
    64aa:	5f 92       	push	r5
    64ac:	6f 92       	push	r6
    64ae:	7f 92       	push	r7
    64b0:	8f 92       	push	r8
    64b2:	9f 92       	push	r9
    64b4:	af 92       	push	r10
    64b6:	bf 92       	push	r11
    64b8:	cf 92       	push	r12
    64ba:	df 92       	push	r13
    64bc:	ef 92       	push	r14
    64be:	ff 92       	push	r15
    64c0:	0f 93       	push	r16
    64c2:	1f 93       	push	r17
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
    64c8:	cd b7       	in	r28, 0x3d	; 61
    64ca:	de b7       	in	r29, 0x3e	; 62
    64cc:	60 97       	sbiw	r28, 0x10	; 16
    64ce:	0f b6       	in	r0, 0x3f	; 63
    64d0:	f8 94       	cli
    64d2:	de bf       	out	0x3e, r29	; 62
    64d4:	0f be       	out	0x3f, r0	; 63
    64d6:	cd bf       	out	0x3d, r28	; 61
    64d8:	7c 01       	movw	r14, r24
    64da:	1b 01       	movw	r2, r22
    64dc:	6a 01       	movw	r12, r20
    64de:	fc 01       	movw	r30, r24
    64e0:	17 82       	std	Z+7, r1	; 0x07
    64e2:	16 82       	std	Z+6, r1	; 0x06
    64e4:	83 81       	ldd	r24, Z+3	; 0x03
    64e6:	81 ff       	sbrs	r24, 1
    64e8:	2a c3       	rjmp	.+1620   	; 0x6b3e <vfprintf+0x69a>
    64ea:	9e 01       	movw	r18, r28
    64ec:	2f 5f       	subi	r18, 0xFF	; 255
    64ee:	3f 4f       	sbci	r19, 0xFF	; 255
    64f0:	39 01       	movw	r6, r18
    64f2:	f7 01       	movw	r30, r14
    64f4:	93 81       	ldd	r25, Z+3	; 0x03
    64f6:	f1 01       	movw	r30, r2
    64f8:	93 fd       	sbrc	r25, 3
    64fa:	85 91       	lpm	r24, Z+
    64fc:	93 ff       	sbrs	r25, 3
    64fe:	81 91       	ld	r24, Z+
    6500:	1f 01       	movw	r2, r30
    6502:	88 23       	and	r24, r24
    6504:	09 f4       	brne	.+2      	; 0x6508 <vfprintf+0x64>
    6506:	17 c3       	rjmp	.+1582   	; 0x6b36 <vfprintf+0x692>
    6508:	85 32       	cpi	r24, 0x25	; 37
    650a:	39 f4       	brne	.+14     	; 0x651a <vfprintf+0x76>
    650c:	93 fd       	sbrc	r25, 3
    650e:	85 91       	lpm	r24, Z+
    6510:	93 ff       	sbrs	r25, 3
    6512:	81 91       	ld	r24, Z+
    6514:	1f 01       	movw	r2, r30
    6516:	85 32       	cpi	r24, 0x25	; 37
    6518:	31 f4       	brne	.+12     	; 0x6526 <vfprintf+0x82>
    651a:	b7 01       	movw	r22, r14
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	78 d4       	rcall	.+2288   	; 0x6e10 <fputc>
    6520:	56 01       	movw	r10, r12
    6522:	65 01       	movw	r12, r10
    6524:	e6 cf       	rjmp	.-52     	; 0x64f2 <vfprintf+0x4e>
    6526:	10 e0       	ldi	r17, 0x00	; 0
    6528:	51 2c       	mov	r5, r1
    652a:	91 2c       	mov	r9, r1
    652c:	ff e1       	ldi	r31, 0x1F	; 31
    652e:	f9 15       	cp	r31, r9
    6530:	d8 f0       	brcs	.+54     	; 0x6568 <vfprintf+0xc4>
    6532:	8b 32       	cpi	r24, 0x2B	; 43
    6534:	79 f0       	breq	.+30     	; 0x6554 <vfprintf+0xb0>
    6536:	38 f4       	brcc	.+14     	; 0x6546 <vfprintf+0xa2>
    6538:	80 32       	cpi	r24, 0x20	; 32
    653a:	79 f0       	breq	.+30     	; 0x655a <vfprintf+0xb6>
    653c:	83 32       	cpi	r24, 0x23	; 35
    653e:	a1 f4       	brne	.+40     	; 0x6568 <vfprintf+0xc4>
    6540:	f9 2d       	mov	r31, r9
    6542:	f0 61       	ori	r31, 0x10	; 16
    6544:	2e c0       	rjmp	.+92     	; 0x65a2 <vfprintf+0xfe>
    6546:	8d 32       	cpi	r24, 0x2D	; 45
    6548:	61 f0       	breq	.+24     	; 0x6562 <vfprintf+0xbe>
    654a:	80 33       	cpi	r24, 0x30	; 48
    654c:	69 f4       	brne	.+26     	; 0x6568 <vfprintf+0xc4>
    654e:	29 2d       	mov	r18, r9
    6550:	21 60       	ori	r18, 0x01	; 1
    6552:	2d c0       	rjmp	.+90     	; 0x65ae <vfprintf+0x10a>
    6554:	39 2d       	mov	r19, r9
    6556:	32 60       	ori	r19, 0x02	; 2
    6558:	93 2e       	mov	r9, r19
    655a:	89 2d       	mov	r24, r9
    655c:	84 60       	ori	r24, 0x04	; 4
    655e:	98 2e       	mov	r9, r24
    6560:	2a c0       	rjmp	.+84     	; 0x65b6 <vfprintf+0x112>
    6562:	e9 2d       	mov	r30, r9
    6564:	e8 60       	ori	r30, 0x08	; 8
    6566:	15 c0       	rjmp	.+42     	; 0x6592 <vfprintf+0xee>
    6568:	97 fc       	sbrc	r9, 7
    656a:	2d c0       	rjmp	.+90     	; 0x65c6 <vfprintf+0x122>
    656c:	20 ed       	ldi	r18, 0xD0	; 208
    656e:	28 0f       	add	r18, r24
    6570:	2a 30       	cpi	r18, 0x0A	; 10
    6572:	88 f4       	brcc	.+34     	; 0x6596 <vfprintf+0xf2>
    6574:	96 fe       	sbrs	r9, 6
    6576:	06 c0       	rjmp	.+12     	; 0x6584 <vfprintf+0xe0>
    6578:	3a e0       	ldi	r19, 0x0A	; 10
    657a:	13 9f       	mul	r17, r19
    657c:	20 0d       	add	r18, r0
    657e:	11 24       	eor	r1, r1
    6580:	12 2f       	mov	r17, r18
    6582:	19 c0       	rjmp	.+50     	; 0x65b6 <vfprintf+0x112>
    6584:	8a e0       	ldi	r24, 0x0A	; 10
    6586:	58 9e       	mul	r5, r24
    6588:	20 0d       	add	r18, r0
    658a:	11 24       	eor	r1, r1
    658c:	52 2e       	mov	r5, r18
    658e:	e9 2d       	mov	r30, r9
    6590:	e0 62       	ori	r30, 0x20	; 32
    6592:	9e 2e       	mov	r9, r30
    6594:	10 c0       	rjmp	.+32     	; 0x65b6 <vfprintf+0x112>
    6596:	8e 32       	cpi	r24, 0x2E	; 46
    6598:	31 f4       	brne	.+12     	; 0x65a6 <vfprintf+0x102>
    659a:	96 fc       	sbrc	r9, 6
    659c:	cc c2       	rjmp	.+1432   	; 0x6b36 <vfprintf+0x692>
    659e:	f9 2d       	mov	r31, r9
    65a0:	f0 64       	ori	r31, 0x40	; 64
    65a2:	9f 2e       	mov	r9, r31
    65a4:	08 c0       	rjmp	.+16     	; 0x65b6 <vfprintf+0x112>
    65a6:	8c 36       	cpi	r24, 0x6C	; 108
    65a8:	21 f4       	brne	.+8      	; 0x65b2 <vfprintf+0x10e>
    65aa:	29 2d       	mov	r18, r9
    65ac:	20 68       	ori	r18, 0x80	; 128
    65ae:	92 2e       	mov	r9, r18
    65b0:	02 c0       	rjmp	.+4      	; 0x65b6 <vfprintf+0x112>
    65b2:	88 36       	cpi	r24, 0x68	; 104
    65b4:	41 f4       	brne	.+16     	; 0x65c6 <vfprintf+0x122>
    65b6:	f1 01       	movw	r30, r2
    65b8:	93 fd       	sbrc	r25, 3
    65ba:	85 91       	lpm	r24, Z+
    65bc:	93 ff       	sbrs	r25, 3
    65be:	81 91       	ld	r24, Z+
    65c0:	1f 01       	movw	r2, r30
    65c2:	81 11       	cpse	r24, r1
    65c4:	b3 cf       	rjmp	.-154    	; 0x652c <vfprintf+0x88>
    65c6:	9b eb       	ldi	r25, 0xBB	; 187
    65c8:	98 0f       	add	r25, r24
    65ca:	93 30       	cpi	r25, 0x03	; 3
    65cc:	20 f4       	brcc	.+8      	; 0x65d6 <vfprintf+0x132>
    65ce:	99 2d       	mov	r25, r9
    65d0:	90 61       	ori	r25, 0x10	; 16
    65d2:	80 5e       	subi	r24, 0xE0	; 224
    65d4:	07 c0       	rjmp	.+14     	; 0x65e4 <vfprintf+0x140>
    65d6:	9b e9       	ldi	r25, 0x9B	; 155
    65d8:	98 0f       	add	r25, r24
    65da:	93 30       	cpi	r25, 0x03	; 3
    65dc:	08 f0       	brcs	.+2      	; 0x65e0 <vfprintf+0x13c>
    65de:	59 c1       	rjmp	.+690    	; 0x6892 <vfprintf+0x3ee>
    65e0:	99 2d       	mov	r25, r9
    65e2:	9f 7e       	andi	r25, 0xEF	; 239
    65e4:	96 ff       	sbrs	r25, 6
    65e6:	16 e0       	ldi	r17, 0x06	; 6
    65e8:	9f 73       	andi	r25, 0x3F	; 63
    65ea:	99 2e       	mov	r9, r25
    65ec:	85 36       	cpi	r24, 0x65	; 101
    65ee:	19 f4       	brne	.+6      	; 0x65f6 <vfprintf+0x152>
    65f0:	90 64       	ori	r25, 0x40	; 64
    65f2:	99 2e       	mov	r9, r25
    65f4:	08 c0       	rjmp	.+16     	; 0x6606 <vfprintf+0x162>
    65f6:	86 36       	cpi	r24, 0x66	; 102
    65f8:	21 f4       	brne	.+8      	; 0x6602 <vfprintf+0x15e>
    65fa:	39 2f       	mov	r19, r25
    65fc:	30 68       	ori	r19, 0x80	; 128
    65fe:	93 2e       	mov	r9, r19
    6600:	02 c0       	rjmp	.+4      	; 0x6606 <vfprintf+0x162>
    6602:	11 11       	cpse	r17, r1
    6604:	11 50       	subi	r17, 0x01	; 1
    6606:	97 fe       	sbrs	r9, 7
    6608:	07 c0       	rjmp	.+14     	; 0x6618 <vfprintf+0x174>
    660a:	1c 33       	cpi	r17, 0x3C	; 60
    660c:	50 f4       	brcc	.+20     	; 0x6622 <vfprintf+0x17e>
    660e:	44 24       	eor	r4, r4
    6610:	43 94       	inc	r4
    6612:	41 0e       	add	r4, r17
    6614:	27 e0       	ldi	r18, 0x07	; 7
    6616:	0b c0       	rjmp	.+22     	; 0x662e <vfprintf+0x18a>
    6618:	18 30       	cpi	r17, 0x08	; 8
    661a:	38 f0       	brcs	.+14     	; 0x662a <vfprintf+0x186>
    661c:	27 e0       	ldi	r18, 0x07	; 7
    661e:	17 e0       	ldi	r17, 0x07	; 7
    6620:	05 c0       	rjmp	.+10     	; 0x662c <vfprintf+0x188>
    6622:	27 e0       	ldi	r18, 0x07	; 7
    6624:	9c e3       	ldi	r25, 0x3C	; 60
    6626:	49 2e       	mov	r4, r25
    6628:	02 c0       	rjmp	.+4      	; 0x662e <vfprintf+0x18a>
    662a:	21 2f       	mov	r18, r17
    662c:	41 2c       	mov	r4, r1
    662e:	56 01       	movw	r10, r12
    6630:	84 e0       	ldi	r24, 0x04	; 4
    6632:	a8 0e       	add	r10, r24
    6634:	b1 1c       	adc	r11, r1
    6636:	f6 01       	movw	r30, r12
    6638:	60 81       	ld	r22, Z
    663a:	71 81       	ldd	r23, Z+1	; 0x01
    663c:	82 81       	ldd	r24, Z+2	; 0x02
    663e:	93 81       	ldd	r25, Z+3	; 0x03
    6640:	04 2d       	mov	r16, r4
    6642:	a3 01       	movw	r20, r6
    6644:	ee d2       	rcall	.+1500   	; 0x6c22 <__ftoa_engine>
    6646:	6c 01       	movw	r12, r24
    6648:	f9 81       	ldd	r31, Y+1	; 0x01
    664a:	fc 87       	std	Y+12, r31	; 0x0c
    664c:	f0 ff       	sbrs	r31, 0
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <vfprintf+0x1b0>
    6650:	f3 ff       	sbrs	r31, 3
    6652:	06 c0       	rjmp	.+12     	; 0x6660 <vfprintf+0x1bc>
    6654:	91 fc       	sbrc	r9, 1
    6656:	06 c0       	rjmp	.+12     	; 0x6664 <vfprintf+0x1c0>
    6658:	92 fe       	sbrs	r9, 2
    665a:	06 c0       	rjmp	.+12     	; 0x6668 <vfprintf+0x1c4>
    665c:	00 e2       	ldi	r16, 0x20	; 32
    665e:	05 c0       	rjmp	.+10     	; 0x666a <vfprintf+0x1c6>
    6660:	0d e2       	ldi	r16, 0x2D	; 45
    6662:	03 c0       	rjmp	.+6      	; 0x666a <vfprintf+0x1c6>
    6664:	0b e2       	ldi	r16, 0x2B	; 43
    6666:	01 c0       	rjmp	.+2      	; 0x666a <vfprintf+0x1c6>
    6668:	00 e0       	ldi	r16, 0x00	; 0
    666a:	8c 85       	ldd	r24, Y+12	; 0x0c
    666c:	8c 70       	andi	r24, 0x0C	; 12
    666e:	19 f0       	breq	.+6      	; 0x6676 <vfprintf+0x1d2>
    6670:	01 11       	cpse	r16, r1
    6672:	43 c2       	rjmp	.+1158   	; 0x6afa <vfprintf+0x656>
    6674:	80 c2       	rjmp	.+1280   	; 0x6b76 <vfprintf+0x6d2>
    6676:	97 fe       	sbrs	r9, 7
    6678:	10 c0       	rjmp	.+32     	; 0x669a <vfprintf+0x1f6>
    667a:	4c 0c       	add	r4, r12
    667c:	fc 85       	ldd	r31, Y+12	; 0x0c
    667e:	f4 ff       	sbrs	r31, 4
    6680:	04 c0       	rjmp	.+8      	; 0x668a <vfprintf+0x1e6>
    6682:	8a 81       	ldd	r24, Y+2	; 0x02
    6684:	81 33       	cpi	r24, 0x31	; 49
    6686:	09 f4       	brne	.+2      	; 0x668a <vfprintf+0x1e6>
    6688:	4a 94       	dec	r4
    668a:	14 14       	cp	r1, r4
    668c:	74 f5       	brge	.+92     	; 0x66ea <vfprintf+0x246>
    668e:	28 e0       	ldi	r18, 0x08	; 8
    6690:	24 15       	cp	r18, r4
    6692:	78 f5       	brcc	.+94     	; 0x66f2 <vfprintf+0x24e>
    6694:	88 e0       	ldi	r24, 0x08	; 8
    6696:	48 2e       	mov	r4, r24
    6698:	2c c0       	rjmp	.+88     	; 0x66f2 <vfprintf+0x24e>
    669a:	96 fc       	sbrc	r9, 6
    669c:	2a c0       	rjmp	.+84     	; 0x66f2 <vfprintf+0x24e>
    669e:	81 2f       	mov	r24, r17
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	8c 15       	cp	r24, r12
    66a4:	9d 05       	cpc	r25, r13
    66a6:	9c f0       	brlt	.+38     	; 0x66ce <vfprintf+0x22a>
    66a8:	3c ef       	ldi	r19, 0xFC	; 252
    66aa:	c3 16       	cp	r12, r19
    66ac:	3f ef       	ldi	r19, 0xFF	; 255
    66ae:	d3 06       	cpc	r13, r19
    66b0:	74 f0       	brlt	.+28     	; 0x66ce <vfprintf+0x22a>
    66b2:	89 2d       	mov	r24, r9
    66b4:	80 68       	ori	r24, 0x80	; 128
    66b6:	98 2e       	mov	r9, r24
    66b8:	0a c0       	rjmp	.+20     	; 0x66ce <vfprintf+0x22a>
    66ba:	e2 e0       	ldi	r30, 0x02	; 2
    66bc:	f0 e0       	ldi	r31, 0x00	; 0
    66be:	ec 0f       	add	r30, r28
    66c0:	fd 1f       	adc	r31, r29
    66c2:	e1 0f       	add	r30, r17
    66c4:	f1 1d       	adc	r31, r1
    66c6:	80 81       	ld	r24, Z
    66c8:	80 33       	cpi	r24, 0x30	; 48
    66ca:	19 f4       	brne	.+6      	; 0x66d2 <vfprintf+0x22e>
    66cc:	11 50       	subi	r17, 0x01	; 1
    66ce:	11 11       	cpse	r17, r1
    66d0:	f4 cf       	rjmp	.-24     	; 0x66ba <vfprintf+0x216>
    66d2:	97 fe       	sbrs	r9, 7
    66d4:	0e c0       	rjmp	.+28     	; 0x66f2 <vfprintf+0x24e>
    66d6:	44 24       	eor	r4, r4
    66d8:	43 94       	inc	r4
    66da:	41 0e       	add	r4, r17
    66dc:	81 2f       	mov	r24, r17
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	c8 16       	cp	r12, r24
    66e2:	d9 06       	cpc	r13, r25
    66e4:	2c f4       	brge	.+10     	; 0x66f0 <vfprintf+0x24c>
    66e6:	1c 19       	sub	r17, r12
    66e8:	04 c0       	rjmp	.+8      	; 0x66f2 <vfprintf+0x24e>
    66ea:	44 24       	eor	r4, r4
    66ec:	43 94       	inc	r4
    66ee:	01 c0       	rjmp	.+2      	; 0x66f2 <vfprintf+0x24e>
    66f0:	10 e0       	ldi	r17, 0x00	; 0
    66f2:	97 fe       	sbrs	r9, 7
    66f4:	06 c0       	rjmp	.+12     	; 0x6702 <vfprintf+0x25e>
    66f6:	1c 14       	cp	r1, r12
    66f8:	1d 04       	cpc	r1, r13
    66fa:	34 f4       	brge	.+12     	; 0x6708 <vfprintf+0x264>
    66fc:	c6 01       	movw	r24, r12
    66fe:	01 96       	adiw	r24, 0x01	; 1
    6700:	05 c0       	rjmp	.+10     	; 0x670c <vfprintf+0x268>
    6702:	85 e0       	ldi	r24, 0x05	; 5
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	02 c0       	rjmp	.+4      	; 0x670c <vfprintf+0x268>
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	01 11       	cpse	r16, r1
    670e:	01 96       	adiw	r24, 0x01	; 1
    6710:	11 23       	and	r17, r17
    6712:	31 f0       	breq	.+12     	; 0x6720 <vfprintf+0x27c>
    6714:	21 2f       	mov	r18, r17
    6716:	30 e0       	ldi	r19, 0x00	; 0
    6718:	2f 5f       	subi	r18, 0xFF	; 255
    671a:	3f 4f       	sbci	r19, 0xFF	; 255
    671c:	82 0f       	add	r24, r18
    671e:	93 1f       	adc	r25, r19
    6720:	25 2d       	mov	r18, r5
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	82 17       	cp	r24, r18
    6726:	93 07       	cpc	r25, r19
    6728:	14 f4       	brge	.+4      	; 0x672e <vfprintf+0x28a>
    672a:	58 1a       	sub	r5, r24
    672c:	01 c0       	rjmp	.+2      	; 0x6730 <vfprintf+0x28c>
    672e:	51 2c       	mov	r5, r1
    6730:	89 2d       	mov	r24, r9
    6732:	89 70       	andi	r24, 0x09	; 9
    6734:	41 f4       	brne	.+16     	; 0x6746 <vfprintf+0x2a2>
    6736:	55 20       	and	r5, r5
    6738:	31 f0       	breq	.+12     	; 0x6746 <vfprintf+0x2a2>
    673a:	b7 01       	movw	r22, r14
    673c:	80 e2       	ldi	r24, 0x20	; 32
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	67 d3       	rcall	.+1742   	; 0x6e10 <fputc>
    6742:	5a 94       	dec	r5
    6744:	f8 cf       	rjmp	.-16     	; 0x6736 <vfprintf+0x292>
    6746:	00 23       	and	r16, r16
    6748:	21 f0       	breq	.+8      	; 0x6752 <vfprintf+0x2ae>
    674a:	b7 01       	movw	r22, r14
    674c:	80 2f       	mov	r24, r16
    674e:	90 e0       	ldi	r25, 0x00	; 0
    6750:	5f d3       	rcall	.+1726   	; 0x6e10 <fputc>
    6752:	93 fc       	sbrc	r9, 3
    6754:	08 c0       	rjmp	.+16     	; 0x6766 <vfprintf+0x2c2>
    6756:	55 20       	and	r5, r5
    6758:	31 f0       	breq	.+12     	; 0x6766 <vfprintf+0x2c2>
    675a:	b7 01       	movw	r22, r14
    675c:	80 e3       	ldi	r24, 0x30	; 48
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	57 d3       	rcall	.+1710   	; 0x6e10 <fputc>
    6762:	5a 94       	dec	r5
    6764:	f8 cf       	rjmp	.-16     	; 0x6756 <vfprintf+0x2b2>
    6766:	97 fe       	sbrs	r9, 7
    6768:	4a c0       	rjmp	.+148    	; 0x67fe <vfprintf+0x35a>
    676a:	46 01       	movw	r8, r12
    676c:	d7 fe       	sbrs	r13, 7
    676e:	02 c0       	rjmp	.+4      	; 0x6774 <vfprintf+0x2d0>
    6770:	81 2c       	mov	r8, r1
    6772:	91 2c       	mov	r9, r1
    6774:	c6 01       	movw	r24, r12
    6776:	88 19       	sub	r24, r8
    6778:	99 09       	sbc	r25, r9
    677a:	f3 01       	movw	r30, r6
    677c:	e8 0f       	add	r30, r24
    677e:	f9 1f       	adc	r31, r25
    6780:	fe 87       	std	Y+14, r31	; 0x0e
    6782:	ed 87       	std	Y+13, r30	; 0x0d
    6784:	96 01       	movw	r18, r12
    6786:	24 19       	sub	r18, r4
    6788:	31 09       	sbc	r19, r1
    678a:	38 8b       	std	Y+16, r19	; 0x10
    678c:	2f 87       	std	Y+15, r18	; 0x0f
    678e:	01 2f       	mov	r16, r17
    6790:	10 e0       	ldi	r17, 0x00	; 0
    6792:	11 95       	neg	r17
    6794:	01 95       	neg	r16
    6796:	11 09       	sbc	r17, r1
    6798:	3f ef       	ldi	r19, 0xFF	; 255
    679a:	83 16       	cp	r8, r19
    679c:	93 06       	cpc	r9, r19
    679e:	21 f4       	brne	.+8      	; 0x67a8 <vfprintf+0x304>
    67a0:	b7 01       	movw	r22, r14
    67a2:	8e e2       	ldi	r24, 0x2E	; 46
    67a4:	90 e0       	ldi	r25, 0x00	; 0
    67a6:	34 d3       	rcall	.+1640   	; 0x6e10 <fputc>
    67a8:	c8 14       	cp	r12, r8
    67aa:	d9 04       	cpc	r13, r9
    67ac:	4c f0       	brlt	.+18     	; 0x67c0 <vfprintf+0x31c>
    67ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    67b0:	98 89       	ldd	r25, Y+16	; 0x10
    67b2:	88 15       	cp	r24, r8
    67b4:	99 05       	cpc	r25, r9
    67b6:	24 f4       	brge	.+8      	; 0x67c0 <vfprintf+0x31c>
    67b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    67ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    67bc:	81 81       	ldd	r24, Z+1	; 0x01
    67be:	01 c0       	rjmp	.+2      	; 0x67c2 <vfprintf+0x31e>
    67c0:	80 e3       	ldi	r24, 0x30	; 48
    67c2:	f1 e0       	ldi	r31, 0x01	; 1
    67c4:	8f 1a       	sub	r8, r31
    67c6:	91 08       	sbc	r9, r1
    67c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    67ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    67cc:	2f 5f       	subi	r18, 0xFF	; 255
    67ce:	3f 4f       	sbci	r19, 0xFF	; 255
    67d0:	3e 87       	std	Y+14, r19	; 0x0e
    67d2:	2d 87       	std	Y+13, r18	; 0x0d
    67d4:	80 16       	cp	r8, r16
    67d6:	91 06       	cpc	r9, r17
    67d8:	24 f0       	brlt	.+8      	; 0x67e2 <vfprintf+0x33e>
    67da:	b7 01       	movw	r22, r14
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	18 d3       	rcall	.+1584   	; 0x6e10 <fputc>
    67e0:	db cf       	rjmp	.-74     	; 0x6798 <vfprintf+0x2f4>
    67e2:	c8 14       	cp	r12, r8
    67e4:	d9 04       	cpc	r13, r9
    67e6:	41 f4       	brne	.+16     	; 0x67f8 <vfprintf+0x354>
    67e8:	9a 81       	ldd	r25, Y+2	; 0x02
    67ea:	96 33       	cpi	r25, 0x36	; 54
    67ec:	20 f4       	brcc	.+8      	; 0x67f6 <vfprintf+0x352>
    67ee:	95 33       	cpi	r25, 0x35	; 53
    67f0:	19 f4       	brne	.+6      	; 0x67f8 <vfprintf+0x354>
    67f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    67f4:	34 ff       	sbrs	r19, 4
    67f6:	81 e3       	ldi	r24, 0x31	; 49
    67f8:	b7 01       	movw	r22, r14
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	48 c0       	rjmp	.+144    	; 0x688e <vfprintf+0x3ea>
    67fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6800:	81 33       	cpi	r24, 0x31	; 49
    6802:	19 f0       	breq	.+6      	; 0x680a <vfprintf+0x366>
    6804:	9c 85       	ldd	r25, Y+12	; 0x0c
    6806:	9f 7e       	andi	r25, 0xEF	; 239
    6808:	9c 87       	std	Y+12, r25	; 0x0c
    680a:	b7 01       	movw	r22, r14
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	00 d3       	rcall	.+1536   	; 0x6e10 <fputc>
    6810:	11 11       	cpse	r17, r1
    6812:	05 c0       	rjmp	.+10     	; 0x681e <vfprintf+0x37a>
    6814:	94 fc       	sbrc	r9, 4
    6816:	16 c0       	rjmp	.+44     	; 0x6844 <vfprintf+0x3a0>
    6818:	85 e6       	ldi	r24, 0x65	; 101
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	15 c0       	rjmp	.+42     	; 0x6848 <vfprintf+0x3a4>
    681e:	b7 01       	movw	r22, r14
    6820:	8e e2       	ldi	r24, 0x2E	; 46
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	f5 d2       	rcall	.+1514   	; 0x6e10 <fputc>
    6826:	1e 5f       	subi	r17, 0xFE	; 254
    6828:	82 e0       	ldi	r24, 0x02	; 2
    682a:	01 e0       	ldi	r16, 0x01	; 1
    682c:	08 0f       	add	r16, r24
    682e:	f3 01       	movw	r30, r6
    6830:	e8 0f       	add	r30, r24
    6832:	f1 1d       	adc	r31, r1
    6834:	80 81       	ld	r24, Z
    6836:	b7 01       	movw	r22, r14
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	ea d2       	rcall	.+1492   	; 0x6e10 <fputc>
    683c:	80 2f       	mov	r24, r16
    683e:	01 13       	cpse	r16, r17
    6840:	f4 cf       	rjmp	.-24     	; 0x682a <vfprintf+0x386>
    6842:	e8 cf       	rjmp	.-48     	; 0x6814 <vfprintf+0x370>
    6844:	85 e4       	ldi	r24, 0x45	; 69
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	b7 01       	movw	r22, r14
    684a:	e2 d2       	rcall	.+1476   	; 0x6e10 <fputc>
    684c:	d7 fc       	sbrc	r13, 7
    684e:	06 c0       	rjmp	.+12     	; 0x685c <vfprintf+0x3b8>
    6850:	c1 14       	cp	r12, r1
    6852:	d1 04       	cpc	r13, r1
    6854:	41 f4       	brne	.+16     	; 0x6866 <vfprintf+0x3c2>
    6856:	ec 85       	ldd	r30, Y+12	; 0x0c
    6858:	e4 ff       	sbrs	r30, 4
    685a:	05 c0       	rjmp	.+10     	; 0x6866 <vfprintf+0x3c2>
    685c:	d1 94       	neg	r13
    685e:	c1 94       	neg	r12
    6860:	d1 08       	sbc	r13, r1
    6862:	8d e2       	ldi	r24, 0x2D	; 45
    6864:	01 c0       	rjmp	.+2      	; 0x6868 <vfprintf+0x3c4>
    6866:	8b e2       	ldi	r24, 0x2B	; 43
    6868:	b7 01       	movw	r22, r14
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	d1 d2       	rcall	.+1442   	; 0x6e10 <fputc>
    686e:	80 e3       	ldi	r24, 0x30	; 48
    6870:	2a e0       	ldi	r18, 0x0A	; 10
    6872:	c2 16       	cp	r12, r18
    6874:	d1 04       	cpc	r13, r1
    6876:	2c f0       	brlt	.+10     	; 0x6882 <vfprintf+0x3de>
    6878:	8f 5f       	subi	r24, 0xFF	; 255
    687a:	fa e0       	ldi	r31, 0x0A	; 10
    687c:	cf 1a       	sub	r12, r31
    687e:	d1 08       	sbc	r13, r1
    6880:	f7 cf       	rjmp	.-18     	; 0x6870 <vfprintf+0x3cc>
    6882:	b7 01       	movw	r22, r14
    6884:	90 e0       	ldi	r25, 0x00	; 0
    6886:	c4 d2       	rcall	.+1416   	; 0x6e10 <fputc>
    6888:	b7 01       	movw	r22, r14
    688a:	c6 01       	movw	r24, r12
    688c:	c0 96       	adiw	r24, 0x30	; 48
    688e:	c0 d2       	rcall	.+1408   	; 0x6e10 <fputc>
    6890:	49 c1       	rjmp	.+658    	; 0x6b24 <vfprintf+0x680>
    6892:	83 36       	cpi	r24, 0x63	; 99
    6894:	31 f0       	breq	.+12     	; 0x68a2 <vfprintf+0x3fe>
    6896:	83 37       	cpi	r24, 0x73	; 115
    6898:	79 f0       	breq	.+30     	; 0x68b8 <vfprintf+0x414>
    689a:	83 35       	cpi	r24, 0x53	; 83
    689c:	09 f0       	breq	.+2      	; 0x68a0 <vfprintf+0x3fc>
    689e:	52 c0       	rjmp	.+164    	; 0x6944 <vfprintf+0x4a0>
    68a0:	1f c0       	rjmp	.+62     	; 0x68e0 <vfprintf+0x43c>
    68a2:	56 01       	movw	r10, r12
    68a4:	32 e0       	ldi	r19, 0x02	; 2
    68a6:	a3 0e       	add	r10, r19
    68a8:	b1 1c       	adc	r11, r1
    68aa:	f6 01       	movw	r30, r12
    68ac:	80 81       	ld	r24, Z
    68ae:	89 83       	std	Y+1, r24	; 0x01
    68b0:	01 e0       	ldi	r16, 0x01	; 1
    68b2:	10 e0       	ldi	r17, 0x00	; 0
    68b4:	63 01       	movw	r12, r6
    68b6:	11 c0       	rjmp	.+34     	; 0x68da <vfprintf+0x436>
    68b8:	56 01       	movw	r10, r12
    68ba:	f2 e0       	ldi	r31, 0x02	; 2
    68bc:	af 0e       	add	r10, r31
    68be:	b1 1c       	adc	r11, r1
    68c0:	f6 01       	movw	r30, r12
    68c2:	c0 80       	ld	r12, Z
    68c4:	d1 80       	ldd	r13, Z+1	; 0x01
    68c6:	96 fe       	sbrs	r9, 6
    68c8:	03 c0       	rjmp	.+6      	; 0x68d0 <vfprintf+0x42c>
    68ca:	61 2f       	mov	r22, r17
    68cc:	70 e0       	ldi	r23, 0x00	; 0
    68ce:	02 c0       	rjmp	.+4      	; 0x68d4 <vfprintf+0x430>
    68d0:	6f ef       	ldi	r22, 0xFF	; 255
    68d2:	7f ef       	ldi	r23, 0xFF	; 255
    68d4:	c6 01       	movw	r24, r12
    68d6:	91 d2       	rcall	.+1314   	; 0x6dfa <strnlen>
    68d8:	8c 01       	movw	r16, r24
    68da:	f9 2d       	mov	r31, r9
    68dc:	ff 77       	andi	r31, 0x7F	; 127
    68de:	13 c0       	rjmp	.+38     	; 0x6906 <vfprintf+0x462>
    68e0:	56 01       	movw	r10, r12
    68e2:	22 e0       	ldi	r18, 0x02	; 2
    68e4:	a2 0e       	add	r10, r18
    68e6:	b1 1c       	adc	r11, r1
    68e8:	f6 01       	movw	r30, r12
    68ea:	c0 80       	ld	r12, Z
    68ec:	d1 80       	ldd	r13, Z+1	; 0x01
    68ee:	96 fe       	sbrs	r9, 6
    68f0:	03 c0       	rjmp	.+6      	; 0x68f8 <vfprintf+0x454>
    68f2:	61 2f       	mov	r22, r17
    68f4:	70 e0       	ldi	r23, 0x00	; 0
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <vfprintf+0x458>
    68f8:	6f ef       	ldi	r22, 0xFF	; 255
    68fa:	7f ef       	ldi	r23, 0xFF	; 255
    68fc:	c6 01       	movw	r24, r12
    68fe:	69 d2       	rcall	.+1234   	; 0x6dd2 <strnlen_P>
    6900:	8c 01       	movw	r16, r24
    6902:	f9 2d       	mov	r31, r9
    6904:	f0 68       	ori	r31, 0x80	; 128
    6906:	9f 2e       	mov	r9, r31
    6908:	f3 fd       	sbrc	r31, 3
    690a:	18 c0       	rjmp	.+48     	; 0x693c <vfprintf+0x498>
    690c:	85 2d       	mov	r24, r5
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	08 17       	cp	r16, r24
    6912:	19 07       	cpc	r17, r25
    6914:	98 f4       	brcc	.+38     	; 0x693c <vfprintf+0x498>
    6916:	b7 01       	movw	r22, r14
    6918:	80 e2       	ldi	r24, 0x20	; 32
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	79 d2       	rcall	.+1266   	; 0x6e10 <fputc>
    691e:	5a 94       	dec	r5
    6920:	f5 cf       	rjmp	.-22     	; 0x690c <vfprintf+0x468>
    6922:	f6 01       	movw	r30, r12
    6924:	97 fc       	sbrc	r9, 7
    6926:	85 91       	lpm	r24, Z+
    6928:	97 fe       	sbrs	r9, 7
    692a:	81 91       	ld	r24, Z+
    692c:	6f 01       	movw	r12, r30
    692e:	b7 01       	movw	r22, r14
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	6e d2       	rcall	.+1244   	; 0x6e10 <fputc>
    6934:	51 10       	cpse	r5, r1
    6936:	5a 94       	dec	r5
    6938:	01 50       	subi	r16, 0x01	; 1
    693a:	11 09       	sbc	r17, r1
    693c:	01 15       	cp	r16, r1
    693e:	11 05       	cpc	r17, r1
    6940:	81 f7       	brne	.-32     	; 0x6922 <vfprintf+0x47e>
    6942:	f0 c0       	rjmp	.+480    	; 0x6b24 <vfprintf+0x680>
    6944:	84 36       	cpi	r24, 0x64	; 100
    6946:	11 f0       	breq	.+4      	; 0x694c <vfprintf+0x4a8>
    6948:	89 36       	cpi	r24, 0x69	; 105
    694a:	59 f5       	brne	.+86     	; 0x69a2 <vfprintf+0x4fe>
    694c:	56 01       	movw	r10, r12
    694e:	97 fe       	sbrs	r9, 7
    6950:	09 c0       	rjmp	.+18     	; 0x6964 <vfprintf+0x4c0>
    6952:	24 e0       	ldi	r18, 0x04	; 4
    6954:	a2 0e       	add	r10, r18
    6956:	b1 1c       	adc	r11, r1
    6958:	f6 01       	movw	r30, r12
    695a:	60 81       	ld	r22, Z
    695c:	71 81       	ldd	r23, Z+1	; 0x01
    695e:	82 81       	ldd	r24, Z+2	; 0x02
    6960:	93 81       	ldd	r25, Z+3	; 0x03
    6962:	0a c0       	rjmp	.+20     	; 0x6978 <vfprintf+0x4d4>
    6964:	f2 e0       	ldi	r31, 0x02	; 2
    6966:	af 0e       	add	r10, r31
    6968:	b1 1c       	adc	r11, r1
    696a:	f6 01       	movw	r30, r12
    696c:	60 81       	ld	r22, Z
    696e:	71 81       	ldd	r23, Z+1	; 0x01
    6970:	07 2e       	mov	r0, r23
    6972:	00 0c       	add	r0, r0
    6974:	88 0b       	sbc	r24, r24
    6976:	99 0b       	sbc	r25, r25
    6978:	f9 2d       	mov	r31, r9
    697a:	ff 76       	andi	r31, 0x6F	; 111
    697c:	9f 2e       	mov	r9, r31
    697e:	97 ff       	sbrs	r25, 7
    6980:	09 c0       	rjmp	.+18     	; 0x6994 <vfprintf+0x4f0>
    6982:	90 95       	com	r25
    6984:	80 95       	com	r24
    6986:	70 95       	com	r23
    6988:	61 95       	neg	r22
    698a:	7f 4f       	sbci	r23, 0xFF	; 255
    698c:	8f 4f       	sbci	r24, 0xFF	; 255
    698e:	9f 4f       	sbci	r25, 0xFF	; 255
    6990:	f0 68       	ori	r31, 0x80	; 128
    6992:	9f 2e       	mov	r9, r31
    6994:	2a e0       	ldi	r18, 0x0A	; 10
    6996:	30 e0       	ldi	r19, 0x00	; 0
    6998:	a3 01       	movw	r20, r6
    699a:	9e d2       	rcall	.+1340   	; 0x6ed8 <__ultoa_invert>
    699c:	c8 2e       	mov	r12, r24
    699e:	c6 18       	sub	r12, r6
    69a0:	3e c0       	rjmp	.+124    	; 0x6a1e <vfprintf+0x57a>
    69a2:	09 2d       	mov	r16, r9
    69a4:	85 37       	cpi	r24, 0x75	; 117
    69a6:	21 f4       	brne	.+8      	; 0x69b0 <vfprintf+0x50c>
    69a8:	0f 7e       	andi	r16, 0xEF	; 239
    69aa:	2a e0       	ldi	r18, 0x0A	; 10
    69ac:	30 e0       	ldi	r19, 0x00	; 0
    69ae:	1d c0       	rjmp	.+58     	; 0x69ea <vfprintf+0x546>
    69b0:	09 7f       	andi	r16, 0xF9	; 249
    69b2:	8f 36       	cpi	r24, 0x6F	; 111
    69b4:	91 f0       	breq	.+36     	; 0x69da <vfprintf+0x536>
    69b6:	18 f4       	brcc	.+6      	; 0x69be <vfprintf+0x51a>
    69b8:	88 35       	cpi	r24, 0x58	; 88
    69ba:	59 f0       	breq	.+22     	; 0x69d2 <vfprintf+0x52e>
    69bc:	bc c0       	rjmp	.+376    	; 0x6b36 <vfprintf+0x692>
    69be:	80 37       	cpi	r24, 0x70	; 112
    69c0:	19 f0       	breq	.+6      	; 0x69c8 <vfprintf+0x524>
    69c2:	88 37       	cpi	r24, 0x78	; 120
    69c4:	11 f0       	breq	.+4      	; 0x69ca <vfprintf+0x526>
    69c6:	b7 c0       	rjmp	.+366    	; 0x6b36 <vfprintf+0x692>
    69c8:	00 61       	ori	r16, 0x10	; 16
    69ca:	04 ff       	sbrs	r16, 4
    69cc:	09 c0       	rjmp	.+18     	; 0x69e0 <vfprintf+0x53c>
    69ce:	04 60       	ori	r16, 0x04	; 4
    69d0:	07 c0       	rjmp	.+14     	; 0x69e0 <vfprintf+0x53c>
    69d2:	94 fe       	sbrs	r9, 4
    69d4:	08 c0       	rjmp	.+16     	; 0x69e6 <vfprintf+0x542>
    69d6:	06 60       	ori	r16, 0x06	; 6
    69d8:	06 c0       	rjmp	.+12     	; 0x69e6 <vfprintf+0x542>
    69da:	28 e0       	ldi	r18, 0x08	; 8
    69dc:	30 e0       	ldi	r19, 0x00	; 0
    69de:	05 c0       	rjmp	.+10     	; 0x69ea <vfprintf+0x546>
    69e0:	20 e1       	ldi	r18, 0x10	; 16
    69e2:	30 e0       	ldi	r19, 0x00	; 0
    69e4:	02 c0       	rjmp	.+4      	; 0x69ea <vfprintf+0x546>
    69e6:	20 e1       	ldi	r18, 0x10	; 16
    69e8:	32 e0       	ldi	r19, 0x02	; 2
    69ea:	56 01       	movw	r10, r12
    69ec:	07 ff       	sbrs	r16, 7
    69ee:	09 c0       	rjmp	.+18     	; 0x6a02 <vfprintf+0x55e>
    69f0:	84 e0       	ldi	r24, 0x04	; 4
    69f2:	a8 0e       	add	r10, r24
    69f4:	b1 1c       	adc	r11, r1
    69f6:	f6 01       	movw	r30, r12
    69f8:	60 81       	ld	r22, Z
    69fa:	71 81       	ldd	r23, Z+1	; 0x01
    69fc:	82 81       	ldd	r24, Z+2	; 0x02
    69fe:	93 81       	ldd	r25, Z+3	; 0x03
    6a00:	08 c0       	rjmp	.+16     	; 0x6a12 <vfprintf+0x56e>
    6a02:	f2 e0       	ldi	r31, 0x02	; 2
    6a04:	af 0e       	add	r10, r31
    6a06:	b1 1c       	adc	r11, r1
    6a08:	f6 01       	movw	r30, r12
    6a0a:	60 81       	ld	r22, Z
    6a0c:	71 81       	ldd	r23, Z+1	; 0x01
    6a0e:	80 e0       	ldi	r24, 0x00	; 0
    6a10:	90 e0       	ldi	r25, 0x00	; 0
    6a12:	a3 01       	movw	r20, r6
    6a14:	61 d2       	rcall	.+1218   	; 0x6ed8 <__ultoa_invert>
    6a16:	c8 2e       	mov	r12, r24
    6a18:	c6 18       	sub	r12, r6
    6a1a:	0f 77       	andi	r16, 0x7F	; 127
    6a1c:	90 2e       	mov	r9, r16
    6a1e:	96 fe       	sbrs	r9, 6
    6a20:	0b c0       	rjmp	.+22     	; 0x6a38 <vfprintf+0x594>
    6a22:	09 2d       	mov	r16, r9
    6a24:	0e 7f       	andi	r16, 0xFE	; 254
    6a26:	c1 16       	cp	r12, r17
    6a28:	50 f4       	brcc	.+20     	; 0x6a3e <vfprintf+0x59a>
    6a2a:	94 fe       	sbrs	r9, 4
    6a2c:	0a c0       	rjmp	.+20     	; 0x6a42 <vfprintf+0x59e>
    6a2e:	92 fc       	sbrc	r9, 2
    6a30:	08 c0       	rjmp	.+16     	; 0x6a42 <vfprintf+0x59e>
    6a32:	09 2d       	mov	r16, r9
    6a34:	0e 7e       	andi	r16, 0xEE	; 238
    6a36:	05 c0       	rjmp	.+10     	; 0x6a42 <vfprintf+0x59e>
    6a38:	dc 2c       	mov	r13, r12
    6a3a:	09 2d       	mov	r16, r9
    6a3c:	03 c0       	rjmp	.+6      	; 0x6a44 <vfprintf+0x5a0>
    6a3e:	dc 2c       	mov	r13, r12
    6a40:	01 c0       	rjmp	.+2      	; 0x6a44 <vfprintf+0x5a0>
    6a42:	d1 2e       	mov	r13, r17
    6a44:	04 ff       	sbrs	r16, 4
    6a46:	0d c0       	rjmp	.+26     	; 0x6a62 <vfprintf+0x5be>
    6a48:	fe 01       	movw	r30, r28
    6a4a:	ec 0d       	add	r30, r12
    6a4c:	f1 1d       	adc	r31, r1
    6a4e:	80 81       	ld	r24, Z
    6a50:	80 33       	cpi	r24, 0x30	; 48
    6a52:	11 f4       	brne	.+4      	; 0x6a58 <vfprintf+0x5b4>
    6a54:	09 7e       	andi	r16, 0xE9	; 233
    6a56:	09 c0       	rjmp	.+18     	; 0x6a6a <vfprintf+0x5c6>
    6a58:	02 ff       	sbrs	r16, 2
    6a5a:	06 c0       	rjmp	.+12     	; 0x6a68 <vfprintf+0x5c4>
    6a5c:	d3 94       	inc	r13
    6a5e:	d3 94       	inc	r13
    6a60:	04 c0       	rjmp	.+8      	; 0x6a6a <vfprintf+0x5c6>
    6a62:	80 2f       	mov	r24, r16
    6a64:	86 78       	andi	r24, 0x86	; 134
    6a66:	09 f0       	breq	.+2      	; 0x6a6a <vfprintf+0x5c6>
    6a68:	d3 94       	inc	r13
    6a6a:	03 fd       	sbrc	r16, 3
    6a6c:	10 c0       	rjmp	.+32     	; 0x6a8e <vfprintf+0x5ea>
    6a6e:	00 ff       	sbrs	r16, 0
    6a70:	06 c0       	rjmp	.+12     	; 0x6a7e <vfprintf+0x5da>
    6a72:	1c 2d       	mov	r17, r12
    6a74:	d5 14       	cp	r13, r5
    6a76:	78 f4       	brcc	.+30     	; 0x6a96 <vfprintf+0x5f2>
    6a78:	15 0d       	add	r17, r5
    6a7a:	1d 19       	sub	r17, r13
    6a7c:	0c c0       	rjmp	.+24     	; 0x6a96 <vfprintf+0x5f2>
    6a7e:	d5 14       	cp	r13, r5
    6a80:	50 f4       	brcc	.+20     	; 0x6a96 <vfprintf+0x5f2>
    6a82:	b7 01       	movw	r22, r14
    6a84:	80 e2       	ldi	r24, 0x20	; 32
    6a86:	90 e0       	ldi	r25, 0x00	; 0
    6a88:	c3 d1       	rcall	.+902    	; 0x6e10 <fputc>
    6a8a:	d3 94       	inc	r13
    6a8c:	f8 cf       	rjmp	.-16     	; 0x6a7e <vfprintf+0x5da>
    6a8e:	d5 14       	cp	r13, r5
    6a90:	10 f4       	brcc	.+4      	; 0x6a96 <vfprintf+0x5f2>
    6a92:	5d 18       	sub	r5, r13
    6a94:	01 c0       	rjmp	.+2      	; 0x6a98 <vfprintf+0x5f4>
    6a96:	51 2c       	mov	r5, r1
    6a98:	04 ff       	sbrs	r16, 4
    6a9a:	0f c0       	rjmp	.+30     	; 0x6aba <vfprintf+0x616>
    6a9c:	b7 01       	movw	r22, r14
    6a9e:	80 e3       	ldi	r24, 0x30	; 48
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	b6 d1       	rcall	.+876    	; 0x6e10 <fputc>
    6aa4:	02 ff       	sbrs	r16, 2
    6aa6:	16 c0       	rjmp	.+44     	; 0x6ad4 <vfprintf+0x630>
    6aa8:	01 fd       	sbrc	r16, 1
    6aaa:	03 c0       	rjmp	.+6      	; 0x6ab2 <vfprintf+0x60e>
    6aac:	88 e7       	ldi	r24, 0x78	; 120
    6aae:	90 e0       	ldi	r25, 0x00	; 0
    6ab0:	02 c0       	rjmp	.+4      	; 0x6ab6 <vfprintf+0x612>
    6ab2:	88 e5       	ldi	r24, 0x58	; 88
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	b7 01       	movw	r22, r14
    6ab8:	0c c0       	rjmp	.+24     	; 0x6ad2 <vfprintf+0x62e>
    6aba:	80 2f       	mov	r24, r16
    6abc:	86 78       	andi	r24, 0x86	; 134
    6abe:	51 f0       	breq	.+20     	; 0x6ad4 <vfprintf+0x630>
    6ac0:	01 ff       	sbrs	r16, 1
    6ac2:	02 c0       	rjmp	.+4      	; 0x6ac8 <vfprintf+0x624>
    6ac4:	8b e2       	ldi	r24, 0x2B	; 43
    6ac6:	01 c0       	rjmp	.+2      	; 0x6aca <vfprintf+0x626>
    6ac8:	80 e2       	ldi	r24, 0x20	; 32
    6aca:	07 fd       	sbrc	r16, 7
    6acc:	8d e2       	ldi	r24, 0x2D	; 45
    6ace:	b7 01       	movw	r22, r14
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	9e d1       	rcall	.+828    	; 0x6e10 <fputc>
    6ad4:	c1 16       	cp	r12, r17
    6ad6:	30 f4       	brcc	.+12     	; 0x6ae4 <vfprintf+0x640>
    6ad8:	b7 01       	movw	r22, r14
    6ada:	80 e3       	ldi	r24, 0x30	; 48
    6adc:	90 e0       	ldi	r25, 0x00	; 0
    6ade:	98 d1       	rcall	.+816    	; 0x6e10 <fputc>
    6ae0:	11 50       	subi	r17, 0x01	; 1
    6ae2:	f8 cf       	rjmp	.-16     	; 0x6ad4 <vfprintf+0x630>
    6ae4:	ca 94       	dec	r12
    6ae6:	f3 01       	movw	r30, r6
    6ae8:	ec 0d       	add	r30, r12
    6aea:	f1 1d       	adc	r31, r1
    6aec:	80 81       	ld	r24, Z
    6aee:	b7 01       	movw	r22, r14
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	8e d1       	rcall	.+796    	; 0x6e10 <fputc>
    6af4:	c1 10       	cpse	r12, r1
    6af6:	f6 cf       	rjmp	.-20     	; 0x6ae4 <vfprintf+0x640>
    6af8:	15 c0       	rjmp	.+42     	; 0x6b24 <vfprintf+0x680>
    6afa:	f4 e0       	ldi	r31, 0x04	; 4
    6afc:	f5 15       	cp	r31, r5
    6afe:	50 f5       	brcc	.+84     	; 0x6b54 <vfprintf+0x6b0>
    6b00:	84 e0       	ldi	r24, 0x04	; 4
    6b02:	58 1a       	sub	r5, r24
    6b04:	93 fe       	sbrs	r9, 3
    6b06:	1e c0       	rjmp	.+60     	; 0x6b44 <vfprintf+0x6a0>
    6b08:	01 11       	cpse	r16, r1
    6b0a:	25 c0       	rjmp	.+74     	; 0x6b56 <vfprintf+0x6b2>
    6b0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b0e:	23 ff       	sbrs	r18, 3
    6b10:	27 c0       	rjmp	.+78     	; 0x6b60 <vfprintf+0x6bc>
    6b12:	00 e3       	ldi	r16, 0x30	; 48
    6b14:	11 e0       	ldi	r17, 0x01	; 1
    6b16:	39 2d       	mov	r19, r9
    6b18:	30 71       	andi	r19, 0x10	; 16
    6b1a:	93 2e       	mov	r9, r19
    6b1c:	f8 01       	movw	r30, r16
    6b1e:	84 91       	lpm	r24, Z
    6b20:	81 11       	cpse	r24, r1
    6b22:	21 c0       	rjmp	.+66     	; 0x6b66 <vfprintf+0x6c2>
    6b24:	55 20       	and	r5, r5
    6b26:	09 f4       	brne	.+2      	; 0x6b2a <vfprintf+0x686>
    6b28:	fc cc       	rjmp	.-1544   	; 0x6522 <vfprintf+0x7e>
    6b2a:	b7 01       	movw	r22, r14
    6b2c:	80 e2       	ldi	r24, 0x20	; 32
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	6f d1       	rcall	.+734    	; 0x6e10 <fputc>
    6b32:	5a 94       	dec	r5
    6b34:	f7 cf       	rjmp	.-18     	; 0x6b24 <vfprintf+0x680>
    6b36:	f7 01       	movw	r30, r14
    6b38:	86 81       	ldd	r24, Z+6	; 0x06
    6b3a:	97 81       	ldd	r25, Z+7	; 0x07
    6b3c:	23 c0       	rjmp	.+70     	; 0x6b84 <vfprintf+0x6e0>
    6b3e:	8f ef       	ldi	r24, 0xFF	; 255
    6b40:	9f ef       	ldi	r25, 0xFF	; 255
    6b42:	20 c0       	rjmp	.+64     	; 0x6b84 <vfprintf+0x6e0>
    6b44:	b7 01       	movw	r22, r14
    6b46:	80 e2       	ldi	r24, 0x20	; 32
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	62 d1       	rcall	.+708    	; 0x6e10 <fputc>
    6b4c:	5a 94       	dec	r5
    6b4e:	51 10       	cpse	r5, r1
    6b50:	f9 cf       	rjmp	.-14     	; 0x6b44 <vfprintf+0x6a0>
    6b52:	da cf       	rjmp	.-76     	; 0x6b08 <vfprintf+0x664>
    6b54:	51 2c       	mov	r5, r1
    6b56:	b7 01       	movw	r22, r14
    6b58:	80 2f       	mov	r24, r16
    6b5a:	90 e0       	ldi	r25, 0x00	; 0
    6b5c:	59 d1       	rcall	.+690    	; 0x6e10 <fputc>
    6b5e:	d6 cf       	rjmp	.-84     	; 0x6b0c <vfprintf+0x668>
    6b60:	04 e3       	ldi	r16, 0x34	; 52
    6b62:	11 e0       	ldi	r17, 0x01	; 1
    6b64:	d8 cf       	rjmp	.-80     	; 0x6b16 <vfprintf+0x672>
    6b66:	91 10       	cpse	r9, r1
    6b68:	80 52       	subi	r24, 0x20	; 32
    6b6a:	b7 01       	movw	r22, r14
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	50 d1       	rcall	.+672    	; 0x6e10 <fputc>
    6b70:	0f 5f       	subi	r16, 0xFF	; 255
    6b72:	1f 4f       	sbci	r17, 0xFF	; 255
    6b74:	d3 cf       	rjmp	.-90     	; 0x6b1c <vfprintf+0x678>
    6b76:	23 e0       	ldi	r18, 0x03	; 3
    6b78:	25 15       	cp	r18, r5
    6b7a:	10 f4       	brcc	.+4      	; 0x6b80 <vfprintf+0x6dc>
    6b7c:	83 e0       	ldi	r24, 0x03	; 3
    6b7e:	c1 cf       	rjmp	.-126    	; 0x6b02 <vfprintf+0x65e>
    6b80:	51 2c       	mov	r5, r1
    6b82:	c4 cf       	rjmp	.-120    	; 0x6b0c <vfprintf+0x668>
    6b84:	60 96       	adiw	r28, 0x10	; 16
    6b86:	0f b6       	in	r0, 0x3f	; 63
    6b88:	f8 94       	cli
    6b8a:	de bf       	out	0x3e, r29	; 62
    6b8c:	0f be       	out	0x3f, r0	; 63
    6b8e:	cd bf       	out	0x3d, r28	; 61
    6b90:	df 91       	pop	r29
    6b92:	cf 91       	pop	r28
    6b94:	1f 91       	pop	r17
    6b96:	0f 91       	pop	r16
    6b98:	ff 90       	pop	r15
    6b9a:	ef 90       	pop	r14
    6b9c:	df 90       	pop	r13
    6b9e:	cf 90       	pop	r12
    6ba0:	bf 90       	pop	r11
    6ba2:	af 90       	pop	r10
    6ba4:	9f 90       	pop	r9
    6ba6:	8f 90       	pop	r8
    6ba8:	7f 90       	pop	r7
    6baa:	6f 90       	pop	r6
    6bac:	5f 90       	pop	r5
    6bae:	4f 90       	pop	r4
    6bb0:	3f 90       	pop	r3
    6bb2:	2f 90       	pop	r2
    6bb4:	08 95       	ret

00006bb6 <__divmodhi4>:
    6bb6:	97 fb       	bst	r25, 7
    6bb8:	07 2e       	mov	r0, r23
    6bba:	16 f4       	brtc	.+4      	; 0x6bc0 <__divmodhi4+0xa>
    6bbc:	00 94       	com	r0
    6bbe:	06 d0       	rcall	.+12     	; 0x6bcc <__divmodhi4_neg1>
    6bc0:	77 fd       	sbrc	r23, 7
    6bc2:	08 d0       	rcall	.+16     	; 0x6bd4 <__divmodhi4_neg2>
    6bc4:	1a d0       	rcall	.+52     	; 0x6bfa <__udivmodhi4>
    6bc6:	07 fc       	sbrc	r0, 7
    6bc8:	05 d0       	rcall	.+10     	; 0x6bd4 <__divmodhi4_neg2>
    6bca:	3e f4       	brtc	.+14     	; 0x6bda <__divmodhi4_exit>

00006bcc <__divmodhi4_neg1>:
    6bcc:	90 95       	com	r25
    6bce:	81 95       	neg	r24
    6bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd2:	08 95       	ret

00006bd4 <__divmodhi4_neg2>:
    6bd4:	70 95       	com	r23
    6bd6:	61 95       	neg	r22
    6bd8:	7f 4f       	sbci	r23, 0xFF	; 255

00006bda <__divmodhi4_exit>:
    6bda:	08 95       	ret

00006bdc <__umulhisi3>:
    6bdc:	a2 9f       	mul	r26, r18
    6bde:	b0 01       	movw	r22, r0
    6be0:	b3 9f       	mul	r27, r19
    6be2:	c0 01       	movw	r24, r0
    6be4:	a3 9f       	mul	r26, r19
    6be6:	70 0d       	add	r23, r0
    6be8:	81 1d       	adc	r24, r1
    6bea:	11 24       	eor	r1, r1
    6bec:	91 1d       	adc	r25, r1
    6bee:	b2 9f       	mul	r27, r18
    6bf0:	70 0d       	add	r23, r0
    6bf2:	81 1d       	adc	r24, r1
    6bf4:	11 24       	eor	r1, r1
    6bf6:	91 1d       	adc	r25, r1
    6bf8:	08 95       	ret

00006bfa <__udivmodhi4>:
    6bfa:	aa 1b       	sub	r26, r26
    6bfc:	bb 1b       	sub	r27, r27
    6bfe:	51 e1       	ldi	r21, 0x11	; 17
    6c00:	07 c0       	rjmp	.+14     	; 0x6c10 <__udivmodhi4_ep>

00006c02 <__udivmodhi4_loop>:
    6c02:	aa 1f       	adc	r26, r26
    6c04:	bb 1f       	adc	r27, r27
    6c06:	a6 17       	cp	r26, r22
    6c08:	b7 07       	cpc	r27, r23
    6c0a:	10 f0       	brcs	.+4      	; 0x6c10 <__udivmodhi4_ep>
    6c0c:	a6 1b       	sub	r26, r22
    6c0e:	b7 0b       	sbc	r27, r23

00006c10 <__udivmodhi4_ep>:
    6c10:	88 1f       	adc	r24, r24
    6c12:	99 1f       	adc	r25, r25
    6c14:	5a 95       	dec	r21
    6c16:	a9 f7       	brne	.-22     	; 0x6c02 <__udivmodhi4_loop>
    6c18:	80 95       	com	r24
    6c1a:	90 95       	com	r25
    6c1c:	bc 01       	movw	r22, r24
    6c1e:	cd 01       	movw	r24, r26
    6c20:	08 95       	ret

00006c22 <__ftoa_engine>:
    6c22:	28 30       	cpi	r18, 0x08	; 8
    6c24:	08 f0       	brcs	.+2      	; 0x6c28 <__ftoa_engine+0x6>
    6c26:	27 e0       	ldi	r18, 0x07	; 7
    6c28:	33 27       	eor	r19, r19
    6c2a:	da 01       	movw	r26, r20
    6c2c:	99 0f       	add	r25, r25
    6c2e:	31 1d       	adc	r19, r1
    6c30:	87 fd       	sbrc	r24, 7
    6c32:	91 60       	ori	r25, 0x01	; 1
    6c34:	00 96       	adiw	r24, 0x00	; 0
    6c36:	61 05       	cpc	r22, r1
    6c38:	71 05       	cpc	r23, r1
    6c3a:	39 f4       	brne	.+14     	; 0x6c4a <__ftoa_engine+0x28>
    6c3c:	32 60       	ori	r19, 0x02	; 2
    6c3e:	2e 5f       	subi	r18, 0xFE	; 254
    6c40:	3d 93       	st	X+, r19
    6c42:	30 e3       	ldi	r19, 0x30	; 48
    6c44:	2a 95       	dec	r18
    6c46:	e1 f7       	brne	.-8      	; 0x6c40 <__ftoa_engine+0x1e>
    6c48:	08 95       	ret
    6c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    6c4c:	30 f0       	brcs	.+12     	; 0x6c5a <__ftoa_engine+0x38>
    6c4e:	80 38       	cpi	r24, 0x80	; 128
    6c50:	71 05       	cpc	r23, r1
    6c52:	61 05       	cpc	r22, r1
    6c54:	09 f0       	breq	.+2      	; 0x6c58 <__ftoa_engine+0x36>
    6c56:	3c 5f       	subi	r19, 0xFC	; 252
    6c58:	3c 5f       	subi	r19, 0xFC	; 252
    6c5a:	3d 93       	st	X+, r19
    6c5c:	91 30       	cpi	r25, 0x01	; 1
    6c5e:	08 f0       	brcs	.+2      	; 0x6c62 <__ftoa_engine+0x40>
    6c60:	80 68       	ori	r24, 0x80	; 128
    6c62:	91 1d       	adc	r25, r1
    6c64:	df 93       	push	r29
    6c66:	cf 93       	push	r28
    6c68:	1f 93       	push	r17
    6c6a:	0f 93       	push	r16
    6c6c:	ff 92       	push	r15
    6c6e:	ef 92       	push	r14
    6c70:	19 2f       	mov	r17, r25
    6c72:	98 7f       	andi	r25, 0xF8	; 248
    6c74:	96 95       	lsr	r25
    6c76:	e9 2f       	mov	r30, r25
    6c78:	96 95       	lsr	r25
    6c7a:	96 95       	lsr	r25
    6c7c:	e9 0f       	add	r30, r25
    6c7e:	ff 27       	eor	r31, r31
    6c80:	ee 56       	subi	r30, 0x6E	; 110
    6c82:	fe 4f       	sbci	r31, 0xFE	; 254
    6c84:	99 27       	eor	r25, r25
    6c86:	33 27       	eor	r19, r19
    6c88:	ee 24       	eor	r14, r14
    6c8a:	ff 24       	eor	r15, r15
    6c8c:	a7 01       	movw	r20, r14
    6c8e:	e7 01       	movw	r28, r14
    6c90:	05 90       	lpm	r0, Z+
    6c92:	08 94       	sec
    6c94:	07 94       	ror	r0
    6c96:	28 f4       	brcc	.+10     	; 0x6ca2 <__ftoa_engine+0x80>
    6c98:	36 0f       	add	r19, r22
    6c9a:	e7 1e       	adc	r14, r23
    6c9c:	f8 1e       	adc	r15, r24
    6c9e:	49 1f       	adc	r20, r25
    6ca0:	51 1d       	adc	r21, r1
    6ca2:	66 0f       	add	r22, r22
    6ca4:	77 1f       	adc	r23, r23
    6ca6:	88 1f       	adc	r24, r24
    6ca8:	99 1f       	adc	r25, r25
    6caa:	06 94       	lsr	r0
    6cac:	a1 f7       	brne	.-24     	; 0x6c96 <__ftoa_engine+0x74>
    6cae:	05 90       	lpm	r0, Z+
    6cb0:	07 94       	ror	r0
    6cb2:	28 f4       	brcc	.+10     	; 0x6cbe <__ftoa_engine+0x9c>
    6cb4:	e7 0e       	add	r14, r23
    6cb6:	f8 1e       	adc	r15, r24
    6cb8:	49 1f       	adc	r20, r25
    6cba:	56 1f       	adc	r21, r22
    6cbc:	c1 1d       	adc	r28, r1
    6cbe:	77 0f       	add	r23, r23
    6cc0:	88 1f       	adc	r24, r24
    6cc2:	99 1f       	adc	r25, r25
    6cc4:	66 1f       	adc	r22, r22
    6cc6:	06 94       	lsr	r0
    6cc8:	a1 f7       	brne	.-24     	; 0x6cb2 <__ftoa_engine+0x90>
    6cca:	05 90       	lpm	r0, Z+
    6ccc:	07 94       	ror	r0
    6cce:	28 f4       	brcc	.+10     	; 0x6cda <__ftoa_engine+0xb8>
    6cd0:	f8 0e       	add	r15, r24
    6cd2:	49 1f       	adc	r20, r25
    6cd4:	56 1f       	adc	r21, r22
    6cd6:	c7 1f       	adc	r28, r23
    6cd8:	d1 1d       	adc	r29, r1
    6cda:	88 0f       	add	r24, r24
    6cdc:	99 1f       	adc	r25, r25
    6cde:	66 1f       	adc	r22, r22
    6ce0:	77 1f       	adc	r23, r23
    6ce2:	06 94       	lsr	r0
    6ce4:	a1 f7       	brne	.-24     	; 0x6cce <__ftoa_engine+0xac>
    6ce6:	05 90       	lpm	r0, Z+
    6ce8:	07 94       	ror	r0
    6cea:	20 f4       	brcc	.+8      	; 0x6cf4 <__ftoa_engine+0xd2>
    6cec:	49 0f       	add	r20, r25
    6cee:	56 1f       	adc	r21, r22
    6cf0:	c7 1f       	adc	r28, r23
    6cf2:	d8 1f       	adc	r29, r24
    6cf4:	99 0f       	add	r25, r25
    6cf6:	66 1f       	adc	r22, r22
    6cf8:	77 1f       	adc	r23, r23
    6cfa:	88 1f       	adc	r24, r24
    6cfc:	06 94       	lsr	r0
    6cfe:	a9 f7       	brne	.-22     	; 0x6cea <__ftoa_engine+0xc8>
    6d00:	84 91       	lpm	r24, Z
    6d02:	10 95       	com	r17
    6d04:	17 70       	andi	r17, 0x07	; 7
    6d06:	41 f0       	breq	.+16     	; 0x6d18 <__ftoa_engine+0xf6>
    6d08:	d6 95       	lsr	r29
    6d0a:	c7 95       	ror	r28
    6d0c:	57 95       	ror	r21
    6d0e:	47 95       	ror	r20
    6d10:	f7 94       	ror	r15
    6d12:	e7 94       	ror	r14
    6d14:	1a 95       	dec	r17
    6d16:	c1 f7       	brne	.-16     	; 0x6d08 <__ftoa_engine+0xe6>
    6d18:	e8 e3       	ldi	r30, 0x38	; 56
    6d1a:	f1 e0       	ldi	r31, 0x01	; 1
    6d1c:	68 94       	set
    6d1e:	15 90       	lpm	r1, Z+
    6d20:	15 91       	lpm	r17, Z+
    6d22:	35 91       	lpm	r19, Z+
    6d24:	65 91       	lpm	r22, Z+
    6d26:	95 91       	lpm	r25, Z+
    6d28:	05 90       	lpm	r0, Z+
    6d2a:	7f e2       	ldi	r23, 0x2F	; 47
    6d2c:	73 95       	inc	r23
    6d2e:	e1 18       	sub	r14, r1
    6d30:	f1 0a       	sbc	r15, r17
    6d32:	43 0b       	sbc	r20, r19
    6d34:	56 0b       	sbc	r21, r22
    6d36:	c9 0b       	sbc	r28, r25
    6d38:	d0 09       	sbc	r29, r0
    6d3a:	c0 f7       	brcc	.-16     	; 0x6d2c <__ftoa_engine+0x10a>
    6d3c:	e1 0c       	add	r14, r1
    6d3e:	f1 1e       	adc	r15, r17
    6d40:	43 1f       	adc	r20, r19
    6d42:	56 1f       	adc	r21, r22
    6d44:	c9 1f       	adc	r28, r25
    6d46:	d0 1d       	adc	r29, r0
    6d48:	7e f4       	brtc	.+30     	; 0x6d68 <__ftoa_engine+0x146>
    6d4a:	70 33       	cpi	r23, 0x30	; 48
    6d4c:	11 f4       	brne	.+4      	; 0x6d52 <__ftoa_engine+0x130>
    6d4e:	8a 95       	dec	r24
    6d50:	e6 cf       	rjmp	.-52     	; 0x6d1e <__ftoa_engine+0xfc>
    6d52:	e8 94       	clt
    6d54:	01 50       	subi	r16, 0x01	; 1
    6d56:	30 f0       	brcs	.+12     	; 0x6d64 <__ftoa_engine+0x142>
    6d58:	08 0f       	add	r16, r24
    6d5a:	0a f4       	brpl	.+2      	; 0x6d5e <__ftoa_engine+0x13c>
    6d5c:	00 27       	eor	r16, r16
    6d5e:	02 17       	cp	r16, r18
    6d60:	08 f4       	brcc	.+2      	; 0x6d64 <__ftoa_engine+0x142>
    6d62:	20 2f       	mov	r18, r16
    6d64:	23 95       	inc	r18
    6d66:	02 2f       	mov	r16, r18
    6d68:	7a 33       	cpi	r23, 0x3A	; 58
    6d6a:	28 f0       	brcs	.+10     	; 0x6d76 <__ftoa_engine+0x154>
    6d6c:	79 e3       	ldi	r23, 0x39	; 57
    6d6e:	7d 93       	st	X+, r23
    6d70:	2a 95       	dec	r18
    6d72:	e9 f7       	brne	.-6      	; 0x6d6e <__ftoa_engine+0x14c>
    6d74:	10 c0       	rjmp	.+32     	; 0x6d96 <__ftoa_engine+0x174>
    6d76:	7d 93       	st	X+, r23
    6d78:	2a 95       	dec	r18
    6d7a:	89 f6       	brne	.-94     	; 0x6d1e <__ftoa_engine+0xfc>
    6d7c:	06 94       	lsr	r0
    6d7e:	97 95       	ror	r25
    6d80:	67 95       	ror	r22
    6d82:	37 95       	ror	r19
    6d84:	17 95       	ror	r17
    6d86:	17 94       	ror	r1
    6d88:	e1 18       	sub	r14, r1
    6d8a:	f1 0a       	sbc	r15, r17
    6d8c:	43 0b       	sbc	r20, r19
    6d8e:	56 0b       	sbc	r21, r22
    6d90:	c9 0b       	sbc	r28, r25
    6d92:	d0 09       	sbc	r29, r0
    6d94:	98 f0       	brcs	.+38     	; 0x6dbc <__ftoa_engine+0x19a>
    6d96:	23 95       	inc	r18
    6d98:	7e 91       	ld	r23, -X
    6d9a:	73 95       	inc	r23
    6d9c:	7a 33       	cpi	r23, 0x3A	; 58
    6d9e:	08 f0       	brcs	.+2      	; 0x6da2 <__ftoa_engine+0x180>
    6da0:	70 e3       	ldi	r23, 0x30	; 48
    6da2:	7c 93       	st	X, r23
    6da4:	20 13       	cpse	r18, r16
    6da6:	b8 f7       	brcc	.-18     	; 0x6d96 <__ftoa_engine+0x174>
    6da8:	7e 91       	ld	r23, -X
    6daa:	70 61       	ori	r23, 0x10	; 16
    6dac:	7d 93       	st	X+, r23
    6dae:	30 f0       	brcs	.+12     	; 0x6dbc <__ftoa_engine+0x19a>
    6db0:	83 95       	inc	r24
    6db2:	71 e3       	ldi	r23, 0x31	; 49
    6db4:	7d 93       	st	X+, r23
    6db6:	70 e3       	ldi	r23, 0x30	; 48
    6db8:	2a 95       	dec	r18
    6dba:	e1 f7       	brne	.-8      	; 0x6db4 <__ftoa_engine+0x192>
    6dbc:	11 24       	eor	r1, r1
    6dbe:	ef 90       	pop	r14
    6dc0:	ff 90       	pop	r15
    6dc2:	0f 91       	pop	r16
    6dc4:	1f 91       	pop	r17
    6dc6:	cf 91       	pop	r28
    6dc8:	df 91       	pop	r29
    6dca:	99 27       	eor	r25, r25
    6dcc:	87 fd       	sbrc	r24, 7
    6dce:	90 95       	com	r25
    6dd0:	08 95       	ret

00006dd2 <strnlen_P>:
    6dd2:	fc 01       	movw	r30, r24
    6dd4:	05 90       	lpm	r0, Z+
    6dd6:	61 50       	subi	r22, 0x01	; 1
    6dd8:	70 40       	sbci	r23, 0x00	; 0
    6dda:	01 10       	cpse	r0, r1
    6ddc:	d8 f7       	brcc	.-10     	; 0x6dd4 <strnlen_P+0x2>
    6dde:	80 95       	com	r24
    6de0:	90 95       	com	r25
    6de2:	8e 0f       	add	r24, r30
    6de4:	9f 1f       	adc	r25, r31
    6de6:	08 95       	ret

00006de8 <memcpy>:
    6de8:	fb 01       	movw	r30, r22
    6dea:	dc 01       	movw	r26, r24
    6dec:	02 c0       	rjmp	.+4      	; 0x6df2 <memcpy+0xa>
    6dee:	01 90       	ld	r0, Z+
    6df0:	0d 92       	st	X+, r0
    6df2:	41 50       	subi	r20, 0x01	; 1
    6df4:	50 40       	sbci	r21, 0x00	; 0
    6df6:	d8 f7       	brcc	.-10     	; 0x6dee <memcpy+0x6>
    6df8:	08 95       	ret

00006dfa <strnlen>:
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	61 50       	subi	r22, 0x01	; 1
    6dfe:	70 40       	sbci	r23, 0x00	; 0
    6e00:	01 90       	ld	r0, Z+
    6e02:	01 10       	cpse	r0, r1
    6e04:	d8 f7       	brcc	.-10     	; 0x6dfc <strnlen+0x2>
    6e06:	80 95       	com	r24
    6e08:	90 95       	com	r25
    6e0a:	8e 0f       	add	r24, r30
    6e0c:	9f 1f       	adc	r25, r31
    6e0e:	08 95       	ret

00006e10 <fputc>:
    6e10:	0f 93       	push	r16
    6e12:	1f 93       	push	r17
    6e14:	cf 93       	push	r28
    6e16:	df 93       	push	r29
    6e18:	fb 01       	movw	r30, r22
    6e1a:	23 81       	ldd	r18, Z+3	; 0x03
    6e1c:	21 fd       	sbrc	r18, 1
    6e1e:	03 c0       	rjmp	.+6      	; 0x6e26 <fputc+0x16>
    6e20:	8f ef       	ldi	r24, 0xFF	; 255
    6e22:	9f ef       	ldi	r25, 0xFF	; 255
    6e24:	2c c0       	rjmp	.+88     	; 0x6e7e <fputc+0x6e>
    6e26:	22 ff       	sbrs	r18, 2
    6e28:	16 c0       	rjmp	.+44     	; 0x6e56 <fputc+0x46>
    6e2a:	46 81       	ldd	r20, Z+6	; 0x06
    6e2c:	57 81       	ldd	r21, Z+7	; 0x07
    6e2e:	24 81       	ldd	r18, Z+4	; 0x04
    6e30:	35 81       	ldd	r19, Z+5	; 0x05
    6e32:	42 17       	cp	r20, r18
    6e34:	53 07       	cpc	r21, r19
    6e36:	44 f4       	brge	.+16     	; 0x6e48 <fputc+0x38>
    6e38:	a0 81       	ld	r26, Z
    6e3a:	b1 81       	ldd	r27, Z+1	; 0x01
    6e3c:	9d 01       	movw	r18, r26
    6e3e:	2f 5f       	subi	r18, 0xFF	; 255
    6e40:	3f 4f       	sbci	r19, 0xFF	; 255
    6e42:	31 83       	std	Z+1, r19	; 0x01
    6e44:	20 83       	st	Z, r18
    6e46:	8c 93       	st	X, r24
    6e48:	26 81       	ldd	r18, Z+6	; 0x06
    6e4a:	37 81       	ldd	r19, Z+7	; 0x07
    6e4c:	2f 5f       	subi	r18, 0xFF	; 255
    6e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e50:	37 83       	std	Z+7, r19	; 0x07
    6e52:	26 83       	std	Z+6, r18	; 0x06
    6e54:	14 c0       	rjmp	.+40     	; 0x6e7e <fputc+0x6e>
    6e56:	8b 01       	movw	r16, r22
    6e58:	ec 01       	movw	r28, r24
    6e5a:	fb 01       	movw	r30, r22
    6e5c:	00 84       	ldd	r0, Z+8	; 0x08
    6e5e:	f1 85       	ldd	r31, Z+9	; 0x09
    6e60:	e0 2d       	mov	r30, r0
    6e62:	19 95       	eicall
    6e64:	89 2b       	or	r24, r25
    6e66:	e1 f6       	brne	.-72     	; 0x6e20 <fputc+0x10>
    6e68:	d8 01       	movw	r26, r16
    6e6a:	16 96       	adiw	r26, 0x06	; 6
    6e6c:	8d 91       	ld	r24, X+
    6e6e:	9c 91       	ld	r25, X
    6e70:	17 97       	sbiw	r26, 0x07	; 7
    6e72:	01 96       	adiw	r24, 0x01	; 1
    6e74:	17 96       	adiw	r26, 0x07	; 7
    6e76:	9c 93       	st	X, r25
    6e78:	8e 93       	st	-X, r24
    6e7a:	16 97       	sbiw	r26, 0x06	; 6
    6e7c:	ce 01       	movw	r24, r28
    6e7e:	df 91       	pop	r29
    6e80:	cf 91       	pop	r28
    6e82:	1f 91       	pop	r17
    6e84:	0f 91       	pop	r16
    6e86:	08 95       	ret

00006e88 <vsprintf>:
    6e88:	0f 93       	push	r16
    6e8a:	1f 93       	push	r17
    6e8c:	cf 93       	push	r28
    6e8e:	df 93       	push	r29
    6e90:	cd b7       	in	r28, 0x3d	; 61
    6e92:	de b7       	in	r29, 0x3e	; 62
    6e94:	2e 97       	sbiw	r28, 0x0e	; 14
    6e96:	0f b6       	in	r0, 0x3f	; 63
    6e98:	f8 94       	cli
    6e9a:	de bf       	out	0x3e, r29	; 62
    6e9c:	0f be       	out	0x3f, r0	; 63
    6e9e:	cd bf       	out	0x3d, r28	; 61
    6ea0:	8c 01       	movw	r16, r24
    6ea2:	86 e0       	ldi	r24, 0x06	; 6
    6ea4:	8c 83       	std	Y+4, r24	; 0x04
    6ea6:	1a 83       	std	Y+2, r17	; 0x02
    6ea8:	09 83       	std	Y+1, r16	; 0x01
    6eaa:	8f ef       	ldi	r24, 0xFF	; 255
    6eac:	9f e7       	ldi	r25, 0x7F	; 127
    6eae:	9e 83       	std	Y+6, r25	; 0x06
    6eb0:	8d 83       	std	Y+5, r24	; 0x05
    6eb2:	ce 01       	movw	r24, r28
    6eb4:	01 96       	adiw	r24, 0x01	; 1
    6eb6:	f6 da       	rcall	.-2580   	; 0x64a4 <vfprintf>
    6eb8:	ef 81       	ldd	r30, Y+7	; 0x07
    6eba:	f8 85       	ldd	r31, Y+8	; 0x08
    6ebc:	e0 0f       	add	r30, r16
    6ebe:	f1 1f       	adc	r31, r17
    6ec0:	10 82       	st	Z, r1
    6ec2:	2e 96       	adiw	r28, 0x0e	; 14
    6ec4:	0f b6       	in	r0, 0x3f	; 63
    6ec6:	f8 94       	cli
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	0f be       	out	0x3f, r0	; 63
    6ecc:	cd bf       	out	0x3d, r28	; 61
    6ece:	df 91       	pop	r29
    6ed0:	cf 91       	pop	r28
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	08 95       	ret

00006ed8 <__ultoa_invert>:
    6ed8:	fa 01       	movw	r30, r20
    6eda:	aa 27       	eor	r26, r26
    6edc:	28 30       	cpi	r18, 0x08	; 8
    6ede:	51 f1       	breq	.+84     	; 0x6f34 <__ultoa_invert+0x5c>
    6ee0:	20 31       	cpi	r18, 0x10	; 16
    6ee2:	81 f1       	breq	.+96     	; 0x6f44 <__ultoa_invert+0x6c>
    6ee4:	e8 94       	clt
    6ee6:	6f 93       	push	r22
    6ee8:	6e 7f       	andi	r22, 0xFE	; 254
    6eea:	6e 5f       	subi	r22, 0xFE	; 254
    6eec:	7f 4f       	sbci	r23, 0xFF	; 255
    6eee:	8f 4f       	sbci	r24, 0xFF	; 255
    6ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef2:	af 4f       	sbci	r26, 0xFF	; 255
    6ef4:	b1 e0       	ldi	r27, 0x01	; 1
    6ef6:	3e d0       	rcall	.+124    	; 0x6f74 <__ultoa_invert+0x9c>
    6ef8:	b4 e0       	ldi	r27, 0x04	; 4
    6efa:	3c d0       	rcall	.+120    	; 0x6f74 <__ultoa_invert+0x9c>
    6efc:	67 0f       	add	r22, r23
    6efe:	78 1f       	adc	r23, r24
    6f00:	89 1f       	adc	r24, r25
    6f02:	9a 1f       	adc	r25, r26
    6f04:	a1 1d       	adc	r26, r1
    6f06:	68 0f       	add	r22, r24
    6f08:	79 1f       	adc	r23, r25
    6f0a:	8a 1f       	adc	r24, r26
    6f0c:	91 1d       	adc	r25, r1
    6f0e:	a1 1d       	adc	r26, r1
    6f10:	6a 0f       	add	r22, r26
    6f12:	71 1d       	adc	r23, r1
    6f14:	81 1d       	adc	r24, r1
    6f16:	91 1d       	adc	r25, r1
    6f18:	a1 1d       	adc	r26, r1
    6f1a:	20 d0       	rcall	.+64     	; 0x6f5c <__ultoa_invert+0x84>
    6f1c:	09 f4       	brne	.+2      	; 0x6f20 <__ultoa_invert+0x48>
    6f1e:	68 94       	set
    6f20:	3f 91       	pop	r19
    6f22:	2a e0       	ldi	r18, 0x0A	; 10
    6f24:	26 9f       	mul	r18, r22
    6f26:	11 24       	eor	r1, r1
    6f28:	30 19       	sub	r19, r0
    6f2a:	30 5d       	subi	r19, 0xD0	; 208
    6f2c:	31 93       	st	Z+, r19
    6f2e:	de f6       	brtc	.-74     	; 0x6ee6 <__ultoa_invert+0xe>
    6f30:	cf 01       	movw	r24, r30
    6f32:	08 95       	ret
    6f34:	46 2f       	mov	r20, r22
    6f36:	47 70       	andi	r20, 0x07	; 7
    6f38:	40 5d       	subi	r20, 0xD0	; 208
    6f3a:	41 93       	st	Z+, r20
    6f3c:	b3 e0       	ldi	r27, 0x03	; 3
    6f3e:	0f d0       	rcall	.+30     	; 0x6f5e <__ultoa_invert+0x86>
    6f40:	c9 f7       	brne	.-14     	; 0x6f34 <__ultoa_invert+0x5c>
    6f42:	f6 cf       	rjmp	.-20     	; 0x6f30 <__ultoa_invert+0x58>
    6f44:	46 2f       	mov	r20, r22
    6f46:	4f 70       	andi	r20, 0x0F	; 15
    6f48:	40 5d       	subi	r20, 0xD0	; 208
    6f4a:	4a 33       	cpi	r20, 0x3A	; 58
    6f4c:	18 f0       	brcs	.+6      	; 0x6f54 <__ultoa_invert+0x7c>
    6f4e:	49 5d       	subi	r20, 0xD9	; 217
    6f50:	31 fd       	sbrc	r19, 1
    6f52:	40 52       	subi	r20, 0x20	; 32
    6f54:	41 93       	st	Z+, r20
    6f56:	02 d0       	rcall	.+4      	; 0x6f5c <__ultoa_invert+0x84>
    6f58:	a9 f7       	brne	.-22     	; 0x6f44 <__ultoa_invert+0x6c>
    6f5a:	ea cf       	rjmp	.-44     	; 0x6f30 <__ultoa_invert+0x58>
    6f5c:	b4 e0       	ldi	r27, 0x04	; 4
    6f5e:	a6 95       	lsr	r26
    6f60:	97 95       	ror	r25
    6f62:	87 95       	ror	r24
    6f64:	77 95       	ror	r23
    6f66:	67 95       	ror	r22
    6f68:	ba 95       	dec	r27
    6f6a:	c9 f7       	brne	.-14     	; 0x6f5e <__ultoa_invert+0x86>
    6f6c:	00 97       	sbiw	r24, 0x00	; 0
    6f6e:	61 05       	cpc	r22, r1
    6f70:	71 05       	cpc	r23, r1
    6f72:	08 95       	ret
    6f74:	9b 01       	movw	r18, r22
    6f76:	ac 01       	movw	r20, r24
    6f78:	0a 2e       	mov	r0, r26
    6f7a:	06 94       	lsr	r0
    6f7c:	57 95       	ror	r21
    6f7e:	47 95       	ror	r20
    6f80:	37 95       	ror	r19
    6f82:	27 95       	ror	r18
    6f84:	ba 95       	dec	r27
    6f86:	c9 f7       	brne	.-14     	; 0x6f7a <__ultoa_invert+0xa2>
    6f88:	62 0f       	add	r22, r18
    6f8a:	73 1f       	adc	r23, r19
    6f8c:	84 1f       	adc	r24, r20
    6f8e:	95 1f       	adc	r25, r21
    6f90:	a0 1d       	adc	r26, r0
    6f92:	08 95       	ret

00006f94 <_exit>:
    6f94:	f8 94       	cli

00006f96 <__stop_program>:
    6f96:	ff cf       	rjmp	.-2      	; 0x6f96 <__stop_program>
